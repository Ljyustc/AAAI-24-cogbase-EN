{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # Sum of squares formula: 1² + 2² + 3² + ...... + n² = 1/6 * n(n + 1)(n + 2)\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    ans = sum_of_squares(15) - sum_of_squares(4)\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert start time to minutes\n    end_time = 10 * 60   # Convert end time to minutes\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for students in range(1, 1000):  # Assuming the number of students isn't too large\n        if ((students + 5) ** 0.5) % 1 == 0:  # Check if square root is an integer\n            # Now check for the larger square\n            if ((((students + 5) + 1) + 26) ** 0.5) % 1 == 0:\n                return students\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining = 90\n    # Jia Jia spent 40% of the remaining money on a skirt, so she is left with 60% of the money after buying the skirt.\n    before_skirt = remaining / 0.6\n    # She had spent 20% of her original amount of money on a bag, so she had 80% of her money left before buying the skirt.\n    original_money = before_skirt / 0.8\n    return original_money\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let's denote x as the number of apples Amy gives to John.\n    # After giving x apples, Amy will have amy - x apples and John will have john + x apples.\n    # According to the problem, Amy must have 4 more apples than John.\n    # So, the equation will be: amy - x = (john + x) + 4\n\n    # Now, we will solve for x.\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sell_price = 99000\n    # Let cost_price_profit be the cost price of the house which was sold at a profit\n    cost_price_profit = sell_price / 1.1  # because 10% profit means selling at 110% of cost price\n    # Let cost_price_loss be the cost price of the house which was sold at a loss\n    cost_price_loss = sell_price / 0.9  # because 10% loss means selling at 90% of cost price\n    total_cost_price = cost_price_profit + cost_price_loss\n    total_sell_price = 2 * sell_price\n    # profit_loss is positive for profit and negative for loss\n    profit_loss = total_sell_price - total_cost_price\n\n    return profit_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n    # This is a permutation problem since the arrangement/order of the selected plants matters.\n    return factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saves = 13\n    ali_saves = 5 + 3 * jane_saves\n    return ali_saves\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # Since there are 15 oranges, if we count backwards from a winning position (1 orange),\n    # we realize that leaving 13 oranges after Fred's turn gives George no chance to win.\n    \n    # George can only take 1, 2, or 3 oranges.\n    # We can count backwards from the winning position to ensure victory:\n    # 1 orange -> Fred wins\n    # 2, 3, 4 oranges -> Fred can take 1, 2, or 3 respectively to win\n    # These are losing positions for George: 5, 6, 7 (Fred takes 4 - x oranges to win)\n    \n    # If Fred wants to ensure his win, he has to leave George with a multiple of 4.\n    # As such, the next losing position for George is 8, then 12.\n    \n    # To make sure Fred wins, he needs to take enough oranges to leave 12 on the table,\n    # which means he should take 15 - 12 = 3 oranges.\n    \n    return 3\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    toms_age = symbols('toms_age')\n    \n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n    \n    age_solution = solve(equation, toms_age)\n    \n    return age_solution[0]\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations without dresses\n    without_dresses = shirts * pants * shoes\n\n    # Combinations with dresses and shoes\n    with_dresses_shoes = dresses * shoes\n\n    # Combinations with dresses and heels\n    with_dresses_heels = dresses * heels\n\n    # Total combinations\n    total_combinations = without_dresses + with_dresses_shoes + with_dresses_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students // 6\n    biology_students = (2 * total_students) // 9\n    chemistry_students = total_students - (physics_students + biology_students)\n\n    return chemistry_students\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n    \n    if fraction_value > decimal_value:\n        ans = \"3/20 is larger\"\n    elif fraction_value < decimal_value:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"They are equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    total_cupcakes = 90\n    cupcakes_per_set = 15\n    eggs_per_set = 3\n\n    sets = total_cupcakes / cupcakes_per_set\n    total_eggs = sets * eggs_per_set\n\n    return total_eggs\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of each type of note\n    x = symbols('x')\n\n    # we know that 5*x + 10*x + 20*x = 280\n    equation = Eq(5 * x + 10 * x + 20 * x, 280)\n\n    # solve the equation\n    sol = solve(equation, x)\n\n    # total number of notes is 3 times the number of each type since there are equal numbers of each\n    total_notes = 3 * sol[x]\n\n    return total_notes\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara's jogging speed is 8 km/h\n    jogging_speed = 8  # in km/h\n\n    # She jogged from 6.30am to 8.30am, which is 2 hours\n    jogging_time = 2  # in hours\n\n    # She walked at half the jogging speed after 8.30am\n    walking_speed = jogging_speed / 2  # in km/h\n\n    # She walked from 8.30am to 9.30am, which is 1 hour\n    walking_time = 1  # in hours\n\n    # Calculate the distance covered during jogging and walking\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    # First, let's fix A's position in the middle.\n    # There are 3 positions where A can be placed to be in the middle of B and C.\n    # If you picture the lineup as a sequence of 5 positions, A can only be in positions 2, 3, or 4.\n    # Position 1 forces B and C to be next to each other, and position 5 doesn't leave space for two people on one side.\n    \n    # For each position A can occupy, we have two people (B and C) to arrange on either side of A.\n    # These two people can be arranged in 2! = 2 ways.\n    \n    # Finally, we have two other students (D and E) to arrange in the remaining two spots, which can be done in 2! = 2 ways.\n    \n    # Thus, the total number of ways:\n    num_ways_A = 3   # number of ways to place A in the middle\n    num_ways_BC = 2  # number of ways to place B and C around A\n    num_ways_DE = 2  # number of ways to place D and E in the remaining spots\n    \n    # Total number of ways is the product of the number of ways to place A, B, C, and D, E.\n    total_ways = num_ways_A * num_ways_BC * num_ways_DE\n    return total_ways\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_op1(M, N):\n        return M * N + N + 1\n\n    def custom_op2(M, N):\n        return 8 * M - N * N\n\n    ans = custom_op2(custom_op1(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Last digit of powers of 2 cycle every 4: 2, 4, 8, 6\n    # So last digit of (2^100) is the same as last digit of (2^0) which is 6\n    last_digit_2 = 6\n\n    # Last digit of powers of 7 cycle every 4: 7, 9, 3, 1\n    # So last digit of (7^100) is the same as last digit of (7^0) which is 1\n    last_digit_7 = 1\n\n    # Last digit of powers of 9 cycle every 2: 9, 1\n    # So last digit of (9^100) is the same as last digit of (9^0) which is 1\n    last_digit_9 = 1\n\n    # Now, multiply the three last digits to get the last digit of the entire expression\n    last_digit_expression = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return last_digit_expression\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculating the sum of fractions\n    frac_sum = sum(Fraction(1, d) for d in range(1, 6))\n    \n    # Convert the fraction to have 60 as the denominator\n    A = frac_sum * 60\n    \n    # Take only the numerator part to get the value of A\n    return A.numerator\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    p = 2\n    while True:\n        if is_prime(p) and is_prime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # Only odd numbers are squared and the last odd is 19\n    ans = (n * (n + 1) * (2*n + 1)) // 6  # Using the sum of squares formula\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # We are looking for the smallest number of marbles in the biggest pile,\n    # given that there's a total of 16 marbles and each pile has a different number of marbles.\n\n    # Start by assuming the smallest number for the largest pile.\n    # Iterate over possible largest pile sizes starting from 4 (because there must be 4 different piles).\n    for largest in range(4, 16):\n        remaining = 16 - largest  # Remainder after putting the largest number in one pile.\n        # Initialize piles list with the 'largest' number of marbles for the first pile.\n        piles = [largest]\n        \n        for i in range(3, 0, -1):  # We need three more piles.\n            # Iteratively add the largest possible number of marbles\n            # to the current pile which is less than the previous one.\n            if remaining - i > 0:\n                piles.append(i)\n                remaining -= i\n            else:\n                break  # If we can't proceed, break the loop.\n        \n        # If we managed to create 4 different piles with all 16 marbles, return the largest.\n        if len(piles) == 4 and sum(piles) == 16:\n            return largest\n\n    # This code should always return a value, but in case something goes wrong:\n    return None\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Assuming floors are evenly spaced and the speed is constant\n    # 3 intervals from 1st to 4th floor, hence 1 interval from 1st to 2nd floor\n    total_intervals = 3\n    time_per_interval = 12 / total_intervals  # time to go up one interval\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((i**2 + (i + 1)**2) / (i * (i + 1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 * 25 / 100\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    minibus_capacity = 6\n    minibusses_needed = (students + minibus_capacity - 1) // minibus_capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + 1/i\n    return product\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = hash_op(200, 199)\n    for i in range(188, 0, -1):\n        ans = hash_op(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # The sum of odd numbers cubed can be represented as (1^2 + 2^2 + ... + (n/2)^2)^2\n    # The sum of squares of first n natural numbers is n*(n+1)*(2*n+1)/6\n    # In our case we are interested in odd numbers, so we will only consider odd indices up to 13\n    \n    n = 13 // 2  # Since we want only odd numbers, we divide by 2 and take the integer part\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = sum_of_squares ** 2\n\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    corrected_avg_height = 163\n    incorrect_avg_height = 159\n    incorrectly_recorded_height = 126\n    actual_height = 162\n\n    height_difference = actual_height - incorrectly_recorded_height\n    avg_height_difference = corrected_avg_height - incorrect_avg_height\n    \n    num_girls = height_difference / avg_height_difference\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq((4/5) * beth, (2/5) * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    total_seashells = solutions[ken] + solutions[beth]\n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    num = 9876543\n    ans = num + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube in range(1, 50):\n        cube_number = cube ** 3\n        square = cube_number - 2\n        if (int(square ** 0.5)) ** 2 == square:\n            return square\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "from math import gcd\n\ndef solution():\n    ribbon_lengths = [56, 42, 84]\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n    return greatest_length\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n\n    num_containers = (total_apples + per_container - 1) // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n    \n    # total notes equation\n    equation1 = Eq(ten_notes + two_notes, 40)\n    \n    # spent notes equations\n    equation2 = Eq(ten_notes - 0.4*ten_notes, two_notes - 0.25*two_notes - 0.25*two_notes)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (ten_notes, two_notes))\n    \n    ten_notes_left = solutions[ten_notes]*0.6  # remaining $10 notes after spending 40%\n    two_notes_left = solutions[two_notes]*0.75  # remaining $2 notes after spending 25%\n    \n    # check if the remaining $10 notes are 4/5 of the remaining $2 notes\n    if ten_notes_left == two_notes_left * (4/5):\n        # calculate the cost of the gift\n        cost_of_gift = solutions[ten_notes]*10*0.4 + solutions[two_notes]*2*0.25\n        return cost_of_gift\n    else:\n        return \"The condition doesn't hold after solving the equations.\"\n        \nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Since each of the 3 kids has to get at least two oranges,\n    # we first give 2 oranges to each of them, which leaves us with\n    # 13 - 2*3 = 7 oranges to distribute freely among the 3 kids.\n    \n    # We can use the \"stars and bars\" combinatorial method to\n    # calculate the number of ways we can distribute n indistinguishable\n    # items into k distinguishable bins, which is given by the formula:\n    # (n + k - 1) choose k, where \"choose\" denotes a binomial coefficient.\n    \n    # In our case, we have 7 indistinguishable oranges (n = 7)\n    # and 3 distinguishable kids (k = 3), so we need to calculate\n    # (7 + 3 - 1) choose (3 - 1) == 9 choose 2.\n    \n    return comb(7 + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # original equation\n    equation1 = Eq(x + y, 11.63)\n    \n    # shifted decimal equation\n    equation2 = Eq(x + y/10, 5.87)\n\n    # solve equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # difference between two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # result multiplied by 100\n    ans = difference * 100\n\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # A number can't start with zero\n            continue\n        PASO = 1000 * P + 100 * A + 10 * S + O\n        if PASO % 2 == 0 and (P + A + S + O) % 3 == 0 and O % 5 == 0:\n            return PASO\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    num = 100\n    while True:\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let h be the amount of water Harry originally had\n    # Let l be the amount of water Liam originally had\n    h, l = symbols('h l')\n    \n    # Total water\n    total_water = 640  # in mL\n    \n    # Equation 1: Total amount of water before transfer\n    equation1 = Eq(h + l, total_water)\n    \n    # Equation 2: After transferring 90mL from Liam to Harry\n    # Harry has h+90, Liam has l-90\n    # Harry will have thrice the amount of water as Liam after transfer\n    equation2 = Eq(h + 90, 3 * (l - 90))\n    \n    # Solving equations\n    solutions = solve((equation1, equation2), (h, l))\n\n    # Harry's original amount of water\n    return solutions[h]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    initial = 3\n    n = 7\n    difference = 3\n    total = n/2 * (2*initial + (n-1)*difference)\n    return int(total)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let x be the number of days the wife takes to finish the barrel on her own\n    # The man finishes 1/15 of the barrel per day\n    # The wife finishes 1/x of the barrel per day\n    # Together they finish 1/12 of the barrel per day\n    # Therefore, 1/15 + 1/x = 1/12\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/15 + 1/x, 1/12)\n    days_wife = solve(equation, x)\n\n    return days_wife[0]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The increments between each hour are constant in an arithmetic sequence.\n    # We have the number of beans peeled from 9 to 10, 10 to 11, and 11 to 12\n    # We can see that the increments are 8 beans each hour (28 - 20 = 8, 36 - 28 = 8)\n    \n    # Calculate the number of beans peeled in the first hour by subtracting the increment from the 9 to 10 amount.\n    first_hour_beans = 20 - 8\n    \n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # first digit can't be 0 for a three-digit number\n        for j in range(10): # second digit\n            for k in range(10): # third digit\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "def solution():\n    from itertools import product\n\n    count = 0\n    \n    # iterate over the possible remaining numbers of white, red, and black balls within the given conditions\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(6 - 3, 7): # at least 2 black balls must remain so we start at 6 - 3\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n                # ensure that the total number of picked balls is 10\n                if white_picked + red_picked + black_picked == 10:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    base = 2**10\n    divisor = 3\n    remainder = base % divisor\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let the original number of pearls be x\n    # According to the problem:\n    # 1/2 fell onto the floor\n    # 1/4 rolled under a chair\n    # 1/6 fell into her lap\n    # 3 remained on the strand\n    # Therefore, (1/2)x + (1/4)x + (1/6)x + 3 = x\n    # To solve for x, we find a common denominator for the fractions, which is 12\n    # Hence, (6/12)x + (3/12)x + (2/12)x + 3 = x\n    # Combining the fractions, we get (11/12)x + 3 = x\n    # Subtract (11/12)x from both sides to get 3 = x - (11/12)x\n    # 3 = (1/12)x\n    # Finally, we find x by dividing both sides by (1/12)\n\n    x = 3 / (1/12)\n    return int(x)\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    diff = 2\n    while term < 100:\n        term += diff\n        diff += 2\n    return term - diff\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The arithmetic mean of three numbers is 120.\n    # Mean is sum of elements divided by number of elements\n    # sum_of_three_numbers / 3 = 120 \n    sum_of_three_numbers = 120 * 3\n    \n    # With the fourth number added, the mean of the four numbers becomes 150.\n    # (sum_of_three_numbers + fourth_number) / 4 = 150\n    # fourth_number is what we want to find\n    fourth_number = 150 * 4 - sum_of_three_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n\n    empty_basket_weight = full_weight - 2 * mangoes_half_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is the 6th from the front and Bud is the 6th from the end.\n    # There are 5 children between Pip and Bud, excluding Pip and Bud themselves.\n    \n    # If Pip is the 6th, then counting Pip there are 5 children in front of him.\n    # Bud is 6th from the end, so counting Bud there are 5 children behind him.\n    # Including Pip and Bud themselves in the total, and the 5 children between them,\n    # we need to add these 3 amounts together to get the total number of children.\n\n    total_children = (5 + 1) + 5 + (5 + 1)\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # 1st number, multiple of 7: form 7x\n    # 2nd number, even and multiple of 8: 7x + 2 -> even, form 8y. Therefore 7x + 2 which is 2 mod 8\n    # 3rd number, even and multiple of 9: 7x + 4 -> even, form 9z. Therefore 7x + 4 which is 4 mod 9\n    congruences = [(0,7), (2,8), (4,9)]\n    x, _ = solve_congruence(*congruences)\n    \n    sum_of_numbers = x + (x + 2) + (x + 4)\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 29 * 6\n    total_age_children = 64\n    total_age_parents = total_family_age - total_age_children\n    num_parents = 6 - 4  # Assuming 4 children\n    age_parents_3_years_ago = (total_age_parents - 3 * num_parents) / num_parents\n    return age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    total_paintings_target = 56\n\n    paintings_per_day = total_paintings_done / days_taken\n    remaining_paintings = total_paintings_target - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    result = (3+3+3+3+3+3+3+3) // 3\n    return result\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10  # Number of athletes in the first row\n    n = 25  # Total number of rows\n    # Using the formula for the nth term of an AP: a_n = a_1 + (n-1)d\n    # We have: a_4 = a_1 + 3d -> 25 = 10 + 3d -> d = (25 - 10) / 3\n    difference = (25 - 10) // 3  # Common difference between the rows\n\n    # Using the formula for the sum of the first n terms of an AP: S_n = n/2(2a_1 + (n-1)d)\n    total_athletes = n * (2 * first_term + (n - 1) * difference) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_paper = 18\n    interval = 3\n    \n    leaves_inserted = (total_paper - 1) // interval\n\n    return leaves_inserted\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # a5 = a1 + 4d = 8\n    # a12 = a1 + 11d = 50\n    # Subtracting the first equation from the second gives:\n    # a12 - a5 = (a1 + 11d) - (a1 + 4d) = 50 - 8\n    # 7d = 42\n    # d = 42 / 7\n    common_difference = (50 - 8) / (12 - 5)\n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Using distributive property of multiplication over addition (a*b + a*c + d*a = a*(b+c+d))\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    all_times = []\n\n    for time in combinations(times, 2):\n        crossed = list(time)\n        left = [t for t in times if t not in crossed]\n        fastest_cross = min(crossed)\n\n        # Round 2 of crossing\n        for second_time in combinations(left, 2):\n            crossed_2 = list(second_time)\n            left_2 = [t for t in left if t not in crossed_2]\n            fastest_cross_2 = min(crossed_2)\n\n            # Returning to the other side\n            # Fastest_poss_return is a time of the fastest person\n            # who can row back from the other side\n            # It can be from crossed list or crossed_2\n            fastest_poss_return = min(fastest_cross, fastest_cross_2)\n            all_times.append(sum(crossed) + sum(crossed_2) + fastest_poss_return + fastest_cross_2)\n\n    return min(all_times)\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    a1 = 2\n    d = 3\n    # Calculate the number of terms in original arithmetic progression\n    n = (242 - a1) // d + 1\n\n    # Because we keep removing 3 terms and adding one, the count goes down by 2 each time\n    # Perform this until 3 terms are left\n    while n > 3:\n        n -= 2\n\n    # Calculate the second number after reduction to 3 terms\n    # It will be the second term in the arithmetic sequence with modified starting term\n    modified_a1 = a1 + d * 3  # because we remove 3 terms first\n    second_number = modified_a1 + d  # the second term\n\n    return second_number\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's denote:\n    # Pip's weight as p\n    # Bud's weight as b\n    # Bob's weight as bo\n\n    # From the given information, we can create the following equations for average weights:\n    # (p + b) / 2 = 30  => p + b = 60\n    # (p + bo) / 2 = 33 => p + bo = 66\n    # (b + bo) / 2 = 36 => b + bo = 72\n\n    # From these equations, we can express b and bo in terms of p:\n    # b = 60 - p\n    # bo = 66 - p\n\n    # Now we can use the third equation to find p:\n    # (60 - p) + (66 - p) = 72\n    # 126 - 2p = 72\n    # 2p = 126 - 72\n\n    p = (126 - 72) / 2\n\n    return p\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    number_of_sisters = 4\n    number_of_brothers = 3\n    # Including Jacob\n    return number_of_sisters + number_of_brothers + 1\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    speed, time, distance = symbols('speed time distance')\n\n    # Initial conditions\n    original_time = 30  # Time to cover the distance at usual speed (in minutes)\n\n    # Equations based on the problem\n    eq1 = Eq(distance / speed, original_time / 60)  # Distance = Speed * Time\n    eq2 = Eq((distance - 2400) / (speed * 0.8), time)  # Remaining distance at reduced speed\n    eq3 = Eq(time, (original_time + 5) / 60)  # Total time taken with reduced speed\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (speed, time, distance))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    # The work done is the same, so the number of people times the number of days is a constant\n    # initial_people * initial_days = required_people * target_days\n    required_people = (initial_people * initial_days) / target_days\n\n    # We need at least this many more people, but since we can't have a fraction of a person, we round up\n    additional_people = int(-(-required_people // 1)) - initial_people\n\n    return additional_people\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # Original number of students in schools A and B\n\n    # Total students are equal to the sum of students in A and B\n    equation1 = Eq(a + b, 1050)  \n    \n    # School A has 20 students transferring out, and still has 10 more than School B\n    equation2 = Eq(a - 20, b + 10)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    rate_of_increase = 2\n    hours_passed = 5.5\n\n    final_temp = initial_temp + rate_of_increase * hours_passed\n\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original amount of money as x\n    x = symbols('x')\n\n    # According to the problem, after shopping in shop A, she has (x/2 - 1) left\n    # After shopping in shop B, she has ((x/2 - 1)/2 - 2) left\n    # After shopping in shop C, she has (((x/2 - 1)/2 - 2)*(2/3) - 3) left\n    # And after all shopping she has $49 left\n    # The equation modeling this situation is: (((x/2 - 1)/2 - 2)*(2/3) - 3) = 49\n\n    # Create the equation based on the problem description\n    equation = Eq((((x/2 - 1)/2 - 2)*(2/3) - 3), 49)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the amount of money Mrs Chan had at first\n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Since Darrell wants at least 1 green pencil, and there are 2 other colors,\n    # the worst case scenario is picking all pencils of the other colors first.\n    \n    # Number of blue and white pencils\n    others = 3 + 3\n    \n    # Drawing all other colors plus one green pencil\n    required_pencils = others + 1\n    \n    return required_pencils\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import isqrt, Integer\n\n    n = 1\n    # Start with the smallest possible n and increase until 2240/n is a perfect square\n    while not isinstance(isqrt(2240 / n), Integer) or (2240 / n)**0.5 != isqrt(2240 / n):\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    \n    # Intervals for each activity in days\n    sweep_interval = 3\n    mop_interval = 5\n    cook_interval = 9\n    clean_interval = 21\n    \n    # Find the least common multiple of the intervals\n    interval_lcm = lcm(sweep_interval, mop_interval, cook_interval, clean_interval)\n    \n    return interval_lcm\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_students = math_students + art_students - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(kids * 18, candies + 12)\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n  \n    for number in range(1, 311):\n        for digit in str(number):\n            total_sum += int(digit)\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age = 8\n    dad_age = 5 * avril_age\n    age_difference = dad_age - avril_age\n    age_difference_2_years_ago = age_difference - 4\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n\n    expression = 16.7 - ((-4.56)**2 - (8.1)**3) / (7.2**3) / (-math.sqrt(6 + 3/4) - (-30.15)) ** (1/3)\n    ans = round(expression, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the number of books on the top shelf be x\n    x = symbols('x')\n\n    # The total number of books is the sum of an arithmetic series that starts with x, ends with x+3*6 (the bottom shelf), and has 7 terms\n    # The common difference is 3 since each shelf contains 3 fewer books than the shelf below it\n    total_books = 280\n    number_of_shelves = 7\n    common_difference = 3\n\n    # The sum of an arithmetic series is given by n/2 * (first term + last term)\n    # where n is the number of terms, which is the number of shelves in this case\n    sum_of_books = number_of_shelves / 2 * (x + (x + common_difference * (number_of_shelves - 1)))\n\n    # Set up the equation for the total number of books and solve for x\n    equation = Eq(sum_of_books, total_books)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age = 20\n    lin_age = 26\n    target_sum_age = 48\n    years_later = 0\n\n    while (oliver_age + lin_age) < target_sum_age:\n        years_later += 1\n        oliver_age += 1\n        lin_age += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The ratio of Jayden's speed to Carter's speed\n    ratio_jayden = 7\n    ratio_carter = 4\n    \n    # Total parts in the ratio\n    total_parts = ratio_jayden + ratio_carter\n    \n    # Distance between A and B\n    distance_AB = 440\n    \n    # Distance Jayden covers before the first meeting\n    distance_jayden_first = (distance_AB * ratio_jayden) / total_parts\n    \n    # Distance remained for Carter after the first meeting\n    distance_carter_first = distance_AB - distance_jayden_first\n    \n    # Distance Jayden needs to cover to meet Carter the second time\n    # as they continue walking towards each other with the same speed ratio\n    distance_jayden_second = (distance_carter_first * ratio_jayden) / ratio_carter\n    \n    # Total distance Jayden walked is the sum of the distance before the first meeting\n    # and half of the distance_Jayden_second since they walk towards each other\n    total_distance_jayden = distance_jayden_first + distance_jayden_second / 2\n    \n    return total_distance_jayden\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_age, mrs_age = symbols('mr_age mrs_age')\n    \n    ratio_past = Eq(6*mrs_age, 5*mr_age)\n    sum_current_ages = Eq(mr_age + mrs_age, 69)\n    ages_7_years_ago = Eq(mr_age - 7, mrs_age - 7)\n\n    solutions = solve((ratio_past, sum_current_ages, ages_7_years_ago), (mr_age, mrs_age))\n    \n    # Return Mr. Lim's current age\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    boys_fraction = 3/4\n    boys_count = total_students * boys_fraction\n    girls_count = total_students - boys_count\n\n    return int(girls_count)\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's say initially Sam has 7x stickers and Peter has 5x stickers.\n    sam, peter, john = symbols('sam peter john')\n    \n    # Sam and Peter gave 20% of their stickers to John.\n    eq1 = Eq(sam - 0.2 * sam, peter + 0.2 * peter + 20)\n    \n    # 80% increase of John's stickers implies 0.8 * john = 0.2 * sam + 0.2 * peter\n    eq2 = Eq(0.8 * john, 0.2 * (7 * sam) + 0.2 * (5 * sam))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (sam, john))\n    \n    # peter initially has 5x stickers\n    peter_initial = 5 * solutions[sam]\n\n    return peter_initial\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10  # 10%\n    second_discount = 0.20  # 20%\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of baseball bats purchased initially\n    n = symbols('n')\n\n    # Total cost price\n    cost_price = 135 * n\n\n    # Total selling price when the shop is left with 3 bats\n    # Sold (n - 3) bats for 185 each\n    selling_price = 185 * (n - 3)\n\n    # The profit made after selling (n - 3) bats\n    profit = selling_price - cost_price\n\n    # According to the problem, this profit equals $2945 + cost of last 3 bats\n    equation = Eq(profit, 2945 + 3 * 135)\n\n    # Solve the equation for n\n    solution = solve(equation, n)\n\n    # Return the number of baseball bats purchased initially\n    return solution[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # Raja spent $286\n    raja_after_spending = raja - 286\n    # Kumar spent $109\n    kumar_after_spending = kumar - 109\n    # Kumar has 4 times as much as Raja\n    equation = Eq(kumar_after_spending, 4 * raja_after_spending)\n    # They had the same amount initially\n    same_amount_condition = Eq(raja, kumar)\n\n    # Solve the equations\n    solutions = solve((equation, same_amount_condition), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n\n    minibusses_needed = -(-boys // minibus_capacity) # Ceiling division\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)        # ▲ + ▲ = ■\n    equation2 = Eq(square + triangle, circle)           # ■ + ▲ = ●\n    equation3 = Eq(diamond, circle + square + triangle) # ♦ = ● + ■ + ▲\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles equal a diamond\n    number_of_triangles = solutions[diamond] / solutions[triangle]\n\n    return number_of_triangles\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair = symbols('chair')\n    table = chair + 160\n    total_cost = table + 5 * chair\n    \n    chair_cost = solve(Eq(total_cost, 328), chair)\n\n    return chair_cost[0]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # mean of 5 students is 87, hence total score of 5 students\n    total_5_students = 87 * 5\n    # mean of all 6 students will be 88, hence total score for 6 students\n    total_6_students = 88 * 6\n    # Jim's score will be the total score of 6 minus the total score of 5\n    jim_score = total_6_students - total_5_students\n    return jim_score\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time taken by the hot tap to fill the bath alone\n    hot_tap_time = symbols('x')\n\n    # Given 10 minutes for both, so the rate of work when both taps are on is 1/10 baths per minute\n    combined_rate = 1/10\n\n    # The cold tap fills at twice the rate of the hot tap\n    cold_tap_rate = 2 / hot_tap_time\n\n    # The combined rate of both taps is the sum of their individual rates\n    equation = Eq((1/hot_tap_time) + cold_tap_rate, combined_rate)\n\n    # Solve for the time taken by the hot tap alone to fill the bath\n    hot_tap_time_solution = solve(equation, hot_tap_time)\n\n    # Calculate the time taken by the cold tap alone to fill the bath\n    cold_tap_time = 1 / (2 / hot_tap_time_solution[0])\n\n    return cold_tap_time\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111  # Total sum of all 10 numbers\n    first_4_mean = (1111 - 240)  # Mean of the first 4 numbers\n    first_4_sum = 4 * first_4_mean  # Total sum of the first 4 numbers\n    last_6_sum = total_sum - first_4_sum  # Total sum of the last 6 numbers\n    last_6_mean = last_6_sum / 6  # Mean of the last 6 numbers\n\n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Pip has 60 pence which can be converted to pounds by dividing by 100\n    pip_money_pounds = 60 / 100\n    # Bud has 1 pound and 10 pence which can be written as 1.10 in pounds directly\n    bud_money_pounds = 1.10\n    # Add both amounts to get the total money they have altogether in pounds\n    total_money_pounds = pip_money_pounds + bud_money_pounds\n    return total_money_pounds\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Rachel and Alice's original amounts of candy\n    rachel, alice = symbols('rachel alice')\n    \n    # Create the equations based on the given information\n    equation1 = Eq(rachel - 10, alice + 10)  # If Rachel gives Alice 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)  # If Alice gives Rachel 10 candies\n    \n    # Solve the system of equations for Rachel and Alice's original amounts\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    # Since each IS added together four times equals PI, we can say that 4*IS = PI\n    # That means PI is divisible by 4, and IS is a two-digit number where I and S are different digits.\n    for i in range(1, 10):  # I cannot be zero and is a digit (1-9)\n        for s in range(10):  # S is a digit (0-9) and can be zero\n            if i != s:  # I and S must be different\n                is_value = 10*i + s\n                pi_value = 4 * is_value\n                if pi_value >= 1000 and pi_value < 10000:  # PI must be a four-digit number\n                    # Extracting digits from PI to check if they are unique and include I and S\n                    p = pi_value // 1000\n                    second_digit = (pi_value % 1000) // 100\n                    third_digit = (pi_value % 100) // 10\n                    fourth_digit = pi_value % 10\n                    if len({p, second_digit, third_digit, fourth_digit, i, s}) == 6:\n                        # PI has different digits and includes I and S\n                        return pi_value\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # First part of the race\n    distance_1 = 280\n    speed_1 = 7\n    time_1 = distance_1 / speed_1\n    \n    # Middle part of the race\n    distance_2 = 400\n    speed_2 = 5\n    time_2 = distance_2 / speed_2\n    \n    # Final sprint of the race\n    remaining_distance = 800 - (distance_1 + distance_2)\n    speed_3 = 8\n    time_3 = remaining_distance / speed_3\n    \n    # Total time\n    total_time = time_1 + time_2 + time_3\n    \n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n    probability_over_25 = probability_over_25_given_over_20 * probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Don's distance to the meeting point\n    don_distance_to_meeting = 360\n    # Total distance to the library\n    total_distance = 780\n    # Danny's distance to the meeting point\n    danny_distance_to_meeting = total_distance - don_distance_to_meeting\n    \n    # Don's speed in meters per minute\n    don_speed = 60\n    \n    # Time taken for Don to reach the meeting point\n    time_taken = don_distance_to_meeting / don_speed\n    \n    # Danny's speed\n    danny_speed = danny_distance_to_meeting / time_taken\n    \n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used = 792\n    pages = 0\n    digits = 0\n\n    for digit_len in range(1, 12):\n        number_of_pages_with_digit_len = 9 * (10 ** (digit_len - 1))\n        if digits + digit_len * number_of_pages_with_digit_len < digits_used:\n            digits += digit_len * number_of_pages_with_digit_len\n            pages += number_of_pages_with_digit_len\n        else:\n            remaining_digits = digits_used - digits\n            pages += remaining_digits // digit_len\n            break\n\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight = (1*1000 + 500) + (1*1000 + 200) + 900  # in grams\n    weight_per_tin = total_weight / 8\n\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = 0\n    for i in range(1, 11):\n        for j in range(i, 11):\n            ans += i/j\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have 2 choices each for the far right or far left\n    # Once A and B are placed, C and D can be arranged in 2! ways.\n    return 2 * 2 * 2\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Pigeonhole principle: worst case ensures 4 of same color\n    # Take max of each color minus one (to not guarantee 4 of that color)\n    # and then add one to ensure we get 4 of any color\n    red = 10 - 3  # 3 is maximum taking without ensuring 4 reds\n    blue = 5 - 3  # Same logic for blue\n    green = 8 - 3  # Same logic for green\n    # Add one to ensure 4 of a color\n    min_marbles = red + blue + green + 1\n    return min_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n    \n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 + digit2)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = float('inf')\n\n    for thousands in digits:\n        for hundreds in [d for d in digits if d != thousands]:\n            for tens in [d for d in digits if d != thousands and d != hundreds]:\n                for ones in [d for d in digits if d != thousands and d != hundreds and d != tens]:\n                    number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    # number must be even, so the last digit must be 4\n                    if ones % 2 == 0 and number < smallest_even:\n                        smallest_even = number\n\n    return smallest_even\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Start checking from the highest possible two-digit number.\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # The work done by 3 workers in 3 days is equivalent to 1 wall\n    total_work = workers * days\n    # We need to find out how many days will 1 worker take to complete 1 wall worth of work\n    days_for_1_worker = total_work / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it is the first digit in A\n        for y in range(10):  # y is the second digit and can be from 0 to 9\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n\n    return None  # If no solution found\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables we want to find\n    a, b = symbols('a b')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Extract the value of b from the solutions\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    locked = set(range(3, 101, 3))  # Lockers divisible by 3 are initially locked\n    for locker in range(5, 101, 5):\n        if locker in locked:\n            locked.remove(locker)  # Unlock lockers that are both divisble by 3 and 5\n        else:\n            locked.add(locker)  # Lock lockers that are divisible by 5 but not yet locked\n\n    unlocked = set(range(1, 101)) - locked  # Unlocked lockers are those not in the locked set\n\n    return len(unlocked)\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the components of the equation as functions for reusability\n    def add(a, b):\n        return a + b\n    \n    def div(a, b):\n        return a / b\n    \n    def sub(a, b):\n        return a - b\n\n    # Original expression components\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n\n    # Possible ways to insert brackets\n    results = set()\n    results.add(add(a, sub(div(b, c), d)))         # (285 + ((15 / 5) - 2))\n    results.add(add(sub(a, div(b, c)), d))         # ((285 - (15 / 5)) + 2)\n    results.add(sub(add(a, div(b, c)), d))         # ((285 + (15 / 5)) - 2)\n    results.add(div(add(a, b), sub(c, d)))         # ((285 + 15) / (5 - 2))\n    results.add(sub(div(add(a, b), c), d))         # (((285 + 15) / 5) - 2)\n    results.add(add(div(a, b), sub(c, d)))         # ((285 / 15) + (5 - 2))\n    results.add(sub(add(div(a, b), c), d))         # (((285 / 15) + 5) - 2)\n    results.add(sub(a, add(d, div(b, c))))         # (285 - (2 + (15 / 5)))\n    results.add(sub(add(a, div(b, c)), d))         # ((285 + (15 / 5)) - 2)\n    results.add(add(sub(a, d), div(b, c)))         # ((285 - 2) + (15 / 5))\n    \n    # Count unique results\n    ans = len(results)\n    return ans\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        # A must be in the middle of B and C but not necessarily next to each other\n        if perm.index('A') in range(1, 6):\n            if (perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C')) or \\\n               (perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B')):\n                # D and E must not be next to each other\n                if abs(perm.index('D') - perm.index('E')) != 1:\n                    # F and G must be next to each other\n                    if abs(perm.index('F') - perm.index('G')) == 1:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n\n    ratio = yiding_current_level / nicolas_current_level\n    nicolas_target_level = 16\n    yiding_target_level = nicolas_target_level * ratio\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_cake = symbols('cost_per_cake')\n    lucy_money = symbols('lucy_money')\n\n    equation1 = Eq(lucy_money - 10 * cost_per_cake, -11)\n    equation2 = Eq(lucy_money - 13 * cost_per_cake, -26)\n\n    solutions = solve((equation1, equation2), (cost_per_cake, lucy_money))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass_children = total_mass_boys + total_mass_girls\n    average_mass_children = total_mass_children / 10\n    return average_mass_children\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n    \n    number = divisor * quotient + remainder\n    \n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    return (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    scores = [37, 53, 29, 41]\n    total_matches = 5\n    target_mean = 40\n    total_runs = target_mean * total_matches\n    x = total_runs - sum(scores)\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    frequency_c = 'CHEESE'.count('C')\n    frequency_h = 'CHEESE'.count('H')\n    frequency_e = 'CHEESE'.count('E')\n    frequency_s = 'CHEESE'.count('S')\n\n    ans = factorial(total_letters) // (factorial(frequency_c) * factorial(frequency_h) * factorial(frequency_e) * factorial(frequency_s))\n\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    at_least_two_sevens = 0\n    # Cases with exactly two sevens\n    for i in range(1, 10):  # First digit must be non-zero\n        if i != 7:\n            at_least_two_sevens += 2  # 7 can be in second or third place\n    \n    # Case with three sevens\n    at_least_two_sevens += 1  # 777 is the only case\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cows as c and goats as g.\n    c, g = symbols('c g')\n\n    # 65% of the initial animals were cows, so the number of goats is total animals - cows.\n    # We know that total animals = c + g\n    # After adding 240 more animals, the percentage of cows increased by 20%, making it 65% + 20% = 85%.\n    # Also, the number of goats doubled.\n\n    # Setting up equations based on the problem's statement.\n    equation1 = Eq(c, 0.65 * (c + g))              # 65% of the initial animals were cows\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))  # After adding animals, 85% were cows\n    equation3 = Eq(2 * g, g + 240)                 # The number of goats doubled\n\n    # Solving the equations.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(100000, 1000000):\n        if str(num)[5] == '9':\n            new_num = int('9' + str(num)[:5])\n            if new_num == 4 * num:\n                return num\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # total work units is assumed to be lcm of 40 and 60 which is 120 units\n    # Alice's work rate is 120 units / 40 days = 3 units per day\n    # Bob's work rate is 120 units / 60 days = 2 units per day\n    alice_work_rate = 3\n    bob_work_rate = 2\n\n    # Total work done by both in 27 days, if they worked everyday\n    # Total_work = Alice's work + Bob's work\n    total_work = (alice_work_rate + bob_work_rate) * 27\n\n    # Work done by Bob alone in 27 days\n    # Work_bob = Bob's work rate * 27\n    work_bob = bob_work_rate * 27\n\n    # Work required to finish the job = 120 units\n    work_required = 120\n\n    # Since they finish the work by 27 days, work done by Alice when she was working\n    # can be calculated by subtracting Bob's total work from the work required\n    work_alice = work_required - work_bob\n\n    # Number of days Alice actually worked can be calculated by dividing the actual work she did\n    # by her work rate\n    days_alice_worked = work_alice // alice_work_rate\n    \n    # The days Alice took off is the total days minus the number of days she actually worked\n    days_off = 27 - days_alice_worked\n    \n    return days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if ABA + CDC == 726:\n            return A + B + C + D\n            \nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for total days to finish (d) and total pages (p)\n    d, p = symbols('d p')\n\n    # Set up the equations based on the problem\n    # Vanessa finishes 2 days late when reading 30 pages a day\n    equation1 = Eq(30 * (d + 2), p)\n    # Vanessa finishes 4 days early when reading 39 pages a day\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solve for d and p\n    solutions = solve((equation1, equation2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202020202'\n    length_sequence = len(sequence)\n    num_full_sequences = 535 // length_sequence\n    remaining_digits = 535 % length_sequence\n\n    count_2_in_full_sequence = sequence.count('2')\n    count_2_total = count_2_in_full_sequence * num_full_sequences\n\n    count_2_in_remaining = sequence[:remaining_digits].count('2')\n    count_2_total += count_2_in_remaining\n\n    return count_2_total\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n\n    ans = apples_per_box * number_of_boxes\n\n    return ans\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_op(a, b):\n        return a**2 + a*b\n\n    ans = delta_op(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fifty-cent coins Owen had at first\n    x = symbols('x')\n    \n    # According to the problem, (2/7)x were fifty-cent coins\n    # So, (5/7)x were one-dollar coins\n\n    # After receiving more coins:\n    # Fifty-cent coins became: (2/7)x + (5*2) (because five dollars' worth, each is worth 0.5)\n    # One-dollar coins became: (5/7)x + 10\n\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    # So, 2((2/7)x + 10) = (5/7)x + 10\n    \n    equation = Eq(2*((2/7)*x + 10), (5/7)*x + 10)\n\n    # Solve for the number of fifty-cent coins Owen had at first\n    solution = solve(equation, x)\n\n    # The total number of coins Owen had at first\n    total_coins = (2/7)*solution[0] + (5/7)*solution[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    num_tickets = 19\n    total_sales = 75\n    # Let x be the number of adult tickets, so (num_tickets - x) will be number of child tickets.\n    # 5*x + 3*(num_tickets - x) = total_sales\n    # Hence, we solve for x.\n\n    # Solving the equation 5x + 3(19 - x) = 75\n    for x in range(num_tickets + 1):\n        if 5 * x + 3 * (num_tickets - x) == total_sales:\n            return x\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n\n    return dress_cost - shirt_cost\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    total_marbles = 168\n\n    # Final ratio after the transactions\n    final_ratio = Eq(anna/betsy, 2/5)\n    final_ratio2 = Eq(betsy/charlene, 5/7)\n    final_ratio3 = Eq(anna + betsy + charlene, total_marbles)\n\n    # Transactions\n    betsy_to_anna = Eq(anna + 8, betsy - 8)\n    charlene_to_betsy = Eq(betsy + 15, charlene - 15)\n\n    # Solving the system of equations\n    solutions = solve((final_ratio, final_ratio2, final_ratio3, betsy_to_anna, charlene_to_betsy), \n                      (anna, betsy, charlene))\n   \n    # Betsy's initial amount is the final amount minus the 15 marbles received from Charlene\n    betsy_initial = solutions[betsy] - 15\n\n    return betsy_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_daily = 7\n    andy_total_saved = 378\n    brenda_saved_daily = 6\n\n    brenda_total_saved = (andy_total_saved / andy_saved_daily) * brenda_saved_daily\n\n    return brenda_total_saved\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_lost_otherwise = -2\n    total_points = 44\n\n    # Let x be the number of correct answers and y be the number of wrong answers\n    # Since all questions were answered x + y = total_questions\n    # And points for correct answers - points lost for wrong answers = total_points\n    # 6x - 2y = 44\n    # Multiplying the first equation by 2 and adding to the second equation to eliminate y\n    # 2x + 2y = 2 * total_questions\n    # 6x - 2y = total_points\n    # 8x = 2 * total_questions + total_points\n    x = (2 * total_questions + total_points) / (points_for_correct + abs(points_lost_otherwise))\n\n    return int(x)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length = 1\n    length_increase_percentage = 0.10\n    new_length = original_length + original_length * length_increase_percentage\n\n    original_breadth = 1\n    new_breadth = original_breadth * (4/5)\n\n    ratio_new_height_to_original = 11 / 10\n    original_height = 1\n    new_height = original_height * ratio_new_height_to_original\n\n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n\n    # Since the order in which we award the gold, silver, and bronze prizes matters,\n    # this is a permutation of 8 contestants taken 3 at a time.\n    num_ways = factorial(num_contestants) // factorial(num_contestants - 3)\n\n    return num_ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    \n    ans = comb(num_points, num_vertices)\n    \n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_repeat = 30 + 40 + 50\n    num_repeats = 3\n    total_sum = sum_repeat * num_repeats\n    return total_sum\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    masks_remaining = 360\n    total_masks = masks_remaining / (1 - 0.6)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # First equation: Total mushrooms gathered in two hours\n    equation1 = Eq(first_hour + second_hour, 40)\n\n    # Second equation: First hour mushrooms plus 26 equals second hour mushrooms\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    result = 52.8 * 7\n    return result\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # There are 5 students and 40 questions.\n    # Each student needs to solve at least one question,\n    # and the number of questions solved by each student cannot be the same.\n    # We need to maximize the number of questions Noa can solve.\n    \n    # To distribute the questions ensuring everyone gets at least one and no one gets the same amount,\n    # we can start by giving each student one question.\n    # That would leave us 40 - 5 = 35 questions to distribute.\n    \n    # We distribute the remaining questions in increasing order to ensure no one gets the same amount.\n    # We should start by giving the other 4 students at least 2, 3, 4, and 5 questions respectively.\n    # 35 - (2+3+4+5) = 21\n    # Now we give the remaining 21 questions to Noa.\n    \n    # Noa's number of questions is his initial question plus the remaining 21 questions.\n    noas_questions = 1 + 21\n    return noas_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Current age ratio\n    equation1 = Eq(scan / ted, 1 / 4)\n\n    # Age ratio after 4 years\n    equation2 = Eq((scan + 4) / (ted + 4), 1 / 3)\n\n    # Solve for current ages\n    current_ages = solve((equation1, equation2), (scan, ted))\n    scan_age = current_ages[scan]\n    ted_age = current_ages[ted]\n\n    # Set an unknown variable for years ago\n    years_ago = symbols('years_ago')\n    \n    # Age ratio years ago equation\n    equation3 = Eq((scan - years_ago) / (ted - years_ago), 1 / 9)\n    \n    # Solve for years ago\n    years_ago_result = solve(equation3.subs([(scan, scan_age), (ted, ted_age)]), years_ago)\n\n    return years_ago_result[0]\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the distance traveled during jogging\n    jogging_time_hours = 1  # from 6:30 AM to 7:30 AM\n    jogging_speed_mph = 6.5\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Calculate the distance traveled during walking\n    walking_time_hours = 2  # from 7:30 AM to 9:30 AM\n    walking_speed_mph = 4.5\n    walking_distance = walking_time_hours * walking_speed_mph\n    \n    # Calculate the total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    meters = 9\n    centimeters_per_meter = 100\n    \n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    day_climb = 10\n    night_fall = 0\n    current_height = 0\n    day = 0\n    \n    while current_height < height:\n        day += 1\n        current_height += day_climb\n        if current_height >= height:\n            break\n        night_fall += 1 \n        current_height -= night_fall\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    return mollies - guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per m\n    real_tree_height_m = 12  # m\n    real_tree_height_cm = real_tree_height_m * 100  # convert m to cm\n    model_tree_height_cm = real_tree_height_cm * scale_ratio\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of foldable bicycles, nf be the number of non-foldable bicycles\n    f, nf = symbols('f nf')\n\n    # Equation for the total number of bicycles: foldable + non-foldable = 476\n    equation1 = Eq(f + nf, 476)\n\n    # Equation representing the bikes sold: foldable sold + non-foldable sold = 208\n    equation2 = Eq(f - (4/7) * f + nf - (5/9) * nf, 208)\n\n    # Solving the equations for the number of foldable and non-foldable bicycles\n    solutions = solve((equation1, equation2), (f, nf))\n\n    # Calculating the number of foldable bicycles sold\n    foldable_sold = solutions[f] - (4/7) * solutions[f]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Using the pigeonhole principle, to ensure at least one kid gets 3 pieces,\n    # we can use the worst-case scenario where each of the other 19 kids get 2 pieces.\n    students = 20\n    # 19 students get 2 pieces each\n    pieces_for_19_students = 19 * 2\n    # At least 3 pieces for 1 student\n    at_least_three_for_one_student = 3\n    # Total pieces needed is the sum for 19 students and at least 3 for the last one\n    total_pieces = pieces_for_19_students + at_least_three_for_one_student\n    return total_pieces\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    number = 20\n    sum_of_factors = sum(set(factor for i in range(1, int(number**0.5) + 1) if number % i == 0 for factor in (i, number//i)))\n    return sum_of_factors\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_score = 8\n    wrong_score = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + wrong_answers * wrong_score\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_ratio = 5/8\n    remaining_ratio = 1 - used_ratio\n\n    original_flour = remaining_flour / remaining_ratio\n\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Maximum socks to have no white socks: all red and black\n    max_no_white = 10 + 10\n    # One more to ensure a pair of white socks\n    return max_no_white + 1\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60\n    number = 765\n    ans = (percentage / 100) * number\n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    # Total number of flowers\n    total_flowers = 30\n    # Number of flowers between every 2 lamp posts\n    flowers_between_lamp_posts = 3\n\n    # Since Jamie plants 3 flowers between every 2 posts, we can get the number of gaps between posts\n    # by dividing the total number of flowers by the number of flowers per gap\n    gaps_between_lamp_posts = total_flowers // flowers_between_lamp_posts\n\n    # The number of lamp posts is one more than the number of gaps\n    num_lamp_posts = gaps_between_lamp_posts + 1\n\n    # The total length of the road is 50m. To find the distance between each lamp post,\n    # we divide the length of the road by the number of gaps\n    distance_between_lamp_posts = 50 / gaps_between_lamp_posts\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum_of_series = sum(range(1, 20, 2))\n    return sum_of_series\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # Counting from the left, the favorite book is the 7th book (since there are 6 books before it)\n    # Counting from the right, it is the 14th book.\n    # To figure out the total number of books on the shelf, we consider the total number \n    # When we count the favorite book from both sides.\n    # Therefore, total number of books = books on the left + 1 (for the favorite book) + books on the right - 1\n    # (we subtract 1 because the favorite book is counted twice)\n    total_books = 6 + 1 + 14 - 1\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_difference = 17\n    final_temperature = initial_temperature - temperature_difference\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    first_tree = 0       # Starting from one end of the road\n    last_tree = 150      # The length of the road\n    distance = 10        # Distance between each tree\n\n    # Number of trees is the number of intervals plus one for the tree at the start\n    num_trees = ((last_tree - first_tree) // distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    divisor = 4\n    nth_term = 5\n\n    fifth_number = first_number / divisor**(nth_term - 1)\n\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**-12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_given_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_given_away // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since the children must receive different numbers of apples and at least one each,\n    # we start by giving each child one apple, which will take 5 apples.\n    # We are left with 19 - 5 = 14 apples to distribute.\n    # We need to maximize the number of apples for the child who gets the most,\n    # while still ensuring each child receives a different amount.\n    # If we give the other children 1 more apple each, we have 14 - 4 = 10 apples left to give to the child with the most.\n    # Therefore, the child with the most apples can have at most 1 (initial apple) + 1 (extra apple) + 10 = 12 apples.\n\n    return 1 + 1 + 10\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12 - 2 * 1.5 # Effective length after leaving 1.5m from each edge\n    distance_between_bushes = 3\n\n    # Calculate how many bushes can be planted on one side\n    bushes_per_side = side_length // distance_between_bushes\n\n    # Total bushes is the number of bushes on one side times four, minus the four corner bushes (counted twice)\n    total_bushes = 4 * bushes_per_side - 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Calculate the work done by P in one day\n    p_work_per_day = 1 / 12\n    # Calculate the work done by Q in one day\n    q_work_per_day = 1 / 8\n    \n    # Calculate the work done by Q in 8 hours\n    q_work_per_8_hours = q_work_per_day * (8 / 10)\n    \n    # Combined work done by P and Q in one day working 8 hours\n    total_work_per_day = p_work_per_day + q_work_per_8_hours\n    \n    # Calculate the number of days to complete the job\n    days_to_complete = 1 / total_work_per_day\n\n    return days_to_complete\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # speed of the faster van in km/h\n    speed_slow_van = 78   # speed of the slower van in km/h\n    time = 8  # time in hours\n\n    # Calculate the distance traveled by each van\n    distance_fast_van = speed_fast_van * time\n    distance_slow_van = speed_slow_van * time\n\n    # Total distance apart after 8 hours\n    total_distance_apart = distance_fast_van + distance_slow_van\n    \n    return total_distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    remaining_percentage = 1 - 0.6\n    total_work = remaining_work / remaining_percentage\n    return int(total_work)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 78\n    divs = divisors(78)\n    # Filter out odd divisors since the number of bags must be even\n    even_divs = [d for d in divs if d % 2 == 0]\n    # Subtract 1 to account for 78 itself since we want \"some bags\",\n    # not all apples in a single bag.\n    return len(even_divs) - 1\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats\n    # Therefore, 1 goat can be exchanged for 9/3 = 3 rabbits\n    rabbits_per_goat = 9 / 3\n\n    # Given that 2 goats can be exchanged for 4 cows\n    # Therefore, 1 cow can be exchanged for 2/4 = 0.5 goats\n    goats_per_cow = 2 / 4\n\n    # We want to know how many rabbits 2 cows can be exchanged for.\n    # Thus, 2 cows can be exchanged for 2 * goats_per_cow goats\n    # and that amount of goats can be exchanged for rabbits_per_goat * goats rabbits\n    rabbits_per_2_cows = rabbits_per_goat * (goats_per_cow * 2)\n\n    return rabbits_per_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    correct_mark = 4\n    wrong_mark = 1\n    total_score = 168\n\n    # Let x be the number of correct answers.\n    # The number of wrong answers is (total_questions - unattempted_questions - x)\n    # Set up the equation based on the given information.\n\n    x = symbols('x')\n    equation = Eq(correct_mark * x - wrong_mark * (total_questions - unattempted_questions - x), total_score)\n\n    # Solve the equation for x.\n    correct_answers = solve(equation, x)[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    for pencils in range(1, 100):\n        for pens in range(1, 100):\n            if (pencils / pens == 4 / 5) and ((pencils + 1) / (pens - 1) == 7 / 8):\n                return pencils + pens\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    # Using arithmetic series sum formula: n/2 * (2a + (n - 1)d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n    \n    # Calculating step by step\n    result1 = custom_operation(10, 9)\n    result2 = custom_operation(result1, 8)\n    result3 = custom_operation(result2, 7)\n    result4 = custom_operation(result3, 6)\n    result5 = custom_operation(result4, 5)\n    ans = custom_operation(result5, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    total_percentage = 100\n\n    girls_percentage = total_percentage - boys_percentage\n    total_children = (girls * total_percentage) / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    final_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return final_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    first_missing_page = 14 + 1 # the page number after the last page before the missing pages\n    last_missing_page = 35 - 1 # the page number before the first page after the missing pages\n\n    # Each sheet of newspaper usually has two page numbers (front and back)\n    missing_sheets = (last_missing_page - first_missing_page + 1) // 2\n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    # Define equations based on the problem\n    equation1 = Eq(tuna_puff_price - curry_puff_price, 0.20) # curry puff costs $0.20 less than a tuna puff\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60) # total cost of puffs\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_digits = [1, 3]\n    count = 0\n\n    for tens in digits:\n        if tens != 0:  # tens digit cannot be zero in a two-digit number\n            for ones in odd_digits:  # ones digit must be odd to form an odd number\n                if tens != ones:  # the two digits must be different\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "网络故障，请重试"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_per_second = 36 / 60  # convert meters per minute to meters per second\n    distance = speed_per_second * 200  # calculate the distance by multiplying the speed by the time in seconds\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of animals initially as 't' and the number of goats as 'g'.\n    t, g = symbols('t g')\n\n    # 65% of the initial animals were cows, so 35% were goats.\n    # Hence, the number of goats 'g' is 35% of total 't'.\n    equation1 = Eq(g, 0.35 * t)\n\n    # After adding 240 animals, the percentage of cows became 85% (increased by 20%).\n    # Therefore, the number of goats now doubled.\n    equation2 = Eq(2 * g, t + 240 - 0.85 * (t + 240))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # planned profit is 60%\n    planned_profit = 0.60\n\n    # total profit was 80% of the planned profit\n    total_profit = 0.80 * planned_profit\n\n    # on the first day, he sold 70% of his books at a profit of 60%\n    first_day_profit = 0.70 * 0.60\n\n    # remaining books is 30% and those have to make up the rest of the total profit\n    remaining_profit = total_profit - first_day_profit\n\n    # since remaining books is 30%, we calculate the percentage profit for them\n    second_day_profit = remaining_profit / 0.30\n\n    # on the second day, he sold the remaining books at (1 - second_day_profit)\n    # since second_day_profit is negative, it's a discount\n    discount_rate = (1 - second_day_profit) * 100\n\n    return discount_rate\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n    result = 1\n    for i in range(3, 20, 2):\n        result *= Fraction(1, 1) + Fraction(2, i)\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85  # total string needed in cm\n    roll_length_cm = 20 * 100  # roll length in cm (1 meter = 100 cm)\n    rolls_needed = -(-string_needed_cm // roll_length_cm)  # ceiling division to get the number of full rolls needed\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remaining = salary - donation\n    food_expense = (5 / 6) * remaining\n    saving = remaining - food_expense\n\n    equation = Eq(food_expense, donation + 78)\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Emma and John's ages now\n    emma, john = symbols('emma john')\n    \n    # Emma's age in 3 years = emma + 3\n    # John's age in 3 years = john + 3\n    # John is 7 years older than Emma: john = emma + 7\n    # Sum of their ages in 3 years = 27: (emma + 3) + (john + 3) = 27\n    \n    # Set up the equations\n    eq1 = Eq(john, emma + 7)\n    eq2 = Eq(emma + john + 6, 27)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (emma, john))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    n1 = 7\n    a1 = 57\n    n2 = 15\n    a2 = 89\n\n    common_difference = (a2 - a1) / (n2 - n1)\n\n    return common_difference\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    time_before, time_after = symbols('time_before time_after')\n\n    distance_before = 150 * time_before\n    distance_after = (150 + 50) * time_after\n\n    total_distance = Eq(distance_before + distance_after, 3700)\n    total_time = Eq(time_before + time_after, time_before + 10 + time_after)\n\n    solutions = solve((total_distance, total_time), (time_before, time_after))\n\n    total_walking_time = solutions[time_before] + solutions[time_after]\n\n    return total_walking_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_eaten_per_week = 60\n    sweets_bought_per_week = 45\n    target_sweets = 150\n\n    net_sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    weeks_needed = (sweets_left - target_sweets) / net_sweets_change_per_week\n\n    return weeks_needed\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digits = 3  # for a three-digit number\n    choices_per_digit = 3  # we can choose 5, 6, or 7 for each digit place\n\n    # Since each digit can be used more than once, we simply calculate the total \n    # number of combinations by raising the number of choices to the power of digits.\n    num_combinations = choices_per_digit ** digits\n\n    return num_combinations\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # The divisibility rule for 9 is that the sum of all digits of the number must be divisible by 9.\n\n    # Let's find all the digits not used.\n    used_digits = {4, 7, 1, 9}\n    all_digits = set(range(10))\n    unused_digits = all_digits - used_digits\n\n    # We try each permutation of unused digits and check if the sum of all digits is divisible by 9.\n    from itertools import permutations\n\n    potential_solutions = []\n\n    for A, B, C in permutations(unused_digits, 3):\n        # Construct the sum of all digits\n        digit_sum = 4 + 7 + A + 1 + B + 9 + C\n        # If the sum is divisible by 9, we found a valid number\n        if digit_sum % 9 == 0:\n            # Return the first solution found\n            potential_solutions.append((A, B, C, digit_sum, 4700000 + 1000 * A + 100 * B + 9 * 10 + C))\n\n    return potential_solutions[0][0] + potential_solutions[0][1] + potential_solutions[0][2], potential_solutions[0][4]\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            if sweets >= 1 * 3 and sweets >= 1 * 4 and sweets >= 1 * 5 and sweets >= 1 * 6:\n                return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    equation1 = Eq(2*apple + orange, 40)\n    equation2 = Eq(apple + 2*orange, 35)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    carrie = solutions[apple] + solutions[orange]\n    \n    return carrie\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    weeks = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        weeks += 1\n    return weeks\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n\n    # 2 pairs of rackets mean 4 rackets\n    rackets_cost = 4 * racket_price\n\n    # Money left for tennis balls\n    remaining_money = total_money - rackets_cost\n\n    # Number of tennis balls he can buy\n    number_of_balls = remaining_money // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Maximum number of balls drawn without having three different colors is:\n    # Max number of balls of the same color + max number of balls of another color\n    # In the worst case, we draw all four balls of one color, then all four of another color.\n    # The next ball we draw (the 9th) has to be of the third color, ensuring three different colors.\n    \n    max_same_color_balls = 4\n    next_ball_ensures_third_color = 1\n    balls_to_ensure_three_colors = (max_same_color_balls * 2) + next_ball_ensures_third_color\n    \n    return balls_to_ensure_three_colors\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_boxes = 6\n    donuts_per_box = 6\n    donuts_eaten = 3\n\n    total_donuts = total_boxes * donuts_per_box\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    durians_sold = total_durians * sold_fraction\n    durians_left = total_durians - durians_sold\n    return durians_left\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of one box of apples and one box of oranges\n    apples, oranges = symbols('apples oranges')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Total number of ways to choose 3 points out of 12 to form a triangle\n    total_triangles = (12 * 11 * 10) // (3 * 2 * 1)\n\n    # Number of ways to choose points to form an isosceles triangle\n    # with the two equal sides being the radius (base angles on the circumference)\n    # These will never be right-angled.\n    isosceles_triangles = 12\n\n    # Each set of 4 points can form 2 right-angled triangles with their vertices\n    # on those points. Hence with 12 points, we divide the circle into 12 equal parts,\n    # and you choose 4 consecutive points to give 2 right-angled triangles.\n    right_angled_triangles = 12 * 2\n\n    # Return the number of right-angled triangles subtracting the non-right-angled ones\n    ans = right_angled_triangles - isosceles_triangles\n    return ans\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    position = 11\n    total_animals = (position - 1) * 2 + 1\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary_btc = 1.2\n    debt_btc = 2.6\n\n    months_to_pay_debt = debt_btc / monthly_salary_btc\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    # 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    \n    # 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    # Solve the system of equations\n    solved_values = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solved_values[racket]\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost_cent = 50\n    mamee_cost_cent = haribo_cost_cent - 30\n    big_jelly_cost_cent = 6 * mamee_cost_cent\n    big_jelly_cost_dollars = big_jelly_cost_cent / 100\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    if ans < 100:\n        return ans\n    else:\n        return \"No solution found under 100\"\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    # Total candies are 2 (lemon) + 7 (cherry) + 1 (mint)\n    # Will hates mint, so he can eat lemon and cherry flavored candies\n    candies_will_can_eat = 2 + 7  # mint flavor is excluded\n    return candies_will_can_eat\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Initial division of roses into three vases\n    initial_vases = 3\n    \n    # Roses brought by Nancy's mother, which are to be divided into four more vases\n    additional_vases = 4 \n    \n    # Initial roses divided\n    initial_roses = 24\n    \n    # First, find the number of roses per vase in initial vases\n    initial_roses_per_vase = initial_roses / initial_vases\n    \n    # Since the additional roses are divided into more vases such that each vase has the same amount\n    # We can directly calculate the total number of additional roses\n    additional_roses_total = initial_roses_per_vase * additional_vases\n    \n    # Now, add the initial roses and the additional roses to find the total\n    total_roses = initial_roses + additional_roses_total\n    \n    return int(total_roses)\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + -2) / 2\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    ones_place = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    tens_place = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    teens = [\"\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n    \n    def in_words(n):\n        if n == 0:\n            return \"Zero\"\n        elif n < 10:\n            return ones_place[n]\n        elif 10 < n < 20:\n            return teens[n-10]\n        elif n < 100 and n % 10 == 0:\n            return tens_place[n//10]\n        elif n < 100:\n            return tens_place[n//10] + \" \" + ones_place[n%10]\n        elif n < 1000 and n % 100 == 0:\n            return ones_place[n//100] + \" Hundred\"\n        elif n < 1000:\n            return ones_place[n//100] + \" Hundred and \" + in_words(n%100)\n        elif n < 10000 and n % 1000 == 0:\n            return ones_place[n//1000] + \" Thousand\"\n        elif n < 10000:\n            return ones_place[n // 1000] + \" Thousand \" + in_words(n % 1000)\n    \n    return in_words(number)\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if all(num % 2 == 1, num % 3 == 2, num % 4 == 3, num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(1, 10, 2):  # D must be an odd number since CD is divisible by 5, and D != 5 because different digits\n                    if {A, B, C, D} == len({A, B, C, D}):  # All digits are different\n                        AB = A * 10 + B\n                        BC = B * 10 + C\n                        CD = C * 10 + D\n                        ABC = A * 100 + BC\n                        BCD = B * 100 + CD\n                        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                            return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In a single elimination tournament, one game=one elimination until one winner remains.\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given height to width ratio is 3:4\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Given height of the television screen\n    height = 21  # in cm\n    \n    # Calculate width using the ratio\n    width = (ratio_width / ratio_height) * height\n    \n    # Calculate perimeter\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the children's ages\n    younger_son, older_son, younger_daughter, older_daughter = symbols('younger_son older_son younger_daughter older_daughter')\n    \n    # Define the equations based on the problem statement\n    sum_ages = Eq(younger_son + older_son + younger_daughter + older_daughter, 55)\n    sons_age_diff = Eq(older_son, younger_son + 3)\n    daughters_age_diff = Eq(older_daughter, younger_daughter + 2)\n    son_daughter_age_relation = Eq(younger_son, 2 * older_daughter)\n    \n    # Solve the system of equations\n    solutions = solve((sum_ages, sons_age_diff, daughters_age_diff, son_daughter_age_relation),\n                      (younger_son, older_son, younger_daughter, older_daughter))\n    \n    # Find the youngest child\n    youngest_child_age = min(solutions.values())\n    \n    return youngest_child_age\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_part = '428571'\n    length_recurring = len(recurring_part)\n    sum_digits = sum(int(digit) for digit in recurring_part)\n\n    full_repeats = 58 // length_recurring\n    partial_repeats = 58 % length_recurring\n\n    # Sum of full recurring cycles\n    total_sum = sum_digits * full_repeats\n\n    # Sum of digits in the partial last cycle\n    for i in range(partial_repeats):\n        total_sum += int(recurring_part[i])\n\n    return total_sum\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged from bottle A to B\n    x = symbols('x')\n\n    # Amount of sugar in A after exchange: (50 * 0.11 - 0.11x) + 0.47x\n    # Amount of sugar in B after exchange: (50 * 0.47 - 0.47x) + 0.11x\n    # Concentration in A after exchange: [(50 * 0.11 - 0.11x) + 0.47x] / 50\n    # Concentration in B after exchange: [(50 * 0.47 - 0.47x) + 0.11x] / 50\n    # Set the concentrations equal and solve for x\n    equation = Eq((50 * 0.11 - 0.11*x) + 0.47*x, (50 * 0.47 - 0.47*x) + 0.11*x)\n\n    # Solve the equation\n    solution_x = solve(equation, x)\n    return solution_x[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string = toms_string + 25\n    difference = nicks_string - toms_string\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken = 18\n    total_students = 50\n\n    percent = (students_choosing_chicken / total_students) * 100\n\n    return percent\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert from meters to centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Total effective length that can be used to plant cauliflowers\n    effective_length_cm = plot_length_cm - (2 * first_cauliflower_offset_cm)\n\n    # Calculate the number of cauliflower spaces that fit into the effective length\n    num_cauliflowers = effective_length_cm // cauliflower_spacing_cm\n\n    # Add the first cauliflower to the count\n    num_cauliflowers += 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_litres = audrey + jane\n    return total_litres\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    fact_total = factorial(total_books)  # Factorial of total number of books\n\n    # Since the books of the same type are indistinguishable, we divide the total\n    # permutations by the factorial of the number of books of each type\n    fact_same_biographies = factorial(3)  \n    fact_same_sci_fi = factorial(4)\n    fact_same_magazines = factorial(2)\n    fact_same_practice_books = factorial(2)\n\n    ans = fact_total // (fact_same_biographies * fact_same_sci_fi * fact_same_magazines * fact_same_practice_books)\n\n    return ans\n\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w represent the cost of one wallet and c represent the cost of one watch\n    w, c = symbols('w c')\n    \n    # Set up the system of equations based on the problem statement\n    equation1 = Eq(2 * w + 3 * c, 433)\n    equation2 = Eq(5 * w + 4 * c, 701)\n    \n    # Solve the system of equations for w and c\n    solutions = solve((equation1, equation2), (w, c))\n    \n    # Return the cost of a wallet\n    return solutions[w]\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    result = (75 - 3) / 8\n    return result\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    piles = 4\n    count = 0\n    \n    for combo in combinations(range(1, candies), piles - 1):\n        if sum(combo) <= candies - 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "from itertools import permutations\n\ndef solution():\n    cards = ('1', '3', '6')\n    three_digit_numbers = set()\n    \n    for perm in permutations(cards, 3):\n        number = ''.join(perm)\n        three_digit_numbers.add(int(number))\n        \n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes_within_50 = [prime for prime in range(2, 51) if isprime(prime)]\n    special_primes = [prime for prime in primes_within_50 if isprime(prime - 6) or isprime(prime + 6)]\n    return len(special_primes), special_primes\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n\n    ans = (percentage / 100) * base_value\n\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + (64 / 100) - (2 + (7 / 100))\n    return total_metres\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana and one pear\n    b, p = symbols('b p')\n\n    # Equations based on the problem statement\n    # Max buys 1 banana and 2 pears for 94p\n    equation1 = Eq(b + 2 * p, 94)\n    # Emily buys 1 banana and 1 pear for 62p\n    equation2 = Eq(b + p, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # The cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    return fibonacci(8)\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    target_sum = 35\n    max_product = 0\n    \n    for i in range(1, target_sum // 2 + 1):\n        product = i * (target_sum - i)\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # Monday to Saturday is 6 days\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Let x be the total number of books Alice, Becky, and Crystal have\n    # Their average is 60, so the total number of books is 60 * 3\n    x = 60 * 3\n    \n    # When Dennis is counted the new average is 70\n    # The new total number of books is 70 * 4\n    new_total = 70 * 4\n    \n    # The number of books Dennis has is the difference between the new total and the old total\n    dennis_books = new_total - x\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_slide = 3\n    progress_per_day = day_distance - night_slide\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_slide\n        \n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange\n\n    two_digit_primes = list(primerange(10, 100))  # Get all two-digit prime numbers\n    smallest_two_digit_prime = two_digit_primes[0]  # The smallest two-digit prime number\n    \n    largest_square_number = 81  # The largest two-digit square number (9^2)\n\n    ans = smallest_two_digit_prime * largest_square_number  # Product of smallest prime and largest square\n    return ans\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    number_of_intervals_1_to_4 = 4 - 1\n    interval_distance = distance_1_to_4 / number_of_intervals_1_to_4\n    number_of_intervals_1_to_9 = 9 - 1\n    distance_1_to_9 = interval_distance * number_of_intervals_1_to_9\n    return distance_1_to_9\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_height = (johns_height / ratio_john) * ratio_mike\n    return mikes_height\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    return 233 in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence where each term is the power of 2 starting from 2**0 = 1.\n    # To find the 20th term, we calculate 2**(20 - 1) which is 2**19\n    # Similarly, for the 17th term, we calculate 2**(17 - 1) which is 2**16\n    # Dividing the 20th term by the 17th term, we have 2**19 / 2**16 = 2**(19-16) = 2**3\n    # So the answer is 2**3, which is 8.\n\n    return 2**3\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # The number has the digit 6 in the tenths place, 7 in the hundredths place,\n    # and a value of 4 in the ones place.\n    # Construct the number as a combination of these place values.\n    number = 4 + 0.6 + 0.07\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22  # Ship's speed in still water in km/h\n    speed_of_current = 3       # Speed of the current in km/h\n    downstream_speed = speed_in_still_water + speed_of_current  # Ship's downstream speed in km/h\n    distance = 200              # Distance to be travelled downstream in km\n\n    # Time = Distance / Speed\n    time_to_travel = distance / downstream_speed\n\n    return time_to_travel\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Cost of one pencil\n    pencil_cost = 2\n    # Cost of one pen \n    pen_cost = 4\n    \n    # Since Owen wants to trade a pen from Oscar\n    # We are looking for the ratio of pen_cost to pencil_cost\n    number_of_pencils = pen_cost // pencil_cost\n    \n    return number_of_pencils\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    \n    total_ways = trains + buses + flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_per_correct = 6\n    points_lost_otherwise = -2\n    total_points = 36\n    \n    # Let x be the number of correct answers\n    # and (total_questions - x) be the number of incorrect answers or skipped questions\n    # Based on the problem, we set up the equation:\n    # points_per_correct * x + points_lost_otherwise * (total_questions - x) = total_points\n    \n    # Now solve for x\n    x = (total_points - points_lost_otherwise * total_questions) / (points_per_correct - points_lost_otherwise)\n    return int(x)\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of peaches be p, students in Class A be a and students in Class B be b.\n    p, a, b = symbols('p a b')\n\n    # Equations based on the problem statement\n    equation1 = Eq(p, 5 * a + 10)  # all peaches to Class A with 10 left\n    equation2 = Eq(p, 8 * b - 2)   # all peaches to Class B with 2 short\n    equation3 = Eq(a, b + 3)       # Class A has 3 more students than Class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (p, a, b))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 7 dancing performances among themselves\n    dancing_arrangements = factorial(7)\n\n    # 'D' denotes a slot where a dancing performance will take place\n    # Since there must be at least 1 dance between sketch performances, we can place them like this:\n    # D _ D _ D _ D _ D _ D _ D\n    # There are 6 slots (denoted by _) between 7 dancing performances where we can place the sketch performances\n\n    # Sketch performances can be arranged in (6+1) slots as we can place them at the beginning and the end as well.\n    # Therefore, we can treat this as 8 slots (6+2 extra for beginning and end) and\n    # select 3 out of those to place the sketch performances\n    sketch_slots = 8\n    sketch_arrangements = factorial(sketch_slots) // (factorial(3) * factorial(sketch_slots - 3))\n\n    # Multiplication principle: multiply the number of dancing arrangements by the number of sketch arrangements\n    total_arrangements = dancing_arrangements * sketch_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to take at least one chip of each color to ensure the two chips are of different colors.\n    \n    # Take all three red M&M's, to ensure we have a red one.\n    num_red = 3\n    # Now, take four yellow M&M's. At this point, we definitely have a red and a yellow.\n    num_yellow = 4\n    # At this point, even without taking a brown one, we're guaranteed to have two different colors,\n    # because we have all the reds and all the yellows, so the next one MUST be brown.\n    \n    # The smallest number required to take to ensure two different colors is the sum of the previous two.\n    smallest_number = num_red + num_yellow\n    \n    return smallest_number\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # Recursive formula: D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    fathers_handshakes = (families - 1) * 3 * families     # Each father shakes hands with father, mother, child from other families\n    mothers_handshakes = (families - 1) * 2 * families     # Each mother shakes hands with father and child from other families\n    children_handshakes = (families - 1) * 2 * families    # Each child shakes hands with father and mother from other families\n\n    total_handshakes = fathers_handshakes + mothers_handshakes + children_handshakes\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n    ans = (a ** 2) - (a * b)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # Each place in the 3-digit number can take any of the 5 values independently\n    # Hence, we simply multiply the number of choices for each digit\n    choices_per_digit = 5\n    total_numbers = choices_per_digit ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    position = 79\n    index = (position - 1) % len(recurring_sequence)\n    ans = int(recurring_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    for i in range(999, 99, -1):\n        if (i + 2009) % 17 == 0 and (i + 2009) % 19 == 0:\n            max_number = i\n            break\n    return max_number\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28512 to get the prime factors and their powers\n    factors = factorint(28512)\n    \n    # Initialize h as 1\n    h = 1\n    \n    # For each prime factor p of 28512, determine the power needed to make 28512/h a cube\n    for p, power in factors.items():\n        if power % 3 != 0:\n            h *= p**(3 - (power % 3))\n\n    return h\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = (62 * (62 + 1)) // 2\n    missing_number = total_sum - 1939\n    return missing_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Establish the maximum number of marbles to get 3 of the same color\n    # as the worst case before having to get the fourth different color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # Getting 3 of each color except for one color, which has 2\n    max_same_color = red - 1 + green - 1 + blue - 1\n    \n    # Add one to ensure the fourth different color\n    ans = max_same_color + 1\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 998):  # start from 000 to 998\n        if i + (i + 1) == 777:  # check if the sum of the ticket and the next ticket is 777\n            return i + 2  # return the ticket number after the two tickets\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n    final_value = initial_value * (depreciation_rate ** years)\n    return final_value\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    total_length_of_fence = 2 * (length + width)\n    return total_length_of_fence\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    fraction = 5 / 16\n    decimal = format(fraction, '.2f')\n    return float(decimal)\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        # Base cases\n        if steps == 0:\n            return 1\n        if steps < 0:\n            return 0\n\n        # Using the recurrence relation:\n        # ways(n) = ways(n-1) + ways(n-2) + ways(n-3)\n        return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    # Calculate the total number of ways to reach the fourth step\n    # Since Jimmy can't step on the fifth step, we calculate the number\n    # of ways to the fourth and then from the sixth to the tenth step.\n    ways_to_fourth = count_ways(4)\n    # Calculate the total number of ways to reach the tenth step from the sixth step,\n    # considering the muddy fifth step as nonexistent and subtracting 1 from the\n    # remaining steps to account for that. The last step from 9 to 10 can be 1, 2 or 3 steps.\n    ways_from_sixth_to_tenth = count_ways(10 - 5)\n\n    # The total number of ways to climb avoiding the fifth step is the product of\n    # number of ways to get to the fourth step and the number of ways to get from\n    # the sixth step to the tenth step\n    total_ways = ways_to_fourth * ways_from_sixth_to_tenth\n    return total_ways\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    ans = number - 100\n    return ans\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # We start with the smallest odd numbers\n    smallest_odds_sum = sum([1, 3, 5, 7, 9])\n    # The remainder after assigning the smallest odd numbers is what\n    # the largest odd number can be increased by\n    remainder = 85 - smallest_odds_sum\n    \n    # The largest odd number in the initial set of odd numbers is 9\n    # We add the remainder to get the maximum possible largest number\n    max_largest_number = 9 + remainder\n    \n    return max_largest_number\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare variables\n    T = symbols('T')   \n    income = symbols('income')\n\n    # Define equations based on the given information\n    # Tax paid on the first $30,000\n    tax_first_30k = T * 30000 / 100\n\n    # Tax paid on the remaining income above $30,000\n    tax_above_30k = (T + 3) * (income - 30000) / 100\n\n    # Total tax paid\n    total_tax_paid = tax_first_30k + tax_above_30k\n\n    # Equation corresponding to T+1% of the income\n    tax_income_relation = Eq(total_tax_paid, (T + 1) * income / 100)\n\n    # Solve the system of equations\n    solutions = solve((tax_income_relation, income > 30000, T > 0), (T, income))\n\n    # Extracting the income value from the solution\n    # Considering the case where income is greater than 30000\n    for sol in solutions:\n        if sol[1] > 30000 and sol[0] > 0:\n            return sol[1]\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours = 40\n    extra_hours = 0\n\n    while bill > 0:\n        if hours > 40 and hours <= 50:\n            bill -= 5\n            extra_hours += 1\n        elif hours > 50 and hours <= 60:\n            bill -= 8\n            extra_hours += 1\n        elif hours > 60:\n            bill -= 15\n            extra_hours += 1\n        hours += 1\n\n    return hours - 1  # Subtract 1 because the loop overshoots by an hour.\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship_still_water = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return int(n)\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import isqrt\n\n    count = 0\n    for n in range(1, 10):\n        number = int('2' + '5' * n)\n        root = isqrt(number)\n        if root * root == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let's denote the speed of Alan as v (in meters per minute) and Phillip's speed as v + 15\n    # We are given that Phillip takes 12 minutes, so Phillip's time (t_p) is 12 minutes\n    # Alan's time (t_a) is then 15 minutes, 3 minutes more than Phillip\n    t_p = 12\n    t_a = 12 + 3\n\n    # We have two equations:\n    # (1) Distance = Speed * Time\n    # (2) Distance_Phillip = (v + 15) * t_p\n    # (3) Distance_Alan = v * t_a\n    # And Distance_Phillip = Distance_Alan = Distance_AB (they cover the same distance from A to B)\n\n    # (v + 15) * 12 = v * 15\n    # 12v + 180 = 15v\n    # 180 = 15v - 12v\n    # 180 = 3v\n    # v = 180 / 3\n    v = 180 / 3\n\n    # Now we can find the distance by using Phillip's speed and time\n    # Distance_AB = (v + 15) * 12\n    Distance_AB = (v + 15) * t_p\n\n    return Distance_AB\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean1 = 28\n    mean2 = 11\n    num_values1 = 5\n    num_values2 = 12\n\n    total_sum1 = mean1 * num_values1\n    total_sum2 = mean2 * num_values2\n    total_sum = total_sum1 + total_sum2\n    total_values = num_values1 + num_values2\n\n    overall_mean = total_sum / total_values\n\n    return overall_mean\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_less_than_tom = 25.40\n\n    # After Alice spent $36, she has $25.40 less than Tom\n    # So, before spending she had $25.40 more\n    alice_initial_money = tom_money + alice_spent + alice_less_than_tom\n\n    return alice_initial_money\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    reduced_price = original_price - discount_amount\n    return reduced_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    # Total distance covered by benches and gaps\n    total_distance = 74\n    \n    # Number of gaps between benches is one less than number of benches\n    num_gaps = 9 - 1 \n    \n    # Total length covered by the gaps\n    total_gaps_length = num_gaps * 7\n    \n    # The remaining length is the total length of all benches\n    total_benches_length = total_distance - total_gaps_length\n    \n    # Length of one bench\n    bench_length = total_benches_length / 9\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in class A and B and the total number of candies\n    students_B = symbols('students_B')\n    total_candies = symbols('total_candies')\n\n    # Given that the number of students in class A is twice that of class B\n    students_A = 2 * students_B\n\n    # Equation 1: If each student in class A gets 4 candies, 20 more candies are needed\n    equation1 = Eq(4 * students_A, total_candies - 20)\n\n    # Equation 2: If each student in class B can get 6 candies, there will be 16 candies left\n    equation2 = Eq(6 * students_B, total_candies - 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (students_B, total_candies))\n\n    return solutions[total_candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_arms_cut = 21\n    new_arms_grow_for_every_cut = 1\n    initial_arms_lost_before_growing = 5\n\n    # Every time Peter cuts off an arm, one grows back, so the total number of cuts\n    # includes both the arms that were cut and the ones that grew back, minus the initial 5\n    # because they didn't grow back instantly\n    original_arms = total_arms_cut - (total_arms_cut - initial_arms_lost_before_growing) / new_arms_grow_for_every_cut\n\n    return int(original_arms)\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Since we want the minimum value of the 4th greatest number,\n    # the first two numbers should be as large as possible.\n    # The 3rd greatest number is fixed at 246.\n    # So we can fill the remaining 7 numbers with the smallest possible numbers which is 1.\n    # 2021 - (1 * 7) - 246 = 2021 - 7 - 246\n    sum_of_first_three_numbers = 2021 - 7 - 246\n    \n    # Now, to maximize the first two numbers,\n    # we have to reduce the 4th greatest number to its smallest possible value.\n    # We start assuming that the other numbers beyond the 4th are all 1's.\n    # Then the remaining sum to distribute to the first two is:\n    sum_remaining_for_first_two = sum_of_first_three_numbers - 246  # Subtract the 3rd greatest number.\n    \n    # To maximize the first two numbers, they should be as close to each other as possible.\n    # The first number should be greater or equal to the 3rd (which is 246),\n    # hence the second number (which is the 4th greatest) should be one less.\n    fourth_greatest = (sum_remaining_for_first_two // 2) - 1\n\n    return fourth_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # To ensure we have 2 coins of different colors, we consider the worst-case scenario\n    # where we keep picking the same color coins until we are forced to pick a different color.\n    \n    # Picking all gold coins first, we can pick at most 6 gold coins.\n    # The next coin we pick must be silver to ensure we have 2 different colored coins.\n    max_gold = 6\n    \n    # Picking the 7th coin guarantees a different color (silver in this case)\n    min_picks_to_diff_color = max_gold + 1\n    \n    return min_picks_to_diff_color\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_per_interval = 20 / (5 - 1)  # Distance between 1st and 5th tree divided by the number of intervals\n    num_intervals = 14 - 8  # Number of intervals between 8th and 14th tree\n    total_distance = distance_per_interval * num_intervals\n\n    return total_distance\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_coins = 21\n    total_value = 630  # in cents\n\n    # Let the number of 50-cent coins be x\n    # Then the number of 20-cent coins will be total_coins - x\n    # The total value is also x * 50 + (total_coins - x) * 20\n\n    # We look for the number of x that satisfies the equation\n    for x in range(total_coins + 1):\n        if x * 50 + (total_coins - x) * 20 == total_value:\n            return x\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_s = 150\n    time_min = time_s / 60\n\n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Initialize selection array with zeros indicating unselected\n    selection = [0] * 25  # Array indices 1-24 will be used\n\n    # Count how many numbers can be selected\n    count = 0\n\n    # Loop over each number from 1 to 24\n    for num in range(1, 25):\n        # Check if the number can be selected based on mutual exclusivity with neighbors\n        # A number can be selected if both its left and right neighbor (in a circle) are unselected\n        left_neighbor = 24 if num == 1 else num - 1\n        right_neighbor = 1 if num == 24 else num + 1\n\n        if selection[left_neighbor] == 0 and selection[right_neighbor] == 0:\n            # Mark the current number as selected\n            selection[num] = 1\n            # Increment the count of selected numbers\n            count += 1\n            # Skip the next number to maintain the mutual exclusivity condition\n            selection[right_neighbor] = -1  # Mark as unavailable for selection\n\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote Devi's current age as d and Jerry's current age as j\n    j = symbols('j') \n    d = j + 8 # Devi is 8 years older than Jerry\n\n    # In 4 years' time, the ratio of their ages will be 5:7\n    # (Devi's age in 4 years) / (Jerry's age in 4 years) = 5/7\n    # (d + 4) / (j + 4) = 5/7\n    # cross-multiply to get a linear equation with one variable\n    equation = Eq((d + 4) * 7, (j + 4) * 5)\n\n    # solve the equation for j (Jerry's current age)\n    sol = solve((equation), (j))\n\n    return sol[j]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    equation1 = Eq(father_age, grey_age * 3)\n    equation2 = Eq(father_age - grey_age, 30)\n\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "import matplotlib.pyplot as plt\n\ndef solution():\n    labels = ['Bud', 'Pip']\n    parts = [1, 5] # Bud has 1 part, Pip has 5 parts, which is 5 times Bud's parts\n\n    fig1, ax1 = plt.subplots()\n    ax1.pie(parts, labels=labels, autopct='%1.1f%%')\n\n    plt.show()\n    \n    return \"Graph displayed\"\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator_sum = 2998 + 2999 + 3000\n    denominator_sum = 2997 + 2998 + 2999 + 3000 + 3001\n    result = 10 * (numerator_sum / denominator_sum)\n    return result\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Apply the Pigeonhole Principle\n    least_books_on_most_layer = (total_books + layers - 1) // layers\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    # Given details about the arithmetic sequence\n    first_term = 48  # First row has 48 seats\n    last_term = 80   # Last row has 80 seats\n    common_difference = 4  # Each row has 4 more seats than the previous one\n\n    # Calculate the number of rows\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # We need to solve for n, which is the number of terms (rows)\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of seats using the formula for the sum of n terms of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    sum_of_seats = n / 2 * (first_term + last_term)\n\n    return int(sum_of_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 6, 9]\n    permutation_list = list(permutations(digits, 3))\n    return len(permutation_list)\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_numbers = 0.12 + 0.345 + 0.6789\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for i in range(1, 3):  # First digit can't be 0, so it can only be 1 or 2\n        for j in range(3):  # Second digit can be 0, 1, or 2 (3 options)\n            for k in range(3):  # Third digit can also be 0, 1, or 2 (3 options)\n                if i != j and i != k and j != k:  # All digits must be unique\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    num_cows = 523\n    num_pigs = 172\n    difference = num_cows - num_pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    # Make sure the number is between 100 and 200\n    while ans[0] < 100:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0] if ans[0] <= 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The general formula for a dividend given a quotient and remainder is:\n    # dividend = divisor * quotient + remainder\n    # Minimum value of dividend occurs when the divisor is minimized, which is at least 1 more than the remainder\n    # since the remainder has to be less than the divisor.\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    hazel_present, jessica_present = symbols('hazel_present jessica_present')\n\n    # Define the variable for Hazel's age in years from now\n    y = symbols('y')\n\n    # Hazel's age in three years will be y years old, so Hazel's present age is y - 3\n    equation1 = Eq(hazel_present, y - 3)\n\n    # Jessica is 3 years younger than Hazel\n    equation2 = Eq(jessica_present, hazel_present - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_present, jessica_present))\n\n    # Calculate their total age next year\n    total_age_next_year = (solutions[hazel_present] + 1) + (solutions[jessica_present] + 1)\n\n    # Return the total age next year as a function of y (Hazel's age in three years)\n    ans = total_age_next_year.subs(y, y).simplify()\n\n    return ans\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the initial count of animals in the farm is total_animals\n    # Let c represent the initial number of cows and g represent the number of goats\n    total_animals, c, g = symbols('total_animals c g')\n\n    # Initial percentages of cows and goats\n    equation1 = Eq(c, 0.65 * total_animals)  # 65% of the animals were cows\n    equation2 = Eq(g, total_animals - c)      # The rest were goats\n\n    # After adding 240 animals\n    # The percentage of cows increased to 85% (65% + 20%)\n    # The number of goats doubled\n    # So the number of cows now would be 85% of total_animals + 240\n    equation3 = Eq(c + 240, 0.85 * (total_animals + 240))\n    equation4 = Eq(2 * g, (total_animals + 240) - (c + 240))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals, c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert from meters to cm\n    section3 = 150 / 10  # convert from mm to cm\n\n    # Calculate the total width\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    age_difference = 38 - melanie_age\n    uncle_age = melanie_age + age_difference\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students_facing_teacher = 0\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            continue\n        else:\n            students_facing_teacher += 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of all the variables\n    degree_of_monomial = 5\n    # Given monomial is -x^3 * y^(2n), so the degree is 3 + 2n\n    # Thus, 3 + 2n = degree_of_monomial\n    # Solve for n: 2n = degree_of_monomial - 3\n    n = (degree_of_monomial - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    sum_fractions = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = sum_fractions.numerator // sum_fractions.denominator\n    ans += Fraction(sum_fractions.numerator % sum_fractions.denominator, sum_fractions.denominator)\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_current_age = 15\n    sister_future_age = amy_current_age - 5\n    sister_current_age = sister_future_age - 3\n    return sister_current_age\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different card numbers/letters,\n    # to guarantee that at least two cards will have the same number/letter,\n    # one card from each number/letter can be drawn plus one additional card.\n    cards_to_draw = 13 + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_num = float('inf')\n    \n    for num in range(100, 1000, 2): # Only iterate through even numbers\n        if sum(map(int, str(num))) == 21:\n            smallest_num = min(smallest_num, num)\n    \n    return smallest_num\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_sum = 18\n    whole_sum = (part_sum * 5) / 3\n    return whole_sum\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21)) + \\\n          sum(2 / i for i in range(3, 21)) + \\\n          sum(3 / i for i in range(4, 21)) + \\\n          sum(4 / i for i in range(5, 21)) + \\\n          sum(5 / i for i in range(6, 21)) + \\\n          sum(6 / i for i in range(7, 21)) + \\\n          sum(7 / i for i in range(8, 21)) + \\\n          sum(8 / i for i in range(9, 21)) + \\\n          sum(9 / i for i in range(10, 21)) + \\\n          sum(10 / i for i in range(11, 21)) + \\\n          sum(11 / i for i in range(12, 21)) + \\\n          sum(12 / i for i in range(13, 21)) + \\\n          sum(13 / i for i in range(14, 21)) + \\\n          sum(14 / i for i in range(15, 21)) + \\\n          sum(15 / i for i in range(16, 21)) + \\\n          sum(16 / i for i in range(17, 21)) + \\\n          sum(17 / i for i in range(18, 21)) + \\\n          sum(18 / i for i in range(19, 21)) + \\\n          19 / 20\n    return round(ans, 6)\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_amount = 156\n    price_cactus = 2\n    price_sunflower = 7\n    for sunflowers in range(total_amount // price_sunflower + 1):\n        cacti = sunflowers + 6\n        if (cacti * price_cactus) + (sunflowers * price_sunflower) == total_amount:\n            return cacti\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil = symbols('book pencil')\n    equation1 = Eq(8 * book + 3 * pencil, 3 * book + 8 * pencil + 1)\n    equation2 = Eq(pencil, 0.40)\n\n    solutions = solve((equation1, equation2), (book, pencil))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum([(2*i)**2 for i in range(1, 11)])\n    odd_sum = sum([(2*i-1)**2 for i in range(1, 11)])\n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    initial_volume = 17\n    jug_volume = 2\n    num_jugs = 6\n\n    water_after_pouring = initial_volume - (jug_volume * num_jugs)\n\n    return water_after_pouring\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_initial, manutd_initial = symbols('liverpool_initial manutd_initial')\n\n    equation1 = Eq(liverpool_initial, manutd_initial + 1000)\n    equation2 = Eq(manutd_initial + 4836, 3 * (liverpool_initial + 472))\n\n    solutions = solve((equation1, equation2), (liverpool_initial, manutd_initial))\n\n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_price = symbols('book_price pencil_price')\n    sarah_books = 8\n    sarah_pencils = 3\n    rebecca_books = 3\n    rebecca_pencils = 8\n\n    pencil_price = 40\n\n    # Sarah's total cost\n    sarah_total = sarah_books * book_price + sarah_pencils * pencil_price\n    # Rebecca's total cost\n    rebecca_total = rebecca_books * book_price + rebecca_pencils * pencil_price\n\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 100)\n\n    # Solving for the book price\n    solutions = solve(equation, book_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n    jack_points = andrew_points + jack_extra_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    num_ways = comb(total_players, players_needed)\n\n    return num_ways\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # She had $3 left after giving Mike $2\n    before_nini = remaining_after_mike * 2  # She gave half of the remaining to Nini\n    before_bob = before_nini * 2  # She gave half of the remaining to Bob\n    original_amount = before_bob * 2  # She gave half of the money to her mother\n    \n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    equation1 = Eq(peaches - 10, 5 * students_A)\n    equation2 = Eq(peaches + 2, 8 * students_B)\n\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n    while digit_count < 2023:\n        digit_count += len(str(current_number))\n        if digit_count < 2023:\n            current_number += 1\n    # Calculate how many digits we went over\n    excess = digit_count - 2023\n    # Convert the current number to string to find the digit\n    num_str = str(current_number)\n    # Find the correct digit by subtracting the excess\n    ans = int(num_str[len(num_str) - excess - 1])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tshirts, caps = symbols('tshirts caps')\n    \n    # relationship between the number of T-shirts and caps\n    ratio_eq = Eq(tshirts/caps, 8/5)\n    \n    # total amount collected from selling the items\n    amount_eq = Eq((1/4)*tshirts*3 + (1/5)*caps*5, 132)\n    \n    # solving the equations\n    solutions = solve((ratio_eq, amount_eq), (tshirts, caps))\n    \n    return solutions[tshirts]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    #  llth birthday means today the person is 10 (ll = 11 in Roman numerals)\n    current_age = 10\n    # Number of years from 98 to 01 is 3 years\n    years_passed = 3\n    # Calculating the age on 31/12/01\n    age_on_310201 = current_age + years_passed\n    return age_on_310201\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '4625'\n    all_combinations = sorted(set(int(''.join(p)) for p in permutations(digits)))\n    for number in all_combinations:\n        if number % 2 != 0:  # checking if the number is odd\n            return number\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n    trips_required = total_students // boat_capacity + (1 if total_students % boat_capacity else 0)\n    return trips_required\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    number = 36\n\n    ordinal_number = ((number - first_term) // difference) + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of game cards Eric originally has.\n    joe, eric, x = symbols('joe eric x')\n\n    # Initial number of game cards Joe and Eric have.\n    equation1 = Eq(joe, 7 * x)\n    \n    # After Joe gives away some game cards, they both have 168 cards each.\n    equation2 = Eq(joe - (7*x - 168), 168)\n    equation3 = Eq(eric + (7*x - 168), 168)\n\n    # Solve the equations for x, which represents the number of game cards Eric has originally.\n    solutions = solve((equation1, equation2), (joe, x))\n\n    # Now we find out how many cards Joe must give to Eric.\n    cards_to_give = solutions[joe] - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens in [2, 3, 5, 7]:\n        for ones in [2, 3, 5, 7]:\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_kids = 8\n    ran_away = 5\n    caught_later = 9\n\n    total_kids_caught = initial_kids - ran_away + caught_later\n\n    return total_kids_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time = 80  # total time available in minutes (1 hour 20 minutes)\n    num_pictures = total_time // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # Half of the circle's population difference between positions 19 and 6\n    half_people = (19 - 6) // 2\n    \n    # Total people will be twice plus the starting position\n    total_people = half_people * 2 + 1\n    \n    return total_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Mina can split the apples such that one group has 1 apple and the other group has 9,\n    # or one group has 2 apples and the other has 8, etc. up to 5 and 5, but since the two groups\n    # must have different numbers of apples, we cannot include the case where both groups have 5.\n    # Hence, there are 4 ways she can split the apples.\n\n    # The number of ways is simply (10 - 1) / 2 because for each number x (from 1 to 4),\n    # there is a corresponding group with (10 - x) apples.\n    \n    count = (10 - 1) // 2\n    return count\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    number_of_students = 5\n    ways_to_line_up = math.factorial(number_of_students)\n    return ways_to_line_up\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_swims = amy_swims - joanne_swims\n    return more_swims\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1/3\n    peter_rate = 1/6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    isaac, joseph = symbols('isaac joseph')\n\n    equation1 = Eq(isaac, 5 * joseph)\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    # calculate the factorial of 29\n    number = factorial(29)\n    \n    # count the number of trailing zeroes\n    count_zeroes = 0\n    while number % 10 == 0:\n        count_zeroes += 1\n        number //= 10\n\n    return count_zeroes\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n\n    solutions = solve(equation)\n\n    for sol in solutions:\n        if all(x.is_Integer and 0 <= x <= 9 for x in sol.values()):\n            return sol[abcd]\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int(\"12345654321\", 8)\n    \n    # Find the remainders when divided by 7 and 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # The sum of the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let distance Ted jogged be d when they meet\n    # Then the total distance of the path is d + 1200 meters\n    # The ratio of their speeds is Linda: Ted = 3: 4\n    # Their distance ratio when they meet should be the same as their speed ratio\n    # Linda has jogged 1200 meters, so Ted should have jogged (4/3) * 1200 meters\n    \n    ted_distance_when_meet = (4/3) * 1200\n    # The length of the path is what Ted jogged plus what Linda jogged when they meet\n    path_length = ted_distance_when_meet + 1200\n    \n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(0, 10):\n        number = int(f\"2018{A}\")\n        if number % 9 == 0:\n            return number % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5  # Squirrels in front of Ryan\n    elvis_behind = 7  # Squirrels behind Elvis\n    between_re = 1  # Squirrels between Ryan and Elvis\n   \n    total_squirrels = ryan_front + between_re + elvis_behind + 2  # Ryan + Elvis + between + in front and behind\n \n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n-1) * (derangement(n-1) + derangement(n-2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done_by_3_workers_in_3_days = workers * days\n    days_for_1_worker = work_done_by_3_workers_in_3_days / 1\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n    ans = (percentage / 100) * total_weight\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 0.30 * 45\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_of_odds = sum(range(1, 20, 2))\n    return sum_of_odds\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jack's current age as 'jack'\n    jack = symbols('jack')\n\n    # Jack's age five years ago: jack - 5\n    # Jack's age in 8 years: jack + 8\n\n    # The equation according to the problem\n    equation = Eq(jack - 5, (jack + 8) / 2)\n\n    # Solve the equation for Jack's age\n    jack_age = solve(equation, jack)\n\n    return jack_age[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the original number of pupils in School P.\n    # Let y be the original number of pupils in School Q.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # The ratio of pupils in School P and School Q is 2:3 initially.\n    equation1 = Eq(x / y, 2 / 3)\n    # After adding 240 pupils to each, the ratio is 3:4.\n    equation2 = Eq((x + 240) / (y + 240), 3 / 4)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora initially spent 70% of her money on a bag\n    # This means she has 30% of her money left\n    remainder = 0.3\n\n    # She spent 3/8 of the remainder on a purse\n    # We calculate the percentage of the original amount this is\n    spent_on_purse = (3 / 8) * remainder\n\n    # Convert the fraction to a percentage\n    purse_percentage = spent_on_purse * 100\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    num_vowels = sum(word.count(vowel) for vowel in vowels)\n    num_consonants = len(word) - num_vowels\n\n    # Total arrangements\n    total_arrangements = factorial(len(word))\n\n    # Arrangements where vowels are together\n    vowels_together = factorial(num_vowels) * factorial(num_consonants + 1)\n\n    # Number of valid arrangements (total - vowels together)\n    ans = total_arrangements - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_total_students = 5 + 1\n    candies_per_student = total_candies // new_total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Angles BAP and PAC are congruent because BP bisects angle ABC\n    # Angles ABP and BCP are congruent because CP bisects angle ACB\n    \n    # Sum of angles in a triangle is 180 degrees.\n    # Each angle in triangle ABC can be written in terms of the other angles.\n    angle_BAC = 50\n    angle_ABC = 2 * (180 - angle_BAC) / 3  # Because BP bisects ABC\n    angle_ACB = 2 * (180 - angle_BAC) / 3  # Because CP bisects ACB\n\n    # The sum of the angles at point P (BPC) is 360 degrees.\n    ans = 360 - (angle_ABC + angle_ACB)\n    \n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    initial_sweets = 11\n    wrappers = initial_sweets\n    total_sweets = initial_sweets\n    \n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        wrappers = wrappers % 3 + new_sweets\n        total_sweets += new_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    equation2 = Eq(three_tailed, 2 + (six_tailed / 2))\n    equation3 = Eq(2 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2, 4 * (two_tailed + three_tailed + six_tailed + eight_tailed))\n    equation4 = Eq((two_tailed + three_tailed + six_tailed + eight_tailed) - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), -241)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = '11:40 AM'\n    duration_str = '4:50'\n\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M %p')\n    hours, minutes = map(int, duration_str.split(':'))\n    duration = timedelta(hours=hours, minutes=minutes)\n\n    leave_time = arrival_time + duration\n    ans = leave_time.strftime('%I:%M %p')\n\n    return ans\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    weight_per_bag = 0.25 # in kg\n    total_weight = 5 # in kg\n\n    number_of_bags = total_weight / weight_per_bag\n    total_selling_price = selling_price_per_bag * number_of_bags\n    profit = total_selling_price - cost_price\n    profit_percentage = (profit / cost_price) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways from Ayton to Beeton\n    AB = 4\n    # Number of ways from Beeton to Ceeton\n    BC = 5\n    # Number of ways from Ceeton to Deeton\n    CD = 6\n    # Number of ways from Ayton directly to Deeton\n    AD_direct = 3\n    \n    # Number of ways from Ayton to Deeton via Beeton and Ceeton\n    AD_via_BC = AB * BC * CD\n    \n    # Total number of ways from Ayton to Deeton\n    ans = AD_via_BC + AD_direct\n    \n    return ans\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    target_numerator = 3\n\n    ans = (denominator * target_numerator) / numerator\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given the 10th term (a_10) is 23 and the 15th term (a_15) is 38\n    a_10 = 23\n    a_15 = 38\n    n_10 = 10\n    n_15 = 15\n\n    # Calculating the common difference (d)\n    d = (a_15 - a_10) / (n_15 - n_10)\n\n    # Using the formula a_n = a_1 + (n - 1)*d to find the first term (a_1)\n    a_1 = a_10 - (n_10 - 1) * d\n\n    # Now finding the 12th term (a_12) using the formula\n    n_12 = 12\n    a_12 = a_1 + (n_12 - 1) * d\n\n    return a_12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote joe's amount of money as 'joe'\n    joe = symbols('joe')\n\n    # Sally had $3.75 initially and spent $2.50, so she had $3.75 - $2.50 left.\n    sally_left = 3.75 - 2.50\n\n    # Joe spent the same amount on the ice-cream cone, so he had 'joe - $2.50' left.\n    # Together, they have $5 left.\n    equation = Eq(sally_left + (joe - 2.50), 5)\n\n    # Solve the equation to find out how much money Joe had at first.\n    solution = solve(equation, joe)\n\n    return solution[joe]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    total_trees_first_3_days = 135 * 3\n    total_trees_last_5_days = 151 * 5\n    total_days = 8\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    average_trees = total_trees / total_days\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    total_numbers = 2016\n    \n    # Multiples of 2 and 3 will be underlined twice (as 2*3=6)\n    # Multiples of 2 and 4 will not be considered as these are already taken by 4 (which is a multiple of 2)\n    # Multiples of 3 and 4 will be underlined twice (as the common multiple is 12 which is a multiple of both)\n    # But need to exclude the numbers that are multiples of 2, 3, and 4 (i.e., multiples of 12), as they would be underlined three times.\n\n    multiples_of_6 = total_numbers // 6\n    multiples_of_12 = total_numbers // 12\n\n    twice_underlined = multiples_of_6 + multiples_of_12 - 2 * multiples_of_12\n    \n    return twice_underlined\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate the number of ways to choose 2 out of the 4 options\n    # Each choice consists of selecting 2 different types of dishes\n    ans = comb(salads, 2) + comb(soups, 2) + comb(vegetables, 2) + comb(sandwiches, 2)\n    \n    # Plus the number of ways to combine different dish types\n    # Choosing one salad and one soup, one salad and one vegetable, and so on.\n    ans += salads * soups\n    ans += salads * vegetables\n    ans += salads * sandwiches\n    ans += soups * vegetables\n    ans += soups * sandwiches\n    ans += vegetables * sandwiches\n\n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds place can't be 0 for a 3-digit number\n        for tens in range(0, 10):  # tens place can be 0\n            for ones in range(0, 10, 2):  # ones place needs to be even\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    \n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two unknowns\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # Equation 1: mangoes = strawberries + 448\n    equation1 = Eq(mangoes, strawberries + 448)\n\n    # Equation 2: strawberries = 2 * (mangoes - 900)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boys_more_than_girls = 32\n    current_difference = 0\n    total_students = 0\n    side_length = 0\n    \n    while current_difference != boys_more_than_girls:\n        side_length += 2\n        boys = side_length * 4 - 4\n        girls = (side_length - 2) * 4 - 4 if side_length > 1 else 0\n        current_difference = boys - girls\n        total_students = boys + girls + (girls if side_length > 1 else 1)\n\n    ans = total_students\n    return ans\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples_frac = 2 / 3\n    bananas_frac = 1 / 9\n    lemons_frac = 1 - (apples_frac + bananas_frac)\n\n    lemons_eq = Eq((apples_frac - lemons_frac) * total_items, 12)\n\n    total_items_solution = solve(lemons_eq, total_items)\n\n    lemons_count = lemons_frac * total_items_solution[0]\n\n    return int(lemons_count)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    max_money, anthony_money = symbols('max_money anthony_money')\n    \n    # After Max bought the chocolates\n    eq1 = Eq(max_money - 12, 2 * (anthony_money / 5))\n    \n    # After Anthony bought the chocolates\n    eq2 = Eq(max_money, 8 * ((anthony_money - 12) / 13))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (max_money, anthony_money))\n    \n    return solutions[max_money]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of each of red and blue stickers be 'r' before giving away\n    r = symbols('r')\n\n    # Given that she gave away 2/3 of her red stickers, the remaining red stickers\n    red_remaining = r - (2/3)*r\n\n    # Let 'b' be the fraction of blue stickers she gave away\n    b = symbols('b')\n\n    # The remaining blue stickers after giving away 'b' fraction of the 'r' stickers\n    blue_remaining = r - b*r\n\n    # The total remaining stickers is 1/4 of the total stickers she initially had\n    # So, 2*r (total initial stickers) * 1/4 = red_remaining + blue_remaining\n    total_remaining = Eq((2*r) * (1/4), red_remaining + blue_remaining)\n\n    # Solve the equation for 'b'\n    solution_b = solve(total_remaining, b)\n\n    return solution_b[0]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Using stars and bars method here. Number of stars (pens) is 20-6 because each child should get at least one pen.\n    stars = 20 - 6\n    # Number of bars (divisions between children) is 5 because division for 6 kids requires 5 bars. (n-1 bars)\n    bars = 6 - 1\n    # Number of ways to distribute pens is the combination of (stars + bars) choose (bars)\n    num_ways = factorial(stars + bars) // (factorial(stars) * factorial(bars))\n    return num_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Unit digit patterns for base 4: 4, 6, 4, 6, ... (repeats every 2)\n    # Since the unit digit pattern repeats every 2 powers,\n    # and 2022 is even, we can deduce that the unit digit of 4^2022\n    # will be the same as the unit digit of 4^2.\n    return (4**2) % 10  # Unit digit of 4 squared\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solutions = solve(equation, magic_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # The smallest number in the biggest pile is when the distribution of the piles is as even as possible\n    # but still with different number of marbles. If we divide 16 marbles into 4 piles, we start with four piles\n    # of 4 marbles each and then move one marble from one pile to the next until all piles are different.\n    \n    # Start with the even distribution\n    piles = [4, 4, 4, 4]\n\n    # Move one marble from the first pile to the second, then to the third, and finally to the last\n    # By doing this, we ensure that all piles are different\n    piles[1] += 1 # Piles become [4, 5, 4, 4]\n    piles[2] += 1 # Piles become [4, 5, 5, 4]\n    piles[3] += 1 # Piles become [4, 5, 5, 5]\n\n    # Now we need to make the biggest pile as small as possible while keeping all numbers different\n    # We move one marble from the second pile to the first, and from the third to the fourth\n    piles[0] += 1 # Piles become [5, 5, 5, 5]\n    piles[1] -= 1 # Piles become [5, 4, 5, 5]\n    piles[3] -= 1 # Piles become [5, 4, 5, 4]\n    piles[2] -= 1 # Piles become [5, 4, 4, 4]\n    piles[3] += 2 # Piles become [5, 4, 4, 6]\n\n    # The smallest possible number in the biggest pile is 6\n    return max(piles)\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths_in_metres = {\n        '10 millimetres': 10 / 1000,\n        '100 centimetres': 100 / 100,\n        '10 metres': 10,\n        '2 kilometres': 2 * 1000,\n        '2800 centimetres': 2800 / 100,\n        '2500 metres': 2500,\n        '100 millimetres': 100 / 1000,\n        '100 metres': 100\n    }\n\n    smallest_length = min(lengths_in_metres.values())\n    smallest_length_key = [k for k, v in lengths_in_metres.items() if v == smallest_length]\n\n    return smallest_length_key\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the total number of days Dave read\n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n\n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    can_swim = 20\n    can_play_basketball = 25\n    can_both = 10\n    can_neither = 9\n\n    total_students = (can_swim + can_play_basketball - can_both) + can_neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    sum_sequence = sum(sequence)\n    return sum_sequence\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # There are 6 options for the first digit (from 1 to 6)\n    # There are 5 options for the second digit (excluding the chosen first digit)\n    # There are 4 options for the third digit (excluding the chosen first and second digits)\n    # However, since the number needs to be odd, the last digit must be 1, 3, or 5\n    # Therefore, there are only 3 options for the third digit\n    first_digit_options = 5  # Digits 1 through 5 (6 cannot be the first digit as it would create a four-digit number)\n    second_digit_options = 5  # One digit has been used, 5 remain\n    third_digit_options = 3  # Only odd digits 1, 3, 5 can be used\n\n    total = first_digit_options * second_digit_options * third_digit_options\n\n    return total\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while not is_palindrome(steps):\n        steps += 1\n\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    return smallest_6_digit - largest_5_digit\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(6*pupils - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n\n    # Solve for the number of ducks using the system of equations:\n    # cows + ducks = total_animals\n    # (legs_per_cow * cows) + (legs_per_duck * ducks) = total_legs\n    for ducks in range(total_animals + 1):\n        cows = total_animals - ducks\n        if (legs_per_cow * cows) + (legs_per_duck * ducks) == total_legs:\n            return ducks \n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Let x be the average height of the boys.\n    # Then, the average height of the girls is x + 3.2.\n    # The total height of the group is the average height times the number of children.\n    # Hence: 11 * (x + 3.2) + 5 * x = 16 * 122.5\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    average_height_total = 122.5\n    num_children = 11 + 5\n    num_girls = 11\n    num_boys = 5\n\n    # Set up the equation and solve for x\n    equation = Eq(num_girls * (x + 3.2) + num_boys * x, num_children * average_height_total)\n    solution = solve(equation, x)\n\n    # The average height of the girls is x + 3.2\n    average_height_girls = solution[x] + 3.2\n\n    return average_height_girls\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # This problem can be solved using an inductive recursive process\n    # Let f(n) be the maximum number of different parts n lines can divide the plane into.\n    # We know that one line divides the plane into 2 parts, two lines into 4, three lines into 7, and so on.\n    # Each new line intersects previous lines at most n times creating at most n + 1 new parts.\n    # Therefore, the recursive formula for this problem is f(n) = f(n - 1) + n\n\n    # We convert this recursion for lines into a recursion for triangles:\n    # Each triangle can be thought of as 3 lines. However, each triangle also has intersections with others.\n    # So we use the recursive formula for lines but adjust the count for additional intersections created by triangles.\n\n    # According to this pattern, the number of regions with n triangles is:\n    # f(3n) - since each triangle contributes 3 lines to the plane\n\n    # We start with f(3) for 1 triangle using the pattern we discovered:\n    # f(3) = f(2) + 3 = 4 + 3 = 7\n\n    # Number of triangles\n    n = 5\n\n    # For each additional triangle not only do we add 3 more lines but we also potentially add more intersection points.\n    \n    # We use the recursive pattern f(3n) to calculate parts for 5 triangles\n    parts = 1 # Starts at 1 as the whole plane\n    for i in range(1, 3 * n + 1):\n        parts += i\n\n    return parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the number of girls and b the number of boys\n    g = symbols('g')\n    \n    # Total students\n    total_students = 70\n    \n    # Since the number of girls and the number of boys add up to 70, we get:\n    b = total_students - g\n    \n    # Total score for all students\n    total_score = total_students * 66\n    \n    # Equation based on average score of girls and boys\n    equation = Eq(g * 70 + b * 63, total_score)\n    \n    # Solve the equation to find the number of girls\n    solution = solve(equation, g)\n    \n    return solution[g]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since it's an arithmetic sequence of odd numbers, the common difference is 2\n    # Let the first term be a, and since there are 9 terms, 9a + 9*8/2*2 = 1503\n    # 9a + 72 = 1503\n    # 9a = 1503 - 72\n    # a = (1503 - 72) / 9\n    a = (1503 - 72) // 9\n    return a\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    nth_term_1 = 32\n    value_1 = 157\n    nth_term_2 = 108\n    value_2 = 537\n\n    common_difference = (value_2 - value_1) / (nth_term_2 - nth_term_1)\n    first_term = value_1 - (nth_term_1 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Let's use algebra to solve the problem. Let x be the number of candies Donna had originally.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Donna kept half of the number of candies plus 3 candies.\n    donna_kept = x / 2 + 3\n    \n    # The remaining candies given to Jane.\n    jane_candies = x - donna_kept\n    \n    # Jane ate 1/3 of the candies plus 4 candies.\n    jane_ate = jane_candies / 3 + 4\n    \n    # The remaining candies given to Kate.\n    kate_candies = jane_candies - jane_ate\n    \n    # Kate ate 1/4 of the candies and had 42 candies left.\n    # Hence, the candies before Kate ate were (42 / (1 - 1/4)) = (42 / (3/4)) = 42 * (4/3)\n    before_kate_ate = 42 * (4/3)\n    \n    # Therefore, the equation we have is kate_candies = before_kate_ate\n    equation = Eq(kate_candies, before_kate_ate)\n    \n    # Solving for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are three passes and the ball must return to A after these passes.\n    # Let's denote other individuals as B, C, and D.\n    # We will ignore the passing routes that end in A before the last pass because A needs to get the ball back on the 3rd pass.\n\n    # First Pass: A can pass the ball to B, C, or D (3 options).\n    # Second Pass: The person who received the ball can pass it to two remaining people except A (2 options).\n    # Third Pass: The person who received the ball on the second pass can only pass it back to A (1 option).\n\n    # Since the events are independent, we multiply the number of ways each event can occur.\n    \n    first_pass_options = 3\n    second_pass_options = 2\n    third_pass_options = 1  # The ball must return to A\n\n    total_ways = first_pass_options * second_pass_options * third_pass_options\n\n    return total_ways\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5  # cost of a bag of crisps in pence\n    num_days = 5  # number of days to buy crisps\n    total_cost = cost_per_day * num_days  # total cost calculation\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the original number of storybooks Anthea has\n    jason_books = 30  # Jason's original number of storybooks\n    anthea_books = jason_books - 4  # Number of books Anthea will have after Jason gives her 4 books\n    x = anthea_books  # Because after receiving 4 books, Anthea and Jason will have the same number of books\n\n    # Jason original number of books - Anthea original number of books\n    difference = jason_books - x\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    return (36 * 21) // (6 * 7)\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        if (p != 0) and (10*q + p) == 2*(10*p + q):\n            return 10*q + p\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    ans = 4 * 10 // math.gcd(4, 10)\n    return ans\n\nimport math\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    return 0.98 + 1.98 + 2.98 + 3.98\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 2020\n    common_factor_2 = 505\n    multiplier_1 = 68\n    multiplier_2 = 128\n\n    # Extract common factor by dividing common_factor_1 by common_factor_2\n    gcd = common_factor_1 // common_factor_2  # since 2020 is exactly 4 times 505, this is equivalent to gcd\n\n    # Distributive property (factoring out the greatest common divisor)\n    ans = (common_factor_2 * gcd) * multiplier_1 + common_factor_2 * multiplier_2\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Mass of sugar in each solution\n    sugar_xavier = 100 * 0.25\n    sugar_yelena = 500 * 0.55\n    sugar_carol = 400 * 0.35\n\n    # Total mass of sugar\n    total_sugar = sugar_xavier + sugar_yelena + sugar_carol\n\n    # Total mass of the solution\n    total_solution = 100 + 500 + 400\n\n    # Concentration of the resulting sugar solution\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, 2 * B)\n    equation2 = Eq((1 / A) + (1 / B), 1 / (B - 12))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    A_efficiency = solutions[A]\n    B_efficiency = solutions[B]\n\n    total_efficiency = A_efficiency + B_efficiency\n    total_days_to_complete = 1 / total_efficiency\n\n    return total_days_to_complete\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n    tissues_cost = total_money - (newspaper_cost + change_received)\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let x be the original number of boys (which is the same as the number of girls)\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # After 3/5 of the boys left, the number of boys remaining is x - (3/5) * x = (2/5) * x\n    # After 42 girls left, the number of girls remaining is x - 42\n    \n    # There are 12 more boys than girls left, which gives us the equation:\n    # (2/5) * x = (x - 42) + 12\n    equation = Eq((2/5) * x, x - 42 + 12)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # The original number of students is the number of boys plus the number of girls\n    original_students = 2 * solution[0]\n    \n    return original_students\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    result = 111111111 * 99999999\n    return result\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance from home to office\n    x = symbols('x')\n    \n    # Time taken at 3 km/h speed\n    time1 = x / 3\n    # Time taken at 5 km/h speed\n    time2 = x / 5\n    \n    # Time difference in hours (12 min late - 4 min early)\n    # Convert minutes to hours by dividing by 60\n    time_diff = (12 + 4) / 60\n\n    # Equation based on the time difference when traveling at different speeds\n    equation = Eq(time1 - time2, time_diff)\n\n    # Solve for x (distance)\n    distance = solve(equation, x)\n\n    return distance[0]\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's jogging speed in meters per second\n    time_minutes = 12\n    time_seconds = time_minutes * 60  # Convert minutes to seconds\n\n    distance_meters = speed_m_per_s * time_seconds  # Distance = speed * time\n\n    return distance_meters\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_tomatoes = 27\n    baskets_cucumbers = 3 + (3 * baskets_tomatoes)\n    \n    return baskets_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10) # Rachel gives Alice 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4) # Alice gives Rachel 10 candies and Rachel has 4 more than 3 times Alice's\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Let the original number of boys be 3x and the number of girls be 2x\n    # After 12 boys and 12 girls joined, the numbers become (3x + 12) and (2x + 12)\n    # The new ratio is 19 : 14\n    # So we have the equation: (3x + 12) / (2x + 12) = 19 / 14\n\n    # Solve the equation for x\n    x = symbols('x')\n    equation = Eq((3*x + 12) / (2*x + 12), 19/14)\n    original_x = solve(equation, x)[0]\n\n    # Calculate the original total number of children\n    original_total = 3*original_x + 2*original_x\n\n    # Add the 12 boys and 12 girls who joined later\n    new_total = original_total + 12 + 12\n\n    return new_total\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '123'\n    num_permutations = sum(len(list(permutations(digits, r))) for r in range(1, len(digits) + 1))\n    \n    return num_permutations\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    single_cost = 6.25\n    total_cost = single_cost * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase = today_temp - last_night_temp\n    return increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For 4 different colored socks in a row\n    total_different_socks = factorial(4)\n\n    # For 2 different colored pairs of socks in a row (half the permutations)\n    # Because each pair has the same colored socks and swapping them doesn't create a new arrangement\n    total_pairs_socks = factorial(4) // (factorial(2) * factorial(2))\n\n    return total_different_socks, total_pairs_socks\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils_before = 112 + 1098\n    pupils_after_transfer = total_pupils_before // 2\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "import math\n\ndef solution():\n    # The period of a simple pendulum is given by T = 2 * pi * sqrt(L / g),\n    # where T is the period, L is the length of the pendulum, and g is the acceleration due to gravity.\n    # If T1 is the period on Earth and T2 is the period on the Moon, then:\n    # T1 = 2 * pi * sqrt(L / g_earth) and T2 = 2 * pi * sqrt(L / g_moon)\n    # Given that g_moon = g_earth / 6, and T1 = 1 s:\n\n    T1 = 1  # Period on Earth in seconds\n    g_earth = 9.81  # Acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # Acceleration due to gravity on the Moon\n\n    # Calculate the length of the pendulum using the period on Earth (T1)\n    L = (T1 / (2 * math.pi)) ** 2 * g_earth\n\n    # Calculate the period on the Moon using the same length (L)\n    T2 = 2 * math.pi * math.sqrt(L / g_moon)\n\n    return T2\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    total_length = 23 + 37 - 3  # Subtract the overlapping weld part once\n    return total_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let's denote the number of questions William answers correctly as w,\n    # and the number of questions Justin answers correctly as j.\n    # From the given problem, we have the following equations:\n    # 1. 6j - 2(10 - j) + 6w - 2(10 - w) = 96, which simplifies to 8j + 8w = 136\n    # 2. 6j - 6w = 24, which simplifies to j - w = 4\n    \n    # Using Algebra, we can solve for j and w.\n    # Substituting the second equation into the first, we get 8(j - w) + 16w = 136\n    # This simplifies to 8*4 + 16w = 136\n    # Solving for w:\n    w = (136 - 32) / 16\n    \n    return int(w)\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"1/3/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"15/4/2023\", \"%d/%m/%Y\")\n    difference = end_date - start_date\n    return difference.days + 1  # Including both start and end days\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Since a square wall has 400 small square tiles, the side length of the square wall is sqrt(400) = 20.\n    # Tiles of each color form smaller squares, each being two tiles smaller on each side \n    # than the square of tiles immediately outward from it.  \n    red_tiles = 0\n    green_tiles = 0\n\n    # To find which color is at the center of the wall, we determine the number of squares.\n    # The center will be green if there are an even number of layers,\n    # and red if there are an odd number of layers.\n    number_of_layers = 20 // 2  # Each layer includes two rows of tiles.\n    \n    for layer in range(1, number_of_layers + 1):\n        # Number of tiles on one side of the current layer's square\n        side_length = 20 - (layer - 1) * 2\n        # Number of tiles on the current layer's square\n        current_layer_tiles = side_length ** 2\n        # Alternating layers have different colors\n        if layer % 2 == 1:  # Odd layer, so red tiles\n            red_tiles += current_layer_tiles\n        else:  # Even layer, so green tiles\n            green_tiles += current_layer_tiles\n\n    # Determine which color has more tiles and by how many\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since this is a vertical addition problem, the value of A must result in a sum where the\n    # unit's place sums up to A itself because it is being added to 0.\n    # Therefore, A must be a number that, when doubled, results in a unit's digit equal to A.\n    \n    for A in range(0, 10):\n        if (A + A) % 10 == A:\n            return A\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    ans = 265 * 30\n    return ans\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    import math\n    total_people = 100\n    side_length = int(math.sqrt(total_people))\n    people_in_outermost_layer = 4 * (side_length - 1)\n    return people_in_outermost_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # Amount of work A can do in one day\n    work_A_per_day = 1 / 15\n    # Amount of work B can do in one day\n    work_B_per_day = 1 / 10\n    \n    # Total work done by A and B together in 3 days\n    work_done_in_3_days = 3 * (work_A_per_day + work_B_per_day)\n    \n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_in_3_days\n    \n    # Time B will take to finish the remaining job\n    days_for_B_to_finish = remaining_work / work_B_per_day\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The key to winning is to always leave Tom and Jane in a position where the two piles have the same number of cards.\n    # If Tom goes first, he should make the piles even by taking 36 cards from Pile A (88-52).\n    # Afterwards, Tom can always mirror Jane's moves to maintain equal-sized piles until the last card is taken.\n\n    # Number of cards Tom should take from Pile A in his first move\n    cards_to_take = 88 - 52\n\n    return cards_to_take\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    original_amount = remaining_after_sister / (1 - 3/7)\n    return original_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Since at least one student gets at least 3 apples and there are 80 apples,\n    # we can subtract the 3 apples from the total to simplify the problem\n    total_apples = 80 - 3\n    \n    # Find the maximum number of students that could get only 1 apple each\n    # This is equivalent to the highest number 'n' such that the sum of the first 'n' numbers (1+2+...+n) is less than or equal to total_apples\n    students = symbols('students', integer=True)\n    equation = solve(students*(students + 1)/2 - total_apples, students)\n    \n    # We need to check which of these solutions is valid.\n    # We look for the largest integer solution which is the upper bound on the class size.\n    max_students = max(s for s in equation if s.is_real and s > 0)\n    \n    # We add one because we had initially subtracted 3 apples for one student,\n    # which implies there is at least one more student in the class\n    return max_students + 1\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red balls be 1x, white balls be 2x, and black balls be (2x * 4/3) = 8x/3\n    # According to the problem, the total number of balls is 34, so we have:\n    # 1x + 2x + 8x/3 = 34\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(1*x + 2*x + (8*x)/3, 34)\n    x_value = solve(equation, x)\n    \n    # Number of red balls is x\n    red_balls = x_value[0]\n    return red_balls\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    percentage = (4 / 50) * 100\n    return percentage\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since the factorial of any number greater than 9 will definitely end in 0 \n    # as it includes the factors 2 and 5 (which make 10 when multiplied together),\n    # the last non-zero digit of 2014! will be the same as that of 10!.\n    # However, since the question asks for the last digit, which includes zeros, \n    # we can simply state that due to the presence of at least one 2 and one 5 in the factors,\n    # the last digit must be 0 for any factorial of 5 or greater.\n    last_digit = 0\n    return last_digit\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = 0\n    for i in range(1, 11):\n        total += i * (2 * i - 1)\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    pencils_for_one_pen = pen_cost // pencil_cost\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_side_length = 5  # length of the square base in cm\n    hole_area = 1 * 1  # area of the square hole in cm^2\n    base_area = base_side_length ** 2  # area of the base in cm^2\n    filled_base_area = base_area - hole_area  # subtract the hole area from the base\n    volume = 480  # total volume of the prism in cm^3\n\n    height = volume / filled_base_area  # height of the prism in cm\n\n    return height\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    initial_ratio = Eq(yellow/green, 3/2)\n    new_ratio = Eq((green + 20)/(yellow + 5), 3/2)\n\n    solutions = solve((initial_ratio, new_ratio), (yellow, green))\n\n    total_beads_initially = solutions[yellow] + solutions[green]\n\n    return total_beads_initially\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    return 12 + 102 + 1002 + 10002\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n\n    total_marbles = marbles_given_to_brother + (marbles_given_to_each_sister * 2) + marbles_left_with_henry\n    \n    return total_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Single digit numbers (1-9)\n    count += 9\n    # Double digit numbers (11,22,...,99)\n    count += 9\n    # Three digit numbers (101,111,...,999)\n    # The hundreds and ones place must be the same, hence 9 possibilities,\n    # and for the tens place there are 10 possibilities (0-9)\n    count += 9 * 10\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum_diff = 0\n    for a in range(20, 1, -2):  # start from 20 and go down by 2 each time until we reach 2\n        b = a - 1  # b is always 1 less than a\n        sum_diff += a**2 - b**2\n    return sum_diff\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed (mph)\n    amy_speed = 60\n    # Christen's speed (mph)\n    christen_speed = 40\n    # They meet after 4 hours\n    time_to_meet = 4\n    \n    # Total distance covered by both when they meet\n    total_distance = (amy_speed + christen_speed) * time_to_meet\n    \n    # Time taken for Christen to cover the whole distance to Amy's starting point\n    time_for_christen = total_distance / christen_speed\n    \n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        number = \"\".join(perm)\n        if number[0] != '0' and number[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    ratio_total_parts = 4 + 5\n    lemon_cakes = (4 / ratio_total_parts) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit can be from 1 to 9\n        for tens in range(0, 10):  # Tens digit can be from 0 to 9\n            for ones in range(0, 10):  # Ones digit can be from 0 to 9\n                if len(set([hundreds, tens, ones])) == 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_points = 4\n    wrong_points = -1\n    total_score = 110\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_points + wrong * wrong_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends to Judy\n    x = symbols('x')\n    \n    # Lily's original number of books is Judy's original number plus x plus the amount sent\n    equation = Eq(x / 2, x + (x / 2))\n\n    # Solve the equation for x\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    return average_score_five_assignments\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n    total_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * total_wibbles\n    total_wobble_arms = total_arms - total_wibble_arms\n    total_wobbles = total_wobble_arms // wobble_arms\n\n    return total_wobbles\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Initial pass: Lily to either Cici or April (2 ways)\n    # Subsequent passes for each initial pass:\n    # - If Lily passed to Cici, Cici can only pass to April (1 way)\n    # - If Lily passed to April, April can only pass to Cici (1 way)\n    \n    # Since for each of Lily's passes there is only one valid subsequent pass,\n    # the total number of different passing ways is equal to the initial number of passes.\n    pass_ways = 2  # Lily can pass to 2 different people initially\n    return pass_ways\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange\n\ndef solution():\n    # Generate a list of primes less than 179 since our sum has to be less than 179\n    primes = list(primerange(0, 179))\n    \n    for a in primes:\n        for b in primes:\n            if 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_collects = 74\n    bilal_collects = 86\n    \n    equations = (\n        Eq(chloe, 2 * david),\n        Eq(david, 3 * emily),\n        Eq(alan + bilal + chloe + david + emily, 400),\n        Eq(alan, alan_collects),\n        Eq(bilal, bilal_collects)\n    )\n    \n    solutions = solve(equations, (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(0, 10):\n            if hundreds == ones + 1:\n                tens = 2 * hundreds\n                if tens < 10:  # ensure tens is a valid single digit\n                    number = hundreds * 100 + tens * 10 + ones\n                    if (hundreds + tens + ones) == 15:\n                        return number\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    amount = 420\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def custom_hash(a, b):\n        return a + b - (a * b / 910)\n\n    ans = 1\n    for i in range(2, 2017):\n        ans = custom_hash(ans, i)\n\n    # Simplify the hash to avoid floating point arithmetic issues\n    ans = 910 * ans / (910 - ans)\n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    ways_to_pick_boy = 3\n    ways_to_pick_girl = 4\n    \n    total_ways = ways_to_pick_boy * ways_to_pick_girl\n    \n    return total_ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    for correct_answers in range(7):\n        wrong_answers = 6 - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for time\n    time = symbols('time')\n\n    # Setup the equation: Distance = Speed * Time\n    # Maverick's distance = Kelvin's distance + 10 km (since Kelvin had a 10 km headstart)\n    # Time to catch up Kelvin is the same for both to cover their respective distances at their speeds\n    mavericks_distance = 15 * time\n    kelvins_distance = 10 * time + 10\n    \n    # Setup the equation for the above relationship\n    equation = Eq(mavericks_distance, kelvins_distance)\n\n    # Solve the equation\n    solutions = solve(equation, time)\n    \n    # Kelvin is correct if Maverick took longer than 24 minutes\n    # Convert time to minutes to compare\n    mavericks_time_minutes = solutions[0] * 60\n    is_kelvin_correct = mavericks_time_minutes > 24\n\n    return (is_kelvin_correct, mavericks_time_minutes)\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total length of the road based on plum trees\n    total_length = (41 - 1) * 4  # 41 trees, so 40 intervals of 4m each\n\n    # Number of pine trees\n    num_pine_trees = (total_length // 5) + 1  # Intervals of 5m plus one for the first tree\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "from math import comb\n\ndef solution():\n    # Since each child gets at least one eraser, we give one eraser to each child first.\n    # Now we have 3 erasers left to distribute to 3 kids.\n\n    # This is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 3, where x1, x2, x3 are non-negative integers.\n    \n    # Using the \"stars and bars\" combinatorial argument, we have 3 \"stars\" (erasers) to place\n    # and 2 \"bars\" to divide them into 3 sections (for the 3 kids).\n    # So the total number of ways to arrange the stars and bars is:\n    # C(3 stars + 2 bars, 2 bars) = C(5, 2)\n\n    number_of_ways = comb(5, 2)\n    return number_of_ways\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_initial = 10\n    hours_initial = 9\n    hours_required = 3\n\n    # Work is constant, so people_initial * hours_initial = people_required * hours_required\n    people_required = people_initial * hours_initial / hours_required\n\n    return people_required\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let the total amount of money Bud had initially be x.\n    # According to the question, she spent (1/3)x on a book.\n    # So the amount of money left after buying the book is (2/3)x.\n    # Then she spent (2/5) of the remaining money on a bag, which cost £120.\n    # So, (2/5) * (2/3)x = £120\n    \n    # Calculating x:\n    x = 120 / (2/5) * (3/2)\n    return x\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the younger person and y be the current age of the older person\n    x, y = symbols('x y')\n    \n    # When the older person was the age of the younger person, the younger person was 4 years old.\n    # So, the difference in their age is (y - x)\n    # At that time, the age of the older person (which is the current age of the younger person) was x\n    # This yields the equation: x - (y - x) = 4 => 2*x - y = 4 \n    \n    # When the younger person reaches the current age of the older person (y), the older person will be 61 years older\n    # This yields the equation: y + (y - x) = 61 => 2*y - x = 61\n    \n    # Solving the system of equations\n    equations = (Eq(2*x - y, 4), Eq(2*y - x, 61))\n    solutions = solve(equations, (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (1 - (1/3))\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Use the formula for the sum of squares: 1^2 + 2^2 + ... + n^2 = (1/6)n(n+1)(2n+1)\n    sum_squares_n = (1/6) * n * (n+1) * (2*n+1)\n    sum_squares_before_first = (1/6) * (first_term-1) * first_term * (2*(first_term-1)+1)\n    ans = sum_squares_n - sum_squares_before_first\n    return int(ans)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # ensure x2>x1 to get distinct integers\n            for x3 in range(x2+1, 9):  # ensure x3>x2 to get distinct integers\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Jessica sits in front of Judy\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1  # Plus Judy's desk\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls = symbols('boys girls')\n\n    # Total students\n    total_students = 152\n\n    # Equation for number of students after removing some boys and girls\n    equation = Eq(boys - boys/11, girls - 5)\n\n    # Equation for total number of students\n    total_equation = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (boys, girls))\n\n    # Return the original number of boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(75/100 * x - 5, 2.5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start_value = 1000\n    decrement_value = 11\n    term = 0\n    current_value = start_value\n\n    while current_value >= 0:\n        term += 1\n        current_value = start_value - term * decrement_value\n\n    first_negative_number = start_value - (term - 1) * decrement_value\n\n    return first_negative_number\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    result = 888 * 999\n    ans = result % 100\n    return ans\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    one_number = 0.11\n    other_number = 2 * midpoint - one_number\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    chocolate_to_toffee_ratio = 12 / 7\n    toffees = chocolates / chocolate_to_toffee_ratio\n\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in [i for i in range(1, number + 1) if number % i == 0]:\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    return 21 + 27 + 19 - 17 + 22 + 18\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_price = 56\n    mango_cases = 24\n    lychee_cases = 19\n\n    total_cost = 2826\n\n    lychee_price = (total_cost - (mango_price * mango_cases)) / lychee_cases\n    \n    return lychee_price\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    possible_totals = set()\n\n    for first_coin in coin_values:\n        for second_coin in coin_values:\n            for third_coin in coin_values:\n                total = first_coin + second_coin + third_coin\n                possible_totals.add(total)\n\n    return len(possible_totals)\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time for each unique game.\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    initial_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        number1 = int(f\"{A}2{B}\")\n        number2 = int(f\"{C}6\")\n        product = number1 * number2\n        if str(product) == f\"{A}57{B}2\":\n            return A + B + C\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    decimal_sum = 0.65 + 0.507 + 0.25\n    return decimal_sum\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set()\n\n    for perm in permutations(cards, 3):\n        # Ignore numbers with a leading zero\n        if perm[0] != '0':\n            unique_numbers.add(''.join(perm))\n\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # We are given a multiplication puzzle, to which we need to find\n    # values for P, Q and R.\n    # The puzzle looks like this:\n    #   PQQP\n    # x   PR\n    # ------\n    #   ....\n    #  .....\n    # ------\n    # PQRRPQ\n    \n    # One of the multipliers have only two digits, let's call it XY (with X being P and Y being R).\n    # Let's analyze the last digit of the result which is Q. That last digit comes from R * P\n    # This means that R*P must end in Q. Since Q is from 0 to 9, we can just try each\n    # option and see which one fits.\n    \n    for Q in range(10):\n        for P in range(1, 10):  # P cannot be 0\n            R = (P * Q) % 10  # The last digit of P times Q should equal to Q\n            if R != 0:  # R cannot be 0, as it's in the middle of the number \n                PQ = P * 1000 + Q * 110  # Assemble the number PQQP\n                PR = P * 10 + R  # Assemble the number PR\n                if PQ * PR == P * 100000 + Q * 11000 + R * 1010 + P * 100 + Q * 1:  # Check the entire multiplication\n                    return P + Q + R\n                \n    return None\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    for shirts_with_names in range(51):  # Only 50 children, so loop from 0 to 50\n        shirts_without_names = 50 - shirts_with_names\n        total_cost = (shirts_with_names * 15) + (shirts_without_names * 10)\n        if total_cost == 555:\n            return shirts_with_names\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Jogging Time: 7:30 AM to 8:30 AM = 1 hour\n    # Walking Time: 8:30 AM to 10:30 AM = 2 hours\n    \n    jogging_speed = 5  # miles per hour\n    walking_speed = 3  # miles per hour\n    \n    jogging_distance = jogging_speed * 1  # distance = speed x time\n    walking_distance = walking_speed * 2\n    \n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the first (smallest) of the five consecutive numbers be n.\n    # Then the five numbers are n, n+1, n+2, n+3, n+4, and their sum is 5n + 10.\n    # We are given that the sum is 100.\n    # Therefore, 5n + 10 = 100. We solve for n to find the smallest number.\n    \n    n = (100 - 10) // 5\n    return n\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    potential_cubes = [x**3 for x in range(1, int((44000)**(1/3)) + 1)]\n    for cube in potential_cubes:\n        if 44000 % cube == 0:\n            q = 44000 // cube\n            return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_3_boxes = 3 * 10\n    oranges_in_7_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_3_boxes + oranges_in_7_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    balls_left = 2\n\n    bags_used = (total_balls - balls_left) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # In the worst case, we draw 2 cards of each number without getting 3 of the same number.\n    # There are 13 different numbers, and if we have 2 of each, that's 26 cards.\n    # To guarantee that we get 3 of the same number, we need to draw one more card.\n    return 26 + 1\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = [\n        'Spades A', 'Spades J', 'Spades K',\n        'Hearts 3', 'Hearts 5', 'Hearts K',\n        'Diamonds 2', 'Diamonds 7', 'Diamonds J',\n        'Clubs A', 'Clubs 7'\n    ]\n    \n    # After Eddie's statement, we know the card is not a unique suit or number.\n    # So, we remove cards with unique suits or numbers.\n    possible_cards = [card for card in possible_cards if card.split()[1] in ['7', 'J', 'K', 'A'] and card.split()[0] in ['Hearts', 'Spades']]\n\n    # After Avril's response, there must be only one card with that number left in the possible cards.\n    numbers = [card.split()[1] for card in possible_cards]\n    unique_number = [n for n in numbers if numbers.count(n) == 1][0]\n    final_card = [card for card in possible_cards if unique_number in card][0]\n\n    return final_card.split()[1] if final_card.split()[0] == 'Hearts' else final_card.split()[0]\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    distance = 800\n    # Since we have a tree on both ends, we have one less interval than trees\n    intervals = total_trees - 1\n    distance_between_trees = distance / intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    total_notebooks_andy = 149\n    notebooks_given = 38\n    \n    # Initial notebooks of Andy's sister\n    initial_notebooks_sister = (total_notebooks_andy - notebooks_given) / 2\n    \n    return int(initial_notebooks_sister)\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_intervals = 9 + 1  # The number of intervals is one more than the number of trees\n\n    distance_between_each_tree = total_distance / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    base_number = '200'\n    \n    # Change each digit once, that is positions of the digit: 0, 1, 2\n    for position in range(3):\n        for digit in '0123456789':\n            if position == 0 and digit == '0':  # We cannot have a leading zero\n                continue\n            \n            # Replace the digit at the current position\n            new_number = base_number[:position] + digit + base_number[position+1:]\n            \n            # Check if the new number is prime and different from the base number\n            if new_number != base_number and isprime(int(new_number)):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    smaller_number = 72 / (2 + 1)\n    return int(smaller_number)\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    total_count = 5\n    mean_value = 5\n\n    total_sum = total_count * mean_value\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    emily_position_from_back = danny_position_from_back - 1\n\n    total_people = people_in_front_of_emily + emily_position_from_back + 1\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # It takes Emma 12 minutes to make 3 cuts to divide the wood into 4 sections.\n    # That means she needs 12 minutes / 3 cuts = 4 minutes per cut.\n    minutes_per_cut = 12 / 3\n    \n    # To cut the wood 5 times, she will be making 5 cuts.\n    # Therefore, she needs 5 cuts * 4 minutes per cut.\n    time_needed = 5 * minutes_per_cut\n    \n    return time_needed\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_days, total_pages = symbols('total_days total_pages')\n\n    # Create equations based on the problem statements\n    equation1 = Eq(total_pages, 30 * (total_days + 2))\n    equation2 = Eq(total_pages, 39 * (total_days - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_days, total_pages))\n\n    # Extract the solutions\n    return solutions\n\n# Calculate the answers\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 30:\n        if '5' in str(page):\n            count += str(page).count('5')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The answer is a list, we take the first (and only) solution\n    correct_x = solution[0]\n\n    return correct_x\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    first_group = 10 + 9 + 8 + 7 + 6\n    second_group = 5 + 4 + 3 + 2 + 1\n    ans = first_group - second_group\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    # 1 worker can paint 2 rooms in a day\n    # 2 workers can paint 2 * 2 = 4 rooms in a day\n    days_for_2_workers_to_paint_4_rooms = 4 / 4\n    return days_for_2_workers_to_paint_4_rooms\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    # Kate's purchase: 1 apple and 2 oranges for 48p\n    eq1 = Eq(apple + 2 * orange, 48)\n    # Jade's purchase: 1 apple and 1 orange for 31p\n    eq2 = Eq(apple + orange, 31)\n    \n    # Solve the system of equations\n    solved = solve((eq1, eq2), (apple, orange))\n    \n    # Extract and return the cost of one orange\n    return solved[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n\n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + 151, pocket_money)\n\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return int(seconds_per_page)\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    remaining_badges = total_badges - given_badges\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        str_num = str(number)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n\n    return elias_final, aileen_final\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n\n    total_steps = steps_per_staircase * number_of_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    \n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let the number of pieces Gerald eats be G, and Thomas eats T\n    # According to the problem, for every 3 pieces Gerald eats, Thomas eats 5\n    # Therefore we can express the ratio T:G as 5:3\n    # The two of them eat 104 pieces in total, so T + G = 104\n    # Using T = 5/3 * G, we can substitute to find the value of G and then T\n\n    # Total number of pieces\n    total_pieces = 104\n    \n    # Ratio in terms of Gerald\n    ratio_gerald = 3\n    \n    # Ratio in terms of Thomas\n    ratio_thomas = 5\n    \n    # Total ratio\n    total_ratio = ratio_gerald + ratio_thomas\n\n    # Find how many pieces Gerald ate\n    gerald_pieces = (ratio_gerald / total_ratio) * total_pieces\n    \n    # Find how many pieces Thomas ate\n    thomas_pieces = (ratio_thomas / total_ratio) * total_pieces\n    \n    # Calculate the difference in the number of pieces eaten by Thomas and Gerald\n    difference = thomas_pieces - gerald_pieces\n\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    sum_result = sum(range(11, 32, 2))\n    return sum_result\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return cookies_with_48_grams\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, add them, then convert result back to base 8\n    sum_base10 = int(str(25), 8) + int(str(37), 8)\n    ans = oct(sum_base10)[2:]  # [2:] to remove the '0o' prefix that indicates base 8 in Python\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    total_amount = 1.54\n\n    ans = fraction * total_amount\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    total_people = symbols('total_people')\n    boys = total_people * 2 / (7 + 2)\n    girls = total_people * 7 / (7 + 2)\n    children = boys + girls\n    adults = children * (2 / 3)\n    equation = Eq(adults - boys, 1228)\n    num_people = solve(equation, total_people)\n    return num_people[0]\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return round(ans, 4)  # Assuming you want 4 decimal places of precision\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Chloe's remaining amount\n    chloe_left = 157\n    # Gordon's remaining amount\n    gordon_left = 82\n    \n    # The difference in their spending per day\n    daily_difference = 25 - 20\n    \n    # The difference in their remaining amounts\n    remaining_difference = chloe_left - gordon_left\n\n    # Calculating the number of days passed based on the spending difference and remaining difference\n    days = remaining_difference / daily_difference\n    \n    # The amount spent by Gordon over the days\n    gordon_spent = days * 25\n    \n    # Gordon's initial amount before spending\n    gordon_initial = gordon_left + gordon_spent\n\n    return gordon_initial\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score_A, score_B = symbols('score_A score_B')\n\n    equation1 = Eq(score_B + 24, score_A - 2)\n    equation2 = Eq(score_A - 25, 5 * (score_B - 25))\n\n    solutions = solve((equation1, equation2), (score_A, score_B))\n\n    return solutions[score_A]\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let's assume x is the number of tennis rackets the shop purchased initially.\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    unsold_rackets = 8\n    profit = 525\n\n    # Total cost for x rackets\n    total_cost = cost_price_per_racket * x\n\n    # Total revenue when 8 rackets are remaining\n    # Total rackets sold is x-8, because 8 rackets are unsold\n    total_revenue = selling_price_per_racket * (x - 8)\n\n    # The proceeds have covered the initial cost price plus a profit of $525\n    # Therefore, total_revenue = total_cost + profit\n    # selling_price_per_racket * (x - 8) = cost_price_per_racket * x + profit\n    # (175 * (x - 8)) = (150 * x) + 525\n    # 175x - 1400 = 150x + 525\n    # 25x = 1400 + 525\n    # 25x = 1925\n    # x = 1925 / 25\n\n    x = (1925 / 25)\n    \n    return int(x)\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    # Formula for the maximum number of regions created by n circles in a plane\n    ans = n ** 2 + n + 2\n    return ans // 2\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensure x2 > x1 to have different numbers\n            x3 = 14 - (x1 + x2)  # calculate x3 based on x1 and x2\n            if x3 > x2:  # ensure x3 > x2 to have different numbers\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total initial value of the jewels in box P\n    # Let y be the total initial value of the jewels in box Q\n    x, y = symbols('x y')\n\n    # Initial average value of the jewels in each box\n    initial_avg_P = x / 3\n    initial_avg_Q = y / 3\n\n    # After transferring a jewel worth 5000 from P to Q\n    new_avg_P = (x - 5000) / 2\n    new_avg_Q = (y + 5000) / 4\n\n    # The average value of the jewels in each box increases by 1000\n    equation1 = Eq(new_avg_P, initial_avg_P + 1000)\n    equation2 = Eq(new_avg_Q, initial_avg_Q + 1000)\n\n    # Solve the system of equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n        \n    count_zeros = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count_zeros += 1\n    \n    return count_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    melon_cost = 15\n    bad_melons = total_melons / 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    \n    total_selling_price = remaining_melons * selling_price_per_melon\n    profit = total_selling_price - melon_cost\n    \n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    # We need to find a number that when you divide 150 by it, you get a remainder of 17,\n    # and when you divide 100 by it, you get a remainder of 5.\n\n    # We start by finding the respective total amounts that can be divided without remainder.\n    oranges_divisible_amount = 150 - 17\n    apples_divisible_amount = 100 - 5\n    \n    # The number of neighbours should be a common divisor of these two numbers.\n    # We can use the gcd (Greatest Common Divisor) function from the math library to find it.\n    \n    from math import gcd\n\n    # Find the gcd of two amounts\n    num_neighbours = gcd(oranges_divisible_amount, apples_divisible_amount)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n    number_of_crosses = line_length // cross_interval + 1\n    return number_of_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # length of the pattern \"red, red, green, yellow, yellow, green\"\n    total_balloons = 75  # total number of balloons\n\n    # number of complete patterns\n    complete_patterns = total_balloons // pattern_length\n\n    # number of balloons in the incomplete pattern (if any)\n    remaining_balloons = total_balloons % pattern_length\n\n    # count the number of green balloons in a complete pattern\n    green_per_pattern = 2\n\n    # total green balloons from complete patterns\n    total_green = complete_patterns * green_per_pattern\n\n    # add green balloons from the incomplete pattern (if the remainder is 3 or more, add 1 green)\n    if remaining_balloons >= 3:\n        total_green += 1\n\n    return total_green\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for the number of marbles Sandra and Jessica have originally.\n    sandra, jessica = symbols('sandra jessica')\n    \n    # After Sandra gave Jessica 13 marbles, Sandra had 6 fewer marbles than Jessica.\n    # Equation representing the state after Sandra gives Jessica 13 marbles.\n    equation = Eq(sandra - 13, jessica + 13 - 6)\n\n    # Sandra had more marbles than Jessica at first.\n    # We need to find the original difference in the number of marbles they had.\n    # Since jessica (initially) + 13 + (initial difference) - 13 = sandra (initially),\n    # The initial difference is sandra (initially) - jessica (initially)\n    original_diff = sandra - jessica\n    \n    solution = solve(equation, (sandra, jessica))\n    \n    # Calculate the original difference using the solved values.\n    return original_diff.subs(solution)\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_to_sixth = 6 - 1\n    distance_per_interval = distance_between_first_and_sixth / number_of_intervals_to_sixth\n\n    number_of_intervals_to_ninth = 9 - 1\n    distance_between_first_and_ninth = distance_per_interval * number_of_intervals_to_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_remaining = total_strawberries % 8\n\n    return strawberries_remaining\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Digit \"1\" will appear 15 times \n    # Digit \"2\" will appear 14 times.\n    \n    # Counting the number of times each digit appears from 1 to N\n    count_1 = 0\n    count_2 = 0\n    n = 0\n    \n    # Increment N until the count of \"1\"s reaches 15\n    while count_1 < 15 or count_2 < 14:\n        n += 1\n        count_1 += str(n).count('1')\n        count_2 += str(n).count('2')\n    \n    # Since we want 15 \"1\"s and 14 \"2\"s, and the last number counted may have extra \"1\"s,\n    # we decrement N until the count of \"1\"s is exactly 15\n    while count_1 > 15:\n        count_1 -= str(n).count('1')\n        n -= 1\n\n    # Again, ensure the count of \"2\" is exactly 14\n    while count_2 > 14:\n        count_2 -= str(n).count('2')\n        n -= 1\n\n    return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each friend received 26 pieces of candy and there are 7 friends\n    shared_candy = 26 * 7\n    \n    # Kate left with 22 pieces of candy\n    kate_candy = 22\n    \n    # Total candy brought to school is the shared candy and Kate's candy\n    school_candy = shared_candy + kate_candy\n    \n    # The total candy brought to school is 2/3 of the initial candy\n    # because she ate 1/3 at home\n    initial_candy = school_candy * (3/2)\n    \n    return int(initial_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Ratio of their speeds is in the same ratio as the floors they have reached at the same time\n    andy_speed_to_bob_speed = 9 / 5\n    # When Andy reaches the top floor (25th), we need to find out which floor Bob will be at\n    bob_at_top = 25 / andy_speed_to_bob_speed\n\n    return int(bob_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (120 + m) == (9 * (10 + m) - 2):\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the number of words James types in total and r his original typing speed (words per minute)\n    w, r = symbols('w r')\n    \n    # Original speed equation: w = 3r\n    equation1 = Eq(w, 3 * r)\n    \n    # Increased speed equation: w = (3 - 1)(r + 30)\n    equation2 = Eq(w, 2 * (r + 30))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (w, r))\n    \n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to off (0)\n\n    # Ms. Lily presses every alternate switch starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = 1  # Turn on the light\n    \n    # Sam presses each switch with an even number 7 times\n    for i in range(1, 10, 2):\n        lights[i] = (lights[i] + 7) % 2  # Toggle the light 7 times\n    \n    # Count lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbolic variables for the quantity of water in pail A and B\n    A, B = symbols('A B')\n\n    # Initial condition: A = 2/3 * B\n    equation1 = Eq(A, 2/3 * B)\n\n    # After pouring: A + 4 = 7/8 * (B - 4)\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total water is the sum of water in pail A and B\n    total_water = solutions[A] + solutions[B]\n    \n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    daytime_climb = 3\n    nighttime_slip = 2\n    net_distance_per_day = daytime_climb - nighttime_slip\n    day_count = 0\n    current_distance = 0\n\n    while True:\n        day_count += 1\n        current_distance += daytime_climb  # Climb during the day\n\n        if current_distance >= total_distance:  # Check if it has reached the top\n            break\n\n        current_distance -= nighttime_slip  # Slip during the night\n\n    return day_count\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair') \n    eq1 = Eq(table, 2 * chair)\n    eq2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((eq1, eq2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900\n    initial_sugar_percentage = 0.06\n    desired_sugar_percentage = 0.10\n\n    initial_sugar_content = total_volume * initial_sugar_percentage\n    final_sugar_content = total_volume * desired_sugar_percentage\n\n    additional_sugar_needed = final_sugar_content - initial_sugar_content\n    \n    return additional_sugar_needed\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    num_seamstresses = 2\n    num_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * num_seamstresses * num_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    spare_parts_made = 20\n    time_spent = 2  # hours\n    total_spare_parts_needed = 100\n\n    # Eddy's working speed per hour\n    speed_per_hour = spare_parts_made / time_spent\n\n    # Correct time needed to complete the job\n    time_needed = (total_spare_parts_needed - spare_parts_made) / speed_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # In the worst case, you might pick out all balls of the same color first\n    # which is 5 balls of one color. Then you pick another 5 balls of the second color.\n    # So after 10 picks, you definitely have 2 different colors.\n    # The very next pick, no matter which one, will be the third color.\n\n    return 5 + 5 + 1  # All of one color, all of the second, one of the third\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of books for each grade\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(grade5, 2*grade4 + 4)\n    equation2 = Eq(grade6, 3*grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # Since there are 5 different colors and the students take 2 balls each time,\n    # there are comb(5, 2) different combinations of 2 balls that can be taken.\n    # To ensure that we always have at least 2 people who have taken the same kind\n    # of balls, we need to have one more person than the number of different \n    # combinations. This is an application of the Pigeonhole Principle.\n    \n    different_combinations = comb(5, 2)\n    at_least_people = different_combinations + 1\n    \n    return at_least_people\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    factor = 2\n\n    # Melissa's Cards = 2 * Hisham's Cards\n    # Total cards = Melissa's Cards + Hisham's Cards\n    # 876 = 3 * Hisham's Cards\n    hisham_cards = total_cards // (1 + factor)\n    melissa_cards = total_cards - hisham_cards\n\n    # After giving some cards away, both Melissa and Hisham should have the same number of cards\n    # Hence, we can subtract the same amount from Melissa and add it to Hisham\n    # Let the number of cards they will each have after the exchange be 'equal_cards'\n    equal_cards = total_cards // 2\n\n    # The number of cards Melissa should give to Hisham = Melissa's initial cards - equal_cards\n    cards_to_give = melissa_cards - equal_cards\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / (3 - 1)\n    return common_difference\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure that the product of two numbers is divisible by 4,\n    # we need to draw at least one even number (multiple of 2) and one multiple of 4,\n    # since the product of two even numbers that are not both multiples of 4 is not necessarily divisible by 4.\n    # Numbers from 10 to 41 have 16 even numbers (including multiples of 4) and 16 odd numbers.\n    \n    # For the worst-case scenario, we must consider that the first numbers we draw are all odd.\n    # There are 16 odd numbers, so after drawing 16 odd numbers, the 17th draw must be even.\n    # However, an even number that is not a multiple of 4 will not guarantee a product divisible by 4.\n    # Therefore, we must keep drawing until we are sure to have a multiple of 4 as well.\n    \n    # The multiples of 4 between 10 and 41 are: 12, 16, 20, 24, 28, 32, 36, and 40 (8 numbers).\n    # So, to ensure we draw a multiple of 4, we might have to draw all odd numbers (16 numbers) \n    # and all even numbers that are not multiples of 4 (8 even numbers), and then the next draw\n    # will be a multiple of 4, allowing us to satisfy the condition.\n    \n    # Therefore, we have to draw a maximum of 16 (odd numbers) + 8 (even non-multiples of 4) + 1 = 25 numbers\n    # to ensure that at least two of them have a product divisible by 4.\n    \n    return 25\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Total length in centimeters (2 m 20 cm)\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50 - i) * (50 + i) for i in range(5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Get the smallest two-digit prime number\n    smallest_two_digit_prime = next(primerange(10, 100))\n\n    # Get the largest two-digit square number\n    largest_two_digit_square = max(i*i for i in range(1, 10) if (i*i) < 100)\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # difference between Brian's father's age and Brian's age\n    age_diff = 41 - 14\n\n    for i in range(15, age_diff):  # Brian cannot be older than the age difference\n        father_age = age_diff + i\n        # Brian's age is the reverse of his father's age if we swap the digits\n        brian_age = int(str(father_age)[::-1])\n        if brian_age == i:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    coffee_price_euro = 4.8\n    coffee_price_usd = coffee_price_euro * euro_to_usd\n    return coffee_price_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef possible_values():\n    for digits in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = digits\n        yield a + b / c + (d / e) * f - (g + h / j)\n\ndef solution():\n    return max(filter(lambda x: x == int(x), possible_values()), default=None)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    # Initialize the maximum product (largest possible value of A*B*C)\n    max_product = 0\n    \n    # Iterate through all possible combinations of A, B and C\n    # where A + B + C = 19 and A, B, C are natural numbers\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    \n    # The maximum product found is the answer\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initially = 3900\n    total_books_after_purchase = 3900 + 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    # Initial number of books for each language\n    chinese_books_initially = (ratio_chinese / total_ratio) * total_books_initially\n    malay_books_initially = (ratio_malay / total_ratio) * total_books_initially\n    english_books_initially = (ratio_english / total_ratio) * total_books_initially\n\n    # Increase in the number of books for Chinese and Malay\n    chinese_books_after_purchase = chinese_books_initially * 1.20  # increased by 20%\n    malay_books_after_purchase = malay_books_initially * 1.10      # increased by 10%\n\n    # Since the total increase in books is known, find the increase in English books\n    english_books_after_purchase = total_books_after_purchase - (chinese_books_after_purchase + malay_books_after_purchase)\n\n    # Find the percentage increase in English books\n    increase_in_english_books = english_books_after_purchase - english_books_initially\n    percentage_increase_in_english_books = (increase_in_english_books / english_books_initially) * 100\n\n    return percentage_increase_in_english_books\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 56)\n    return ans\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors = 12\n    seniors = 8\n    total_participants = juniors + seniors\n    \n    average_juniors = 10\n    average_total = 14\n    \n    total_score_juniors = juniors * average_juniors\n    total_score_all = total_participants * average_total\n    \n    total_score_seniors = total_score_all - total_score_juniors\n    \n    average_seniors = total_score_seniors / seniors\n    \n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    lowest_possible = 9700 - 50\n    return lowest_possible\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age of the 2 dogs was 10 years.\n    combined_age_4_years_ago = 10\n    \n    # Each year, each dog ages 1 year.\n    # Therefore, in 4 years, combined age would increase by 4 years * 2 dogs.\n    increase_over_4_years = 4 * 2\n    \n    # Current combined age.\n    current_combined_age = combined_age_4_years_ago + increase_over_4_years\n    \n    # In 2 years, combined age would increase by 2 years * 2 dogs.\n    increase_in_2_years = 2 * 2\n    \n    # Combined age in 2 years.\n    combined_age_in_2_years = current_combined_age + increase_in_2_years\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    score = 66\n\n    # total number of questions answered by Rex, one not attempted\n    questions_answered = total_questions - 1\n\n    # Assume all answered questions were correct, then subtract points accordingly\n    correct_answers = questions_answered\n    score_if_all_correct = correct_answers * points_correct\n\n    # Deduct points for incorrect answers (each incorrect answer costs 6 points: +4 - (-2))\n    points_per_incorrect = points_correct - points_incorrect\n\n    # Number of incorrect answers\n    incorrect_answers = (score_if_all_correct - score) / points_per_incorrect\n\n    # Correct answers = answered - incorrect\n    correct_answers -= incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answer_rate = 0.60\n    correct_answers = int(total_questions * correct_answer_rate)\n    wrong_answers = total_questions - correct_answers\n    score_for_correct_answers = correct_answers * 5\n    score_deduction_for_wrong_answers = wrong_answers * 2\n    score_for_unanswered = total_questions - correct_answers - wrong_answers\n    \n    # total score calculation\n    total_score = score_for_correct_answers - score_deduction_for_wrong_answers + score_for_unanswered\n    \n    while total_score != 264:\n        correct_answers -= 1\n        wrong_answers = total_questions - correct_answers - score_for_unanswered\n        score_for_correct_answers = correct_answers * 5\n        score_deduction_for_wrong_answers = wrong_answers * 2\n        total_score = score_for_correct_answers - score_deduction_for_wrong_answers + score_for_unanswered\n\n    return correct_answers\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle, if n+1 objects are placed into n containers,\n    # at least one container must contain more than one object.\n    # Therefore, if we have 10 containers (n = 10) and we want at least one container to have 2 apples,\n    # we distribute 1 apple to each of the 9 containers and 2 apples to the remaining one.\n    # With this distribution, adding one more apple will guarantee that at least one container has at least 2 apples.\n    \n    # initial distribution of 1 apple per container for the first 9 containers\n    # and 2 apples in the last container\n    apples = 9 * 1 + 1 * 2\n    \n    # To ensure at least one container has at least 2 apples, add one more apple.\n    apples += 1\n    \n    return apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_initial = 160\n    butter_initial = 50\n    cookies_desired = 300\n\n    butter_required = (butter_initial / cookies_initial) * cookies_desired\n\n    return butter_required\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    total_digits = 0\n    num = 1\n    # Calculate the number of digits for each added number\n    while total_digits + len(str(num)) <= 1000:\n        total_digits += len(str(num))\n        num += 1\n    # Step back to the last complete number\n    num -= 1\n    # Find out how many digits are missing to reach the 1000th digit\n    remaining_digits = 1000 - total_digits\n    # Construct the next number and access the remaining digit (indexed from 0)\n    next_num_str = str(num + 1)\n    return int(next_num_str[remaining_digits - 1])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    box = (19 + 2) // 3\n    return box\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Number of fruits containing each individual vitamin\n    A = 62\n    C = 90\n    E = 68\n\n    # Number of fruits containing both vitamins\n    AC = 48\n    AE = 36\n    CE = 50\n\n    # Number of fruits containing all three vitamins\n    ACE = 25\n\n    # Using the Inclusion-Exclusion Principle for three sets\n    total_fruits = A + C + E - AC - AE - CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Calculate the number of ways to arrange 'r' pupils from 'n' pupils\n    # This is a permutation problem, not a combination problem because order matters\n    num_ways = factorial(n) // factorial(n - r)\n    \n    return num_ways\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack = 4\n    jason = symbols('jason')\n    # Bruce and Willie are of the same age as Jason, so we can just use 2 * jason\n    total_age_eq = Eq(jack + jason + 2 * jason, 19)\n\n    solution = solve(total_age_eq, jason)\n\n    return solution[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    erasers, friends = symbols('erasers friends')\n\n    equation1 = Eq(erasers - friends * 5, 3)\n    equation2 = Eq(erasers - friends * 6, -2)\n\n    solutions = solve((equation1, equation2), (erasers, friends))\n\n    return solutions[erasers]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(jake + john, 44)  # sum of their ages is 44\n    equation2 = Eq(jake + 14, 2 * (john + 14))  # in 14 years, Jake will be twice as old as John\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # Get John's age in 14 years\n    john_age_in_14_years = solutions[john] + 14\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    # Veronica has ＄$9\n    veronica_money = 9\n\n    # Jonathan has three times as much money as Veronica\n    jonathan_money = 3 * veronica_money\n\n    # Rachel has ＄$48 more than Jonathan\n    rachel_money = jonathan_money + 48\n\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    total_years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** total_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y represent the age of the youngest child\n    y = symbols('y')\n\n    # Age difference between each child = 15 months\n    # The oldest would then be y + 8 * 15 months older than the youngest\n    # The oldest is also 6 times as old as the youngest\n    equation = Eq(y + 8 * 15, 6 * y)\n    \n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Approach: Brute force testing all possible combinations of two pairs of brackets\n    # and selecting the one with the smallest result.\n\n    # Initial expression without brackets\n    expression = \"15+5*5+15-6+7\"\n\n    # Generating all possible positions to insert two pairs of brackets\n    # There are 5 operation signs, and we can insert brackets before or after these signs\n    # So we have 10 positions (0 to 9) where brackets could be inserted. \n\n    # Finding all combinations of two different positions for the first bracket\n    positions = list(range(10))\n    min_result = float('inf')\n    best_expr = \"\"\n\n    for i in range(len(positions)):\n        for j in range(i+2, len(positions), 2):  # we skip one to avoid nested brackets\n            for k in range(j+2, len(positions), 2):  # same here for the second bracket\n                for l in range(k+2, len(positions), 2):\n                    # Insert first pair of brackets\n                    expr_with_first_bracket = expression[:positions[i]] + \"(\" + expression[positions[i]:positions[j]] + \")\" + expression[positions[j]:]\n\n                    # Insert second pair of brackets\n                    expr_with_second_bracket = expr_with_first_bracket[:positions[k]] + \"(\" + expr_with_first_bracket[positions[k]:positions[l]] + \")\" + expr_with_first_bracket[positions[l]:]\n\n                    # Calculate the result of the expression\n                    try:\n                        result = eval(expr_with_second_bracket)\n                        if result < min_result:\n                            min_result = result\n                            best_expr = expr_with_second_bracket\n                    except SyntaxError:\n                        # There might be syntax errors when brackets are inserted at wrong places\n                        # We'll just ignore those cases\n                        continue\n\n    return min_result, best_expr\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum([(i**2 + (i+1)**2)/(i * (i+1)) for i in range(1, 2008)])\n    return round(ans)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Loop through all possible 4-digit combinations, assuming the given conditions\n    for number in range(1000, 10000):\n        new_number = int(str(number)[1:] + str(number)[0])  # Move the last digit to the first position\n        if new_number - number == 5877:  # Check if the new number is greater by 5877\n            return number  # If condition is met, return the original number\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has\n    # Cayden has x + 5 sweets\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang will have x + 10 sweets\n    # Cayden will have (x + 5) - 10 sweets\n    # The difference will then be: ((x + 5) - 10) - (x + 10)\n    # Which simplifies to: x - 5 - x - 10\n    # Simplifying further: -15\n    # The difference will be the absolute value of -15, since we can't have negative sweets\n\n    difference = abs(-15)\n    return difference\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n\n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of 5 pupils\n    average_5 = 72\n    # Total score of 5 pupils\n    total_5 = average_5 * 5\n    \n    # New average score of 6 pupils\n    new_average_6 = 75\n    # Total score of 6 pupils\n    total_6 = new_average_6 * 6\n    \n    # Mary's score\n    mary_score = total_6 - total_5\n\n    return mary_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for num in range(999, 100, -1):  # loop from the greatest 3-digit number downwards\n        if num % 2 == 1:  # check if the number is odd\n            if num % 9 == 0:  # check if the number is divisible by 9\n                tens_digit = (num // 10) % 10  # extract the tens place digit\n                if tens_digit % 4 == 0:  # check if the tens digit is divisible by 4\n                    return num  # this is the greatest number that meets the conditions\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # This problem is equivalent to placing 3 separators among the 10 remaining spaces\n    # after each student has received 1 doughnut.\n    # This can be calculated using combinatorics as combinations of (10 spaces + 3 separators)\n    ans = comb(10 + 3, 3)\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes_taken = distance / speed\n    \n    return minutes_taken\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Assume Jane gets unlucky every time and draws the maximum number of one color before getting a different color\n    # Draw all red marbles: 4\n    # Draw all green marbles: 7\n    # Draw all but three of the blue marbles (since we need only 4 different colours): 6 - 3 = 3\n    # Now, no matter what marble she draws, it will be the 4th different colour.\n    # So, add one more marble to guarantee the fourth colour: 1\n    \n    # Total number of marbles Jane needs to draw to guarantee 4 different colored marbles:\n    ans = 4 + 7 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the coins in pence\n    coins = [5, 10, 20, 50, 100, 200]  # 1 pound = 100 pence, so it's included\n    total_change = sum(coins)  # total amount of change in pence\n    five_pounds_in_pence = 500  # value of the five pound note in pence\n    spend_amount = five_pounds_in_pence - total_change  # amount Angela spent\n    \n    return spend_amount\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_production = 50\n    desired_production = 90\n\n    # Find production per hive per year\n    production_per_hive = current_production / current_hives\n\n    # Calculate the number of hives needed for the desired production\n    needed_hives = desired_production / production_per_hive\n\n    # Calculate how many more hives are needed\n    additional_hives = needed_hives - current_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, kumar = symbols('ali kumar')\n\n    # Initial ratio of the erasers\n    initial_ratio = Eq(ali/kumar, 7/5)\n\n    # Ratio after Ali gives Kumar 10 erasers\n    new_ratio = Eq((ali - 10)/(kumar + 10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (ali, kumar))\n\n    # Calculate total number of erasers\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    n = 23\n    common_difference = 3\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n\n    # Calculate the horizontal displacement by summing the eastward and westward movements\n    horizontal_displacement = 15 - 9  # 15 km east and then 9 km back west\n\n    # Calculate the total vertical displacement by summing the northward movements\n    vertical_displacement = 3 + 5  # 3 km north and then 5 km north\n\n    # Calculate the straight-line distance (shortest distance) using Pythagorean theorem\n    shortest_distance = math.sqrt(horizontal_displacement**2 + vertical_displacement**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20  # Convert total hours and minutes to minutes\n    activity_time_with_break = 45 + 20   # Time for each activity including the break\n\n    # Subtract the last break time since it's not counted in the total duration\n    total_activities_time = total_time_in_minutes - 20\n\n    # Calculate the number of activities\n    num_activities = total_activities_time // activity_time_with_break\n\n    return num_activities\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    # a for $10 notes and b for $2 notes\n    for a in range(39):\n        b = 38 - a\n        if (0.2 * a * 10) + (0.25 * b * 2) == 3 * (0.8 * a * 10):\n            cost_of_fan = (0.8 * a * 10) + (0.75 * b * 2)\n            return cost_of_fan\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's suppose Adam's weight is A, Ben's weight is B, and Carl's weight is C.\n    # According to the problem:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n    \n    # To find the total weight A + B + C, we can sum the three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 92\n    # This gives us:\n    # 2A + 2B + 2C = 291\n    # Therefore, the total weight A + B + C is:\n    total_weight = (102 + 97 + 92) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "def solution():\n    count = 0\n    # The first digit must be 5 or 8 to be greater than 5000\n    for first_digit in [5, 8]:\n        for second_digit in [0, 3, 5, 8]:\n            if second_digit != first_digit:\n                for third_digit in [0, 3, 5, 8]:\n                    if third_digit != first_digit and third_digit != second_digit:\n                        for fourth_digit in [0, 3, 5, 8]:\n                            if fourth_digit != first_digit and fourth_digit != second_digit and fourth_digit != third_digit:\n                                count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # A's efficiency is twice B's\n    # Let x be the time B takes to complete the task\n    # A takes x - 5 days to complete the task\n    # A's work rate per day is 1 / (x - 5)\n    # B's work rate per day is 1 / x\n    # A's work rate is twice B's work rate, so we have: 1 / (x - 5) = 2 / x\n    \n    x = symbols('x')\n    equation = Eq(1 / (x - 5), 2 / x)\n    \n    days_B_can_finish_work = solve(equation, x)\n    \n    for d in days_B_can_finish_work:\n        if d > 0:  # we need a positive number of days\n            return d\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # The divisibility rule for 11 is to take the difference between the sum\n    # of the digits in odd positions and the sum of the digits in even positions\n    # If this difference is a multiple of 11 (including 0), then the number is\n    # divisible by 11.\n    \n    # Split number into individual digits\n    digits = [int(digit) for digit in str(number)]\n    \n    # Calculate the alternating sum\n    alternating_sum = sum(digits[::2]) - sum(digits[1::2])\n    \n    # Check if the alternating sum is divisible by 11\n    is_divisible = alternating_sum % 11 == 0\n    remainder = alternating_sum % 11\n    \n    return (is_divisible, remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    remaining_length_cm = 78  # remaining length in centimeters\n    \n    # Convert remaining_length_cm to meters\n    remaining_length_m = remaining_length_cm / 100\n    \n    # Calculate the length of icicle that had melted\n    melted_length_m = initial_length_m - remaining_length_m\n    \n    # Convert melted_length_m to centimeters\n    melted_length_cm = melted_length_m * 100\n    \n    return melted_length_cm\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def climb_ways(steps):\n        if steps < 0:\n            return 0\n        if steps <= 1:\n            return 1\n        \n        # Initialize base cases for n=0, n=1, n=2, and n=3 where n is the number of steps.\n        # n=0 and n=1 have only 1 way to climb (either stay at the bottom or take one step)\n        ways = [1, 1, climb_ways(0) + climb_ways(-3), climb_ways(1) + climb_ways(-2)]\n        \n        # Compute the ways to climb for steps from 4 to the required number of steps\n        for n in range(4, steps + 1):\n            # The number of ways to get to the current step is the sum of the ways\n            # to get to the current step minus 1 and current step minus 4\n            ways.append(ways[n - 1] + ways[n - 4])\n        \n        return ways[steps]\n\n    ans = climb_ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n\n    # At the first stop, two-fifths get off\n    passengers_first_stop = initial_passengers - 2 * initial_passengers // 5\n    # Then 7 people get on\n    passengers_after_first_stop = passengers_first_stop + 7\n\n    # At the next stop, a quarter of the remaining passengers get off\n    passengers_second_stop = passengers_after_first_stop - passengers_after_first_stop // 4\n    # Then 13 get on\n    passengers_after_second_stop = passengers_second_stop + 13\n\n    return passengers_after_second_stop\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Create a function to calculate the sum of the series 1+2+...+n\n    def sum_of_series(n):\n        return n * (n + 1) / 2\n    \n    # Find the last number in the series 0.5, 1, 1.5, ..., 10\n    # Since the series starts at 0.5 and steps by 0.5, to find the number of terms:\n    # The nth term of the sequence can be found by the formula: a + (n - 1)d\n    # We solve for n using the last term (which is 10) and the common difference (which is 0.5):\n    # 10 = 0.5 + (n - 1) * 0.5\n    # 10 - 0.5 = (n - 1) * 0.5\n    # 19 = n - 1\n    # n = 20\n    \n    n = 20\n    # Calculate the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3 using the formula: (1+2+3+...+n)^2\n    # Since the series is incremented by 0.5, each term is actually half of an integer value\n    # Thus, only the integer parts of the series are summed and then will be squared\n    half_n = n // 2\n    ans = (sum_of_series(half_n) ** 2) * 8  # Multiply by 8 due to cubing (2^3) the term which is incremented by 0.5\n\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    # When estimating to the nearest £5, the actual price must be in the range of (£35 - £2.5, £35 + £2.5)\n    # because if it were £2.5 or more below £35, it would have been rounded down to £30.\n    # Similarly, if it were £2.5 or more above £35, it would be rounded up to £40.\n    actual_min_price = estimated_price - 2.5\n    return actual_min_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    years_until_future = future_sum_ages - current_sum_ages\n\n    return years_until_future\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    combinations = 0\n    for s1 in range(98, 103):\n        for s2 in range(98, 103):\n            s3 = 300 - s1 - s2\n            if 98 <= s3 <= 102:\n                combinations += 1\n    return combinations\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between_rabbit_and_elephant - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy's rate of work per day\n    nancy_rate = 1 / 6\n    # Combined rate of Nancy and Tim per day\n    combined_rate = 1 / 4\n    # Tim's rate of work per day\n    tim_rate = combined_rate - nancy_rate\n    # Tim's time to complete the book alone\n    tim_time = 1 / tim_rate\n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    \n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and \n            pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits / people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    mass_p = 300  # g\n    mass_q = 400  # g\n    mass_r = 500  # g\n    total_mass = 172 * 1000  # kg to g\n\n    # Given ratio of packets\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n\n    # Total ratio\n    total_ratio = ratio_p + ratio_q + ratio_r\n\n    # Calculate mass for one unit of the ratio\n    one_ratio_mass = total_mass / total_ratio\n\n    # Calculate the number of packets for each ingredient\n    packets_p = (one_ratio_mass * ratio_p) / mass_p\n    packets_q = (one_ratio_mass * ratio_q) / mass_q\n    packets_r = (one_ratio_mass * ratio_r) / mass_r\n\n    # Calculate the total number of packets\n    total_packets = packets_p + packets_q + packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    avg = 12\n    total_sum = avg * (len(numbers) + 1)  # Total sum of all numbers including 'a'\n    sum_without_a = sum(numbers)  # Sum of all numbers except 'a'\n    a = total_sum - sum_without_a  # Value of 'a' will be total sum minus sum of known numbers\n    return a\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters for easy comparison\n    pink_ribbon_cm = 2.5 * 100  # Convert meters to centimeters\n    blue_ribbon_cm = 220        # Already in centimeters\n    orange_ribbon_cm = 30.5     # Already in centimeters\n\n    # Find the longest ribbon\n    longest_ribbon_length = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n    \n    if longest_ribbon_length == pink_ribbon_cm:\n        return 'pink'\n    elif longest_ribbon_length == blue_ribbon_cm:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    time_spent = 10 + 15 + 5 + 15\n    return time_spent\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    # Convert minutes to seconds for the first two traffic lights\n    first_light_seconds = 1 * 60  # 1 minute in seconds\n    second_light_seconds = 1.5 * 60  # 1.5 minutes in seconds\n    \n    # Calculate the least common multiple for the first two traffic lights\n    lcm_first_second = lcm(first_light_seconds, second_light_seconds)\n    \n    # Since 3 lights turn green at the same time every 9 minutes, we find the LCM with 9 minutes\n    nine_minutes_seconds = 9 * 60  # Convert 9 minutes to seconds\n    lcm_all_three = lcm(lcm_first_second, nine_minutes_seconds)\n    \n    # The shortest possible time for the third traffic light is the LCM divided by the time of the first two\n    third_light_seconds = lcm_all_three // lcm_first_second\n    \n    # Ensure that the third light is at least 30 seconds or longer\n    if third_light_seconds < 30:\n        third_light_seconds = 30\n    \n    # Convert the time back to minutes to return the result\n    third_light_minutes = third_light_seconds / 60\n\n    return third_light_minutes\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    # Define the number of cars and their capacities\n    red_cars, blue_cars, green_cars = 3, 12, 15\n    red_capacity, blue_capacity, green_capacity = 10, 15, 20\n    \n    # Calculate total capacities for each car color\n    total_red_capacity = red_cars * red_capacity\n    total_blue_capacity = blue_cars * blue_capacity\n    total_green_capacity = green_cars * green_capacity\n    \n    # Calculate the total number of cars and total capacity\n    total_cars = red_cars + blue_cars + green_cars\n    total_capacity = total_red_capacity + total_blue_capacity + total_green_capacity\n    \n    # Calculate the average capacity\n    average_capacity = total_capacity / total_cars\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed is 84 km/h\n    rachel_speed = 84\n\n    # According to the question, 1.5 hours after passing each other, \n    # Rachel is 39 km away from City F and Eleanor has reached City G.\n    # So, Rachel would've traveled 1.5 * 84 km = 126 km past the point where they crossed.\n    rachel_distance_after_crossing = 1.5 * rachel_speed\n\n    # This means the distance from the crossing point to City F is:\n    distance_cross_to_F = rachel_distance_after_crossing + 39\n\n    # Eleanor took 4 hours from City F to City G, but we know that \n    # 1.5 hours of this time was from the crossing point to City G.\n    eleanor_time_from_F_to_crossing = 4 - 1.5\n\n    # So, the speed of Eleanor is the distance from crossing to F divided by the time it took her from F to the crossing.\n    eleanor_speed = distance_cross_to_F / eleanor_time_from_F_to_crossing\n\n    # Now we can find the entire distance from City F to City G by:\n    # distance from crossing to F (which Eleanor covered in 2.5 hours) + distance from crossing to G (which Rachel covered in 1.5 hours)\n    total_distance = eleanor_speed * eleanor_time_from_F_to_crossing + rachel_distance_after_crossing\n\n    return total_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    # Define the new operation\n    def new_operation(a, n):\n        sum_result = 0\n        for i in range(1, n + 1):\n            sum_result += int(str(a) * i)\n        return sum_result\n    \n    # Calculate 4 ⊙ 3 using the new operation\n    result = new_operation(4, 3)\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    \n    us_dollars = canadian_dollars / exchange_rate\n\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    front_to_back = 8\n    back_to_front = 10\n    total_shelves = front_to_back + back_to_front - 1\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score_for_average = 5 * 90  # total score needed for an average of 90\n    max_score = 100  # maximum possible score\n    for lowest_score in range(max_score):\n        scores = set(range(lowest_score, lowest_score + 5))  # different scores for 5 students\n        if sum(scores) == total_score_for_average and len(scores) == 5:\n            return lowest_score\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\n    ans = (2 * largest_number) - (3 * smallest_number)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    total_letters = 'ABCDE'\n    total_combinations = list(combinations(total_letters, 3))\n    count = 0\n\n    for combo in total_combinations:\n        if 'A' in combo and 'B' in combo:\n            count += 1\n\n    probability = count / len(total_combinations)\n    \n    return probability\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the lengths of the ropes in cm\n    # Rope B is our base unit, Rope A is 3x Rope B, Rope C is Rope B + 56cm\n    # Rope A is 130cm more than Rope C, so Rope A = Rope C + 130cm\n    # Using the above information, we can set up our equations\n    A, B, C = symbols('A B C')\n\n    # Rope A is 3 times Rope B\n    eq1 = Eq(A, 3 * B)\n    # Rope C is 56cm longer than Rope B\n    eq2 = Eq(C, B + 56)\n    # Rope A is 130cm longer than Rope C\n    eq3 = Eq(A, C + 130)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Calculate the total length\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n\n    total_members = male_members + female_members\n    student_males = (student_male_percentage / 100) * male_members\n    student_females = (student_female_percentage / 100) * female_members\n    total_students = student_males + student_females\n\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 0.35\n    volume2 = 300\n    concentration2 = 0.50\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n    \n    new_concentration_percentage = (total_juice / total_volume) * 100\n\n    return new_concentration_percentage\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n\n    x = (amy - john) / 2 - 4\n\n    return int(x)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers, y be the number of papers marked in the first hour\n    x, y = symbols('x y')\n    \n    # After one hour, there are 4 hours left in the original plan\n    # According to the problem, the number of papers marked in the next 4 hours is x - y\n    # If the teacher marks 6 more papers per hour, she can finish (x - y) papers in 4 hours\n    equation1 = Eq((y + 6) * 4, x - y)\n    \n    # If the teacher marks 10 more papers per hour, she can finish all x papers in 5 - 1 = 4 hours as well\n    equation2 = Eq((y + 10) * 4, x)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    total_pies = chicken_pies + vegetable_pies + fruit_pies\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more_than_vegetable = Fraction(chicken_more_than_vegetable, total_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    vegetable_less_than_fruit = fruit_pies - vegetable_pies\n    fraction_vegetable_less_than_fruit = Fraction(vegetable_less_than_fruit, total_pies)\n\n    return fraction_chicken_more_than_vegetable, fraction_vegetable_less_than_fruit\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_initial = 32\n    markers_given_away = 7\n    markers_left = markers_initial - markers_given_away\n    markers_per_bag = 5\n\n    bags_of_markers = markers_left // markers_per_bag\n\n    return bags_of_markers\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    # 4 jugs and 5 cups cost £85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    # 2 jugs and 2 cups cost £40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solving the system of equations for the price of one jug and one cup\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as ab is a 2-digit number\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_digits = 0\n    \n    # Calculate the sum of digits for pages 1 to 9 (1 digit)\n    for i in range(1, 10):\n        sum_digits += i\n    \n    # Calculate the sum of digits for pages 10 to 99 (2 digits)\n    for i in range(10, 100):\n        sum_digits += (i // 10) + (i % 10)\n    \n    # Calculate the sum of digits for pages 100 to 207 (3 digits)\n    for i in range(100, 208):\n        sum_digits += (i // 100) + ((i % 100) // 10) + (i % 10)\n    \n    return sum_digits\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_made = 3/4\n\n    total_designs = designs_made / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    for combo in combinations_with_replacement(range(10), 3):\n        if sum(combo) == 7 and combo[0] != 0:\n            count += len(set(permutations(combo)))\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total money be 'm'\n    # Let the cost of each wristband be 'w'\n    m, w = symbols('m w', positive=True, real=True)\n    \n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    eq1 = Eq(4*(3*w) + 6*w, 2*m/5)\n    \n    # Caleb has 1 - 2/5 = 3/5 of his money left\n    # He spent 1/3 of the remaining money on more caps\n    # Let's call the number of additional caps 'additional_caps'\n    additional_caps = symbols('additional_caps', integer=True)\n    eq2 = Eq(additional_caps*(3*w), (m * 3/5) * 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (m, w, additional_caps))\n    \n    # Calculate the total number of caps\n    total_caps = 4 + solutions[additional_caps]\n    \n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    max_consecutive_non_guaranteed = 13 // 4 * 4\n    draws_required_for_guarantee = max_consecutive_non_guaranteed + 1\n    return draws_required_for_guarantee\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    \n    return brother_current_age\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming constant acceleration due to gravity (g = 9.81 m/s^2)\n    g = 9.81  # acceleration due to gravity in m/s^2\n    \n    # Using the kinematic equation: v^2 = u^2 + 2as,\n    # where u is the initial velocity, v is the final velocity,\n    # a is the acceleration, and s is the displacement.\n    \n    # Since the skydiver jumps from rest, initial velocity u = 0\n    v, u, s = symbols('v u s')\n    equation = Eq(v**2, u**2 + 2 * g * s)\n\n    # The displacement is the change in altitude from 3000 meters to 2000 meters\n    # thus, s = 3000 - 2000\n    displacement = 3000 - 2000\n\n    # Solve the equation for v when the displacement is 1000 meters\n    solutions = solve(equation.subs({u: 0, s: displacement}), v)\n\n    # Since we're interested in the magnitude of the velocity, we will consider only the positive solution\n    ans = max(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    actual_page = 1\n    printed_page = 1\n\n    while printed_page < 89:\n        if (actual_page + 1) % 3 != 0:\n            printed_page += 1\n        actual_page += 1\n        \n    return actual_page\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef is_divisible(number, divisor):\n    return number % divisor == 0\n\ndef solution():\n    digits = '0245689'  # Remaining digits after assigning A, C, and G\n    for perm in permutations(digits):\n        B, D, E, F, H, I, J = perm\n        ABC = int('3' + B + '1')\n        ABCD = int(ABC * 10 + int(D))\n        ABCDE = int(ABCD * 10 + int(E))\n        ABCDEF = int(ABCDE * 10 + int(F))\n        ABCDEFG = int(ABCDEF * 10 + 7)\n        ABCDEFGH = int(ABCDEFG * 10 + int(H))\n        ABCDEFGHI = int(ABCDEFGH * 10 + int(I))\n        ABCDEFGHIJ = int(ABCDEFGHI * 10 + int(J))\n        \n        if not is_divisible(ABC, 3):\n            continue\n        if not is_divisible(ABCD, 4):\n            continue\n        if not is_divisible(ABCDE, 5):  # Since E must be 5\n            continue\n        if not is_divisible(ABCDEF, 6):\n            continue\n        if not is_divisible(ABCDEFG, 7):  # Since G is 7\n            continue\n        if not is_divisible(ABCDEFGH, 8):\n            continue\n        if not is_divisible(ABCDEFGHI, 9):\n            continue\n        if not is_divisible(ABCDEFGHIJ, 10):  # Since J must be 0\n            continue\n        \n        return {'A': 3, 'B': int(B), 'C': 1, 'D': int(D), 'E': int(E),\n                'F': int(F), 'G': 7, 'H': int(H), 'I': int(I), 'J': 0}\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    eq1 = Eq(adults + children, 19)  # total tickets equation\n    eq2 = Eq(5*adults + 3*children, 75)  # total amount equation\n\n    solutions = solve((eq1, eq2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15\n    \n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    equation1 = Eq(4 * students_A - candies, 20)\n    equation2 = Eq(candies - 6 * students_B, 16)\n\n    solutions = solve((equation1, equation2), (candies, students_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    # Loop over the number of ten-pence coins used\n    for ten_pence in range(6):\n        # Loop over the number of twenty-pence coins used\n        for twenty_pence in range(4):\n            # Loop over the number of fifty-pence coins used\n            for fifty_pence in range(2):\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Worst case scenario:\n    # You take one red sticker and continue taking green stickers until you are sure to get 2 of the same color.\n    # Therefore, after taking one red, you could take up to 3 greens without getting a second red.\n    # The next sticker you take, no matter what color, will guarantee you have 2 of the same color.\n    \n    # First sticker (1 red) + up to 3 stickers of another color (green) + 1 more sticker to guarantee the pair\n    num_stickers = 1 + 3 + 1\n    \n    return num_stickers\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum number of balls she can take out without getting 4 of the same color:\n    # 3 blue + 3 orange + 2 yellow = 8 (since at the 9th ball she must have 4 of some color)\n    max_balls_without_four_of_same_color = 3 + 3 + 2\n    # To guarantee 4 of the same color, we take out one more ball\n    balls_to_take_out = max_balls_without_four_of_same_color + 1\n    return balls_to_take_out\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # Each duckling has 2 legs\n    geese_legs = 2 * 2 # Each baby goose has 2 legs\n    total_legs = 36    # Total number of legs\n\n    lamb_legs = total_legs - (duck_legs + geese_legs) # Subtract duck and goose legs from total\n    num_lambs = lamb_legs // 4                        # Each lamb has 4 legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n    \n    # Equation from the question: b = 3 * g (three times as many boys as girls)\n    equation1 = Eq(b, 3 * g)\n    \n    # Each boy received $2 sweets and each girl received $4 sweets.\n    # Total of $570 sweets: 2 * b + 4 * g = 570\n    equation2 = Eq(2 * b + 4 * g, 570)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Return the number of boys\n    return solutions[b]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 1, 9, 2]\n    permuted_numbers = list(permutations(digits))\n\n    max_number = int(''.join(map(str, max(permuted_numbers))))\n    min_number = int(''.join(map(str, min(permuted_numbers))))\n    \n    return max_number - min_number\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Initialize the total count of boxes\n    total_boxes = 0\n    # Count boxes layer by layer from the top\n    for layer in range(1,4):\n        # Calculate the number of boxes in the current layer\n        boxes_in_layer = layer**2\n        # Add the number of boxes in this layer to the total count\n        total_boxes += boxes_in_layer\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed = 600\n    good_copies_from_A = (3 / 5) * good_copies_needed\n    good_copies_from_B = (2 / 5) * good_copies_needed\n\n    total_copies_from_A = good_copies_from_A * (5 / 4)\n    total_copies_from_B = good_copies_from_B * (6 / 5)\n\n    total_copies = total_copies_from_A + total_copies_from_B\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    b = 1.2 + 1.23\n    ans = a * a - a * b\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 200):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for farmer's and son's rates\n    farmer_rate, son_rate = symbols('farmer_rate son_rate')\n\n    # Equation for farmer working alone for 24 hours to finish the task\n    equation1 = Eq(farmer_rate * 24, 1)\n\n    # Equation for son helping the farmer for 6 hours\n    # Both work for a total of 16 hours to finish the task\n    equation2 = Eq(farmer_rate * 16 + son_rate * 6, 1)\n\n    # Solve for both rates\n    rates = solve((equation1, equation2), (farmer_rate, son_rate))\n\n    # Calculate the son's time to complete the job alone\n    son_time_alone = 1 / rates[son_rate]\n\n    return son_time_alone\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    ans = int(math.sqrt(40))\n    return ans\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's solution\n    annie_sugar = 300 * 0.15\n    \n    # Becky's solution\n    becky_sugar = 400 * 0.25\n    \n    # Carol's solution\n    carol_sugar = 300 * 0.35\n    \n    # Total weight of the mixed solution\n    total_weight = 300 + 400 + 300\n    \n    # Total amount of sugar in the mixed solution\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    \n    # Concentration of the sugar in the mixed solution\n    concentration = (total_sugar / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + bounce_height + bounce_height\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n\n    timmy_value = solve(equation1, timmy)[0]\n    kevin_value = solve(equation2.subs(timmy, timmy_value), kevin)[0]\n\n    return kevin_value\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_number_of_5 = total_rolls * probability_of_5\n\n    return expected_number_of_5\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    # Find the largest three-digit number by starting with 999 and going backwards\n    for num in range(999, 100 - 1, -1):\n        # Check divisibility by 36 (the number must be divisible by both 4 and 9)\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # Total permutations without restriction.\n    total_permutations = factorial(total_children)\n\n    # Permutations where Hugh is between Louise and Richard.\n    # Consider Hugh, Louise, and Richard as a single unit plus the other 2 children,\n    # so we have 3 \"units\" that can be permuted in 3! ways.\n    # Within the \"unit,\" there are 2 ways Louise and Richard can be on the sides of Hugh.\n    restricted_permutations = factorial(3) * 2 * factorial(total_children - 3)\n\n    # The number of ways to keep Hugh happy is the difference.\n    ways_to_keep_hugh_happy = total_permutations - restricted_permutations\n\n    return ways_to_keep_hugh_happy\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_games = 10 / (1 - (2/5) - (7/20))\n    total_points = (2/5) * total_games * 3 + (7/20) * total_games * 1\n    \n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's claim\n    johnny_answer = (quotient * remainder) + divisor\n    \n    # Correct working\n    correct_answer = (quotient * divisor) + remainder\n    \n    # Compare Johnny's answer with the correct answer\n    is_johnny_correct = johnny_answer == correct_answer\n    \n    return {'Is Johnny Correct': is_johnny_correct, 'Correct Answer': correct_answer}\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum([((-1)**(i+1)) * (40 - i * 2) for i in range(20)])\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price = 75  # price in pence\n    pen_price = 95  # price in pence\n    total_chocolates = 4\n    total_pens = 3\n    note_value = 1000  # £10 in pence\n\n    total_cost = (total_chocolates * chocolate_price) + (total_pens * pen_price)\n    change = note_value - total_cost\n\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mean_all = 555\n    total_numbers = 8\n    total_sum = mean_all * total_numbers\n    \n    mean_first_3 = symbols('mean_first_3')\n    mean_last_5 = symbols('mean_last_5')\n    diff_mean = 296\n    \n    equation1 = Eq(mean_first_3 * 3 + mean_last_5 * 5, total_sum)\n    equation2 = Eq(mean_last_5 - mean_first_3, diff_mean)\n    \n    solutions = solve((equation1, equation2), (mean_first_3, mean_last_5))\n    return solutions[mean_last_5]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    return 100 // 2\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # 5 people can build the bridge in 15 days.\n    # We assume the amount of work to build a bridge is (people * days)\n    work = 5 * 15\n    \n    # Let x be the additional number of people needed to build the bridge in 5 days.\n    # Total people will be 5 + x to finish the same work in 5 days.\n    # Setting the equation for inverse proportion where work remains constant:\n    # (5 + x) * 5 = work\n    x = (work / 5) - 5\n    \n    return int(x)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    pip_position_from_start = 3\n    children_between_pip_and_bud = 5\n    total_children = 20\n\n    bud_position_from_start = pip_position_from_start + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_start + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    equation2 = Eq(2/5 * rasidah, rasidah - 3/5 * rasidah)\n    \n    # Chai Seng spent 6/7 of his money\n    equation3 = Eq(1/7 * chai_seng, chai_seng - 6/7 * chai_seng)\n    \n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation4 = Eq(1/7 * chai_seng, 1/2 * (2/5 * rasidah))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current = 53\n    mother_current = 81\n    \n    isaac_past = isaac_current - 1  # Start checking from last year\n    mother_past = mother_current - 1\n    \n    while isaac_past > 0:\n        if isaac_past == mother_past / 3:\n            return isaac_current - isaac_past\n        isaac_past -= 1\n        mother_past -= 1\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are given directly in the problem statement\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    grandma_age = solve_congruence(*congruences)\n\n    return grandma_age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    lb_to_kg_conversion_factor = 1 / 2.2\n    weight_in_lb = 154\n    weight_in_kg = weight_in_lb * lb_to_kg_conversion_factor\n    return weight_in_kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        sum_series = sum(range(a, b))\n        return sum_series - b\n    \n    result = custom_op(5, 10) - custom_op(4, 9)\n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    return 35 + 18 + 26 + 22 - 16 + 25\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3    # Cat's speed in m/s\n    distance_behind = 500  # Distance Elena is behind her cat in meters\n\n    # Elena catches up with her cat at a relative speed of\n    relative_speed = elena_speed - cat_speed\n\n    # Time to catch up is distance divided by relative speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    perms = permutations(digits, 3)\n\n    count = len(list(perms))\n    \n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(2, 21):  # Range of numbers to check\n        if isprime(num) and isprime(num - 6) and num - 6 > 0:\n            count += 1\n        elif isprime(num) and isprime(num + 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]  # Calculate the differences between terms\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]  # Calculate second differences\n\n    # Since it is a double arithmetic sequence, the second differences should be constant.\n    # We expect the second differences to be the same, if not, it should be calculated or derived logically.\n    # In this problem, the second differences are not constant, so we can observe the pattern in first differences.\n    first_difference_pattern = [12, 11, 10, 9]  # The observed pattern in the first differences is decreasing by 1.\n\n    # Extend the pattern by subtracting 1 from the last difference to get the next first difference.\n    next_first_difference = first_difference_pattern[-1] - 1  # This is 9 - 1 = 8.\n\n    # Add the next first difference to the last term in the sequence to get the next term.\n    last_term = 50\n    next_term = last_term + next_first_difference\n\n    return next_term\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial as fact\n    \n    # For a number to be even the last digit should be even. Here, the possible even digits are 2 and 4.\n    # We need to consider scenarios for each case separately.\n    \n    # Case 1: The last digit is 2\n    # For the remaining four places we can arrange the 4 cards in 4! ways.\n    case_1 = fact(4)\n    \n    # Case 2: The last digit is 4\n    # For the remaining four places we can arrange the 4 cards in 4! ways.\n    case_2 = fact(4)\n    \n    # The total number of ways is the sum of both cases.\n    ans = case_1 + case_2\n    \n    return ans\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):  # The first digit ranges from 1 (to ensure two digits) to 9\n        for ones in range(0, 10):  # The second digit ranges from 0 to 9\n            if tens + ones == 15:  # Sum of digits must be 15\n                return int(f\"{tens}{ones}\")  # Return the two-digit number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    original_mean = 50\n    original_total_weight = original_mean * 8\n    new_mean = 52\n    new_total_weight = new_mean * 9\n    extra_apple_weight = new_total_weight - original_total_weight\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    return int(250**0.5)\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -(4**2)\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_rate = 50\n    new_rate = original_rate + 20\n    original_time = pages / original_rate\n    new_time = pages / new_rate\n\n    equation = Eq(original_time - new_time, 2)\n\n    sol = solve(equation, pages)\n\n    return sol[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    n_th_term = first_term + (n - 1) * common_difference\n    return n_th_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Starting date: January 28th, 2013, which is a Monday\n    start_date = datetime(2013, 1, 28)\n    \n    # The day of the week for January 28th, 2013\n    start_weekday = start_date.weekday()\n    \n    # A non-leap year has 1 year difference after 6 years\n    # A leap year has 1 day difference after 5, 11,.. years (5+6k) until 28 years cycle\n    # January 28th will be on the same weekday again after 6, 11, 17, 22 and 28 years, then the cycle repeats\n    # Get the next year where January 28th is Monday again\n    years_to_add = next(filter(lambda x: (start_date + timedelta(days=x*365)).weekday() == start_weekday, [6, 11, 17, 22, 28]))\n\n    # Calculate the next date that is a Monday and January 28th\n    next_date = start_date + timedelta(days=years_to_add*365)\n\n    # Leap year check:\n    # If the year is a leap year and we have passed February, subtract 1 day\n    if next_date.year % 4 == 0 and (next_date.year % 100 != 0 or next_date.year % 400 == 0):\n        if next_date > datetime(next_date.year, 2, 28):\n            next_date -= timedelta(days=1)\n\n    return next_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    dividend = 8 * 1 + 7  # Initial dividend is the smallest that fits the equation, i.e., 1 times the quotient plus remainder.\n    divisor = 1  # Starting point for the smallest divisor.\n    while dividend % divisor != 7 or dividend // divisor != 8:  # The condition to meet the division rule.\n        divisor += 1  # Increment the divisor until the conditions are met.\n        dividend = 8 * divisor + 7  # Recalculate the dividend based on the new divisor and the fixed conditions.\n    return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs from 6:30 am to 7:30 am, for 1 hour, at 6 miles per hour\n    jogging_distance = 6 * 1 \n    \n    # Star walks from 7:30 am to 9:30 am, for 2 hours, at 5 miles per hour\n    walking_distance = 5 * 2\n    \n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    savings_duration = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (daily_savings * savings_duration)\n    remaining_amount = total_savings - lent_to_brother - spent_on_snacks\n\n    return remaining_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_work = 900  # total meters of expressway\n    companies = 4     # number of construction companies\n    days = 5          # number of days to complete the work with 4 companies\n    \n    # Total meters of expressway built by 1 company in 1 day\n    work_per_company_per_day = total_work / (companies * days)\n\n    return work_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_percentage = 10\n    members = 30\n    \n    discount_amount = (original_cost * discount_percentage) / 100\n    final_cost = original_cost - discount_amount\n    cost_per_member = final_cost / members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # 80 cents for calls up to 15 minutes\n    additional_rate = 5  # 5 cents for each additional minute\n    total_cost = 140  # 1.4 dollars in cents\n\n    if total_cost <= base_rate:\n        minutes = 15\n    else:\n        additional_cost = total_cost - base_rate\n        additional_minutes = additional_cost // additional_rate\n        minutes = 15 + additional_minutes\n\n    return minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of powers of 2 cycles every 4 steps: 2, 4, 8, 6\n    # Hence, the last digit of 2 raised to any power that is divisible by 4 is 6\n    last_digit_2 = 6\n\n    # The last digit of powers of 3 also cycles every 4 steps: 3, 9, 7, 1\n    # Hence, the last digit of 3 raised to any power that is divisible by 4 is 1\n    last_digit_3 = 1\n    \n    # The last digit of the product will be the product of the last digits of 2^2017 and 3^2017\n    ans = (last_digit_2 * last_digit_3) % 10  # Getting the last digit\n\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown\n    x = symbols('x')\n    \n    # Construct the equation 4*x - 13 = 55\n    equation = Eq(4*x - 13, 55)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Extract the solution\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define the custom operation based on the given examples\n    def custom_operation(a, b):\n        return (a % 2 + b % 2) * (a // 2 + b // 2)\n    \n    # Apply the custom operation to find the result of 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number Sara first thought of\n    number = symbols('number')\n\n    # Create the equation based on the operations described\n    equation = Eq(((number - 4) / 2) + 11, 37)\n\n    # Solve the equation for the original number\n    solution = solve(equation, number)\n\n    # Return the original number\n    return solution[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n        \n    last_multiple = (120 // 5) * 5\n    if last_multiple > 120:\n        last_multiple -= 5\n    \n    num_multiples = ((last_multiple - first_multiple) // 5) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    # Calculate Gina's birth year\n    gina_birth_year = 2005 - 50\n    \n    # James was 20 years old on 10th May 1997\n    # Calculate James's birth year\n    james_birth_year = 1997 - 20\n    \n    # Calculate the year when Gina was 35 years old\n    year_when_gina_35 = gina_birth_year + 35\n    \n    # Calculate how old James was when Gina was 35\n    james_age_when_gina_35 = year_when_gina_35 - james_birth_year\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return 10034\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_amount = 2 + 1/2\n    number_of_quarters = total_amount / (1/4)\n    return int(number_of_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Let the total number of people in the line be n\n    # Lucy's position is 5th from the front, which means there are 4 people in front of Lucy\n    # Eddie's position is 9th from the back, which means there are 8 people behind Eddie\n    # There are 2 people between Lucy and Eddie\n    # The total number of people is the sum of people in front of Lucy,\n    # the people between Lucy and Eddie, Lucy, Eddie, and the people behind Eddie\n\n    lucy_front = 5 - 1  # People in front of Lucy\n    eddie_back = 9 - 1  # People behind Eddie\n    between = 2         # People between Lucy and Eddie\n\n    # Add 2 to account for Lucy and Eddie themselves\n    total_people = lucy_front + between + 2 + eddie_back\n    \n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f'26{B}789')\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \n    # Loop starts from 3 as it's the smallest divider we have, hence the number should be greater than 3.\n    for number in range(3, 3 * 5 * 7 * 8):\n        remainders = [number % 3, number % 5, number % 7, number % 8]\n        # Check if all remainders are different and prime\n        if len(set(remainders)) == 4 and all(remainder in primes for remainder in remainders):\n            return number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # converting meters to centimeters\n    dress_length_cm = 5 * 100 + 8  # converting meters to centimeters\n\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    number = (result + 21) / 7 - 4\n    return number\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # original ratios\n    ratio_equation = Eq(orchids / tulips, 3 / 5)\n\n    # total flowers\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n\n    # flowers left after selling\n    flowers_left = Eq(orchids * 0.6 + tulips * 4 / 5 + roses * 0.75, 2644)\n\n    solutions = solve((ratio_equation, total_flowers, flowers_left), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # Maximum number of left-handed girls is total_girls - right_handed,\n    # because that assumes all right-handed are boys. If there are more right-handed\n    # pupils than girls, then we must subtract this difference from the total amount of girls\n    # That would give us the number of left-handed girls, so subtracting this from the\n    # total amount of girls gives us right-handed girls.\n    max_left_handed_girls = max(total_girls - right_handed, 0)\n    \n    right_handed_girls = total_girls - max_left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    # Equation 1: total cost\n    equation1 = Eq(books * 12 + files * 9, 336)\n\n    # Equation 2: number of books is 14 more than the number of files\n    equation2 = Eq(books, files + 14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if (chickens * 2 + rabbits * 4) == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digits = [pow(i, 2013, 10) for i in range(1, 10)]\n    return sum(ones_digits) % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario, Peter will pick one of each color before he picks a matching pair.\n    # Which means he will pick 1 red, 1 blue, and 1 black for sure,\n    # and the next one he picks must be the same color as one of them.\n    return 1 + 1 + 1 + 1\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Calculate the datetime for departure and arrival\n    departure = datetime(year=2022, month=7, day=2, hour=20)  # 8pm on the 2nd of July\n    arrival = datetime(year=2022, month=7, day=3, hour=1)     # 1am on the 3rd of July\n\n    # Calculate the time difference in hours, considering the time zone difference\n    time_difference = arrival - departure - timedelta(hours=7) # France is 7 hours behind Japan\n\n    # Calculate the flight duration in hours\n    flight_duration_hours = time_difference.total_seconds() / 3600\n\n    return flight_duration_hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square, triangle, diamond = symbols('square triangle diamond')\n    \n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n    \n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n    \n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    num_pages = 131\n    digits = 0\n\n    # Count the digits in page numbers from 1 to 131\n    for i in range(1, num_pages + 1):\n        digits += len(str(i))\n\n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted = 3\n    attempted = total_questions - unattempted\n    total_score = 168\n\n    for correct in range(attempted + 1):\n        wrong = attempted - correct\n        score = correct * 4 - wrong\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num1, num2 = symbols('num1 num2')\n    equation1 = Eq(num1 + num2, 71)\n    equation2 = Eq(num1 - num2, 9)\n\n    solutions = solve((equation1, equation2), (num1, num2))\n\n    return max(solutions[num1], solutions[num2])\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # Two-digit numbers: XY, where X is the tens place and cannot be 0, Y is the units place and can be 0, 1, or 2.\n    choices_for_X = 2  # X can be either 1 or 2\n    choices_for_Y = 3  # Y can be 0, 1, or 2\n\n    # By the multiplication principle, multiply the choices for X and Y.\n    total_numbers = choices_for_X * choices_for_Y\n\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the first even number be x\n    # Then the sequence of five consecutive even numbers can be represented as: x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is 200, so we set up an equation and solve for x.\n    # x + x+2 + x+4 + x+6 + x+8 = 200\n    # 5x + 20 = 200\n    # 5x = 180\n    # x = 36\n    # Therefore, the smallest of the five numbers is 36\n\n    return 36\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume of sugar solution transferred in grams\n    x = symbols('x')\n    \n    # Before transfer: \n    # Container A - 50g water, 10% sugar, so sugar = 5g\n    # Container B - 30g water, 20% sugar, so sugar = 6g\n    \n    # After transfer:\n    # Container A - (50-x)g water, (5-x*0.2)g sugar\n    # Container B - (30-x)g water, (6-x*0.1)g sugar\n    \n    # Concentration after transfer will be the same, so we have the equation\n    # ((5 - x * 0.2) / (50 - x)) = ((6 - x * 0.1) / (30 - x))\n    \n    equation = Eq((5 - x * 0.2) / (50 - x), (6 - x * 0.1) / (30 - x))\n    \n    # Solve the equation for x\n    sol = solve(equation, x)\n    \n    # The solution will include the initial amounts (50 or 30) which we ignore, hence we find the valid solution\n    for s in sol:\n        if s > 0 and s < 30:\n            return s\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    result = sum(100 / 97.0 * (99 / 96.0) ** i for i in range(4))\n    return result\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie cuts a piece of wood into 5 sections in 8 minutes.\n    # Each cut takes a certain amount of time, let's call it 'cut_time'.\n    # To cut a piece of wood into 5 sections, she makes 4 cuts.\n    sections_for_8_minutes = 5\n    cuts_needed_for_5_sections = sections_for_8_minutes - 1\n    cut_time = 8 / cuts_needed_for_5_sections\n\n    # Now, to cut the piece of wood into 6 sections, she needs to make 5 cuts.\n    sections_needed = 6\n    cuts_needed_for_6_sections = sections_needed - 1\n    total_time_needed = cut_time * cuts_needed_for_6_sections\n\n    return total_time_needed\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    # Current votes for each candidate\n    votes_mark = 22\n    votes_nicole = 27\n    votes_peter = 35\n    # Total number of students\n    total_students = 120\n\n    # To be elected, Peter needs more than half of the votes, so he needs one more\n    # than half of the total students\n    required_votes_to_win = total_students // 2 + 1\n\n    # How many more votes Peter needs to be guaranteed a win\n    additional_votes_needed = required_votes_to_win - votes_peter\n    \n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    total_pupils = 995\n    boys = (total_pupils + 7) // 2\n    return boys\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    ans = max(numbers, key=lambda x: x % 10)  # Compare numbers by their units value\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # in pence (4.90 pounds)\n    for num_coins in range(1, total_amount + 1):  # iterating to find the number of each type of coin\n        if (5 * num_coins) + (10 * num_coins) + (20 * num_coins) == total_amount:\n            return 3 * num_coins  # total number of coins (5p, 10p, 20p)\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_sweets = 135\n    days = 9\n    common_difference = 3\n\n    # Last term of arithmetic sequence formula: a_n = a_1 + (n - 1)d\n    # Sum of n terms of arithmetic sequence formula: S_n = n/2 * (2a_1 + (n - 1)d)\n    # We will use the sum of n terms formula S_n = n/2 * (a_1 + a_n) to solve for a_1, then find a_n.\n    # 135 = 9/2 * (a_1 + a_n) => a_1 + a_n = 135 / (9/2) => a_1 + a_n = 30\n\n    # We also know that a_n = a_1 + 8d (since it's the 9th term and d = 3)\n    # Now we have 2 equations:\n    # a_1 + a_n = 30\n    # a_n = a_1 + 24 (substituted d with 3 and n-1 with 8)\n\n    # Let's solve this system of equations.\n    # a_1 + (a_1 + 24) = 30\n    # 2a_1 + 24 = 30\n    # 2a_1 = 6\n    # a_1 = 3\n\n    # Now we find the last term a_n:\n    first_day_sweets = 3\n    last_day_sweets = first_day_sweets + 8 * common_difference  # 8 days of difference, because he started eating on the first day.\n\n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    ans = remaining_after_dvd\n    return ans\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28\n    cost = 20\n\n    remaining_amount = initial_amount - cost\n    remaining_amount_in_cents = remaining_amount * 100  # converting dollars to cents\n\n    return remaining_amount_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * ((1 + rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # Number of digits in one-digit page numbers (1-9)\n    digits_1_to_9 = 9\n\n    # Number of digits in two-digit page numbers (10-99)\n    digits_10_to_99 = 2 * (99 - 10 + 1)\n\n    # Number of digits in three-digit page numbers (100-185)\n    digits_100_to_185 = 3 * (185 - 100 + 1)\n\n    # Total number of digits used\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_185\n\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10\n\n    new_annual_salary = annual_salary * (1 + pay_rise_percentage / 100)\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Loop through all possible months (1 to 12) and days (1 to 31)\n    # since the maximum day number cannot exceed 31\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Calculate the sum of the two products\n            sum_products = (month * 31) + (day * 12)\n            # Check if the sum of products matches the given number\n            if sum_products == 376:\n                # Format the date as 'ddmm'\n                return f\"{day:02d}{month:02d}\"\n                \nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Using the distributive property to find the missing number\n    return 4.08 - 1.08\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    numbers = [119, 117, -115, 113, -111, 109, -107, 105, -103, 101, -99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original price of calculator and protractor in pence.\n    original_calculator_price_p = 600  # 6 pounds in pence\n    original_protractor_price_p = 30   # 30 pence\n\n    # Calculate discounts\n    calculator_discount = 0.25  # 1/4 off\n    protractor_discount = 0.50  # 1/2 off\n\n    # Calculate sale prices\n    sale_calculator_price_p = original_calculator_price_p * (1 - calculator_discount)\n    sale_protractor_price_p = original_protractor_price_p * (1 - protractor_discount)\n\n    # David's purchase\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total cost\n    total_cost_p = (calculators_bought * sale_calculator_price_p) + (protractors_bought * sale_protractor_price_p)\n    \n    # Convert pence to pounds for final answer\n    total_cost_pounds = total_cost_p / 100\n\n    return total_cost_pounds\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_required = 40\n    milk_required = 80\n    tom_flour = 25\n    \n    milk_to_use = (tom_flour * milk_required) / flour_required\n    \n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    initial_sweets = sweets_taken + sweets_left\n    return initial_sweets\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    result_in_tonnes = 1.194 * (2/3)\n    result_in_kilograms = result_in_tonnes * 1000\n    return result_in_kilograms\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x represent the age of the older elephant this year.\n    # if y years pass, the younger elephant will grow up to the older elephant's current age (x).\n    # After y years, the older elephant will be x + y years old.\n    # According to the problem, at that time, the older elephant will be 62 years old.\n    # So we can set up the equation x + y = 62 where y is the number of years until the younger elephant is x years old.\n    \n    # We are told the younger elephant is currently 18 years old,\n    # so in y years, the younger elephant will be 18 + y.\n    # This must be equal to the older elephant's current age, which gives us the equation 18 + y = x.\n\n    # Combining these two equations, we get the following:\n    # x + y = 62\n    # 18 + y = x\n    # x - y = 18 (Rearranging the second equation)\n\n    # Subtracting the third equation (x - y = 18) from the first (x + y = 62), we get:\n    # 2y = 62 - 18\n    # 2y = 44\n    # y = 22\n\n    # If we replace y with 22 in the second equation, we find x:\n    # 18 + y = x\n    # 18 + 22 = x\n    # 40 = x\n    \n    # Hence, the older elephant is 40 years old this year.\n    return 40\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride duration\n    bike_ride_hours = 1\n    \n    # Ellen's train ride duration\n    train_ride_hours = 2\n    \n    # Ellen's bike speed in miles per hour\n    bike_speed_mph = 10\n    \n    # Ellen's train speed in miles per hour\n    train_speed_mph = 50\n    \n    # Calculate the total distance traveled by bike and by train\n    bike_distance = bike_speed_mph * bike_ride_hours\n    train_distance = train_speed_mph * train_ride_hours\n    \n    # Sum of distances by bike and train\n    total_distance = bike_distance + train_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Stars and bars method: (n+k-1) choose (k-1), where n is the number of stars (balls) and k is the number of bars (boxes)\n    ans = combinations(5 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue = symbols('blue')\n    \n    red = blue + 25\n    green = red + 32\n    total = blue + red + green\n    \n    equation = Eq(total, 112)\n    \n    num_blue = solve(equation, blue)[0]\n    \n    return num_blue\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\nfrom collections import Counter\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = Counter(word)\n    \n    total_letters = len(word)\n    permutations = factorial(total_letters)\n    \n    for letter, count in letter_counts.items():\n        permutations //= factorial(count)\n        \n    return permutations\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Ema and Keng Wee's amounts\n    Ema, KengWee = symbols('Ema KengWee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(KengWee - Ema, 360)\n    \n    # Ema spent 1/4 of her money, Keng Wee spent 4/7 of his.\n    # They have the same amount left.\n    equation2 = Eq(Ema - Ema / 4, KengWee - 4 * KengWee / 7)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (Ema, KengWee))\n    \n    return solution[KengWee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 216\n    while True:\n        number += 1\n        if sum(int(digit) for digit in str(number)) == 9:\n            return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas's position from front to back is 3rd\n    rows_from_front = 3\n    # Lucas's position from back to front is 2nd\n    rows_from_back = 2\n\n    # Total rows is the sum of his position from front and back minus 1\n    # (because Lucas is counted in both positions)\n    total_rows = rows_from_front + rows_from_back - 1\n\n    # Lucas's position from left to right is 4th\n    cols_from_left = 4\n    # Lucas's position from right to left is 3rd\n    cols_from_right = 3\n\n    # Total columns is the sum of his position from left and right minus 1\n    # (because Lucas is counted in both positions)\n    total_cols = cols_from_left + cols_from_right - 1\n\n    # Total students in the rectangular array is the product of total rows and total columns\n    total_students = total_rows * total_cols\n\n    return total_students\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let the total amount of grass be W (work), which is constant.\n    # 27 oxen can do the work in 6 weeks: so 1 ox does W/(27*6) amount of work in 1 week.\n    # 23 oxen can do the work in 9 weeks: so 1 ox does W/(23*9) amount of work in 1 week.\n\n    # Since the work done by 1 ox in 1 week is same in both cases, we can set them equal.\n    # W/(27*6) = W/(23*9)\n\n    # Number of weeks it will take for 21 oxen to finish eating the grass on the farm is W/(21*x) = W/(27*6)\n    # Where x represent the number of weeks 21 oxen take to finish eating the grass.\n\n    # Cross-multiplying and solving for x gives us:\n    # x = (27*6)/21\n    # x = 27/21 * 6\n    # x = 9/7 * 6\n\n    weeks = (27 * 6) / 21\n\n    return weeks\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is the 3rd from the front and 2nd from the back in a column.\n    # This means there are (3 - 1) people in front of him and (2 - 1) behind.\n    # So total people in the column including Lucas is:\n    people_in_column = (3 - 1) + 1 + (2 - 1)\n\n    # Lucas is the 4th from the left and 3rd from the right in a row.\n    # This means there are (4 - 1) people to his left and (3 - 1) to his right.\n    # So total people in the row including Lucas is:\n    people_in_row = (4 - 1) + 1 + (3 - 1)\n\n    # The total number of students is the product of the number of people in \n    # a row and the number in a column since the students form a rectangle.\n    total_students = people_in_column * people_in_row\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(girls, (9/11) * boys)\n    equation2 = Eq(girls + 2, (10/11) * boys)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate the total number of students now\n    total_students = solutions[boys] + solutions[girls] + 2\n    \n    return total_students\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # The first term of the sequence\n    for i in range(2, 11):  # Loop from 2 to 10\n        for j in range(1, i + 1):  # Create the increasing sequence for each i\n            ans += j / i\n        for j in range(i - 1, 0, -1):  # Create the decreasing sequence for each i\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    expression_simplified = solve(equation, (x, y))[x]\n    return expression_simplified\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    # prices in pence\n    milk_per_litre = 31\n    crisps_per_packet = 17\n    bread = 78\n    magazine = 105\n\n    # total cost in pence\n    total_cost = (3 * milk_per_litre) + (2 * crisps_per_packet) + bread + magazine\n\n    # 5 pounds in pence\n    money_given = 500\n\n    # calculate change\n    change = money_given - total_cost\n\n    # return change in pounds (since change is expected to be in pounds, convert pence to pounds)\n    return change / 100\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    difference = solutions[lim] - solutions[tan]\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n    \n    equation = Eq(zehan_current + 12, 3 * zehan_current)\n    \n    solution = solve(equation, zehan_current)\n\n    return solution[zehan_current]\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    cost_per_ticket = total_cost / number_of_tickets\n\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from itertools import combinations\n\ndef solution():\n    total_students = 15\n    team_size = 5\n    count = 0\n    \n    # Select cases where A is chosen but not B and C\n    for combination in combinations(range(2, total_students+1), team_size-1):\n        if all(student not in combination for student in [1, 3]):  # 1 represents B, 3 represents C\n            count += 1\n            \n    # Select cases where B is chosen but not A and C\n    for combination in combinations(range(2, total_students+1), team_size-1):\n        if all(student not in combination for student in [0, 3]):  # 0 represents A, 3 represents C\n            count += 1\n\n    # Select cases where C is chosen but not A and B\n    for combination in combinations(range(2, total_students+1), team_size-1):\n        if all(student not in combination for student in [0, 1]):  # 0 represents A, 1 represents B\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of lemon juice in the bottle\n    x = symbols('x')\n    \n    # The initial ratio of lemon juice to water in the bottle is 2:3\n    # So, the initial amount of water is 1.5 * the amount of lemon juice.\n    \n    # After adding 80ml lemon juice, the ratio becomes 6:5 => (x + 80) / (1.5 * x) = 6 / 5\n    \n    equation = Eq((x + 80) / (1.5 * x), 6 / 5)\n\n    # Solve the equation for x\n    amount_lemon_juice_initial = solve(equation, x)[0]\n\n    return amount_lemon_juice_initial\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's share ratio value\n    shaila_ratio = 6\n    # Savannah's share ratio value\n    savannah_ratio = 5\n    # Total ratio value\n    total_ratio = shaila_ratio + savannah_ratio\n    \n    # Shaila received sweets\n    shaila_sweets = 36\n    # sweets per ratio unit\n    sweets_per_ratio = shaila_sweets / shaila_ratio\n    \n    # Total sweets\n    total_sweets = sweets_per_ratio * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    equation = Eq(savings - (1/3 * savings) - 177 - 129, (1/3 * savings) * 1/2)\n\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n    \n    return only_french_teachers\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60 # mph\n    increased_speed = usual_speed * 1.3 # 30% increase\n    delay = 9/60    # 9 minutes converted to hours\n\n    # If d is the distance, then time at usual speed is d / usual_speed\n    # Time at increased speed is d / increased_speed\n    # The difference between these times is the delay\n    # Therefore, d / usual_speed - d / increased_speed = delay\n    # Solving for d gives us d = delay * (usual_speed * increased_speed) / (increased_speed - usual_speed)\n\n    distance = delay * (usual_speed * increased_speed) / (increased_speed - usual_speed)\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the given procedure:\n    # (((x + 8) * 8 - 8) / 8) = 80\n    # Simplifying the equation step by step\n    x = (80 * 8 + 8) / 8 - 8\n\n    return int(x)\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # Let the number of red ropes be r and blue ropes be b.\n    # We know that the total number of ropes is 10: r + b = 10\n    # And the total length of ropes is 26 m: 2*r + 3*b = 26\n    # We can solve these equations to find the values of r and b.\n    \n    for r in range(11):  # Because r can be at most 10.\n        b = 10 - r\n        if 2 * r + 3 * b == 26:\n            return r\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the original speed (in metres per minute) and t be the original time (in minutes)\n    s, t = symbols('s t')\n\n    # If the speed increases by 25%, new speed is 1.25s and time will decrease by 20 minutes: t - 20\n    eq1 = Eq(1.25 * s * (t - 20), s * t)\n    \n    # If speed decreases by 45 m/min, new speed is s - 45 and time will increase by 75%, i.e., will become 1.75t\n    eq2 = Eq((s - 45) * 1.75 * t, s * t)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (s, t))\n\n    # Distance is speed (s) times time (t)\n    distance = solutions[s] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n    \n    total_second_half = average_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    total_months = 12\n    \n    average_per_month = total_year / total_months\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 7 == 0) and (i % 9 == 2):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n    ans = used_flour.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors_diff = 41\n    \n    # Since the difference between the smallest and greatest factor is 41,\n    # and 1 is always a factor of A, we deduce that 1 and 42 are factors of A.\n    # Therefore, A could be 42 itself, because 42 - 1 = 41.\n    A = 42\n    \n    # The 7th multiple of A would then be 7 times A.\n    seventh_multiple = 7 * A\n    \n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio height:width = 3:4\n    # Given height of the screen\n    height = 21  # in cm\n\n    # Calculate width using the ratio\n    ratio_height = 3\n    ratio_width = 4\n    width = (height / ratio_height) * ratio_width\n\n    # Calculate the perimeter of the screen\n    # Perimeter = 2*(height + width)\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    # Starting with the value 1 for multiplication\n    result = 1\n    # Multiplying the sequence from 1 1/2 to 1 1/11\n    for i in range(2, 12):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    \n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 36)\n    equation2 = Eq(x + y, 98)\n\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = 4 ** (100 % 2)  # 4 cycles every 2 powers\n    last_digit_7 = 7 ** (100 % 4)  # 7 cycles every 4 powers\n    last_digit_9 = 9 ** (100 % 2)  # 9 cycles every 2 powers\n    last_digit_11 = 1 ** 100  # The last digit of any power of 11 is 1\n\n    product_last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return product_last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    # Total number of questions\n    total_questions = 60\n    \n    # Percentage of questions answered\n    percentage_answered = 70 / 100\n    \n    # Number of questions answered and unanswered\n    questions_answered = int(total_questions * percentage_answered)\n    questions_unanswered = total_questions - questions_answered\n    \n    # Marks\n    marks_for_correct = 3\n    marks_deducted_for_wrong = -1\n    \n    # Total score\n    total_score = 78\n    \n    # Equation: 3x - (questions_answered - x) = total_score, where x is the number of correct answers\n    correct_answers = (total_score + questions_answered) // (marks_for_correct - marks_deducted_for_wrong)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one file and one ruler\n    cost_file, cost_ruler = symbols('cost_file cost_ruler')\n\n    # Equation given the cost of 6 files and 10 rulers\n    equation1 = Eq(6 * cost_file + 10 * cost_ruler, 40)\n\n    # Solve for the cost of one file and one ruler\n    solutions = solve(equation1, (cost_file, cost_ruler))\n\n    # Calculate the cost of 9 files and 15 rulers using the solved costs\n    cost_9_files_15_rulers = 9 * solutions[cost_file] + 15 * solutions[cost_ruler]\n\n    return cost_9_files_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    \n    # John had 5/13 of Jessie's money before the transfer\n    equation1 = Eq(john, (5/13)*jessie)\n    \n    # Jessie transfers $600 to John\n    # John's money after the transfer: john + 600\n    # Jessie's money after the transfer: jessie - 600\n    \n    # John's money became 50% of Jessie's after the transfer\n    equation2 = Eq(john + 600, (1/2)*(jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Initialize counts for digits 1 and 2\n    count_1, count_2 = 15, 14\n    \n    # Initialize N and the counts for current number\n    N, current_count_1, current_count_2 = 0, 0, 0\n    \n    # Check each number until we have used the digit 1 fifteen times\n    # and the digit 2 fourteen times\n    while current_count_1 < count_1 or current_count_2 < count_2:\n        N += 1\n        # Convert the current number to string and count digits 1 and 2\n        str_N = str(N)\n        current_count_1 += str_N.count('1')\n        current_count_2 += str_N.count('2')\n    \n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_format = \"%H:%M\"\n    time_in = datetime.strptime(\"10:30\", time_format)\n    time_out = datetime.strptime(\"11:00\", time_format)\n    \n    baking_time = time_out - time_in\n    return baking_time.seconds // 60  # Convert seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Ratios provided\n    ratio_eq = Eq(t_shirts / caps, 8 / 5)\n\n    # Total money made from selling 1/4 of T-shirts and 1/5 of Caps\n    # T-shirts cost $3 each, Caps cost $5 each\n    money_eq = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, money_eq), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n\n    harvir_age = youngest_age + (number_of_siblings - 1) * age_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    return total_spent\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Let x be the number of oranges and y be the number of lemons.\n    # Then we have:\n    # 26x + 30y = 500 (because 1 pound is 100p, so 5 pounds is 500p)\n    # We are looking for all possible integer solutions for (x, y).\n    \n    answers = []\n    \n    for x in range(0, 500 // 26 + 1):\n        y = (500 - 26 * x) / 30\n        if y.is_integer():\n            answers.append((x, int(y)))\n    \n    orange_lemon_total = sum([x + y for x, y in answers])\n\n    return orange_lemon_total\n    \nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # Since the seating is in a circle, we fix one person's position and \n    # arrange the remaining (n-1) people. This is (n-1)! permutations.\n    num_people = 4\n    num_orders = factorial(num_people - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solutions = solve(equation, original_eggs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = -(-total_cookies // cookies_per_box)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female visitors on the first day, and m be the number of male visitors.\n    f, m = symbols('f m')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors.\n    equation1 = Eq(m, f + 450)\n\n    # On the second day:\n    # - Female visitors increased by 15%\n    # f * (1 + 0.15) = f * 1.15\n    # - Male visitors decreased by 18%\n    # m * (1 - 0.18) = m * 0.82\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # Total number of visitors on the first day: female_visitors + male_visitors\n    total_first_day = solutions[f] + solutions[m]\n\n    return total_first_day\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used_for_muffins = 1/5  # kg\n    flour_used_for_cookies = 1/2  # kg\n    flour_left = 360 / 1000  # converting grams to kg\n\n    total_flour_used = flour_used_for_muffins + flour_used_for_cookies  # sum of flour used\n    initial_flour = total_flour_used + flour_left  # total flour she had initially\n\n    return initial_flour\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Calculate cost of bananas (3 bananas at 12p each)\n    banana_cost = 3 * 12\n\n    # Calculate cost of apples (5 apples at 11p each)\n    apple_cost = 5 * 11\n\n    # Calculate total cost in pence\n    total_cost = banana_cost + apple_cost\n\n    # Convert total cost to pounds (100 pence in a pound)\n    total_cost_pounds = total_cost / 100\n\n    # Calculate change (Ian pays with £2 coin)\n    change = 2 - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    # Leo had $220 more than Jason initially\n    # Leo got extra $180, and Jason got extra $1100\n    # Jason now has 2 times as much money as Leo\n\n    # Initial amount of money that Leo and Jason has\n    equation1 = Eq(leo - jason, 220)\n\n    # Amount of money Leo and Jason has after receiving salary\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the two equations for the amount of money Jason has now\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2 # Total number of books\n    # Calculating permutations with repetitions (duplicate items)\n    ways = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        E, F, C, B, H = p\n        if E == 0:  # Rule out leading zero\n            continue\n        A = (E+F+C+B+H) % 10\n        G = (E+F+C+B+H) // 10\n        if G == B and len({E, F, C, B, H, A}) == 6:  # Checking all digits are unique and G equals B\n            return int(''.join(map(str, [E, F, C, B, H])))\n    \nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Tania wants to split 7 identical pencils into 3 identical pencil cases.\n    # This is a classic problem of partitioning n identical items into k identical groups,\n    # which is also known as \"stars and bars\" - Theorem Two in combinatorics.\n    \n    # In this problem, we have 7 pencils (stars) and need to place 2 dividers (bars)\n    # to create 3 groups (since having 3 groups requires us setting up 2 dividers between them).\n    # This is equivalent to choosing positions for the 2 dividers among 7 + 2 = 9 total positions.\n    \n    # The formula to calculate the combinations is:\n    # C(n+k-1, k-1) = C(7+3-1, 3-1) = C(9, 2)\n    \n    from math import comb\n    \n    # Calculate the number of ways to choose 2 dividers out of 9 positions.\n    num_ways = comb(9, 2)\n    \n    return num_ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n\n    total_robots = robots_per_day * days_in_week\n    \n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    decrement = 9\n    \n    while starting_number > 0:\n        last_positive_number = starting_number\n        starting_number -= decrement\n        \n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # 3 million pounds\n    num_friends = 5\n\n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    total_amount_paid = 555\n    cost_no_name = 10\n    cost_with_name = 15\n\n    # Let x be the number of children who paid for the name on the shirt\n    # Let y be the number of children who did not pay for the name\n    # We have two equations:\n    # x + y = total_children       (1)\n    # cost_with_name * x + cost_no_name * y = total_amount_paid (2)\n\n    # From equation (1), we get y = total_children - x\n    # Plugging y into equation (2), we get:\n    # cost_with_name * x + cost_no_name * (total_children - x) = total_amount_paid\n    # Simplifying, we solve for x:\n    x = (total_amount_paid - cost_no_name * total_children) / (cost_with_name - cost_no_name)\n\n    return int(x)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Define the two speeds\n    initial_speed = 150   # in meters per minute\n    increased_speed = 200 # 150 + 50 meters per minute\n\n    # Define the distance walked at the initial speed\n    distance_at_initial_speed = initial_speed * 10\n\n    # Calculate the remaining distance to reach the total distance\n    remaining_distance = 3700 - distance_at_initial_speed\n\n    # Calculate the time spent walking at the increased speed\n    time_at_increased_speed = remaining_distance / increased_speed\n\n    # Calculate the total time spent walking (initial 10 minutes + time at increased speed)\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # male visitors was 450 more than the number of female visitors\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # On the second day, female visitors increased by 15%\n    female_second_day = female_first_day * 1.15\n\n    # On the second day, male visitors decreased by 18%\n    male_second_day = male_first_day * 0.82\n\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time is 7 hours ahead of London time\n    time_difference = 7  # in hours\n\n    # Time took off from Singapore\n    take_off_time_singapore = 5  # 05:00 AM\n\n    # Time when the plane landed in London\n    landing_time_london = 11  # 11:00 AM\n\n    # Adjust landing time in London to Singapore time by adding time difference\n    adjusted_landing_time_singapore = landing_time_london + time_difference  # in 24-hour format\n\n    # Calculate the flight duration in hours\n    # If the adjusted landing time is on the next day\n    if adjusted_landing_time_singapore < take_off_time_singapore:\n        flight_duration = (24 - take_off_time_singapore) + adjusted_landing_time_singapore\n    else:\n        flight_duration = adjusted_landing_time_singapore - take_off_time_singapore\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n\n    # Calculate the number of permutations of all cards\n    total_permutations = factorial(total_cards)\n\n    # Divide by the permutations of identical cards (hearts, spades, diamonds)\n    ways = total_permutations // (factorial(4) * factorial(3) * factorial(7))\n\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # Assigning the digits according to the given criteria\n    first_digit = 5  # the smallest multiple of 5\n    second_digit = 1 # the smallest odd number among the natural numbers\n    third_digit = 9  # the largest single digit odd number\n    fourth_digit = 2 # the smallest even number in nature\n    fifth_digit = 8  # the largest single digit that is a multiple of 2\n    sixth_digit = 3  # the smallest odd number greater than 1 in nature\n    seventh_digit = 0 # it must be a multiple of 2 and 5, so it should end in 0\n    \n    # Combining the digits to form the phone number\n    phone_number = (first_digit * 10**6) + (second_digit * 10**5) + (third_digit * 10**4) + \\\n                   (fourth_digit * 10**3) + (fifth_digit * 10**2) + (sixth_digit * 10) + seventh_digit\n    \n    # Returning the final result\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 80  # Remaining pages read on the last day\n    day_count = 1  # He starts by reading on the first day\n    pages_read = 20  # Pages he read on the first day\n\n    # Adding the pages read each day until the last day\n    while total_pages > pages_read:\n        total_pages += pages_read\n        pages_read += 5\n        day_count += 1\n    \n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n\n    difference = almonds - cashew_nuts\n\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Calculate the number from which Johnny is subtracting\n    number = (quotient * divisor) + remainder \n\n    # The correct process to find the number is (quotient * divisor) + remainder\n    # Johnny's mistake was to multiply the remainder by the quotient \n    # instead of adding the remainder after multiplying the quotient by the divisor\n\n    # Johnny's incorrect calculation:\n    incorrect_number = (remainder * quotient) + divisor\n\n    # Check if Johnny's answer is correct\n    is_correct = (incorrect_number == number)\n\n    return (is_correct, number)\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    ans = sum([x if x % 4 in [0, 2] else -x for x in range(2, 55, 2)])\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # set up the congruences based on the problem statement\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    # solve for the smallest positive integer that satisfies all congruences\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(f\"{s}{a}{s}{m}{o}\")\n        ogams = int(f\"{o}{g}{a}{m}{s}\")\n        if sasmo * 4 == ogams and s != '0' and o != '0':\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = symbols('girls')\n\n    # Each boy distributes 4 bags, each girl distributes 3 bags\n    # Boys distributed 62 more bags than girls\n    equation1 = Eq(4*boys, 3*girls + 62)\n    # Total number of boys and girls is 40\n    equation2 = Eq(boys + girls, 40)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    \n    # Since the sequence is already sorted in ascending order, we can find the median directly\n    mid_index = len(sequence) // 2\n    # Check if the length of the sequence is even or odd\n    if len(sequence) % 2 == 0:\n        median = (sequence[mid_index] + sequence[mid_index - 1]) / 2\n    else:\n        median = sequence[mid_index]\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n    # After cutting, the length of rope A becomes 65 - cut_length\n    # After cutting, the length of rope B becomes 29 - cut_length\n    # Rope A's remaining length is 3 times rope B's remaining length\n\n    equation = Eq(3 * (29 - cut_length), 65 - cut_length)\n\n    solution = solve(equation, cut_length)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_times = total_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    value_of_square = (12 / 18) * 6\n    return value_of_square\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # According to the given ratios A:B = 2:3 and B:C = 6:5\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    \n    # Average of A, B and C is 45, therefore (A+B+C)/3 = 45\n    equation3 = Eq((A + B + C)/3, 45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    dresses_cost = 6 * 7 * x\n    skirts_cost = 3 * 35\n    total_cost = 441\n    \n    equation = Eq(dresses_cost + skirts_cost, total_cost)\n    \n    dress_cost = solve(equation, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digit_options = [1, 3, 5, 7, 9]\n    return len(odd_digit_options) ** 3\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # Since the pattern shows that the sum of fractions up to n/(n+1) is n/(n+2), we can infer the value of k.\n    k = 2011  # From the given pattern, it is clear that k is the numerator of the last fraction.\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy decorator alone\n    x = symbols('x')\n\n    # Rate of work done by the energetic decorator\n    rate_energetic = 1 / 12\n\n    # Rate of work done by both decorators together\n    rate_together = 1 / 8\n\n    # Equation: 1/lazy + 1/energetic = 1/together\n    equation = Eq((1 / x) + rate_energetic, rate_together)\n\n    # Solve the equation for x\n    days_lazy = solve(equation, x)[0]\n\n    return days_lazy\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the original rectangle's sides\n    length, width = symbols('length width')\n\n    # The new length after increasing is the original length plus 12\n    new_length = length + 12\n\n    # The perimeter of the new rectangle is 2 times the sum of the new length and the original width\n    equation = Eq(2 * (new_length + width), 38)\n\n    # Solve the equation to find the width\n    width_solution = solve(equation, width)[0]\n\n    # The perimeter of the original rectangle is 2 times the sum of the original length and width\n    original_perimeter = 2 * (length + width_solution)\n\n    # Substitute the value we found for width back into the equation for the original perimeter\n    original_perimeter = original_perimeter.subs(width, width_solution)\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    a1 = 2 # First term\n    d = 4 # Common difference (next term is 4 more than previous one)\n    n = 11 # Term number to find\n\n    # n-th term of an arithmetic sequence formula is a_n = a1 + (n - 1) * d\n    an = a1 + (n - 1) * d\n\n    return an\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stamps Natasha has\n    # Then Jamie-Anne has x + 18 stamps\n    x = symbols('x')\n\n    # Set up the proportion\n    proportion = Eq(5 * x, 3 * (x + 18))\n\n    # Solve for Natasha's stamps\n    natasha_stamps = solve(proportion, x)[0]\n\n    # Calculate total stamps\n    total_stamps = natasha_stamps + natasha_stamps + 18\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n\n    # Sana and Mina had 234 coins in total\n    equation2 = Eq(sana + mina, 234)\n\n    # Solve the system of equations for sana and mina\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina's coins after giving away 12\n    mina_coins_left = solutions[mina] - 12\n\n    return mina_coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * 3 / 7\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * 3 / 8\n    remaining_grapes = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3 / 4\n    number_of_small_bags = remaining_grapes / small_bag_weight\n\n    return int(number_of_small_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n\n    total_flour = flour_per_student * number_of_students\n\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121):\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    time_for_10_lamps = 50  # Time to cycle from the first to the eleventh lamp post\n    time_for_1_lamp = time_for_10_lamps / 10  # Time to cycle past one lamp post\n    lamps_in_80_seconds = 80 / time_for_1_lamp  # Total number of lamps Uncle Sam cycles past in 80 seconds\n    \n    # Since Uncle Sam starts at the first lamp post, we need to add 1 to account for it\n    return int(lamps_in_80_seconds + 1)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Number of flowers on each side, not including corners\n    flowers_each_side = 6 - 2  # deducting the corner flowers\n\n    # Total flowers on the corners\n    corner_flowers = 4\n\n    # Total number of flowers, 4 sides, but do not double count the corner flowers\n    total_flowers = flowers_each_side * 4 + corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_items = symbols('total_items')\n   \n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n    \n    solutions = solve(equation, total_items)\n    \n    num_lemons = int(lemons.subs(total_items, solutions[0]))\n\n    return num_lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount_decimal = (original_price - 67.50) / original_price\n    ana_discount_percentage = ana_discount_decimal * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # calculating the sum of all factors of 4\n    factors_of_4_sum = sum(set(factor for i in range(1, 5) if 4 % i == 0 for factor in (i, 4//i)))\n    \n    # set the digit in the hundreds place\n    hundreds_place = 8\n    \n    # the digit in the thousands place is 1 more than the hundreds place\n    thousands_place = hundreds_place + 1\n\n    # ones place is the sum of factors of 4\n    ones_place = factors_of_4_sum\n    \n    # tens place is the difference between hundreds and ones place\n    tens_place = hundreds_place - ones_place\n    \n    # Constructing the number\n    number = 4 * 10000 + thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n    \n    return number\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    for s in range(1, 1000):  # Reasonable upper limit\n        for r in range(1, s):\n            if (3/10) < (r/s) < (5/16):\n                return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    two_days_total = first_day + second_day\n    total_steering_wheels = two_days_total / (5/6)\n    \n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Solution will be a list, we retrieve the first element as the answer\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Capacity of the bus in terms of children\n    total_capacity_children = 40\n    \n    # Number of children already on the bus\n    children_on_bus = 15\n    \n    # Remaining capacity for children\n    remaining_capacity_children = total_capacity_children - children_on_bus\n    \n    # Capacity of bus in terms of adults\n    total_capacity_adults = 24\n    \n    # Each adult takes up the space equivalent to (total_capacity_children / total_capacity_adults) children\n    adult_to_child_ratio = total_capacity_children / total_capacity_adults\n    \n    # Maximum number of adults that can be on the bus with the 15 children\n    max_adults_with_children = remaining_capacity_children / adult_to_child_ratio\n\n    return int(max_adults_with_children)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factor 28 to get its prime factors and their exponents\n    factors = factorint(28)\n    \n    # The smallest number that can be multiplied with 28 to get a perfect square\n    # is the product of the primes of the factorization of 28 to the power of\n    # (1 less than the next even exponent) if their exponent is odd.\n    smallest_multiplier = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            smallest_multiplier *= prime\n    \n    return smallest_multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    # Auntie Lina takes 3 minutes to cook 2 pancakes\n    time_per_pancake = 3 / 2\n\n    # Calculate how many pancakes she can cook in 12 minutes\n    pancakes_in_12_min = 12 / time_per_pancake\n    \n    return int(pancakes_in_12_min)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8) \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    total_sizes = 3  # L, M, S\n\n    # By Pigeonhole Principle\n    min_students_same_size = (total_students // total_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle(a, b):\n        return (a + 2) / b\n\n    inner_triangle = triangle(6, 4)\n    ans = triangle(8, inner_triangle)\n    \n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    spent_on_dvd = 740\n    remaining_after_dvd = salary - spent_on_dvd\n    spent_on_tv = 3/4 * remaining_after_dvd\n    left_salary = 1/5 * salary\n\n    equation = Eq(remaining_after_dvd - spent_on_tv, left_salary)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell_now = symbols('russell_now')\n\n    equation = Eq(russell_now + 32, 4 * (russell_now - 16))\n\n    solution_russell_now = solve(equation, russell_now)\n\n    return solution_russell_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40 / 100\n    total = 120\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Difference between the numbers of people standing opposite in the circle.\n    difference = abs(6 - 19)\n    # Since they are directly opposite, this difference should be half the total number of people.\n    # Hence, the total number of people is twice the difference.\n    total_people = difference * 2\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(0, 10):\n        for BC in range(0, 100):\n            pip_number = int(f\"{A}{BC}{A}\")\n            bud_number = int(f\"{BC}{A}\")\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # Each cut divides a rod into one additional piece.\n    # Therefore, to divide a rod into 5 pieces, we need 4 cuts.\n    # Since each cut takes 2 minutes, we multiply the number of cuts by the time per cut.\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let the number of shelves with math books be m\n    # Let the number of shelves with spelling books be s\n    # we are given that there are 15 shelves in total and 72 spelling books\n    # so m + s = 15 (equation 1)\n    # and 9 * s = 72 (equation 2) since each shelf with spelling books has 9 books\n    # we need to find the number of math books, which is 4 * m\n    # solve for s from equation (2)\n    s = 72 // 9\n    # substitute s into equation (1) to find m\n    m = 15 - s\n    # calculate the total number of math books\n    math_books = 4 * m\n    return math_books\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    \n    # Original number of students in 6A: 4/9 * b\n    # Original number of students in 6B: b\n    # After swaps:\n    # 6A has (4/9 * b - 3) + 18 students\n    # 6B has b - (18 - 3) students\n\n    # Since the number of students after swapping is equal:\n    equation = Eq((4/9 * b - 3) + 18, b - 15)\n    \n    # Solve for the value of b (original students in 6B)\n    solved_b = solve(equation, b)\n\n    # Calculate the number of students originally in 6A\n    original_students_6A = 4/9 * solved_b[0]\n\n    return original_students_6A\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_per_biscuit = 40 / 100\n    needed_chocolate = chocolate_per_biscuit * 75\n    return needed_chocolate\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2*5\n    return ans\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Number of minutes to walk from the first floor to the fourth floor\n    minutes_for_first_to_fourth = 6\n    # Number of floors Jeffrey walks (4 - 1) when walking from the first floor to the fourth floor\n    floors_walked_first_to_fourth = 4 - 1\n    # Calculate time per floor\n    time_per_floor = minutes_for_first_to_fourth / floors_walked_first_to_fourth\n    # Number of floors Jeffrey walks (10 - 1) when walking from the first floor to the tenth floor\n    floors_walked_first_to_tenth = 10 - 1\n    # Calculate the minutes for first to tenth floor\n    minutes_for_first_to_tenth = time_per_floor * floors_walked_first_to_tenth\n    \n    return minutes_for_first_to_tenth\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earning = 90\n    number_of_days = 7  # Monday to Sunday inclusive\n\n    total_earnings = average_daily_earning * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    # Create an equation equivalent to 32/n = n/2\n    # It can be rewritten as 32 = n^2 / 2\n    # which leads to n^2 = 64\n    # so, n = sqrt(64)\n    n = 64**0.5\n    return n\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # First segment: 280 meters at 7 meters per second\n    time1 = 280 / 7\n    \n    # Second segment: 400 meters at 5 meters per second\n    time2 = 400 / 5\n    \n    # Third segment: 120 meters at 8 meters per second\n    # Total distance is 800m, so the third segment is the remainder:\n    # 800 - 280 - 400 = 120 meters\n    time3 = 120 / 8\n    \n    # Total time is the sum of times for each segment\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a + b + c, 168)                 # Total marbles\n    equation2 = Eq(b + 15 - 8, a - 8 + 2*(b + 15))  # b gave 8 to a and got 15 from c\n    equation3 = Eq(c - 15, 7*(b + 15))              # c gave 15 to b, ratio c:b is 7:5\n    equation4 = Eq(a, 2*(b + 15))                   # ratio a:b is 2:5\n\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    # Calculate the expression using arithmetic operations.\n    ans = 180 - (9+9+9+9+9+9) - (7+7+7+7+7+7)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) / (factorial(4) * factorial(3) * factorial(7))\n    return int(ways)\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lollipops, gum_drops = symbols('lollipops gum_drops')\n    \n    equation1 = Eq(lollipops / gum_drops, 5/7)\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n    \n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n    \n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n    \n    return total_candy_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    pages = 268\n    digits = 0\n    \n    # 1-9: 9 pages with 1 digit\n    if pages <= 9:\n        digits = pages\n    else:\n        digits += 9\n    \n    # 10-99: 90 pages with 2 digits\n    if pages > 9 and pages <= 99:\n        digits += (pages - 9) * 2\n    else:\n        digits += 90 * 2\n    \n    # 100-999: pages with 3 digits\n    if pages > 99:\n        digits += (pages - 99) * 3\n    \n    return digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Convert meters to centimeters to work with whole numbers\n    width = 136  # 1.36m = 136cm\n    height = 80  # 0.8m = 80cm\n\n    # Find the greatest common divisor to get the maximum square side\n    square_side = gcd(width, height)\n\n    # Calculate the number of squares\n    num_squares = (width // square_side) * (height // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if '4' in str(i) or '5' in str(i) or '7' in str(i):\n            if i % 2 != 0:\n                digits = [int(d) for d in str(i)]\n                if all(digit in [4,5,7] for digit in digits):\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    # Numbers less than 201 that are divisible by 5\n    divisible_by_5 = (200 // 5)\n    # Numbers less than 201 that are divisible by 7\n    divisible_by_7 = (200 // 7)\n    # Numbers less than 201 that are divisible by both 5 and 7 (35)\n    divisible_by_5_and_7 = (200 // 35)\n    \n    # Applying Inclusion-Exclusion Principle\n    ans = (divisible_by_5 + divisible_by_7 - divisible_by_5_and_7)\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for price of durian, pineapple, and watermelon\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    \n    # Chris buys 1 durian, 2 pineapples and 3 watermelons for $440\n    # Equation: durian + 2 * pineapple + 3 * watermelon = 440\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    \n    # Dylan buys 4 durians, 6 pineapples and 9 watermelons for $1625\n    # Equation: 4 * durian + 6 * pineapple + 9 * watermelon = 1625\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n    \n    # Use the sympy solve() function to find the values of durian, pineapple, and watermelon.\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        ""
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Let's denote the true value of the number as x.\n    # If the 0 in the ones digit is forgotten, the original number can be expressed as x - (10 * n), \n    # where n is the digit in the ones place of the original number.\n\n    # According to the problem, we know that:\n    # x - (10 * n) = x - 135\n\n    # We can simplify this to get the ones digit of the original number:\n    # 10 * n = 135\n    # n = 135 / 10\n    # n = 13.5\n\n    # Since the ones digit n must be an integer, and here we find it to be 13.5, \n    # it indicates that there's been a mistake in the deduction. \n    # The correct deduction should consider that the forgotten 0 makes the number 10 times smaller \n    # plus the value of the ones digit of the original number.\n\n    # The correct equation should be:\n    # 10 * (x - n) = x - 135\n\n    # We need to find integer solutions for n and x, where 0 <= n <= 9 because n is a digit.\n    for n in range(10):\n        x = (135 + 10 * n) / 9\n        if x.is_integer():\n            return int(x)\n\n    return None\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # To find the number of teams n given that there are total\n    # of 30 matches and each team plays twice with each other\n    # we can set up the equation n*(n-1) = 2*total_matches\n    # which simplifies to n^2 - n - 2*30 = 0\n    # This can be solved using basic algebra as a quadratic equation\n    \n    total_matches = 30\n    # We double the number of matches because each match is played twice\n    double_matches = total_matches * 2\n    \n    # now we apply the formula for the sum of the series upto n terms: n*(n-1)/2 = total matches\n    # after rearranging the terms we get a quadratic equation: n^2 - n - 2*total_matches = 0\n    # coefficients for quadratic equation ax^2 + bx + c = 0\n    a = 1\n    b = -1\n    c = -double_matches\n    \n    # solving quadratic equation using the quadratic formula: x = (-b ± sqrt(b^2 - 4ac)) / 2a\n    # for our case, we only consider the positive solution since number of teams cannot be negative\n    discriminant = b**2 - 4*a*c\n    # We import math to calculate the square root for the discriminant\n    import math\n    n_pos = int(((-b + math.sqrt(discriminant)) / (2*a)))\n    \n    return n_pos\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n\n    # One trip can carry a maximum of 5 students,\n    # but coming back, the boat has to carry at least 1 person.\n    # So, each round trip can effectively transport boat_capacity - 1 students.\n\n    effective_capacity = boat_capacity - 1\n    trips = students // effective_capacity\n    remaining_students = students % effective_capacity\n\n    # If there are no remaining students, we subtract the last return trip\n    # because the boat doesn't need to come back.\n    if remaining_students == 0:\n        trips = trips * 2 - 1\n    else:\n        # Account for last trip to take remaining students.\n        trips = trips * 2 + 1\n\n    return trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise\n    # According to the question, we have the following relationships:\n    # 0.80x is the number of students who chose Grade A Math\n    # 0.35x is the number of students who chose Grade B Math\n    # 0.10x is the number of students who chose neither\n    # Therefore, 0.80x + 0.35x - 75 is the sum of the students choosing either Grade A or Grade B or both\n    # minus those who chose both to correct for double counting.\n    # 0.10x is not included as it represents students choosing neither.\n    # We also know that:\n    # 0.80x + 0.35x - 75 + 0.10x = x (Since all students are either in one of the categories or chose neither)\n    # So the equation becomes: (0.80 + 0.35 + 0.10)x - 75 = x\n    # This simplifies to: 1.25x - 75 = x\n    # Which gives us: 0.25x = 75\n    # And therefore: x = 75 / 0.25\n    x = 75 / 0.25\n    return int(x)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    numerator = factorial(100)\n    denominator = factorial(99) + factorial(98)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom sympy import divisors\n\ndef solution():\n    # There are no spare papers, hence all numbers from 1 to 13 are used.\n    numbers = set(range(1, 14))\n    \n    # Possible combinations of numbers on the students' foreheads.\n    possible_combinations = list(combinations(numbers, 9))\n    valid_combinations = []\n\n    # Checking each combination\n    for comb in possible_combinations:\n        factors_count = [len(divisors(num)) for num in comb]\n\n        # Two students know the number of factors their number has, so there must be only two numbers \n        # with a unique number of factors among the chosen nine\n        unique_factor_counts = sum(factors_count.count(x) == 1 for x in factors_count)\n\n        if unique_factor_counts == 2:\n            valid_combinations.append(comb)\n    \n    # Alice knows her number is odd, May knows her number is smaller than Alice's by 2 and \n    # greater than Mark's by 1. With these conditions, loop into each valid combination to check.\n    for valid_comb in valid_combinations:\n        for alice_number in valid_comb:\n            if alice_number % 2 == 1:  # Alice number is odd.\n                for may_number in valid_comb:\n                    if may_number == alice_number - 2:  # May's number.\n                        for mark_number in valid_comb:\n                            if mark_number == may_number - 1:  # Mark's number.\n                                # The remaining numbers not picked\n                                not_picked = numbers - set(valid_comb)\n                                return reduce(lambda x, y: x * y, not_picked)\n    return None\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_permutations = list(permutations([1, 4, 6, 9]))\n    sum_of_numbers = sum([1000*p[0] + 100*p[1] + 10*p[2] + p[3] for p in all_permutations])\n    average = sum_of_numbers / len(all_permutations)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initially, equal number of boys and girls.\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, twice as many girls as boys remained.\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    # hundreds place must be 9 as it needs to be the greatest 1-digit number\n    for tens in range(0, 10):\n        for ones in range(0, 10):\n            # ensure even number, all digits are different and sum of tens and ones is 15\n            if ones % 2 == 0 and tens != ones and tens + ones == 15 and tens != 9 and ones != 9:\n                return 900 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # km per hour\n    speed_car = 120  # km per hour\n    time_delay = 3  # the car starts 3 hours later\n\n    # Distance head start of van\n    distance_start = speed_van * time_delay\n\n    # Relative speed between the car and the van\n    relative_speed = speed_car - speed_van\n\n    # Time it takes for the car to catch up with the van\n    catch_up_time = distance_start / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    hats = 4  # She has 4 different hats\n    shirts = 3  # She has 3 different shirts\n    pants = 2  # She has 2 different pairs of pants\n    skirt = 1  # She has 1 skirt\n    \n    hat_options = sum(1 for _ in range(hats + 1))  # 1 for no hat option + 4 for each hat option\n\n    total_combinations = hat_options * shirts * pants * skirt\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert the recurring decimal to a fraction\n    fraction_1 = Fraction(1, 99)\n    \n    # Calculate the square of the fraction since the decimals are the same\n    square_fraction = fraction_1 ** 2\n    \n    # The denominator after squaring will dictate how many digits in one repetend\n    repetend_digits = len(str(square_fraction.denominator))\n    \n    return repetend_digits\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A capacity (pages per minute)\n    capacity_A = 300 / 12\n    \n    # Printer B capacity (pages per minute)\n    capacity_B = 300 / 10\n    \n    # Total capacity when both printers are working together\n    total_capacity = capacity_A + capacity_B\n    \n    # Half an hour in minutes\n    half_hour_in_minutes = 30\n    \n    # Total number of pages printed in half an hour\n    pages_printed_in_half_hour = total_capacity * half_hour_in_minutes\n    \n    return int(pages_printed_in_half_hour)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # total ratio\n    total_ratio = 3 + 4 + 2\n\n    # total amount collected\n    total_amount = 560\n\n    # price of each type of puff\n    price_durian = 5\n    price_chocolate = 3\n    price_strawberry = 4\n\n    # calculate total puffs sold\n    total_puffs = total_amount / (3 * price_durian + 4 * price_chocolate + 2 * price_strawberry)\n\n    # calculate the amount collected from the sale of durian puffs\n    amount_durian = total_puffs * 3 * price_durian\n\n    return amount_durian\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the day is valid for the month\n            if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:\n                continue\n            if month == 2:\n                # No leap year in 2019\n                if day > 28:\n                    continue\n            # Form the date string\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            # Count the number of '3's in the date string\n            count += date_str.count('3')\n    return count\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the levels where A, B, C, D, Zachary, Yvonne, Xavier, Waylon stay\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W')\n    \n    # Equations based on the given conditions\n    eq1 = Eq(A, Z)  # A is Zachary\n    eq2 = Eq(B < X, True)  # B's level is lower than Xavier's level\n    eq3 = Eq(D, 5 * Y)  # D's level is 5 times Yvonne's level\n    eq4 = Eq(Z + 2 - X, Z - W)  # Zachary's two levels up vs. Xavier and Waylon\n    eq5 = Eq(Z, Y + X)  # Zachary's level is the sum of Yvonne's and Xavier's levels\n    eq6 = Eq(A < D, True)  # A's level is lower than D's level\n    eq7 = Eq(A > C, True)  # A's level is higher than C's level\n    \n    # Additional facts from the apartment levels\n    levels = range(1, 19)  # Level 1 to Level 18\n    \n    solutions = []\n    for level_Z in levels:\n        for level_Y in levels:\n            # Check for condition (3) that level_D is 5 times level_Y and level_D not exceeding 18\n            level_D = 5 * level_Y\n            if level_D > 18:\n                continue\n            # Check for condition (5) Zachary's level is the sum of Yvonne's and Xavier's levels\n            level_X = level_Z - level_Y\n            if level_X <= 0 or level_X >= 19:\n                continue\n            # Check for condition (4) Zachary's two levels up vs. Xavier and Waylon\n            level_W = level_Z - 2\n            if level_W <= 0 or level_W >= 19:\n                continue\n            # Once we have valid levels for Yvonne, Zachary, Xavier, and Waylon\n            # We can determine the levels for A, B, C, D (who are the same persons) accordingly and check if they satisfy all conditions\n            solution = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (A, B, C, D, Z, Y, X, W))\n            if solution and all(1 <= s <= 18 for s in solution.values()):\n                solutions.append(solution[A])\n\n    # There may be multiple solutions; return the list of levels for A\n    return solutions\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Given a cuboid of dimensions 7x5x14, which is divided into 490 unit cubes (1x1x1)\n    # The only cubes that have exactly three painted faces will be the corners of the cuboid.\n    # Since the cuboid is rectangular, there are 8 corners.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    # Loop through all possible two-digit numbers 10 to 99\n    for original_number in range(10, 100):\n        # Swap the digits by converting to string\n        swapped_number = int(str(original_number)[::-1])\n        \n        # Check the condition\n        if swapped_number == (original_number // 3) + 3:\n            return original_number  # Return the original number if condition is met\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate1 = 1.06\n    rate2 = 1.08\n    years1 = 3\n    years2 = 2\n\n    value_after_3_years = principal * (rate1 ** years1)\n    final_value = value_after_3_years * (rate2 ** years2)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # 2/3 of the items were apples\n    apples = (2/3) * total_items\n    # 1/9 of the items were bananas\n    bananas = (1/9) * total_items\n    # The rest were lemons, so lemons = total_items - apples - bananas\n    lemons = total_items - apples - bananas\n    # She bought 12 more apples than lemons which gives us the equation:\n    equation = Eq(apples - lemons, 12)\n\n    # Solving for total_items\n    total_items_solution = solve(equation, total_items)\n\n    # Since lemons = total_items - apples - bananas, we calculate that:\n    lemons_number = total_items_solution[0] - (2/3) * total_items_solution[0] - (1/9) * total_items_solution[0]\n\n    return lemons_number\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school_A = 24\n    students_school_B = 36\n    students_school_C = 42\n\n    gcd_AB = gcd(students_school_A, students_school_B)\n    greatest_common_divisor = gcd(gcd_AB, students_school_C)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    # Let x be the cost of a notebook\n    # Let y be the cost of a pencil case\n    # Let z be the cost of an eraser\n\n    # Equation 1:\n    # 3 notebooks + 4 pencil cases + 5 erasers = $50\n    # 3x + 4y + 5z = 50\n    \n    # Equation 2:\n    # 1 notebook + 1 pencil case = $6\n    # x + y = 6\n\n    # Equation 3:\n    # 1 pencil case + 1 eraser = $9\n    # y + z = 9\n\n    # Rearrange equations 2 and 3 to find expressions for x and z in terms of y:\n    # x = 6 - y\n    # z = 9 - y\n\n    # Substitute x and z in Equation 1:\n    # 3(6 - y) + 4y + 5(9 - y) = 50\n    # 18 - 3y + 4y + 45 - 5y = 50\n    # -3y + 4y - 5y = 50 - 18 - 45\n    # -4y = -13\n    # y = 13 / 4\n    y = 13 / 4\n    \n    # A pencil case cost $y\n    return y\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence can be found with the formula:\n    # S_n = n/2 * (a1 + an) where a1 is the first term and an is the nth term.\n    # We know the sum of first 9 terms (S9) and the sum of first 27 terms (S27).\n    # We can set up a system of equations.\n\n    # S9 = 9/2 * (a1 + a9) = 99\n    # S27 = 27/2 * (a1 + a27) = 540\n\n    # From S9, we get a1 + a9 = 99 * 2 / 9\n    # From S27, we get a1 + a27 = 540 * 2 / 27\n\n    # Let's denote n as the common difference of the arithmetic sequence.\n    # We have: a9 = a1 + 8n and a27 = a1 + 26n\n    # Thus, a1 + (a1 + 8n) = 99 * 2 / 9 gives us one equation for a1 and n.\n    # And a1 + (a1 + 26n) = 540 * 2 / 27 gives us another equation for a1 and n.\n    \n    # Solving for a1 and n from the above equations:\n    a1_plus_a9 = 99 * 2 / 9\n    a1_plus_a27 = 540 * 2 / 27\n\n    # Now we express a9 and a27 in terms of a1 and n\n    # a9 = a1 + 8n -> a1 + 8n = a1_plus_a9 - a1 -> 8n = a1_plus_a9 - a1\n    # a27 = a1 + 26n -> a1 + 26n = a1_plus_a27 - a1 -> 26n = a1_plus_a27 - a1\n\n    # Now subtract a1 + 8n from a1 + 26n:\n    # 26n - 8n = a1_plus_a27 - a1_plus_a9 -> 18n = a1_plus_a27 - a1_plus_a9\n    # We can find n from this formula\n    n = (a1_plus_a27 - a1_plus_a9) / 18\n\n    # We can now solve for a1 using the n we just found and either equation for a9 or a27:\n    # a1 + 8n = a1_plus_a9\n    a1 = a1_plus_a9 - 8 * n\n\n    # Now we need the sum of first 16 terms, S16\n    # S16 = 16/2 * (a1 + a16)\n    # But a16 = a1 + 15n\n    # So, S16 = 8 * (a1 + a1 + 15n) = 8 * (2a1 + 15n)\n    S16 = 8 * (2 * a1 + 15 * n)\n\n    return S16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for h in range(1, 10):\n        for t in range(1, 10):\n            for u in range(1, 10):\n                if h % t == 0 and h % u == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Since the last number to be written is 12\n    half_total_numbers = total_numbers // 2\n\n    # Finding the median in the sequence\n    number = 1\n    written_numbers = 0\n    while written_numbers < half_total_numbers:\n        written_numbers += number\n        number += 1\n\n    median = number - 1\n\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '8']\n    all_permutations = permutations(digits)\n    return len(list(all_permutations))\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digits = 9 - 7 + 1\n    double_digits = 40 - 10 + 1\n    return single_digits + double_digits * 2\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "from math import comb\n\ndef solution():\n    # Group stage - round-robin tournaments for 8 groups\n    # Each team plays against every other team in the same group.\n    games_per_group = comb(4, 2)\n    total_group_games = games_per_group * 8\n\n    # Knockout round - single elimination stage\n    # There are top 16 teams, top 8, top 4, top 2 and one final match to determine the winner.\n    total_knockout_games = 16 - 1  # 15 games (8 round of 16, 4 quarter-finals, 2 semi-finals, 1 third place play-off, 1 final)\n\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n    \n    red_flash_rate = 4\n    green_flash_rate = 6\n    minutes_in_hour = 60\n    \n    # Find the least common multiple of both flash rates to get the interval at which they flash together\n    flash_together_rate = lcm(red_flash_rate, green_flash_rate)\n    \n    # Calculate how many times the lights flash together in an hour\n    flashes_together_in_hour = (minutes_in_hour // (60 // flash_together_rate)) + 1\n    \n    return flashes_together_in_hour\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number we are trying to find\n    # According to the problem, when we triple the number and add 1 we get 22.\n    # This can be written as an equation: 3 * x + 1 = 22\n    # We will solve this equation for x\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol x\n    x = symbols('x')\n    \n    # Define the equation 3x + 1 = 22\n    equation = Eq(3 * x + 1, 22)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = 0.4 * total_paintings\n    still_lifes = total_paintings - landscapes\n    french_landscapes = 25\n    french_paintings = 40\n    non_french_landscapes = landscapes - french_landscapes\n    non_french_still_lifes = still_lifes - (french_paintings - french_landscapes)\n\n    return int(non_french_still_lifes)\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink in ml\n    max_volume_per_glass = total_volume // 9  # Greatest volume in each glass without remainder\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_weight = (100 * 0.5) + (400 * 0.8)\n    rice_concentration = (rice_weight / total_weight) * 100\n    \n    return rice_concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_mpm = 24  # Speed in meters per minute\n    time_sec = 300  # Time in seconds\n\n    # Convert time into minutes\n    time_min = time_sec / 60\n\n    # Calculate distance\n    distance = speed_mpm * time_min\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # Calculate each term in the sequence and add them up\n    s = sum(int('2' * i) for i in range(1, 2018))\n\n    # Get the last 5 digits of the sum S\n    last_five_digits = str(s)[-5:]\n\n    # Calculate the sum of the last 5 digits\n    ans = sum(int(digit) for digit in last_five_digits)\n\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15\n    days_for_20_horses = total_hay / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        original_number = str(i)\n        new_number = original_number[1:] + original_number[0]\n        if int(new_number) - int(original_number) == 4707:\n            return int(original_number)\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let x be the number of years later for the sum of their ages to be 48\n    # Oliver's age in x years will be 20 + x\n    # Lin's age in x years will be 26 + x\n    # The sum of their ages in x years will be (20 + x) + (26 + x) = 48\n    # Now solve for x: 20 + 26 + 2x = 48\n    # Thus 2x = 48 - 20 - 26\n    # Therefore x = (48 - 20 - 26) / 2\n    # This gives us x = 1, which is the number of years later for the sum of their ages to be 48\n    \n    x = (48 - 20 - 26) / 2\n    return int(x)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    age_difference_2_years_ago = mother_age_now - 2 - (sandra_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 1000):\n        num = 35 * i\n        if str(num)[-2:] == '35' and sum(int(digit) for digit in str(num)) == 35:\n            return num\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    watch_price = 4 * y\n    handbag_price = 20\n    money_per_child = y - 5\n\n    equation = Eq(total_money, watch_price + handbag_price + 2 * money_per_child)\n\n    y_value = solve(equation, y)\n\n    return y_value[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = sum(1 for year in range(1904, 2000, 4))\n    normal_years = (2000 - 1901) - leap_years\n    days = leap_years * 366 + normal_years * 365\n    return days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n\n    deposit_days = total_days // 2\n    spend_days = total_days // 2\n    if total_days % 2 != 0:\n        deposit_days += 1\n\n    total_deposit = deposit_days * deposit_amount\n    total_spend = spend_days * spend_amount\n\n    final_amount = initial_amount + total_deposit - total_spend\n\n    return final_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    numbers = range(1, 100)\n    divisible_by_3_or_7 = [i for i in numbers if i % 3 == 0 or i % 7 == 0]\n    return len(numbers) - len(divisible_by_3_or_7)\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # The number of strikes in an hour is the same as the hour number (1 at 1 o'clock, 2 at 2 o'clock, etc.)\n    # So we are looking to find the sum of an arithmetic sequence from 1 to 12\n    \n    num_hours = 12\n    first_strike = 1\n    last_strike = num_hours\n    total_strikes = (num_hours * (first_strike + last_strike)) // 2  # sum of the arithmetic sequence\n    \n    return total_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total value of the coins in pence\n    number_of_coins = total_pence / 10  # calculate the number of ten-pence coins\n\n    total_weight = weight_per_coin * number_of_coins  # calculate total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n    \n    # Let's use the hypothesis method to solve the system\n    # Let x be the number of correct answers, then (total_questions - x) is the number of incorrect answers\n    # Then we form an equation based on the marks scored\n    for x in range(total_questions + 1):  # we go from 0 to total_questions (inclusive)\n        if x * correct_mark + (total_questions - x) * wrong_mark == total_score:\n            return x  # x is the number of correct answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4\n    adults = total_people * (1 / ratio_sum)\n    return int(adults)\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n\n    # If the remainder is 0, it means the last candy goes to the 9th child\n    if last_child == 0:\n        last_child = total_children\n\n    return last_child\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # According to the problem, we have two equations\n    equation1 = Eq(james + nina, 22)  # the total number of buttons is 22\n    equation2 = Eq(nina - 4, james + 4)  # After giving 4 buttons to James, Nina and James have the same number of buttons\n\n    # We use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    total_balls = 5 + 4 + 2  # Total number of balls of all colors\n    # To create two groups of 4 balls of the same color in the worst case scenario:\n    # 1. She can take all 5 blue balls while trying to make a group of 4 orange/yellow balls\n    # 2. She can take 3 more balls (either 3 orange or a mix of orange and yellow) without making another 4 balls set\n    # So now she has 5 blue balls and 3 other balls, without having two sets of 4 balls of the same color\n    # So for the next ball, no matter what color it is, she will have either:\n    # - A second set of 4 balls if it's an orange or yellow\n    # - Or, it adds to the remaining color to make a set of 4\n    # Hence, she needs to take 1 more ball to ensure she has 2 groups of 4 balls of the same color.\n    balls_needed = total_balls - (5 - 4) - (4 - 4) + 1  # Take one off for each color group to make it 4, then add 1\n    return balls_needed\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # In a knockout tournament with 4 players in each match, only 1 player advances.\n    # Therefore, for each match, there are 3 players knocked out.\n    # To find out the total number of matches for one overall winner,\n    # we just need to determine how many times we can knock out 3 players until 63 players are knocked out,\n    # since the remaining 1 player is the winner.\n    total_players = 64\n    players_knocked_per_match = 3\n\n    # Total matches required is the total players knocked out (which is total players - 1 for the winner)\n    # divided by the number of players knocked out in each match.\n    total_matches = (total_players - 1) // players_knocked_per_match\n\n    return total_matches\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_velocity = 10  # m/s\n    angle_degrees = 37\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    # Convert angle to radians\n    angle_radians = math.radians(angle_degrees)\n\n    # Calculate the height using the formula:\n    # h = (v^2 * sin^2(theta)) / (2 * g)\n    # Note: Due to the frictionless surface and energy conservation, the velocity \n    # vertical component will be 0 at the highest point.\n    vertical_velocity = initial_velocity * math.sin(angle_radians)\n    height = (vertical_velocity ** 2) / (2 * g)\n\n    # Calculate the distance along the ramp using the formula:\n    # x = h / sin(theta)\n    distance = height / math.sin(angle_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22  # total weight of cheese and 4 bags of flour\n    cheese_weight = 6  # weight of the piece of cheese\n    num_of_flour_bags = 4  # number of flour bags\n\n    # Total flour weight is total weight minus the weight of the cheese\n    total_flour_weight = total_weight - cheese_weight\n    # Weight of a single bag of flour is the total flour weight divided by the number of flour bags\n    flour_bag_weight = total_flour_weight / num_of_flour_bags\n\n    return flour_bag_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # n-th term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # Sum of n terms of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # Sum of n terms can also be written as: S_n = n/2 * (2a_1 + (n - 1)d)\n\n    # Let a_1 be the first term and d be the common difference of the sequence\n    # We have two equations based on the given sums:\n    # S_9 = 72 -> 9/2 * (2a_1 + 8d) = 72\n    # S_23 = 736 -> 23/2 * (2a_1 + 22d) = 736\n\n    # Solving for a_1 and d using the two equations:\n    # (1) 2a_1 + 8d = 72 * 2 / 9\n    # (2) 2a_1 + 22d = 736 * 2 / 23\n\n    # Calculate the coefficients\n    coef_1 = 72 * 2 / 9\n    coef_2 = 736 * 2 / 23\n\n    # Create two equations based on the coefficients\n    # (1) 2a_1 + 8d = coef_1\n    # (2) 2a_1 + 22d = coef_2\n\n    # Now we can solve for d first\n    # Subtract (1) from (2) to get d\n    # (2a_1 + 22d) - (2a_1 + 8d) = coef_2 - coef_1\n    # 14d = coef_2 - coef_1\n\n    d = (coef_2 - coef_1) / 14\n\n    # Now plug d back into (1) to solve for a_1\n    # a_1 = (coef_1 - 8d) / 2\n    a_1 = (coef_1 - 8 * d) / 2\n\n    # Now we can find the sum of the first 16 terms (S_16)\n    # S_16 = 16/2 * (2a_1 + (16 - 1)d)\n    S_16 = 16 / 2 * (2 * a_1 + (16 - 1) * d)\n\n    return S_16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Given:\n    exchange_rate = 103  # £1 is worth 103 rubles as per the given exchange rate.\n    cost_per_cd_rub = 255  # Cost of one CD in rubles in St Petersburg.\n    \n    # Amount Richard has in pounds:\n    richard_money_pounds = 14\n    \n    # Convert Richard's money to rubles:\n    richard_money_rub = richard_money_pounds * exchange_rate\n    \n    # Calculate the number of CDs Richard could buy in St Petersburg:\n    num_cds = richard_money_rub // cost_per_cd_rub\n    \n    return num_cds\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # The structure of the number is ABCD (original number) and BCDA (after moving the digit)\n    # Original number = 1000A + 100B + 10C + D\n    # New number      = 1000B + 100C + 10D + A\n    # New number is bigger by 4707, so: 1000B + 100C + 10D + A = 1000A + 100B + 10C + D + 4707\n    # Simplifying this equation, we get:\n    # 999B + 90C + 9D = 999A + 4707\n    # To make both sides of the equation a multiple of 9, we observe that 99A can be split into 999A = 900A + 99A\n    # So the equation becomes 999B - 900A + 90C - 99A + 9D = 4707\n    # Dividing through by 9, we get 111B - 100A + 10C - 11A + D = 523\n    # This simplifies to: 111B - 111A + 10C - 11A + D = 523\n    # B - A = 5 (Because 523 - 10C + 11A - D is a multiple of 111 and should be 0 for the equation to hold true)\n    # D = 3 (Because for the digit movement, A is moved to the units place, so making the assumption D = 3)\n    # To find the exact numbers for A, B, C, we set up simple equations:\n\n    for A in range(1, 10):      # A cannot be 0 because it's a 4-digit number\n        for B in range(0, 10):  # B can be 0\n            for C in range(0, 10):  # C can also be 0\n                D = 3  # D is determined based on the increase being 4707 and the last digit revolving\n                if B - A == 5 and (1000 * B + 100 * C + 10 * D + A) - (1000 * A + 100 * B + 10 * C + D) == 4707:\n                    return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Starting from 4 (the smallest square number 2^2) and go up to a reasonable number,\n    # since the ages in the options are not very high.\n    for age in range(4, 100):\n        if isprime(age - 2) and (age + 12)**(1/3) % 1 == 0:\n            # Check if uncle's current age is a square number\n            if (age - 3)**0.5 % 1 == 0:\n                return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # The worst-case scenario is taking all chips of the most abundant color first.\n    # In this case, taking all brown M&M's first, which are 5.\n    # Then, taking one chip of any other color guarantees 2 different colors.\n    # Minimum chips needed: All of one color + 1\n    return max(3, 4, 5) + 1\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of Andrew's speed to Bernice's speed\n    A_to_B = 5 / 3\n    # Ratio of Bernice's speed to Cassandra's speed\n    B_to_C = 6 / 10\n    # Ratio of Andrew's speed to Cassandra's speed\n    A_to_C = A_to_B * B_to_C\n\n    # When Cassandra is at level 19\n    # Andrew's level = Cassandra's level * Ratio of Andrew's speed to Cassandra's speed\n    andrew_level = 19 * A_to_C\n\n    return int(andrew_level)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    for x in range(-1000, 1000):  # Assuming x is within this range\n        if new_operation(2, new_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    sum_of_digits = sum(int(digit) for digit in pattern)\n    length_of_pattern = len(pattern)\n\n    # Determine complete repetitions of the pattern\n    complete_repetitions = 43 // length_of_pattern\n\n    # Determine how many digits are in the partial repetition at the end\n    partial_repetition_length = 43 % length_of_pattern\n\n    # Calculate the sum for the complete repetitions\n    sum_of_complete_repetitions = complete_repetitions * sum_of_digits\n\n    # Calculate the sum for the partial repetition\n    sum_of_partial_repetition = sum(int(digit) for digit in pattern[:partial_repetition_length])\n\n    # Add the sum of complete repetitions and the sum of the partial repetition\n    ans = sum_of_complete_repetitions + sum_of_partial_repetition\n\n    return ans\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    quizzes = 4\n\n    total_time_minutes = time_per_quiz_minutes * quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    # 1 kilometre = 100,000 centimetres\n    km_to_cm = 100000\n\n    # Convert 4.7 kilometres to centimetres\n    cm = 4.7 * km_to_cm\n\n    return cm\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_driven = 40 / 60\n    \n    # Calculate the distance driven by both drivers before Samuel turned back\n    distance_shafur = 54 * time_driven\n    distance_samuel = 66 * time_driven\n    \n    # Samuel's distance to town Y after turning back to town X\n    samuel_extra_distance = distance_samuel - distance_shafur\n    \n    # Samuel drives this extra distance at his original speed,\n    # which takes him extra time compared to Shafur\n    extra_time_samuel = samuel_extra_distance / 66\n    \n    # Total time taken by Shafur to reach town Y\n    total_time_shafur = time_driven + extra_time_samuel\n    \n    # Calculate the distance from Town X to Town Y using Shafur's time and speed\n    distance_XY = 54 * total_time_shafur\n    \n    return distance_XY\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n    total_years = 0\n\n    while sum(grandson_ages) != grandpa_age:\n        grandpa_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n        total_years += 1\n\n    return total_years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one chair and one table\n    cost_chair, cost_table = symbols('cost_chair cost_table')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(cost_table, 3 * cost_chair)\n    equation2 = Eq(4 * cost_table + 9 * cost_chair, 504)\n\n    # Solve the system of equations\n    solution_values = solve((equation1, equation2), (cost_chair, cost_table))\n\n    # Return the cost of one chair\n    return solution_values[cost_chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Negative since the numbers are decreasing\n    term = first_term\n    num_terms = 0\n    \n    # Keep generating terms until we hit a negative one\n    while term > 0:\n        num_terms += 1\n        term += difference\n    \n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits_product = 1\n        for digit in str(number):\n            digits_product *= int(digit)\n        if 100 <= digits_product <= 999:\n            return number\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    total_flowers = 68\n    flowers_per_vase = 9\n\n    vases_needed = (total_flowers + flowers_per_vase - 1) // flowers_per_vase\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_pounds = 416\n    afternoon_pounds = 248\n    difference = morning_pounds - afternoon_pounds\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Evaluate each expression separately and then subtract as needed\n    # Convert recurring decimals to fractions\n    # 7 divided by -3.33... which is -3 1/3 or -10/3 in fraction\n    expr1 = 7 / (-10 / 3)\n    \n    # Cube root of -0.027 which is -3/1000 or -1/30 cubed\n    expr2 = (-1 / 30) ** (1 / 3)\n    \n    # 2 cubed divided by 4 squared\n    expr3 = (2 ** 3) / (4 ** 2)\n    \n    # 0.125 times [1.8 - (0.2 times 7)]\n    expr4 = 0.125 * (1.8 - (0.2 * 7))\n    \n    # Convert 0.1 divided by 0.142857... to fraction\n    # 0.142857... is the fraction 1/7\n    expr5 = 0.1 / (1 / 7)\n    \n    # 2 times 0.3\n    expr6 = 2 * 0.3\n    \n    # Combine the expressions\n    answer = (expr1 / expr2) + (expr3 / expr4) - (expr5 + expr6)\n    \n    return answer\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3)  # Ceiling division to get the first multiple of 3 greater than or equal to 38\n    last_multiple = 81 // 3       # Floor division to get the last multiple of 3 less than or equal to 81\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # The sum of the numbers from 3 to 10 is the sum of an arithmetic sequence\n    sum_3_to_10 = sum(range(3, 11))\n\n    # Due to the symmetry of the pyramid, the sum from 3 to 10 is equal to the sum from 10 to 3\n    # Hence, the sum of the entire string with missing numbers is twice the sum from 3 to 10 minus the 10 itself (as it is not repeated)\n    total_sum = 2 * sum_3_to_10 - 10\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip, bud + 50)  # Pip has £50 more than Bud\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 0.75 * bud), 6/5)  # The ratio of leftover money\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones = 78\n    sold_in_february = (remaining_phones + 13) * 2\n    remaining_after_january = sold_in_february - 13\n    initial_phones = (remaining_after_january + 22) * 2\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    # Given that 3/7 of the number is 18, find the original number\n    original_number = (18 * 7) / 3\n    # Now calculate 5/6 of that original number\n    result = (original_number * 5) / 6\n    return result\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # Every game eliminates one player\n\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x.\n    # Then the number of pens is x + 50.\n    # We have the equation: x + (x + 50) = 438.\n\n    # Solve for x (number of pencils)\n    x = (total_items - more_pens) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 4 * 500\n    may_to_jul = 3 * 300\n    aug_to_sep = 400\n    oct_to_dec = 3 * 300\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    additional_apples = 16\n\n    total_apples = (boxes * apples_per_box) + additional_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_amount_needed = 70 * 4    # Total amount needed for 4 red packets\n    money_short = 15                 # Amount of money she is short of\n    money_mrs_koh_had = total_amount_needed - money_short\n    \n    return money_mrs_koh_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52): # Including 51 since the range is exclusive on the upper bound\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a one-on-one knockout tournament, each game eliminates one player.\n    # For 5 players, the number of games to determine the winner will be\n    # the number of players minus one (since the last player standing doesn't need to play).\n    num_players = 5\n    num_games = num_players - 1\n\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Since the position of the shelf from front to back is 8th,\n    # and from back to front is 10th,\n    # we can conclude that there are 7 shelves before and 9 shelves after the shelf Sara is interested in.\n    # So the total number of shelves is 7 (before) + 1 (the shelf) + 9 (after)\n    \n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    # After the transactions, the final ratios between Anna, Betsy, and Charlene's marbles are 2:5:7\n    # Let's denote the final number of marbles Anna, Betsy, and Charlene has by 2x, 5x and 7x respectively\n    # According to the problem, Charlene gave 15 marbles to Betsy and Betsy gave 8 marbles to Anna.\n    # Therefore, initially, Anna had (2x - 8), Betsy had (5x - 15 + 8) and Charlene had (7x + 15) marbles.\n    \n    # The total number of marbles initially was 168\n    # So, (2x - 8) + (5x - 15 + 8) + (7x + 15) = 168\n    \n    # Combine like terms, we get 2x + 5x + 7x - 8 + 8 - 15 + 15 = 168\n    # 14x = 168\n    # x = 168 / 14\n    x = 168 // 14\n    \n    # Initial marbles for Betsy is 5x - 15 + 8\n    initial_marbles_betsy = 5 * x - 15 + 8\n    \n    return initial_marbles_betsy\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_front = 7\n    from_back = 4\n    from_left = 3\n    from_right = 7\n\n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, the combined age was 10 years.\n    combined_age_four_years_ago = 10\n\n    # Since four years have passed, we need to add 4 years for each dog to get the current combined age.\n    current_combined_age = combined_age_four_years_ago + 4 * 2\n\n    # Now we want to know the combined age in 2 more years, so we add 2 years for each dog.\n    future_combined_age = current_combined_age + 2 * 2\n\n    return future_combined_age\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2016 to get its prime factors and their powers\n    factors = factorint(2016)\n    # Find all combinations of the prime factors that multiply to 2016\n    # Since the ages are under 10, we are limited to the factors: 2, 3, and 7\n    possible_ages = []\n\n    # Create a function to find combinations recursively\n    def find_combinations(factors, path=[]):\n        # Base case: if the product of the path is equal to 2016\n        if eval('*'.join(map(str, path))) == 2016 and len(path) == 4:\n            possible_ages.append(list(path))\n            return\n        # Avoid non-unique combinations and children over age 9\n        if path and (len(path) >= 4 or eval('*'.join(map(str, path))) > 2016):\n            return\n        for f in factors.keys():\n            for times in range(1, factors[f]+1):\n                factor_power = [f] * times\n                find_combinations(factors, path+factor_power)\n\n    find_combinations(factors)\n    \n    # Find the combination that has 4 different ages all under 10\n    for combo in possible_ages:\n        if all(x < 10 for x in combo) and len(set(combo)) == 4:\n            return sum(combo)\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence = symbols('ten_pence')\n\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n\n    total_value = Eq(five_pence * 5 + ten_pence * 10 + twenty_pence * 20, 1575)\n    solutions = solve(total_value, ten_pence)\n\n    twenty_pence_coins = 2 * solutions[0]\n\n    return twenty_pence_coins\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # Each boy has as many sisters as brothers\n    # b - 1 (excluding himself) = g (number of sisters for a boy)\n    equation1 = Eq(b - 1, g)\n\n    # Each girl has half as many sisters as brothers\n    # g - 1 (excluding herself) = 1/2 * b (half the number of brothers)\n    equation2 = Eq(g - 1, 1/2 * b)\n\n    # Solve the equations for b and g\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the total number of children, which is the sum of boys and girls\n    total_children = solutions[b] + solutions[g]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average speed during the first 30 minutes\n    x = symbols('x')\n    \n    # Speeds during each interval\n    speed_interval_1 = x  # in miles/hour\n    speed_interval_2 = x - 20  # in miles/hour\n    speed_interval_3 = x + 10  # in miles/hour\n\n    # Distance covered during each interval (using the formula: distance = speed * time)\n    distance_interval_1 = speed_interval_1 * 0.5  # since 30 minutes is 0.5 hours\n    distance_interval_2 = speed_interval_2 * 0.5  # since 30 minutes is 0.5 hours\n    distance_interval_3 = speed_interval_3 * 0.5  # since 30 minutes is 0.5 hours\n\n    # Total distance covered in all intervals should add up to 70 miles\n    equation = Eq(distance_interval_1 + distance_interval_2 + distance_interval_3, 70)\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_faction = 1 - (3/5)\n    remaining_grams = 60\n    original_mass = remaining_grams / remaining_faction\n\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    # Given values\n    sally = 8\n    \n    # Kelvin has $12 more than Sally\n    kelvin = sally + 12\n    \n    # Ivan has twice as much as Kelvin\n    ivan = 2 * kelvin\n    \n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    num = 96\n    base = 6\n    if num == 0:\n        return \"0\"\n    digits = []\n    while num > 0:\n        digits.append(str(num % base))\n        num //= base\n    digits.reverse()\n    return ''.join(digits)\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "from itertools import combinations\n\ndef solution():\n    n = 27  # total number of apples\n    k = 5   # number of children\n    result_set = set()  # to avoid duplicate tuples\n\n    # Let's use a 'dummy' child to split apples; we will give 1 apple to each child (ensure everyone has at least one)\n    remaining_apples = n - k\n    # Generate combinations to split the remaining apples\n    for combo in combinations(range(1, remaining_apples+k), k-1): # k-1 because we're placing dividers\n        # Include the bounds (0 and remaining_apples+1) to represent the start and end\n        partition = [0] + list(combo) + [remaining_apples+1]\n        # Group combinations into partition sizes (num of apples per child)\n        dist = [partition[i+1] - partition[i] - 1 for i in range(k)]\n        # Skip distributions where kids have same amount of apples\n        if len(set(dist)) == k:\n            # Add distributions, but account for the initially distributed apples\n            actual_distribution = [x+1 for x in dist]\n            result_set.add(tuple(sorted(actual_distribution, reverse=True)))\n    \n    # Find the minimum among the largest apple quantities that each child can have\n    least_max_apples = min(max(dist) for dist in result_set)\n\n    return least_max_apples\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10\n    note = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    tip_amount = total_cost * (tip_percentage / 100)\n    total_payment = total_cost + tip_amount\n    change = note - total_payment\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    climb_rate = 4\n    slide_rate = 2\n    well_depth = 10\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < well_depth:\n        day += 1\n        distance_climbed += climb_rate\n        if distance_climbed >= well_depth:\n            break\n        distance_climbed -= slide_rate\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # The strategy to win is to leave the opponent with a number of marbles that is a multiple of 4 (since the opponent can only take 1, 2 or 3 marbles).\n    # Since 26 is not a multiple of 4, Jason can win by taking a certain number of marbles to make the remaining number of marbles a multiple of 4.\n\n    total_marbles = 26\n\n    # Try taking 1 to 3 marbles and check if the remaining number of marbles is a multiple of 4.\n    for jason_takes in range(1, 4):\n        if (total_marbles - jason_takes) % 4 == 0:\n            return jason_takes\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for x1 in range(1, 26):\n        for x2 in range(1, 26):\n            for x3 in range(1, 26):\n                for x4 in range(1, 26):\n                    for x5 in range(1, 26):\n                        for x6 in range(1, 26):\n                            for x7 in range(1, 26):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25 and len(set([x1, x2, x3, x4, x5, x6, x7])) == 7:\n                                    ways.append(sorted([x1, x2, x3, x4, x5, x6, x7]))\n    # Removing the duplicates\n    ways = [list(x) for x in set(tuple(x) for x in ways)]\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability of the alcoholic being at any of the three bars is equal.\n    # Since he is not at two of the bars, he must be at the third one.\n    # The probability is 1 (certain) since the other two options are not possible.\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    whole_number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (whole_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the number of cows that could be sustained for 6 weeks.\n    # Let g be the growth rate of the grass per week.\n    # Let x be the total amount of grass available at the start.\n    c, g = symbols('c g')\n    \n    # Set up the two equations based on the problem statement.\n    # 120 cows for 12 weeks => x + 12g = 120 * 12\n    # 150 cows for 8 weeks => x + 8g = 150 * 8\n    equation1 = Eq(120 * 12, g * 12 + 120 * 12)\n    equation2 = Eq(150 * 8, g * 8 + 150 * 8)\n    \n    # Solve the system of equations for g.\n    solution_g = solve((equation1, equation2), (g))\n    \n    # Now we have g, we use it to find c based on 6 weeks:\n    # x + 6g = c * 6\n    equation_c = Eq(solution_g[g] * 6 + 120 * 12, c * 6)\n\n    # Solve for c, the number of cows for 6 weeks.\n    solution_c = solve(equation_c, c)\n    \n    return solution_c[c]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    volunteers, trees = symbols('volunteers trees')\n    equation1 = Eq(4 * volunteers + 5, trees)\n    equation2 = Eq(7 * (volunteers - 1), trees)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n    \n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    boys_more_than_girls = 55\n    total_students = 0\n    side_length = 1  # Starting with the smallest possible square\n\n    while True:\n        # Boys occupy the outermost layer and then every other layer inside\n        # Girls occupy the second layer and then every other layer inside.\n        # The expression for boys is: (side_length * 4 - 4) if side_length > 1 else 1\n        # For girls: ((side_length - 2) * 4) if side_length > 2 else 0.\n        # We are subtracting 4 in the case of boys to subtract the corners which\n        # are counted twice, since each corner belongs to two sides.\n        \n        boys = (side_length * 4 - 4) if side_length > 1 else 1\n        girls = ((side_length - 2) * 4) if side_length > 2 else 0\n\n        # Increment side_length by 2 because we add a boy and a girl layer each time\n        side_length += 2\n\n        # Update the total number of boys and girls\n        boys_total = boys_total + boys if side_length > 1 else 1\n        girls_total = girls_total + girls\n\n        # Check if the difference matches the given condition\n        if boys_total - girls_total == boys_more_than_girls:\n            # Calculate total students (both boys and girls)\n            total_students = ((side_length - 1) ** 2)  # total students in square formation\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable a represent the number of stickers in Bag A initially\n    # Let the variable b represent the number of stickers in Bag B initially\n    a, b = symbols('a b')\n\n    # Write down the system of equations based on the problem statement\n    equation1 = Eq(a + b, 270)                # The total number is 270\n    equation2 = Eq((b + 56) / (a - 56), 3/2)  # After moving stickers, the ratio is 3:2\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Ratio 14:21 can be simplified to 2:3, since both are divisible by 7\n    # We then assume that the missing number forms a similar proportion with 10, as 2 does with 3\n    # So, if 10:x = 2:3, then x = (10 * 2) / 3\n    missing_number = (10 * 2) / 3\n    return missing_number\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = (children + bars_per_packet - 1) // bars_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    ans = 0.05 * 180\n    return ans\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        sum_factors = 1  # Start with 1 because it's a factor of every number.\n        for i in range(2, int(n**0.5) + 1):  # Check up to the square root of n.\n            if n % i == 0:\n                sum_factors += i\n                if i != n // i:\n                    sum_factors += n // i\n        return sum_factors\n\n    number = 2  # Start checking from 2 onwards.\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sum = 0\n    for i in range(15, 0, -4):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    last_term = 31\n    number_of_terms = 10\n    common_difference = 3  # This is the difference between consecutive terms (28 - 25)\n\n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n-1)d\n    first_term = last_term - (number_of_terms - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = (total_cakes + cakes_per_box - 1) // cakes_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    sweets_to_give_away = total_sweets - sweets_for_sister\n    number_of_friends = 6\n\n    sweets_per_friend = sweets_to_give_away // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lovelle, makayla = symbols('lovelle makayla')\n    \n    # Lovelle and Makayla originally had a total of 3998 muffins.\n    original_total_eq = Eq(lovelle + makayla, 3998)\n    \n    # After selling muffins, they each have the same number left.\n    # Lovelle sold 462, Makayla sold 2/5 of hers.\n    same_amount_eq = Eq(lovelle - 462, makayla - (2/5) * makayla)\n    \n    # Solve the system of equations.\n    solutions = solve((original_total_eq, same_amount_eq), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from fractions import Fraction\n    \n    total_cost = 225\n    fraction_book = Fraction(1, 4)\n    fraction_bag = Fraction(2, 7)\n    \n    unit_cost = total_cost / (fraction_book + fraction_bag)\n    \n    return unit_cost\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    max_int = 30\n    ans = 0\n\n    while max_int > 0:\n        ans += 1\n        max_int -= ans\n\n    return ans\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Since the colors have 4, 8, 12, and 16 cards respectively,\n    # to ensure that we don't get 10 cards of the same color,\n    # we can take up to 9 cards from each color.\n\n    # So, we can pick 9 cards from the first 3 colors (9 each from 4, 8, and 12)\n    max_not_same = (9 * 3)\n\n    # Then we need to pick at least one more from the last color (16 cards) to ensure\n    # we get 10 of the same color\n    at_least = max_not_same + 1\n\n    return at_least\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_daffodils = 8\n    gap_between_daffodils = 1.1\n    length_of_row = (number_of_daffodils - 1) * gap_between_daffodils\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 9 and len({x1, x2, x3}) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 for identical boxes\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    jane_drinks = 150 / (1 + 1.5)\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    actual_minutes_taken = distance_to_market / walking_speed\n    return actual_minutes_taken\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n    \n    # Calculate the number of ways to form a group with at least 1 boy\n    # First calculate the total groups possible\n    total_groups = comb(total_girls + total_boys, group_size)\n    \n    # Calculate the number of groups with no boys (only girls)\n    groups_no_boys = comb(total_girls, group_size)\n    \n    # Subtract groups with only girls from total groups\n    groups_at_least_one_boy = total_groups - groups_no_boys\n    \n    return groups_at_least_one_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = (1/4) * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    friends_count = 6\n    \n    pears_per_friend = total_pears // friends_count\n    strawberries_per_friend = total_strawberries // friends_count\n    chocolates_per_friend = total_chocolates // friends_count\n    \n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    remaining_after_book = bag_cost * (5/2)\n    original_amount = remaining_after_book * (4/1)\n\n    return original_amount\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    return 15 * 5 / 3\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 0\n    page = 0\n    \n    while total_digits < 157:\n        page += 1\n        total_digits += len(str(page))\n    \n    return page - 1  # Subtract 1 because we added an extra page after exceeding 157\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_peach_trees = 41\n    distance_between_peach_trees = 3\n    distance_between_lamp_posts = 8\n\n    # The total length of the road is the distance between trees multiplied\n    # by the number of gaps between trees (total_peach_trees - 1)\n    # plus the 3m for the last tree since trees are at both ends\n    length_of_road = (total_peach_trees - 1) * distance_between_peach_trees + 3\n\n    # The number of lamp posts is the total length of the road divided\n    # by the distance between lamp posts plus one for the last lamp post\n    # since lamp posts are at both ends.\n    num_lamp_posts = (length_of_road // distance_between_lamp_posts) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    base_price = 10679  # Minimum price satisfying '679‘ at the end\n    possibilities = []\n    while base_price < 90680:  # Maximum price as the first blank digit can't be more than 9\n        if base_price % 72 == 0:\n            possibilities.append(base_price // 72)\n        base_price += 10000  # Increment to the next price with '679' at the end\n    return possibilities[-1]  # Get the largest unit price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then 2x is the number of students in class A\n    x = symbols('x')\n    # Let c be the total number of candies\n    c = symbols('c')\n\n    # Equation for class A:\n    # 4*(2x) + 20 = c\n    equation1 = Eq(4*(2*x) + 20, c)\n\n    # Equation for class B:\n    # 6*x - 16 = c\n    equation2 = Eq(6*x - 16, c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in m/s\n\n    time = train_length / speed  # time = distance/speed\n\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # All 2-digit numbers starting from 10 to 99\n        if (i % 10 + i // 10) % 5 == 0:  # i % 10 is the units digit, i // 10 is the tens digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    spent_on_dvd = total_money / 3\n    remaining_money = total_money - spent_on_dvd\n    spent_on_book = remaining_money * 0.25\n    money_left = remaining_money - spent_on_book\n    \n    return money_left\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for _ in range(years):\n        # Rabbits multiply by 3 times every year\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits every year\n        initial_rabbits //= 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_60mph = 1 / 60  # Time to travel 1 mile at 60 mph\n    time_30mph = 1 / 30  # Time to travel 1 mile at 30 mph\n    \n    total_time = time_60mph + time_30mph\n    total_distance = 2  # Total distance traveled is 2 miles\n    \n    average_speed = total_distance / total_time  # Formula for average speed\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = target_amount / amount_per_wash\n\n    # As Erica needs to make more than £12, we will need to take the ceiling of the result.\n    from math import ceil\n    return ceil(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day_candies = 2\n    multiplier = 2\n    num_days_passed = 4 - 1  # We use 4 - 1 because she starts eating on the first day\n    \n    candies_eaten_on_fourth_day = first_day_candies * (multiplier ** num_days_passed)\n    \n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    # equations based on the problem statement\n    equation1 = Eq(290 % n, a)\n    equation2 = Eq(235 % n, a + 2)\n    equation3 = Eq(200 % n, a + 5)\n\n    # since we are looking for natural number solution greater than 1\n    solutions = solve((equation1, equation2, equation3), (a, n))\n    for sol in solutions:\n        if sol[n] > 1:\n            return sol[n]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earning = 70\n    days_worked_in_week = 6\n\n    total_earnings = average_daily_earning * days_worked_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller unknown angle and 2x be the larger one.\n    x = symbols('x')\n\n    # We know that the sum of angles in any triangle is 180 degrees.\n    # Since one of the angles is a right angle (90 degrees), we can set up the equation for the remaining two angles.\n    equation = Eq(x + 2*x, 180 - 90)\n\n    # Solving for x gives us the smaller angle. We want the larger one which is 2x.\n    solution = solve(equation, x)\n\n    # The largest angle between the two is 2 times the smaller one.\n    largest_angle = 2 * solution[x]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):  # P cannot be 0 as it is the first digit of a two-digit number\n        for I in range(0, 10):\n            for S in range(0, 10):\n                if P != I and P != S and I != S:  # All digits must be different\n                    PI = 10 * P + I\n                    IS = 10 * I + S\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_ages = 765\n    # Since there are 9 elderly members with consecutive ages, we can designate the ages as:\n    # a, a+1, a+2, ..., a+7, a+8, where a is the age of the youngest member.\n    \n    # The sum of an arithmetic progression is given by n/2 * (first_term + last_term)\n    # Here, n = 9, sum = total_ages\n    # We solve for 'a' in the following equation:\n    # 9/2 * (a + a+8) = total_ages\n    \n    # Simplify the equation to find 'a'\n    # 9 * a + 36 = total_ages\n    # 9 * a = total_ages - 36\n    a = (total_ages - 36) // 9\n    \n    # The middle member age, which is the fifth term, is a+4\n    middle_age = a + 4\n    \n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # Two equations based on the given information\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solving the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # The total cost of 1 necklace and 1 earring\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    sunshine_on_sunday = 10\n    total_sunshine_for_whole_week = total_sunshine_for_six_days + sunshine_on_sunday\n    average_sunshine_per_day = total_sunshine_for_whole_week / 7\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walk_speed = 75  # m/min\n    run_speed = 2 * walk_speed  # 2 times walking speed\n    walk_time = 24  # minutes\n\n    # Calculate the distance to school\n    distance_to_school = walk_speed * walk_time\n    \n    # Time taken to cover half the journey by walking\n    half_distance = distance_to_school / 2\n    time_walking_half = half_distance / walk_speed\n\n    # Time taken to cover the other half by running\n    time_running_half = half_distance / run_speed\n\n    # Total time taken\n    total_time = time_walking_half + time_running_half\n\n    return round(total_time)\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    num_trees = 79\n    road_length = 320\n    \n    # The distance between each tree is the total length divided by the number of gaps\n    # between trees, which is the number of trees plus one.\n    num_gaps = num_trees + 1\n    distance_between_each_tree = road_length / num_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_who_saw_movie = boys * 0.50\n    girls_who_saw_movie = girls * 0.60\n\n    total_students_who_saw_movie = boys_who_saw_movie + girls_who_saw_movie\n\n    return total_students_who_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Kim's total savings\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    # x/3 - money given to mother\n    # (x/3)/2 - half of the money given to her mother (same as the amount left)\n    # 177 + 129 - total spent on dresses and earrings\n    equation = Eq(x / 3 - (177 + 129), (x / 3) / 2)\n    \n    # Solve for x\n    savings = solve(equation, x)\n\n    return savings[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x, y, z be the number of apples in the three identical baskets respectively\n    x, y, z = symbols('x y z', integer=True)\n    \n    # The equation representing the problem: x + y + z = 6\n    # Since the baskets are identical, we consider only non-descending order of the apples (x <= y <= z)\n    # We need to count the solution for non-negative integers\n    solutions = solve(Eq(x + y + z, 6))\n    \n    # Count the number of non-negative solutions having x <= y <= z (non-descending order)\n    # The problem is equivalent to distributing 'r' identical objects into 'n' distinct boxes, which is given by binomial coefficient (r + n - 1, n - 1)\n    # Here r = 6 (the number of apples) and n = 3 (the number of baskets)\n    # We use the formula (n + r - 1) choose (r) for identical objects into n distinct boxes,\n    # which simplify to (6 + 3 - 1) choose (6) = 8 choose 6 for our problem\n    count = math.comb(6 + 3 - 1, 6)\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    pieces = total_length // cut_length\n    leftover = total_length % cut_length\n\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3 / 100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    # Each team plays with every other team once, so it's a combination problem\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    ans = sum(n for n in range(1, 2018) if 2018 % n == 11)\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    initial_workers = 1\n    days = 9\n\n    total_skirts = sum([(initial_workers + day - 1) * skirts_per_day for day in range(1, days + 1)])\n\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 14 - 11\n    potential_terms = range(30, 61)\n    \n    valid_terms = [n for n in potential_terms if (n - first_term) % common_difference == 0]\n    \n    return valid_terms\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    # Initialize values\n    digit_count = 0\n    current_number = 1\n\n    # Continue to add numbers to the sequence until we reach the 2023th digit\n    while digit_count < 2023:\n        current_number_str = str(current_number)\n        digit_count += len(current_number_str)\n        if digit_count >= 2023:\n            # We found where the 2023rd digit will be within the current number\n            difference = digit_count - 2023\n            return int(current_number_str[len(current_number_str) - difference - 1])\n        # Increment the current number to be appended to the sequence\n        current_number += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    sweets = 138\n    for class_size in range(sweets, 4, -1):\n        if sweets % class_size == 0 and class_size <= sweets // 5:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare variables for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Given equations from the problem\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    banana_price = solutions[banana] * 5\n\n    return banana_price\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for T\n    T = symbols('T')\n\n    # Calculate the first part of the tax, which is 8% of $50,000\n    tax_on_first_50000 = 0.08 * 50000\n\n    # Define the equation based on the problem statement\n    # Total tax paid is $15,000\n    # tax_on_first_50000 + (150000 - 50000) * (0.08 + T / 100) = 15000\n    equation = Eq(tax_on_first_50000 + (150000 - 50000) * (0.08 + T / 100), 15000)\n\n    # Solve for T\n    result = solve(equation, T)\n\n    return result[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    for correct in range(25):\n        incorrect = 24 - correct\n        score = correct * 4 - incorrect * 2\n        if score == 66:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return int(solutions[rachel] + solutions[alice])\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    min_boys_per_day = total_boys // days_in_january\n    if total_boys % days_in_january != 0:\n        min_boys_per_day += 1\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Initialize count to zero\n    count = 0\n    \n    # 100s place can be either 2 or 3 (2 possibilities)\n    # 10s place can be any of the three digits (3 possibilities)\n    # 1s place can be any of the remaining two digits (2 possibilities)\n    \n    # Calculate the number of different three-digit numbers\n    count = 2 * 3 * 2\n    \n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces = 31\n\n    total_length = first_car_length + (other_cars_length * number_of_other_cars) + (space_between_cars * total_spaces)\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given values in the sequence\n    seventh_value = 105\n    eighth_value = 120\n    ninth_value = 135\n    \n    # The sequence is an arithmetic sequence with a common difference\n    # The common difference can be calculated as eighth_value - seventh_value or ninth_value - eighth_value\n    common_difference = eighth_value - seventh_value\n    \n    # Calculate the first term using the 7th term and its position (n=7)\n    first_term = seventh_value - (7 - 1) * common_difference\n    \n    # Calculate the 100th term using the formula: nth_term = first_term + (n - 1) * common_difference\n    nth_value = first_term + (100 - 1) * common_difference\n    \n    return nth_value\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_to_Helen = 23\n    chocolates_left = total_chocolates - chocolates_given_to_Helen\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    number_cards = ['0', '3', '5', '8']\n    \n    count = 0\n    for perm in permutations(number_cards):\n        if perm[0] != '0' and ''.join(perm) > '5000':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') == (perm.index('B') + perm.index('C')) // 2 and \\\n           abs(perm.index('D') - perm.index('E')) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Sarah received 12 sweets and her share is in the ratio of 3\n    sarah_share = 12\n    ratio_sarah = 3\n\n    # Total ratio = 2 (Sue) + 3 (Sarah) + 5 (Ian) = 10\n    total_ratio = 2 + 3 + 5\n\n    # Calculate the total number of sweets\n    total_sweets = (sarah_share * total_ratio) / ratio_sarah\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_cost_biscuits = 7 * 73    # Total cost in pence\n    total_cost_cakes = 9 * 113      # Total cost in pence (converted from £1.13 to 113p)\n    total_cost = total_cost_biscuits + total_cost_cakes  # Total cost in pence\n    total_cost_in_pounds = total_cost / 100  # Convert pence to pounds\n\n    change = 20 - total_cost_in_pounds  # Change from £20 note\n\n    return round(change, 2)  # Round to 2 decimal places\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    total_petrol = 27 + 25 + 30\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    return tops * bottoms\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter at first\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_to_peter = sam * 0.20\n    new_sam = sam - sam_to_peter\n    new_peter = peter + sam_to_peter\n\n    # Peter gave 25% of his stickers back to Sam\n    peter_to_sam = new_peter * 0.25\n    final_sam = new_sam + peter_to_sam\n    final_peter = new_peter - peter_to_sam\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(final_sam, final_peter + 96)\n\n    # Solve equations for initial values of Peter and Sam's stickers\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Benson spent 20 minutes on lunch\n    before_lunch = lunch_finished_time - timedelta(minutes=20)\n    \n    # Benson watched television for 20 minutes before lunch\n    after_television = before_lunch - timedelta(minutes=20)\n    \n    # Benson played for 10 minutes after reaching home\n    reached_home = after_television - timedelta(minutes=10)\n\n    return reached_home.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40', '%H:%M')\n    duration = timedelta(hours=2, minutes=40)\n    leaving_time = arrival_time + duration\n    return leaving_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '2017'\n    # Number of 3-digit combinations\n    three_digit_numbers = set(permutations(digits, 3)) - set(permutations('017', 3))\n    # Number of 4-digit combinations\n    four_digit_numbers = set(permutations(digits, 4)) - set(permutations('017', 4))\n    return len(three_digit_numbers) + len(four_digit_numbers)\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    \n    return solve(equation, x)[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    return 6.5 / 0.5\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def count_nines_in_page(page):\n    return str(page).count('9')\n\ndef solution():\n    pages = 0\n    count_nines = 0\n    while count_nines < 181:\n        pages += 1\n        count_nines += count_nines_in_page(pages)\n    return pages - 1  # Subtract one because the while loop exits after exceeding 181\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    remaining_crystals = 35 + 14 - 20  # Reverse operations after mining in Singapore and selling to Cherlyn\n    # Let x be the initial number of crystals\n    # x - (10 + x/2) = remaining_crystals\n    x = symbols('x')\n    equation = Eq(x - (10 + x/2), remaining_crystals)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_per_pattern = 2\n    patterns = 14 // grey_per_pattern\n    total_rabbits = patterns * (1 + 2 + 2)\n    if 14 % grey_per_pattern != 0:\n        total_rabbits += 1 + 2 + 2\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    all_possible_numbers = set(int(''.join(map(str, perm))) for perm in permutations(digits, 3) if perm[0] != 0)\n    return max(all_possible_numbers) - min(all_possible_numbers)\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "from math import gcd\n\ndef solution():\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    gcf_AB = gcd(students_A, students_B)\n    gcf_ABC = gcd(gcf_AB, students_C)\n\n    return gcf_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 1, 2, 3, 4\n    perms = permutations('1234')\n\n    count = 0\n    for perm in perms:\n        # Convert the tuple to a string\n        num_str = ''.join(perm)\n        # Check if the last digit is even\n        if int(num_str[-1]) % 2 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    n = 180\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    count = sum(1 for factor in factors if factor % 9 == 0)\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must also be divisible by 9\n    # Let's find the sum of the given digits first\n    digits_sum = 2 + 6 + 5 + 3 + 9\n    \n    # Now we need to find 'a' such that the total sum is a multiple of 9\n    for a in range(10):\n        if (digits_sum + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    initial_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n    return final_amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    budget_pence = 200  # Convert £2 to pence\n    single_price = 12\n    triple_price = 30\n\n    max_triples = budget_pence // triple_price\n    remaining_budget = budget_pence % triple_price\n    \n    additional_sweets = remaining_budget // single_price\n    \n    total_sweets = max_triples * 3 + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    # Let's denote May's current age as \"m\", which is 7 years old.\n    m = 7\n    # In three years, May will be 10 years old, and the sum of the ages of Kenny's younger brother and Kenny will be 3 times May's age at that time.\n    # Let's denote the current age of Kenny's younger brother as \"kb\".\n    # Kenny is 2 years older than his younger brother, making Kenny's current age \"kb + 2\".\n    # After 3 years, the sum of Kenny's and his brother's age will be 3 * 10\n\n    # Creating the equation (kb + 3) + (kb + 2 + 3) = 3 * (m + 3)\n    # Simplifying the equation: 2kb + 8 = 30\n    # Solving for kb: 2kb = 22\n    # Therefore, kb's current age is 22 / 2 = 11.\n    kb = 22 / 2\n\n    # Now we find the difference between Kenny's current age and May's current age.\n    # Kenny's current age is kb + 2, which means Kenny's age is 11 + 2 = 13.\n    # May is currently 7 years old.\n    # The difference in age between Kenny and May is 13 - 7.\n\n    difference = (kb + 2) - m\n    return difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since each box must contain at least 1 ball, we will first distribute one ball to each box.\n    # This leaves us with 10 - 7 = 3 balls to distribute freely among the 7 boxes.\n    remaining_balls = 10 - 7\n    \n    # The problem now is equivalent to finding the number of ways to distribute 3 identical balls\n    # into 7 different boxes, which can be done using combinations with repetition.\n    # We use the formula for combinations with repetition: C(n + r - 1, r), \n    # where n is the number of types to choose from, and r is the number we are choosing.\n    # In this case, n = 7 (boxes) and r = 3 (remaining balls).\n    \n    # The number of ways to put the remaining balls into boxes is C(7 + 3 - 1, 3) = C(9, 3).\n    ans = comb(9, 3)\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    total_candies = 10\n\n    # Strategy:\n    # Felix should aim to leave a multiple of 3 candies after his turn.\n    # So if John eats 1 candy, Felix should eat 2 candies, and if John eats 2 candies,\n    # Felix should eat 1 candy. This way, Felix will always leave a multiple of 3 candies.\n\n    # To ensure victory, Felix should go first and eat 1 candy. Then there will be 9 candies left,\n    # a multiple of 3, which means no matter what John does, Felix can continue to leave a multiple\n    # of 3 after his turns.\n\n    # Felix's turn: 1 candy -> 9 candies left\n    # John's turn: 1 or 2 candies\n    # Felix's turn: 2 or 1 candies -> 6 candies left\n    # John's turn: 1 or 2 candies\n    # Felix's turn: 2 or 1 candies -> 3 candies left\n    # John's turn: 1 or 2 candies\n    # Felix's turn: 2 or 1 candies -> Felix wins with 0 candies left\n\n    # Felix should go first.\n    felix_should_start = True\n    return felix_should_start\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # We are looking for a number that has a remainder of 1 when divided by 5\n    # and is 4 short when trying to fill it with 3-litre pails.\n    # Let x be the number of litres needed to fill the tank.\n    for x in range(1, 1000): # We are assuming the tank is not extremely large\n        if (x - 4) % 5 == 0 and (x + (4 * 3)) % 3 == 0:\n            return x\n    return None\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes)\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        underline_count = 0\n        if i % 2 == 0:\n            underline_count += 1\n        if i % 3 == 0:\n            underline_count += 1\n        if i % 4 == 0:\n            underline_count += 1\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count, pages = 0, 0\n    while count < 28:\n        pages += 1\n        count += str(pages).count('3')\n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    brother_money = sum(coins) / 2  # Zoey has twice as much as her brother\n    lost_coin = None\n    for coin in coins:\n        if sum(coins) - coin == 2 * brother_money:\n            lost_coin = coin\n            break\n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls = comb(8, 4)\n    boys = comb(12, 3)\n    return girls * boys\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Variables for the sums of the 4 number groups\n    sum_36 = 36 * 4\n    sum_38 = 38 * 4\n    sum_39 = 39 * 4\n    sum_45 = 45 * 4\n    sum_49 = 49 * 4\n    # Find the sum of all 5 numbers\n    total_sum = sum_36 + sum_38 + sum_39 + sum_45 + sum_49\n    # The sum of the 4 groups taken at a time will count each number 4 times except the omitted one.\n    # Therefore, the total of the sums of 4 numbers will be 4 times the sum of all 5 numbers minus\n    # 4 times the omitted number, which gives us:\n    # total_sum - 5 * omitted_number = 4 * (sum of all numbers)\n    # so we can find the total sum of the 5 numbers by dividing total_sum by 5\n    sum_all_numbers = total_sum // 5\n    # To find the largest number, we can subtract the smallest sum from the total sum of 5 numbers\n    largest_number = sum_all_numbers - sum_36\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n    time_late = 4  # 4 minutes late\n\n    time_missed_first_bus = first_bus_time + time_late\n    wait_time_for_second_bus = second_bus_time - time_missed_first_bus\n\n    return wait_time_for_second_bus\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    total_students = 152\n    for boys in range(1, total_students):\n        girls = total_students - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    number_of_trees = (road_length // distance_between_trees) + 1\n    return number_of_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    num_lorries = -(-workers // capacity)  # Ceiling division\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days_avg = 20\n    next_four_days = next_four_days_avg * 4\n    last_two_days = 60\n    \n    total_pages = first_three_days + next_four_days + last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 4), x ≡ 3 (mod 5), and x ≡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Use the Chinese Remainder Theorem to find a solution\n    number = solve_congruence(*congruences)\n\n    # We need a positive three-digit number less than 200, so we subtract multiples of lcm(4, 5, 9) until we find one\n    lcm = 180  # Least common multiple of 4, 5, and 9\n    while number[0] >= 200:\n        number = (number[0] - lcm, number[1])\n\n    return number[0]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room, students_extra = 4, 6\n    room_extra, students = 1, 5\n\n    # Using the equations:\n    # total_students = rooms * room (number of people per room) + students_extra\n    # total_students = (rooms + room_extra) * students\n    # We can equate them to find the total number of students.\n\n    while True:\n        total_students = room * (room_extra + students) + students_extra\n        if total_students % students == students_extra:\n            return total_students\n        room_extra += 1\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    # Iterate through all possible distinct rolls for the three dice.\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                # Check if the dice are distinct and sum up to 12.\n                if die1 != die2 and die2 != die3 and die1 != die3 and die1 + die2 + die3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age_now = 70\n    grandsons_ages_now = [6, 12, 18]\n    sum_grandsons_ages_now = sum(grandsons_ages_now)\n\n    # Variable representing the number of years in the future when the condition is met\n    years_in_future = 0\n\n    while True:\n        # Increment each year to see if the sum of their future ages equals Bill's age\n        years_in_future += 1\n        future_bill_age = bill_age_now + years_in_future\n        future_grandsons_ages = [age + years_in_future for age in grandsons_ages_now]\n        sum_future_grandsons_ages = sum(future_grandsons_ages)\n\n        if future_bill_age == sum_future_grandsons_ages:\n            break\n\n    return future_bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n    \n    # Convert sugar weight to grams and add all the weights\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_remaining = 6 * 10\n    removed_number = total_sum_initial - total_sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_still_at_party = total_people - people_left\n\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    \n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n    \n    lcm_interval = lcm(interval_aytown, interval_beeville, interval_ceeford)\n    \n    hours, minutes = divmod(lcm_interval, 60)\n    next_time_hour = 10 + hours\n    next_time_minute = minutes\n    \n    # Adjust for the case when minutes are 60 or more\n    if next_time_minute >= 60:\n        next_time_hour += 1\n        next_time_minute -= 60\n    \n    # Format to 24-hour time format\n    return \"{:02d}:{:02d}\".format(next_time_hour, next_time_minute)\n    \nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    # 5x + 1 = 16\n    # Subtract 1 from both sides\n    # 5x = 15\n    # Divide both sides by 5\n    # x = 3\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_no_answer_mark = -2\n    total_marks = 79\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_no_answers = total_questions - correct_answers\n        marks = correct_answers * correct_mark + wrong_no_answers * wrong_no_answer_mark\n        if marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    common_factor = 3999 * 2014\n    value = (common_factor * (1 + 0.2014) + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Using Inclusion-Exclusion Principle for three sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # Since we want the least possible number of students who play all three sports, we maximize the intersections of two sports:\n    # To maximize |A ∩ B ∩ C|, we minimize |A ∪ B ∪ C|, which is the total_students in class.\n    # |A ∩ B| + |A ∩ C| + |B ∩ C| - |A ∩ B ∩ C| = (|A| + |B| + |C|) - |A ∪ B ∪ C|\n    # |A ∩ B ∩ C| = (|A| + |B| + |C|) - |A ∪ B ∪ C| - (|A ∩ B| + |A ∩ C| + |B ∩ C|)\n    # Here, we will assume that the intersections of two sets are equal to the smallest size group (since we cannot have more people in an intersection than the total number in that group).\n\n    # To maximize intersections, let's assume that |A ∩ B| = |A ∩ C| = |B ∩ C| = min(swimmers, cyclists, table_tennis_players)\n    # Since we cannot have more than 30 swimmers, let's assume we have 30 in each intersection.\n    min_intersection_two = min(swimmers, cyclists, table_tennis_players)\n\n    # Now calculate the number of students that play all three sports.\n    all_three = swimmers + cyclists + table_tennis_players - 2 * min_intersection_two - total_students\n\n    return all_three\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_taken = 30  # time in seconds\n    length_of_train = 360  # length in meters\n  \n    # Speed = distance / time\n    speed_of_train = length_of_train / time_taken  # speed in meters per second\n  \n    # Convert speed from m/s to km/h: Multiply by 3.6 (1 m/s = 3.6 km/h)\n    speed_of_train_kmh = speed_of_train * 3.6\n  \n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    accumulated_distance = 0\n    day_count = 0\n\n    while accumulated_distance < total_distance:\n        day_count += 1\n        accumulated_distance += day_distance\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Draw 1 marble from each color, except the one with the fewest.\n    # There are 3 red marbles and they are the fewest, so we skip them.\n    marbles = 12 + 9 + 8  # Red, Blue and Yellow\n    # Now we need to draw at least 1 red to ensure the fourth color.\n    # Since we have already drawn the other colors, 1 red is enough.\n    marbles += 1\n    return marbles\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie can choose from any one of the types of restaurants\n    # The total choices Eddie has is the sum of all the individual choices of restaurants\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    # Applying the law of addition for choices\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # We use the fact that numbers directly opposite to each other in the circle\n    # differ by half the number of people in the game.\n    # If 10 is opposite to 24, the difference is 24 - 10 = 14,\n    # which is half the number of people.\n    num_people = 2 * (24 - 10)\n    return num_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percentage = 20\n    books_stationery = (books_stationery_percentage / 100) * pocket_money\n    transport = (pocket_money - books_stationery) / (1 + 3 + 1)  # 1 part transport, 3 parts food, 1 part savings\n    food = 3 * transport\n    savings = food - 6\n    savings_percentage = (savings / pocket_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    import math\n    lcm = (24 * 64) // math.gcd(24, 64)\n    return lcm\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(10, 100) if 75 % i == 0]\n    for i in factors_of_75:\n        if i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_answer = 50\n    \n    correct_subtrahend = 14\n    correct_minuend = incorrect_subtrahend + incorrect_answer\n\n    correct_difference = correct_minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([((-1) ** (i // 2)) * (40 - i) for i in range(0, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_apples + sisters_apples_each * sisters_count\n    initial_apples = total_apples_eaten + apples_left\n    \n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    \n    # Count numbers in the range: 4000-4999\n    total_count += 5 * 4 * 3  # First digit fixed to 4, then choose from the remaining 5, 4, and 3.\n    \n    # Count numbers in the range: 3300-3399\n    total_count += 1 * 4 * 3  # First two digits fixed to 33, then choose from the remaining 4 and 3 for the next two positions.\n    \n    # Count numbers in the range: 3400-3499, 3500-3599, 3600-3699\n    total_count += 3 * 4 * 3 * 2  # First digit is 3, second digit can be 4,5,6; then choose from the remaining 4, 3, 2.\n\n    # Count numbers in the range: 5000-5099\n    total_count += 1 * 4 * 3  # First digit fixed to 5, second digit cannot be 6, choose from the remaining 4 and 3 for the next two positions.\n    \n    # Count numbers in the range: 5100-5120 - Only 5112, 5113, 5114 and 5116 are valid.\n    total_count += 4  # 5112, 5113, 5114, 5116\n\n    return total_count\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = (amount / principal) ** (1 / years) - 1\n\n    return round(rate, 4)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(31):\n        if n * n + n + 31 == (n + 1) * (n + 1):\n            return (n + 1) ** 2\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    result = 56 / 21\n    return result\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n    \n    ans = (a * b) - (c * d)\n    \n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80  # 1 hour and 20 minutes is 80 minutes\n    num_pictures = total_minutes / minutes_per_picture\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n\n    return minutes * seconds_per_minute\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    annual_interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    children = 5  # excluding Ann\n    # Each of the other children gets at least one apple\n    min_apples_for_others = 1\n    # Calculate how many apples Ann can get at maximum\n    max_apples_for_Ann = total_apples - (min_apples_for_others * children)\n\n    return max_apples_for_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combining shirts with pants and shoes\n    comb_shirt_pants_shoes = shirts * pants * shoes\n\n    # Combining dresses with shoes or heels\n    comb_dresses_shoes_or_heels = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = comb_shirt_pants_shoes + comb_dresses_shoes_or_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Given: A + B = 13\n    equation1 = Eq(A + B, 13)\n    # Given: A + C = 25\n    equation2 = Eq(A + C, 25)\n    # Given: C = 3 * B\n    equation3 = Eq(C, 3 * B)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, teddy = symbols('book teddy')\n\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_g = 9 * 1000 + 5  # Convert total mass to grams\n    soil_mass_g = 4 * 1000 + 50  # Convert mass of soil to grams\n    sand_mass_g = total_mass_g - soil_mass_g  # Calculate mass of sand in grams\n    # Calculate the difference in mass between soil and sand\n    difference_g = abs(soil_mass_g - sand_mass_g)\n    return difference_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons James originally has\n    # Then, Nina has (22 - x) buttons originally\n    # When Nina gives 4 buttons to James, they both have the same number of buttons\n    # So James will have x + 4 buttons and Nina will have (22 - x) - 4 buttons\n    # We set up the equation for when they have the same number of buttons\n    # x + 4 = (22 - x) - 4\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 4, (22 - x) - 4)\n    nina_original = solve(equation, x)[0]\n\n    return 22 - nina_original\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n\n    # Find the divisors of the number with prime factors 3 and 5 and 75 as HCF\n    # The number of divisors of a number is the product of (exponents+1) of its prime factors\n    # If M has 12 factors, and HCF is 75 (3^1 * 5^2), then M must be of form 3^a * 5^b with (a+1)(b+1) = 12\n    # We need to find values of a and b that satisfy the equation (a+1)(b+1) = 12 and a > 1, b > 2 (since 3^1 and 5^2 are already in HCF)\n\n    # possible divisors set for 12 -- (1, 12), (2, 6), (3, 4)\n    possible_exponents_M = [(0, 11), (1, 5), (2, 3)]\n    possible_exponents_N = [(0, 9), (1, 4), (2, 2)]  # for 10 -- (1, 10), (2, 5)\n\n    # Filter based on HCF having factors 3^1 and 5^2, removing exponents less than these\n    valid_exponents_M = [(a + 1, b + 2) for a, b in possible_exponents_M if a >= 1 and b >= 2]\n    valid_exponents_N = [(a + 1, b + 2) for a, b in possible_exponents_N if a >= 1 and b >= 2]\n\n    # Calculating M and N using the valid exponents\n    Ms = [3**a * 5**b for a, b in valid_exponents_M]\n    Ns = [3**a * 5**b for a, b in valid_exponents_N]\n\n    # Assuming both M and N cannot exceed their combinations of exponents, we have a unique sum\n    # If M or N could be higher, we would need to check all possible combinations\n    M = max(Ms)\n    N = max(Ns)\n\n    # Calculate the sum of M and N\n    return M + N\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    score_correct = 4\n    score_incorrect = -2\n    total_score = 29\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * score_correct + incorrect_answers * score_incorrect\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_sum = sum([int(x) for x in '12345'])\n    pattern_length = len('12345')\n    full_patterns = 52 // pattern_length\n    remaining_digits = 52 % pattern_length\n    \n    total_sum = pattern_sum * full_patterns + sum([int(x) for x in '12345'[:remaining_digits]])\n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n\n    kites_made = total_paper_available / paper_needed_per_kite\n\n    return int(kites_made)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    tree_count = 79\n    road_length = 320\n\n    distance_between_each_tree = road_length / (tree_count + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    num_short_rods = total_length / short_rod_length\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_laptop_cost = 2800 / 30\n    \n    savings_per_laptop = single_laptop_cost - deal_laptop_cost\n    total_savings = savings_per_laptop * 20\n    \n    return total_savings\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    fish_per_rabbit = 10 / 4\n    rabbits_per_pack_wheat = 5 / 6\n\n    # to find out fish per pack of wheat, multiply the two ratios\n    fish_per_pack_wheat = fish_per_rabbit * rabbits_per_pack_wheat\n\n    # find out how many fish for 12 packs of wheat\n    fish_for_12_packs_wheat = fish_per_pack_wheat * 12\n\n    return fish_for_12_packs_wheat\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percent = 35\n    discount_amount = (discount_percent / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    penguins = symbols('penguins')\n    \n    # 3 fish for each penguin leaves 5 fish\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n    \n    # Solve the equation\n    number_of_penguins = solve(equation1, penguins)\n    \n    return number_of_penguins[0]\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial as fact\n\ndef solution():\n    # Initial calculation for 3 dancing performances will have to be surrounded by 4 singing performances\n    # as D S D S D and we still have 2 additional singing performances left\n    # This initial setup leads to 5 potential positions for the remaining singing performances to be inserted,\n    # accounting for the combination of the remaining 2 singing performances in these positions.\n    initial_dancing_positions = 3\n    remaining_singing_performances = 6 - initial_dancing_positions\n\n    # Number of ways to arrange 5 initial positions and 2 singing performances left\n    positions_for_remaining_singing = initial_dancing_positions + 2\n    ways_to_place_singing = fact(positions_for_remaining_singing) // (fact(remaining_singing_performances) \n                                                                     * fact(positions_for_remaining_singing - remaining_singing_performances))\n\n    # After placing the 2 additional singing performances, we will have 5 dancing positions\n    total_positions = positions_for_remaining_singing + 1\n    ways_to_arrange_dancing_performances = fact(4) // (fact(initial_dancing_positions) \n                                                      * fact(4 - initial_dancing_positions))\n    \n    # Total combinations is the product of the ways to place singing and arrange dancing\n    total_combinations = ways_to_place_singing * ways_to_arrange_dancing_performances\n\n    return total_combinations\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    mistaken_change = -26\n    correct_change = 26\n\n    # She should have added 26, so to find the number before any operation:\n    # Subtract the mistaken subtraction from the incorrect result\n    original_number = incorrect_result - mistaken_change\n\n    # Now add the correct value to the original number\n    correct_result = original_number + correct_change\n\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n    \n    kelly_height = matthew_height * ratio_kelly / ratio_matthew\n    \n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 80 * 0.35\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # The max score for one team at half time would be the max final score of the game\n    for team1_ht in range(4):  # team1's possible half time scores (0-3)\n        for team2_ht in range(3):  # team2's possible half time scores (0-2)\n            # After half time, team 1 can score 0 to (3 - team1_ht) more goals,\n            # and team 2 can score 0 to (2 - team2_ht) more goals.\n            for team1_second_half in range(4 - team1_ht):\n                for team2_second_half in range(3 - team2_ht):\n                    # If the final score adds up to 3-2, this half time score is possible.\n                    if (team1_ht + team1_second_half == 3) and (team2_ht + team2_second_half == 2):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    total_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = total_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # Given that a and b are digits, a cannot be 0\n        for b in range(10):  # b can be from 0 to 9\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of girls be g and the total number of boys be b\n    g, b = symbols('g b')\n    \n    # According to the problem, 3/8 of the girls can swim, and 3/5 of the boys can swim.\n    # The number of girls and boys who cannot swim are equal. \n    # Total pupils who cannot swim = 20\n    # (5/8)g = (2/5)b and (5/8)g + (2/5)b = 20\n    \n    equation1 = Eq((5/8)*g, (2/5)*b)\n    equation2 = Eq((5/8)*g + (2/5)*b, 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Total pupils in the class is the sum of girls and boys\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    total_cookies = 1002\n    # Let's denote the number of cookies Emma baked as 'e'.\n    # According to the problem, Clara baked five times as many cookies as Emma did.\n    # So, the number of cookies Clara baked is '5 * e'.\n    # Together, they baked 1002 cookies, so we can write the equation:\n    # e + 5 * e = 1002\n    # To find the number of cookies Emma baked, we solve for 'e':\n    e = total_cookies / 6\n    return e\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # When the basket is half full, the weight of the mangoes is half_full_weight minus the weight of the empty basket.\n    # Therefore, the weight of the full mangoes is two times the weight of the half full mangoes.\n    # Subtracting the full weight of the mangoes from the full basket weight gives the weight of the empty basket.\n    \n    mangoes_weight_half_full = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = full_weight - (2 * mangoes_weight_half_full)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 0.85 * 400\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_part = 16\n    pip_part = (3 / 5) * bud_part / (2 / 5)\n\n    total_sweets = pip_part + bud_part\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Let's assume that the number of desks is `d` and the number of chairs per desk is `c`\n    # Mike's position from any direction is the 2nd, so both `d - 1` and `c - 1` must be a multiple of 2\n    # This means that both d and c are odd numbers.\n    # Also, since Mike's position is the 2nd from any direction, we can say that the classroom cannot be a square\n    # (otherwise Mike's position would either be at a corner or in the middle of a side, not the 2nd)\n    # We need to find all pairs of odd numbers where their product is not a square.\n\n    max_limit = 1000  # A reasonable upper limit to avoid infinite loops\n    students_count = set()  # To avoid counting the same classroom size more than once\n\n    for d in range(3, max_limit, 2):\n        for c in range(3, max_limit, 2):\n            if d != c:  # ensuring the class is a rectangle, not a square\n                students = d * c\n                if students not in students_count:\n                    # We have a classroom size that we haven't seen before\n                    students_count.add(students)\n    \n    # Now we sum up all the unique classroom sizes to get the total number of students\n    total_students = sum(students_count)\n    return total_students\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    ans = (result / 40) * 100\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_wanted = 5\n    \n    cost_per_cup = cost_for_3_cups / number_of_cups_initially\n    total_cost_for_wanted_cups = cost_per_cup * number_of_cups_wanted\n    \n    return total_cost_for_wanted_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    \n    # Calculate how many rabbits are accommodated in big mushroom houses\n    rabbits_in_big_houses = big_mushroom_houses * 4\n    \n    # Subtract the rabbits in big houses from the total to find out how many are left for small houses\n    rabbits_left_for_small_houses = total_rabbits - rabbits_in_big_houses\n    \n    # Divide the remaining rabbits by the number of small mushroom houses to find out how many can each accommodate\n    rabbits_per_small_house = rabbits_left_for_small_houses / small_mushroom_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days_worked = 7  # Monday to Sunday\n\n    total_earnings = average_daily_earnings * number_of_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum(\n        (i + 1) ** 2 - i ** 2 if (i % 2) == 1 else i ** 2 - (i + 1) ** 2\n        for i in range(1, 8)\n    )\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        elif steps == 2:\n            return 2\n        elif steps == 3:\n            return 4\n        else:\n            return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    ans = count_ways(6)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    months = 5 # From March to July is 5 months\n\n    total_pizzas = average_pizzas_per_month * months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    for i in range(1, sum_of_numbers + 1):\n        if 2 * 3 * i == sum_of_numbers:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    ship_speed = 33\n    current_speed = 3\n    upstream_speed = ship_speed - current_speed\n    distance = 150\n\n    time = distance / upstream_speed\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Make sure the answer is less than 100\n    while ans >= 100:\n        ans -= 3 * 4 * 5\n\n    return ans\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n    ans = (last_multiple - first_multiple) // 4 + 1\n    return ans\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    halfway = (3.5 + 6.9) / 2\n    return halfway\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1)**((i - 1)// 4) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    result = 80 * 125 * 63\n    return result\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit in 999^n is the same as the ones digit in 9^n\n    # We are interested in the cycle of ones digits in powers of 9\n    # 9^1 -> ones digit is 9\n    # 9^2 -> ones digit is 1\n    # 9^3 -> ones digit is 9\n    # 9^4 -> ones digit is 1\n    # Here, we notice that the ones digit repeats every 2 powers of 9 (cycle length is 2)\n    # To find the ones digit of 9^99, we can find the remainder when 99 is divided by 2\n\n    power = 99\n    cycle_length = 2\n    position_in_cycle = power % cycle_length  # Remainder of 99 divided by 2\n\n    # If it's the first position in the cycle, the ones digit is 9; otherwise, it's 1\n    if position_in_cycle == 1:\n        return 9\n    else:\n        return 1\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    current_age = symbols('current_age')\n    future_age = current_age + 6\n\n    equation = Eq(future_age, 3 * current_age)\n    solved_age = solve(equation, current_age)\n\n    age_two_years_later = solved_age[0] + 2\n\n    return age_two_years_later\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    actual_time, scheduled_time = symbols('actual_time scheduled_time')\n\n    # Set up the equation: actual_time = (11/12) * scheduled_time\n    equation1 = Eq(actual_time, (11/12) * scheduled_time)\n\n    # The train is 5 minutes late, but it was also 15 minutes late from start\n    # So, the actual time taken is scheduled_time - 15 (for late start) + 5 (for late arrival)\n    equation2 = Eq(actual_time, scheduled_time - 15 + 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (actual_time, scheduled_time))\n\n    return solutions[scheduled_time]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number_product = total_product - known_product\n    \n    missing_number = missing_number_product / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]  # Values of coins in pence\n    fare = 44  # Fare in pence\n    minimum_coins = fare  # Maximum number of coins Susan could receive (44 1p coins)\n    \n    for coin in coin_values:\n        if coin > fare:  # Skip coins that are too large to be given as change\n            continue\n        # Coins Susan could use to pay, chosen to minimize the number needed\n        susan_coins = (fare // coin) if (fare // coin) > 0 else 1\n        # Change the driver has to give\n        change = (susan_coins * coin) - fare\n        # Coins for change\n        driver_coins = 0\n        for c in coin_values:\n            driver_coins += change // c\n            change %= c\n        # Update the minimum coins if a smaller number is found\n        minimum_coins = min(minimum_coins, susan_coins + driver_coins)\n    \n    return minimum_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people  # Integer division to find how many sweets each person gets without remainder\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = 1\n    distance_per_day = day_distance - night_distance\n    day = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # We will calculate the worst-case scenario for Jane to draw 4 different colored marbles.\n    # This means she picks the maximum number of marbles of one color without getting all 4 colors,\n    # plus 1 to make sure the next marble will be of a different color.\n\n    # Get the maximum number of marbles per color not including one color (3 colors)\n    # Red = 4, Green = 7, Blue = 6, Orange = 2\n    # She could draw all red, all blue, all green, and be missing orange.\n    # So we need to ensure she gets at least one orange by drawing one more marble.\n    # The worst-case scenario is taking all but one color (the color with the least marbles),\n    # which means taking all reds, greens, and blues.\n    \n    max_red = 4\n    max_green = 7\n    max_blue = 6\n    # We don't include orange because we want to make sure she picks an orange\n\n    # She needs to pick one more after picking all the other colors to ensure getting the last color\n    marbles_to_draw = max_red + max_green + max_blue + 1  # +1 for at least one orange marble\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Since each child has to get at least one book, we distribute one book to each child first.\n    # This leaves us with 19 - 4 = 15 books to distribute.\n    remaining_books = 19 - 4\n    \n    # We are going to use stars and bars method to calculate the combinations.\n    # number of bars (dividers) is one less than the number of kids\n    bars = 4 - 1\n    \n    # total positions to arrange = remaining_books + bars\n    total_positions = remaining_books + bars\n    \n    # We need to choose positions for the bars (or dividers) out of the total positions\n    # which is the same as C(total_positions, bars)\n    ans = factorial(total_positions) // (factorial(bars) * factorial(total_positions - bars))\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let m be the number of motorbikes, t be the number of tricycles, v be the number of vans.\n    # Every motorbike has 2 wheels, tricycle has 3 wheels and van has 4 wheels.\n    # Based on the problem, we can write the following equations:\n    # 2*m + 3*t + 4*v = 101 (total number of wheels)\n    # 2*m + 4*v = 3*t + 35 (35 more motorbike and van wheels than tricycle wheels)\n    # 3*t + 4*v = 2*m + 13 (13 more tricycle and van wheels than motorbike wheels)\n    \n    # Rearranging the second equation gives us an expression for tricycles in terms of motorbikes and vans:\n    # 3*t = 2*m + 4*v - 35\n    # t = (2*m + 4*v - 35) / 3\n    \n    # Rearranging the third equation gives us an expression for motorbikes in terms of tricycles and vans:\n    # 2*m = 3*t + 4*v - 13\n    # m = (3*t + 4*v - 13) / 2\n    \n    # Plug t from the second equation into the first equation to get an equation with only m and v\n    for v in range(101):\n        for m in range(101):\n            # Calculate the number of tricycles from the number of motorbikes and vans\n            t = (2 * m + 4 * v - 35) / 3\n            # We check if t is a whole number as we cannot have a fraction of a tricycle\n            if t.is_integer() and t >= 0:\n                # Check if the total number of wheels match\n                if 2 * m + 3 * t + 4 * v == 101:\n                    return m - v  # We want to find the difference between number of motorbikes and vans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for amounts of water in each tank\n    tank_a, tank_b, tank_c, tank_d = symbols('tank_a tank_b tank_c tank_d')\n\n    # Given that tank D contains 41 L of water\n    tank_d = 41  # Tank D is given to contain 41 L\n\n    # Equation 1: Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(tank_a, 5 * tank_b)\n\n    # Equation 2: Tank B contains 5 more litres of water than Tank C\n    equation2 = Eq(tank_b, tank_c + 5)\n\n    # Equation 3: The total amount in Tank C and Tank D is equal to Tank A\n    equation3 = Eq(tank_c + tank_d, tank_a)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (tank_a, tank_b, tank_c))\n\n    # Extract the amount of water in Tank B\n    water_in_tank_b = solutions[tank_b]\n\n    return water_in_tank_b\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2 * i + 2)**2 - (2 * i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since we can't leave any pencil case empty, each must have at least 1 pen.\n    # There are 6 identical pens and 3 pencil cases, we can solve the problem \n    # by using stars and bars method which is basically a way to distribute \n    # n identical items into k bins. The formula is (n - 1)C(k - 1).\n    # After placing 1 pen in each case, we have 3 pens left to distribute \n    # into 3 pencil cases, so we apply the formula (3 + 3 - 1)C(3 - 1) = 5C2\n\n    from math import comb\n\n    pens_left = 6 - 3  # pens left after giving 1 pen to each case\n    cases = 3\n\n    ways = comb(pens_left + cases - 1, cases - 1)\n    return ways\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    # Since Pip is directly in front of Bud, they will be counted just once together\n    Pip_and_Bud = 1 + 1  # Pip and Bud themselves\n    \n    total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    # We have a fixed year \"2014\", so we should only permute the month and day\n    # Year \"2014\" gives us two '1's and one '2'. We need to make sure that '0's and '2's are equal in our permutation\n    # Since we have one '2', we need one '0' and one more '1' to make '1's equal to '0's and '2's\n    \n    # Generate all permutations of '0', '1', and '2' along with two other digits for 'm' and 'd'\n    # where 'm' is from '01' to '12' and 'd' is from '01' to '31'\n    # Note: not all permutations will lead to valid dates\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Include '0' and one additional '1' and create permutations\n            possible_dates = permutations(f\"0{month:02d}{day:02d}\")\n            for date in possible_dates:\n                date_str = \"\".join(date)\n                # Check if year, month and day are valid; month is '01' to '12' and day is '01' to '31'\n                # Since permutations could start with a leading '0', int(date_str) is used to remove it\n                if (int(date_str[:4]) == 2014 and \n                    1 <= int(date_str[4:6]) <= 12 and \n                    1 <= int(date_str[6:8]) <= 31):\n                    # Check for equal number of '0's, '1's, and '2's in the date (including the fixed '2014')\n                    if (date_str[4:].count('0') == 1 and \n                        date_str[4:].count('1') == 2 and \n                        date_str[4:].count('2') == 1):\n                        count += 1\n    \n    return count // 6  # Divide by 6 because '0112' and '2014' are fixed and cannot be permuted\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers excluding p and q\n    numbers = [4, 5, 6, 9, 3, 9]\n    \n    # Calculate the total sum so far\n    sum_so_far = sum(numbers)\n    \n    # Since the average of the 8 numbers is 6, the total sum of the 8 numbers is 8 * 6\n    total_sum = 8 * 6\n    \n    # Calculate the sum of p and q\n    sum_p_q = total_sum - sum_so_far\n    \n    # Since p < q and the difference between the highest value and lowest value is 6\n    # q - p has to be less than or equal to 6.\n    # q has to be at least the maximum of the given numbers plus 1 to adhere to p < q\n    # We start checking from the smallest possible value of q\n    min_possible_q = max(numbers) + 1\n\n    for q in range(min_possible_q, sum_p_q):\n        p = sum_p_q - q\n        if (p < q) and (q - min(numbers) == 6 or max(numbers) - p == 6):\n            return q\n        \nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 298\n\n    term_index = ((nth_term - first_term) // common_difference) + 1\n\n    return term_index\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # According to the problem, let's set up the equation\n    football = 3 * x\n    basketball = 4 * x\n    both_sports = x\n    total_students = Eq(football + basketball - both_sports, 36)\n\n    # Solve the equation to find the number of students who like both sports\n    num_students_both_sports = solve(total_students, x)\n\n    return num_students_both_sports[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the remainders and moduli\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60\n    jacob_speed = 80\n    jacob_time_hours = 3\n    adam_time_extra_minutes = 30\n\n    # Convert extra minutes to hours\n    adam_time_extra_hours = adam_time_extra_minutes / 60\n\n    # Calculate total distance Adam travels (D_a = r_a * t_a)\n    adam_distance = adam_speed * (jacob_time_hours + adam_time_extra_hours)\n\n    # Calculate total distance Jacob travels (D_j = r_j * t_j)\n    jacob_distance = jacob_speed * jacob_time_hours\n\n    # Calculate total distance between their homes\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    term_number = 21\n\n    # Formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (term_number - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_mult(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n\n    result1 = custom_mult(1, 2)\n    result2 = custom_mult(result1, 3)\n    result3 = custom_mult(result2, 4)\n    result4 = custom_mult(result3, 5)\n\n    ans = int(result4)\n    return ans\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 252 and get the prime factors and their powers\n    prime_factors = factorint(252)\n    \n    # The number of factors of a number is the product of one plus each of the powers of its prime factors\n    ans = 1\n    for power in prime_factors.values():\n        ans *= power + 1\n\n    return ans\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Applying the Pigeonhole Principle\n    # To find the minimum number of cakes in the layer with the most cakes\n    # we divide the total number of cakes by the number of layers\n    # and take the ceiling of that number.\n    # Because if we distribute the cakes evenly across layers, there has to be at least one layer\n    # that has more cakes than the average.\n    most_cakes = (total_cakes + layers - 1) // layers\n    return most_cakes\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07  # 7% GST rate\n    paid_gst = 0.91  # the GST amount paid\n\n    cost_before_gst = paid_gst / gst_rate  # divide the GST amount by the GST rate to get the original cost\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # There are only two colors: blue and yellow\n    # To guarantee 2 marbles of the same color, use the Pigeonhole Principle\n    # By taking 3 marbles, it is guaranteed that at least 2 of them are of the same color\n    # Since if we took one of each color first, the third one must match one we've already taken\n    \n    # Therefore, Lucy needs to take at least 3 marbles from the bag\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg_1 = 2.49\n    weight_g_1 = 670\n    weight_kg_2 = 3\n    weight_g_2 = 80\n\n    total_weight_g = (weight_kg_1 * 1000) + weight_g_1 + (weight_kg_2 * 1000) + weight_g_2\n    \n    return int(total_weight_g)\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    least_common_multiple = lcm(ashley_time, ben_time, charlie_time)\n    total_seconds = least_common_multiple\n    \n    # Convert seconds to hours, minutes, and seconds\n    hours = total_seconds // 3600\n    minutes = (total_seconds % 3600) // 60\n    seconds = total_seconds % 60\n    \n    # Start time is 10:00 am\n    start_hour = 10\n    \n    # Add the hours to the start time\n    meeting_hour = start_hour + hours\n    meeting_minute = minutes\n    meeting_second = seconds\n    \n    # Adjust for any overflow\n    if meeting_minute >= 60:\n        meeting_hour += meeting_minute // 60\n        meeting_minute = meeting_minute % 60\n    \n    # Format the time to HH:MM:SS\n    meeting_time = f\"{meeting_hour:02d}:{meeting_minute:02d}:{meeting_second:02d}\"\n\n    return meeting_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # 1 hour = 60 minutes\n    cycling_fraction = 1/3\n    cycling_time = total_time_minutes * cycling_fraction\n    jogging_time = total_time_minutes - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18\n    next_term = 2 - difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Since the problem requires each child to get at least one apple and different numbers\n    # we must at least distribute to 1, 2, 3, 4, 5th child first, the sum of which is 1+2+3+4+5=15\n    total_apples = 30\n    min_apples_others = sum(range(1, 6))  # sum of the least number of apples given to 5 children\n    max_apples_6th = total_apples - min_apples_others  # remaining apples for the 6th child\n\n    return max_apples_6th\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_mpg = 72.8\n    distance = 273\n\n    sam_petrol_used = distance / sam_mpg\n    tom_additional_petrol = 6 + 3/4\n    tom_petrol_used = sam_petrol_used + tom_additional_petrol\n    tom_mpg = distance / tom_petrol_used\n\n    return tom_mpg\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee two chips of different colors, Bart would need to take out a number of chips equal to the sum of\n    # the two smallest quantities of chips plus one, as in the worst case he would take all chips of the\n    # most populous color and would need one more to ensure getting a different color. \n    red = 3\n    yellow = 4\n    brown = 5\n    \n    # Sorting the numbers of chips to find the two smallest quantities\n    # Technically unnecessary with fixed inputs, but provides correct logic\n    chips = sorted([red, yellow, brown])\n    \n    # Taking one more than the sum of the two smallest quantities guarantees a different color\n    min_chips = chips[0] + chips[1] + 1\n    return min_chips\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    ans = 3017 + 4962\n    return ans\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum((2*i + 1)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has two options for shirts and two options for skirts\n    # By the principle of multiplication, she can match them in 2 * 2 ways\n    num_ways = 2 * 2\n    return num_ways\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Given the first number is 1, and following numbers are 3 and 27 which seem like powers of 3.\n    # Let's check if this pattern holds by finding the pattern of exponents.\n    # 1 = 3^0, 3 = 3^1, 27 = 3^3, 81 = 3^4\n    # It looks like the sequence is missing 3^2, so let's calculate it.\n\n    missing_number = 3**2\n    return missing_number\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    result_decimal = num1 + num2\n    ans = ''\n    while result_decimal > 0:\n        ans = str(result_decimal % 7) + ans\n        result_decimal //= 7\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    # Use the Law of Addition\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given that 105, 120, and 135 are the 7th, 8th, and 9th terms\n    # We can derive the common difference of the arithmetic sequence\n    common_difference = 120 - 105  # This can also be derived as 135 - 120\n\n    # Knowing the common difference and the 7th term, we can find the first term\n    # a_n = a_1 + (n - 1) * d\n    # 105 = a_1 + (7 - 1) * 15\n    # a_1 = 105 - (6 * 15)\n    first_term = 105 - (6 * common_difference)\n\n    # Now we can find the 100th term using the formula: a_n = a_1 + (n - 1) * d\n    # a_100 = a_1 + (100 - 1) * 15\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # original ratio\n    eq1 = Eq(oranges / lemons, 3 / 5)\n\n    # new ratio after selling 48 oranges\n    eq2 = Eq((oranges - 48) / lemons, 1 / 2)\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    rabbits = 8\n    days = 5\n    total_carrots = carrots_per_rabbit_per_day * rabbits * days\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    combined_rate = horse_rate + cow_rate + sheep_rate\n\n    total_days = 22 / combined_rate\n\n    return total_days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5/8) * 160\n    return result\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n\n    # When the daughter reaches her mother's age, the age difference will remain constant\n    age_difference = mother_age_now - daughter_age_now\n\n    # When the mother is as old as the daughter is now, she will be 75\n    equation1 = Eq(mother_age_now + age_difference, 75)\n\n    # When the mother was as old as the daughter is now, the daughter was 3\n    equation2 = Eq(daughter_age_now - age_difference, 3)\n\n    solution = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solution[mother_age_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    ans = 146 * 37\n    return ans\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations of '001122' to represent two zeros, two ones, and two twos\n    for perm in permutations('001122', 6):\n        # Form the month and day strings\n        month_str = ''.join(perm[:2])\n        day_str = ''.join(perm[2:])\n        \n        # Convert to integers\n        month = int(month_str)\n        day = int(day_str)\n\n        # Check if the month is valid\n        if month not in range(1, 13):\n            continue\n\n        # Check if the day is valid for each month\n        if month == 2:\n            # 2014, not a leap year, February has at most 28 days\n            if day not in range(1, 29):\n                continue\n        elif month in [4, 6, 9, 11]:\n            # April, June, September, November have at most 30 days\n            if day not in range(1, 31):\n                continue\n        else:\n            # Other months have at most 31 days\n            if day not in range(1, 32):\n                continue\n\n        count += 1\n\n    # Divide by 2! (factorial) for each digit to remove duplicates from identical digits\n    ans = count // (2 * 2 * 2)\n    return ans\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To guarantee 3 red apples, Isabella would have to take out all non-red apples first.\n    total_non_red_apples = 11 + 7  # Number of green and yellow apples\n    \n    # Then she would need to take out 3 red apples\n    total_red_apples_needed = 3\n    \n    # Total apples needed to be taken out to ensure 3 red apples\n    total_apples_needed = total_non_red_apples + total_red_apples_needed\n    \n    return total_apples_needed\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_amount = 200\n    final_amount = 204\n    percentage_change = ((final_amount - initial_amount) / initial_amount) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed pupils\n    left_handed = total_pupils - right_handed\n\n    # Minimum number of girls who are right-handed\n    # If all the left-handed pupils were girls, then the remaining girls would be right-handed\n    min_right_handed_girls = max(girls - left_handed, 0)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    numbers = [20, -19, 18, -17, 16, -15, 14, -13]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80\n    saved = total_spent / (1 - discount)\n    return saved - total_spent\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    num_teams = 6\n    total_matches = num_teams * (num_teams - 1) // 2  # Combination of 6 teams taken 2 at a time\n    points_per_match = 2  # maximum points in a game (either 2 for win/lose or 1 for each in case of tie)\n\n    # Since there must be a result for each match, the total points awarded are equal to points_per_match\n    # multiplied by the total number of matches.\n    total_points = points_per_match * total_matches\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n    \n    buses_needed = -(-children // capacity)  # Ceiling division to round up\n\n    return buses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Jane needs to ensure she gets 4 different coloured marbles.\n    # In the worst case, she could draw all marbles of a single color first.\n    # We will take each color one by one and assume the worst-case scenario for each.\n\n    # If Jane draws all the red marbles first, that's 4 marbles. (+4)\n    # She could then draw all the green marbles to ensure she gets a different color. (+7)\n    # Next, she could draw all the blue marbles. (+6)\n    # At this point, she has 3 different colors. To ensure the fourth color, orange, she must draw one more marble. (+1)\n    # Total number of marbles Jane needs to draw to be sure to have all four colors is the sum of these.\n\n    marbles_needed = 4 + 7 + 6 + 1  # One additional marble for the fourth color\n    return marbles_needed\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Equation 1: Number of boys is 90 more than the number of girls\n    equation1 = Eq(boys, girls + 90)\n    \n    # Equation 2: The ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)\n    \n    # Equation 3: The number of boys who can swim is 120 less than the number of boys who cannot swim\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    \n    # Equation 4: Total number of pupils in the school\n    equation4 = Eq(girls + boys, 1690)\n    \n    # Equation 5: Definition of girls being divided into swimmers and non-swimmers\n    equation5 = Eq(girls, girls_swim + girls_not_swim)\n    \n    # Equation 6: Definition of boys being divided into swimmers and non-swimmers\n    equation6 = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Compute the total number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    # Iterate over possible prime values for a and b,\n    # where a and b are both less than or equal to 41\n    for a in range(2, 42):\n        if isprime(a):\n            # Since 3a + 7b = 41, we can isolate b and check if it's prime\n            b = (41 - 3 * a) / 7\n            # We only care about integer b values that are prime\n            if b.is_integer() and isprime(b):\n                ans = a + b\n                return int(ans)\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate cost per piece for each option\n    cost_per_piece_4pc = 7 / 4\n    cost_per_piece_6pc = 8.5 / 6\n\n    # Compare to find the better buy\n    better_buy = '4pc' if cost_per_piece_4pc < cost_per_piece_6pc else '6pc'\n\n    return better_buy\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count_of_twos = 0\n    count_of_fives = 0\n    n = 1\n\n    while min(count_of_twos, count_of_fives) < 28:\n        temp = n\n        while temp % 2 == 0:\n            count_of_twos += 1\n            temp //= 2\n        while temp % 5 == 0:\n            count_of_fives += 1\n            temp //= 5\n        n += 1\n\n    return n - 1\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet_amount = 1\n    win_amount = 10\n    possible_rolls = [(i, j) for i in range(1, 7) for j in range(1, 7)]\n    \n    # Calculate the number of outcomes where the sum is greater than 10\n    win_outcomes = len([1 for i, j in possible_rolls if i + j > 10])\n    \n    # The probability of winning\n    win_probability = win_outcomes / len(possible_rolls)\n    \n    # Expected earnings per game\n    expected_earnings_per_game = (win_probability * win_amount) - ((1 - win_probability) * bet_amount)\n    \n    # Expected loss is the negative of expected earnings\n    expected_loss_per_game = -expected_earnings_per_game\n    \n    # Total expected loss after 60 games\n    total_expected_loss = expected_loss_per_game * total_rolls\n    \n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n\n    phone_cost = 740\n    remaining_salary = salary - phone_cost\n    rent_cost = 0.75 * remaining_salary\n    \n    final_remaining = salary / 5\n    \n    equation = Eq(salary - phone_cost - rent_cost, final_remaining)\n    \n    salary_value = solve(equation, salary)\n    \n    return salary_value[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_of_basket = weight_with_two_apples - weight_of_three_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['2', '3', '4']\n    all_permutations = set(permutations(digits, 1)) | set(permutations(digits, 2)) | set(permutations(digits, 3))\n    ans = len(all_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    time = 231  # Start time in minutes since midnight (02:31 -> 2*60 + 31)\n    \n    while True:\n        time += 1\n        if time >= 1440:  # Exceeds the number of minutes in a day, reset time\n            time -= 1440\n        # Convert time back to hours and minutes\n        hours, minutes = divmod(time, 60)\n        # Create a set of digits currently shown on the clock\n        digits = set(str(hours).zfill(2) + str(minutes).zfill(2))\n        if set('0123').issubset(digits):\n            break\n            \n    # Calculate the difference from the starting time\n    return time - 231\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    # After class, drank 100ml and left 150ml\n    # So before drinking after class, there was 100ml + 150ml\n    before_class = 100 + 150\n\n    # He drank half of it before class\n    # So before class, he had 2 * before_class ml of water\n    original_amount = 2 * before_class\n\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    total_mushrooms = 40\n    # Let x be the number of mushrooms gathered in the second hour\n    # Then, x - 26 is the number of mushrooms gathered in the first hour\n    # x + (x - 26) = 40\n    # 2x - 26 = 40\n    # 2x = 40 + 26\n    # 2x = 66\n    # x = 66 / 2\n    x = (total_mushrooms + 26) / 2\n    return int(x)\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn_start, mary_start = symbols('lynn_start mary_start')\n    lynn_left = lynn_start - 160\n    mary_left = mary_start - 58\n    equation = Eq(mary_left, 3 * lynn_left)\n\n    # Given that Lynn and Mary had the same amount of money at first\n    solutions = solve((equation, Eq(lynn_start, mary_start)), (lynn_start, mary_start))\n\n    # Since the question asks for how much Lynn had left, we return lynn_left\n    lynn_left_value = solutions[lynn_start] - 160\n\n    return lynn_left_value\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond_op(A, B):\n        return A * A - 3 * B\n\n    def triangle_op(A, B):\n        return 5 * A - B * B\n\n    ans = triangle_op(diamond_op(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = total_grapes * (3 / 7)\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = remaining_after_monday * (3 / 8)\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    weight_per_bag = 3 / 4\n    number_of_bags = remaining_after_tuesday / weight_per_bag\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percentage_sold = 60 / 100\n    tickets_remaining = 28\n    total_tickets = tickets_remaining / (1 - percentage_sold)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deivi, jerry = symbols('deivi jerry')\n\n    # Deivi is 8 years older than Jerry\n    equation1 = Eq(deivi, jerry + 8)\n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((deivi + 4) / (jerry + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (deivi, jerry))\n\n    # Return Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum(64 - i*2*(-1)**i for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Serene mistook the tens place in the subtrahend as 5 instead of 3\n    # and the ones place as 3 instead of 2.\n    # Let's say the minuend is xy (x is the ten's digit and y is the one's digit)\n    # Let's say the correct subtrahend is uv where u = 3, v = 2\n    # and the mistaken subtrahend is ab where a = 5, b = 3\n\n    # The correct subtrahend is then uv = 10u + v = 32\n    # The mistaken subtrahend is then ab = 10a + b = 53\n    # According to the problem, the mistaken difference is 36\n    # The mistaken subtraction is, therefore: xy - 53 = 36\n\n    # Now we need to find what xy was. We know that the correct subtraction would be:\n    # xy - 32 which should give us the correct difference\n\n    # We can find xy by adding the incorrect subtrahend and the mistaken difference:\n    # xy = 53 + 36\n\n    xy = 53 + 36\n    \n    # Now we subtract the correct subtrahend to find the correct difference:\n    correct_difference = xy - 32\n    \n    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    # Define the final result after performing the operations\n    result = 41\n    \n    # Since we know the operations were \"multiplied by five and then subtracted four\",\n    # we perform the inverse operations which are \"add four and then divide by five\"\n    original_number = (result + 4) / 5\n    \n    # Return the original number Phoebe thought of\n    return original_number\n\n# Call the function to get the answer\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    if total_ml % jug_capacity == 0:\n        num_jugs = total_ml // jug_capacity\n    else:\n        num_jugs = (total_ml // jug_capacity) + 1\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_red = 49\n    total_blue = 1\n    target_percentage = 0.90  # 90%\n    \n    # Let x be the number of red balls to remove.\n    # After removing x red balls, the number of red balls will be (total_red - x)\n    # The total number of balls will be (total_red - x + total_blue)\n    # We want to solve: (total_red - x) / (total_red - x + total_blue) = target_percentage\n\n    # (total_red - x) = target_percentage * (total_red - x + total_blue)\n    # (total_red - x) = target_percentage * (total_red + total_blue - x)\n    # total_red - x = target_percentage * total_red + target_percentage * total_blue - target_percentage * x\n    # x - target_percentage * x = target_percentage * total_blue + target_percentage * total_red - total_red\n    # x * (1 - target_percentage) = target_percentage * total_blue + total_red * (target_percentage - 1)\n    # x = (target_percentage * total_blue + total_red * (target_percentage - 1)) / (1 - target_percentage)\n    x = (target_percentage * total_blue + total_red * (target_percentage - 1)) / (1 - target_percentage)\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / 97 * (99 / 96) ** i for i in range(97))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    total_matches = 220\n    \n    weight_of_matches_alone = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_matches_alone / total_matches\n    \n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n\n    # Since every animal has at least 2 legs, let's assume all animals are birds initially.\n    birds_legs = 2 * total_animals\n    remaining_legs = total_legs - birds_legs  # These are the remaining legs if all were birds.\n    \n    # Every cow has 2 more legs than a bird, so we divide the remaining legs by 2 to find the number of cows.\n    cows = remaining_legs // 2\n\n    return cows\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    greatest_number = 0\n    # Loop through all 3-digit numbers\n    for number in range(100, 1000):\n        # Check if the number is odd, divisible by 9, and tens place divisible by 4\n        if number % 2 != 0 and number % 9 == 0 and (number // 10) % 10 % 4 == 0:\n            greatest_number = max(greatest_number, number)  # Find the greatest number\n    return greatest_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    ben_given_pens = 28\n\n    jenny_pens_after = jenny_pens - ben_given_pens\n    ben_pens_initial = jenny_pens_after\n\n    return ben_pens_initial\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Since the cars have equal masses, we use the conservation of momentum\n    # m1*v1 + m2*v2 = (m1 + m2)*v_final\n    # In the north(positive y) and west(negative x) direction:\n    \n    # Masses of the cars\n    m1 = m2 = 500 # kg\n    \n    # Velocities of the cars before impact\n    v1_north = 20 # m/s (car 1 going north)\n    v2_west = -30 # m/s (car 2 going west, negative because it's the opposite direction of the reference)\n    \n    # Final velocity components of the two cars after impact, in the north (vf_north) and west (vf_west) directions\n    vf_north, vf_west = symbols('vf_north vf_west')\n\n    # Equations based on conservation of momentum\n    equation1 = Eq(m1 * v1_north, (m1 + m2) * vf_north)\n    equation2 = Eq(m2 * v2_west, (m1 + m2) * vf_west)\n    \n    # Solving the system of equations for the final velocity components\n    solutions = solve((equation1, equation2), (vf_north, vf_west))\n\n    # The magnitude of the final velocity vector\n    vf = (solutions[vf_north]**2 + solutions[vf_west]**2)**0.5\n    \n    # The direction of the final velocity vector (angle from west in radian)\n    theta = math.atan2(solutions[vf_north], -solutions[vf_west])\n    \n    # Return the magnitude and the angle\n    # If only the magnitude is needed, remove the theta part\n    return vf, theta\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return int(total_books)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_trees = 2\n    distance_between_lamp_posts = 10\n    number_of_trees = 21\n\n    # Calculate the length of the road using the number of trees and distance between them\n    # Since the number_of_trees includes the ones at the ends, we subtract one interval (number_of_trees - 1)\n    road_length = (number_of_trees - 1) * distance_between_trees\n\n    # Calculate the required number of lamp posts by dividing the road length by the distance between lamp posts\n    # Since lamp posts are placed at opposite ends, add 1 for the lamp post at the start\n    number_of_lamp_posts = (road_length // distance_between_lamp_posts) + 1\n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # Total cost for 5 laptops and 4 DVD players\n    eq1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n\n    # Cost of 1 laptop and 1 DVD player combined\n    eq2 = Eq(laptop + dvd_player, 2960)\n\n    # Solve equations for the cost of one DVD player\n    solutions = solve((eq1, eq2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    \n    number_of_handbags = sizes * colors\n    \n    return number_of_handbags\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # symbols for unknowns\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    original_average, number_of_people = symbols('original_average number_of_people')\n    \n    # Equation for when Aaron joins\n    equation1 = Eq((number_of_people * original_average + 45) / (number_of_people + 1), 61)\n    \n    # Equation for when Ben joins\n    equation2 = Eq((number_of_people * original_average + 45 + 71) / (number_of_people + 2), 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_average, number_of_people))\n\n    return solutions[original_average]\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_sum = sum([int(digit) for digit in '12345'])\n    full_patterns = 2000 // len('12345')\n    partial_pattern_length = 2000 % len('12345')\n\n    sum_full_patterns = full_patterns * pattern_sum\n    sum_partial_pattern = sum([int('12345'[i]) for i in range(partial_pattern_length)])\n\n    return sum_full_patterns + sum_partial_pattern\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # We iterate through all permutations of the digits 0-9 where the triangle, circle, and square represent different numbers.\n    for p in permutations(range(10), 3):\n        triangle, circle, square = p\n        \n        # Since we're looking for the value of a single triangle, we will focus on creating a two-digit number\n        # with the triangle and square (as they need to be different, we can't have a leading zero for two-digit numbers).\n        if triangle == 0:\n            continue\n        \n        # Create the number formed by the triangle and circle.\n        num_triangle_circle = triangle * 10 + circle\n        # Create the number formed by the circle and square.\n        num_circle_square = circle * 10 + square\n        \n        # The riddle suggests that two times the number represented by the triangle followed by the circle\n        # plus the number represented by the circle followed by the square is 100.\n        if 2 * num_triangle_circle + num_circle_square == 100:\n            return triangle\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    # total cost in pence (£5.15 -> 515p)\n    total_cost_pence = 515\n    # cost of coffee jar in pence (£3.69 -> 369p)\n    coffee_cost_pence = 369\n    # cost of milk carton in pence (89p)\n    milk_cost_pence = 89\n\n    # calculate the cost of bag of sugar in pence\n    sugar_cost_pence = total_cost_pence - coffee_cost_pence - milk_cost_pence\n    \n    # convert the cost of bag of sugar back to pounds (£)\n    sugar_cost_pounds = sugar_cost_pence / 100\n    \n    return sugar_cost_pounds\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let x be the number of hours that had passed since midnight\n    # Then, the number of hours remaining until noon would be 12 - x\n    \n    # According to the statement:\n    # The number of hours passed (x) is twice the number of hours remaining (12 - x)\n    # x = 2 * (12 - x)\n    \n    # We can solve the above equation for x\n    # x = 24 - 2x\n    # 3x = 24\n    x = 24 / 3\n    \n    return x\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # The worst case scenario to ensure 4 balls of the same color:\n    # Take all the balls of the two colors with the least amount without getting 4 of the same color.\n    # That means taking 3 blue, 3 orange, and 2 yellow balls.\n    \n    # After that, the next ball taken must be the fourth ball of one of the colors.\n    worst_case_balls_taken = 3 + 3 + 2 + 1  # +1 for the guaranteed same color ball\n\n    return worst_case_balls_taken\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_kg = 4.1\n    mangoes_kg = 2\n\n    total_cost = (orange_price_per_kg * oranges_kg) + (mango_price_per_kg * mangoes_kg)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    sum_of_other_numbers = 2 + 3 + 8 + 4 + 7 + 6\n    total_numbers = 6  # not including 'a'\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * (total_numbers + 1)  # including 'a'\n\n    a = total_sum - sum_of_other_numbers\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rates of A and B\n    rate_a = 1 / 15\n    rate_b = 1 / 10\n\n    # Work done by A and B in 4 days\n    work_done_4_days = 4 * (rate_a + rate_b)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n\n    # Days required by B to finish the remaining work\n    days_required_by_b = remaining_work / rate_b\n\n    return days_required_by_b\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    discount = original_price - reduced_price\n    discount_percentage = (discount / original_price) * 100\n    return discount_percentage\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n    test_tubes = 0\n    while 2 ** test_tubes < num_bottles:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first sequence: 1+2+3+...+13 using the formula for the sum of an arithmetic series\n    n1 = 13  # The number of terms in the first sequence\n    first_sum = n1 * (1 + n1) // 2  # The sum of the first sequence\n\n    # Calculate the sum of the second sequence: 13+12+...+1 using the same arithmetic series sum formula\n    # Since it's the same numbers as the first sequence, the sum will be the same\n    n2 = 13  # The number of terms in the second sequence\n    second_sum = first_sum  # The sum of the second sequence\n\n    # The total sum is the sum of both sequences\n    total_sum = first_sum + second_sum - 13  # Subtract 13 since it's counted twice, once in each sequence\n\n    return total_sum\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((1, 5), (1, 6), (1, 7))\n    result = solve_congruence(*congruences)\n    while result[0] < 100:\n        result = (result[0] + result[1], result[1])\n    return result[0]\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_more_than_girls = 52\n    students = 0\n    \n    # Since the difference between boys and girls is given, we can deduce that the\n    # number of layers of boys and girls must be equal, and each boy layer will \n    # have 4 more boys than each girl layer because of the 4 corners.\n    \n    # Hence, the total extra boys can be distributed as 52/4 = 13 layers.\n    # Therefore, the square will have 13 layers of boys and 13 layers of girls.\n    \n    # Since boys are on the outermost layer, we can calculate the total by:\n    # layer 1 (of boys) will have (n-2)*(n-2) students\n    # layer 2 (of girls) will have (n-4)*(n-4) students\n    # ... and so on until layer 13 (n-26)*(n-26),\n    # with n being the side length of the square formed by the boys' layer.\n    # Since each side of the boys' square is 2 more than that of the girls' square right inside it,\n    # the total number of boys and girls can be calculated by adding squares of odd numbers starting\n    # from 1, 3, 5, ... until the 26th term.\n    \n    # The sum of the squares of the first k odd numbers is k^2(2k^2-1)/3.\n    # Hence we calculate this for the 26 layer square.\n    \n    layers = 13\n    total_odd_squares = layers**2 * ((2*layers**2) - 1) // 3\n    \n    # The total students will be the sum of the boys and the girls\n    students = total_odd_squares * 2 - boys_more_than_girls # subtracting the extra boys counted twice\n\n    return students\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Number of legs for each type of animal\n    duck_legs = 2\n    geese_legs = 2\n    lamb_legs = 4\n    \n    # Number of each type of animal\n    num_ducks = 4\n    num_geese = 2\n    \n    # Calculate the total number of legs for ducks and geese\n    total_legs_ducks_geese = (num_ducks * duck_legs) + (num_geese * geese_legs)\n    \n    # Subtract the total number of legs for ducks and geese from the overall total to find the number of lamb legs\n    lamb_legs_total = 36 - total_legs_ducks_geese\n    \n    # Calculate the number of lambs by dividing the total lamb legs by the number of legs per lamb\n    num_lambs = lamb_legs_total // lamb_legs\n    \n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    # Hebe ate 1/4 of the cookies and was left with 42 cookies\n    Hebe_ate = 42 * 4  # Hebe ate equivalent to 4 times what was left\n\n    # Emerald ate 1/3 of the cookies and gave the rest to Hebe, which is Hebe_ate + 4\n    Emerald_ate = (Hebe_ate + 4) * 3  # Emerald ate equivalent to 3 times what was left after eating and giving to Hebe\n\n    # Charlene kept 1/2 of the cookies plus 8, and gave the remaining to Emerald\n    Charlene_kept = (Emerald_ate + 8) * 2  # Charlene kept equivalent to 2 times what was left after keeping and giving to Emerald\n\n    equation = Eq(cookies, Charlene_kept)\n\n    total_cookies = solve(equation, cookies)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid_chocolates = 17\n    last_kid_chocolates = 150\n    difference = 7\n\n    num_kids = ((last_kid_chocolates - first_kid_chocolates) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    matches = 30\n    # Number of games is n*(n-1) because each team plays every other team twice\n    # We need to solve n*(n-1) = 2*matches for n\n    for n in range(1, matches+1):\n        if n * (n - 1) == 2 * matches:\n            return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    # Let x be the initial number of sweets in the bowl\n    # After the first day, Kenneth has eaten 1/7 of the sweets, leaving 6/7\n    # After the second day, he eats 1/6 of the remaining sweets, leaving (6/7) * (5/6)\n    # After the third day, he eats 1/5 of the remaining sweets, leaving (6/7) * (5/6) * (4/5)\n    # After the fourth day, he eats 1/4 of the remaining sweets, leaving (6/7) * (5/6) * (4/5) * (3/4)\n    # Finally, 6 sweets are remaining: x * (6/7) * (5/6) * (4/5) * (3/4) = 6\n    # We need to find the initial number of sweets (x)\n    \n    remaining_fraction = (6/7) * (5/6) * (4/5) * (3/4)\n    x = 6 / remaining_fraction\n    \n    return int(x)\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    daily_uniforms = 720 // 5\n    total_days = 3600 // daily_uniforms\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Recursive function to count the ways to reach a given step\n    def count_ways(steps_remaining, must_step_on):\n        if steps_remaining < 0 or (must_step_on and steps_remaining < 5):\n            return 0\n        if steps_remaining == 0:\n            return 1\n        if must_step_on and steps_remaining == 5:\n            return 1\n        with_must_step = 0 if steps_remaining <= 5 else count_ways(steps_remaining - 1, steps_remaining > 5)\n        without_must_step = count_ways(steps_remaining - 1, must_step_on) + count_ways(steps_remaining - 2, must_step_on)\n        return with_must_step + without_must_step\n    \n    # Initial call to count ways with 10 steps remaining and must step on step 5\n    ans = count_ways(10, True)\n    return ans\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # The sum of the three numbers is 7656\n    equation1 = Eq(first + second + third, 7656)\n    # The first number is 1099 more than the second number\n    equation2 = Eq(first, second + 1099)\n    # The third number is 877 less than the second number\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve((equation.subs(girls, 45)), boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # Since square numbers between 40 & 50 are from 7^2 to 7^2 (as 8^2 is 64)\n        n = i**2\n        if n > 40 and n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_amount = 150\n    cup_amount = 40\n    total_cups = 3\n\n    water_left = initial_amount - (cup_amount * total_cups)\n\n    return water_left\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    num = 2 * 2 * 2 * 3 * 8 * 5 * 5 * 25\n    count = 0\n    while num % 10 == 0:\n        count += 1\n        num //= 10\n    return count\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n', integer=True, positive=True)\n    equation = Eq(n * (n + 1) * (n + 2) * (n + 3), 3024)\n    solutions = solve(equation, n)\n\n    largest_number = max(solutions) + 3\n\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Given equations\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Least common multiple of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Minimum number of markers that can be bought is the lcm of pack sizes\n    min_markers = pack_lcm\n    \n    # Determine the least number of packs needed to get at least 1000 markers\n    least_packs = 0\n    while min_markers < 1000:\n        least_packs += 1\n        min_markers = pack_lcm * least_packs\n    \n    return least_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    total_students = 10\n    handshakes_per_student = total_students - 1\n    total_handshakes = (handshakes_per_student * total_students) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = 44\n\n    equation = Eq(anne + maria, total_apples)\n    solution = solve(equation, anne)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    result_20_of_90 = 0.20 * 90\n    result_90_of_20 = 0.90 * 20\n    difference = result_20_of_90 - result_90_of_20\n    return difference\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # First, convert recurring decimals into fractions.\n    # The fraction for 0.1 ̇199251 ̇7 can be calculated by breaking it down into two parts:\n    # 0.1 and 0.0̇ ̇199251 ̇7\n    # 0.1 is simply 1/10\n    # For the recurring part, we have:\n    # let x = 0.0̇ ̇199251 ̇7\n    # Then, 1000000x = 199251. ̇7\n    # and thus, 999999x = 199251.7 - 0.7 (to account for the recurring 7)\n    # x = (199251 - 0.7) / 999999\n    # The total fraction is then 1/10 + x\n\n    from fractions import Fraction\n    \n    frac1 = Fraction(1, 10) + Fraction(199251 - 0.7, 999999)\n\n    # The fraction for 0.2 ̇3456 ̇7 can be calculated similarly, but with\n    # a recurring part of 0.0 ̇3456 ̇7\n    # let y = 0.0 ̇3456 ̇7\n    # 10000y = 3456. ̇7\n    # 9999y = 3456.7 - 0.7\n    # y = (3456 - 0.7) / 9999\n\n    frac2 = Fraction(2, 10) + Fraction(3456 - 0.7, 9999)\n\n    # Convert both fractions into decimals and iterate over decimals\n    # until the nth digit where they have the same digit (7 in this case).\n    \n    decimal1 = str(frac1).split('.')[1]  # Get the decimal part \n    decimal2 = str(frac2).split('.')[1]  # Get the decimal part \n\n    n = 1  # Start at the first decimal place\n    while True:\n        # Increment n until we find the matching digit at the nth place\n        if decimal1[n-1] == \"7\" and decimal2[n-1] == \"7\":\n            return n\n        n += 1\n\n    return -1\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the common difference (pages more read each day than the previous day)\n    d = symbols('d')\n    \n    # Total pages read is the sum of an arithmetic series\n    # a_1 = first term (first day pages), a_n = last term (last day pages), n = number of terms (days)\n    a_1 = 30\n    a_n = 70\n    total_pages = 550\n    \n    # The sum of an arithmetic series is given by: S_n = n/2 * (a_1 + a_n)\n    # We also know that a_n = a_1 + (n - 1) * d\n    # Substituting the second equation into the first one we get:\n    # 550 = n/2 * (2*a_1 + (n - 1) * d), and since we know a_1 and total_pages we can solve for n and d\n\n    # n equals the total number of days\n    n = (a_n - a_1) / d + 1\n    # express total_pages using n and substitute a_n\n    equation = Eq(total_pages, n/2 * (a_1 + a_1 + (n - 1) * d))\n    # solve for d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # in grams\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    total_scores_needed = target_average * 5\n    current_total = sum(scores)\n    final_judge_score_needed = total_scores_needed - current_total\n\n    return final_judge_score_needed\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    total_interest = 816\n\n    # Let r be the interest rate per year\n    # The interest for the first year is principal * r\n    # The interest for the second year is principal * (1 + r) * r (compound interest)\n    # The total interest for 2 years is then principal * r + principal * (1 + r) * r\n    # We set up the equation total_interest = principal * r + principal * (1 + r) * r\n\n    from sympy import symbols, Eq, solve\n    r = symbols('r')\n    equation = Eq(principal * r + principal * (1 + r) * r, total_interest)\n\n    rate_per_year = solve(equation, r)\n\n    return rate_per_year[0]\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    dividend_mark = 9 * 4 + 2  # Johnny should multiply by 4 (the divisor) not by 2\n    return dividend_mark\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 7, 43)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the speeds of Peter and Hannah.\n    hannah_speed = symbols('hannah_speed')\n    \n    # Create equations based on the ratios and speed differences.\n    peter_speed = hannah_speed + 15\n    time_ratio = Eq(3/4, hannah_speed/peter_speed)\n    \n    # Solve the equations.\n    solved_speeds = solve(time_ratio, hannah_speed)\n    return solved_speeds[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blanks = 35\n    \n    time_left_for_short_answers = total_time - time_spent_multiple_choices - time_spent_fill_in_the_blanks\n    \n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # m/s\n    travel_time = 45  # s\n\n    train_length = 850  # m\n\n    tunnel_length = train_speed * travel_time - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    ans = circles * (circles - 1) + 2 * circles + line\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fifty-cent coins Owen originally had\n    # Let y be the number of one-dollar coins Owen originally had\n    x, y = symbols('x y')\n\n    # Given that 2/7 of his coins were fifty-cents coins, the rest (5/7) were one-dollar coins\n    equation1 = Eq(y, (5/7) * (x + y))\n\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cents coins (which is equivalent to 10 fifty-cent coins)\n    # After that, he had twice as many one-dollar coins as fifty-cent coins.\n    equation2 = Eq(y + 10, 2 * (x + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total number of coins he had originally (x + y)\n    total_coins = solutions[x] + solutions[y]\n\n    return total_coins\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4] \n    ways = 0\n    for joe, mike, tina in permutations(entrances, 3):\n        if joe != mike:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let x be the amount spent on transportation\n    # Then 2x is the amount spent on food\n    # And the total amount spent is x + 2x = 3x\n    # We know that 3x = spent_money\n    x = spent_money / 3\n    \n    food_money = 2 * x\n    return food_money\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed variables\n    base_rate = 4 # dollars per ton for first 3 tons\n    additional_rate = 3 # dollars for each additional ton\n    service_fee = 4 # fixed service fee\n    total_amount = 109 # total dollars available\n    \n    # Calculate the cost for the first 3 tons including the service fee\n    initial_cost = 3 * base_rate + service_fee\n    # Subtract the initial costs from the total amount to find out how much is left for additional tons\n    remaining_amount = total_amount - initial_cost\n    \n    # Find out how many additional tons she can use\n    additional_tons = remaining_amount // additional_rate\n    \n    # Total tons of water she can use is sum of first 3 tons and the additional tons\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n    amelia = 160\n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, (amelia + carl + daniel) / 2)\n    equation3 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    \n    smallest_dividend = quotient * (remainder + 1) + remainder\n    \n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time it takes for the lazy gardener to mow the lawn alone.\n\n    # The rate at which the quick gardener works is 1/12 lawn per hour.\n    quick_gardener_rate = 1/12\n    \n    # The combined rate of both gardeners is 1/8 lawn per hour.\n    combined_rate = 1/8\n    \n    # The rate at which the lazy gardener works can be found by \n    # subtracting the quick gardener's rate from the combined rate.\n    lazy_gardener_rate = combined_rate - quick_gardener_rate\n    \n    # Time taken by the lazy gardener is the reciprocal of his rate.\n    lazy_gardener_time = 1 / lazy_gardener_rate\n    \n    return lazy_gardener_time\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples / 3 + oranges / 2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Sum of candy brought by Eve and Alice\n    number_of_girls = 3   # Eve, Alice, and Irene\n\n    candy_per_girl = total_candy // number_of_girls  # Divide equally among the girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had at first\n    x = (36 - 7) / 2\n    return x\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining = 5 * x\n\n    equation = Eq(initial_amount - (dress_cost * x) - (skirt_cost * x), remaining)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = sum(1 * 2)  # Start with the first term\n    \n    product = 1 * 3  # Initialize product with the second term's 1 * 3\n    for i in range(4, 15, 2):  # Start from 4, go up to 14, increment by 2\n        product *= i\n        ans += product\n\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug = jug_capacity_ml / 2\n    cup_capacity = half_jug / 3\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Olivia walks past 100 trees in 3 minutes\n    trees_passed = 101 - 1\n    distance_per_tree = 3  # meters\n    walking_time_per_tree_seconds = (3 * 60) / trees_passed  # in seconds\n\n    # Total distance from school to home is 4000 meters\n    total_distance = 4000  # meters\n    total_trees_on_path = total_distance / distance_per_tree\n\n    # Calculate total walking time in seconds\n    total_walking_time_seconds = walking_time_per_tree_seconds * total_trees_on_path\n\n    # Convert total walking time from seconds to minutes\n    total_walking_time_minutes = total_walking_time_seconds / 60\n\n    return int(total_walking_time_minutes)\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # minutes\n    red_line_interval = 6    # minutes\n    \n    # Finding the least common multiple (LCM) of the two intervals\n    lcm = green_line_interval\n    while (lcm % red_line_interval) != 0:\n        lcm += green_line_interval\n    \n    # Since the trains start at 5 am, we need to add the LCM to the start time\n    hours, minutes = divmod(lcm, 60)\n    start_hour = 5\n    start_minutes = 0\n    \n    # Add the hours to the start hour, dealing with 24-hour wrap-around if necessary\n    final_hour = (start_hour + hours) % 24\n    final_minutes = (start_minutes + minutes)\n    \n    # If adding minutes exceeds 59, increment the hour\n    if final_minutes >= 60:\n        final_hour = (final_hour + 1) % 24\n        final_minutes = final_minutes % 60\n    \n    # Changing time to proper format (24 hours to 12 hours)\n    if final_hour == 0:\n        time_period = 'AM'\n        readable_hour = 12\n    elif final_hour < 12:\n        time_period = 'AM'\n        readable_hour = final_hour\n    elif final_hour == 12:\n        time_period = 'PM'\n        readable_hour = final_hour\n    else:\n        time_period = 'PM'\n        readable_hour = final_hour - 12\n\n    # Time at which both trains set out together again\n    ans = f\"{readable_hour}:{str(final_minutes).zfill(2)} {time_period}\"\n    return ans\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    position_from_back = total_cars - position_from_front + 1\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Number of fish Owen traded for 2 rabbits\n    fish_per_2_rabbits = 5\n\n    # Oscar traded 4 rabbits for 7 packs of wheat\n    # Therefore, 1 rabbit is equivalent to 7/4 packs of wheat\n    wheat_per_rabbit = 7 / 4\n\n    # Hence, 2 rabbits are equivalent to wheat_per_rabbit * 2\n    wheat_per_2_rabbits = wheat_per_rabbit * 2\n\n    # Now, we determine how many fish are equivalent to 1 pack of wheat\n    # By dividing the number of fish Owen traded by the number of packs of wheat for 2 rabbits\n    fish_per_pack_wheat = fish_per_2_rabbits / wheat_per_2_rabbits\n\n    # Finally, calculate how many fish Owen should give for 14 packs of wheat\n    fish_for_14_packs_wheat = fish_per_pack_wheat * 14\n\n    return int(fish_for_14_packs_wheat)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations of where 4 people can choose 3 entrances (3^4 combinations)\n    for entrance_choices in permutations([1, 2, 3]*4, 4):\n        if len(set(entrance_choices)) == 3:  # Ensure all three entrances are used\n            count += 1\n    ans = count // 6  # Divide by the number of permutations of [1,2,3] to avoid overcounting\n    return ans\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_mark + wrong * wrong_mark\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the initial number of cows and 'g' be the initial number of goats\n    c, g = symbols('c g')\n\n    # 65% of the animals in a farm were cows\n    eq1 = Eq(0.65 * (c + g), c)\n\n    # After adding 240 more animals the percentage of cows became 85%\n    eq2 = Eq(0.85 * (c + g + 240), c + 240)\n\n    # We also know that the number of goats doubled after adding 240 animals\n    eq3 = Eq(2 * g, g + 240)\n\n    solutions = solve((eq1, eq2, eq3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let justin's current age be 'j'\n    j = symbols('j')\n\n    # Equation representing the stated age relationship\n    equation = Eq(j + 18, 4 * (j - 6))\n\n    # Solve for justin's age\n    solved_age = solve(equation, j)\n\n    return solved_age[0]\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4  # Maximum number from the sequence divided by the step\n\n    # Formula for the sum of squares of the first n natural numbers: n(n+1)(2n+1)/6\n    # In our modified case, each term is 4 times another term, so we can factor 4^2 out\n    # The modified formula thus becomes (4^2)n(n+1)(2n+1)/6\n\n    sum_of_squares = (4**2) * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "网络故障，请重试"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    num1 = 2.6\n    num2 = 4.8\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        final_amount = total_cost - 15\n    elif total_cost >= 20:\n        final_amount = total_cost - 4\n    else:\n        final_amount = total_cost\n\n    return final_amount\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_in_one_case = 10 // 2\n    books_in_six_cases = books_in_one_case * 6\n    return books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    \n    # There are only 2 possibilities for boys to sit at each end.\n    boys_permutations = factorial(2)\n    \n    # There are 3! possibilities for the girls to sit in the middle.\n    girls_permutations = factorial(3)\n    \n    # The total number of arrangements is the product of the boys' and girls' permutations.\n    total_permutations = boys_permutations * girls_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Ages of Jason, Adam, and Tom\n    jason_age, adam_age, tom_age = 6, 9, 10\n    \n    # Tom's age is a multiple of 3\n    if tom_age % 3 != 0:\n        return \"Tom's age should be a multiple of 3\"\n    \n    # Jason is younger than Tom\n    if not (jason_age < tom_age):\n        return \"Jason should be younger than Tom\"\n    \n    # Adam's age is the one not mentioned in the condition\n    return adam_age\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num = '2023'\n    n = 1\n    while True:\n        if int(num * n) % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4 * b - 9, 7)\n    solution = solve(equation, b)\n    return solution[0]\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # To guarantee 3 different colored balls, we draw the worst-case scenario:\n    # All balls of the first color, then all balls of the second color.\n    # After that, the next ball we draw must be of the third color.\n    # Since there are 5 balls of each color, we draw 5 of the first color,\n    # then 5 of the second color. The next ball (the 11th) guarantees the third color.\n    return 5 + 5 + 1  # 5 red, 5 white, and at least 1 yellow to guarantee all 3 colors.\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Distributing apples to Avril and 5 other children with no two getting the same number.\n    # The smallest number of apples others can get are 1, 2, 3, 4, 5 (since each must get at least one and they must be different)\n    # Total apples given to the other five children is 1 + 2 + 3 + 4 + 5 = 15\n    apples_given_to_other_children = sum(range(1, 6))\n\n    # Subtracting this from the total leaves Avril with the rest\n    avril_apples = 28 - apples_given_to_other_children\n    \n    return avril_apples\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Assigning initial values to the shapes\n    triangle = 1  # Assuming one triangle for base case\n    square = 2 * triangle  # since two triangles equal a square\n    circle = square + triangle  # since a square plus a triangle equals a circle\n    diamond = circle + square + triangle  # since a diamond equals a circle plus a square plus a triangle\n\n    # Now we calculate how many triangles are equal to a diamond by substituting the values\n    num_triangles = diamond / triangle\n\n    return int(num_triangles)\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5/8\n\n    cost_of_laptop = total_money * fraction_used\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    joyce_to_lori_ratio = 3 / 2  # Ratio of Joyce's speed to Lori's speed\n    joyce_speed = lori_speed * joyce_to_lori_ratio  # Joyce's speed in meters per second\n\n    time_seconds = 10  # Time in seconds\n    joyce_distance = joyce_speed * time_seconds  # Distance Joyce can run in 10 seconds\n\n    return joyce_distance\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    num_initial_numbers = 2\n\n    # Total of the initial numbers\n    sum_initial_numbers = initial_average * num_initial_numbers\n\n    # Since the average increases when a new number is added, calculate the new sum\n    sum_with_new_number = new_average * (num_initial_numbers + 1)\n\n    # The newly added number is the difference between the new sum and the initial sum\n    new_number = sum_with_new_number - sum_initial_numbers\n\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    time_bus_trip_end = time_caught_bus + timedelta(minutes=18)\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n    \n    walking_time_to_bus_stop = (time_caught_bus - time_left_school)\n    walking_time_from_bus_drop_off = (time_got_home - time_bus_trip_end)\n    \n    total_walking_time = walking_time_to_bus_stop + walking_time_from_bus_drop_off\n    total_walking_time_minutes = total_walking_time.seconds // 60\n    \n    return total_walking_time_minutes\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let k be the amount of money Ken originally had\n    # Let l be the amount of money Lisa originally had\n    k, l = symbols('k l')\n    \n    # Ken had $15 more than Lisa at first\n    eq1 = Eq(k, l + 15)\n    \n    # After giving some amount of money (let's say 'x'), Ken had $21 less than Lisa\n    eq2 = Eq(k - l, -21 - 2 * x)\n    \n    # Let's solve for 'x' now\n    solutions = solve((eq1, eq2), (k, l, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # Calculate the trophies for the first 5 questions\n    trophies = sum(range(1, 6))  \n    # Calculate the trophies for the next 4 questions using the pattern provided\n    trophies += sum(range(5-1, 5-1-4, -1))  \n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    # Let the number of cookies eaten on the first day be x\n    # Then, the sequence becomes x, x+6, x+12, x+18, x+24\n    # The sum of an arithmetic sequence is (n/2)(first_term + last_term)\n    # Here, n = 5\n    # The sum in terms of x is thus (5/2)(2x + 24) which should equal to 100 cookies\n    # So we solve this equation 5/2 * (2 * x + 24) = 100 for x\n    x = (total_cookies / 5) * 2 - 24\n    return int(x)\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Initialize variables to hold the sequence and current number being added\n    sequence = []\n    current_num = 1\n\n    # Building the sequence by adding the current number the required number of times\n    while current_num <= 8:\n        sequence += [current_num] * (current_num + 1)\n        current_num += 1\n\n    # Calculate the median\n    n = len(sequence)\n    if n % 2 == 1:\n        # If the sequence length is odd, the median is the middle element\n        median = sequence[n // 2]\n    else:\n        # If the sequence length is even, the median is the average of the two middle elements\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_marbles = 18 + 6 + 8\n    # Since we want to ensure 2 red marbles, we first get all blue and orange marbles\n    non_red_marbles = 18 + 8\n    # One more to guarantee at least 2 red marbles\n    marbles_to_ensure_two_red = non_red_marbles + 2\n\n    return marbles_to_ensure_two_red\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for number in range(1, 31):\n        # A student will be facing the teacher if the number of factors 2 and 3 is even.\n        # This happens when the number is either not a multiple of 2 or 3,\n        # or when it is a multiple of both (2 * 3 = 6), meaning a multiple of 6.\n        if number % 2 != 0 and number % 3 != 0 or number % 6 == 0:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, sqrt, solve, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_row = 10\n    fourth_row = 25\n    total_rows = 25\n\n    # Find the common difference\n    common_difference = (fourth_row - first_row) / (4 - 1)\n\n    # Find the last row using the arithmetic sequence formula\n    last_row = first_row + (total_rows - 1) * common_difference\n\n    # Find the sum of the arithmetic sequence using the formula\n    total_athletes = (total_rows * (first_row + last_row)) / 2\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # The probability of the car behind the initial gate 1 is 1/3.\n    # When the host opens a gate (gate 3) with a goat, the probability\n    # does not change for the gate you've already chosen (gate 1).\n    # Since there is a 1/3 chance the car is behind gate 1,\n    # there is a 2/3 chance the car is behind one of the other two gates.\n    # Given that gate 3 has been revealed to have a goat,\n    # the entire 2/3 probability transfers to gate 2.\n    # Therefore, you should choose gate 2 to maximize your chances of winning the car.\n    return 'gate 2'\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_seq)\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # represents the dollar amount Sean spent each time\n    total_spent = 6 * x  # since he went 6 times, total is 6 times x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    spent_on_CDs = 75\n    spent_on_batteries = (original_sum - spent_on_CDs) / 4\n    remaining = original_sum - spent_on_CDs - spent_on_batteries\n\n    equation = Eq(remaining, original_sum / 3)\n\n    original_amount = solve(equation, original_sum)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    total_books = 7\n    students = 3\n\n    # To distribute 7 different books to 3 students so that each one gets exactly 1 book, \n    # we need to choose 3 books out of 7 for the students and then arrange these 3 books\n    # in 3! ways to distribute to each student.\n    # Remaining books are left undistributed (as question does not mention distributing all books)\n    \n    # Choosing 3 out of 7 books can be done in \"7 choose 3\" ways.\n    ways_to_choose = factorial(total_books) // (factorial(students) * factorial(total_books - students))\n    \n    # There are 3! = 6 ways to arrange these 3 books among 3 students\n    ways_to_arrange = factorial(students)\n\n    # Total ways is the product of choosing and arranging\n    total_ways = ways_to_choose * ways_to_arrange\n    \n    return total_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 1 + 12  # Tommy and 12 friends\n    time_per_person = 142  # minutes each spent on homework\n\n    total_time = total_people * time_per_person\n\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    number_str = '928' * 33  # creating the 99-digit number\n    number = int(number_str)\n    ans = number % 9\n    return ans\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    op = symbols('op')\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n    solution = solve(equation, op)\n    return solution[0]\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the three numbers be a, b, c with a being the smallest and c being the largest\n    a, b, c = symbols('a b c')\n\n    # Equation for the sum of the three numbers\n    equation_sum = Eq(a + b + c, 56)\n\n    # Equation for the average of the smallest two numbers\n    equation_avg_small = Eq((a + b) / 2, 14)\n\n    # Equation for the average of the largest two numbers\n    equation_avg_large = Eq((b + c) / 2, 22)\n\n    # Solve the equations\n    solutions = solve((equation_sum, equation_avg_small, equation_avg_large), (a, b, c))\n\n    # Return the median which is b\n    return solutions[b]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    for bars in range(1, 100):  # Check for a reasonable number of bars\n        if (300 - 12*bars) == (400 - 17*bars):\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 0, 2, 3]\n    smallest_even = min([d for d in digits if d % 2 == 0])\n\n    if smallest_even == 0:\n        digits.remove(smallest_even)\n        smallest_even = min(d for d in digits if d % 2 == 0)\n        digits.remove(smallest_even)\n        digits = sorted(digits)\n        digits.insert(1, 0) # Put the 0 in the second position\n    else:\n        digits.remove(smallest_even)\n        digits = sorted(digits, reverse=True)\n\n    smallest_num = digits[2]*1000 + digits[1]*100 + digits[0]*10 + smallest_even\n\n    return smallest_num\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Number of pokemon each trainer can catch in one minute\n    rate_per_trainer_per_minute = 7 / (7 * 7)\n    # Number of trainers needed to catch 49 pokemons in 49 minutes\n    # Since the rate is constant, we just keep the same number of trainers to catch 49 pokemons in 49 minutes\n    # 49 pokemon in 7 minutes requires 7 trainers, thus 49 pokemon in 49 minutes still requires 7 trainers\n    num_trainers = 7\n\n    return num_trainers\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for num in range(41):\n        if '2' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect = 1500\n\n    percentage_incorrect = (incorrect / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    if total_cost <= base_fare:\n        total_distance = base_distance\n    else:\n        additional_cost = total_cost - base_fare\n        additional_distance = additional_cost / additional_fare_per_km\n        total_distance = base_distance + additional_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # If at least one student gets at least 3 apples, then in the worst-case scenario\n    # (to have the largest class size), we would give 3 apples to one student and 1 apple\n    # to each of the remaining students. Let's calculate how many students can we have\n    # under these circumstances.\n\n    # Let x be the number of students receiving 1 apple\n    # Hence, (x + 1) will be the total class size, as there is one student receiving at least 3 apples\n    # We have a total of 80 apples\n    # One student receives 3 apples, the rest receive 1 apple each\n    # Therefore, we have the following equation: 3 + x = 80\n    # Solving for x gives us the number of students receiving 1 apple.\n\n    x = 80 - 3  # Subtract the at least 3 apples given to one student from the total\n    class_size = x + 1  # The class size is one more than x (including the student who got at least 3 apples)\n    \n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    total_bars = bars_received * 2\n    return total_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n\n    num_big_cars = boys_in_big_cars // capacity_big_car\n    num_small_cars = girls_in_small_cars // capacity_small_car\n\n    total_cars = num_big_cars + num_small_cars\n    \n    return total_cars\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    total_future_age = 100\n    mother_current_age = 36\n    father_current_age = 42\n    julia_current_age = 7\n    sum_current_ages = mother_current_age + father_current_age + julia_current_age\n    \n    # Since all of them get older by 1 each year, we need to find out how many years it takes for their total ages to be 100.\n    # That is, (sum_current_ages + 3 * number_of_years) = total_future_age\n    # Solve for number_of_years\n    number_of_years = (total_future_age - sum_current_ages) / 3\n    \n    return int(number_of_years)\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 1 / 16\n    pounds_to_kg = 1 / 2.2\n    \n    # Newborn tiger cubs weight in ounces\n    tiger_cub_weight_ounces = 56\n    \n    # Convert ounces to pounds\n    tiger_cub_weight_pounds = tiger_cub_weight_ounces * ounces_to_pounds\n    \n    # Convert pounds to kilograms\n    tiger_cub_weight_kg = tiger_cub_weight_pounds * pounds_to_kg\n    \n    return round(tiger_cub_weight_kg, 2)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    sum_sequence = sum(range(5, 81))\n    sum_reflected_sequence = sum(range(5, 80))  # Exclude the 80 as it's not repeated\n    ans = sum_sequence + sum_reflected_sequence\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    # Since we just want the largest value of A and the addition does not depend on the distinctness of the\n    # 3-digit numbers, we can just use the largest digits for the most significant places.\n    # Since each digit except the first and the last appears exactly three times in A, we will order them\n    # to maximize A: 9 in the hundreds place is the most significant, followed by 8, and so on.\n    \n    # Constructing the largest possible numbers for each three-digit block\n    max_num_str = '987654321'\n    \n    # Calculate the sum\n    # abc = 9*100 + 8*10 + 7 = 987\n    # bcd = 8*100 + 7*10 + 6 = 876\n    # ... and so on\n    # ghi = 3*100 + 2*10 + 1 = 321\n    \n    A = sum(int(max_num_str[i:i+3]) for i in range(7))\n    \n    return A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    # Original price after 20% discount\n    discounted_price = 32\n    # Further discount given to Henry\n    further_discount = 4\n    # Price paid by Henry\n    henry_price = discounted_price - further_discount\n    \n    # Calculate the original price before any discount\n    original_price_before_any_discount = discounted_price / (1 - 0.20)\n    \n    # Calculate the total discount amount\n    total_discount_amount = original_price_before_any_discount - henry_price\n    \n    # Calculate the total percentage discount\n    total_percentage_discount = (total_discount_amount / original_price_before_any_discount) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    people = ['A', 'B', 'C', 'D', 'E']\n    \n    # All possible permutations of the 5 people\n    all_perms = list(permutations(people))\n    \n    # Filter out those that satisfy the condition A left of B and B left of C\n    valid_perms = [perm for perm in all_perms if perm.index('A') < perm.index('B') < perm.index('C')]\n    \n    return len(valid_perms)\n  \nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i*(i+7)) for i in range(3, 2016, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    # This is an arithmetic sequence where a = 21 (first term),\n    # d = 2 (common difference), and l = 159 (last term).\n    # Formula for the sum of an arithmetic sequence: n/2 * (a + l)\n    # where n is the number of terms.\n\n    a = 21  # first term\n    l = 159  # last term\n    d = 2  # common difference\n    n = ((l - a) // d) + 1  # number of terms\n    \n    sum_of_sequence = n / 2 * (a + l)\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Analyze the given pattern\n    # 10 * 10 = 1 can be interpreted as (1+0) * (1+0) = 1\n    # 11 * 11 = 4 can be interpreted as (1+1) * (1+1) = 4\n    # Applying similar logic\n    # 55 * 55 should be interpreted as (5+5) * (5+5)\n    \n    # Applying the pattern\n    result = (5+5) * (5+5)  # (10) * (10)\n\n    return result\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_six_digit_numbers = sorted(set(permutations(digits, 6)))\n    # Subtract 1 from 505 because list indices start at 0\n    return int(''.join(all_six_digit_numbers[504]))\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Three different digits can be used to form a three-digit number.\n    # So, with the restriction that a number cannot start with 0, we need to count how many ways\n    # we can arrange the remaining digits, 2 and 3, in the first position, and then the other two positions\n    # can each be any of the three available digits (since 0 is now possible)\n    \n    # The first digit can be either 2 or 3 - 2 possibilities.\n    # The second digit can be 0, 2, or 3, which gives us 3 possibilities\n    # for each choice of the first digit.\n    # The third digit can also be 0, 2, or 3, but it must be different from\n    # the second digit. Since the second digit was chosen from 3 possibilities, \n    # we have 2 possibilities left for the third digit.\n    \n    # Multiplying these together gives us the total number of possible numbers:\n    count = 2 * 3 * 2\n    \n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    total_work = 1  # Representing the job as 1 unit of work\n    alice_rate = 1 / 40  # Alice's work rate per day\n    bob_rate = 1 / 60  # Bob's work rate per day\n\n    # Equations based on combined work\n    # (alice_rate * (27 - days_off)) + (bob_rate * 27) = total_work\n    # Solve for days_off\n    days_off = (total_work - (bob_rate * 27)) / alice_rate\n\n    return int(days_off)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for num in range(21, 50):\n        if num % 6 == 0 and num % 9 == 0:\n            multiples.append(num)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    # Suppose the number of red balls is r\n    # The number of white balls is 2r (since the ratio is 1:2)\n    # The number of black balls is 4/3 times the number of white balls (since the ratio is 3:4)\n    # so the number of black balls is (4/3) * 2r = (8/3)r\n    # The sum of all balls is r + 2r + (8/3)r = 136\n    # r + 2r + (8/3)r = 136 => (3r + 6r + 8r) / 3 = 136\n    # (3+6+8)r / 3 = 136\n    # 17r / 3 = 136\n    # Solving for r we get r = 136 * (3/17)\n    r = 136 * (3/17)\n    return r\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Given terms in the sequence correspond to their positions\n    # This indicates an arithmetic sequence\n    # The common difference can be found by subtracting two consecutive terms\n    common_difference = 120 - 105  # 8th term minus 7th term\n\n    # To find the first term, we subtract (n - 1) * common_difference from the nth term\n    first_term = 105 - (7 - 1) * common_difference  # 7th term is 105\n\n    # To find the 100th term, we use the formula for the nth term in an arithmetic sequence\n    # n_th_term = first_term + (n-1) * common_difference\n    n_th_term = first_term + (100 - 1) * common_difference\n\n    # Return the 100th term\n    return n_th_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We will use the Pigeonhole Principle in this problem.\n    # The worst case is when you pick socks of alternate colors without getting a pair.\n    # After picking 1 red, 1 blue, another red, and another blue, you have 4 socks without a pair.\n    # Thus, the next sock you pick, regardless of the color, will make a pair.\n    # So, you need to take out 5 socks to be sure you have at least one matching pair.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Total combined age 4 years ago\n    combined_age_4_years_ago = 24\n    \n    # Since 4 years have passed, each dog ages by 4 years, there are 3 dogs\n    age_increase = 4 * 3\n    \n    # Combined age now\n    combined_age_now = combined_age_4_years_ago + age_increase\n    \n    # In 2 years, each dog will age by an additional 2 years\n    future_age_increase = 2 * 3\n    \n    # Combined future age\n    combined_future_age = combined_age_now + future_age_increase\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11 ** 2\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    initial_ratio = Eq(ryan / audrey, 2 / 7)\n    final_ratio = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((initial_ratio, final_ratio), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minutes = 30\n    # For every hour, the hour hand moves by 30 degrees (360 degrees / 12 hours)\n    # For every minute, the hour hand moves by 0.5 degrees (30 degrees / 60 minutes)\n    hour_angle = (hour * 30) + (minutes * 0.5)\n\n    # For every minute, the minute hand moves by 6 degrees (360 degrees / 60 minutes)\n    minute_angle = minutes * 6\n\n    # The angle between the hands is the absolute difference between their angles\n    angle = abs(hour_angle - minute_angle)\n\n    # If the angle is greater than 180 degrees, we take the smaller angle (360 - angle)\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    apples_left = 20\n\n    total_apples = justin_apples + sisters_apples + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # Number of beads in one repeating pattern\n    black_beads_in_pattern = 3 + 3  # Number of black beads in one repeating pattern\n\n    # Calculate complete patterns\n    complete_patterns = total_beads // pattern_length\n    black_beads = complete_patterns * black_beads_in_pattern\n\n    # Calculate remaining beads\n    remaining_beads = total_beads % pattern_length\n\n    # Add remaining black beads\n    black_beads += min(remaining_beads, 3)\n\n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    latest_arrival = datetime.strptime('07:45', '%H:%M')\n    wake_up_time = latest_arrival - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        sum += sign * i\n        # Flip the sign after every two numbers.\n        if i % 2 == 0:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let the number of chickens be x\n    # Since the number of chickens is equal to the number of ducks, \n    # the number of ducks is also x, \n    # and the number of cows be y.\n    # Each chicken and duck has 1 head and 2 legs.\n    # Each cow has 1 head and 4 legs.\n    \n    # We have the system of equations:\n    # x + x + y = 51 (heads)\n    # 2x + 2x + 4y = 160 (legs)\n    \n    # Simplifying the equations:\n    # 2x + y = 51\n    # 4x + 4y = 160\n    \n    # Further simplifying:\n    # 4x + 2y = 102 (multiplying 1st equation by 2)\n    \n    # Now we can subtract the first simplified equation from the second:\n    # (4x + 4y) - (4x + 2y) = 160 - 102\n    # 2y = 58\n    # y = 29 (cows)\n    \n    # Substitute y back into the first equation:\n    # 2x + 29 = 51\n    # 2x = 51 - 29\n    # 2x = 22\n    # x = 11 (chickens and ducks)\n    \n    # So there are 11 chickens on the farm.\n    return 11\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    possible_sums = set()\n    for first_coin in coins:\n        for second_coin in coins:\n            for third_coin in coins:\n                current_sum = first_coin + second_coin + third_coin\n                possible_sums.add(current_sum)\n    ans = len(possible_sums)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from math import factorial\n    \n    # Total number of permutations for three people to enter one of four entrances\n    total_permutations = factorial(4) // factorial(4 - 3)\n    # Number of permutations where Joe and Mike enter the same entrance\n    same_entrance_permutations = factorial(3) // factorial(3 - 2)\n    # Number of permutations for the third person (Tina) to choose an entrance\n    tina_permutations = 3\n    \n    # Calculate the number of different ways\n    # We multiply the same entrance permutations by Tina's permutations\n    # because for each scenario where Joe and Mike are at the same entrance,\n    # Tina has 3 different entrances to choose from.\n    ways_same_entrance = same_entrance_permutations * tina_permutations\n    \n    # Subtract the permutations where Joe and Mike enter the same entrance\n    # from total permutations to get all valid permutations\n    valid_permutations = total_permutations - ways_same_entrance\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice * (1/5)\n    abigail_drink = 200\n    anna_drink = 120\n    \n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n    \n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000 # nautical miles\n    total_hours = 13 * 24 + 22 # 13 days to hours and additional 22 hours\n    \n    average_speed = total_distance / total_hours\n    \n    return round(average_speed)\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    result = 2136 // 8\n    return result\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = -(-50 // 11) * 11  # Ceiling division to find the first multiple of 11 greater than or equal to 50\n    last_multiple = 150 // 11 * 11  # Floor division to find the last multiple of 11 less than or equal to 150\n    num_multiples = (last_multiple - first_multiple) // 11 + 1  # Calculate the number of multiples\n\n    return num_multiples\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    # Volume of first fruit punch\n    volume_first = 2 \n    # Concentration of fruit juice in the first punch\n    concentration_first = 0.4 \n    \n    # Volume of second fruit punch\n    volume_second = 3 \n    # Concentration of fruit juice in the second punch\n    concentration_second = 0.7\n\n    # Total volume of fruit juice from the first punch\n    juice_first = volume_first * concentration_first \n    # Total volume of fruit juice from the second punch\n    juice_second = volume_second * concentration_second \n\n    # Total volume of fruit juice in the new mixture\n    total_juice = juice_first + juice_second \n    # Total volume of the mixture\n    total_volume = volume_first + volume_second \n\n    # Concentration of the new mixture\n    concentration_mixture = total_juice / total_volume \n\n    return concentration_mixture\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the initial number of women and m be the initial number of men\n    w, m = symbols('w m')\n\n    # When the first bus arrived, 36 women left\n    equation1 = Eq((w - 36) / (3/5), m)\n    \n    # When the second bus arrived, 48 men left and the number became equal\n    equation2 = Eq(w - 36, m - 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Total people at the bus stop initially is sum of women and men\n    total_people_initially = solutions[w] + solutions[m]\n    \n    return total_people_initially\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_away_first = 339\n    bought_stamps = 455\n    gave_away_second = 777\n\n    remaining_stamps = (initial_stamps - gave_away_first + bought_stamps - gave_away_second)\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    # Including Bella and Albert themselves\n    bella_and_albert = 2\n\n    total_people = people_in_front_of_bella + bella_and_albert + people_behind_albert\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    prime_numbers = [23, 29]\n    return prime_numbers[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age_now = symbols('age_now')\n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n    \n    age_solution = solve(equation, age_now)\n    \n    return age_solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensure x2 > x1\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # ensure x3 > x2 > x1\n                count += 1\n                combinations.append((x1, x2, x3))\n    return count, combinations\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    # Since there are 9 possible heights (132 - 124 = 8 + 1 for inclusive range),\n    # and at least 4 students must be of the same height, thus by pigeonhole principle:\n    # if we have 3 students for each of the 8 possible heights, we can still add one more\n    # without forcing a 4th student of the same height. But adding one more would necessarily\n    # result in a group of 4 students of the same height.\n    # So, the class size is 3 times the 9 possible heights + 1\n    class_size = 4 * (max_height - min_height + 1) - 1\n\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50\n    change = 5 - total_spent\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    \n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred takes 1 orange, he leaves 14 oranges.\n    # George can then take 1, 2 or 3 oranges leaving 13, 12 or 11 oranges for Fred's turn.\n    # No matter what George takes, Fred can always leave a multiple of 4 for George (by taking 3, 2, or 1 orange respectively).\n    # This way Fred can always make sure to leave 4 oranges for George, and finally take the last orange to win the game.\n    # Thus, Fred should start by taking 1 orange to guarantee a win.\n    return 1\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cooking_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total_students = (go + checkers + chess \n                      - go_checkers - go_chess - checkers_chess\n                      + all_three)\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let 'x' be the number of years after which the sum of their ages is 48\n    # Oliver's age after x years: 20 + x\n    # Lin's age after x years: 26 + x\n    # Sum of their ages after x years: (20 + x) + (26 + x) = 48\n    # Equation: 20 + 26 + 2x = 48 => 46 + 2x = 48\n    # Simplify to find x: 2x = 48 - 46 => 2x = 2 => x = 1\n    return 1  # after 1 year their sum of ages will be 48\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    \n    total_cost = tickets * cost_per_ticket\n    \n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    poles = 40\n    distance_between_poles = 3\n    \n    # Total distance is the distance between each pair of consecutive poles\n    # multiplied by the number of gaps between the poles (which is poles - 1)\n    total_distance = distance_between_poles * (poles - 1)\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    while True:\n        if round((245 * p) ** (1/3)) ** 3 == 245 * p:\n            return p\n        p += 1\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the five different digits for the word ESSE\n    for p in permutations('0123456789', 5):\n        e, s, a, m, o = p\n\n        # Convert the characters to digits and calculate ESSE and SASMO\n        esse = int(e+s+s+e)\n        sasmo = int(s+a+s+m+o)\n\n        # Check if the solution fits the given equation\n        if esse + 2018 == sasmo and e != '0':\n            return sum(int(digit) for digit in [s, a, s, m, o])\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_meter = 100\n    cm_value = 736\n    ans = cm_value / cm_in_meter\n    return ans\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(64, 45, -2)])\n    return ans\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 2  # One on sick leave and one on personal leave\n    attendance_rate = (present_students / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator1 = 5\n    denominator1 = 15\n    numerator2 = 8\n\n    # Using the property of fractions that if a/b = c/d, then a*d = b*c\n    ans = (denominator1 * numerator2) / numerator1\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Positions from the front and left are both 1-based indices\n    # Tim stands 4th from the front and 3rd from the back, implying there are 3+4-1 members in the line.\n    rows = 4 + 3 - 1\n\n    # Tim stands 1st from the left and 4th from the right, implying there are 1+4-1 members in the column.\n    cols = 1 + 4 - 1\n\n    # Total number of members in the array is given by the product of number of rows and columns.\n    total_members = rows * cols\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial ratio equation\n    initial_ratio = Eq(apples / oranges, 3 / 8)\n    # New ratio when one apple is removed\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    # Solve the two equations simultaneously\n    solution = solve((initial_ratio, new_ratio), (apples, oranges))\n\n    return solution[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_num = min(numbers, key=lambda x: abs(100 - x))\n    return closest_num\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = int(this_year_production * (1/4)) + 1\n\n    return last_year_production\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "from math import ceil\n\ndef solution():\n    daily_saving = 2.40\n    target_amount = 150\n    days_needed = target_amount / daily_saving\n    weeks_needed = ceil(days_needed / 7)\n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_consecutive_14 = sum(range(1, 15))\n    target_sum = sum_consecutive_14 + 2019\n\n    # Now we need to find 8 consecutive natural numbers \n    # whose sum equals target_sum. Since these numbers are consecutive,\n    # we can express them as x, x+1, x+2, ..., x+7. The sum of these \n    # is 8x + 28 (sum of differences 0+1+2+...+7), which equals target_sum.\n\n    # We solve the equation for x: 8x + 28 = target_sum\n    for x in range(1, target_sum):\n        if 8 * x + 28 == target_sum:\n            return x\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    ans = sum([sum([j / i for j in range(1, i)]) for i in range(2, 2018)])\n    return ans\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / 0.25\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the animals\n    rabbit, chicken, kangaroo = symbols('rabbit chicken kangaroo')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * rabbit, 6 * chicken)\n    equation2 = Eq(3 * kangaroo, 4 * rabbit)\n\n    # Solve the equations to find the weight relationships\n    solutions = solve((equation1, equation2), (rabbit, chicken, kangaroo))\n\n    # Calculate the weight of one kangaroo in terms of chickens\n    kangaroo_in_chickens = solutions[kangaroo] / solutions[chicken]\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = (last_term - first_term) // difference + 1\n    \n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "def solution():\n    from math import factorial\n\n    word = 'STATISTICS'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Define the number of days needed for each activity\n    cut_wood = 3\n    weave_rope = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n    \n    # Some activities can be done simultaneously. \n    # We need to find the longest duration needed among all overlapping activities.\n    \n    # The time to cut the wood and choose the wood can overlap,\n    # but dry wood has to start after the cut, so dry wood will determine the time here.\n    wood_time = choose_wood + cut_wood + dry_wood\n    \n    # The time to mow the grass, soak the grass, and weave the rope can all overlap,\n    # but the weaving can't start before the soaking is done.\n    grass_rope_time = mow_grass + soak_grass + weave_rope\n    \n    # Prepare food can be done at any point, so we can overlap it with the longest task.\n    # We take the maximum because we want to overlap tasks to minimize total time.\n    total_time = max(wood_time, grass_rope_time) + prepare_food\n    \n    return total_time\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    multiplication_sum = 836 + 162 + 2\n    ans = common_factor * multiplication_sum\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    # Age of Ashley three years ago\n    ashley_age_three_years_ago = 10 - 3\n    # Age of Ashley's brother three years ago\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    # Current age of Ashley's brother\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    left_side = (9 * 5) + (15 * 5)\n    Y_times_5 = left_side\n    Y = Y_times_5 // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from both front and back since she is in the exact middle.\n    # So there are 6 people in front of her and 6 people behind her.\n    num_dwarves = 6 + 6  # Counting those in front and behind, not including Snow White herself.\n    return num_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # In order to minimize the number of schools, we want to maximize the participants per school\n    # Let's assume each school has at least 3 participants\n    # Using the Pigeonhole Principle with 3 participants per school,\n    # one school must have at least one more participant\n    \n    # Total participants\n    total_participants = 100\n    # Minimum participants per school to guarantee at least one school with 4 participants\n    participants_per_school = 3\n    \n    # Calculate the number of schools\n    # The extra participant that guarantees a school with at least 4 goes to an existing school,\n    # so it doesn't increase the school count.\n    schools = total_participants // participants_per_school\n    \n    return schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    difference = 3\n    last_term = 52\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_of_fracs = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - (2018 + i) // 5\n        sum_of_fracs += frac_part\n    return sum_of_fracs\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num * 6) ** (1/3) % 1 == 0 and (num / 6) ** 0.5 % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # speed of the faster train\n    speed_fast = 48\n    # speed of the slower train\n    speed_slow = 36\n    # distance difference when they pass each other\n    distance_diff = 70\n\n    # The ratio of their speeds is the same as the ratio of the distances they travel\n    # Let's denote the distance travelled by the slower train as x\n    # Then the distance travelled by faster train will be x + 70\n\n    # Since distance = speed * time and the time for both trains is the same\n    # their distances will hold the same ratio as their speeds\n    # x/36 = (x + 70)/48 => we solve for x\n\n    # Simplify the equation 48*x = 36*(x + 70)\n    # 48x = 36x + 36*70\n    # 48x - 36x = 36*70\n    # 12x = 36*70\n    # x = 36*70 / 12\n\n    x = (36 * distance_diff) / (speed_fast - speed_slow)\n\n    # The total distance between two stations will be the sum of distances each train covers\n    total_distance = x + (x + distance_diff)\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "def solution():\n    from fractions import Fraction\n\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is 4th from the front and 3rd from the back, so there are 4 - 1 people in front of him and 3 - 1 people behind him\n    rows = (4 - 1) + 1 + (3 - 1)\n\n    # He is 4th from the left and 7th from the right, so there are 4 - 1 people to his left and 7 - 1 people to his right\n    cols = (4 - 1) + 1 + (7 - 1)\n\n    # Total number of band members is rows * cols\n    total_members = rows * cols\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, 26 + gigi)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    \n    for coin in [50, 20, 10, 5]:\n        if (total - coin) == 2 * (total - (total - coin)):\n            lost_coin = coin\n            break\n    \n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    smallest_number, _ = solve_congruence(*congruences)\n    return smallest_number\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "网络故障，请重试"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    equation1 = Eq(18 * friends + 41, chocolates)\n    equation2 = Eq(23 * friends, chocolates + 34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * (2/5), chai_seng * (1/7) * 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            for tens in range(hundreds + 1, 10):\n                ones = thousands + hundreds + tens\n                if tens == thousands + hundreds and ones + tens + hundreds + thousands == 16:\n                    return ones\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    \n    for tens in digits[1:]:  # the tens digit cannot be 0\n        for ones in digits:\n            if tens != ones:  # two digits must be different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n            \n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance Amy walks\n    uphill_distance = 3 * 5  # distance = speed * time\n    downhill_distance = 2 * 10  # distance = speed * time\n    \n    # Calculate the total distance walked\n    total_distance = uphill_distance + downhill_distance\n    \n    # Calculate the total time taken\n    total_time = 3 + 2\n    \n    # Calculate average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    first_5_kwh_cost = 2 * 5  # Cost for the first 5 kwh\n    service_fee = 3  # Fixed service fee\n    remaining_budget = 63 - first_5_kwh_cost - service_fee  # Budget left for additional usage\n\n    additional_kwh_rate = 1  # Rate for each additional kwh\n    additional_kwh = remaining_budget / additional_kwh_rate  # Number of additional kwh that can be used\n\n    total_kwh = 5 + additional_kwh  # Total kwh including the first 5\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    result = 54 / (63 / 7)\n    return result\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for num_students in range(1, 3*7*11):  # Maximum possible number before the pattern repeats\n        if (num_students % 3 == 2) and (num_students % 7 == 6) and (num_students % 11 == 10):\n            return num_students\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    # Prime factorization of 4320\n    # 4320 = 2^5 * 3^3 * 5^1\n    # When multiplied by (3/2)^n, we need to ensure the result is an integer.\n    # Therefore, for each power of (3/2) the power of 2 in the factorization must reduce by 1\n    # and the power of 3 may increase by 1.\n    # The power of 2 cannot go below 0, therefore n cannot exceed 5.\n    # n can be in range 0 to 5 inclusive, so there are 6 possible integer values for n.\n    \n    n_values = 6\n    return n_values\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_boxes_needed = -(-total_cookies // 600)  # Using ceiling division for any leftover cookies\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    difference = abs(-19 + 8)\n    return difference\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Number of students who passed at least one test\n    passed_at_least_one = 43\n\n    # Total number of students who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # Applying the Inclusion-Exclusion Principle to find the maximum number of students\n    # who could have passed all three tests.\n    # Maximum number of students passing all 3 tests is the total number passing individual tests\n    # minus the number passing at least one test (To ensure all students are counted exactly once)\n    max_passed_all_three = passed_math + passed_science + passed_english - passed_at_least_one\n\n    # The result cannot be negative, hence if the calculation goes below zero, then no student passed all three tests.\n    ans = max(0, max_passed_all_three)\n\n    return ans\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_punch = 20 + 30  # Sum of both punches\n    fruit_juice_1 = (35 / 100) * 20  # Fruit juice in first punch\n    fruit_juice_2 = (60 / 100) * 30  # Fruit juice in second punch\n\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2  # Total fruit juice\n    concentration = (total_fruit_juice / total_punch) * 100  # percent concentration\n\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original amount in warehouse B as b.\n    b = symbols('b')\n\n    # After the transactions:\n    # Warehouse A has: 50 + 12 = 62 tons\n    # Warehouse B has: b - 16 tons\n\n    # Now, grain in warehouse A is 2 times that of warehouse B.\n    # Therefore, we have the equation: 62 = 2 * (b - 16)\n\n    # Setting up the equation\n    equation = Eq(62, 2 * (b - 16))\n\n    # Solving the equation\n    solution = solve(equation, b)\n\n    # Returning the solution\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # The sequence lists consecutive prime numbers.\n    # 37 is the missing prime number between 31 and 41.\n    ans = 37\n    return ans\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    box_capacity = 6\n\n    boxes_needed = (total_cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "网络故障，请重试"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.50 * 0.20 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Ratio of fishes to rabbits: 3 fishes for 1 rabbit, which is 3/1.\n    fish_to_rabbit_ratio = 3 / 1\n    \n    # Ratio of rabbits to packs of wheat: 2 rabbits for 3 packs of wheat, which is 2/3.\n    rabbit_to_wheat_ratio = 2 / 3\n    \n    # The total ratio of fishes to packs of wheat is the product of the two ratios:\n    # (fishes to rabbits) * (rabbits to packs of wheat) = fishes to packs of wheat.\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    # Simplifying the ratio to find out how many fishes for one pack of wheat.\n    fishes_per_pack_wheat = 1 / fish_to_wheat_ratio\n    \n    return fishes_per_pack_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 100):  # Adjust range based on reasonable estimates\n        if (people + 7) % 3 == 0 and (people - 21) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We define the congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    least_solution = solve_congruence(*congruences)\n\n    # Finding the least positive solution\n    num_pencils = least_solution[0]\n\n    # Since we need number of pencils between 400 and 500, we will find the smallest multiple of\n    # least_solution[1] (the modulus of all congruences) which when added to num_pencils is in that range\n    while num_pencils < 400:\n        num_pencils += least_solution[1]\n\n    return num_pencils if num_pencils <= 500 else None\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # 0 through 9 for the first number\n        for x2 in range(10):  # 0 through 9 for the second number\n            for x3 in range(10):  # 0 through 9 for the third number\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return 21 - 11\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_a = 2\n    ratio_b = 3\n    sum_ratios = ratio_a + ratio_b\n    \n    bigger_share = (total_amount / sum_ratios) * ratio_b\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    mass_empty_bottle, mass_juice_per_unit = symbols('mass_empty_bottle mass_juice_per_unit')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(mass_empty_bottle + (5/6) * mass_juice_per_unit, 4.6)\n    equation2 = Eq(mass_empty_bottle + (2/3) * mass_juice_per_unit, 4.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mass_empty_bottle, mass_juice_per_unit))\n\n    # Extract the solution for the mass of the empty bottle and convert to grams\n    mass_empty_bottle_grams = solutions[mass_empty_bottle] * 1000  # Convert from kg to grams\n\n    return mass_empty_bottle_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * x - 3, 19)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    # Loop over all 3-digit numbers\n    for num in range(100, 1000):\n        if num % 2 != 0:  # Check if the number is odd\n            # Calculate the sum of the digits\n            digits_sum = sum(int(digit) for digit in str(num))\n            if digits_sum == 5:  # Check if the sum of digits is 5\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits = 0\n    pages = 0\n    while digits < 1101:\n        pages += 1\n        digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    # Total number of pupils before transfer\n    total_pupils = 235 + 567\n\n    # Since the number of pupils will be the same in each room, we divide by 2\n    pupils_each_room_after_transfer = total_pupils // 2\n\n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(20, 0, -1):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    num = 1\n    diff = 2\n    while num < 100:\n        num += diff\n        diff += 2\n        if num >= 100:\n            return prev_num\n        prev_num = num\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n    max_books = total_cost // book_cost\n\n    for books in range(int(max_books)+1):\n        cost_for_books = books * book_cost\n        remaining_money = total_cost - cost_for_books\n        if remaining_money % magazine_cost == 0:\n            magazines = remaining_money / magazine_cost\n            return int(magazines)\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38 * 2\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_of_series = (n * (n + 1)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # assuming Mr. Lv's age is less than 100\n        base10_age_with_zero = int(str(age) + '0')\n        base3_age = int(str(base10_age_with_zero), 3)\n        if base3_age == age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the original number of each flower type\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratios and remaining flowers\n    ratio_orchids_tulips = Eq(orchids / tulips, 3 / 5)\n    remaining_flowers = Eq(0.6 * orchids + 4 / 5 * tulips + 0.75 * roses, 2644)\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n\n    # Use sympy's solve to find the values of orchids, tulips, and roses\n    solutions = solve((ratio_orchids_tulips, remaining_flowers, total_flowers), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            pair = 7007 // i\n            if 10 <= pair <= 99 and pair % 7 == 0:\n                factors.append(i)\n                factors.append(pair)\n                break\n    return sum(factors)\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    # Since rotating the table results in the same order, we fix one person's position\n    # and arrange the remaining 6 people in the remaining 7 seats.\n    # This is a permutation problem without repetition: P(7,6) = 7!\n    \n    from math import factorial\n    return factorial(7)\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Number of ways to split n identical items into k piles\n    # is given by the stars and bars theorem: C((n-1), (k-1))\n    # where C is the binomial coefficient.\n    from math import comb\n    n = 10  # total identical items\n    k = 3   # number of piles\n    ans = comb(n - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    return 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let's denote the cost of 1 piece of chocolate cake as c_chocolate, \n    # the cost of 1 piece of cheesecake as c_cheesecake, and \n    # the cost of 1 cookie as c_cookie.\n    c_cookie = 9  # Given cost of 1 cookie\n    \n    # We can now write two equations based on the problem statement:\n    # 3 * c_chocolate = 2 * c_cheesecake           (1)\n    # 3 * c_cheesecake = 5 * c_cookie              (2)\n    \n    # We can solve equation (2) for c_cheesecake since we know the cost of 1 cookie:\n    c_cheesecake = (5 * c_cookie) / 3\n    \n    # Now we can substitute the value of c_cheesecake in equation (1) to find c_chocolate:\n    c_chocolate = (2 * c_cheesecake) / 3\n    \n    # Return the cost for 1 piece of chocolate cake\n    return c_chocolate\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equation for the cost of 2 basketballs and 3 volleyballs\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    # Equation for the cost of 4 basketballs and 5 volleyballs\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Given values in the seven-digit number\n    fixed_digits_sum = 2 + 0 + 1 + 9\n    # Since the number should be divisible by 9, the sum of all its digits also should be divisible by 9.\n    # Find all possible combinations for A, M, C that lead to a sum of digits divisible by 9,\n    # considering the sum of the fixed digits and the restriction that all digits must be different.\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({0, 1, 2, 9, A, M, C}) == 7: # check for unique digits\n                    if (fixed_digits_sum + A + M + C) % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, 3 * A)\n    equation3 = Eq(C + A, 10)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    # Let v be the number of candies Valeria has now, and m be the number Mike has now.\n    # Total candies they have now is 36, so: v + m = 36\n    # Let x be the amount of candy each eats.\n    # After eating x candies each, Valeria has 22 left, and Mike has 6 left, so:\n    # v - x = 22 and m - x = 6\n    # Adding the equations v - x + m - x = 22 + 6 we get:\n    # v + m - 2x = 28\n    # We know from the total number of candies that v + m = 36, so we can write:\n    # 36 - 2x = 28\n    # Solving for x we get x = 4 (the amount each eats).\n\n    x = (36 - 28) // 2  # Calculate the amount of candy each eats\n\n    # Now we can find out how many candies Valeria has now: v = 22 + x\n    v = 22 + x  # Calculate Valeria's candies\n\n    return v\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_read_in_a_day = 1/4 / 3\n    total_days_to_finish = 1 / part_read_in_a_day\n\n    return total_days_to_finish\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent Melissa's current age\n    m = symbols('m')\n    \n    # Melissa's age when she was 8 years old is m - (current age - 8), \n    # which is the same as m - m + 8 = 8.Age problem equation:\n    melissa_old_age = 8\n    mother_old_age = 32\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    mother_current_age = 3 * m\n    \n    # The difference in ages between Melissa and her mother is always the same\n    age_difference = mother_old_age - melissa_old_age\n    \n    # Equation: Mother's current age = Melissa's current age + age difference\n    equation = Eq(mother_current_age, m + age_difference)\n    \n    # Solve the equation for Melissa's current age\n    melissa_current_age = solve(equation, m)\n    \n    return melissa_current_age[0]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 // (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The recurring part of the fraction 6/7 is 857142, which has a length of 6 digits.\n    recurring_part = [8, 5, 7, 1, 4, 2]\n\n    # Summing the recurring part we get\n    sum_recurring_part = sum(recurring_part)  # This is the sum of one complete cycle\n\n    # We calculate how many complete 6-digit cycles are there in the first 58 digits\n    full_cycles = 58 // 6\n\n    # We calculate the sum of digits in all the full cycles\n    sum_full_cycles = sum_recurring_part * full_cycles\n\n    # Now calculate how many digits are left after the full cycles\n    remaining_digits = 58 % 6\n\n    # Sum the digits of the partial cycle\n    sum_partial_cycle = sum(recurring_part[:remaining_digits])\n\n    # The total sum is the sum of all full cycles and the partial cycle\n    total_sum = sum_full_cycles + sum_partial_cycle\n\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n\n    # Convert recurring decimals to a precise Decimal\n    recurring_decimal = Decimal('4.73').quantize(Decimal('1.00')) + Decimal('0.003') / (1 - Decimal('0.1'))\n\n    decimals = [recurring_decimal, Decimal('4.73'), Decimal('4.77'), Decimal('4.737')]\n\n    # Find the smallest decimal\n    smallest_decimal = min(decimals)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    plants_before_joel = (remaining_after_joel + 2) * 2\n    remaining_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_after_valerie + 3) * 2\n    remaining_after_ethan = plants_before_valerie\n    original_plants = (remaining_after_ethan + 1) * 2\n    return original_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52  # m/s\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    # Let the initial number of eggs be x.\n    # After selling x/2 + 16 eggs, he sold 7 fewer than half of the remaining, which left him with 18 eggs.\n    # Hence, we solve for x using the given conditions.\n\n    # Calculate the number of eggs before the second sale\n    remaining_after_first_sale = remaining_eggs * 2 + 7\n    # Calculate the total initial number of eggs\n    initial_eggs = (remaining_after_first_sale + 16) * 2\n\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the side of the cube, then PA is diagonal of the cube,\n    # so PA = sqrt(3) * x\n    x = symbols('x')\n\n    # Write down the equations derived from Pythagoras theorem for distances from P\n    equation_PB = Eq(x**2 + x**2, (60 * 10**0.5)**2)  # Equation for PB\n    equation_PC = Eq(x**2 + (2**0.5 * x)**2, (60 * 5**0.5)**2)  # Equation for PC\n    equation_PD = Eq(2 * (2**0.5 * x)**2, (120 * 2**0.5)**2)  # Equation for PD\n    equation_PG = Eq(3 * x**2, (36 * 7**0.5)**2)  # Equation for PG\n\n    # Because we're only interested in PA, which is based on x, we solve equation_PG that relates directly to x\n    # Solving equation_PG for x and then evaluatuing PA\n    solutions_x = solve(equation_PG, x)\n    \n    # Extract the positive solution for the side of the cube, since lengths are positive\n    side_of_cube = [sol.evalf() for sol in solutions_x if sol.is_real and sol > 0][0]\n\n    # Calculate PA\n    PA = (3**0.5) * side_of_cube\n\n    return PA\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let p1 be the number of P1 students and p6 be the number of P6 students.\n    # We have two linear equations:\n    # p1 + p6 = 120     (1) Total number of students\n    # 0.5*p1 + 2*p6 = 180   (2) Total number of buckets of water\n\n    # Solve the linear equations\n    from sympy import symbols, Eq, solve\n    \n    p1, p6 = symbols('p1 p6')\n    equation1 = Eq(p1 + p6, 120)\n    equation2 = Eq(0.5 * p1 + 2 * p6, 180)\n    \n    solutions = solve((equation1, equation2), (p1, p6))\n    \n    return solutions[p1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # heads or tails\n    total_tosses = 2\n    total_outcomes = outcomes_per_toss ** total_tosses\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    teams = 5\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit\n    # Oscar trades 2 rabbits for 3 packs of wheat\n    # Therefore, 1 rabbit is worth 3/2 packs of wheat\n    \n    # Since Owen trades 3 fish for 1 rabbit, and 1 rabbit is worth 3/2 packs of wheat,\n    # 3 fish are worth 3/2 packs of wheat.\n    \n    # To find out how many fish are needed for 1 pack of wheat,\n    # we divide the number of fish by the number of packs of wheat that 3 fish is worth.\n    \n    fish_for_one_pack_of_wheat = (3 * 2) / 3  # Simplifying the ratio for 1 pack of wheat\n    \n    return fish_for_one_pack_of_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's solution:\n    wrong_product = quotient * remainder\n    wrong_sum = wrong_product + divisor\n\n    # Johnny's error is that he multiplied the quotient by the remainder instead of the divisor\n    # The correct operation should be (divisor * quotient) + remainder\n    correct_product = divisor * quotient\n    correct_sum = correct_product + remainder\n\n    # Check if Johnny's answer is correct\n    if wrong_sum == correct_product:\n        return True, wrong_sum   # Johnny is correct\n    else:\n        return False, correct_sum # Johnny is wrong and the correct answer is\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            if d1 + d2 == 8:\n                ways.append((d1, d2))\n\n    num_ways = len(ways)\n    return num_ways, ways\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return round(boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'g' be the total number of girls initially,\n    # and 't' be the total number of students initially.\n    g, t = symbols('g t')\n    \n    # At first, 40% of students were boys, so 60% were girls.\n    # 60% of t equals the number of girls initially.\n    equation1 = Eq(g, 0.6 * t)\n    \n    # 16 boys left and 16 girls entered,\n    # so the number of girls now is g + 16.\n    \n    # The boys now are 40% of t (initial boys) minus 16,\n    # which makes up 2/15 of the total students now (t + 16 - 16 = t).\n    equation2 = Eq(0.4 * t - 16, 2/15 * t)\n    \n    # Solving the two equations for 'g' and 't'\n    solutions = solve((equation1, equation2), (g, t))\n    \n    # Calculate the number of girls now in the canteen after 16 girls entered.\n    girls_now = solutions[g] + 16\n    \n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    prime_numbers = set()\n\n    # Generate all permutations with 1, 2, and 3 digits\n    for i in range(1, 4):\n        perms = permutations(digits, i)\n        for perm in perms:\n            number = int(''.join(perm))\n            if number < 100 and isprime(number):\n                prime_numbers.add(number)\n\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions and calculate the numerator\n    numerator = (Fraction(10, 3) * Fraction(19, 10)) + (Fraction(195, 10) / Fraction(9, 2))\n\n    # Convert decimals to fractions and calculate the denominator\n    denominator = Fraction(62, 75) - Fraction(16, 100)\n\n    # Calculate the expression above the division line\n    expression_above = numerator / denominator\n\n    # Convert mixed numbers to improper fractions and calculate the denominator below the division line\n    denominator_below = (Fraction(35, 10) + Fraction(14, 3) + Fraction(32, 15)) / (\n        Fraction(1, 2) * (Fraction(24, 20) + Fraction(41, 10))\n    )\n\n    # Calculate the final result by dividing the two expressions\n    ans = expression_above / denominator_below\n\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Loop through all four-digit numbers\n    for N in range(1000, 10000):\n        # Convert the number to a string to work with individual digits\n        str_N = str(N)\n        \n        # Check each possible three-digit number M created by removing one digit\n        for i in range(4):\n            # Remove the ith digit from N\n            M = int(str_N[:i] + str_N[i+1:])\n            \n            # Check if the difference is equal to 2021\n            if N - M == 2021:\n                return N  # Return the original number N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n    \n    # Set up the equations based on the information given\n    equation1 = Eq(b + 2 * p, 94)  # Max's purchase\n    equation2 = Eq(b + 1 * p, 62)  # Emily's purchase\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # Get the price of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    \n    both_sports = swimming + jogging - (total_students - neither)\n    \n    return int(both_sports)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    \n    # Work done by A and B together in 4 days\n    work_done_in_4_days = 4 * (A_rate + B_rate)\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done_in_4_days\n\n    # Days B takes to finish the remaining work alone\n    days_B_takes = remaining_work / B_rate\n    \n    return days_B_takes\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    # Include the trees at both ends by adding one to the division of road_length by distance_between_trees\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate per minute\n    linda_rate = 1 / 5\n    # Cici's rate per minute\n    cici_rate = 1 / 6\n    # Combined rate per minute\n    combined_rate = linda_rate + cici_rate\n    # Total time available in minutes (2 hours = 120 minutes)\n    total_time = 2 * 60\n    # Total number of problems solved\n    total_problems = combined_rate * total_time\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    apples_to_give = (amy - john - 4) / 2\n    return int(apples_to_give)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    # Initialize the starting point as the smallest odd number greater than 13\n    # The number must be greater than 13 and less than 17\n    # Since 13 is an odd number, the next odd number will be 13 + 2\n    num = 13 + 2\n\n    # Return the odd number\n    return num\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n    \n    wait_time = (bus_interval - late_time % bus_interval) % bus_interval\n\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Given values\n    cows = 14 \n    rabbits = 70 \n    cows_days = 15 \n    rabbits_days = 8 \n    goat_to_rabbit_ratio = 4\n\n    # Total amount of grass in the pasture measured in 'rabbit-days'\n    total_grass = cows * cows_days * goat_to_rabbit_ratio\n    # Alternatively, it could also be measured as:\n    total_grass = rabbits * rabbits_days\n\n    # Now we have 17 goats and 20 rabbits to feed\n    daily_grass_consumption = 17 * goat_to_rabbit_ratio + 20\n\n    # The number of days the pasture can feed 17 goats and 20 rabbits\n    num_days = total_grass // daily_grass_consumption\n\n    return num_days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean = 37\n    total_numbers = 10\n\n    sum_of_numbers = mean * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    X, Y, Z = symbols('X Y Z')\n    \n    # There are 83 more Prizes X than Prizes Y\n    equation1 = Eq(X, Y + 83)\n    \n    # There are 24 more Prizes Z than Prizes X\n    equation2 = Eq(Z, X + 24)\n    \n    # The total number of prizes is 283\n    equation3 = Eq(X + Y + Z, 283)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n    \n    return solutions[Y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    # Equation based on the problem statement\n    equation1 = Eq((1/4) * chan, (1/3) * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha, riley + 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    # Extract the solution for riley\n    return solutions[riley]\n\n# Get the final answer\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb_rate = 10\n    slide_rate = 1\n    current_height = 0\n    day = 0\n    \n    while current_height < height:\n        day += 1\n        current_height += climb_rate\n        if current_height >= height:\n            break\n        current_height -= slide_rate\n        slide_rate += 1\n            \n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    number = 4\n    times = 3\n    ans = sum(int(str(number) * i) for i in range(1, times + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n\n    mean_saving = (january_saving + february_saving + march_saving) / 3\n\n    return mean_saving\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # Represent the \"Angel\" password as a dictionary where keys are unique characters\n    # and values are the corresponding digits\n    angel_password = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '2', 'o': '5', 'r': '3'}\n\n    # Create a dictionary to represent the \"Devil\" password using the same pattern\n    devil_password = {char: angel_password[char] for char in 'Devilo'}\n\n    # Convert the devil password dictionary to a string\n    devil_password_str = ''.join(devil_password[char] for char in 'Devil')\n    \n    # The attempted password by Andy\n    andy_password = '4005220912'\n\n    # If Andy's password matches the translated \"Devil\" password, then he can unlock the treasure chest\n    if andy_password == devil_password_str:\n        return True, \"Andy can unlock the treasure chest, as the passwords match.\"\n    else:\n        return False, devil_password_str\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # split 6 as the sum of two or more positive numbers, no limit here for how many numbers\n    for x in range(1, 6):  # start from 1 to 5, since we need at least two numbers\n        y = 6 - x\n        if y > x:  # ensure different numbers and positive\n            count += 1\n    # now count includes all possibilities for two numbers,\n    # we need to consider more than two numbers (which is not possible as\n    # the sum of three or more different positive numbers greater than 1\n    # that can sum up to 6 does not exist)\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def repeating_decimal_to_fraction(numerator, cycle_length):\n    return numerator / (10**cycle_length - 1)\n\ndef solution():\n    terms = [\n        (1, 2),  # for 0.0\\dot{1}\n        (12, 1),  # for 0.1\\dot{2}\n        (23, 1),  # for 0.2\\dot{3}\n        (34, 1),  # for 0.3\\dot{4}\n        (45, 1),  # for 0.4\\dot{5}\n        (54, 1),  # for 0.5\\dot{4}\n        (78, 1)   # for 0.7\\dot{8}\n    ]\n    \n    sum_of_terms = sum(repeating_decimal_to_fraction(numerator, cycle_length) for numerator, cycle_length in terms)\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', positive=True)\n    x = sqrt(a) - 2/sqrt(a)\n\n    expression = sqrt(x**2 + 8*x)\n    simplified_expression = simplify(expression)\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    min_sheep_in_max_pen = (total_sheep + total_pens - 1) // total_pens\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    mean_boys = 16.2\n    mean_girls = 16.7\n\n    total_boys_age = boys * mean_boys\n    total_girls_age = girls * mean_girls\n    total_age = total_boys_age + total_girls_age\n    total_people = boys + girls\n\n    mean_age = total_age / total_people\n\n    return mean_age\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Mapping each letter in \"Angel\" to the corresponding number\n    angel_to_num = {\n        'A': '0',\n        'n': '1',\n        'g': '4',\n        'e': '7',\n        'l': '5'\n    }\n\n    # Define the inverse mapping of numbers to \"Angel\"\n    num_to_angel = {v: k for k, v in angel_to_num.items()}\n\n    # Mapping each letter in \"Devil\" according to the inverse mapping\n    devil_to_num = {\n        'D': num_to_angel['4'],\n        'e': num_to_angel['7'],\n        'v': num_to_angel['2'],\n        'i': num_to_angel['0'],\n        'l': num_to_angel['5']\n    }\n\n    # Andy's input for \"Devil\"\n    andy_input = '4005220912'\n    \n    # Convert Andy's input into the \"Angel\" number system\n    andy_input_mapped = ''.join(devil_to_num[c] for c in 'Devil')\n    \n    # Check if Andy's input matches the correct password\n    if andy_input == andy_input_mapped:\n        return True, \"Andy can unlock the treasure chest.\"\n    else:\n        return False, andy_input_mapped\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 6), (8, 13)]\n    ans, _ = solve_congruence(*congruences)\n    \n    # Find the number between 200 and 300\n    while ans < 200:\n        ans += 6 * 13\n\n    return ans\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    least_common_multiple = lcm(raye_cycle, simon_cycle, taylor_cycle)\n\n    return least_common_multiple\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To guarantee 5 balls of the same color\n\n    # Sara can take out 4 green balls and still could miss getting 5 green ones,\n    # So she must take at least one more ball (which could be green or not).\n    green = 4\n\n    # Similarly, she can take out 4 yellow balls and still could miss getting 5 yellow ones,\n    # So she must take at least one more ball (which could be yellow or not).\n    yellow = 4\n\n    # Since there are only 2 red balls, she can take them both and still not have 5 of the same color.\n    red = 2\n\n    # After she has taken 4 green, 4 yellow, and 2 red, the next ball she takes out\n    # must result in her having 5 of the same color, since there are no other colors left.\n    # This is the worst case scenario.\n    ans = green + yellow + red + 1\n\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n    \n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    total_distance = 30\n    speed_sam = 1  # m/s\n    speed_ben = 0.6  # m/s\n    total_time = 10 * 60  # 10 minutes in seconds\n\n    # Relative speed is the sum of the speeds as they are moving towards each other\n    relative_speed = speed_sam + speed_ben\n\n    # Each meeting means they have covered a distance equal to the pool length\n    # Number of meetings is the total distance they have covered together divided by the pool length\n    total_distance_covered = relative_speed * total_time\n    num_meetings = total_distance_covered // total_distance\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    result = a * b + c * d\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = 2 * average_bob_cindy\n    total_height_three_children = total_height_bob_cindy + height_doris\n    average_height_three_children = total_height_three_children / 3\n    return average_height_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # Equation representing the situation in 6 years\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    # Equation representing the situation 6 years ago\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solution_values = solve((equation1, equation2), (destin, nephew))\n\n    # Extract Destin's and nephew's current ages from the solution\n    destin_age = solution_values[destin]\n    nephew_age = solution_values[nephew]\n\n    # Calculate the sum of their ages in 10 years\n    sum_of_ages_in_10_years = (destin_age + 10) + (nephew_age + 10)\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    girls = 40 - boys\n    total_pencils_avg = 35\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n\n    equation = Eq(boys * boys_pencils_avg + girls * girls_pencils_avg, total_pencils_avg * 40)\n\n    sol = solve(equation, boys)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    initial_pies = symbols('initial_pies')\n\n    # Mrs Tan bought 12 more, so her total is initial + 12\n    tan_total = initial_pies + 12\n\n    # Mrs Lim gave away 4, so her total is initial - 4\n    lim_total = initial_pies - 4\n\n    # Mrs Tan now has twice as many as Mrs Lim\n    equation = Eq(tan_total, 2 * lim_total)\n\n    # Solve the equation to find the initial number of pies\n    solution = solve(equation, initial_pies)\n\n    # Return only the positive solution since pies can't be negative\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "from datetime import datetime\n\ndef solution():\n    departure_time = datetime.strptime('6:35AM', '%I:%M%p')\n    arrival_time = datetime.strptime('10:22AM', '%I:%M%p')\n\n    time_difference = arrival_time - departure_time\n    total_minutes = time_difference.total_seconds() / 60\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_length = len(pattern)\n\n    # Number of complete patterns in the 50-digit number\n    complete_patterns = 50 // pattern_length\n\n    # Number of digits in the incomplete pattern at the end\n    remaining_digits = 50 % pattern_length\n\n    # Full pattern sum\n    full_pattern_sum = sum(int(digit) for digit in pattern)\n\n    # Sum for the remaining digits (incomplete pattern at the end)\n    incomplete_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    # Total sum of all 50 digits\n    total_sum = complete_patterns * full_pattern_sum + incomplete_pattern_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    result = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return result\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    # Calculate sweets and students in the first group\n    sweets_first_total = total_sweets * fraction_first_group\n    students_first_group = sweets_first_total / sweets_first_group\n\n    # Calculate remaining sweets after the first group\n    remaining_sweets = total_sweets - sweets_first_total\n\n    # Calculate sweets and students in the second group\n    sweets_second_total = remaining_sweets * fraction_second_group\n    sweets_second_group = 4\n    students_second_group = sweets_second_total / sweets_second_group\n\n    # Calculate sweets and students in the third group\n    remaining_sweets = remaining_sweets - sweets_second_total\n    sweets_third_group = 5\n    students_third_group = remaining_sweets / sweets_third_group\n\n    # Sum up all students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n    \n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Calculate all combination products for Candy (choosing 2 cards)\n    candy_products = {prod(combo) for combo in combinations(cards, 2)}\n    \n    # Calculate all combination products for Candice (choosing 3 cards)\n    candice_products = {prod(combo) for combo in combinations(cards, 3)}\n    \n    # Find the common product\n    common_product = candy_products.intersection(candice_products).pop()\n\n    # Identify the cards that make up this product for Candy\n    candy_cards = next(combo for combo in combinations(cards, 2) if prod(combo) == common_product)\n\n    # Identify the cards that make up this product for Candice\n    candice_cards = next(combo for combo in combinations(cards, 3) if prod(combo) == common_product)\n\n    # The card not picked is the one not in the union of both sets\n    all_picked = set(candy_cards).union(candice_cards)\n    not_picked = [card for card in cards if card not in all_picked]\n    \n    return not_picked[0] if not_picked else None\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_final_age = 70\n    father_current_age = father_final_age - (father_final_age - tom_age)\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for i in range(1000, 0, -2):  # start from a large odd number and go downwards\n        if not is_composite(i):\n            continue\n        found = False\n        for j in range(2, i):\n            if not is_composite(j):\n                continue\n            for k in range(2, i - j):\n                if not is_composite(k):\n                    continue\n                l = i - j - k\n                if l > 0 and is_composite(l) and j != k and k != l and j != l:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            return i\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_1 = 25\n    packet_2 = 20\n    lcm_days = lcm(packet_1, packet_2)\n\n    # Since she starts both on March 1st, the first day is counted\n    # So we subtract 1 to get the next starting date\n    next_start_day = lcm_days - 1\n\n    return next_start_day\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    halfway_num = (17 + 35) / 2\n    return halfway_num\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n    difference = first_number - second_number\n\n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Each boy receives $8, each girl $5\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    # There are thrice as many boys as girls\n    equation2 = Eq(boys, 3 * girls)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    start = 3  # The first number with a remainder of 3 after dividing by 4\n    end = 99   # The last number less than 100 with a remainder of 3 after dividing by 4\n    difference = 4  # The common difference in the arithmetic sequence\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (first_term + last_term)\n    num_terms = ((end - start) // difference) + 1  # Calculate the number of terms\n    sum_sequence = num_terms / 2 * (start + end)  # Calculate the sum of the sequence\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2):\n        for b in range(a, (12-a)//2 + 1):\n            c = 12 - a - b\n            if a <= b and b <= c and a + b > c:  # Triangle inequality theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n    \n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    total_cost = bill + tip_amount + tax_amount\n    \n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n\n    # Equation representing the total current age of both brothers\n    current_age_equation = Eq(elder + younger, 42)\n\n    # Equation representing the age relation a few years ago\n    years_ago_equation = Eq(younger - (elder - younger), elder/2)\n\n    # Solve the system of equations\n    solutions = solve((current_age_equation, years_ago_equation), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Applying the Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_strawberries = 86\n    given_away = 29\n    final_count = 100\n\n    strawberries_received = final_count - (lena_strawberries - given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "from math import gcd\n\ndef solution():\n    num_students_A = 8\n    num_students_B = 12\n    num_students_C = 20\n    \n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    pass_second_fail_first = 3\n    \n    # Students who passed only the first exam = Students who passed the first exam - \n    # (Students who passed the second exam but failed the first + Students who passed both exams)\n    \n    # Students who passed both exams = Students who passed the first exam - Students who failed the second exam -\n    # Students who passed the second exam but failed the first\n    passed_both = passed_first - (failed_second - pass_second_fail_first)\n    \n    # Now, calculate students who passed only the first exam\n    passed_only_first = passed_first - (pass_second_fail_first + passed_both)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Separate the routes into different paths and sum them up\n    # Path 1: Directly from A to D\n    direct_AD = 6\n\n    # Path 2: A -> B -> D = A -> B (7 ways) * B -> D (5 ways to get to C and then 2 ways from C to D)\n    via_BD = 7 * (5 * 2)\n\n    # Path 3: A -> C -> D = A -> C (4 ways) * C -> D (2 ways)\n    via_CD = 4 * 2\n\n    # Add up all the paths\n    ans = direct_AD + via_BD + via_CD\n    \n    return ans\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of chocolate cupcakes, y be the number of cheese cupcakes.\n    x, y = symbols('x y')\n\n    # He sold 40% of chocolate and 75% of cheese cupcakes.\n    # So, he has 60% of chocolate and 25% of cheese cupcakes left.\n    # The number of remaining cupcakes of both types is equal.\n    equation1 = Eq(0.6 * x, 0.25 * y)\n\n    # The total number of cupcakes is 255.\n    equation2 = Eq(x + y, 255)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Find out the remaining number of each type of cupcakes.\n    chocolate_left = 0.6 * solutions[x]\n    cheese_left = 0.25 * solutions[y]  # which should be equal to chocolate_left\n\n    return chocolate_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil_price = 2\n    total_cost = 20\n    number_of_pencils = 3\n    number_of_pens = 2\n\n    equation = Eq(pen * number_of_pens + pencil_price * number_of_pencils, total_cost)\n    solutions = solve(equation, pen)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    num_cattle = 5\n    days = 10\n    \n    # Total amount of hay eaten by one cattle in 10 days\n    hay_per_cattle_for_days = total_hay / num_cattle\n\n    # Amount of hay eaten by one cattle in one day\n    hay_per_cattle_per_day = hay_per_cattle_for_days / days\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    ages = [i for i in range(1, 10)]  # Children's ages must be from 1 to 9\n\n    for age1 in ages:\n        for age2 in ages:\n            for age3 in ages:\n                if age1 < age2 < age3 and age1 * age2 * age3 == 210:\n                    return age1\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    total_students = 39\n\n    # Let the number of boys be b and the number of girls be g\n    for b in range(total_students):\n        g = total_students - b\n        if (1/4) * b == (2/5) * g:\n            return b - g\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3 / 8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_intake = 12\n    days = total_locusts // daily_intake\n    remaining_locusts = total_locusts - (days * daily_intake)\n    \n    if remaining_locusts == 0:\n        ans = daily_intake\n    else:\n        ans = remaining_locusts\n    \n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for two types of notes Jeremy has\n    fives, tens = symbols('fives tens')\n\n    # Jeremy has a total of 116 notes\n    total_notes_eq = Eq(fives + tens, 116)\n\n    # After spending, he is left with 40% of the $10 notes and 75% of the $5 notes\n    left_tens_eq = tens - 0.60 * tens\n    left_fives_eq = fives - 0.25 * fives\n\n    # After spending, the number of $10 notes is 4/7 of the number of $5 notes\n    remaining_ratio_eq = Eq(left_tens_eq, (4 / 7) * left_fives_eq)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_ratio_eq), (fives, tens))\n\n    # Calculate the amount spent on the bag\n    spent_tens = 0.60 * solutions[tens] * 10\n    spent_fives = 0.25 * solutions[fives] * 5\n\n    total_spent = spent_tens + spent_fives\n\n    return total_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    result = 12 * 92 + 22 * 82 + 32 * 72\n    return result\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of stickers Don and Ben had be 2x and 3x respectively\n    x = symbols('x')\n    original_don = 2 * x\n    original_ben = 3 * x\n\n    # After Don bought 10 more stickers and Ben lost 5 stickers\n    new_don = original_don + 10\n    new_ben = original_ben - 5\n\n    # The new ratio is 6:7\n    equation = Eq(new_don / new_ben, 6 / 7)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Don's original number of stickers\n    original_don_stickers = original_don.subs(x, solution[0])\n\n    return original_don_stickers\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # There are 1008 pairs of numbers (2016 / 2)\n    # Each pair consist of an even and the next odd number, their difference is 1\n    # So each pair sum is -1\n    # Total is the number of pairs times -1\n    ans = -1008\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    heather, zach, serena, jason, william = symbols('heather zach serena jason william')\n    \n    equation1 = Eq(zach, 3 * heather)\n    equation2 = Eq(serena, zach + 24.50)\n    equation3 = Eq(serena, 5 * jason)\n    equation4 = Eq(jason, william + 1.54)\n    equation5 = Eq(heather, 12.15)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), \n                      (heather, zach, serena, jason, william))\n    \n    return solutions[william]\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    sum_of_products = 0\n    \n    for i in range(1, 21, 2):\n        sum_of_products += i * (i + 2)\n    \n    ans = sum_of_products\n    return ans\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Two cases for the arrangement of triplets:\n    # 1. Treat the triplet sisters as one unit and permute including the unit and other students.\n    # 2. Treat the triplet sisters as distinct individuals and permute them as well.\n\n    # Case 1: Permute the triplet sisters as one unit plus the four individuals (2 boys + 2 girls)\n    # There are 5! ways to arrange these 5 \"units\" (the triplet as 1 unit, 2 boys, and 2 girls)\n    # The triplet sisters can be arranged within themselves in 3! ways\n\n    # Avoid the twin brothers being next to each other by subtracting the number of permutations\n    # where they are considered a single unit. First calculate ways with them as a unit, then permute.\n    # This is 4! ways to arrange (triplet unit, twin unit, 2 girls) and 3! to permute girls within triplet,\n    # multiplied by 2! for permutations of the twins themselves.\n    total_permutations_with_unit = factorial(5)\n    triplet_internal_permutations = factorial(3)\n    twin_brothers_together_as_unit = factorial(4) * factorial(3) * factorial(2)\n\n    # The total number of valid permutations is the total permutations with the triplet sisters as one unit\n    # minus the number of permutations where the twins are together, times the internal triplet permutations.\n    valid_permutations = (total_permutations_with_unit - twin_brothers_together_as_unit) * triplet_internal_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    # Since trees are planted at both ends, the problem simplifies to adding one tree to the number obtained by dividing the road length by the interval.\n    num_trees = (road_length // tree_interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    gallons_needed = order_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Applying the Pigeonhole Principle\n    min_students_in_most_populous_week = (total_students + days_in_week - 1) // days_in_week\n\n    return min_students_in_most_populous_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assuming that the summer vacation could start on any day of the week\n    # In the best case scenario, the summer vacation starts on a Thursday\n    # which means the next day is a Friday (1st Friday).\n    # Since there are 7 days in a week, we can calculate how many Fridays by dividing the days by 7\n\n    total_days = 55 \n    max_fridays = (total_days // 7) + 1  # +1 because starting on a Thursday gives us an extra Friday\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1/2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wear_glasses = 20\n    num_girls_wear_glasses = (total_girls * percentage_wear_glasses) / 100\n    return int(num_girls_wear_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    N = 5\n    while True:\n        if N % 2 == 0 and N % 3 == 0 and N % 4 == 0 and N % 5 == 0 and N % 6 == 0 and N % 8 == 0 and N % 9 == 0:\n            return N\n        N += 7  # Increment by 7 because N gives a remainder of 5 when divided by 7\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_one_pen = pen_cost // pencil_cost\n    \n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    total_cost_mugs = 7 * cost_per_mug\n    total_cost_pens = 5 * cost_per_pen\n    \n    total_cost = total_cost_mugs + total_cost_pens\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_on_trip = total_pupils / 5\n    pupils_going_to_cathedral = total_pupils - pupils_on_trip\n\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    songs_per_child = 2\n    total_children = 50\n\n    total_time = time_per_song * songs_per_child * total_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_5_apples = 580\n    total_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_5_apples - total_weight_with_2_apples\n    weight_per_apple = weight_of_3_apples / 3\n    weight_of_basket = total_weight_with_2_apples - weight_per_apple * 2\n\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(25 / 100, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since this is a basic concept of equation where the question is simply \"1\",\n    # the answer can be interpreted as \"1\" itself.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years_guessed = 5\n\n    # Calculate amount with compound interest for each year until it's equal or larger than final_amount\n    amount = principal\n    years = 0\n    while amount < final_amount:\n        amount += amount * interest_rate\n        years += 1\n\n    # Check if Bella's guess of 5 years is correct\n    if years == years_guessed:\n        return \"right\"\n    else:\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    from sympy import lcm\n\n    multiple_of_3_and_7 = lcm(3, 7)\n    i = 1\n\n    while True:\n        number = multiple_of_3_and_7 * i\n        if str(number).endswith('2'):\n            return number\n        i += 1\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # Initial condition: three times as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    # After selling 39 cookies and 17 cakes, 48 cookies and cakes were left.\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    return days_in_a_week * num_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position_1_value = 3 * 10**5\n    position_2_value = 3 * 10**2\n    diff = position_1_value - position_2_value\n    return diff\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x, y, z be the hours John, Jonah, and Angus would take working alone, respectively\n    x, y, z = symbols('x y z')\n    \n    # JJJ (John, Jonah, Angus) take 27 hours to build the wall together, so their combined rate is 1/27\n    equation1 = Eq(1/x + 1/y + 1/z, 1/27)\n    # JA (Jonah, Angus) take 36 hours together to build the wall without John, so their combined rate is 1/36\n    equation2 = Eq(1/y + 1/z, 1/36)\n    \n    # Since John takes x hours alone, and Jonah and Angus take 36 hours together,\n    # we need to find the value of x that satisfies the equations\n    solutions = solve((equation1, equation2), (x, y, z))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    num_pages = sum([i for i in range(1, 21)])\n    return num_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    def check(n, coin1, coin2):\n        for i in range(n // coin1 + 1):\n            for j in range(n // coin2 + 1):\n                if coin1 * i + coin2 * j == n:\n                    return True\n        return False\n\n    coin1, coin2 = 4, 5\n    n = 1\n    while check(n, coin1, coin2):\n        n += 1\n\n    largest_total = n - 1  # largest total that cannot be made\n    return largest_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    target_sum = 1001\n    max_d = target_sum\n\n    while True:\n        if all(target_sum // max_d == target_sum / max_d for _ in range(10)):\n            return max_d\n        max_d -= 1\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let's denote the current ages of Claire and Daniel as C and D.\n    # According to the problem, five years ago their ages were (C - 5) and (D - 5).\n    # The sum of their ages five years ago was 14, so we have (C - 5) + (D - 5) = 14.\n\n    # We want to find the combined age in 3 years, which will be (C + 3) + (D + 3).\n    # However, we don't need to know their current ages C and D specifically,\n    # because we can use the sum of their ages five years ago to find the sum in 3 years.\n\n    # The sum of their ages five years ago plus 5 years for each person gives their current combined age:\n    # (C - 5 + 5) + (D - 5 + 5) = C + D = 14 + 5 + 5 (because we add 5 years back for Claire and 5 years for Daniel).\n\n    current_combined_age = 14 + 5 + 5  # 14 is the combined age 5 years ago, and we add 10 (5 for each)\n\n    # Now we just add 3 more years for each person to their current combined age:\n    future_combined_age = current_combined_age + 3 + 3  # plus 3 years for Claire and plus 3 years for Daniel.\n\n    return future_combined_age\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the weight of an apple and a pear\n    apple, pear = symbols('apple pear')\n\n    # Set up equations based on the information given\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    # Calculate the weight of 4 apples and 4 pears\n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight.evalf()\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n\n    # Let the original number of boys = b\n    # Then the original number of girls = 152 - b\n    # After removing 1/11 of the boys: b - b/11 = b*(10/11)\n    # After removing 5 girls: 152 - b - 5 = 147 - b\n    # Set the equations equal to each other since the number of boys and girls will be the same\n    # b*(10/11) = 147 - b\n    \n    # Solve for b\n    b = symbols('b')\n    equation = Eq(b*(10/11), 147 - b)\n    original_number_of_boys = solve(equation, b)[0]\n\n    return original_number_of_boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    num_boxes = total_pencils // pencils_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    sum_result = 386 + 99\n    return sum_result\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    maturation_period = 30\n    total_days = 40\n    new_adults = daily_eggs * (total_days - maturation_period)\n    return new_adults if new_adults > 0 else 0\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # We are looking for a number that when subtracted from 24 and then divided by 3 gives 7\n    return (7 * 3) + (24 - (7 * 3))\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people who can speak each language\n    french = 15\n    japanese = 12\n    italian = 13\n\n    # Number of people who can speak two languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n\n    # Number of people who can speak all three languages\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle to find the total number of people\n    total_people = (french + japanese + italian \n                    - french_japanese - french_italian - japanese_italian \n                    + all_three)\n\n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3 / 4\n    water_in_drink = total_drink * water_fraction\n    return water_in_drink\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    number_of_rows = 22\n    difference = 3\n    \n    # The number of students in the nth row is given by an arithmetic sequence formula: \n    # a_n = a_1 + (n - 1) * d\n    last_term = first_term + (number_of_rows - 1) * difference\n    \n    # Total number of students in the competition is the sum of the arithmetic sequence:\n    # Sum = n/2 * (a_1 + a_n)\n    ans = number_of_rows / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_amount = story_books + magazines\n    return total_amount\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = 50000 + abcd\n        N = abcd * 10 + 5\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    mixed_num1 = 21 + Fraction(21, 286)\n    mixed_num2 = 6 + Fraction(647, 2530)\n    mixed_num3 = 1 + Fraction(1370, 2829)\n\n    # Perform the calculation\n    result = mixed_num1 / mixed_num2 * mixed_num3\n\n    # Convert the result to a mixed number\n    whole_part = result.numerator // result.denominator\n    fractional_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    # Combine the whole part and the fractional part for the final answer\n    ans = whole_part + fractional_part\n\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Define the dimensions of the large cuboid\n    length = 12\n    width = 10\n    height = 6\n    \n    # Determine the size of the small cubes (since the volume is 6*10*12 and there\n    # are 720 small cubes, each small cube is 1x1x1)\n    small_cube_volume = (length * width * height) / 720\n    \n    # Calculate the number of small cubes along each edge\n    num_cubes_length = int(length / small_cube_volume**(1/3))\n    num_cubes_width = int(width / small_cube_volume**(1/3))\n    num_cubes_height = int(height / small_cube_volume**(1/3))\n    \n    # Calculate the number of small cubes with exactly one face painted\n    # Only the cubes on the outside, but not on the edge, have one face painted\n    # For each face, the count is the product of the dimensions of the face, minus the edges\n    cubes_with_one_painted_face = (\n        (num_cubes_length - 2) * (num_cubes_width - 2) +\n        (num_cubes_length - 2) * (num_cubes_height - 2) +\n        (num_cubes_width - 2) * (num_cubes_height - 2)\n    ) * 2 # Both front/back and top/bottom and left/right faces\n    \n    return cubes_with_one_painted_face\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # Setting up equations based on the problem description\n    # Star's work plus Nini's work equals 1 job in both scenarios\n    equation1 = Eq(star_rate * 5 + nini_rate * 20, 1)\n    equation2 = Eq(star_rate * 20 + nini_rate * 8, 1)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # Nini's rate is in \"jobs per hour\", so to find the hours Nini takes to finish\n    # 1 job by herself, we take the reciprocal of her rate\n    time_for_nini = 1 / solutions[nini_rate]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorize 140\n    # 140 = 2^2 * 5 * 7\n    # The number of odd divisors is the number of ways to distribute the candy.\n    # Odd divisors are produced by varying the powers of the odd prime factors 5 and 7.\n    # The power of 5 can be 0 or 1 (two choices), and the power of 7 can also be 0 or 1 (two choices).\n    # Thus, the total number of ways to distribute the candy is 2 * 2 = 4.\n    ans = 2 * 2\n    return ans\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # For each key, in the worst-case scenario, the warden has to try \n    # every keyhole until he finds the right one.\n    # For the first key, he might have to try all 20 keyholes,\n    # for the second key, he might have to try the remaining 19 keyholes, \n    # and so on, until the last key which will have only one keyhole left to try.\n\n    max_tries = sum(range(1, 21))\n    return max_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the configuration is:\n    # Stack A: 20 stones, Stack B: 16 stones\n    # To win, Jerry needs to create a situation after his turn\n    # such that Tom cannot win in the next turn.\n    # This means that Jerry needs to make the number of stones\n    # in both stacks even, so Tom cannot take all stones from a stack in one turn.\n\n    # So Jerry must take 4 stones from Stack A, leaving both stacks even:\n    # Stack A: 16 stones, Stack B: 16 stones\n    stones_taken = 20 - 16\n    stack = 'A'  # Stack from which Jerry takes stones\n\n    return stones_taken, stack\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Assuming that the newspaper is printed in a booklet format, where each sheet of paper has 4 page numbers\n    # Page numbers are ordered starting with 1,2 then folding the sheet we will have 55,56 and so on.\n    # The third sheet of paper will therefore have the page numbers 5, 6 (on one side) and 51, 52 (on the other side)\n    \n    # Calculate the sum of the page numbers on the third sheet\n    sum_of_pages = 5 + 6 + 51 + 52\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    num_girls = total_students * fraction_girls\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num = (2017/2018) + (20172017/20182018)\n    den = 201720172017/201820182018\n    ans = num / den\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_used = 0\n    pages = 0\n    while digits_used < 933:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1 if digits_used > 933 else pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = sum([100 - 2 * i for i in range(6)])\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Box A starts with 10 blue, 15 red, 20 black, 25 green\n    # After taking 20 pens from A to B, A might have less than 15 of any color.\n    # We need to figure out the minimum number of pens to return to A to satisfy the condition.\n    \n    # Variable to store how many pens need to be returned\n    pens_to_return = 0\n    \n    # For each color, check if Box A has at least 15 pens after moving 20 pens to Box B.\n    # Since each color has at least 10 pens to start with, we need to return pens for blue and red only.\n    box_a_initial = [10, 15, 20, 25] \n    box_a_after = [count - 20 if count >= 20 else count for count in box_a_initial] \n\n    # Check if each color has at least 15 pens in Box A after removing 20\n    for pens_in_a in box_a_after:\n        if pens_in_a < 15:\n            # Calculate and add the number of pens needed to reach 15\n            pens_to_return += (15 - pens_in_a)\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 92):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time to minutes\n    end_time = (11 * 60) + 6    # Convert end time to minutes\n\n    duration = end_time - start_time  # Calculate the duration\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys_more = 32\n    total_students = 0\n\n    # Assume the square array to be of size n x n, where n is odd since the center will be a boy.\n    # Let's start by checking the first odd number where boys could be more than girls\n    for n in range(3, 1000, 2):\n        # The number of boys will be the perimeter of the square minus the four corners\n        # since these are counted twice (boys on the outer layer)\n        boys = n * 4 - 4\n        # The number of girls is the total inside the square minus the boys (all inner squares)\n        girls = (n - 2) ** 2\n\n        if boys - girls == boys_more:\n            # If the difference between boys and girls matches the given condition,\n            # we calculate the total number of students\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1/8\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Let x be the number of plain chocolates with soft-centres.\n    # Since we have 8 plain chocolates and 16 chocolates with soft-centres,\n    # we can determine x by using the minimum and maximum possible values that fit these constraints.\n\n    # Minimum value for x would be if all milk chocolates had soft-centres, so x could be as low as 8 - 4 = 4.\n    # Maximum value for x would be if all plain chocolates had soft-centres, so x could be as high as 8.\n    \n    # As there are only 20 chocolates in total, and 16 have soft-centres,\n    # there need to be at least 16 - 12 = 4 plain chocolates with soft-centres to satisfy the condition.\n    # This is because if all 12 milk chocolates had soft-centres, we would need at least 4 plain chocolates\n    # with soft-centres to make up the total of 16 with soft-centres.\n\n    min_plain_soft_centres = max(0, 16 - 12) # At least 4 plain chocolates must have soft-centres.\n    max_plain_soft_centres = min(8, 16)      # At most 8 plain chocolates can have soft-centres.\n\n    # Thus, the number of plain chocolates with soft-centres can range from 4 to 8.\n    return f\"At least {min_plain_soft_centres} and at most {max_plain_soft_centres} plain chocolates have soft-centres.\"\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # We know that dividend = divisor * quotient + remainder\n    # let divisor be 'd'\n    # So, dividend = d * 29 + 11\n    \n    # We also know that sum of dividend and divisor is 431\n    # So, (d * 29 + 11) + d = 431\n    # d * 29 + d = 431 - 11\n    # d * 30 = 420\n    # d = 420 / 30\n    # d = 14\n\n    # Now find the dividend\n    # dividend = 14 * 29 + 11\n    # dividend = 406 + 11\n    dividend = 14 * 29 + 11\n\n    # Difference between dividend and divisor\n    # ans = dividend - divisor\n    ans = dividend - 14\n\n    return ans\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_playing_violin = 12.5\n    pupils_playing_violin = 11\n\n    total_pupils = (pupils_playing_violin * 100) / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each type of coin.\n    x = symbols('x')\n    \n    # Since there are x of each coin and their values are 1p, 2p, 5p, and 10p, we have:\n    # 1*x + 2*x + 5*x + 10*x = 90\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solving the equation to find the value of x.\n    solutions = solve(equation, x)\n    \n    # Since there are 4 types of coins and x of each, the total number of coins is 4*x.\n    total_coins = 4 * solutions[0]\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    apples, pears = symbols('apples pears', integer=True)\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(apples + pears, 105)  # The total number of apples and pears was 105\n    eq2 = Eq((2/3)*apples, (5/6)*(pears - (2/5)*pears))  # After selling, the number of apples left is 5/6 times the number of pears left\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (apples, pears))\n\n    apples_sold = (1/3) * solution[apples]\n    pears_sold = (2/5) * solution[pears]\n    \n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pupils = symbols('pupils')\n    stickers_excess_13 = 13 * pupils + 190\n    stickers_excess_17 = 17 * pupils + 50\n\n    equation = Eq(stickers_excess_13, stickers_excess_17)\n\n    solutions = solve(equation, pupils)\n\n    number_of_pupils = solutions[0]\n    total_stickers = 13 * number_of_pupils + 190\n\n    return total_stickers\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Equation representing the ratios\n    ratio_eq = Eq(4*A, 5*B)\n    ratio_eq2 = Eq(5*B, 6*C)\n\n    # Equation representing the difference between C and A\n    difference_eq = Eq(C - A, 10)\n\n    # Solving the equations simultaneously\n    solutions = solve((ratio_eq, ratio_eq2, difference_eq), (A, B, C))\n\n    # Calculating the sum of A, B and C\n    A_value = solutions[A]\n    B_value = solutions[B]\n    C_value = solutions[C]\n\n    sum_ABC = A_value + B_value + C_value\n\n    return sum_ABC\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C, and D as one single unit, as they need to be together\n    # Now we have 9 units to arrange (the ABCD unit + the other 8 students)\n    units = 9\n\n    # Calculate the number of permutations for these 9 units\n    total_permutations = factorial(units)\n\n    # Inside the ABCD unit, A, B, C, and D can be arranged in 4! ways\n    internal_arrangements = factorial(4)\n\n    # Multiply the arrangements of the units with the internal arrangements\n    total_ways = total_permutations * internal_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # The total number of games is the combination of 6 taken 2 at a time (6C2)\n    # Each game gives out 2 points total - either 2 to the winner or 1 to each in case of a tie\n    total_games = (6 * 5) // 2\n    total_points = total_games * 2\n\n    # Subtract the points from the known students to find the points of the remaining student\n    points_known_students = 7 + 6 + 5 + 4 + 3\n    points_remaining_student = total_points - points_known_students\n\n    return points_remaining_student\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the weight of bag A and y be the weight of bag B\n    x, y = symbols('x y')\n\n    # Original ratio equation: 5x = 3y\n    equation1 = Eq(5*y, 3*x)\n\n    # New ratio after transferring 10g from A to B: 7(x - 10) = 5(y + 10)\n    equation2 = Eq(7*(x - 10), 5*(y + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total weight of both bags is the sum of the weights of A and B\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    # Finding the unit rate for the number of girls per boy\n    girls_per_boy = 1 / boys_to_girls_ratio\n\n    # Calculating the total number of girls\n    number_of_girls = girls_per_boy * number_of_boys\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n\n    # Since it's an arithmetic sequence, use the sum formula: n/2 * (first_term + last_term)\n    # We rearrange it to find the number of terms n: n = 2 * total_players / (first_line + last_line)\n    n = 2 * total_players / (first_line + last_line)\n\n    # The difference d is: d = (last_line - first_line) / (n - 1)\n    difference = (last_line - first_line) / (n - 1)\n\n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for number in range(100, 201):\n        if all(number % d == 2 for d in [3, 5, 7]):\n            return number\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    result = 48 * 925 * 38 * 435\n    zeros_count = 0\n    while result % 10 == 0:\n        zeros_count += 1\n        result //= 10\n    return zeros_count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = {'30g': 30, '1kg': 1000, '300g': 300, '2.5kg': 2500, '3000g': 3000, '150g': 150, '3g': 3}\n    largest_mass = max(masses, key=masses.get)\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Given probabilities\n    p_theft = 2 / 1000  # two thefts in 1000 days\n    p_bark_given_theft = 0.9  # probability that the dog barks given there's a theft\n\n    # Probability of the dog barking at any given night\n    # as the dog barks 3 times a week, we calculate how many times it barks in 1000 days\n    days_in_a_week = 7\n    p_bark_any_night = (3 / days_in_a_week)  # probability of barking any given night\n\n    # Use Bayes' theorem to calculate the probability of the dog barking during theft\n    # P(theft given bark) = (P(bark given theft) * P(theft)) / P(bark)\n    # However, the question asks for P(bark given theft), so we already have the value, which is 0.9\n    # Therefore, no need to apply Bayes' theorem here\n\n    # The probability the dog barks during the occurrence of the theft is the same\n    # as the probability of the dog barking when there's a theft, which is 0.9\n    return p_bark_given_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define Symbols\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n    \n    # Equations Based on Problem Statement\n    eq1 = Eq(apple, orange + 7)  # 7 more apple candies than orange candies\n    eq2 = Eq(apple, grape + 3)   # 3 more apple candies than grape candies\n    eq3 = Eq(pineapple, orange + 2)  # 2 more pineapple candies than orange candies\n    eq4 = Eq(apple + orange + grape + pineapple, 25)  # Total candies bought\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (apple, orange, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    ratio_girls = 6\n    ratio_boys = 11 - ratio_girls\n    total_ratio = ratio_girls + ratio_boys\n\n    boys = (ratio_boys * total_children) // total_ratio\n    return boys\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    # 13 stickers to each + 190 excess = total stickers\n    equation1 = Eq(13 * pupils + 190, stickers)\n    # 17 stickers to each + 50 excess = total stickers\n    equation2 = Eq(17 * pupils + 50, stickers)\n    \n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # In order to get the smallest difference, we want the numbers to be as close as possible\n    # Let's construct the smallest number with digits 1-9\n    # It would be starting with 1 and then increasing: 123456789\n    small_num = int(''.join(map(str, range(1, 10))))\n\n    # Now let's construct the largest number with digits 1-9\n    # It would be starting with 9 and then decreasing: 987654321\n    large_num = int(''.join(map(str, range(9, 0, -1))))\n\n    # The smallest difference will be between these two numbers\n    difference = large_num - small_num\n\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n\n    # boys_remaining = boys - (2/5)*boys\n    # girls_remaining = girls - (3/7)*girls\n    # boys_remaining = girls_remaining\n    equation2 = Eq(boys - (2/5)*boys, girls - (3/7)*girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_left = solutions[boys] - (2/5)*solutions[boys]\n    girls_left = solutions[girls] - (3/7)*solutions[girls]\n\n    total_left = boys_left + girls_left\n\n    return int(total_left)\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define the symbol for the total number of bricks\n    total_bricks = symbols('total_bricks')\n    \n    # Calculate half the number of bricks moved in the first trip and create an equation\n    first_trip = (total_bricks / 2) - 26\n    # Calculate half the number of remaining bricks for the second trip equation\n    second_trip = ((total_bricks - first_trip) / 2) + 11\n    # Third trip\n    third_trip = 68\n    # Remaining bricks\n    remaining_bricks = 25\n    \n    # Create the equation for the sum of all trips and the remaining bricks\n    equation = Eq(first_trip + second_trip + third_trip + remaining_bricks, total_bricks)\n    \n    # Solve the equation\n    solution = solve(equation, total_bricks)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls, girls_swim, girls_not_swim = symbols('girls girls_swim girls_not_swim')\n    boys, boys_swim, boys_not_swim = symbols('boys boys_swim boys_not_swim')\n    total_not_swim = symbols('total_not_swim')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(girls + boys, 1690)\n    equation5 = Eq(girls_swim + girls_not_swim, girls)\n    equation6 = Eq(boys_swim + boys_not_swim, boys)\n    equation7 = Eq(girls_not_swim + boys_not_swim, total_not_swim)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (girls, girls_swim, girls_not_swim, boys, boys_swim, boys_not_swim, total_not_swim))\n    \n    # Get the number of pupils who cannot swim\n    return solutions[total_not_swim]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    num_kids = 3\n    return math.factorial(num_kids)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # We are looking for a square number that satisfies the given condition.\n    # As Mike's position is always the second in line, the square number must be greater than 1.\n    # We can start by checking square numbers starting from 4 (2x2) because 1 (1x1) won't satisfy the second position condition.\n    \n    # Let's find the smallest square number greater than 1 where the position is second from all sides.\n    n = 2  # We start with the smallest possible square size that satisfies the condition\n    while True:\n        total_students = n * n\n        # The position from any edge should be 2nd,\n        # so we need to check if subtracting 2 from the total side length gives us another perfect square\n        # which would mean Mike can also be 2nd from the other direction.\n        if ((n - 2) * (n - 2)).is_integer():\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    combined_age_now = 22\n    combined_age_future = 40\n    years_until_sum = combined_age_future - combined_age_now\n    \n    return years_until_sum\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # This problem can be solved using dynamic programming. The number of ways to reach the\n    # ith step is the sum of the ways to reach the (i-2)th step and the (i-3)th step.\n    \n    # Create a list to store the number of ways to reach each step, initialized with 0\n    dp = [0] * 11  # We need 11 entries for steps 0 to 10\n    \n    # Base cases:\n    # 0 ways to start from step 0, but we define it as 1 because it's the starting point\n    # 1 way to reach the first step (although it is not required in this problem)\n    dp[0] = 1\n    dp[1] = 0  # Peter cannot climb to the first step with 2 or 3 steps at a time.\n    \n    # Fill in the table using the relationship dp[i] = dp[i-2] + dp[i-3]\n    for i in range(2, 11):\n        # We check if he can reach the i-th step from two steps behind or three steps behind\n        if i - 2 >= 0:\n            dp[i] += dp[i - 2]\n        if i - 3 >= 0:\n            dp[i] += dp[i - 3]\n    \n    # The number of ways to reach the 10th step is the 10th entry in the dp array\n    return dp[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for d1 in range(1, 10):  # Since it is a 4-digit number, the first digit cannot be 0\n        for d2 in range(10):\n            for d3 in range(10):\n                for d0 in range(10):\n                    original_num = d1 * 1000 + d2 * 100 + d3 * 10 + d0\n                    new_num = d0 * 1000 + d1 * 100 + d2 * 10 + d3\n                    if new_num - original_num == 5877:\n                        return original_num\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    # The smallest possible divisor is 1\n    smallest_divisor = 1\n\n    # The minimum dividend is calculated as (smallest_divisor * quotient) + remainder\n    min_dividend = (smallest_divisor * quotient) + remainder\n    \n    return min_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num_str = '1998'\n    n = len(num_str)\n    while int(num_str) % 33 != 0:\n        num_str += '1998'\n        n += 4  # The number of digits of 1998\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = group_number ** 2\n    c = group_number ** 3\n    \n    sum_of_numbers = a + b + c\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    miles_per_run = 1/4\n    total_miles = 3.75\n\n    num_runs = total_miles / miles_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    number = 'three million thirty thousand and thirty'\n    number_mapping = {\n        'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, \n        'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,\n        'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14, \n        'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18, \n        'nineteen': 19, 'twenty': 20, 'thirty': 30,\n        'forty': 40, 'fifty': 50, 'sixty': 60, 'seventy': 70, \n        'eighty': 80, 'ninety': 90, 'hundred': 100,\n        'thousand': 1000, 'million': 1000000\n    }\n    \n    words = number.split()\n    total = 0\n    current = 0\n    \n    for word in words:\n        if word in number_mapping:\n            if word == 'million' or word == 'thousand':\n                current *= number_mapping[word]\n                total += current\n                current = 0\n            else:\n                current += number_mapping[word]\n    \n    total += current\n    \n    return total\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    ratio_boys_to_girls = boys_in_line / girls_in_line\n    total_girls = total_boys / ratio_boys_to_girls\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion: 10 / x = 14 / 21\n    # Cross multiply to solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and num % 9 == 0 and num % 10 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    johnny_answer = 5839\n    correct_answer = 5832 + (7 * 10)\n\n    return (johnny_answer == correct_answer, correct_answer)\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # The maximum number of different positive integers that sum to 27\n    # can be found by using the smallest positive integers starting from 1.\n    # We need to find the longest sequence of consecutive positive integers\n    # which would give us the maximum count before the sum exceeds 27.\n    # This becomes 1 + 2 + 3 + ... + k <= 27, which is the sum of an arithmetic series.\n    \n    # Partial sum formula of arithmetic series: n(n + 1)/2\n    # We need to find the largest n such that n(n + 1)/2 <= 27\n    \n    # Initialize the sum and count\n    current_sum = 0\n    count = 0\n    \n    # Keep adding numbers until the sum exceeds 27\n    while current_sum <= 27:\n        count += 1\n        current_sum += count\n        \n        # If the current sum exceeds 27 after adding the number\n        # then the current number is not included, and we have\n        # the count of different positive integers.\n        if current_sum > 27:\n            count -= 1\n            break\n\n    return count\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # convert 3 m to 300 cm\n    piece_1_cm = 147\n    piece_2_cm = 32.5\n    piece_3_cm = 67\n\n    remaining_length_cm = total_length_cm - (piece_1_cm + piece_2_cm + piece_3_cm)\n    \n    return remaining_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    from itertools import product\n\n    probabilities = [0.5, 0.4, 0.2]  # Probabilities for A, B, and C passing the test\n    possible_outcomes = list(product([0, 1], repeat=3))  # All possible pass/fail outcomes for A, B, C\n\n    outcome_prob = {}\n    for outcome in possible_outcomes:\n        prob = 1\n        for i, pass_fail in enumerate(outcome):\n            prob *= probabilities[i] if pass_fail else (1 - probabilities[i])\n        outcome_prob[outcome] = prob\n\n    count_pass = {sum(outcome): prob for outcome, prob in outcome_prob.items()}\n    most_likely_pass_count = max(count_pass, key=lambda x: count_pass[x])\n\n    return most_likely_pass_count\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves = (pieces_of_paper - 1) // interval\n\n    return leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    return (101 + 234 + 567) * (234 + 567 + 89) - (101 + 234 + 567 + 89) * (234 + 567)\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with the integer part of the series\n    for i in range(2, 11):  # For each denominator from 2 to 10\n        ans += (i - 1) * (1 / i) * 2  # (i - 1) fractions for each i, multiplied by two because each fraction appears twice\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watches, caps = symbols('watches caps')\n    \n    initial_ratio = Eq(watches / caps, 8/11)\n    final_ratio = Eq(watches / (caps - 88), 12/11)\n    \n    solutions = solve((initial_ratio, final_ratio), (watches, caps))\n    \n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time to ride from the first house to the sixth house is 30 minutes\n    # This includes the distances between the first five intervals\n    # Therefore, the time it will take to cover 9 intervals (from first to tenth house)\n    # Will be (30 minutes / 5 intervals) * 9 intervals\n    \n    time_per_interval = 30 / 5\n    total_intervals = 9\n    time_for_ten_houses = time_per_interval * total_intervals\n\n    return time_for_ten_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for D in range(1, 10):\n        A = D // 4\n        if D % 4 == 0 and A * 4 == D:  # A is 1/4 of D and D is a digit (1-9)\n            for B in range(0, 10):\n                if B == A - 1:  # B is 1 less than A\n                    for C in range(0, 10):\n                        # Now check the reverse multiplication condition\n                        ABCD = A*1000 + B*100 + C*10 + D\n                        DCBA = D*1000 + C*100 + B*10 + A\n                        if ABCD * 4 == DCBA and len({A, B, C, D}) == 4:  # digits are reversed and all are different\n                            return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # ribbon length in meters\n    total_length_cm = total_length_m * 100  # convert meters to centimeters\n\n    # Let the shorter piece be x, so the longer piece is 2x\n    # x + 2x = total_length_cm\n    # 3x = total_length_cm\n    # x = total_length_cm / 3\n\n    shorter_piece_cm = total_length_cm / 3\n    longer_piece_cm = 2 * shorter_piece_cm\n\n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total_coins = 2015\n    max_pick = 11\n    # Jack needs to leave a pile of coins which is a multiple of (max_pick + 1) after his first move\n    # so that he can always leave Ken with multiples of (max_pick + 1) and eventually win.\n    for first_pick in range(1, max_pick + 1):\n        if (total_coins - first_pick) % (max_pick + 1) == 0:\n            return first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Equation of a line passing through the origin (0,0) is y = mx\n    # The point (4,8) satisfies y = mx, so we can substitute to find m\n    x = 4\n    y = 8\n    m = y / x  # Since the line passes through the origin, b = 0\n\n    # The equation of the line\n    b = 0  # because the line passes through the origin\n    equation = f\"y={m}x+{b}\"\n\n    return equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200000000 + 31000 + 93\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    black_balls_per_period = 2\n    white_balls_per_period = 3\n    white_balls_total = 92\n\n    periods = white_balls_total // white_balls_per_period\n    remaining_white_balls = white_balls_total % white_balls_per_period\n\n    if remaining_white_balls == 0:\n        total_balls = periods * (black_balls_per_period + white_balls_per_period)\n    else:\n        total_balls = (periods * (black_balls_per_period + white_balls_per_period)) + remaining_white_balls + (black_balls_per_period - 1)\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    # Define a function to count the number of holes in the digits\n    def count_holes(number):\n        holes = {0: 1, 1: 0, 2: 0, 3: 0, 4: 1, 5: 0, 6: 1, 7: 0, 8: 2, 9: 1}\n        return sum(holes[int(digit)] for digit in str(number))\n    \n    # Apply the count_holes function to the number 2015\n    ans = count_holes(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let's assume the youngest dwarf is x years old.\n    # Then the ages of the youngest three would be: x, x + 1, x + 2\n    # Their sum is: x + (x + 1) + (x + 2) = 42\n    # Simplifying: 3x + 3 = 42 -> 3x = 39 -> x = 13\n    # So the youngest dwarf is 13 years old.\n    # Therefore, the oldest dwarf, being 6 years older than the youngest, is:\n    # 13 + 6 = 19 years old.\n    age_oldest = 13 + 6\n    return age_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let the total number of passengers at the start be x.\n    # At the first stop, two fifths of the passengers got off, so 3/5 remained on the bus.\n    # At the next stop, one third of the remaining passengers got off, leaving 2/3 on the bus.\n\n    # The equation representing the situation is (3/5 * 2/3) * x = 22\n    # Solve for x to find the original number of passengers.\n    \n    # Remaining passengers after second stop is 2/3 of those after the first stop\n    remaining_after_first_stop = 22 / (2/3)\n    \n    # Original number of passengers is 5/3 (inverse of 3/5) of remaining after first stop\n    original_passengers = remaining_after_first_stop * (5/3)\n\n    return int(original_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    reduction_mm = 4\n    reduction_cm = reduction_mm / 10\n\n    new_length_cm = original_length_cm - reduction_cm\n    \n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the numbers of stickers each person had originally\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter gave 20% of their stickers to John\n    sam_gave = sam * 0.2\n    peter_gave = peter * 0.2\n\n    # John's stickers increased by 80%\n    john_final = john * 1.8\n\n    # After giving stickers away Sam had 20 stickers more than John\n    eq1 = Eq(sam - sam_gave, john_final + 20)\n\n    # John's final amount is the original plus what Sam and Peter gave\n    eq2 = Eq(john_final, john + sam_gave + peter_gave)\n\n    # Sam and Peter's sticker ratio\n    eq3 = Eq(sam, (7/5) * peter)\n\n    # Since now we have three variables and three equations,\n    # we can solve the system of equations for the original\n    # numbers of stickers sam, peter, and john had.\n    solutions = solve((eq1, eq2, eq3), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Given distances and speeds for each section of the race\n    distance_first = 420\n    speed_first = 7\n    distance_middle = 620\n    speed_middle = 5\n    distance_last = 1200 - (distance_first + distance_middle)\n    speed_last = 8\n\n    # Calculating the time for each section\n    time_first = distance_first / speed_first\n    time_middle = distance_middle / speed_middle\n    time_last = distance_last / speed_last\n\n    # Total time is the sum of times for each section\n    total_time = time_first + time_middle + time_last\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    # Paul's current total score for 4 tests\n    total_score_current = 4 * 89\n    \n    # Minimum total score needed to achieve an average of 95 after n more tests\n    # (4 + n) * 95 - total score for the first 4 tests = minimum total score Paul needs in n more tests\n    total_score_required = lambda n: (4 + n) * 95 - total_score_current\n    \n    # Each test has a maximum score of 100. If the required score divided by 100 (full score per test)\n    #   is not an integer, we need to take the ceiling of the division to find\n    #   the minimum number of additional tests needed.\n    # We iterate over n until the total score Paul needs is attainable within n tests\n    \n    n = 0\n    while True:\n        # If the total score required is greater than n multiplied by the full score per test, we need more tests\n        if total_score_required(n) > n * 100:\n            n += 1\n        else:\n            break\n\n    return n\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    for num_10_notes in range(72 + 1):\n        num_2_notes = 72 - num_10_notes\n        spent_10_notes = num_10_notes * 0.9\n        spent_2_notes = num_2_notes * 0.75\n        remaining_10_notes = num_10_notes - spent_10_notes\n        remaining_2_notes = num_2_notes - spent_2_notes\n        \n        if remaining_10_notes == 2 * remaining_2_notes:\n            gift_cost = spent_10_notes * 10 + spent_2_notes * 2\n            return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Rates at which hoses A, B and C fill the pool (pool per hour)\n    rate_A, rate_B, rate_C = symbols('rate_A rate_B rate_C')\n\n    # Equations based on given data:\n    # 1. A + B takes 9 hours to fill the pool\n    # 2. A + C takes 12 hours to fill the pool\n    # 3. B + C takes 18 hours to fill the pool\n    equation1 = Eq(rate_A + rate_B, 1 / 9)\n    equation2 = Eq(rate_A + rate_C, 1 / 12)\n    equation3 = Eq(rate_B + rate_C, 1 / 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rate_A, rate_B, rate_C))\n\n    # Combined rate when all three hoses are on: A + B + C\n    combined_rate = solutions[rate_A] + solutions[rate_B] + solutions[rate_C]\n\n    # Time taken to fill the pool with all hoses on is the reciprocal of the combined rate\n    time_taken = 1 / combined_rate\n\n    return time_taken\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # One for each color plus one ensures at least two are the same color\n    num_colors = 3\n    markers_to_ensure_same_color = num_colors + 1\n\n    return markers_to_ensure_same_color\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for num_5_dollar_notes in range(58 + 1):\n        num_2_dollar_notes = 58 - num_5_dollar_notes\n        total_value = num_5_dollar_notes * 5 + num_2_dollar_notes * 2\n        if total_value == 164:\n            return num_5_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference between terms\n    common_difference = 120 - 105  # difference between 8th and 7th term\n\n    # Calculate the first term based on the 7th term\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Calculate the 100th term based on the first term and common difference\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent_cupcakes = 187.5\n    price_per_cupcake = total_spent_cupcakes / (36 + 1/6 * 5/9)\n    price_per_muffin = price_per_cupcake / 3\n    total_spent_muffins = price_per_muffin * 32\n    return total_spent_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # The two boxes with the same count of marbles will have at least 2 marbles each\n    # Start counting from 2 in multiples of 2, and skip one number for the duplicate\n    # Add up the counts for 9 boxes, then double the smallest count for the duplicate box\n    marbles = [i * 2 for i in range(1, 10)]\n    marbles[1] += 2  # Make a duplicate of the smallest count (excluding the first)\n    \n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    # Applying the Pigeonhole Principle\n    # To find the minimum number of pigeons in the cage with the most pigeons:\n    # Divide the total number of pigeons by the number of cages and round up.\n    min_pigeons_per_cage = -(-total_pigeons // total_cages)  # Use ceiling division\n\n    return min_pigeons_per_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    num_sprinklers = (num_parterres - 1) // 2 + 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # James' calculation is incorrect. Let's find the right solution.\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n\n    half_way = (num1 + num2) / 2\n\n    return half_way\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols\n    marry, alexis, charlotte_before, charlotte_after = symbols('marry alexis charlotte_before charlotte_after')\n\n    # Given equations\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, alexis * 7/5)\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Finding the amount after giving away 20%\n    marry_after_giving = marry * (1 - 0.20)\n    alexis_after_giving = alexis * (1 - 0.20)\n    # Charlotte's stickers increased by 80%\n    # charlotte_after = charlotte_before * (1 + 0.80)\n    # We can find charlotte_before from charlotte_after by the inverse operation\n    equation2 = Eq(charlotte_before, charlotte_after / (1 + 0.80))\n    # Marry had 20 stickers more than charlotte_after\n    equation3 = Eq(marry_after_giving, charlotte_after + 20)\n    # Amount given to Charlotte equals the amount lost by Alexis and Marry combined\n    equation4 = Eq(charlotte_after - charlotte_before, (marry + alexis) * 0.20)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_before, charlotte_after))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    day1 = 8\n    day2 = (1 / 6) * total_length + 4\n    total_paved = (5 / 12) * total_length\n\n    equation = Eq(day1 + day2, total_paved)\n\n    result = solve(equation, total_length)\n\n    return result[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5/9\n    given_away = 440\n    initial_collection = given_away / (1 - remaining_fraction)\n    return int(initial_collection)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    import math\n    # Let's calculate the perimeter of the field first\n    perimeter = 2 * (144 + 204)  # 2*(length + width)\n\n    # There are 4 corners and we have one wheat at each corner, so we subtract them first\n    # because they don't count in the distance between two wheats\n    # We should then have 116 - 4 = 112 wheats along the sides\n\n    num_wheats_along_sides = 116 - 4\n\n    # The number of intervals between the wheat is one less than the number of wheats along the sides\n    num_intervals = num_wheats_along_sides - 1\n\n    # Then we just divide the perimeter by the number of intervals to get the distance between two wheats\n    distance = perimeter / num_intervals\n\n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_pine_nuts = 112\n    total_days = 8\n    sunny_pine_nuts = 20\n    rainy_pine_nuts = 12\n    \n    # Let the number of rainy days be x\n    # Then, the number of sunny days will be total_days - x\n    # The total number of pine nuts collected over the 8 days can be expressed as:\n    # rainy_pine_nuts * x + sunny_pine_nuts * (total_days - x) = total_pine_nuts\n    \n    # Rearrange the equation to solve for x\n    # x = (total_pine_nuts - sunny_pine_nuts * total_days) / (rainy_pine_nuts - sunny_pine_nuts)\n    \n    x = (total_pine_nuts - sunny_pine_nuts * total_days) // (rainy_pine_nuts - sunny_pine_nuts)\n    \n    return x\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_single = 15  # price for a single bottle\n    price_double = 28  # price for two bottles\n    price_pack_five = 60  # price for a pack of five bottles\n\n    # Calculate the minimum cost for 17 bottles\n    min_cost = float('inf')  # Start with an infinitely high cost\n\n    # Since 5-pack is the cheapest option per bottle, we start by buying as many of these as possible.\n    for five_packs in range(4):  # We cannot buy more than 3 packs of 5 to get 17 bottles\n        for two_packs in range(9):  # We cannot buy more than 8 packs of two to get 17 bottles\n            # The rest will have to be single bottles\n            single_bottles = 17 - (five_packs * 5 + two_packs * 2)\n            # If we have a negative number of single bottles, this means we've tried to buy too many packs\n            if single_bottles < 0:\n                continue\n            # Calculate the cost for this combination\n            cost = five_packs * price_pack_five + two_packs * price_double + single_bottles * price_single\n            # Update the minimum cost if we've found a cheaper option\n            if cost < min_cost:\n                min_cost = cost\n\n    # Convert pence into pounds\n    return min_cost / 100.0\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Since it is a knockout tournament, each round eliminates one player.\n    # With 4 players, the first round will have 2 matches, eliminating two players.\n    # The surviving 2 players will then play the final round to determine the winner.\n    # Therefore, a total of 3 matches (rounds) must be played.\n    rounds = 3\n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    only_one_question_correct = (first_question_correct + second_question_correct) - (2 * both_questions_correct)\n    \n    return only_one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    days_off = (end_date - start_date).days + 1\n\n    return days_off\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # the speed of the train in m/s\n    time = 5    # time in seconds to pass the tree\n    length = speed * time  # distance formula: speed * time\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of candies Rachel has and a represent the number of candies Alice has.\n    r, a = symbols('r a') \n\n    # If Rachel gives Alice 10 pieces of candy, they would have the same number.\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 pieces of candy, Rachel has 3 times as many pieces as Alice.\n    equation2 = Eq((r - 8)/3, a - 8)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total amount of candies they originally had.\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of mushrooms gathered in the second hour be x\n    x = symbols('x')\n\n    # Equation:\n    # mushrooms in first hour + mushrooms in second hour = total mushrooms\n    # (x + 26) + x = 40\n    equation = Eq((x + 26) + x, 40)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Get the number of mushrooms gathered in the second hour\n    mushrooms_second_hour = solution[0]\n\n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for brushes in range(10//3):\n        towels_cost = 10 * (59 // 10)\n        brushes_cost = 59 - towels_cost\n        if brushes_cost == 3 * brushes:\n            return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    initial_number = (final_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction('0.49').limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the operations as functions for clarity\n    def add(a, b):\n        return a + b\n    \n    def sub(a, b):\n        return a - b\n    \n    def div(a, b):\n        return a / b\n    \n    # Original expression components\n    A = 285\n    B = 15\n    C = 5\n    D = 2\n    \n    # Calculate all possible outcomes with one or two pairs of brackets\n    outcomes = set([\n        add(A, sub(div(B, C), D)),              # (285 + ((15 / 5) - 2))\n        add(sub(A, div(B, C)), D),              # ((285 - (15 / 5)) + 2)\n        sub(add(A, div(B, C)), D),              # ((285 + (15 / 5)) - 2)\n        sub(A, add(div(B, C), D)),              # (285 - ((15 / 5) + 2))\n        add(div(add(A, B), C), D),              # (((285 + 15) / 5) + 2)\n        sub(div(add(A, B), C), D),              # (((285 + 15) / 5) - 2)\n        div(add(A, B), sub(C, D)),              # ((285 + 15) / (5 - 2))\n        add(A, div(B, sub(C, D))),              # (285 + (15 / (5 - 2)))\n    ])\n    \n    # Return the number of unique outcomes\n    return len(outcomes)\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_teddies = 35\n    number_of_days = 5\n    daily_increase = 2\n    \n    # Let x be the number of teddies made on the first day.\n    # Then, the total number of teddies can be calculated \n    # by the formula for the sum of an arithmetic sequence: \n    # total_teddies = number_of_days * (2*x + (number_of_days - 1) * daily_increase) / 2\n    # Solving for x gives us the number of teddies made on the first day.\n    \n    # Rearrange the formula to solve for x\n    x = symbols('x')\n    equation = Eq(number_of_days * (2 * x + (number_of_days - 1) * daily_increase) / 2, total_teddies)\n    first_day_teddies = solve(equation, x)[0]\n    \n    # The number of teddies made on the fifth day is then:\n    fifth_day_teddies = first_day_teddies + 4 * daily_increase\n    \n    return fifth_day_teddies\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rick, morty = symbols('rick morty')\n    \n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n    \n    solutions = solve((equation1, equation2), (rick, morty))\n    \n    return solutions[rick]\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # There are 9 pink, 7 grey, and 11 blue marbles.\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # To ensure that a blue marble can be drawn without looking, we need to draw all the non-blue marbles first.\n    # In the worst case, all pink and grey marbles are drawn first.\n    non_blue = pink + grey\n\n    # Then we need to draw one more, which will be the first blue marble.\n    ans = non_blue + 1\n\n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_percent = 7.5\n    sales_tax_paid = 30\n\n    price_before_tax = sales_tax_paid * 100 / sales_tax_percent\n\n    return price_before_tax\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n\n    percentage = (part / whole) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    count = 0\n    for perm in permutations(digits):\n        is_coprime_adjacent = True\n        for i in range(len(perm) - 1):\n            if gcd(perm[i], perm[i + 1]) != 1:\n                is_coprime_adjacent = False\n                break\n        if is_coprime_adjacent:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Equation that states there were 30 less boys than girls\n    equation1 = Eq(b, g - 30)\n    \n    # Equation that relates boys and girls after recess\n    equation2 = Eq(b - (3/5) * b, g - (5/8) * g)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    \n    # Initial condition: frogs are 9 more than dragonflies\n    equation1 = Eq(frogs_begin, dragonflies_begin + 9)\n    \n    # After magic show, 11 frogs and 10 dragonflies in total\n    # frogs_begin - x = 11 (x is the number of frogs turned into dragonflies)\n    # dragonflies_begin + x = 10 (x is the number of dragonflies that were frogs before)\n    # No need to solve for x as we can express dragonflies_begin in terms of frogs_begin (subtract 9)\n    equation2 = Eq(frogs_begin - (11 - 10), 11)\n    \n    solution = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solution[frogs_begin]\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        '(285+15) / 5 - 2',\n        '285 + (15 / 5) - 2',\n        '285 +(15 / (5 - 2))',\n        '285+15 / (5 - 2)',\n        '(285 + 15) / (5 - 2)',\n        '((285+15) / 5) - 2',\n        '(285 + (15 / 5)) - 2',\n        '285 + ((15 / 5) - 2)',\n        '285 + (15 / (5 - 2))',\n        '(285+15) / 5 - 2',\n        '285 + (15 / 5 - 2)'\n    ]\n    \n    results = set()\n    \n    for expr in expressions:\n        results.add(eval(expr))\n    \n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if (24 - i) // 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['0', '1', '8']\n    perm = permutations(digits, 3)\n    count = 0\n\n    for p in list(perm):\n        if p[0] != '0':  # exclude numbers starting with 0\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for all three workers to complete the job together.\n    # Let work_done be the rate at which they complete the work when all working together.\n    x = symbols('x')\n    \n    # The rates of work for each pair (A & B, B & C, A & C)\n    work_done_AB = 1/3\n    work_done_BC = 1/4\n    work_done_AC = 1/8\n    \n    # As they complete the work in x hours together, the combined rate is 1/x\n    work_done_all = 1/x\n    \n    # The combined work of all pairs must be the work of A, B and C \n    # plus the work done by the single worker that is counted twice.\n    equation = Eq(work_done_AB + work_done_BC + work_done_AC, 2 * work_done_all)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n    \n    # 45% of 2kg is sugar in the first solution\n    sugar_in_first_solution = 2 * 0.45\n    \n    # 15% of x is sugar in the second solution\n    sugar_in_second_solution = x * 0.15\n    \n    # The total amount of sugar in the mixture (from both solutions) should give 25% of the total weight\n    total_sugar = sugar_in_first_solution + sugar_in_second_solution\n    \n    # The total weight of the mixture is 2 kg + x kg\n    total_weight = 2 + x\n    \n    # The concentration equation is 25% of the total weight is equal to the total amount of sugar\n    equation = Eq(0.25 * total_weight, total_sugar)\n    \n    # Solve for x\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    total_coins = Eq(johnson + vicky, 48)\n    coins_after_giving = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((total_coins, coins_after_giving), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    # Equation 1: if every kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(candies, kids * 18 + 12)\n\n    # Equation 2: if every kid eats 15 candies, the candies are just enough \n    # to be distributed to 2 more kids\n    equation2 = Eq(candies, (kids + 2) * 15)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    sum_last_five = 0\n    for i in range(1, 2018):\n        sum_last_five = (sum_last_five + int('2'*i)) % 100000\n    return sum_last_five\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    final_number = 77\n    initial_number = (final_number / 7) - 6\n    return initial_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david - eugene, 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_six_days = 24\n    fruit_per_day = fruit_per_six_days / 6\n    fruit_per_eight_days = fruit_per_day * 8\n    return fruit_per_eight_days\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of cookies Sam had initially and t be the number of cookies Tim had initially\n    s, t = symbols('s t')\n\n    # Given that Sam and Tim had 1170 cookies in total\n    equation1 = Eq(s + t, 1170)\n\n    # After Sam ate 1/4 of her cookies and Tim bought 1/5 more cookies, Sam had 663 fewer cookies than Tim\n    # Sam's remaining cookies are (3/4)s and Tim's new total is t + (1/5)t = (6/5)t\n    equation2 = Eq((3/4)*s, (6/5)*t - 663)\n\n    # Solve the system of equations to find the number of cookies Sam had initially and how many she ate\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Number of cookies Sam ate is 1/4 of the number of cookies she had initially\n    cookies_eaten = solutions[s] / 4\n\n    return int(cookies_eaten)\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if (all(number % d == 1 for d in [2, 3, 4, 6]) and number % 7 == 0):\n            return number\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate per hour\n    jerry_rate = 1 / 18\n    # Combined rate per hour when Tom and Jerry work together\n    combined_rate = 1 / 6\n    # Tom's rate per hour\n    tom_rate = combined_rate - jerry_rate\n    # Time taken for Tom to complete the job alone\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time David spends walking at the increased speed\n    t = symbols('t')\n\n    # First segment: David walks for 10 minutes at 150 m/min\n    first_segment = 10 * 150\n\n    # Second segment: David walks for t minutes at 200 m/min (150 + 50)\n    second_segment = t * 200\n\n    # Total distance walked: first segment + second segment = 3700 meters\n    total_distance_eq = Eq(first_segment + second_segment, 3700)\n\n    # Solve for t\n    t_solution = solve(total_distance_eq, t)\n\n    # Total time spent walking is the 10 minutes initially plus the time at increased speed\n    total_time = 10 + t_solution[0]\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # After giving away x stamps, Sally will have 40 - x stamps\n    # And Ting will have 32 + x stamps\n    # The ratio of Sally's to Ting's stamps is 1:2\n    # This gives us the equation:\n    # (40 - x) / (32 + x) = 1 / 2\n    # Solving this equation for x will give us the number of stamps Sally gave to Ting,\n    # And Ting's final stamp count will be 32 + x\n\n    # Solve the equation\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((40 - x) / (32 + x), 1 / 2)\n    \n    # Get the solution for x\n    x_value = solve(equation, x)[0]\n    \n    # Calculate the total number of stamps Ting has in the end\n    ting_final = ting_stamps + x_value\n    \n    return ting_final\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    packet_cost = 4\n    budget = 20\n    sweets_per_packet = 8\n    free_sweets_offer = 2\n\n    # Calculate the maximum packets that can be bought with the budget\n    max_packets = budget // packet_cost\n    \n    # Calculate the total sweets including the free ones\n    total_sweets = max_packets * sweets_per_packet + (max_packets // free_sweets_offer)\n    \n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    candies = 88\n    children = 8\n    # To find the minimum number of candies the child with the most can get,\n    # we need to distribute the candies as evenly as possible starting with 1 candy\n    # for the first child, 2 for the second, and so on.\n    base_distr = sum(range(1, children))\n    \n    # Then we distribute the remaining candies to the children\n    remaining = candies - base_distr\n    # The child with the most pieces will be the one who received (children-1) pieces initially\n    # plus the remaining candies after evenly distributing the extras\n    min_most_candies = (children - 1) + remaining\n    \n    return min_most_candies\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total = pink + purple + orange\n\n    # Chance of picking a pink counter initially\n    initial_chance_pink = pink / total\n\n    # Chance of picking a pink counter after adding x extra pink counters\n    # should be double the initial chance\n    # (pink + x) / (total + x) = 2 * initial_chance_pink\n    # Solving for x\n    x = symbols('x')\n    equation = Eq((pink + x) / (total + x), 2 * initial_chance_pink)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Original situation: boys = girls + 40% of girls\n    equation1 = Eq(boys, girls + 0.4 * girls)\n    \n    # After 24 boys and girls leave: boys - 24 = (girls - 24) + 50% of (girls - 24)\n    equation2 = Eq(boys - 24, (girls - 24) + 0.5 * (girls - 24))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zero_count = 0\n    \n    # Factorial of any number n is divisible by all factors upto n\n    # Number of zeroes depends on pairs of 5 and 2 since 5*2=10 which produces a zero\n    # But in factorial of any number n, number of 2's will be more than number of 5's, \n    # as every even number is a multiple of 2.\n    # Hence, the number of zeroes will be equivalent to the number of 5's.\n    while n >= 5:\n        n //= 5\n        zero_count += n\n      \n    return zero_count\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Demi had an equal number of cupcakes and muffins at first.\n    equation1 = Eq(cupcakes, muffins)\n\n    # After selling some, the number of muffins is twice the number of cupcakes.\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Solving the equations to find the initial quantity\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    # Calculate total number of cupcakes and muffins Demi had at first\n    total = solutions[cupcakes] + solutions[muffins]\n\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # She could pick one pair of each color before getting a pair, that's 3 socks.\n    # But to be sure to have at least two pairs of the same color, she would need one more sock of any color,\n    # which in the worst case scenario means she picks another of the two remaining colors.\n    # Therefore, after picking 3, she could pick 3 more socks (one of each color),\n    # making sure the next sock will be part of a pair she already has.\n\n    # 3 initial socks + 3 more to guarantee the next one forms a pair -> total 7\n    \n    # However, we want two pairs of the same color, which means we need to add more socks to guarantee that.\n    # If she has already picked one of each color (3 socks), she could go on to pick 3 more of each color already in hand,\n    # which would guarantee that she ends up with two pairs of one color (since the fourth sock of a color would make a second pair).\n\n    # 3 initial socks + 3 more to get at least one pair + 3 more to guarantee a second pair\n    # So, she needs to pick 3 + 3 + 3 socks in the worst case scenario to be sure to have 2 pairs of the same color.\n\n    ans = 3 + 3 + 3\n    return ans\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25\n    los_angeles_to_shanghai = shanghai_to_los_angeles + 1.5\n    round_trip_time = shanghai_to_los_angeles + los_angeles_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let x be the daily pocket money Helen receives.\n    # Then George receives x + 3 each day.\n    \n    # Daily expenses for both are 5, so they save x - 5 and (x + 3) - 5 respectively.\n    \n    # When Helen saves 60, the total amount saved by George would be 60 + 90.\n    \n    # Let's denote the number of days they save money as n.\n    # Therefore, we have the following equations:\n    # (x - 5) * n = 60\n    # ((x + 3) - 5) * n = 150\n    \n    # Simplifying the equations, we get:\n    # x * n - 5n = 60\n    # x * n - 2n = 150\n    \n    # Subtracting the first equation from the second, we get:\n    # 3n = 90\n    # n = 30\n    \n    # Now plug the value of n back into one of the equations to solve for x:\n    # x * 30 - 5 * 30 = 60\n    # 30x - 150 = 60\n    # 30x = 210\n    # x = 7\n    \n    # So, Helen receives $7 each day.\n    return 7\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    original_ratio = Eq(eddi/wiya, 3/2)\n    new_ratio = Eq((eddi+4)/wiya, 8/5)\n\n    solutions = solve((original_ratio, new_ratio), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d = symbols('a d')\n\n    # The 9th term is a + 8d\n    # The 15th term is a + 14d\n    # According to the first condition,\n    # a + 8d = a + 14d + 18\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # The 20th term is a + 19d\n    # The 12th term is a + 11d\n    # According to the second condition,\n    # a + 19d + a + 11d = 88\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, d))\n\n    # Find the 32th term\n    # The 32th term is a + 31d\n    term_32 = solutions[a] + 31*solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    forward_sum = sum(range(1, 31))  # Sum from 1 to 30\n    backward_sum = sum(range(1, 30))  # Sum from 1 to 29\n    total_sum = forward_sum + backward_sum\n    return total_sum\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Initial travel information\n    initial_speed = 40  # km/h\n    initial_time = 2    # hours\n    remaining_distance = 280  # km\n    remaining_speed = 70  # km/h\n\n    # Calculate the distance covered in the first 2 hours\n    initial_distance = initial_speed * initial_time\n\n    # Calculate the time taken for the remaining distance\n    remaining_time = remaining_distance / remaining_speed\n\n    # Total distance and total time\n    total_distance = initial_distance + remaining_distance\n    total_time = initial_time + remaining_time\n\n    # Calculate average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 4 * four_page_letters + 3 * three_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value = (number // 10**2) % 10\n \n    return place_value * 10**2\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n\n    # There are 5 positions between singing performances where 4 dancing performances can be placed,\n    # but we allow the first position to also have a dancing performance, making it 6 positions.\n    # Choose 4 positions for the dancing performances.\n    dance_positions = combinations(6, 4)\n\n    # Given the positions of the dancing performances, arrange the 6 singing and 4 dancing performances.\n    perm_singing = permutations(6, 6)\n    perm_dancing = permutations(4, 4)\n\n    # Multiply the ways to place dancing with the permutations of singing and dancing respectively.\n    count = dance_positions * perm_singing * perm_dancing\n\n    return count\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Since A = a_0 + a_1 + a_2 + a_3 + a_4 + a_5 + a_6 = 1,\n    # we can find each a_i by subtracting the given fraction from A using A Δ a_i\n    A = 1\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n    \n    # Calculate a_0 by subtracting the other a_i from A\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    # Simplify the fraction a_0 to its simplest form by using Fraction from the fractions module\n    from fractions import Fraction\n    a0_simple = Fraction(a0).limit_denominator()\n    \n    # Find m and n from the simplest form a_0 = m/n\n    m = a0_simple.numerator\n    n = a0_simple.denominator\n    \n    # Return the sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # All digits mentioned in Tom's guesses\n    possible_digits = set('8765102342')\n    \n    # Eliminate all digits from the guess where the teacher replied none are correct\n    possible_digits -= set('5430')\n    \n    # From the first two guesses we know that they share two correct digits, but in wrong positions\n    # These are the shared digits and can only be 0, 1 or 2 based on the eliminated digits\n    shared_digits = (set('8765') & set('1023')) - set('5430')\n    \n    # Now we know that 6 and 4 are correct and in the correct place in the third guess\n    # and 8 cannot be the first digit and 2 cannot be the last digit\n    # so the third digit has to be 6 and the fourth has to be 2\n    correct_digits = {'6': 2, '2': 3}\n    \n    # The remaining shared digit is the second digit as the two guesses have it in common\n    # but not in those positions which only leaves it to be the second digit\n    for digit in shared_digits:\n        if digit not in correct_digits:\n            correct_digits[digit] = 1\n    \n    # The correct number is made up of the remaining numbers from possible_digits,\n    # with '6' as the 3rd digit and '2' as the 4th digit, and the shared digit as the 2nd\n    # The first digit can only be '0' or '1' as those are the remaining options\n    # and since '0' is not an option as a first digit in a four-digit number, the first\n    # digit has to be '1'.\n    correct_digits['1'] = 0\n    \n    # Form the number from the dictionary where keys are digits and values are their positions\n    sorted_digits = sorted(correct_digits.items(), key=lambda item: item[1])\n    guessed_number = ''.join(digit[0] for digit in sorted_digits)\n    \n    return guessed_number\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_type1 = 25\n    days_in_type2 = 20\n  \n    # Find Least Common Multiple of both packet sizes to find when she starts both packets again\n    lcm_days = lcm(days_in_type1, days_in_type2)\n    \n    # As she starts new packets on 1st March, the next start will after lcm_days\n    # March has 31 days, so we find how many days pass into the next month(s)\n    days_past_march = lcm_days % 31\n    \n    # Initialize the count of months passed and starting month (March = 3)\n    months_passed = 0\n    month = 3 # March\n  \n    # Calculate the number of months passed and the date\n    while days_past_march > 0:\n        # Calculate the number of days in the current month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            days_in_month = 31\n        elif month == 2:\n            days_in_month = 28\n        else:\n            days_in_month = 30\n        \n        if days_past_march > days_in_month:\n            days_past_march -= days_in_month\n            month += 1\n            if month > 12: # Reset to January\n                month = 1\n        else:\n            break\n    \n    # Format the date as \"day month\" (e.g., \"15 4\" for 15th April)\n    next_start_date = f\"{days_past_march} {month}\"\n    \n    return next_start_date\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    incorrect_expr = (x / 4) - 25\n    corrected_expr = (x * 4) + 25\n    incorrect_eq = Eq(incorrect_expr, 2021)\n    \n    correct_number = solve(incorrect_eq, x)[0]\n    correct_answer = (correct_number * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna_books = symbols('donna_books')\n    chloe_books = 4 * donna_books\n    equation = Eq(chloe_books - donna_books, 816)\n    solution = solve(equation, donna_books)\n    return solution[donna_books]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for the unknown variable\n    x = symbols('x')\n\n    # Setting up the equation based on the given question\n    equation = Eq((x + 4) / 8, 3)\n\n    # Solving the equation\n    sol = solve(equation, x)\n\n    # There should only be one solution since it is a linear equation\n    return sol[0]\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import factorint\n\n    def count_trailing_zeros(n):\n        factors = factorint(n)\n        # Count factors of 5 and 2 since 10 = 5 * 2\n        count_2s = factors.get(2, 0)\n        count_5s = factors.get(5, 0)\n        # The number of trailing zeros is equal to the minimum of count_2s and count_5s\n        return min(count_2s, count_5s)\n\n    product = 75 * 56 * 12 * 105\n    num_zeros = count_trailing_zeros(product)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    cycle = [9, 1, 9, 1] # Cycle of ones place for powers of 9\n    power = 99\n    index = power % len(cycle) - 1 # Find the index in the cycle\n    return cycle[index]\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            b = (193 - 3 * a) / 11\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the variables\n    # c: children, a: adults, b: boys, g: girls\n    c, a, b, g = symbols('c a b g')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(a, 3 * c)\n    equation2 = Eq(b, 2 * g)\n    equation3 = Eq(a, g + 176)\n    \n    # Since boys and girls are both children, we have\n    equation4 = Eq(c, b + g)\n\n    # Now, we solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, a, b, g))\n\n    # Total people at the concert is the sum of adults and children\n    total_people = solutions[a] + solutions[c]\n\n    return total_people\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Here we have to solve the equation 7 * (10a + b) = 100a + b\n    # Simplifying that equation gives us 70a + 7b = 100a + b\n    # Let's now find a and b.\n    \n    for a in range(1, 10):  # a cannot be 0 since it's the tens digit.\n        for b in range(10):\n            if 7 * ((10 * a) + b) == ((100 * a) + b):\n                return (10 * a) + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and apple.\n    banana_price, apple_price = symbols('banana_price apple_price')\n\n    # Ellie's equation: 2 bananas + 3 apples = 1.5 pounds\n    ellie_eq = Eq(2 * banana_price + 3 * apple_price, 1.50)\n\n    # Beth's equation: 3 bananas + 2 apples = 1.45 pounds\n    beth_eq = Eq(3 * banana_price + 2 * apple_price, 1.45)\n\n    # Solve the equation system for banana_price and apple_price\n    solutions = solve((ellie_eq, beth_eq), (banana_price, apple_price))\n\n    # Annabella pays for 1 banana and 1 apple\n    annabella_pays = solutions[banana_price] + solutions[apple_price]\n\n    return annabella_pays\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # Calculate how many houses each worker can build in one day\n    houses_per_worker_per_day = (14 / 3) / 4\n    \n    # Calculate the total number of houses built by 9 workers in 2 days\n    total_houses = houses_per_worker_per_day * 9 * 2\n    \n    return int(total_houses)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "from sympy import symbols, Eq, solve, N\n\ndef solution():\n    b, r, f = symbols('b r f', integer=True)\n    ages_sum = Eq(b + r + f, 28)\n    fido_age = Eq(f, b - 10)\n    # Ages are distinct, and since Fido is the youngest, he must be at least 1,\n    # and Bob, being the oldest, must be at least 3 years older than Fido,\n    # so we start the range at 1 + 3.\n    min_product = float('inf')\n    for bob_age in range(4, 28):\n        for fido_age in range(1, bob_age - 2):  # Fido is younger than Bob\n            rex_age = 28 - bob_age - fido_age  # Calculate Rex's age\n            # Ensure all dogs have different ages\n            if fido_age != rex_age and rex_age != bob_age and rex_age > fido_age:\n                product = fido_age * rex_age * bob_age\n                if product < min_product:\n                    min_product = product\n    \n    return int(min_product)\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    # Let's assume the total number of people in the funfair is x.\n    # Then the number of children is (2/5)*x, number of women is (1/4)*x,\n    # and the number of men is x - (2/5)*x - (1/4)*x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Total number of people at the funfair\n    children = (2/5) * x\n    women = (1/4) * x\n    men = x - children - women\n\n    # Equation based on the problem statement: there were 20 more children than men\n    equation = Eq(children, men + 20)\n\n    # Solve for x\n    total_people = solve(equation, x)\n\n    return total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_ball = symbols('cost_per_ball')\n    total_money = symbols('total_money')\n\n    # If he buys 5 balls, he will have $15 left\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n\n    # If he buys 8 balls, he will need $12 more\n    equation2 = Eq(8 * cost_per_ball - total_money, 12)\n\n    # Solve the two equations to find the cost of one ball\n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n\n    # The factors of 75 are 1, 3, 5, 15, 25, 75. Since 'A' and 'B' are 3-digit numbers,\n    # they must be multiples of 75. The smallest 3-digit multiple of 75 is 100 and the\n    # largest is 999, but we can start from 2 * 75 (150) since 'A' and 'B' should be distinct.\n    for A in range(150, 1000, 75):\n        for B in range(150, 1000, 75):\n            if A != B and len(set(str(A)) & set(str(B))) == 2:\n                max_sum = max(max_sum, A + B)\n\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    # Each bounce is 1/3 the height of the bounce before, so to find the height after the first bounce:\n    height_after_first_bounce = height_after_second_bounce * 3\n    # Apply the same logic to find the initial height from which the ball was dropped:\n    initial_height = height_after_first_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The tuple (remainder, modulus)\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    \n    # Using the Chinese Remainder Theorem to find the solution\n    lcm, remainder = solve_congruence(congruences)\n    \n    return remainder\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the numerator of the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = Fraction(2, 25)\n    # Calculate the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n    \n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - Fraction(2, 3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = Fraction(8, 3)\n    # Calculate the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n    \n    # Sum of the first and second complex fractions\n    result = complex_fraction1 + complex_fraction2\n    \n    # Convert to a simplified fraction\n    ans = result.limit_denominator()\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let X be the time Lee takes to finish the job alone\n    # Let Y be the time Nancy takes to finish the job alone\n    X, Y = symbols('X Y')\n\n    # 1/X is Lee's work rate and 1/Y is Nancy's work rate\n    \n    # Equation for both working together\n    equation1 = Eq((1/X + 1/Y), 1/10)\n    \n    # Equation for Lee working 6 hours and then Nancy working 20 hours\n    equation2 = Eq((6/X + 20/Y), 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (X, Y))\n    \n    # Get the work time for Nancy\n    nancy_time = solutions[Y]\n    \n    return nancy_time\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # total number of pupils\n    total_pupils = 40 + 30\n    # total score for both classes\n    total_score = total_pupils * 90\n    # let average_a be the average score of class A\n    # therefore, average_b will be average_a + 7\n    # average_a * number_of_pupils_A + (average_a + 7) * number_of_pupils_B = total_score\n    average_a = (total_score - 7 * 30) / (40 + 30)\n    average_b = average_a + 7\n    return average_b\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):  # Jeremy has 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy has 3 twenty-pence coins\n            for fifty_pence in range(2):  # Jeremy has 1 fifty-pence coin\n                if 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    per_boat = 7\n\n    num_boats = (students + per_boat - 1) // per_boat\n\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250 ** 2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    total_people = 30\n    people_behind_mark = 16\n    mark_position = total_people - people_behind_mark\n    people_in_front_of_mark = mark_position - 1  # Subtract Mark himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for i in range(1, 201):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for j in range(10):\n        number = int(f\"125{j}6\")\n        if number % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    denom1 = 2007 * 2008\n    denom2 = 2008 * 2009\n    denom3 = 2009\n\n    # Combine the fractions by finding a common denominator\n    common_denominator = denom1 * denom3\n\n    numer1 = common_denominator // denom1\n    numer2 = common_denominator // denom2\n    numer3 = common_denominator // denom3\n\n    # Sum the numerators\n    total_numer = numer1 + numer2 + numer3\n\n    # The value of the complex fraction is the reciprocal of the sum\n    ans = common_denominator / total_numer\n\n    return int(ans)\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq((number + 7) * 6, 66)\n\n    original_number = solve(equation, number)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    # Define the new operation\n    def new_operation(a, b):\n        return 5*a - 2*b\n\n    # Using the equation 9 ⨀ x = 33, we can solve for x\n    # From the operation definition, this equation becomes 5*9 - 2*x = 33\n    # Solving for x gives us x = (5*9 - 33) / 2\n    \n    x = (5*9 - 33) / 2\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(25))\n    sum_of_cubes = sum(i**3 for i in range(24))\n    ans = sum_of_squares + sum_of_cubes\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    dividend = 476\n    divisor = 17\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n\n    # Time spent going up and down\n    time_up = (ratio_up / total_ratio) * total_time\n    time_down = (ratio_down / total_ratio) * total_time\n\n    # let the speed going down be x m/min, the speed going up will be x - 10 m/min\n    # Distance = Speed * Time\n    # Distance up = Distance down\n    # (x - 10) * time_up = x * time_down\n\n    # Solving for x using the expressions for time_up and time_down\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((x - 10) * time_up, x * time_down)\n    speed_down = solve(equation, x)[0]\n\n    # Calculate speed going up\n    speed_up = speed_down - 10\n\n    # Total distance is the sum of distances going up and down\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one table and one chair\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n\n    # Five tables and twelve chairs cost £720\n    equation1 = Eq(5 * table_cost + 12 * chair_cost, 720)\n\n    # Each table costs £25 more than each chair\n    equation2 = Eq(table_cost - chair_cost, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    days_25 = 25\n    days_20 = 20\n\n    lcm_days = lcm(days_25, days_20)\n\n    next_start_day = 1 + lcm_days\n\n    return next_start_day\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    days = symbols('days')\n    watermelons_initial = 94\n    pineapples_initial = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    watermelons_left = watermelons_initial - watermelons_per_day * days\n    pineapples_left = pineapples_initial - pineapples_per_day * days\n    \n    equation = Eq(pineapples_left, 3 * watermelons_left)\n\n    solutions = solve(equation, days)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Tom's current age be 't' and Jerry's current age be 'j'\n    t, j = symbols('t j')\n    \n    # Tom will be twice his age in 4 years, equation: t + 4 = 2 * t\n    equation1 = Eq(t + 4, 2 * t)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10, equation: (t - 3) + (j - 3) = 10\n    equation2 = Eq((t - 3) + (j - 3), 10)\n    \n    # Solve the equations for 't' and 'j'\n    solutions = solve((equation1, equation2), (t, j))\n\n    # Tom's current age\n    tom_age = solutions[t]\n\n    # Jerry's current age\n    jerry_age = solutions[j]\n    \n    # In how many years from now will Jerry's age be doubled, equation: j + x = 2 * j\n    # We can deduce that x = j, since the age should double from the current age.\n    years_till_double = jerry_age\n\n    return years_till_double\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Yun's cars\n    yun_cars = 4\n    yun_fruits_kg = 24.2\n    yun_per_car = yun_fruits_kg / yun_cars\n\n    # Yang's trucks\n    yang_trucks = 50\n    yang_fruits_kg = 410\n    yang_per_truck = yang_fruits_kg / yang_trucks\n\n    # Difference in mass\n    difference = yang_per_truck - yun_per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival_time = (9 * 60) + 22  # Convert 9:22 AM to minutes\n    last_bus_time = aiden_arrival_time - (aiden_arrival_time % bus_interval)\n    next_bus_time = last_bus_time + bus_interval\n    wait_time = next_bus_time - aiden_arrival_time\n    return wait_time\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5 / 9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    ages = [7, 5, 29, 31] # Current ages\n    year = 0\n\n    while True:\n        year += 1\n        future_ages = [age + year for age in ages]\n\n        if all(isprime(age) for age in future_ages):\n            return future_ages[3]  # Father's age in the future\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n    \n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((i**2 if i % 2 != 0 else -i**2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    road_length = 50\n\n    # Number of gaps between lamp posts\n    gaps = total_flowers // flowers_between_posts\n\n    # Number of lamp posts is one more than the number of gaps\n    number_of_posts = gaps + 1\n\n    # Distance between each lamp post\n    distance_between_posts = road_length / number_of_posts\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks = days_until_birthday // days_in_week\n    return weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_met = 5\n    \n    # The distance they meet at is the sum of the distances both have travelled in 5 minutes.\n    distance_met = (eddie_speed + brother_speed) * time_met\n    \n    return distance_met\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # The maximum number of different parts created by n circles on a plane can be given by the formula:\n    # parts = 1 + n(n + 1)/2\n    # This is gotten from the idea that each new circle can intersect all previous circles in at most 2 new points\n    # and each time we add a circle, we can create the maximum number of regions by making sure it intersects\n    # each of the previous circles in 2 distinct points.\n\n    n = 7\n    parts = 1 + n * (n + 1) // 2\n\n    return parts\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_packed = total_books - books_given_away\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # The unit digit of a power of 4 repeats in a pattern: 4, 6, 4, 6, ...\n    # Since 4^1 has a unit digit of 4, 4^2 has a unit digit of 6, then it alternates.\n    # We need to find the pattern for 44^2008, but only the unit digit of the base 4 matters.\n    # Here, the exponent is 2008, which is even.\n    # Thus, the unit digit of 4^(even number) will always be 6.\n    # Hence, the unit digit of 44^2008 will be 6 as well.\n\n    return 6\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    adults_at_party = 40\n    males_fraction = 3/5\n    male_adults = adults_at_party * males_fraction\n    return int(male_adults)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to each location\n    home_to_audio = 6\n    home_to_book = 4\n    home_to_chapel = 5\n\n    # Number of paths from each location to school\n    audio_to_school = 2\n    book_to_school = 2\n    chapel_to_school = 3\n\n    # Total number of paths from home to school\n    total_paths = (home_to_audio * audio_to_school) + (home_to_book * book_to_school) + (home_to_chapel * chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_time_hour = 12\n    arrival_time_minute = 40\n    duration_hours = 2\n    duration_minutes = 40\n\n    leave_time_minute = arrival_time_minute + duration_minutes\n    leave_time_hour = arrival_time_hour + duration_hours + leave_time_minute // 60\n    leave_time_minute = leave_time_minute % 60\n\n    # Convert to 12-hour format if needed\n    if leave_time_hour > 12:\n        leave_time_hour -= 12\n\n    return leave_time_hour, leave_time_minute\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belle = symbols('belle')\n    eddie = symbols('eddie')\n    \n    equation1 = Eq(belle, 49)  # Belle has 49 ice-cream sticks\n    equation2 = Eq(belle + 11, eddie)  # After Eddie gave Belle 11 sticks, they have the same number\n    \n    solutions = solve((equation1, equation2), (belle, eddie))\n    \n    return solutions[eddie]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    # Number of intervals between lamp posts is one less than the number of lamp posts\n    num_intervals = 50 - 1\n    \n    # distance between each lamp post\n    distance_between_posts = 2\n    \n    # total length of the road is the number of intervals times the distance between lamp posts\n    length_of_road = num_intervals * distance_between_posts\n    \n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent the number of coins John has, and k represent the number of coins Kofi has.\n    j, k = symbols('j k')\n    \n    # We set up two equations based on the problem statement: \n    # 1. John and Kofi have 25 coins together.\n    # 2. If John gives Kofi 4 coins, Kofi will have 3 fewer coins than John.\n    equation1 = Eq(j + k, 25)\n    equation2 = Eq(j - 4, k + 4 + 3)\n    \n    # We solve the two equations simultaneously for j and k.\n    solutions = solve((equation1, equation2), (j, k))\n    \n    # John's number of coins is represented by 'j' in the solutions.\n    return solutions[j]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    total_tea = jason_tea + belinda_tea\n    equal_tea = total_tea / 2\n    tea_to_give = jason_tea - equal_tea\n    \n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '246'\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    \n    return count\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    heads_eq = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    feet_eq = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    solutions = solve((heads_eq, feet_eq), (normal_rabbits, special_rabbits))\n\n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7  # Cost of each banana\n    total_cost = cost_per_banana * 13  # Total cost for 13 bananas\n    change = (10 * 100) - total_cost  # Change from £10 (converted to pence)\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum_odd = sum(range(1, 101, 2))  # Sum of all odd numbers from 1 to 99\n    sum_even = sum(range(2, 101, 2))  # Sum of all even numbers from 2 to 100\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    decimal_part = str(1/70).split('.')[1]\n    cycle = decimal_part[:6]  # recurring cycle of decimal part of 1/70\n    cycle_length = len(cycle)\n    position = 500 % cycle_length\n    ans = int(cycle[position - 1]) if position != 0 else int(cycle[-1])\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    sweets_neelesh_after_eating = 4\n    sweets_neelesh_before_eating = sweets_neelesh_after_eating + 1\n    fraction_given_to_neelesh = 1 / 6\n    \n    total_sweets = sweets_neelesh_before_eating / fraction_given_to_neelesh\n    sweets_ayesha_left = total_sweets - sweets_neelesh_before_eating\n    \n    return sweets_ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_A = 80\n    total_marbles = 560\n\n    box_B, box_C = symbols('box_B box_C')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(box_B, 2 * box_C)\n    equation2 = Eq(box_A + box_B + box_C, total_marbles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (box_B, box_C))\n\n    return solutions[box_C]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gummy_bears, lollipops = symbols('gummy_bears lollipops')\n\n    # Original ratio\n    equation1 = Eq(gummy_bears/lollipops, 5/7)\n    \n    # New ratio after adding 120 pieces to each pile\n    equation2 = Eq((gummy_bears + 120)/(lollipops + 120), 4/5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (gummy_bears, lollipops))\n\n    # Calculate total number of candies now\n    total_candies = solutions[gummy_bears] + solutions[lollipops] + 120 + 120\n\n    return total_candies\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n    \n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    last_term = 31\n    term_number = 10\n    common_difference = 28 - 25\n\n    first_term = last_term - (term_number - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    return sum(numbers) * 3\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    terms = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    integers = set(range(1, 21))  # Using a set to keep track of possible numbers.\n    max_length = 0\n    # Iterate through all combinations of numbers from the 20 integers.\n    for start in range(1, 7):  # Only need to check the first 6 numbers to avoid redundancy.\n        chosen = set()\n        for i in range(start, 21, 5):  # Pick numbers with a difference of 5 each starting from 'start'.\n            if i in integers:\n                chosen.add(i)\n        remaining = integers - chosen  # Remove the chosen integers and their neighbors with a difference of 5.\n        for j in range(1, 6):  # Check neighbor positions for each chosen integer.\n            remaining -= {x + j for x in chosen}  # Exclude numbers that would have a difference of 5.\n            remaining -= {x - j for x in chosen}\n        chosen |= remaining  # Update 'chosen' with integers from 'remaining'.\n        # Update 'max_length' if we find a larger set of numbers fulfilling the condition.\n        if len(chosen) > max_length:\n            max_length = len(chosen)\n    return max_length\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for cake and biscuit\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Define the two equations based on the problem statement\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    # Return the calories for one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, mother_age = symbols('john_age mother_age')\n\n    # The first equation represents the age relationship 8 years from now and 20 years ago\n    equation1 = Eq(john_age + 8, mother_age - 20)\n\n    # The second equation is when mother's age is 5 times John's age\n    equation2 = Eq(mother_age, 5 * john_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, mother_age))\n\n    # Age difference is constant.\n    age_difference = solutions[mother_age] - solutions[john_age]\n\n    # Determine John's age when his mother is 5 times his age\n    johns_past_age = symbols('johns_past_age')\n    mother_past_age = age_difference + johns_past_age\n\n    equation3 = Eq(mother_past_age, 5 * johns_past_age)\n\n    johns_past_age_solution = solve(equation3, johns_past_age)[0]\n\n    return johns_past_age_solution\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    num = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - 2016.875 * Fraction(11, 3)\n    denom = ((2017 + Fraction(1, 3)) - 2016.875) * 17\n    fraction_part = 3 + Fraction(23, 32)\n    \n    result = (num / denom) * fraction_part\n\n    return float(result)\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for digit1 in range(0, 10):\n            total_pencils = int(f\"{B}{digit1}\")\n            if total_pencils % 44 == 0:\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def base_3_subtraction(a, b):\n    result = ''\n    carry = 0\n\n    a = a[::-1]\n    b = b[::-1]\n\n    for i in range(max(len(a), len(b))):\n        digit_a = int(a[i]) if i < len(a) else 0\n        digit_b = int(b[i]) if i < len(b) else 0\n\n        sub = digit_a - digit_b - carry\n\n        if sub < 0:\n            sub += 3\n            carry = 1\n        else:\n            carry = 0\n        \n        result = str(sub) + result\n\n    return result.lstrip('0')  # Remove leading zeros\n\ndef solution():\n    # Convert the decimal numbers to base 3\n    a_base_3 = dec_to_base_3(12101)\n    b_base_3 = dec_to_base_3(2210)\n    \n    # Perform the subtraction in base 3\n    return base_3_subtraction(a_base_3, b_base_3)\n\ndef dec_to_base_3(n):\n    if n == 0:\n        return '0'\n    nums = []\n    while n:\n        n, r = divmod(n, 3)\n        nums.append(str(r))\n    return ''.join(reversed(nums))\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set()\n        for d in range(2, 11):\n            remainders.add(M % d)\n        if len(remainders) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24\n    william_time = 8\n\n    lcm = (tom_time * william_time) // math.gcd(tom_time, william_time)\n\n    return lcm\n\nimport math\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n    solutions = solve(equation, reema)\n    \n    return solutions[reema]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_for_correct = 12\n    total_questions = correct_answers + wrong_answers\n    \n    total_marks = correct_answers * marks_for_correct\n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition_students = 30\n    art_competition_students = 26\n\n    # Using Inclusion-Exclusion Principle for two sets\n    both_competitions = math_competition_students + art_competition_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    def find_smallest_multiplier(n):\n        factors = factorint(n)\n        multiplier = 1\n        for prime, exponent in factors.items():\n            if exponent % 2 != 0:  # If exponent is odd\n                multiplier *= prime\n        return multiplier\n\n    ans = find_smallest_multiplier(28)\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n\n    # Plus one, because there’s a post at each end of the field\n    num_posts = (field_length // post_interval) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    # Loop through all possible two-digit numbers\n    for a in range(1, 10):  # a cannot be 0 as it's a two-digit number\n        for b in range(0, 10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    num_containers = (apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return 612 // 34 * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    return ans\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finish_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch duration was 20 minutes\n    lunch_duration = timedelta(minutes=20)\n    \n    # Time when Benson started lunch\n    lunch_start_time = lunch_finish_time - lunch_duration\n    \n    # Benson watched television for 20 minutes before lunch\n    tv_duration = timedelta(minutes=20)\n    \n    # Time when Benson started watching television\n    tv_start_time = lunch_start_time - tv_duration\n    \n    # Benson played for 10 minutes after reaching home\n    play_duration = timedelta(minutes=10)\n    \n    # Time when Benson reached home\n    home_arrival_time = tv_start_time - play_duration\n    \n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Treat A and B as a single entity since they must be next to each other.\n    # Now we have 5 entities to arrange: AB, C, D, E, F\n    entity_count = 5\n\n    # Find the number of permutations of these 5 entities.\n    permutations_of_entities = factorial(entity_count)\n\n    # A and B can be arranged in 2 ways: AB or BA.\n    permutations_of_AB = factorial(2)\n\n    # The total number of ways is the product of the two permutations.\n    total_permutations = permutations_of_entities * permutations_of_AB\n\n    return total_permutations\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    growth_factor = (5 / 2)  # Since multiplying by 5 and then halving is equivalent to multiplying by 5/2.\n    years = 5\n\n    final_population = initial_population * (growth_factor ** years)\n\n    return final_population\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # The largest two-digit number\n    max_number = 99\n    # Iterate backwards from the largest two-digit number to find the one that satisfies the condition\n    for number in range(max_number, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n    return -1  # In case there is no such number, though there should be one\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let's denote x as the number of steps in the escalator.\n    # When Peter walks at 1 step per second, it takes him 10 seconds to reach the top. \n    # Thus, the escalator is moving up at (x - 10) steps in those 10 seconds.\n    \n    # When he increases his rate to 2 steps per second, it takes him 8 seconds to reach the top. \n    # The escalator, therefore, contributes (x - 16) steps in those 8 seconds.\n    \n    # Since the escalator moves at a constant speed, the number of steps it contributes must be in proportion to the time.\n    # So, we have the ratio (x - 10) / 10 = (x - 16) / 8, because the escalator moves the same number of steps per second in both scenarios.\n    \n    # Solving this gives us x\n    # (x - 10) / 10 = (x - 16) / 8\n    # 8*(x - 10) = 10*(x - 16)\n    # 8x - 80 = 10x - 160\n    # 160 - 80 = 10x - 8x\n    # 80 = 2x\n    # x = 40\n    \n    # The number of steps of the escalator is 40.\n    return 40\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    # Given relationships\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n\n    # Total weight\n    equation3 = Eq(4*red + 5*green + 7*purple, 642)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    \n    # The minimum class size is the total number of sweets divided by the minimum sweets per student\n    class_size = total_sweets // min_sweets_per_student\n    \n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    product_246_135 = 246 * 135\n    difference_248_246 = 2\n\n    additional_product = difference_248_246 * 135\n    product_248_135 = product_246_135 + additional_product\n\n    return product_248_135\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_parts = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum_of_parts\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    number_of_children = (total_stickers - remaining_stickers) // stickers_per_child\n    \n    return number_of_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)  # Jon has 30% more money than Miguel\n    equation2 = Eq(jon + miguel, 46)  # Together they have £46\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    # Let s be the amount Sally initially had, and k be the amount Ken initially had.\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Sally's chocolates (s) and Ken's chocolates (k)\n    s, k = symbols('s k')\n\n    # Set up the initial ratio equation: s/k = 5/7\n    ratio_equation = Eq(s / k, 5/7)\n\n    # Ken gives Sally 24 chocolates, and then Sally has twice as many as Ken\n    # So, (s + 24) = 2 * (k - 24)\n    chocolate_transfer_equation = Eq(s + 24, 2 * (k - 24))\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, chocolate_transfer_equation), (s, k))\n\n    # Ken's final amount after giving 24 chocolates to Sally\n    ken_final = solutions[k] - 24\n    \n    return ken_final\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for pencil and notebook\n    pencil, notebook = symbols('pencil notebook')\n\n    # Set up equations based on the given information\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    # Calculate the total cost of 1 pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    result = 25 / 100 * 1200\n    return result\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Fixed rates\n    base_hours = 40\n    base_cost = 0\n    rate_40_to_50 = 5\n    rate_50_to_60 = 8\n    rate_above_60 = 15\n    \n    # Total cost in the bill\n    total_cost = 82\n    \n    # Calculate additional cost beyond the free hours\n    additional_cost = total_cost - base_cost\n    \n    # Parking hours calculation\n    hours = base_hours\n    \n    # Calculate cost for the first 10 hours past 40 hours at $5 per hour\n    if additional_cost > 10 * rate_40_to_50:\n        hours += 10\n        additional_cost -= 10 * rate_40_to_50\n    else:\n        # If less than 10 * rate_40_to_50 calculate the actual hours and return\n        hours += additional_cost / rate_40_to_50\n        return hours\n    \n    # Calculate cost for the next 10 hours past 50 hours at $8 per hour\n    if additional_cost > 10 * rate_50_to_60:\n        hours += 10\n        additional_cost -= 10 * rate_50_to_60\n    else:\n        # If less than 10 * rate_50_to_60 calculate the actual hours and return\n        hours += additional_cost / rate_50_to_60\n        return hours\n        \n    # Calculate the remaining hours using the rate above 60 hours\n    hours += additional_cost / rate_above_60\n    \n    return hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n    \n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick)/3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Since the digit has to be even and smaller than the tens digit.\n        for tens in range(hundreds + 1, 10, 2):  # Tens digit should be even and greater than hundreds digit.\n            ones = 2 * hundreds  # Condition (c)\n            number = 100 * hundreds + 10 * tens + ones\n            if number % 2 == 0 and number % 9 == 0:  # Conditions (a) and (b)\n                return number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percent = 12 / 100\n    new_pay = original_pay * (1 + increase_percent)\n    return new_pay\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    digits_used = 0\n    pages_count = 0\n\n    while digits_used < 1014:\n        pages_count += 1\n        if pages_count >= 10**(digits_per_page):\n            digits_per_page += 1\n        digits_used += digits_per_page\n\n    return pages_count\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water_more = 32\n    jane_water = audrey_water + jane_water_more\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the magic number\n    magic_number = symbols('magic_number')\n\n    # Define the two equations based on the problem statement\n    equation1 = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    # Solve for the magic number\n    solution = solve((equation1), (magic_number))\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Equation based on the given problem statement\n    original_eq = Eq(3 * x + 6, x + 16)\n    \n    solution = solve(original_eq, x)  # Solve for x\n    \n    return solution[0]  # Since solve() returns a list\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n\n    # Two teachers can be chosen in 2C1 ways\n    num_teachers = comb(2, 1)\n    \n    # Since we need at least 1 female student, we can have the following combinations:\n    # 1 female and 3 males\n    # 2 females and 2 males\n    # 3 females and 1 male\n    # 4 females\n    f1_m3 = comb(6, 1) * comb(7, 3)\n    f2_m2 = comb(6, 2) * comb(7, 2)\n    f3_m1 = comb(6, 3) * comb(7, 1)\n    f4_m0 = comb(6, 4)\n\n    # Summing all the possibilities to get the total\n    total_ways = num_teachers * (f1_m3 + f2_m2 + f3_m1 + f4_m0)\n\n    return total_ways\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    salary_per_month = 3.248\n    debt = 1.6\n\n    months_needed = debt / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n    number_thought = (2 * sides_in_square) - sides_in_triangle\n    return number_thought\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    sum_series = sum(10 * i - 6 * i for i in range(1, 8))\n    total = sum_series + 2021\n    return total\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Alice's and her sister's current ages\n    alice, sister = symbols('alice sister')\n    \n    # Equation representing that Alice is twice as old as her sister\n    equation1 = Eq(alice, 2 * sister)\n    \n    # Equation representing the sum of their ages in 10 years being 53\n    equation2 = Eq((alice + 10) + (sister + 10), 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    # Alice's current age is what we want to find\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of monomial is the sum of the exponents of all the included variables.\n    # Given monomial is -x^(3)y^(2n) and the degree is 5.\n    # So, the degree is 3 (from x^3) + 2n (from y^(2n)) = 5.\n    # To find n, we can solve the equation 3 + 2n = 5.\n\n    # Degree of x^3 is 3\n    degree_x = 3\n\n    # Total degree of the monomial\n    total_degree = 5\n\n    # Solving for n\n    n = (total_degree - degree_x) / 2\n\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n\n    total_milk = milk_per_cup * 45\n    total_tea = tea_per_cup * 45\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n\n    # Solve for the price of a book\n    book_price_value = solve(equation, book_price)\n\n    return book_price_value[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    price_per_gummy = 6 / 100  # convert pence to pounds\n\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(price_per_gummy * (angela + bernice + candice), 3.42)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median is the middle value of the ordered list and \n    # there are 10 numbers, the median will be the average of the 5th and 6th terms.\n    # According to the problem, the median (average of n+7 and n+8) is 20.\n    median = (20 * 2 - (n + 7 + n + 8)) / 2\n\n    # Calculating the mean (average) of the list\n    mean = (n + (n + 2) + (n + 3) + (n + 5) + (n + 7) + (n + 8) + (n + 11) + (n + 14) + (n + 16) + (n + 19)) / 10\n    \n    # Simplify the mean calculation\n    mean = (10 * n + 2 + 3 + 5 + 7 + 8 + 11 + 14 + 16 + 19) / 10\n    mean = (10 * n + 85) / 10\n\n    # Since the median is 20, n+7.5=20 which means n=12.5\n    n = 12.5\n    mean = (10 * n + 85) / 10\n    \n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    return sum(range(1, 101))\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weight of the three apples be a, b, and c, where a > b > c\n\n    # if Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams\n    # Which means (b + c) / 2 = 70\n    # b + c = 140\n\n    # if Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams\n    # Which means (a + b) / 2 = 105\n    # a + b = 210\n\n    # We have two equations:\n    # b + c = 140\n    # a + b = 210\n\n    # Subtracting the first from the second gives us:\n    # (a + b) - (b + c) = (210) - (140)\n    # a - c = 70\n\n    # The weight difference between the heaviest apple (a) and the lightest apple (c) is 70 grams\n    return 70\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    n = 60 // 3  # Middle number\n    largest_num = n + 1\n    return largest_num\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n    num_containers = total_volume / per_container_volume\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    # Total handshakes if everyone shook hands with everyone else.\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Number of handshakes that did not occur between the four members.\n    missed_handshakes = 4 * (4 - 1) // 2\n\n    # Subtracting missed handshakes from total possible handshakes.\n    handshakes_occurred = total_handshakes - missed_handshakes\n\n    return handshakes_occurred\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Bob is always the 3rd animal when counting in any direction.\n    # This implies that there are exactly 2 animals in front of him\n    # and 2 animals behind him in any line he stands in.\n    \n    # If we call the number of rows 'r' and the number of columns 'c',\n    # then there must be exactly 2 rows in front of him and 2 behind him, so r = 5.\n    # Similarly, there must be exactly 2 columns to his left and 2 to his right, so c = 5.\n    \n    # Therefore, the total number of animals in the array is r * c.\n    r = 5\n    c = 5\n    total_animals = r * c\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        if int(str(i) + '0') - i == 27:\n            return i\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represents 1-cent coins, y represents 2-cent coins, z represents 5-cent coins\n    x, y, z = symbols('x y z')\n    \n    # Create the equations based on the problem statements\n    equation1 = Eq(6*x, 5*y)  # 6 one-cent coins' height = 5 two-cent coins' height\n    equation2 = Eq(4*x, 3*z)  # 4 one-cent coins' height = 3 five-cent coins' height\n    equation3 = Eq(x + y + z, 124)  # Sam used a total of 124 coins\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Total value of all coins in cents\n    total_value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n    \n    return total_value\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbol A\n    A = symbols('A')\n    \n    # The number 3|4A3|A is divisible by 3, so the sum of its digits must be divisible by 3\n    # The digits sum to 3 + 4 + A + 3 + A = 10 + 2A\n    # Define equation for divisibility by 3\n    equation = Eq((10 + 2 * A) % 3, 0)\n    \n    # Solve the equation for possible values of A\n    solutions = solve(equation)\n\n    # Select the first solution as the answer\n    return solutions[0]\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    distance_plum = 4 * (41 - 1) # distance between first and last plum tree\n    pine_trees = (distance_plum // 5) + 1 # number of pine trees\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n\n    ans = smallest_multiple + largest_multiple\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    difference_in_salary = 3040 - 2800\n    correct_total_salary = incorrect_total_salary + difference_in_salary\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2 / 5) * green_pens\n        red_pens = (1 / 4) * green_pens\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens.is_integer() and total_pens.is_integer() and blue_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    books_fraction = 0.25\n    dvd_fraction = 0.20\n\n    money_spent_on_books = initial_amount * books_fraction\n    remaining_after_books = initial_amount - money_spent_on_books\n    \n    money_spent_on_dvd = remaining_after_books * dvd_fraction\n    remaining_after_dvd = remaining_after_books - money_spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    monthly_production = m / 12\n    return monthly_production\n\nans = solution(1200)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # A number divisible by 6 must be divisible by both 2 and 3.\n    # Divisibility by 2 means the last digit must be even.\n    # Divisibility by 3 means the sum of the digits must be divisible by 3.\n    \n    # Since we're looking for the largest palindrome, we start from the largest 6-digit number\n    # and go down. The largest 6-digit number is 999999. The largest even 6-digit number is 999998.\n    # We start with 999998 and subtract 2 each time to keep it even.\n    \n    for i in range(999998, 100000, -2):\n        str_i = str(i)\n        # Check if current number is a palindrome\n        if str_i == str_i[::-1]:\n            # Sum the digits of the palindrome to check if divisible by 3\n            if sum(int(digit) for digit in str_i) % 3 == 0:\n                return i  # This is the largest 6-digit palindrome divisible by 6\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pins_needles = 2540\n    sold_pins = 1820\n\n    # Let n be the number of needles she had initially\n    n = symbols('n')\n\n    # The number of needles sold\n    needles_sold = (4/5) * n\n\n    # Equation derived from the remaining pins and needles\n    equation = Eq(total_pins_needles - sold_pins - needles_sold, n - needles_sold)\n\n    # Solve the equation for n\n    needles_initial = solve(equation, n)[0]\n\n    # The number of needles remaining\n    needles_remaining = needles_initial - needles_sold\n\n    # Check Paul's calculation\n    pauls_calculation = 455\n\n    return needles_remaining == pauls_calculation, needles_remaining\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    wanted_length_m = 1.83  # 1.83 meters\n    shortage_cm = 10        # 10 centimeters\n\n    # Convert centimeters to meters\n    shortage_m = shortage_cm / 100.0\n\n    # Calculate the length of the piece in the garage\n    garage_piece_length_m = wanted_length_m - shortage_m\n\n    # You can return the answer in meters or centimeters\n    # Here, I choose to return the answer in meters\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_marbles = symbols('initial_marbles')\n\n    # define the equation based on the problem statement\n    equation = Eq((initial_marbles - (3/8) * initial_marbles) * (1 - (5/7)) + 408, 2 * initial_marbles)\n\n    # solve the equation\n    solutions = solve(equation, initial_marbles)\n\n    # since the problem states that he had some marbles, we're looking for the positive solution\n    initial_count = next(sol for sol in solutions if sol > 0)\n\n    return initial_count\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_sum = sum(pattern)\n    pattern_length = len(pattern)\n    full_patterns = 41 // pattern_length\n    remaining_numbers = 41 % pattern_length\n    \n    sum_full_patterns = full_patterns * pattern_sum\n    sum_remaining_numbers = sum(pattern[:remaining_numbers])\n\n    total_sum = sum_full_patterns + sum_remaining_numbers\n\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 47, 2):\n        five_p = 47 - two_p\n        if five_p % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8) - ((10 + 11 + 12) / 9) + ((11 + 12 + 13) / 10) - ((12 + 13 + 14) / 11)\n    denominator = (1 / 8) - (1 / 9) + (1 / 10) - (1 / 11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial conditions\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        # Increment their ages by 1 each year\n        brian_age += 1\n        father_age += 1\n\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "from itertools import combinations\n\ndef solution():\n    # Sort apples into different piles\n    def find_ways_to_sort(pile):\n        ways = set(combinations(pile, 2))\n        return len(ways)\n    \n    # We have to consider that one pile can have 0 apples\n    # Create a pile with 11 apples and two splitting points (13 choose 2)\n    pile = [0]*13  \n    # Place 11 apples at the end to ensure there are 11 to distribute\n    pile[-1] = 11  \n    # Calculate the number of ways to divide the apples into 3 piles\n    count = find_ways_to_sort(pile)\n    \n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    first_number = round(654876, -2)\n    second_number = round(279745, -2)\n    \n    ans = first_number - second_number\n    return ans\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # The time taken to pass a tree in seconds\n    length_of_train = 480  # The length of the train in meters\n\n    speed = length_of_train / time  # Speed = Distance / Time\n\n    return speed  # Speed of the train in meters per second\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    # The sum needs to be 8, so we start from 1 because we want non-zero natural numbers\n    for i in range(1, 8):\n        for j in range(1, 8):\n            # Check if it is a sum of exactly two numbers\n            if i + j == 8 and i != j:\n                count += 1\n            # For sums of more than two numbers, we should loop further\n            else:\n                for k in range(1, 8):\n                    if i + j + k == 8 and len(set([i, j, k])) == len([i, j, k]):\n                        count += 1\n                    else:\n                        for l in range(1, 8):\n                            if i + j + k + l == 8 and len(set([i, j, k, l])) == len([i, j, k, l]):\n                                count += 1\n    # Each combination is counted twice (e.g., 1+7 and 7+1), so we divide the count by 2\n    return count // 2\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    price_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = price_per_kg * 3.5\n\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    fraction = 2 / 5\n    whole_number = 30\n    result = fraction * whole_number\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n    \n    # Length of the road is the distance between lampposts times the number of gaps between lampposts\n    # The number of gaps is one less than the total number of lampposts\n    length_of_road = distance_between_lampposts * (total_lampposts - 1)\n    \n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return 10**5 / 5**5\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    total_combinations = pastas * sauces * toppings\n\n    return total_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "from math import factorial\n\ndef solution():\n    total_trials = 0\n    for i in range(10):\n        total_trials += factorial(10) // factorial(10 - i)\n    return total_trials\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n\n    full_bags_used = total_guests // bag_size\n    poppers_used = full_bags_used * bag_size\n    poppers_left = total_guests - poppers_used\n\n    return bag_size - poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    ones_digit_sequence = [7, 9, 3, 1]  # The cycle of the ones digit for powers of 7\n    index = (2023 - 1) % len(ones_digit_sequence)  # Subtracting 1 because the sequence is 0 indexed\n    ans = ones_digit_sequence[index]\n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from math import pow, sqrt\n    \n    # Calculate the repeating decimal for -13.3\n    numerator = -40 / 3\n    # Calculate the cube root\n    cube_root = pow(numerator, 1/3)\n    \n    # Calculate the repeating decimal for 4.09\n    repeating_decimal_4_09 = 4 + 1/99\n\n    # Square the repeating decimal\n    square_repeating_decimal_4_09 = repeating_decimal_4_09 ** 2\n    \n    # Calculate the square root\n    sqrt_11_1 = sqrt(10 + 1/9)\n    \n    ans = round(cube_root * square_repeating_decimal_4_09 / (59.24 - sqrt_11_1), 3)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Start to concatenate numbers from 1 to 30 as a string\n    s = ''.join(map(str, range(1, 31)))\n\n    # Since we want the smallest possible number, \n    # remove '9's first as they are the largest digits, \n    # in case there are not enough '9's, remove '8's, '7's and so on\n    for digit in '987654321':\n        s = s.replace(digit, '', 46)\n        if len(s) <= 46:\n            break\n    \n    # Convert the remaining string back to an integer\n    ans = int(s)\n\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is 10001\n    least_five_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999\n    greatest_six_digit_palindrome = 999999\n    \n    # Calculate the difference\n    ans = greatest_six_digit_palindrome - least_five_digit_palindrome\n    return ans\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    fraction_of_girls = 3 / 4\n    total_members = boys / (1 - fraction_of_girls)\n    girls = total_members * fraction_of_girls\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' represent the cost of One banana and 'a' represent the cost of one apple\n    b, a = symbols('b a')\n    \n    # Ellie's payment equation: 2b + 3a = 1.50\n    eq1 = Eq(2 * b + 3 * a, 1.50)\n    # Beth's payment equation: 3b + 2a = 1.45\n    eq2 = Eq(3 * b + 2 * a, 1.45)\n\n    # Solve the system of equations for 'b' and 'a'\n    solution = solve((eq1, eq2), (b, a))\n\n    # Find the cost for 1 banana and 1 apple\n    cost_for_annabella = solution[b] + solution[a]\n    \n    return cost_for_annabella\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years_later = 0\n    while sara_age + lucy_age != 60:\n        sara_age += 1\n        lucy_age += 1\n        years_later += 1\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_person_benches = 6\n    three_person_benches = 9\n\n    total_seats = (two_person_benches * 2) + (three_person_benches * 3)\n\n    return total_seats\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    cost = 15.49\n    paid = 16  # number of pounds in coins\n    \n    change = paid - cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    for i in range(99, 120, 4):\n        sum += i - (i+2)\n    return sum\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of basketballs originally be b and footballs be f\n    f, b = symbols('f b')\n\n    # Initial condition: f = 2/5 * b\n    initial_condition = Eq(f, 2/5 * b)\n    \n    # After selling condition: f = 2/3 * (b - 16)\n    after_selling_condition = Eq(f, 2/3 * (b - 16))\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, after_selling_condition), (f, b))\n    \n    # Total number of footballs and basketballs originally\n    total = solutions[f] + solutions[b]\n    \n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother and y be the current age of the older brother\n    x, y = symbols('x y')\n\n    # When the older brother was x years old, the younger brother was 12 years old\n    # This means the age difference between brothers is y - x\n    # So when the older brother's age was x (same as the younger brother's current age),\n    # the age difference was the same, hence x - 12 = y - x\n\n    # When the younger brother is y years old, the older brother will be 27 years old\n    # So y + (y - x) = 27\n\n    equations = (Eq(x - 12, y - x), Eq(y + (y - x), 27))\n    result = solve(equations, (x, y))\n\n    # Since we are looking for the current age of the older brother this year, return y\n    return result[y]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take one glove from each colour to be unsure of getting a pair.\n    # There are 5 colours, so she takes 5 gloves without guarantee of a pair.\n    # To make sure she has at least one pair, she must take one more glove.\n    gloves_needed = 5 + 1\n    return gloves_needed\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -(-30 // 8) * 8  # Ceiling division to find the first multiple of 8 after 30\n    last_multiple = 82 // 8 * 8  # Floor division to find the last multiple of 8 before 82\n\n    if first_multiple > last_multiple:\n        return 0  # No multiples of 8 in the range\n\n    # Count how many multiples are between the first and last (inclusive)\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter.\n    original_condition = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter.\n    sam_gave = 0.20 * sam\n    sam_after_giving = sam - sam_gave\n    peter_after_receiving = peter + sam_gave\n\n    # Peter gave 25% of his stickers to Sam.\n    peter_gave = 0.25 * peter_after_receiving\n    peter_after_giving = peter_after_receiving - peter_gave\n    sam_after_receiving = sam_after_giving + peter_gave\n\n    # In the end, Sam had 96 stickers more than Peter.\n    final_condition = Eq(sam_after_receiving, peter_after_giving + 96)\n\n    # Solving the equations.\n    solutions = solve((original_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    distance = symbols(\"distance\")\n\n    # The speed difference between the teacher and the students\n    relative_speed_forward = 12 - 8\n    relative_speed_backward = 12 + 8\n\n    # Total time spent by the teacher (in hours, since speeds are in km/h)\n    total_time = 7.2 / 60\n\n    # Equation based on the relative speed and time\n    equation = Eq((distance / relative_speed_forward) + (distance / relative_speed_backward), total_time)\n\n    # Solve the equation for the distance\n    distance_solved = solve(equation, distance)\n\n    return distance_solved[0]\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate round-robin games in each group\n    # In a single round-robin tournament, each team plays each other team once\n    # For a group of n people, there will be n*(n-1)/2 games\n    group_games = (16 / 4) * ((16 / 4) - 1) / 2\n    \n    # There are 4 groups\n    total_group_games = 4 * group_games\n\n    # Calculate knockout stage games\n    # Top 8 -> 4 games, Top 4 -> 2 games, Top 2 -> 1 game for the winner\n    # Additional game for determining 3rd place\n    knockout_games = 8 - 1 + 1  # 8 contestants, subtract 1 to get number of matches to find a winner, and 1 match for third place\n\n    # Total games is the sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n\n    return int(total_games)\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for Flora's age now and her father's age now\n    flora_now, father_now = symbols('flora_now father_now')\n    \n    # Flora's age two years ago\n    flora_two_years_ago = flora_now - 2\n\n    # Father's age two years ago (which was 9 times Flora's age two years ago)\n    father_two_years_ago = father_now - 2\n\n    # Equation representing the age relationship two years ago\n    equation = Eq(father_two_years_ago, 9 * flora_two_years_ago)\n\n    # Flora's current age is 5\n    flora_age_now = 5\n    \n    # solve the equation for father's current age\n    father_age_now = solve(equation.subs(flora_now, flora_age_now), father_now)\n\n    return father_age_now[0]\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(doggo + pusheen + bugcat, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    price_after_increase = original_price * (1 + 10 / 100)\n    price_after_decrease = price_after_increase * (1 - 10 / 100)\n    return price_after_decrease\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    speed1 = 4  # First speed in km/h\n    speed2 = 6  # Second speed in km/h\n    time_difference = (20 + 10) / 60  # Total time difference in hours (30 minutes)\n\n    # Let's assume the distance is 'd' km. Using the relation speed = distance / time.\n    # time1 - time2 = time_difference\n    # d/speed1 - d/speed2 = time_difference\n    # d * (1/speed1 - 1/speed2) = time_difference\n    # d = time_difference / (1/speed1 - 1/speed2)\n    \n    distance = time_difference / (1/speed1 - 1/speed2)\n    \n    return distance\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1.25 * 100\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen = 8\n    pineapple_juice = ramen - 5\n    roasted_duck = 6 * ramen\n\n    total_spent = ramen + pineapple_juice + roasted_duck\n\n    return total_spent\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candies = 3\n    ken_took = 2 * (remaining_candies + 1)\n    remaining_candies += ken_took\n    nini_took = 2 * (remaining_candies - 3)\n    remaining_candies += nini_took\n    ivy_took = 2 * (remaining_candies + 2)\n    remaining_candies += ivy_took\n    eddie_took = 2 * (remaining_candies - 1)\n    initial_candies = remaining_candies + eddie_took\n    return initial_candies\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 0\n    for i in range(1, 6):\n        total_climbed += 7  # Snail climbs 7 meters each day for the first 5 days\n\n    # On the 6th day, the snail climbs only 3 meters\n    total_climbed += 3\n\n    # Calculate how far the snail slides down at night\n    slide_down = (7 - 3) * 5  # The snail has been sliding down an equal amount each night\n\n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    unique_permutations = set(permutations(\"CYZZ\"))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Define unit conversions: m to cm, cm to mm, feet to cm\n    m_to_cm = 100        # 1 m = 100 cm\n    cm_to_mm = 10        # 1 cm = 10 mm\n    feet_to_cm = 30.48   # 1 foot = 30.48 cm\n\n    # Convert all heights to cm\n    height_in_cm = [\n        5 * m_to_cm,         # Convert 5 m to cm\n        120,                 # Already in cm\n        50 / cm_to_mm,       # Convert 50 mm to cm\n        8 * feet_to_cm       # Convert 8 feet to cm\n    ]\n    \n    # Average height for a child around 11 years old is between 140 and 160 cm\n    # Check which heights are realistic based on the average values\n    realistic_height = [height for height in height_in_cm if 140 <= height <= 160]\n    \n    # Return the first realistic height since there should only be one correct estimate\n    return realistic_height[0] if realistic_height else None\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    g, b = symbols('g b') # g for girls, b for boys\n\n    # Set up the equations\n    eq1 = Eq(g, 3 * b) # There were 3 times as many girls as boys\n    eq2 = Eq(2 * g + 3 * b, 99) # Total number of paintbrushes taken\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (g, b))\n\n    # Return the number of girls\n    return solutions[g]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 16\n    C_students = 20\n\n    # Calculate the greatest common divisor of A, B, and C\n    gcd_ab = gcd(A_students, B_students)\n    gcd_abc = gcd(gcd_ab, C_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    avg_boys = 74\n    avg_all = 82\n\n    total_score_all = avg_all * (total_boys + total_girls)\n    total_score_boys = avg_boys * total_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    avg_girls = total_score_girls / total_girls\n    \n    return avg_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    total_marked = 100\n    caught_again = 200\n    marked_caught_again = 25\n\n    proportion_marked = marked_caught_again / caught_again\n    estimated_fish_in_pond = total_marked / proportion_marked\n\n    return int(estimated_fish_in_pond)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15\n    days_for_20_rabbits = total_food / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n    \n    total_sweets = sum(solutions.values())\n    \n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of trees planted by girls and boys\n    girls, boys = symbols('girls boys')\n\n    # Equation representing that the total trees planted was 100\n    equation1 = Eq(girls + boys, 100)\n\n    # Equation representing that the girls planted 12 more trees than boys\n    equation2 = Eq(girls, boys + 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gift\n    remaining_money_needed = dress_cost - total_money\n\n    return remaining_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    start_breakfast_time = wake_up_time + timedelta(minutes=25)\n    finish_breakfast_time = start_breakfast_time + timedelta(minutes=10)\n    arrival_time = finish_breakfast_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n\n    for two_gram_weights in range(0, 78):\n        for three_gram_weights in range(0, 78):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    def sum_of_cubes(n):\n        return ((n * (n + 1)) // 2) ** 2\n    \n    ans = sum_of_cubes(20) - sum_of_cubes(9)\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2 \n    fraction = 1/2\n    quarters_in_one = 4  # because one whole number is four quarters\n\n    quarters = (whole_number + fraction) * quarters_in_one\n    return int(quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_five_assignments = 90 * 5\n    total_score_for_four_assignments = 96 + 85 + 89 + 92\n    score_for_fifth_assignment = total_score_for_five_assignments - total_score_for_four_assignments\n\n    return score_for_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 3 and number % 5 == 4 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_can_swim, girls_cannot_swim, boys_can_swim, boys_cannot_swim = symbols(\n        'girls boys girls_can_swim girls_cannot_swim boys_can_swim boys_cannot_swim'\n    )\n\n    # Total pupils equation\n    total_pupils_eq = Eq(girls + boys, 1690)\n    # More boys than girls equation\n    more_boys_eq = Eq(boys, girls + 90)\n    # Ratios for girls who can/cannot swim\n    girls_ratio_eq = Eq(girls_can_swim / girls_cannot_swim, 31 / 49)\n    # Boys who can swim is 120 less than boys who cannot swim\n    boys_swim_eq = Eq(boys_can_swim, boys_cannot_swim - 120)\n\n    # Total girls can swim and cannot swim is equal to total girls\n    total_girls_swim_eq = Eq(girls_can_swim + girls_cannot_swim, girls)\n    # Total boys can swim and cannot swim is equal to total boys\n    total_boys_swim_eq = Eq(boys_can_swim + boys_cannot_swim, boys)\n\n    # Solve the system of equations\n    solutions = solve(\n        (total_pupils_eq,\n         more_boys_eq,\n         girls_ratio_eq,\n         boys_swim_eq,\n         total_girls_swim_eq,\n         total_boys_swim_eq),\n        (girls, boys, girls_can_swim, girls_cannot_swim, boys_can_swim, boys_cannot_swim)\n    )\n\n    # Calculate the pupils who cannot swim\n    total_cannot_swim = solutions[girls_cannot_swim] + solutions[boys_cannot_swim]\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # You want at least 5 different colors with at least 10 pencils for each color.\n    # You can take 9 pencils from each of 4 colors, and not satisfy the condition.\n    # Then, starting with the next pencil, you will satisfy the condition.\n    # So, you take 9 pencils from each of 4 colors (9*4 = 36), and then 10 pencils from the 5th color.\n    min_pencils = (9 * 4) + 10\n\n    return min_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    num_coaches = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Initial ratio of sweets\n    equation1 = Eq(pip/bud, 4/7)\n\n    # Ratio after Santa gave Bud five sweets\n    equation2 = Eq((pip)/(bud + 5), 8/15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Given dimensions of the field\n    length = 204\n    width = 144\n    total_wheats = 116\n\n    # Since the corners are also planted with wheat, we need to subtract the corner wheats to avoid double counting\n    # There are 4 corners, so we subtract 4 wheats\n    wheats_on_sides = total_wheats - 4\n\n    # There are 2 lengths and 2 widths, so we distribute the remaining wheats on the sides\n    # Each side gets half of the wheats on the sides\n    wheats_per_side = wheats_on_sides // 2\n\n    # The distance between the wheats is equal to the side length divided by (number of wheats on that side minus 1)\n    # We need to subtract one because if there are n wheats, there are (n-1) intervals between them\n    distance_length = length / (wheats_per_side // 2 - 1)\n    distance_width = width / (wheats_per_side // 2 - 1)\n\n    # The distance between each wheat on the longer side (length) must be equal to the distance on the shorter side (width)\n    # Thus we only need to calculate one of them\n    distance_between_wheats = distance_length\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5\n    last_digit_7 = 7 ** 30 % 10\n    last_digit = (last_digit_5 * last_digit_7) % 10\n    return last_digit\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    prime_numbers = [p for p in range(2, 46) if all(p % i != 0 for i in range(2, int(p**0.5) + 1))]\n\n    for a in prime_numbers:\n        for b in prime_numbers:\n            for c in prime_numbers:\n                # A's statement implies that the three numbers cannot form a + b = c or any permutation\n                if a + b == c or a + c == b or b + c == a:\n                    continue\n                # B's statement implies that b - 1 = 7 + a or b - 1 = 7 + c\n                if not (b - 1 == 7 + a or b - 1 == 7 + c):\n                    continue\n                # C's statement, confirmed by the teacher, implies that 2*c + a = b or 2*c + b = a\n                if not (2 * c + a == b or 2 * c + b == a):\n                    continue\n                # All numbers are different\n                if len(set([a, b, c])) < 3:\n                    continue\n\n                # If we have found a valid solution, return the sum\n                return a + b + c\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the points for an A grade as 'a' and for a B grade as 'b'.\n    a, b = symbols('a b')\n\n    # Simon has 4 A's and 4 B's with a score of 36.\n    equation1 = Eq(4*a + 4*b, 36)\n\n    # Peter has 2 A's and 3 B's with a score of 22.\n    equation2 = Eq(2*a + 3*b, 22)\n\n    # Solving the system of equations to find the values for 'a' and 'b'.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Now calculate the score for someone with 3 A grades and 5 B grades.\n    score = solutions[a] * 3 + solutions[b] * 5\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    share = 2\n    joe_squares = total_squares // share\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assign specific values as per the problem statement\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime number nor composite number or zero (considering 1)\n    D = A - 2  # 2 less than the smallest prime number [Note: This would typically be 0]\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 4  # greatest factor of 8 (besides itself)\n    H = 6  # lowest multiple of 6 that is non-zero\n\n    # Tony's phone number\n    ans = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n    return ans\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n\n    # Given ratios and percentages turned into fractions\n    ratio_marry_alexis = 7 / 5\n    \n    # Equations based on the problem statement\n    # Marry's and Alexis's stickers after giving 20% to Charlotte\n    marry_after = marry_initial - 0.20 * marry_initial\n    alexis_after = alexis_initial - 0.20 * alexis_initial\n    charlotte_after = charlotte_initial + 0.20 * (marry_initial + alexis_initial)\n    \n    # Equation based on Charlotte's stickers increasing by 80%\n    equation1 = Eq(charlotte_after, 1.80 * charlotte_initial)\n    \n    # Equation based on the ratio of stickers Marry and Alexis had initially\n    equation2 = Eq(marry_initial / alexis_initial, ratio_marry_alexis)\n    \n    # Equation based on Marry having 20 more stickers than Charlotte in the end\n    equation3 = Eq(marry_after, charlotte_after + 20)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (marry_initial, alexis_initial, charlotte_initial))\n\n    # We want the initial number of stickers Alexis had\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60\n    \n    fraction_of_day = (1 / 4) * (1 / 6) * (1 / 8)\n    \n    seconds = seconds_per_day * fraction_of_day\n    \n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Assuming we have other people in the family besides Eddie, his mom, and his dad.\n    # Let's consider them as one unit plus the others in the family.\n    \n    # For the purpose of this demonstration, let's assume there are 2 other family members\n    # So in total we have the Eddie-Mom-Dad unit + 2 other members = 3 units.\n    \n    # First, calculate the number of ways to arrange these 3 units.\n    # This is simply 3! (3 factorial) since we have 3 units to arrange.\n    family_units = 3\n    arrangement_of_units = math.factorial(family_units)\n    \n    # Now calculate the number of ways Eddie, his mom, and his dad can arrange themselves within their unit.\n    # This is also a factorial, and since there are 3 of them it is 3! (3 factorial).\n    family_internal_arrangement = math.factorial(3)\n    \n    # The total number of different ways the family can line up is the product of the two calculations.\n    total_arrangements = arrangement_of_units * family_internal_arrangement\n\n    return total_arrangements\n\nimport math\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    all_perms = set(permutations(digits, 4))\n    return len(all_perms)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Iterate through all possible 4 digit numbers where the first and last digits are the same\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                pip_number = 1000*i + 100*j + 10*k + i\n                bud_number = 1000*i + 100*k + 10*j + i\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let the amount of grass available be 'grass' and the daily consumption rate per cow be 'rate'.\n    # From the problem, we know that:\n    # grass = 25 cows * 10 days * rate\n    # grass = 15 cows * 20 days * rate\n    # Setting these two equations equal to each other:\n    # 25 * 10 * rate = 15 * 20 * rate\n    # Simplifying, we get:\n    # 25 * 10 = 15 * 20\n    # 250 = 300, which can not be true since rate does not equal to zero.\n    # Hence, we've made a wrong assumption about the total amount of grass,\n    # Instead, it should be:\n    # The total amount of grass fields productivity is the same in both cases:\n    # 25 cows * 10 days = 15 cows * 20 days\n    # So, we have:\n    # 25 * 10 = 15 * 20\n    # To find how many cows can be fed for 50 days, we use the total productivity:\n    # total_productivity = 25 * 10\n    # cows_for_50_days = total_productivity / 50\n    # Return the result.\n    total_productivity = 25 * 10\n    cows_for_50_days = total_productivity / 50\n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    days = 0\n    pages = 0\n    while pages + days + 1 <= 95:\n        days += 1\n        pages += days\n    return days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the initial numbers\n    oranges, lemons = symbols('oranges lemons', integer=True)\n    \n    # Initial ratio 3:5\n    initial_ratio = Eq(3 * lemons, 5 * oranges)\n\n    # After selling 48 oranges, the ratio becomes 1:2\n    new_ratio = Eq(oranges - 48, 2 * lemons)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    actual_minuend = 166\n    actual_difference = actual_minuend - (incorrect_minuend - incorrect_difference)\n    \n    return actual_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # since the first day is 1/3 of the second day\n    third_day = (5 / 3) * second_day  # since the third day is 5/3 of the second day\n    total_sold = first_day + second_day + third_day\n    return int(total_sold)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3 categories of books: 3 maths, 2 English, 3 other books.\n    # Let's consider each category of books as a single object initially,\n    # hence we have: 1 math block, 1 English block, and 3 other books\n    # which can be arranged in 5! ways.\n    total_blocks = factorial(5)\n    \n    # However, within the math block, the 3 maths books can be arranged in 3! ways,\n    # and within the English block, the 2 English books can be arranged in 2! ways.\n    math_books_arrangement = factorial(3)\n    english_books_arrangement = factorial(2)\n    \n    # The total arrangement is product of all possible arrangements\n    total_arrangements = total_blocks * math_books_arrangement * english_books_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30 * original_price\n    membership_reduction = 100\n    sales_tax_rate = 0.10\n\n    discounted_price = original_price - discount\n    final_price_before_tax = discounted_price - membership_reduction\n    tax_amount = final_price_before_tax * sales_tax_rate\n    total_price = final_price_before_tax + tax_amount\n\n    return total_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    grams_per_cake = 200 / 12\n    num_cakes = 250 // grams_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_work = 1\n\n    for days_off in range(13):\n        work_done = days_off * ivy_rate + (12 - days_off) * (kevin_rate + ivy_rate)\n        if work_done >= total_work:\n            return days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    # Initial state: Ophelia had 4 times as many diamonds as Penelope\n    initial_state = Eq(ophelia, 4 * penelope)\n\n    # Final state: After Penelope bought 21 more diamonds\n    final_state = Eq(penelope + 21, (5/8) * ophelia)\n\n    # Solve the system of equations\n    solutions = solve((initial_state, final_state), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return 20 * 8 / 32\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n    \n    both_competitions = maths_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to pick 3 socks to ensure she has at least one pair of the same colour.\n    # Worst-case scenario: she picks one black and one red, third one will definitely form a pair.\n    return 3\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n    # The number of ways to arrange 'statues_to_arrange' out of 'total_statues' is given by the permutation formula:\n    # P(n, k) = n! / (n - k)!\n    ways_to_arrange = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "网络故障，请重试"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    cost_of_bracelet = 80\n    gst_rate = 8 / 100\n    total_cost = cost_of_bracelet * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    total_vehicles = 300\n    wheel_difference = 180\n\n    # Let's assume all vehicles are bicycles with 2 wheels\n    total_bicycle_wheels = total_vehicles * 2\n\n    # Since tricycles have one extra wheel, every time we convert a bicycle to a tricycle,\n    # the difference in wheel count increases by 1. We need this difference to be 180.\n    # So we need to convert 180 bicycles into tricycles to get the wheel difference of 180\n    \n    bicycles = total_vehicles - wheel_difference  # Convert the needed bicycles to tricycles\n\n    return bicycles\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # There are 2 grey rabbits for every pattern cycle.\n    pattern_grey = 2\n    \n    # With 14 grey rabbits, we can calculate the number of pattern cycles.\n    grey_cycles = 14 // pattern_grey\n    \n    # Every pattern cycle consists of 1 black, 2 white, and 2 grey rabbits (total of 5 rabbits).\n    pattern_total = 5\n    \n    # Calculate the total rabbits for the complete pattern cycles.\n    total_rabbits = grey_cycles * pattern_total\n    \n    # Check if there are extra grey rabbits beyond the complete cycles.\n    remaining_grey = 14 % pattern_grey\n    if remaining_grey > 0:\n        # If there are extra grey rabbits, we must have had one more cycle not counted yet.\n        total_rabbits += 1 # One more black rabbit\n        total_rabbits += 2 * remaining_grey # The extra grey rabbits\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n    \n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # The minimum value of the dividend would be when the divisor is the smallest integer greater than the remainder\n    # Dividend = Divisor * Quotient + Remainder\n    # Divisor must be at least one more than the remainder for it to be the smallest possible value\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return (2015 ** 2) - ((2015 + 1) * (2015 - 1))\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    # Based on Inclusion-Exclusion Principle: n(A ∪ B) = n(A) + n(B) - n(A ∩ B)\n    # where A is the set of chocolate biscuits, and B is the set of biscuits with foil.\n    # We want to find n(A), and we know n(B) and n(A ∩ B).\n    # However, we have an additional piece of information: n((A ∪ B)') = neither_chocolate_nor_foil.\n    # So we can find n(A ∪ B) by subtracting the neither from the total.\n    total_chocolate_or_foil = total_biscuits - neither_chocolate_nor_foil\n\n    # Now we apply the Inclusion-Exclusion Principle.\n    chocolate_biscuits = total_chocolate_or_foil - foil_wrappers + chocolate_with_foil\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the original speed and time\n    original_speed, original_time = symbols('original_speed original_time')\n\n    # Equations based on the problem statement\n    equation1 = Eq(original_speed * 1.25, original_speed / (original_time - 20/60))\n    equation2 = Eq((original_speed - 45) * (original_time * 1.75), original_speed * original_time)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_speed, original_time))\n\n    # Since we may get more than one solution, we filter out the one that makes sense (speed and time are positive)\n    for sol in solutions:\n        if sol[0] > 0 and sol[1] > 0:\n            # Calculate the distance\n            distance = sol[0] * sol[1]\n            return distance\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimal = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimal, 1)\n    \n    return rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Let's denote the number of crystals he had at first as 'initial_crystals'.\n    # According to the problem, Jason sold 10 more than half of his crystals to Yvonne.\n    after_first_sale = initial_crystals - (initial_crystals / 2 + 10)\n\n    # Then, he mined 20 more crystals in Singapore.\n    after_mining = after_first_sale + 20\n\n    # After that he sold 14 crystals to Cherlyn.\n    after_second_sale = after_mining - 14\n\n    # He has 35 crystals in the end.\n    final_crystals = Eq(after_second_sale, 35)\n\n    # Solve for the initial number of crystals.\n    initial = solve(final_crystals, initial_crystals)\n\n    return initial[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Since the number of zeros at the end of a product is determined by the number of pairs of 2 and 5 that multiply together,\n    # we need to count how many 2s and 5s are in A's prime factorization.\n\n    # Number of 5s in the prime factorization of A is 15 (because A has fifteen 5s)\n    num_fives = 15\n\n    # Number of 2s in the prime factorization of A is 10 (because A has ten 2s)\n    num_twos = 10\n\n    # The number of zeros at the end of A is equal to the minimum of num_twos and num_fives\n    # because a zero is created with every pair of 2 and 5.\n    \n    num_zeros = min(num_fives, num_twos)\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n    # Olaf had thrice as many carrots as Anna\n    equation1 = Eq(olaf, 3 * anna)\n    # After giving away 335 carrots, Anna had twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    count = 0\n    for perm in permutations(digits):\n        for i in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_of_bala = 10\n    ali_and_bala = 2  # Counting Ali and Bala themselves\n    \n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_of_bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Let x be the number of blue Fords\n    # Since all cars are black or blue,\n    # the number of black cars is (total_cars - number of blue cars).\n    black_cars = total_cars - blue_cars\n\n    # The number of black Fords is (fords - number of blue Fords).\n    # Since all Fords are black or blue, number of black Fords is also (number of black cars - number of black Dodges).\n    # So we can write: (fords - x) = (black_cars - black_dodges).\n    blue_fords = fords - (black_cars - black_dodges)\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = 2/3 * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    price_per_plant_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert pounds to pence\n\n    num_plants = budget_pence // price_per_plant_pence\n\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the two unknown numbers\n    x, y = symbols('x y')\n    \n    # Defining the two equations based on the sum and difference\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The smaller number is y, as x - y = 40 --> x > y\n    return solutions[y]\n\n# Calling the function and storing the result in ans\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # The smallest composite number\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if B > 4 and C > 4 and D > 4:  # ensuring B, C, D are greater than 4\n            if all(not is_prime(x) for x in [A, B, C, D]):\n                return A + B + C + D\n        A += 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13  # Total number of balls\n    # To guarantee picking at least one of each color, we take one less from \n    # each color and then add 1 because the next ball must be a different color.\n    min_picks = (8 - 1) + (10 - 1) + (13 - 1) + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n\n    # Subtract 1 apple per child to assure each one gets at least 1 apple\n    remaining_apples = total_apples - children\n\n    # Simple Pigeonhole Principle: Divide the remaining apples by the number of children - 1\n    # because we want to find out the least number of apples for the child who gets the most,\n    # so we split the remaining apples among the other children\n    max_apples_to_one_child = (remaining_apples // (children - 1)) + 1  # we add 1 apple back for that child\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_correct = 3\n    score_wrong = -2\n    target_score = 125\n    \n    # total_questions = correct_answers + wrong_answers\n    # target_score = correct_answers * score_correct + wrong_answers * score_wrong\n    # correct_answers = total_questions - wrong_answers\n    # target_score = (total_questions - wrong_answers) * score_correct + wrong_answers * score_wrong\n\n    # Let correct_answers be x and wrong_answers be y\n    # x + y = total_questions\n    # target_score = x * score_correct + y * score_wrong\n\n    # Transforming the system:\n    # x = total_questions - y\n    # target_score = (total_questions - y) * score_correct + y * score_wrong\n\n    # Solving for y:\n    # y = (target_score - total_questions * score_correct) / (score_wrong - score_correct)\n\n    y = (target_score - total_questions * score_correct) / (score_wrong - score_correct)\n    correct_answers = total_questions - y\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    gcd_first_pair = math.gcd(60, 72)\n    ans = math.gcd(gcd_first_pair, 84)\n\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # Eddie stops at 10 o'clock, means the 30th count lands on 10.\n    # Since clock numbers are periodic with a period of 12,\n    # we can find the starting point by going 30 counts back from 10,\n    # and using mod 12 to get the correct clock number.\n    \n    # If Shiva starts at 10 and counts 30 backward, subtracting 30 from 10\n    starting_position = (10 - 30) % 12  # Apply modulo to handle the clock's cyclic nature\n\n    # If the result is 0, it means he started at 12 o'clock\n    starting_position = 12 if starting_position == 0 else starting_position\n\n    return starting_position\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(\"296{}12\".format(digit))\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    number = two_thirds_of_number * (3/2)\n    three_quarters_of_number = number * (3/4)\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423*326) % 4\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # This is an arithmetic progression with a common difference of 2\n    # and the first term being 23. The n-th term is given by (2k - 1).\n    # The sum S of the first n terms of an arithmetic progression where\n    # the first term is a_1 and the common difference is d is given by\n    # S = n/2 * (2a_1 + (n - 1)d). We also know that S = m^2.\n\n    # The sum S can also be expressed as S = n/2 * (first term + last term)\n    # Here, first term a_1 = 23, last term a_n = (2k - 1)\n    # Since S = m^2, we are looking for an S that is a perfect square.\n\n    # We know k > 30 and the sequence is of odd numbers. Therefore, n > 8 (since 23 + 25 + ... + 39 has 9 terms)\n    # We'll start with n = 9 and increment until we find a suitable m\n\n    from math import sqrt\n\n    # initial first term and common difference\n    a_1 = 23\n    d = 2\n\n    # loop to find the sum which is a perfect square\n    # starting with n=9 to satisfy k>30, incrementing n to find the correct sum.\n    n = 9\n    while True:\n        a_n = a_1 + (n - 1) * d # n-th term\n        S = n * (a_1 + a_n) // 2 # sum of n terms\n        m = int(sqrt(S)) # potential m value\n        if m * m == S:\n            return m\n        n += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove at 40 km/h\n    distance_first_part = 2 * 40 # speed * time\n\n    # The remaining distance is already given as 280 km\n\n    # Calculate the time for the second part\n    time_second_part = 280 / 70 # distance / speed\n\n    # Total distance is the sum of both parts\n    total_distance = distance_first_part + 280\n\n    # Total time is the sum of times for both parts\n    total_time = 2 + time_second_part\n\n    # Average speed is total distance over total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_money = 20\n    daily_savings = 7 # Since she saves $1 each day for one week\n    money_lent = 5\n    money_spent = 3\n\n    current_money = initial_money + daily_savings - money_lent - money_spent\n\n    return current_money\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    num_cows = 5\n    num_days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = num_cows * num_days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    big_bucket = 89 - x\n    small_bucket = 45 - x\n    \n    equation = Eq(big_bucket, 12 * small_bucket)\n    sold = solve(equation, x)\n    \n    return sold[x]\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let's assume the total number of visitors is x.\n    # Then the number of men is 0.37x.\n    women_plus_children = x - 0.37*x  # The rest are women and children.\n    # Given that women to children ratio is 4:5,\n    # Let children be 5y and women be 4y for some y.\n    # Then, 5y + 4y = 9y is the total number of women plus children.\n    # And we have 9y = women_plus_children.\n    # Also, we are given that there are 12 more men than children, i.e., 0.37x - 5y = 12.\n    # Now we have two equations:\n    # 1) 9y = women_plus_children\n    # 2) 0.37x - 5y = 12\n    # To solve this system, we express x from the second equation and plug it into the first.\n    \n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    # Equation (2)\n    eq1 = 0.37*x - 5*y - 12\n    # Solve eq1 for x\n    sol_x = solve(eq1, x)\n    # Now substitute x in equation (1)\n    eq2 = 9*y - (sol_x[0] - 0.37 * sol_x[0])\n    sol_y = solve(eq2, y)\n    \n    # Number of women is 4y.\n    women = 4 * sol_y[0]\n    return int(women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_both_not_late\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the price of banana and apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n    \n    # Beth's equation: 3 bananas + 2 apples = 4 dollars\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    # Calculate what Annabella pays for 10 bananas and 10 apples\n    annabella_pays = 10 * solutions[banana] + 10 * solutions[apple]\n    \n    return annabella_pays\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_initial = 86\n    lena_gave_away = 29\n    lena_final = 100\n\n    lena_received = lena_final - (lena_initial - lena_gave_away)\n\n    return lena_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # From 10 to 99\n    no_six = 8 * 8  # 1-9 excluding 6 for first digit, 0-9 excluding 6 for second digit\n    at_least_one_six = total_two_digit_numbers - no_six\n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    days_off = (end_date - start_date).days + 1\n    \n    return days_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of 2023^2 and 2^2023\n    last_digit_2023_2 = (2023 ** 2) % 10\n    last_digit_2_2023 = (2 ** 2023) % 10\n    \n    # Calculate the last digit of the sum\n    last_digit_sum = (last_digit_2023_2 + last_digit_2_2023) % 10\n    \n    # Calculate the last digit of the sum raised to the third power\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the prices\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Given equations\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]  # Cost of a mango\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    lines = 13\n    max_intersections = lines * (lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_of_5 = 5 ** 20 % 10\n    last_digit_of_7 = 7 ** 20 % 10\n    ans = (last_digit_of_5 * last_digit_of_7) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n\n    most_students = gcd(pencils, pens)\n\n    return most_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of watermelons\n    x = symbols('x')\n\n    # Equation representing the watermelons left after selling\n    equation = Eq((1 - 1/3) * (1 - 3/5) * x, 48)\n    \n    # Solve for x\n    total_watermelons = solve(equation, x)[0]\n\n    return total_watermelons\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    sum = 2.99 + 12.99 + 22.99\n    return sum\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given data\n    AB = CD = 14  # in cm\n    radius_of_semicircle = AB / 2  # radius is half of the diameter AB or CD\n    pi = 22 / 7\n    \n    # Perimeter of the figure\n    # The straight lines AB and CD are part of the perimeter.\n    # The perimeter also includes two semicircles and two quadrants.\n    # A quadrant is a quarter of a circle, so its perimeter is a quarter of the circumference of a full circle.\n\n    # Perimeter of two semicircles:\n    perimeter_semicircles = 2 * (pi * radius_of_semicircle)  # Circumference of a full circle is 2 * pi * radius\n\n    # Perimeter of two quadrants (which together form a semicircle):\n    perimeter_quadrants = perimeter_semicircles / 2  # half the circumference of a full circle\n\n    # The total perimeter is the sum of AB, CD, the two semicircles and the two quadrants.\n    perimeter_total = AB + CD + perimeter_semicircles + perimeter_quadrants\n\n    # Returning the total perimeter\n    return perimeter_total\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price_per_packet = 95  # price in pence\n    total_spent = 1170  # total spent in pence (£11.70)\n    rice_packets = 5\n    pasta_packets = 6\n    rice_price_per_packet = symbols('rice_price_per_packet')\n\n    # defining the equation\n    equation = Eq(pasta_packets * pasta_price_per_packet + rice_packets * rice_price_per_packet, total_spent)\n    rice_packet_price = solve(equation, rice_price_per_packet)\n\n    return rice_packet_price[0]\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # The least common multiple of 3, 5, and 7\n    # Since the number ends in 0 or 5 and is divisible by 5, it must end in 5\n    # because if the number ends in 0, the first digit would not be 6\n    # Check multiples of LCM until we find a number that starts with 6\n    multiple = lcm\n    while True:\n        if str(multiple).startswith('6'):\n            return multiple\n        multiple += lcm\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Considering the fraction 13/10, write it in the form of 1 + n where n will be a fraction\n    n = 13/10 - 1  # Since we are looking for 1 + n, we subtract 1 from 13/10\n    \n    # Write 'n' as 1/(1/n)\n    n = 1 / (1/n)  # where n is now (3/10)\n\n    # Now we find further fraction decomposition such that the denominator itself is decomposed to 1 + fraction\n    a = int(1/n)  # Take the integer part\n\n    # Get the fractional part after removing integer part 'a'\n    n = 1/n - a   # We have now a + fraction\n\n    # Repeat the step in the same manner for 'b'\n    n = 1 / n     # Invert the fraction after subtracting 'a'\n    b = int(n)    # Take the integer part\n    n = n - b     # Subtract the integer part to leave fraction\n\n    # Finally, repeat the step to find 'c'\n    c = int(1 / n)  # There's no fraction part left after this, because c is exact\n\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_days = 12\n    energetic_days = 20\n\n    # Calculate work done by energetic one in one day\n    energetic_work_per_day = 1 / energetic_days\n\n    # Calculate total work done by both in one day\n    total_work_per_day = 1 / total_days\n\n    # Calculate work done by lazy one in one day\n    lazy_work_per_day = total_work_per_day - energetic_work_per_day\n\n    # Calculate days taken by lazy one to paint the whole house on his own\n    lazy_days = 1 / lazy_work_per_day\n\n    return int(lazy_days)\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    base_value = 45\n    two_thirds_of_base = (2/3) * base_value\n    thirty_percent_of_two_thirds = 0.30 * two_thirds_of_base\n    return thirty_percent_of_two_thirds\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # n is the number of consecutive numbers, which is 15\n    n = 15\n    # S is the sum of these numbers, which is 1650\n    S = 1650\n    # We know the sum of an arithmetic series S = n/2 * (a1 + an)\n    # a1 is the first (smallest) term, an is the last (largest) term\n    # We can also express S = n/2 * (2a1 + (n-1)d), where d is the common difference\n    # For consecutive numbers, the common difference d = 1\n    # So our equation becomes 1650 = 15/2 * (2a1 + (15-1)*1)\n    # Simplify it to find a1: 1650 = 15/2 * (2a1 + 14)\n    # 1650 = 15 * (a1 + 7)\n    # a1 = 1650 / 15 - 7\n    # an = a1 + n - 1\n    a1 = S / n - 7\n    an = a1 + n - 1\n    # The question asks for the sum of the largest and smallest numbers an + a1\n    sum_of_largest_and_smallest = an + a1\n\n    return sum_of_largest_and_smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while True:\n        if pies % 4 == 0 and pies % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2  # 3 boys for every 2 girls\n\n    girls = boys / boys_to_girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n    for i in range(1, 1000):\n        digits = str(i)\n        if all(int(d) % 2 != 0 for d in digits):\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # We know that a divided by 8 leaves a remainder of 6.\n    # And b divided by 8 leaves a remainder of 7.\n    # When added together (a + b), the remainders also get added (6 + 7).\n    # Therefore, the sum of remainders is 6 + 7 = 13.\n    \n    # Now, when (a + b) is divided by 8, the sum of remainders (13) is to be considered.\n    # Since 13 divided by 8 leaves a remainder of 5, our answer is 5.\n    \n    return 5\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    skirts = 8\n    blouses = 2\n    cloth_per_skirt = 2.83\n    \n    total_cloth_for_skirts = skirts * cloth_per_skirt\n    remaining_cloth = total_cloth - total_cloth_for_skirts\n    cloth_per_blouse = remaining_cloth / blouses\n    \n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    number = \"\"\n    digit = 2019\n    for i in range(1, 5000):\n        number += str(i)\n        if len(number) >= digit:\n            return int(number[digit - 1])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Number of keys\n    num_keys = 11\n    # We need to try every key in the worst case scenario.\n    # For the first door, you would potentially need to try all 11 keys.\n    # For the second door, you could potentially have to try the remaining 10 keys.\n    # This pattern continues until the last door, where you would only have to try 1 key.\n    # Hence, the number of times he must try is the sum of the first 11 natural numbers.\n    ans = sum(range(1, num_keys+1))\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences can be described as follows:\n    # n ≡ 1 (mod 2)\n    # n ≡ 2 (mod 3)\n    # n ≡ 3 (mod 4)\n    # n ≡ 4 (mod 5)\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n = solve_congruence(*congruences)\n\n    return n[0]  # Return the smallest non-negative solution\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits\n    num_twos = 3      # Number of times '2' appears\n    num_threes = 2    # Number of times '3' appears\n    \n    # Calculate the total permutations with repeatition\n    total_perms = factorial(total_digits) // (factorial(num_twos) * factorial(num_threes))\n    \n    # Since the question asks for four-digit numbers,\n    # we need to subtract the cases where '0' is the leading digit.\n    # Since we do not have '0' leading digit cases (dividing the digits into 2223)\n    # we do not need to subtract any cases\n\n    # However, since the number must be a four-digit number, we should\n    # multiply total_perms with (total_digits - 1) because 2 or 3 needs to be at the first place\n    # which has 4 possible positions.\n    ans = total_perms * (total_digits - 1)\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # converting basket mass from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4\n\n    kittens_total_mass = kitten_mass_kg * number_of_kittens\n    cat_mass = total_mass_kg - (basket_mass_kg + kittens_total_mass)\n\n    return cat_mass\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4 # brothers + sisters\n    eggs_each_person_buys = siblings # Number of siblings each person buys eggs for\n    total_eggs = (siblings + 1) * eggs_each_person_buys # Including Mary\n    return total_eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    # define the time format\n    time_format = \"%H:%M\"\n\n    # initialize the times for the start and arrival\n    start_time = \"7:50\"\n    arrival_time = \"8:40\"\n\n    # convert strings to datetime objects\n    start = datetime.strptime(start_time, time_format)\n    arrival = datetime.strptime(arrival_time, time_format)\n\n    # calculate the difference in time\n    journey_duration = arrival - start\n\n    # get the difference in minutes\n    minutes_taken = journey_duration.seconds // 60\n\n    return minutes_taken\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n    \n    # Set up the equations based on the provided information\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    # Extract the solution for banana\n    banana_price = solutions[banana]\n    \n    return banana_price\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # This sequence seems to be increasing by consecutive odd numbers:\n    # 3 (next number increases by 3), 6 (next number increases by 4), 10 (next number increases by 5), 15\n    # The pattern is to add 3, then 4, then 5. So the next addition should be 6.\n    next_addition = 15 - 10 + 1  # The difference between last two given numbers plus one.\n    answer = 15 + next_addition   # The last given number plus the calculated next addition.\n\n    return answer\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol \n    original_money = symbols('original_money')\n    \n    # Equation based on the given problem\n    # original_money - (1/6)*original_money - 5 - (2/5)(original_money - (1/6)*original_money - 5) - 12 = 24\n    equation = Eq(original_money - (1/6)*original_money - 5 - (2/5)*(original_money - (1/6)*original_money - 5) - 12, 24)\n    \n    # Solve the equation\n    solutions = solve(equation, original_money)\n    \n    # Get the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    # Define the remaining money after purchasing the handbag and dress\n    remaining_money = 80\n\n    # Calculate the money spent on the dress which is 3/5 of the money after buying the handbag\n    money_after_handbag = remaining_money / (1 - 3/5)\n\n    # Calculate the initial money by taking into account the fraction spent on the handbag\n    initial_money = money_after_handbag / (1 - 1/5)\n\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47  # Total volume of oil in the barrel\n    volume_poured_out = 5  # Volume of oil poured into a bottle\n    number_of_tanks = 6  # Number of tanks to pour the remaining oil into\n\n    remaining_volume = total_volume - volume_poured_out  # Volume of oil left after pouring into a bottle\n    volume_per_tank = remaining_volume / number_of_tanks  # Volume of oil in each tank\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of years from now\n    years_from_now = symbols('years_from_now')\n\n    # Johnny's current age is 8 and Grandpa's current age is 72\n    johnny_age_now = 8\n    grandpa_age_now = 72\n\n    # Set up the equation for the ages in the future\n    equation = Eq(grandpa_age_now + years_from_now, 5 * (johnny_age_now + years_from_now))\n\n    # Solve the equation\n    ans = solve(equation, years_from_now)[0]\n\n    return ans\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_in_between = 4\n    \n    total_children = pip_position + children_in_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    # Given condition 1: Bob has $15 more Match Dfex cards than Alan\n    condition_1 = Eq(bob, alan + 15)\n    \n    # Given condition 2: Colin gives Bob $25 cards. Bob now has $3 times as many as Alan\n    condition_2 = Eq(bob + 25, 3 * alan)\n    \n    # Solving the equations\n    solutions = solve((condition_1, condition_2), (bob, alan))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount_owed = 2519.42\n    years = 3\n    r = symbols('r', real=True)\n    equation = Eq(principal * (1 + r) ** years, amount_owed)\n    \n    interest_rate = solve(equation, r)[0]\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Total number of terms in the sequence from 1 to 50.\n    n = 50\n    \n    # Sum of odd numbers from 1 to 50\n    # Number of odd numbers from 1 to 50 is (n // 2) because we count every second number.\n    sum_odd = ((n // 2) ** 2)\n    \n    # Sum of even numbers from 1 to 50\n    # Number of even numbers from 1 to 50 is (n // 2) because we count every second number.\n    sum_even = ((n // 2) * ((n // 2) + 1))\n    \n    # Difference between Monica's sum (even) and Melvin's sum (odd)\n    ans = sum_even - sum_odd\n    \n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Symbolically represent the number of elders as x\n    x = symbols('x')\n\n    # Each elder was to get 20 oranges, but 10 won't receive any, therefore\n    # the total number of elders is x + 10.\n    # When giving out 20 oranges, the amount is short for 10 elders.\n    short_oranges = 20 * 10\n\n    # A pack with 25 boxes of 2 dozens each gives us a total number of oranges.\n    total_oranges_in_boxes = 25 * 2 * 12\n\n    # If she gave 16 oranges to each elderly, this would amount to the total oranges calculated above\n    # We can thus form an equation as follows:\n    # (20 * (x + 10)) - short_oranges = 16 * x\n    # This simplifies to:\n    # 20 * x + (20 * 10) - short_oranges = 16 * x\n    # Solving the simplified equation for the number of elders:\n    elders = solve(20 * x + 200 - short_oranges - 16 * x, x)[0]\n    \n    # Number of oranges Janice has\n    total_oranges = total_oranges_in_boxes + short_oranges\n\n    # Number of oranges to each elder so that all oranges are distributed\n    oranges_per_elder = total_oranges / elders\n\n    return oranges_per_elder\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # define the operation \"Delta\"\n    delta = lambda m, n: 5*m + 3*n\n    \n    # from the given equation x~Delta~9 = 37\n    # we can directly calculate x by rearranging the equation:\n    # 5x + 3*9 = 37\n    # 5x = 37 - 27\n    # 5x = 10\n    # x = 10 / 5\n    x = (37 - 3*9) / 5\n\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # The worst case to guarantee 4 balls of the same color:\n    # - Take all balls of the 2 colors with the least amount (4 orange + 2 yellow)\n    # - Then take 3 more balls (which could all be blue)\n    # - The next ball must be the 4th of some color\n    total_balls = 4 + 2 + 3 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    part_weight = 27\n    fraction_removed = 1/5\n    soil_removed = full_weight - part_weight\n    total_soil = soil_removed / fraction_removed\n    empty_weight = full_weight - total_soil\n\n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Tim's and Tyler's cookies before selling\n    tim, tyler = symbols('tim tyler')\n\n    # Equation 1: 1/6 of Tim's cookies was equal to 3/8 of Tyler's cookies\n    equation1 = Eq(1/6 * tim, 3/8 * tyler)\n\n    # Equation 2: After selling 96 cookies, Tim had 9 times as many cookies as Tyler\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    # Tim's and Tyler's original number of cookies\n    tim_cookies = solutions[tim]\n    tyler_cookies = solutions[tyler]\n\n    # Total number of cookies at first\n    total_cookies = tim_cookies + tyler_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Given equations\n    eq1 = Eq(chocolate, vanilla + 72)\n    eq2 = Eq(blueberry, vanilla - 36)\n    eq3 = Eq((chocolate - chocolate/6) + (vanilla - 2*vanilla/3) + (blueberry - 7*blueberry/9), 427)\n\n    # Solving equations\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n\n    # Calculate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n\n    minutes_1 = 24\n    minutes_2 = 30\n\n    least_common_multiple = lcm(minutes_1, minutes_2)\n\n    hours, minutes = divmod(least_common_multiple, 60)\n    next_time = 9 + hours + minutes / 60\n\n    # The time will be in float, as hours+.minutes so to convert it\n    # into HH:MM format we'll separate the decimal and integer part\n    next_hours = int(next_time)\n    next_minutes = (next_time - next_hours) * 60\n\n    return '{:02d}:{:02d}'.format(next_hours, int(next_minutes))\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n\n    missed_marks = total_marks - scored_marks\n\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    gallons_poured = 24\n\n    full_tank = gallons_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # For a to have a remainder of 6 when divided by 8, a must be of the form 8k + 6\n    # For b to have a remainder of 7 when divided by 8, b must be of the form 8m + 7\n    # The sum a + b = (8k + 6) + (8m + 7) = 8(k + m) + 13\n    # When dividing this sum by 8, the remainder is the remainder of 13 divided by 8, since 8(k + m) is divisible by 8.\n    remainder = 13 % 8\n    return remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # Jessica sits in front of Judy, so there's one desk (Jessica's) between the 5 in front of her and the 7 behind Judy.\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy  # Adding Jessica and Judy's desks.\n\n    return total_desks\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the unknowns\n    w, r = symbols('w r', positive=True, integer=True)  # Number of white and red balls initially\n    p, b = symbols('p b', positive=True, integer=True)  # Number of balls Pip and Bud added respectively\n\n    # Initial ratio of red to white marbles is 3:2\n    eq1 = Eq(r/w, 3/2)\n\n    # After Pip adds red balls, the ratio of red to white balls is 5:3\n    eq2 = Eq((r + p)/w, 5/3)\n\n    # After Bud adds white balls, the number of red balls remains the same as the previous step and the ratio is 5:4\n    eq3 = Eq((r + p)/(w + b), 5/4)\n\n    # Bud puts 100 more balls than Pip\n    eq4 = Eq(b - p, 100)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (w, r, p, b))\n\n    # Extract the solution for the initial number of white balls\n    ans = solutions[w]\n\n    return ans\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the initial average weight of the group\n    # Let n be the initial number of people in the group\n\n    from sympy import symbols, Eq, solve\n\n    x, n = symbols('x n', real=True, positive=True)\n    aaron_weight = 45\n    ben_weight = 71\n\n    # Equation representing the average after Aaron joined\n    equation1 = Eq((n * x + aaron_weight) / (n + 1), 61)\n\n    # Equation representing the average after Ben joined\n    equation2 = Eq((n * x + aaron_weight + ben_weight) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    return float(solutions[x])\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    num_red_balloons = 57\n    num_yellow_balloons = num_red_balloons // 3\n    return num_yellow_balloons\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        if perm[0] == 0 or perm[3] == 0:  # The first digits cannot be zero\n            continue\n        a = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[1]\n        b = perm[3] * 10 + perm[4]\n        product = a * b\n        if len(str(product)) == 5 and set(str(product)) == set(str(a)) and len(set(str(b))) == len(str(b)):\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    base_people = 6\n    base_hours = 15\n    target_hours = 2\n\n    # Calculate work rate per person per hour\n    work_rate_per_person = 1 / (base_people * base_hours)\n\n    # Calculate total work needed\n    total_work = base_people / work_rate_per_person\n\n    # Calculate how many people are needed for the new time frame\n    people_needed = total_work / target_hours\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 2989\n    balls_left = white_balls + black_balls - total_taken\n\n    while total_taken > 0:\n        if white_balls > 0 and black_balls > 0:\n            # Ming takes out two balls of different colors.\n            white_balls -= 1\n            total_taken -= 2\n            # One white ball goes back, so we don't change white_balls counter.\n        elif white_balls > 0:\n            # Only white balls left, takes out two white balls.\n            white_balls -= 2\n            total_taken -= 2\n            # A black ball from bag B is added to bag A.\n            black_balls += 1\n        elif black_balls > 0:\n            # Only black balls left, takes out two black balls.\n            black_balls -= 1\n            total_taken -= 2\n            # One black ball goes back, so we decrease black_balls counter by 1 only.\n\n    return balls_left, 'white' if white_balls > 0 else 'black'\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_first_n_whole_numbers = n * (n + 1) // 2\n    return sum_first_n_whole_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n\n    total_cost = cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert meters to centimeters\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    birthday_money = 30.00\n    bag_of_sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice_per_glass = 1.50\n    glasses_of_orange_juice = 4 * orange_juice_per_glass\n\n    total_spent = bag_of_sweets + magazine + stickers + pizza + glasses_of_orange_juice\n    change_left = birthday_money - total_spent\n\n    return change_left\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    # Store the count of ways to rewrite the number\n    count = 0\n\n    # Iterate through all possible pairs of natural numbers that sum to 5\n    # Since we are looking for two or more numbers, we start from 1 up to 4\n    # Because 5 - 1 = 4 and we need at least a pair\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            # Check if the current pair sums to 5\n            if x1 + x2 == 5:\n                count += 1\n            # Check for combinations with more than two numbers\n            for x3 in range(1, 5):\n                # Check if the current triplet sums to 5\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                # Check for combinations with four numbers\n                for x4 in range(1, 5):\n                    # Check if the current quartet sums to 5\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n\n    # The combinations with more than two numbers include repetitions of the same number grouping\n    # Since the order doesn't matter, we'll divide the count for triplets and quartets by the factorial of their size to eliminate duplicates\n    # For pairs, each combination is unique (since order doesn't matter for a pair)\n    # For triplets (three numbers), each combination is counted 3! (3 factorial) times\n    # For quartets (four numbers), each combination is counted 4! (4 factorial) times\n\n    # There's only one quartet: 1+1+1+2\n    quartet_count = 1\n\n    # Triplets can be formed by two 1s and one 3 or by three 1s and a 2\n    # In both cases, the triplet has two 1s and another number, so it's counted 3! times\n    triplet_count = 1  # (1, 1, 3) and its permutations\n\n    # Subtract the overcounted groupings and add the unique counts\n    count = count - (triplet_count * 3 * 2) - (quartet_count * 3 * 2 * 4) + triplet_count + quartet_count\n\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for units_digit in range(2, 10):\n        hundreds_digit = units_digit - 2\n        for tens_digit in range(0, 10):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    han_mass, daughter_mass = symbols('han_mass daughter_mass')\n    equation1 = Eq(han_mass, 3 * daughter_mass)\n    equation2 = Eq(han_mass + daughter_mass, 91.2)\n    \n    solutions = solve((equation1, equation2), (han_mass, daughter_mass))\n    \n    return solutions[han_mass]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    total_chocolates = remaining_after_students / (1 - 0.8)\n    return int(total_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += (2*i - 1)\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    total_votes = 25\n    # To ensure Samantha has more votes than anyone else, she needs at least one more vote\n    # than half of the total votes. This is based on the Pigeonhole Principle, where you\n    # need more than n/2 votes to have the majority when n votes are cast.\n    samantha_votes = total_votes // 2 + 1\n\n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                totals.add(coin1 + coin2 + coin3)\n    \n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution_x = solve(equation, x)[0]\n\n    return solution_x\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    principal = 6000\n    amount = 8029.35\n    years = 5\n\n    equation = Eq(principal * (1 + x/100)**years, amount)\n    solution = solve(equation, x)\n\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages, digits_used = 0, 0\n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chair_money = 360\n    chair_percent = (chair_money / total_money) * 100\n    return chair_percent\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of pages she has not read\n    # and x/5 as the number of pages she has read already\n    x = symbols('x')\n\n    # Initial condition: pages read is 1 to pages not read which is 5 (1:5 ratio)\n    # So, total pages = pages read + pages not read = x/5 + x\n    # After reading 80 more pages, the pages read becomes x/5 + 80\n    # we're given that x/5 + 80 is 70% of the total pages: (x/5 + 80) = 0.7 * (x/5 + x)\n    \n    equation = Eq(x / 5 + 80, 0.7 * (x / 5 + x))\n\n    # Solve the equation for x\n    pages_not_read = solve(equation, x)[0]\n\n    # Calculate the total number of pages\n    total_pages = pages_not_read + (pages_not_read / 5)\n\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers CC had.\n    # Then Vivi would have x + 3 correct answers, since she got 15 more points.\n    # Total correct answers would be x + (x + 3) which will generate correct answer points of 10 * (2x + 3).\n    # As they each answered 10 questions and points are either +10 for correct or -5 for incorrect,\n    # the remaining questions would count as incorrect.\n    # Total incorrect answers would be 20 - (2x + 3) generating incorrect answer points of -5 * (20 - (2x + 3)).\n    # The sum of points from correct and incorrect answers should be equal to 95.\n    \n    for x in range(11):  # CC can answer a maximum of 10 questions correctly.\n        if 10 * (2 * x + 3) - 5 * (20 - (2 * x + 3)) == 95:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10.00)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    rooms_for_girls = girls / girls_per_room\n    rooms_for_teachers = teachers / teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_original = 15\n    flour_original_g = 650\n\n    people_new = 18\n    flour_new_g = (flour_original_g / people_original) * people_new\n\n    return flour_new_g\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket = 6.34\n    child_ticket = 4.75\n    total_cost = (2 * adult_ticket) + (3 * child_ticket)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n    for i in range(1, len(number) - 1):\n        for j in range(i + 1, len(number)):\n            a, b, c = int(number[:i]), int(number[i:j]), int(number[j:])\n            total_sum = a + b + c\n            min_sum = min(min_sum, total_sum)\n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # Minimum possible divisor\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x and y represent the two original numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of x and y is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation 2: Oliver's mistake resulted in 5.87. If Oliver had shifted the decimal\n    # for x, the erroneous sum would be 0.1*x + y, and if he had shifted for y, it would be x + 0.1*y.\n    # We represent these as two equations and solve them one by one to find out which one gives\n    # a plausible solution\n    equation2a = Eq(0.1 * x + y, 5.87)\n    equation2b = Eq(x + 0.1 * y, 5.87)\n    \n    # Solve the sets of equations\n    solutions_a = solve((equation1, equation2a), (x, y))\n    solutions_b = solve((equation1, equation2b), (x, y))\n    \n    # Check which one gives the correct answer by checking if both solutions are positive\n    if solutions_a[x] > 0 and solutions_a[y] > 0:\n        solutions = solutions_a\n    else:\n        solutions = solutions_b\n    \n    # Find the difference between the two numbers and multiply by 100\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Maximum number of draws to ensure one does not have 3 of the same color\n    max_draws_without_3_same = 2 * blue + 2 * yellow + 2 * red - 2\n\n    # One more draw will ensure at least 3 marbles of the same color\n    ans = max_draws_without_3_same + 1\n    return ans\n\nblue = 4  # Blue marbles\nyellow = 3  # Yellow marbles\nred = 1  # Red marbles\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # There are 6 flowers embroidered on each side of the square handkerchief.\n    # However, we need to subtract the corner flowers as they are counted twice,\n    # once for each side they are on. Since there are 4 corners, we subtract\n    # 4 flowers from the total count.\n    flowers_per_side = 6\n    corner_flowers = 4\n    total_flowers = (flowers_per_side * 4) - corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for members of each club\n    science, literature, math = symbols('science literature math')\n    \n    # Given ratios\n    ratio1 = Eq(science / literature, 9 / 10)\n    ratio2 = Eq(literature / math, 5 / 7)\n    \n    # Sum of all club members\n    total = Eq(science + literature + math, 99)\n    \n    # Solving the equations to find the number of members in each club\n    solutions = solve((ratio1, ratio2, total), (science, literature, math))\n    \n    # Calculate the difference between math club members and literature club members\n    difference = solutions[math] - solutions[literature]\n\n    return difference\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n    # When Melissa was 8, her mother was 32\n    mother_age_then = 32\n    melissa_age_then = 8\n    age_difference = mother_age_then - melissa_age_then\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation1 = Eq(mother_age_now, 3 * melissa_age_now)\n    \n    # The difference in their ages will always be the same\n    equation2 = Eq(mother_age_now - melissa_age_now, age_difference)\n\n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10.0\n    cut_1 = 4.8\n    cut_2 = 2.73\n\n    remaining_length = original_length - (cut_1 + cut_2)\n    lengths = sorted([cut_1, cut_2, remaining_length])\n    difference = lengths[-1] - lengths[0]\n\n    return difference\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    total_length = 47\n    complete_repeats = total_length // len(pattern)\n    partial_repeat_len = total_length % len(pattern)\n    \n    sum_complete_repeats = sum(int(digit) for digit in pattern) * complete_repeats\n    sum_partial_repeat = sum(int(pattern[i]) for i in range(partial_repeat_len))\n    \n    total_sum = sum_complete_repeats + sum_partial_repeat\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Total cost of the book and the bag\n    total_cost = 132\n    \n    # Li Yan spent 1/3 of her money on a book\n    book_fraction = 1/3\n    # She spent 1/2 of the remainder on a bag\n    # The remainder is 1 - 1/3 = 2/3\n    # So she spent 1/2 of 2/3 = 2/3 * 1/2 = 2/6 = 1/3 of the total money on a bag\n    bag_fraction = (2/3) * (1/2)\n    \n    # The fraction of the total money spent on both the book and the bag\n    # is 1/3 (book) + 1/3 (bag) = 2/3 of the total money\n    total_fraction = book_fraction + bag_fraction\n    \n    # Thus, 2/3 of Li Yan's money is $132\n    # We can now find how much money Li Yan had at first by looking for the total,\n    # which is 1/total_fraction of total_cost\n    li_yan_money = total_cost / total_fraction\n    \n    return li_yan_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of a volleyball as 'v'\n    v = symbols('v')\n    b = v + 10  # price of a basketball\n\n    # Equation based on the total cost given\n    equation = Eq(5 * b + 6 * v, 325)\n\n    # Solve the equation to find the price of a volleyball\n    volleyball_price = solve(equation, v)[0]\n    basketball_price = volleyball_price + 10\n\n    return basketball_price\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the number of boys and (40 - b) the number of girls.\n    b = symbols('b')\n    \n    # Total pencils is the average per pupil times the number of pupils.\n    total_pencils = 35 * 40\n    \n    # The total number of pencils is also equal to the sum of pencils owned by boys and girls.\n    # Total pencils owned by boys is the average per boy times number of boys.\n    # Total pencils owned by girls is the average per girl times number of girls (40 - b).\n    equation = Eq(20 * b + 60 * (40 - b), total_pencils)\n    \n    # Solve the equation to find the number of boys.\n    num_boys = solve(equation, b)[0]\n    \n    return num_boys\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    # Points earned for correct answer\n    correct_pts = 4\n    # Points deducted for incorrect answer\n    incorrect_pts = -1\n    # Total points obtained by both Jack and Johnson\n    total_pts = 61\n    # Total number of problems\n    total_problems = 25\n\n    # Iterating over all possible correct answers for Jack\n    for correct_jack in range(total_problems + 1):\n        # Incorrect answers for Jack\n        incorrect_jack = total_problems - correct_jack\n        # Compute Jack's total score\n        score_jack = correct_jack * correct_pts + incorrect_jack * incorrect_pts\n\n        # Iterating over all possible correct answers for Johnson\n        for correct_johnson in range(correct_jack):\n            # Incorrect answers for Johnson\n            incorrect_johnson = total_problems - correct_johnson\n            # Compute Johnson's total score\n            score_johnson = correct_johnson * correct_pts + incorrect_johnson * incorrect_pts\n\n            # Check if both obtained 61 points and Jack got more correct answers\n            if score_jack == total_pts and score_johnson == total_pts:\n                # Number of problems Jack did not answer\n                no_answer_jack = total_problems - correct_jack - incorrect_jack\n                return no_answer_jack\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # As 'a' is the first digit, it cannot be 0\n        for b in range(10):  # 'b' is the second digit and can range from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Fixed cost components\n    cost_per_cupcake = 4.50\n    shipping_handling = 12\n    discount_rate = 0.20 # 20% discount\n    \n    # Calculate the number of cupcakes if 20 or fewer are ordered\n    if (120 - shipping_handling) / cost_per_cupcake <= 20:\n        cupcakes_ordered = (120 - shipping_handling) / cost_per_cupcake\n    \n    # Calculate the number of cupcakes if more than 20 are ordered\n    else:\n        # Cost without discount for the first 20 cupcakes\n        cost_first_20 = 20 * cost_per_cupcake\n        remaining_cost_after_20 = 120 - cost_first_20 - shipping_handling\n        # Adjust for the discount rate\n        cost_per_additional_cupcake = cost_per_cupcake * (1 - discount_rate)\n        additional_cupcakes = remaining_cost_after_20 / cost_per_additional_cupcake\n        cupcakes_ordered = 20 + additional_cupcakes\n\n    return int(cupcakes_ordered)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    cost = solutions[pigs] * 5 + solutions[goats] * 5\n\n    return cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n    total_pounds = pounds + pence / 100\n    return total_pounds\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    \n    solution = solve(equation, A)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_place_from_back = 12\n\n    total_people = people_in_front_of_rose + rose_place_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n    \n    # The energetic decorator's work rate\n    energetic_work_rate = 1 / 10\n\n    # If they work together, their combined work rate is 1 house per 6 days\n    combined_work_rate = 1 / 6\n\n    # Now let's define the work rate for the lazy decorator\n    lazy_work_rate = 1 / x\n\n    # The sum of their work rates should equal the combined work rate\n    equation = Eq(energetic_work_rate + lazy_work_rate, combined_work_rate)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_later = 2\n\n    john_age_in_future = john_current_age + years_later\n    grandmother_age_in_future = john_current_age + grandmother_age_difference + years_later\n\n    total_age_in_future = john_age_in_future + grandmother_age_in_future\n    return total_age_in_future\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_num = symbols('john_num')\n\n    equation = Eq((john_num + 45) / 3, 2 * john_num)\n\n    solution = solve(equation, john_num)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start from 2 and assign the rest.\n    for brother1 in range(2, 11):\n        for brother2 in range(2, 11):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2 and len({brother1, brother2, brother3}) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Drawing the maximum number of marbles of the same color without satisfying the condition:\n    # Draw 3 red (since there are two groups of red totaling 12 + 3 = 15),\n    # then 3 blue, and then 3 yellow, we still haven't drawn 4 different colors.\n    # Drawing one more will ensure that we have 4 different colors.\n    ans = 3 + 3 + 3 + 1  # We add one to get at least one marble of the fourth color\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number = '55' + '5' * 17 + 'X' + '9' * 19\n    for digit in range(10):\n        test_number = int(number.replace('X', str(digit)))\n        if test_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_read_first_day / fraction_of_book\n    return total_pages\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since the heights are whole numbers and the children are ordered by height,\n    # Tom, being the 10th from the shortest, cannot be taller than the height of\n    # the 11th shortest child minus 1 (to maintain distinct heights).\n    # The tallest child is 131 cm, and there are 31 children.\n    # Therefore, there are 20 children taller than Tom.\n    # The maximum height for the 11th tallest child would be the height of the tallest child (131 cm)\n    # minus the number of taller children, which is 20 children.\n    max_height_tom = 131 - 20\n    \n    return max_height_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15 and tens == 2 * hundreds and\n                        hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return len([i for i in range(10, 100) if i % 10 == 6])\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote:\n    # total_books = total number of books Jason has originally\n    # anthea_books = number of books Anthea has originally\n    \n    # According to the problem statement:\n    # total_books - 4 = anthea_books + 4\n    # total_books = 30\n    \n    # From the equation above:\n    # anthea_books = total_books - 8\n    \n    total_books = 30\n    anthea_books = total_books - 8\n    \n    # The difference between Jason and Anthea's books originally:\n    difference = total_books - anthea_books\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, a + b\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    s = symbols('s')  # s represent the number of students\n\n    # Equation 1: s * 5 + 3 - total gifts\n    # Equation 2: s * 4 + 9 - total gifts\n    # Both should be equal to the total number of gifts\n\n    total_gifts = symbols('total_gifts')\n    equation1 = Eq(s * 5 + 3, total_gifts)\n    equation2 = Eq(s * 4 + 9, total_gifts)\n\n    # Since both equation1 and equation2 equal total_gifts, solve for s\n    solutions = solve((equation1, equation2), (s, total_gifts))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    num = 840\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Equations based on the problem\n    total_equation = Eq(alan + bella + chloe, 200)\n    ratio_equation = Eq(alan / bella, 4 / 3)\n    difference_equation = Eq(alan, chloe + 20)\n\n    # Solve equations\n    solutions = solve((total_equation, ratio_equation, difference_equation), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    bar_of_chocolate_hazelnut = 1.83\n    note = 20\n    \n    total_cost = box_of_chocolates + 2 * bar_of_chocolate_hazelnut\n    change = note - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    # Since Lily stands on the left end and her mother on the right end,\n    # only the remaining 3 family members can change positions.\n    # Hence, calculate the permutations of the 3 remaining family members.\n    ans = math.perm(3, 3)  # permutation of the 3 family members\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]   # Possible digits\n\n    # Generate all 2-digit numbers without repetition\n    all_numbers = [10 * a + b for a, b in permutations(digits, 2)]\n\n    # Find numbers satisfying the given conditions\n    smallest = [n for n in all_numbers if n % 10 == 2 * (n // 10)]\n    largest = [n for n in all_numbers if (n % 10) + (n // 10) == 9]\n    second_largest = [n for n in all_numbers if (n // 10) - (n % 10) == 5]\n    odd_numbers = [n for n in all_numbers if n % 2 == 1]\n\n    # Intersection of smallest and odd numbers (since there is only 1 odd number)\n    smallest_odd = list(set(smallest) & set(odd_numbers))\n\n    # Filter out the numbers already in other categories from the set of all numbers\n    remaining_numbers = list(set(all_numbers) - set(largest) - set(second_largest) - set(smallest_odd))\n\n    # Sort the remaining numbers to find the second smallest\n    remaining_numbers.sort()\n    second_smallest = remaining_numbers[0]  # The first element after sorting is the second smallest\n    \n    return second_smallest\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n\n    # Finding the number of terms using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # Rearranging for n:\n    # n = ((last_term - first_term) / difference) + 1\n    n = ((last_term - first_term) / difference) + 1\n\n    # The sum of an arithmetic series is given by the formula:\n    # sum = n / 2 * (first_term + last_term)\n    sum_of_terms = n / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for stickers Sam and Peter initially have\n    sam, peter = symbols('sam peter')\n\n    # Equation 1: Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n\n    # Peter gives 25% of his stickers to Sam after receiving Sam's stickers\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n\n    # Equation 2: In the end, Sam has 96 stickers more than Peter\n    equation2 = Eq(sam_after_receiving, peter_after_giving + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the value of Peter's initial stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # The sum of three numbers for an average of 120\n    sum_of_three = 3 * 120\n    # The sum of four numbers for an average of 150\n    sum_of_four = 4 * 150\n    # The fourth number is the difference between the sum of four and the sum of three\n    fourth_number = sum_of_four - sum_of_three\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Apply the formula for the sum of squares from 1 to n\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    # Apply the formula for the sum of squares from 1 to first_term - 1\n    sum_squares_before_first = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    # Subtract the two to get the sum of squares from first_term to n\n    ans = sum_squares_n - sum_squares_before_first\n    # Check if Kimmy's answer was correct\n    return ans != 1240, ans\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = 2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_points - wrong * wrong_points\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n    \n    # After spending 6/11 of her money and an additional $5\n    money_after_highlighters = initial_amount - (6/11) * initial_amount - 5\n    \n    # Then spending 3/10 of the remainder and an additional $12\n    money_after_pens = money_after_highlighters - (3/10) * money_after_highlighters - 12\n    \n    # Equation representing the fact that Amy has $30 left\n    equation = Eq(money_after_pens, 30)\n    \n    # Solve the equation for the initial amount\n    solution = solve(equation, initial_amount)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    sally, gillian = symbols('sally gillian')\n\n    # Original ratio of ages\n    # Sally's age = 2x, Gillian's age = 7x (where x is a positive integer)\n    original_ratio = Eq(sally / gillian, 2 / 7)\n\n    # Ratio of ages in 15 years\n    # (Sally's age + 15) / (Gillian's age + 15) = 1 / 2\n    future_ratio = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    # Solve the system of equations to find the current ages of Sally and Gillian\n    ages = solve((original_ratio, future_ratio), (sally, gillian))\n\n    return ages[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n    \n    minuend = mistaken_result + mistaken_subtrahend\n    correct_result = minuend - actual_subtrahend\n    \n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # LCM of 3 and 4 is 12\n    customer_count = 40\n\n    # Customers who received both a pen and a file are those who\n    # are in positions that are multiples of the LCM of 3 and 4\n    num_both = customer_count // lcm\n\n    return num_both\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk = 20\n    lily_walk = hook_walk - 5\n    return lily_walk\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    kg_per_apple = 1 / apples_per_kg\n    total_kg_apples = 8\n    apples_used_total = total_kg_apples / kg_per_apple\n    apples_per_cake = 4\n    cakes_bakeable = apples_used_total // apples_per_cake\n    \n    return int(cakes_bakeable)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = (35 / 45) * 9\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "import math\n\ndef solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n    circumference = distance_between_seeds * total_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for cut_pieces in range(10):\n        # If cut_pieces were cut into three parts, they would create cut_pieces * 2 extra pieces\n        total_pieces = 10 - cut_pieces + cut_pieces * 3\n        if total_pieces == 16:\n            return cut_pieces\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    avg_score_boys = 10\n    avg_score_all = 14\n\n    total_score = (total_boys + total_girls) * avg_score_all\n    boys_score = total_boys * avg_score_boys\n    girls_score = total_score - boys_score\n    avg_score_girls = girls_score / total_girls\n\n    return avg_score_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let x be the side length of the original square array of students.\n    # The number of students in the original square array will then be x^2.\n    # There are 9 surplus students, so the total is x^2 + 9.\n\n    # When one row and one column are added, the new array will have side length (x+1).\n    # The number of students in the new square array will be (x+1)^2.\n    # We know that 16 more students are needed to form this larger array, so the total should be x^2 + 9 + 16.\n\n    # We can set up the equation:\n    # (x+1)^2 = x^2 + 9 + 16\n    # Simplify the equation to its standard form and solve for x.\n    # x^2 + 2x + 1 = x^2 + 25\n    # 2x + 1 = 25\n    # 2x = 24\n    # x = 12\n\n    # The number of students in the original square array will be x^2 + 9\n    # Substitute x = 12 into the equation\n    # Number of students = 12^2 + 9 = 144 + 9 = 153\n\n    x = 12\n    num_students = x**2 + 9\n    return num_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    total_initial_postcards = 50\n    initial_envelopes = 5\n    additional_envelopes = 2\n    \n    postcards_per_envelope = total_initial_postcards / initial_envelopes\n    total_additional_postcards = postcards_per_envelope * additional_envelopes\n    total_postcards = total_initial_postcards + total_additional_postcards\n    \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "from itertools import combinations_with_replacement\nfrom collections import Counter\n\ndef solution():\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]  # All coin values in pence\n    target = 250  # Change in pence\n\n    for combination in combinations_with_replacement(coins, target // min(coins)):\n        if sum(combination) == target and all(value == 2 for value in Counter(combination).values()):\n            return min(combination)  # Return the smallest coin's value\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_cookies = symbols('total_cookies')\n\n    # Create equations based on the problem statement\n    burnt_cookies = (3/5) * total_cookies\n    remaining_cookies = total_cookies - burnt_cookies\n    sold_cookies = (3/4) * remaining_cookies\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    # Solve the equation\n    solutions = solve(equation, total_cookies)\n\n    # Return the number of cookies baked initially\n    return solutions[0]\n    \nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    unit_cost = 80 / 100  # cost per gram in pence\n    cost_250g = unit_cost * 250  # cost of 250 grams in pence\n    cost_250g_in_pounds = cost_250g / 100  # convert to pounds\n    return cost_250g_in_pounds\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    num1 = (-3.2) - (0.2)**2\n    den1 = -1.8\n    num2 = 41.08 - (-2/5)**2\n    den2 = 3 + (-2)**3\n\n    ans = (num1 / den1) - (num2 / den2)\n  \n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    \n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**5):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (int(\"107\" + str(y))) % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n    \n    total_students = 6\n    rita_positions = total_students - 2  # Rita cannot be the last one, and Laura is at the front already\n    other_students = total_students - 2  # Laura and Rita are not part of the permutation of the rest\n    \n    # Number of ways other students can be lined up\n    ways_for_others = factorial(other_students)\n    \n    # Possible ways for the line up with given conditions\n    ways_for_line = rita_positions * ways_for_others\n    \n    return ways_for_line\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    kevin_speed = 80  # Kevin's speed in mph\n    jerry_fraction = 3/7  # Fraction of the distance Jerry travels\n    # Since they meet when Jerry travels three-sevenths of the distance, Kevin must travel four-sevenths.\n    kevin_fraction = 1 - jerry_fraction\n\n    # Now we set up the ratio of their speeds since speed is directly proportional to the distance\n    # if they travel for the same amount of time.\n    jerry_speed_ratio = 2/5\n    kevin_speed_ratio = kevin_fraction / jerry_fraction\n\n    # Actual speed of Jerry\n    jerry_speed = kevin_speed * (jerry_speed_ratio / kevin_speed_ratio)\n\n    # Total time taken by Jerry to travel three-sevenths of the journey\n    # Distance = Speed * Time  => Time = Distance / Speed\n    # Here, distance is a fraction of the total length L (which we call 1 unit for simplicity)\n    # So Time taken by Jerry to travel three-sevenths of L is (3/7) * L / Jerry's Speed\n    total_time_taken_by_jerry = jerry_fraction / jerry_speed\n\n    # Since Jerry travels the 3/7 distance in the same time Kevin travels 4/7 distance,\n    # The distance covered by Kevin is Kevin's speed times total time taken by Jerry\n    distance_covered_by_kevin = kevin_speed * total_time_taken_by_jerry\n\n    # Distance covered by Kevin is 4/7 of the total distance\n    total_distance = distance_covered_by_kevin / kevin_fraction\n\n    return total_distance\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    otimes = lambda a, b: (a + b) * a\n    ans = otimes(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_on_regular = 0.50\n    additional_discount = 0.20\n\n    discounted_price = regular_total_price * (1 - discount_on_regular)\n    final_price = discounted_price * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    buzz_weight = symbols('buzz_weight')\n\n    equation = Eq(buzz_weight, 3 * (buzz_weight - 450))\n\n    solution = solve(equation, buzz_weight)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_of_total = 4 / 7\n\n    total_apples_brought = apples_sold / fraction_of_total\n\n    return int(total_apples_brought)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time of takeoff in Singapore\n    sg_takeoff = datetime(year=2023, month=8, day=24, hour=5, minute=0)\n\n    # Time of landing in London\n    lon_landing = datetime(year=2023, month=8, day=24, hour=11, minute=0)\n\n    # Adding the time difference to get Singapore time of landing\n    sg_landing = lon_landing + timedelta(hours=7)\n\n    # Calculating the duration of the flight\n    flight_duration = sg_landing - sg_takeoff\n\n    # getting the total duration in hours\n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_pupils = 40\n\n    # Equations based on the problem\n    equation1 = Eq((20 * boys + 60 * girls) / total_pupils, 35)  # Average number of pencils\n    equation2 = Eq(boys + girls, total_pupils)  # Total pupils\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probabilities given by the question\n    P_win = 0.3  # Probability that Sally wins\n    P_draw = 0.1 # Probability that Sally draws\n    P_lose = 0.6 # Probability that Sally loses (1 - P_win - P_draw)\n\n    # Probability that Sally wins exactly one of the two games:\n    # There are two scenarios: Sally wins the first and loses/draws the second\n    # OR Sally loses/draws the first and wins the second.\n\n    # P(Win first AND Not win second) + P(Not win first AND Win second)\n    P_one_win = (P_win * (P_lose + P_draw)) + ((P_lose + P_draw) * P_win)\n\n    return P_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_left_7 = 3\n\n    lollipops = lollipops_left_4  # Start from 32 lollipops left scenario\n\n    while True:\n        if (lollipops - lollipops_left_7) % 7 == 0:  # Check if it fits the 7 lollipops scenario\n            return lollipops\n        lollipops += 4  # Increment by the number of lollipops per box in the first scenario\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # Differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Greatest common divisor of the differences\n    D = gcd(gcd(diff1, diff2), diff3)\n\n    # The remainder R when any of the numbers is divided by D\n    R = 2010 % D\n\n    # The required sum\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # For 1/13 in decimal form, we need to find the recurring cycle.\n    # 1/13 = 0.076923076923..., and the cycle is 076923, which repeats indefinitely.\n    cycle = '076923'\n    cycle_length = len(cycle)\n\n    # We want the digit in the 2012th decimal place. \n    # Since the cycle repeats every 6 digits, we find the position within the cycle.\n    remainder_index = (2012 - 1) % cycle_length\n\n    # Access the digit at that position in the cycle.\n    desired_digit = cycle[remainder_index]\n\n    return int(desired_digit)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100): # 2-digit numbers start from 10 to 99\n        if (number // 10 + number % 10) % 5 == 0: # Divide and add the digits, then check if it's a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let x be the common multiplier for the original number of cards\n    # Eddi's original number of cards = 8x\n    # Wiya's original number of cards = 7x\n    # After Eddi gives Wiya 4 cards:\n    # Eddi's new number of cards = 8x - 4\n    # Wiya's new number of cards = 7x + 4\n    # The new ratio is 18:17, thus:\n    # (8x - 4) / (7x + 4) = 18 / 17\n\n    # Cross-multiply to solve for x\n    # 17 * (8x - 4) = 18 * (7x + 4)\n    # 136x - 68 = 126x + 72\n    # 10x = 140\n    # x = 14\n\n    # Eddi's original number of cards = 8x\n    # Eddi's original number of cards = 8 * 14\n    return 8 * 14\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # The ratio of red to blue marbles is 5:6\n    red_marbles = (5/6) * blue_marbles\n    # Red marbles is twice the number of green marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - (2016 + Fraction(875, 1000)) * (Fraction(11, 3))\n    denominator = ((2017 + Fraction(1, 3)) - (2016 + Fraction(875, 1000))) * 17\n    additional_multiplier = 3 + Fraction(23, 32)\n\n    result = (numerator / denominator) * additional_multiplier\n    \n    return float(result)\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n\n    # The rabbit runs for 10 minutes before taking a nap\n    rabbit_distance_before_sleep = rabbit_speed * 10  # distance covered by rabbit before sleep\n    \n    # The turtle continues to run for 215 minutes (while the rabbit sleeps) plus the first 10 minutes\n    turtle_distance_after_225_min = turtle_speed * (10 + 215)  # distance covered by turtle after 225 minutes\n   \n    if turtle_distance_after_225_min >= race_distance:\n        # Turtle finishes the race before rabbit wakes up\n        winner = \"turtle\"\n        winner_time = (race_distance / turtle_speed)\n        # When the turtle finishes, the rabbit is still sleeping at the last position\n        distance_between = race_distance - rabbit_distance_before_sleep\n    else:\n        # Rabbit wakes up and both continue the race\n        # Calculate remaining distance for rabbit after sleep\n        remaining_distance_for_rabbit = race_distance - rabbit_distance_before_sleep\n        # Time it takes for rabbit to finish after waking up\n        rabbit_time_to_finish = remaining_distance_for_rabbit / rabbit_speed\n        # Total time for rabbit to finish the race\n        total_rabbit_time = 10 + 215 + rabbit_time_to_finish\n\n        # Calculate turtle's distance at the moment the rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * total_rabbit_time\n\n        if turtle_distance_when_rabbit_finishes >= race_distance:\n            # Turtle finishes first\n            winner = \"turtle\"\n            distance_between = 0  # Turtle is at the finish line\n        else:\n            # Rabbit finishes first\n            winner = \"rabbit\"\n            # Calculate the remaining distance for the turtle\n            distance_between = race_distance - turtle_distance_when_rabbit_finishes\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students to move from Class A to Class B\n    # After moving x students, Class A will have x less and Class B will have x more\n    # The difference between the number of students in 2 classes will be (47 - 2x)\n    # We want Class A to have 9 more students than Class B\n    # Hence the equation: 47 - 2x = 9\n    # Solving for x\n    x = (47 - 9) // 2\n\n    return x\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # x and y are the two numbers\n    # Let x be the smaller number\n    x = (77 - 57) / 2\n    return x\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        if i % 2 != 0:  # Check if the number is odd\n            digits = [int(digit) for digit in str(i)]  # Split number into individual digits\n            if sum(digits) == 5:  # Check if the sum of the digits is 5\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    avocados_per_pair = 2\n    \n    total_avocados = total_pairs * avocados_per_pair\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    \n    cost_per_avocado_pence = cost_per_avocado_pounds * 100\n    \n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # The range of possible sums is from 2 (1+1) to 12 (6+6)\n    sums_frequency = {sum: 0 for sum in range(2, 13)}\n\n    # Loop through all possible outcomes for two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            # Increment the frequency of the resulting sum\n            sums_frequency[die1 + die2] += 1\n\n    # Find the sum with the highest frequency\n    most_likely_sum = max(sums_frequency, key=sums_frequency.get)\n    \n    return most_likely_sum\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    total_students = 36\n    class_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    boys = total_students - girls\n    total_score_class = class_average * total_students\n\n    equation = Eq(girls * girls_average + boys * boys_average, total_score_class)\n\n    girls_count = solve(equation, girls)\n\n    return girls_count[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the animals\n    rhinos, deer, ostriches = symbols('rhinos deer ostriches')\n\n    # Set the equations based on the problem statement\n    equation1 = Eq(rhinos, deer)  # Number of rhinos is equal to the number of deer\n    equation2 = Eq(rhinos + deer + ostriches, 28)  # Total number of heads\n    equation3 = Eq(4*rhinos + 4*deer + 2*ostriches, 88)  # Total number of legs\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rhinos, deer, ostriches))\n\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12  # Given for a square table\n    square_tables = 8  # Number of square tables placed in a row\n\n    # Each square table contributes 2 people to the long sides of the rectangle\n    # The first and last square tables also contribute 3 people each to the short sides\n    max_people_long_sides = (square_tables * 2) * 2  # 2 people per table for each long side\n    max_people_short_sides = 2 * 3  # 3 people for each of the two short sides\n\n    max_people = max_people_long_sides + max_people_short_sides\n\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n    \n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n    \n    # Since we need the sum of marbles Boris and Jeffery have\n    boris_and_jeffery_marbles = solutions[boris] + solutions[jeffery]\n    \n    return boris_and_jeffery_marbles\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    pages = 0\n    digit_count = 0\n    \n    while digit_count < total_digits:\n        pages += 1\n        digit_length = len(str(pages))\n        digit_count += digit_length\n\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, isprime\n\n    # A number n has 15 = 3 * 5 factors if and only if:\n    # - n = p^14 for some prime p (but in this case, it wouldn't be a multiple of 15)\n    # - n = p^2 * q^4 or n = p^4 * q^2 for primes p, q with p ≠ q\n    # Since it has to be a multiple of 15, let's choose p = 3 and q = 5, or p = 5 and q = 3.\n    \n    # Find numbers of the form p^2 * q^4 where p and q are 3 and 5 (or 5 and 3).\n    # Number of factors calculation is (exponent_of_prime1 + 1) * (exponent_of_prime2 + 1)\n    # We look for exponents where this multiplication equals 15.\n    \n    count = 0\n    primes = [3, 5]\n    \n    # First case: p^2 * q^4, check if it's a multiple of 15 and has 15 factors.\n    for p in primes:\n        for q in primes:\n            if p != q:\n                n = (p**2) * (q**4)\n                if sum(divisors(n)) % 15 == 0 and not isprime(n):\n                    count += 1\n\n    # Second case: p^4 * q^2, similar to the first case.\n    for p in primes:\n        for q in primes:\n            if p != q:\n                n = (p**4) * (q**2)\n                if sum(divisors(n)) % 15 == 0 and not isprime(n):\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%I:%M%p\").lstrip('0')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Computing the last digit for each term using mod with base 10\n    last_digit_32_33 = pow(32, 33, 10)\n    last_digit_22_29 = pow(22, 29, 10)\n    \n    # Finding the ones digit of the difference\n    ones_digit = (last_digit_32_33 - last_digit_22_29) % 10\n    \n    return ones_digit\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Starting with an array size of 1 (1x1) and increasing\n    for n in range(1, 100):\n        # Every odd layer is students, even layer is teachers\n        if n % 2 == 1:  # odd n, students on the outer layer\n            students = (n * 2 + (n - 2) * 2) * ((n + 1) // 2)\n            teachers = ((n - 1) * 2 + (n - 3) * 2) * (n // 2)\n        else:  # even n, teachers on the outer layer\n            students = ((n - 1) * 2 + (n - 3) * 2) * (((n - 1) + 1) // 2)\n            teachers = (n * 2 + (n - 2) * 2) * (n // 2)\n        \n        if students - teachers == 52:\n            return students + teachers\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n\n    # Loop through all possible values of A (2-digit numbers) and B (4-digit numbers)\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            # Check if both A+B and A^2+B^2 are multiples of 7\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                # Update max_diff if the current difference is greater than the already found max_diff\n                max_diff = max(max_diff, B - A)\n\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # 8^2 * x = 8 * 80 * 100\n    # x = 80 * 100 / 8\n    ans = (80 * 100) // 8\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # First, simplify the given fraction\n    whole_part = 2014 // 37\n    remainder = 2014 % 37\n\n    # Start with the whole number part of the fraction\n    fraction_part = 37 / remainder\n\n    # Iterate to find values for x, y, z\n    for x in range(1, int(fraction_part) + 1):\n        rest = fraction_part - x\n        # We take care of the case where rest is an exact integer to avoid division by zero\n        if rest.is_integer(): \n            continue\n            \n        for y in range(1, int(1 / rest) + 1):\n            z_fraction_part = 1 / rest - y\n            # We take care of the case where z_fraction_part is an exact integer to avoid division by zero\n            if z_fraction_part.is_integer(): \n                continue\n                \n            if 1 / z_fraction_part.is_integer():\n                z = int(1 / z_fraction_part)\n                if z != y and z != x:  # ensuring x, y, z are distinct\n                    return x + y + z + whole_part  # adding the whole number part to the sum of x, y, z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    stop_number = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    start_number = (stop_number - (total_counts % clock_numbers)) % clock_numbers\n    if start_number == 0:\n        start_number = clock_numbers\n\n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket.\n    x = symbols('x')\n\n    # After selling x kilograms, the big bucket has 89 - x kilograms left,\n    # and the small bucket has 45 - x kilograms left.\n    # According to the problem, the big bucket then has 12 times the oil of the small bucket.\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x.\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n    amount_per_person = jackpot / people\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernates = 180\n    bear_hibernates = (2/3) * snake_hibernates\n    frog_hibernates = (5/4) * bear_hibernates\n\n    return frog_hibernates\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # the alien has 5 legs and it has 5 brothers, so\n    # in total, there are 6 aliens * 5 legs each = 30 legs\n    total_legs = 6 * 5\n    \n    # since shoes are sold in 5s and each alien has 5 legs,\n    # they need one pack of shoes per alien, which means 6 packs total\n    total_shoe_packs = 6\n    cost_shoes = total_shoe_packs * 78\n    \n    # socks are sold in pairs (2 socks per pair),\n    # since there are 30 legs total, it needs 15 pairs of socks for all legs\n    total_sock_pairs = total_legs // 2\n    cost_socks = total_sock_pairs * 12\n    \n    # the total cost is the cost of shoes plus the cost of socks\n    total_cost = cost_shoes + cost_socks\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for number in range(100, 1000):\n        if all(number % divisor == 1 for divisor in [5, 6, 7]):\n            return number\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Calculate values of a, b, c\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - (31 - a)\n\n    # Since a, b, and c should be prime numbers and the differences suggest\n    # they are consecutive prime numbers, we verify if the computed values are prime.\n    primes = list(primerange(1, 20))  # List of primes smaller than 20\n\n    # Verify if a, b, and c are in the primes list\n    if a in primes and b in primes and c in primes:\n        return a * b * c\n    else:\n        return None\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # convert time to hours\n    # Let d be the distance between home and the park.\n    # Time to jog to the park: d/5 hours\n    # Time to jog back: d/4 hours\n    # total_time_hours = d/5 + d/4\n    # Solving for d: d = (total_time_hours) / (1/5 + 1/4)\n\n    d = total_time_hours / (1/5 + 1/4)\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie_pies = symbols('rennie_pies')\n    joleen_pies = rennie_pies + 5\n\n    equation = Eq((3/4) * rennie_pies, (2/3) * joleen_pies)\n    \n    pies_for_rennie = solve(equation, rennie_pies)[0]\n    pies_for_joleen = pies_for_rennie + 5\n   \n    total_pies = pies_for_rennie + pies_for_joleen\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x. Then, the number of girls is x + 8.\n    # Hence, the total is x + (x + 8) = 26\n    \n    # Solve for x (number of boys)\n    x = (total_pupils - 8) / 2\n    \n    # Calculate the number of girls\n    num_girls = x + 8\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    # Let 3x be the number of students who like only apples\n    # Let 5x be the number of students who like only bananas\n\n    # According to the Inclusion-Exclusion Principle for two sets:\n    # Total = A + B - Both\n    # where A is the number of students who like apples,\n    # B is the number of students who like bananas, and\n    # Both is the number of students who like both apples and bananas\n\n    # Therefore, we can establish the equation:\n    # 35 = 3x + 5x - x\n    # Solve for x\n    x = 35 / (3 + 5 - 1)\n\n    return int(x)\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    initial_kg = 3.5\n    pie_g = 550\n    juice_g = 1050\n\n    used_kg = (pie_g + juice_g) / 1000\n    remaining_kg = initial_kg - used_kg\n\n    return remaining_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it is the first digit of a two-digit number\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n    return \"No solution found\"\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    # Let n be the total hours Nancy would take to finish the job by herself\n    # Let l be the total hours Lee would take to finish the job by himself\n    # (1/l + 1/n) * 10 = 1 (since they finish the job together in 10 hours)\n    # n / l = 3 (since Nancy works 20 hours in total while Lee works only for 6 hours)\n    # Therefore, 10/n + 10/l = 1 and l = 3*n => 10/n + 10/(3*n) = 1\n    # Solve for n\n    \n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    \n    equation1 = Eq(10/n + 10/(3*n), 1)\n    solutions = solve(equation1, n)\n    \n    # Filter positive solution.\n    # Since time can't be negative, we consider only the positive solution.\n    nancy_time = [sol.evalf() for sol in solutions if sol > 0][0]\n    \n    return nancy_time\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n\n    total_chairs = sum(first_day_chairs + difference * (day - 1) for day in range(1, total_days + 1))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choosing one pencil and one ruler\n    pencil_ruler = pencils * rulers\n\n    # Choosing one pencil and one pen\n    pencil_pen = pencils * pens\n\n    # Choosing one ruler and one pen\n    ruler_pen = rulers * pens\n\n    return pencil_ruler + pencil_pen + ruler_pen\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    frac = 12 / 25\n    percent = frac * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Based on the Pigeonhole Principle,\n    # if Benny picks 2 blue marbles (worst case for blue)\n    # and 2 yellow marbles (worst case for yellow),\n    # the next marble he picks must give him 3 of the same color.\n    \n    # 2 blue + 2 yellow + 1 next marble = 5\n    return 5\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if n % 4 == 3 and n % 13 == 12:\n            return n\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    Mary_son_sum_current = 45\n    Mary_son_sum_future = Mary_son_sum_current + 5 + 5  # Both will be 5 years older\n    return Mary_son_sum_future\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    return -10 + 3\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # the total cost in pence\n    amount_paid = 100     # the amount paid in pence (£1 = 100p)\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    garrett, sebastian = symbols('garrett sebastian')\n    \n    equation1 = Eq(sebastian, garrett - 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (garrett, sebastian))\n    \n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be b and the number of girls be g\n    b, g = symbols('b g')\n\n    # Initial condition: g = b + 65\n    initial_condition = Eq(g, b + 65)\n\n    # After leaving, the number of boys and girls remaining should be equal\n    boys_left = b - (2/5) * b    # The number of boys that remained\n    girls_left = g - (3/7) * g   # The number of girls that remained\n    equality_condition = Eq(boys_left, girls_left)\n\n    # Solve the equations\n    solutions = solve((initial_condition, equality_condition), (b, g))\n\n    # Calculate the total number of students remained in the hall\n    total_students_remained = boys_left.subs(b, solutions[b]) + girls_left.subs(g, solutions[g])\n\n    return int(total_students_remained)\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    tax_paid = 90\n    sofa_price = tax_paid / tax_rate\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_person_per_day = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_person_per_day * number_of_people * number_of_days\n    total_spending_money = spending_money_per_person * number_of_people\n    \n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n    \n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "import math\n\ndef solution():\n    # Factorial function as a helper for permutations\n    fact = math.factorial\n\n    # Treat each group of books as a single unit\n    # There are 4 units to arrange: M, C, P, B (math, chemistry, physics, biology singularly)\n    # Number of ways to arrange the 4 units\n    units_arrangements = fact(4)\n\n    # Now, within each subject, arrange the books\n    # For math books, there are 4!, for chemistry books, there are 3!, for physics books, 2!\n    math_arrangements = fact(4)\n    chemistry_arrangements = fact(3)\n    physics_arrangements = fact(2)\n\n    # Multiplying the arrangements of units with the arrangements within each subject\n    total_ways = units_arrangements * math_arrangements * chemistry_arrangements * physics_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # Number of letters in 'ORANGES'\n    total_ways = factorial(total_letters)\n\n    # Count the ways vowels can be all together\n    vowels_together = factorial(3) * factorial(total_letters - 2)\n\n    # Subtract the ways the vowels are together from the total ways\n    ans = total_ways - vowels_together\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    return 70017007\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    ways = category1 * category2 * category3\n\n    return ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "from sympy import solve, Eq, symbols, isprime\n\ndef solution():\n    # Define symbols for a, b, and c\n    a, b, c = symbols('a b c', integer=True)\n\n    # Setup the equations\n    equation_1 = Eq(31 + a, 26 + b)\n    equation_2 = Eq(26 + b, 20 + c)\n\n    # Solve the system of equations\n    solutions = solve((equation_1, equation_2), (a, b, c))\n\n    # Extract solutions for a, b, and c\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # Make sure the solutions are prime numbers\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n        # Calculate the product a * b * c\n        return a_val * b_val * c_val\n    else:\n        return \"One or more variables are not prime\"\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    # The largest side has to be less than the perimeter / 2.\n    for side in range(1, 12//2):\n        for base in range(1, 12 - 2 * side + 1):\n            if 2 * side + base == 12:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts each person ends up with\n    e_f, m_f, d_f = symbols('e_f m_f d_f')\n\n    # Equation for the final ratio\n    equation1 = Eq(e_f / m_f, 46 / 12)\n    equation2 = Eq(e_f / d_f, 46 / 7)\n    \n    # Equations representing the transactions\n    # Eugene starts with e_s, gives m_t to Melvin and receives d_t from David\n    e_s, m_t, d_t = symbols('e_s m_t d_t')\n    equation3 = Eq(e_f, e_s - m_t + d_t)\n    \n    # Melvin starts with m_s = m_t / 2, since Eugene gave him twice what he had, and gives d_s to David\n    m_s, d_s = symbols('m_s d_s')\n    equation4 = Eq(m_f, m_s + m_t - d_s)\n    equation5 = Eq(m_t, 2 * m_s)\n    \n    # David starts with d_s, since Melvin gave him the same amount he had, and gives e_s / 2 to Eugene\n    equation6 = Eq(d_f, d_s + d_s - e_f / 2)\n    equation7 = Eq(d_t, e_f / 2)\n\n    # The sum of stickers in the end must equal the original total\n    equation8 = Eq(e_f + m_f + d_f, 260)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7, equation8), (e_f, m_f, d_f, e_s, m_t, d_t, m_s, d_s))\n\n    # Eugene's initial amount\n    return solutions[e_s]\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # The winning strategy for such games often comes down to a winning position.\n    # A winning position is one where no matter how the other player plays, the current player can still win.\n    # In this game, the winning position are positions where the difference between the piles is a Fibonacci number.\n\n    # Since we are not explicitly asked for the winning strategy for each step,\n    # we only need to determine if there is a winning strategy for Eddie, and what it is in general terms.\n\n    # Define a function to check if a number is a Fibonacci number.\n    def is_fibonacci(n):\n        fib_a, fib_b = 0, 1\n        while fib_a <= n:\n            if fib_a == n:\n                return True\n            fib_a, fib_b = fib_b, fib_a + fib_b\n        return False\n\n    pile_a = 35\n    pile_b = 24\n    diff = abs(pile_a - pile_b)\n\n    # Eddie has the winning strategy if the difference is not a Fibonacci number.\n    eddie_winning_strategy = not is_fibonacci(diff)\n\n    return \"Eddie\" if eddie_winning_strategy else \"Wei'er\"\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    n = 6 # Number of people\n    seats = 8 # Total seats available\n    # Since the table can be rotated, we fix one person's position and arrange the rest.\n    # This eliminates the equivalence due to rotation.\n    fixed_seat_ways = factorial(n - 1)\n    return fixed_seat_ways\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial number of boys and girls as 'b'\n    b = symbols('b')\n    \n    # Initial condition: equal number of boys and girls\n    initial_boys = b\n    initial_girls = b\n    \n    # After the changes\n    final_boys = initial_boys + 12\n    final_girls = initial_girls - 8\n    \n    # According to the final condition, final number of boys is twice the number of girls\n    equation = Eq(final_boys, 2 * final_girls)\n    \n    # Solve the equation for b\n    b_value = solve(equation, b)\n    \n    # The total number of students initially is twice the number of girls or boys\n    total_students_initially = 2 * b_value[0]\n    \n    return total_students_initially\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = last_term - first_term + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([(-1)**(i % 2) * n for i, n in enumerate(range(80, 55, -2))])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - distance1 - distance2\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if 25 - prime in primes:\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Convert start time 6:52pm to minutes\n    end_time = (8 * 60) + 24    # Convert end time 8:24pm to minutes\n\n    time_spent = end_time - start_time  # Calculate the difference in minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the variables for the number of cupcakes \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Given condition equation\n    equation1 = Eq(chocolate, vanilla + 72)    # 72 more chocolate cupcakes than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)    # 36 lesser blueberry cupcakes than vanilla\n    \n    # After selling equation\n    equation3 = Eq((chocolate - (chocolate/6)) + \n                   (vanilla - (2/3)*vanilla) + \n                   (blueberry - (7/9)*blueberry), 427)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Calculate the number of chocolate cupcakes sold (1/6 of chocolate cupcakes)\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamps = 2  # in meters\n\n    # Since there are lamp posts at each end, we need to subtract one from the total count\n    # and then multiply by the distance between each lamp post.\n    road_length = (num_lamp_posts - 1) * distance_between_lamps\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    peaches = 47\n    students = 6\n    # Pigeonhole principle: at least one student will get (peaches // students) + 1\n    min_peaches_for_most = (peaches // students) + 1\n    return min_peaches_for_most\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n    ans = end_page - start_page + 1\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    n = 7\n    \n    avg = total_sum / n\n    smallest_number = avg - (n - 1) / 2\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We use the Chinese Remainder Theorem to solve the system of congruences\n    # x ≡ -3 (mod 4)\n    # x ≡ -1 (mod 7)\n    # x ≡ -3 (mod 9)\n    \n    # Since we know the number of children is an integer, we write the congruences in the following form:\n    congruences = ((1, 4), (6, 7), (6, 9))\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost_pence = 10 * 45\n    stamp_cost_pence = 10 * 27\n    total_cost_pence = post_card_cost_pence + stamp_cost_pence\n    note_value_pence = 1000  # 10 pounds in pence\n    change_pence = note_value_pence - total_cost_pence\n    return change_pence / 100  # to convert pence back to pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 seats available since Claire's seat is fixed.\n    # We need to arrange Chantel, Tony and Cale in these seats.\n    \n    # Total arrangements without restrictions is 3! (factorial of 3)\n    total_arrangements = 3 * 2 * 1\n    \n    # Now we subtract the arrangements where Claire and Tony sit face to face.\n    # Since Claire's seat is fixed, there is only 1 way Tony can sit face to face with her.\n    # The remaining two can be arranged in 2! ways.\n    forbidden_arrangements = 1 * 2 * 1\n    \n    # The number of valid arrangements is the total arrangements \n    # minus the forbidden ones where Tony sits face to face with Claire.\n    valid_arrangements = total_arrangements - forbidden_arrangements\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    tables_per_day_frank = 180 / 10\n    tables_per_day_ryan = 180 / 15\n\n    more_tables = tables_per_day_frank - tables_per_day_ryan\n\n    return more_tables\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of questions\n    x = symbols('x')\n    \n    # If she marks 4 questions per minute, she's 5 minutes late\n    # That means total time taken is x/4 + 5\n    # If she marks 6 questions per minute, she's 5 minutes early\n    # That means total time taken is x/6 - 5\n    # Both times should be equal since the school closing time is constant\n\n    equation = Eq((x / 4) + 5, (x / 6) - 5)\n\n    # Solve the equation for x\n    total_questions = solve(equation, x)[0]\n    \n    return total_questions\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    rounded_mass = 7.4\n    smallest_possible_mass = rounded_mass - 0.05\n    return smallest_possible_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 96):\n        num1, num2, num3, num4, num5 = i, i+1, i+2, i+3, i+4\n        # Check the sum of the three numbers for divisibility by 37\n        if ((num1 + num2 + num3) % 37 == 0 or\n           (num2 + num3 + num4) % 37 == 0 or\n           (num3 + num4 + num5) % 37 == 0):\n            # Check the sum of the other three numbers for divisibility by 60\n            if ((num1 + num2 + num3) % 60 == 0 or\n               (num2 + num3 + num4) % 60 == 0 or\n               (num3 + num4 + num5) % 60 == 0):\n                return num5\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_mark = -2\n    total_marks = 79\n    \n    # Let correct_questions be the correct answers Kathy made\n    for correct_questions in range(total_questions + 1):\n        incorrect_questions = total_questions - correct_questions\n        if correct_questions * correct_mark + incorrect_questions * incorrect_mark == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    cake_price = 0.75  # in pounds\n    number_of_cakes_sold = total_money_raised / cake_price\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remainder = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder\n    left_over = remainder - spent_on_fees\n\n    return left_over\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(1, 1) # Example usage with x=1 and y=1, you can replace 1,1 with any values of x and y."
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Each chime takes the same amount of time, so if it takes 6 seconds to chime 3 times,\n    # it will take twice as long to chime 6 times because 6 is twice 3.\n\n    chime_time_for_3 = 6  # seconds for 3 chimes\n    chimes_needed = 6     # number of chimes at 6 pm\n\n    # Calculate time for each chime\n    time_per_chime = chime_time_for_3 / 3\n\n    # Calculate total time for 6 chimes\n    total_time_for_6 = time_per_chime * chimes_needed\n\n    return total_time_for_6\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate per hour (jobs per hour)\n    work_rate_p = 1 / (12 * 8)\n        \n    # Q's work rate per hour (jobs per hour)\n    work_rate_q = 1 / (8 * 10)\n\n    # Combined work rate of P and Q per hour\n    combined_work_rate_per_hour = work_rate_p + work_rate_q\n\n    # Total number of hours to complete the job working together\n    total_hours_together = 1 / combined_work_rate_per_hour\n\n    # Since they work 8 hours a day together find the total days\n    # The result is ceil because we need whole days\n    total_days_together = -(-total_hours_together // 8)  # Ceiling division\n\n    return int(total_days_together)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # First, convert metres to centimetres\n    metres_to_centimetres = 3.2 * 100  # There are 100 centimetres in 1 metre\n    \n    # Then, calculate the difference between the two lengths in centimetres\n    diff_in_centimetres = metres_to_centimetres - 30\n    \n    return diff_in_centimetres\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Using the formula for the sum of squares from 1 to n: n(n+1)(2n+1)/6\n    n = 10\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n\n    # Multiply by 3 because the sequence is 3*1^2, 3*2^2, ..., 3*10^2\n    ans = 3 * sum_of_squares\n    \n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for page in range(1, 41):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 0.56  # Convert pence to pounds\n    total_cost = 5 * cost_per_kg\n    money_given = 10\n    change = money_given - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import divisors\n\n    ans = len(divisors(120))\n    return ans\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    product = 180\n    factors = [(i, product // i) for i in range(1, int(product**0.5) + 1) if product % i == 0]\n    min_difference = min(abs(x - y) for x, y in factors)\n    return min_difference\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temp_midnight_thursday = -8\n    temp_midday_friday = 13\n\n    temp_change = temp_midday_friday - temp_midnight_thursday\n\n    return temp_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    multiples_of_3 = [i for i in range(6, 15) if i % 3 == 0]\n    factors_of_27 = [j for j in range(1, 28) if 27 % j == 0]\n    \n    result = list(set(multiples_of_3).intersection(factors_of_27))\n    \n    if len(result) == 1:\n        return result[0]\n    else:\n        return None\n\n    \nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let v_l be Luca's usual walking speed and v_m be Max's walking speed.\n    # Given that the ratio of their speeds is v_l : v_m = 2 : 3.\n    \n    # We also know that time = distance/speed.\n    # Let d be the common distance they cover.\n    # Let t_m be the time taken by Max and t_l be the time taken by Luca to cover the distance d.\n    \n    # Given that Luca takes 10 more minutes than Max, we have:\n    # t_l = t_m + 10\n    \n    # A ratio of speeds 2:3 implies that if Max's speed is 3x, Luca's speed is 2x.\n    v_l = 2\n    v_m = 3\n    \n    # Since they cover the same distance and time is inversely proportional to speed:\n    # t_l / t_m = v_m / v_l\n    # (t_m + 10) / t_m = v_m / v_l\n    # (t_m + 10) / t_m = 3 / 2\n    # 2 * (t_m + 10) = 3 * t_m\n    # 2 * t_m + 20 = 3 * t_m\n    # 20 = t_m\n    t_m = 20\n    \n    # Then Luca's time would be t_m + 10\n    t_l = t_m + 10\n    \n    # If Luca had walked at double his usual speed, his new speed would be 2 * v_l.\n    # Since time is inversely proportional to speed, his new time would be his usual time divided by 2.\n    # new_time_luca = t_l / 2 \n    new_time_luca = t_l / 2\n    \n    return new_time_luca\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruit_count = 3 + 5\n    total_weight = total_durian_weight + total_watermelon_weight\n    average_weight = total_weight / total_fruit_count\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Let x be the number of questions answered correctly\n    # Let y be the number of questions answered wrongly\n    # Hence, we have the following system of equations:\n    # 2x - y = 71  (Total Score Tom received)\n    # x + y = 40   (Total Number of Questions)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Define equations based on the problem\n    eq1 = Eq(2*x - y, 71)\n    eq2 = Eq(x + y, 40)\n    \n    # Solve the system of equations to find the correct values\n    solution = solve((eq1, eq2), (x, y))\n    \n    if solution[x] == 31:\n        wrong_answer = \"Tom made no mistake.\"\n    else:\n        wrong_answer = solution[y]\n    \n    return wrong_answer\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    million = 1000000\n    difference = million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = pencils = 1\n    while True:\n        if (pens + 18) == 2 * (pencils - 5):\n            return pens + 18\n        pens += 1\n        pencils += 1\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time spent jogging: 7:30 AM - 6:30 AM = 1 hour\n    jogging_time = 1  # in hours\n    \n    # Time spent walking: 9:30 AM - 7:30 AM = 2 hours\n    walking_time = 2  # in hours\n    \n    # Distance traveled while jogging\n    jogging_speed = 6.5  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Distance traveled while walking\n    walking_speed = 4.5  # in miles per hour\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Since there are 4 patterns and each has an \"A\" card,\n    # the worst-case scenario is drawing all cards except the \"As\" from each pattern\n    # Hence, drawing one card after all those ensures getting at least one \"A\".\n    \n    cards_to_draw_without_A = 13 * 4 - 4  # Because there are 4 \"A\"s in the deck\n    cards_to_ensure_A = cards_to_draw_without_A + 1\n    \n    return cards_to_ensure_A\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    original_length = 240\n    cut_length = 45\n    final_length_piece = 40\n\n    remaining_length = original_length - 2 * cut_length\n    num_of_40cm_pieces = remaining_length // final_length_piece\n\n    return num_of_40cm_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 0.1\n    total_left_handed = left_handed_tennis_players / proportion_left_handed_tennis\n    proportion_left_handed = 0.25\n    total_students = total_left_handed / proportion_left_handed\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_butter = 80 / 20\n    grams_butter_for_100_cookies = 100 / cookies_per_gram_butter\n    return grams_butter_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime.strptime(\"10:35 AM\", \"%I:%M %p\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n\n    return arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    return 3**3\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    number = 1\n    while count_zeros < 100:\n        number_str = str(number)\n        count_zeros += number_str.count('0')\n        if count_zeros < 100:\n            number += 1\n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk_per_week = 9\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk_per_week\n\n    return remaining_juice\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600  # Initial amount\n    rate = 0.02  # Interest rate per year\n    time = 10  # Number of years\n\n    interest = principal * rate * time  # Simple interest formula\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bud, pip, tom = symbols('bud pip tom')\n    \n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # speed when biking faster in meters per minute\n    time_fast = 6     # time biking at faster speed in minutes\n    speed_slow = 120  # speed when biking slower in meters per minute\n    time_slow = 8     # time biking at slower speed in minutes\n\n    # distance = speed * time\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    # total distance is the sum of distances covered at each speed\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # In an arithmetic sequence, the sum of n terms can be calculated by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # In this case, the sum of 8 consecutive numbers is given as 2012.\n    # Let's represent the first term of the sequence by x.\n    # Then the last term would be x + 7, since there are 8 numbers and they are consecutive.\n    # Now we can set up an equation to solve for x using the formula for the sum of an arithmetic sequence.\n    \n    # 2012 = 8/2 * (x + (x + 7))\n    # Simplifying the above equation to find the value of x\n    # 2012 = 4 * (2x + 7)\n    # 2012 = 8x + 28\n    # 1984 = 8x\n    # 248 = x\n    \n    # Now to find the largest number, we add 7 to the first term (x)\n    largest_number = 248 + 7\n    return largest_number\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = 0.20 * total_cars\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_between = 25\n    position_from_back = 14\n    danya_position_from_front = position_from_back - 1\n\n    total_people = people_between + danya_position_from_front + 2 # Elias and Danya\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A and b be the number of students in class B\n    a, b = symbols('a b', integer=True)\n\n    # Initial condition: a = 5/7 * b\n    initial_condition = Eq(a, 5/7 * b)\n\n    # After transferring students: a + 3 = 4/5 * (b - 3)\n    transfer_condition = Eq(a + 3, 4/5 * (b - 3))\n\n    # Solve the system of equations for a and b\n    solutions = solve((initial_condition, transfer_condition), (a, b))\n\n    # Return the number of students in class A before transfer\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let x be the number of boys in one row/column in the smaller square\n    # Then x^2 is the total number of boys\n    # The larger square will have (x+1) rows/columns\n    # The number of people in the larger square will be (x+1)^2\n    # Therefore, we have the equation (x+1)^2 - x^2 = 17\n\n    # Simplify the equation: x^2 + 2x + 1 - x^2 = 17\n    # 2x + 1 = 17\n    # 2x = 16\n    # x = 8\n\n    # Now calculate the total number of boys: x^2\n    total_boys = 8**2\n\n    return total_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the original speed\n    speed = symbols('speed')\n    \n    # Define the relationship based on the time and speed difference\n    original_time = 7 - 1  # 6 hours for the original trip\n    new_time = original_time - 1  # 5 hours for the faster trip\n    \n    # Equation based on Distance = Speed * Time\n    equation = Eq(speed * original_time, (speed + 2) * new_time)\n    \n    # Solve for the original speed\n    original_speed = solve(equation, speed)[0]\n    \n    # Calculate the distance using the original speed\n    distance = original_speed * original_time\n    \n    return distance\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # x is the number of empty bottles Faye has at first\n    # After 5 exchanges, she ends up with 4 new bottles\n    # According to the problem, she should have gotten 1 less, meaning 3 bottles after 5 exchanges\n    # This means, before the last exchange, she must have had 2 empty bottles left (since 3 exchanges give her 1 bottle)\n    # So with 5 exchanges, and going back each step, we can calculate the initial number of bottles.\n    \n    # Start from the end result that we actually know\n    # She should have 3 bottles at the end instead of 4, so we work our way back to the start\n    final_bottles_expected = 3\n    exchanges = 5\n    empty_bottles_per_new_bottle = 3\n    \n    # Working backwards\n    empty_bottles = 0  # These are the extras she is left with after the expected 3 bottles\n    for i in range(exchanges):\n        # Each time she gets a new bottle, before that, she must have exchanged 3 empty bottles\n        # So we add back these 3 empty bottles to the empty_bottles pool\n        empty_bottles += final_bottles_expected * empty_bottles_per_new_bottle\n        \n        # Now we find out how many bottles she had originally by reversing the exchange step\n        # Since she had enough bottles to make an exchange, we can subtract 1 for the new bottle she received\n        # then divide the rest by 3 to get the previous cycle's extra empty bottles\n        empty_bottles = (empty_bottles - 1) * empty_bottles_per_new_bottle\n    return empty_bottles + final_bottles_expected  # Don't forget to add the bottles from her last exchange\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_water_ml = 40 * 1000  # Convert 40 litres to millilitres\n    flow_rate_ml_per_s = 125    # Flow rate in millilitres per second\n\n    time_seconds = total_water_ml / flow_rate_ml_per_s  # Calculate the time in seconds\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    \n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    \n    # Subtract the last page as the while loop exits when digits exceed 237\n    return pages - 1\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d') # a is the first term, d is the common difference\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n    \n    solutions = solve((eq1, eq2), (a, d))\n    \n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    nth_term = a_val + 31*d_val\n\n    return nth_term\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total_average = 1468\n    correct_total_average = 1462\n    incorrect_recorded_savings = 1268\n    correct_savings = 1082\n\n    difference_in_savings = incorrect_recorded_savings - correct_savings\n    difference_in_averages = incorrect_total_average - correct_total_average\n\n    number_of_days = difference_in_savings / difference_in_averages\n\n    return int(number_of_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    time_for_4_pieces = 12\n    # Each cut reduces the number of pieces by 1. So, for 12 pieces he needs 11 cuts.\n    number_of_cuts_needed = 11\n    # To get 4 equal pieces, he needs 3 cuts. The time it takes per cut is the total time divided by no. of cuts.\n    time_per_cut = time_for_4_pieces / 3\n    # Total time for 12 pieces will be the time per cut multiplied by the number of cuts needed.\n    total_time_for_12_pieces = time_per_cut * number_of_cuts_needed\n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 25  # 10th term\n    common_difference = 28 - 25  # Difference between the terms\n    n = 10  # The term number of the nth_term\n\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    product_ages = 2240 // 4\n    for lily_age in range(1, product_ages):\n        marry_age = lily_age + 1\n        carol_age = marry_age + 2\n        if lily_age * marry_age * carol_age == product_ages:\n            return carol_age\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    left_side = (8*x + 8)/2 - 3*(x + 6)\n\n    # Simplify the equation\n    simplified_left_side = simplify(left_side)\n\n    return simplified_left_side\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3*(6 - 2*x), 8 + 10*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        return 0\n    return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # There are 9 potential split points for 10 marbles: (1-9), (2-8), ..., (9-1).\n    # Each split point represents a different way to distribute the marbles across two piles.\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_per_quart = 0.946353\n    coke_volume_liters = 2.5\n    cup_volume_quarts = 0.5\n    \n    coke_volume_quarts = coke_volume_liters / liters_per_quart\n    number_of_cups = coke_volume_quarts / cup_volume_quarts\n\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # worst case scenario is picking all cars of two colors without having three of the same color\n    max_picks_without_3_same = 5 + 9 - 2  # picking all 5 red and 9 blue but one of each to not have 3 of the same color\n    # To ensure 3 of the same color, add one more pick\n    ans = max_picks_without_3_same + 1\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 147]\n    lengths_m = [2]\n\n    total_cm = sum(lengths_cm)\n    total_m = sum(lengths_m)\n\n    # Convert cm to metres and add to total metres\n    ans = total_m + (total_cm / 100)\n\n    return ans\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fraction = 34 / 100\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range((64 // 8) + 1):\n        legs_spiders = spiders * 8\n        legs_ants = 64 - legs_spiders\n        if legs_ants % 6 == 0:\n            ants = legs_ants // 6\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vivian, justin = symbols('vivian justin')\n    \n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian - justin, 48)\n    \n    solutions = solve((equation1, equation2), (vivian, justin))\n    \n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_after = 34\n    stamps_initial = stamps_after + 2 - 11 + 14\n    return stamps_initial\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    return 7.5 * litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    operation = ((number - 6) * 6 + 6) / 6\n\n    equation = Eq(operation, 6)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's denote the initial height as h. \n    # According to the question:\n    # After first bounce, height = 3 * h\n    # After second bounce, height = 3 * 3 * h = 9 * h\n    # After third bounce, height = (9 * h) / 2\n    # After fourth bounce, height = ((9 * h) / 2) / 2 = (9 * h) / 4\n    # We know that after the fourth bounce, the height is 36 m.\n    # Therefore, (9 * h) / 4 = 36\n   \n    # Solving the equation for h\n    h = (36 * 4) / 9\n    \n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Two original equations based on the problem statement\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Difference between the numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Multiply the result by 100 as required by the question\n    return 100 * difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_left = initial_amount / 2\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    ans = 0\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    for e in range(10):\n                        if len({8, a, b, c, d, e}) == 6:\n                            number = int(f\"8{a}{b}{c}{d}{e}\")\n                            if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    full_cd_price_pounds = 8.99\n    \n    total_price_pence = 12 * single_song_price_pence\n    total_price_pounds = total_price_pence / 100\n    \n    savings = total_price_pounds - full_cd_price_pounds\n    \n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = []\n    for i in range(10, 100):\n        original = i\n        reversed_num = int(str(i)[::-1])\n        \n        if original > reversed_num:\n            result = original - reversed_num\n        else:\n            result = reversed_num - original\n        \n        results.append(result)\n    \n    unique_results = set(results)\n    all_nines = all(result % 9 == 0 for result in unique_results)\n    \n    ans = all_nines\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    # Form all possible two-digit numbers\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:  # Ensure the two digits are different\n                num = d1 * 10 + d2\n                two_digit_numbers.add(num)\n\n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Assuming that the smallest difference will be achieved\n    # when the larger number has 0 and the smallest digits\n    # while the smaller number has the largest digits, with 1 being the first digit to ensure it's a 5-digit number.\n    \n    # Number 1 (smaller) will have 1, 9, 8, 7, 6\n    number1 = int('1' + ''.join(map(str, sorted([9, 8, 7, 6], reverse=True))))\n    \n    # Number 2 (larger) will have 0, 2, 3, 4, 5\n    # with 0 at the end to maximize the difference, 2 as the first digit to ensure 5-digits\n    number2 = int(''.join(map(str, [2, 3, 4, 5])) + '0')\n    \n    # The smallest possible difference\n    ans = number2 - number1\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let p be the number of stickers Peter had at first\n    p = symbols('p')\n    sam_initial = p + 40\n    sam_gives = 0.20 * sam_initial\n    peter_gives = 0.25 * (p + sam_gives)\n\n    # After exchange\n    sam_final = sam_initial - sam_gives + peter_gives\n    peter_final = p + sam_gives - peter_gives\n    # Equation based on the final sticker difference\n    equation = Eq(sam_final - peter_final, 96)\n    \n    # Solve the equation for p\n    solutions = solve(equation, p)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_seconds = 15\n    length_meters = 450\n    \n    speed_m_per_s = length_meters / time_seconds\n    speed_km_per_h = speed_m_per_s * 3.6  # Convert from m/s to km/h\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    concentration = (salt_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    percentage = 70\n    total = 40\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost / pencil_cost\n\n    return int(pencils_for_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards = num_friends * cards_sent_each\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n\n    added_water = jug_capacity * number_of_jugs\n    total_water = initial_water + added_water\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Calculate the total number of cookies eaten over the period\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    \n    # Calculate the total number of days\n    total_days = 3 + 2 + 2\n    \n    # Calculate the average number of cookies eaten per day\n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'd' represents the days David takes off\n    d = symbols('d')\n\n    # Candy's work rate\n    candy_rate = 1 / 20\n    # David's work rate\n    david_rate = 1 / 25\n\n    # Equation representing total work done (completed job equals 1)\n    equation = Eq(12 * candy_rate + (12 - d) * david_rate, 1)\n\n    # Solve the equation for 'd'\n    days_off_solution = solve(equation, d)\n    \n    # Days David takes off\n    return days_off_solution[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude\n    # and opposite in direction to the force of gravity acting on the book.\n    # Since the book rests on the table and there's no vertical acceleration,\n    # according to Newton's third law (action-reaction pair), \n    # the table exerts an upward force equal to the weight of the book.\n    \n    # The mass of the book is given as 20N which is a unit of force and not mass,\n    # implying that the weight of the book is already provided and is 20N.\n\n    force_by_table = 20  # The force is equal in magnitude to the weight of the book.\n    return force_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    income = 140000\n    tax_paid = 15100\n    first_50k = 50000\n    first_50k_tax_rate = 0.05\n    remaining_income = income - first_50k\n    remaining_tax_paid = tax_paid - (first_50k * first_50k_tax_rate)\n\n    # Calculate the effective tax rate for the remaining income.\n    effective_tax_rate = remaining_tax_paid / remaining_income\n\n    # Calculate T (%)\n    T = (effective_tax_rate * 100) - 8\n\n    return T\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)  # Replace 'y' with the actual age of Lemar when calling the function."
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fruits\n    x = symbols('x')\n    \n    # According to the problem, 4/5 of the fruits were apples\n    apples = 4/5 * x\n\n    # After removing 3/4 of the fruits, we are left with 1/4 of the fruits\n    remaining_fruits = 1/4 * x\n\n    # There were 1/8 of the apples and 30 pears left\n    equation = Eq(remaining_fruits - 30, 1/8 * apples)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the total number of fruits at first\n    return int(solution[0])\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Worst case analysis using the Pigeonhole Principle.\n    # If we want to ensure 6 balls of the same type, we need to consider the worst-case scenario:\n    # The worst case would be taking out all of the balls of the other two types without getting 6 of the same type.\n    # Therefore, worst case is taking 5 footballs + 5 basketballs + all 3 volleyballs.\n    # After that, the next one must be the 6th of either football or basketball.\n    balls_needed = 5 + 5 + 3 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n    # Constants and initial conditions\n    mass = 2  # mass of the ball in kilograms\n    height = 5.0  # height of the tabletop in meters\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Using the conservation of energy:\n    # Potential energy at the top = Kinetic energy at the bottom\n    # m*g*h = 1/2 * m * v^2\n    # Where m is the mass, g is the acceleration due to gravity, h is the height,\n    # v is the velocity we are trying to find\n\n    # we can cancel out the mass 'm' from both sides and solve for 'v':\n    # g*h = 1/2 * v^2\n    # v^2 = 2 * g * h\n    # v = sqrt(2 * g * h)\n\n    v = sqrt(2 * g * height)\n\n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_per_cake = 36 / 6\n    total_time_for_ten_cakes = time_per_cake * 10\n    return total_time_for_ten_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the number of stickers Mr. Ya has\n    # Let 'p' be the number of pupils\n    s, p = symbols('s p')\n    equation1 = Eq(s - 13 * p, 190)\n    equation2 = Eq(s - 17 * p, 50)\n\n    solutions = solve((equation1, equation2), (s, p))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity in m/s^2\n    theta = math.radians(45)  # convert angle to radians\n    v0 = 5  # initial velocity in m/s\n    h = 30  # height of the building in meters\n\n    # Horizontal velocity component remains constant (neglecting air resistance)\n    vx = v0 * math.cos(theta)\n\n    # Vertical velocity component when the arrow hits the ground\n    # Using the equation: vy^2 = v0y^2 + 2gh, where v0y = v0 * sin(theta)\n    vy = math.sqrt((v0 * math.sin(theta))**2 + 2 * g * h)\n\n    # Speed of the arrow when it hits the ground is the magnitude of the velocity vector\n    v = math.sqrt(vx**2 + vy**2)\n\n    return v\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import factorial\n\ndef solution():\n    # there are 13 oranges and 3 kids, each kid should get at least 1 orange\n    # after giving each kid one orange, there will be 13 - 3 = 10 oranges left\n    # now the question is how many ways can we distribute 10 identical items (oranges) into 3 distinct groups (kids)\n    # this is a problem of distributing n identical items into r distinct groups, which is a combination with repetition problem.\n    # The formula for combination with repetition is C(n + r - 1, r - 1) where n is number of items and r is number of groups\n    # Here n = 10, r = 3\n    # Using the formula: C(10 + 3 - 1, 3 - 1) = C(12, 2)\n    # C(n, r) can be calculated using factorial: C(n, r) = n! / (r! * (n - r)!)\n    n = 10 + 3 - 1\n    r = 3 - 1\n    num_ways = factorial(n) // (factorial(r) * factorial(n - r))\n    return num_ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    num = 0\n    while True:\n        num += 11\n        if sum(int(digit) for digit in str(num)) == 20:\n            return num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    from itertools import permutations\n\n    # there are 5 different digits, and S is not 0 as it's the first digit of a 5-digit number\n    for p in permutations('123456789', 5):\n        s, a, s_, m, o = p  # Note: s_ is used to avoid confusion since S appears twice\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    litres_to_transfer = equal_volume - 28\n\n    return litres_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weights of each animal\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate the weight ratio of pigs to elephants\n    pig_to_elephant_weight = solutions[pig] / solutions[elephant]\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_for_eight_elephants = 8 / pig_to_elephant_weight\n\n    return pigs_for_eight_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variables\n    principal = 2000  # The initial amount borrowed\n    amount = 2519.42  # The amount owed after 3 years\n    n = 3  # The number of years the interest is compounded\n    \n    # Symbol to represent the annual interest rate\n    r = symbols('r', positive=True, real=True)\n\n    # The compound interest formula is A = P * (1 + r/n)^(nt)\n    # P is the principal amount, r is the annual interest rate, n is the number of times that interest is compounded per year, and t is the time the money is invested or borrowed for, in years.\n    # Here it transforms into the equation: P*(1+r)^n = A\n    equation = Eq(principal * (1 + r) ** n, amount)\n\n    # Solve the equation for the interest rate\n    solution = solve(equation, r)\n    \n    # Extract the solution (as decimal) and convert to percentage\n    interest_rate = solution[0] * 100\n\n    return float(interest_rate)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.5)\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 0.18\n    tax_percent = 0.10\n    \n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    \n    total_cost = bill + tip_amount + tax_amount\n    \n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "def solution():\n    from math import factorial as fact\n\n    def choose(n, k):\n        return fact(n) // (fact(k) * fact(n - k))\n\n    # There are 5 positions for the 4 dancing performances to go in between and after the singing performances\n    # (S _ S _ S _ S _ S _ S), where S represents singing and _ represents where dancing can go.\n    positions_for_dancing = 5\n    dancing_performances = 4\n\n    # Calculate how many ways to place the dancing performances in the 5 positions\n    ways_to_place_dancing = choose(positions_for_dancing, dancing_performances)\n\n    # Calculate permutations for singing performances\n    singing_performances = 6\n    ways_to_permute_singing = fact(singing_performances)\n\n    # Multiply the two to get the total arrangements\n    total_arrangements = ways_to_place_dancing * ways_to_permute_singing\n\n    return total_arrangements\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    total_weight_for_3_boxes = (total_weight_for_5_boxes / 5) * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n    # there are factorial(4) ways to arrange the comics among themselves\n    comics_ways = factorial(4)\n    # there are factorial(6) ways to arrange the fiction books among themselves\n    fictions_ways = factorial(6)\n    # consider the block of comics as one single book and same for the fictions, leading to 2 \"books\" to arrange\n    combined_blocks_ways = factorial(2)\n    ans = comics_ways * fictions_ways * combined_blocks_ways\n    return ans\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    result = 2.4 * 7 - (6.8 - 7/10)\n    return result\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let's denote:\n    # c as the number of correct answers Dora gave\n    # w as the number of incorrect answers Dora gave\n    # Since each participant answered 10 questions, we have c + w = 10 for both Justin and Dora\n    # We also know that:\n    # - Each correct answer adds 10 points\n    # - Each incorrect answer subtracts 5 points\n    # - Justin's score is Dora's score + 15 points\n    # The total score for both is 155 points\n\n    # Using these facts, we can set up equations for Dora:\n    # Dora's points: 10c - 5w\n    # Justin's points: 10(c + 15/10) - 5(w - 15/5) since Justin has 15 more points\n    # We want to find the value of c (Dora's correct answers) given that the sum of their scores is 155\n    \n    for correctDora in range(11):  # The range is from 0 to 10 inclusive\n        incorrectDora = 10 - correctDora  # Dora's incorrect answers\n        pointsDora = 10 * correctDora - 5 * incorrectDora\n\n        correctJustin = correctDora + 15 / 10  # Justin has 15 more points, equivalent to 1.5 extra correct answers\n        incorrectJustin = 10 - correctJustin\n        pointsJustin = 10 * correctJustin - 5 * incorrectJustin\n\n        if pointsDora + pointsJustin == 155:\n            return correctDora\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # There are 3 groups in Class A selling 12 candies each\n    total_A = 3 * 12\n    # There are 3 + 4 = 7 groups in total (A + B) selling 8 candies each on average\n    total_avg = (3 + 4) * 8\n    # Total candies sold by Class B groups = Total average - Total sold by Class A\n    total_B = total_avg - total_A\n    # Average number of candies sold by each group in Class B\n    avg_B = total_B / 4\n    return avg_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let l be the number of hours it takes Lee to finish the job on his own\n    # Let n be the number of hours it takes Nancy to finish the job on her own\n    \n    l, n = symbols('l n')\n    \n    # Equation 1: 1/l + 1/n = 1/10 (since they finish the job in 10 hours working together)\n    equation1 = Eq(1/l + 1/n, 1/10)\n    \n    # Equation 2: 6/l + 20/n = 1 (since this combination also finishes the job)\n    equation2 = Eq(6/l + 20/n, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n    \n    # We only care about the amount of time it takes Nancy, so we get the value of n\n    return solutions[n]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6  # Litres of coffee\n    \n    # Since the ratio is 3:8 for coffee:milk, we have\n    # coffee_amount / coffee_ratio = total_amount / (coffee_ratio + milk_ratio)\n    total_amount = coffee_amount / coffee_ratio * (coffee_ratio + milk_ratio)\n    \n    return total_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_length = total_length - used_length\n    number_of_pieces = 10\n\n    length_per_piece = remaining_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    total_flavours = 7\n    doughnuts_to_pick = 2\n\n    num_combinations = comb(total_flavours, doughnuts_to_pick)\n\n    return num_combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "def solution():\n    from math import comb\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n    equation1 = Eq(white * 7, milk * 3)\n    equation2 = Eq(white * 5, dark * 3)\n    equation3 = Eq(dark - white, 8)\n\n    solutions = solve((equation1, equation2, equation3), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    # Let's denote the total number of students as 'x'.\n    # We have the following equations based on the problem statement:\n    # 1/4 * x + 3 students like badminton\n    # 1/3 * (x - (1/4 * x + 3)) - 3 students like table tennis\n    # The remaining 25 students like football\n\n    # Let's denote badminton lovers as 'b' and table tennis lovers as 'tt'.\n    # Hence, x = b + tt + 25\n\n    # Now we refactor the badminton and table tennis expressions:\n    # b = 1/4 * x + 3\n    # tt = 1/3 * (x - b) - 3\n    # We replace b in the tt expression:\n    # tt = 1/3 * (x - (1/4 * x + 3)) - 3\n\n    # Now we can express x in terms of tt and 25:\n    # x = (1/4 * x + 3) + (1/3 * (x - (1/4 * x + 3)) - 3) + 25\n\n    # Let's solve for x.\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((1/4 * x + 3) + (1/3 * (x - (1/4 * x + 3)) - 3) + 25, x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5\n    green_balls = 10\n    # Let x be the number of red balls to be added.\n    # Probability of getting a green ball is g/(r + g + x) = 1/3,\n    # where g is the number of green balls and r is the original number of red balls.\n\n    # 1/3 = g/(r + g + x)\n    # x = (3g - (r + g)) / 1\n    x = (3 * green_balls - (red_balls + green_balls))\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    ans = (large_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5  # Avril spends 5p which is one-quarter of her money\n    # Let's denote x as the total amount of money Avril had originally\n    # According to the problem, one-quarter of the total amount is equal to the spent amount\n    # So, we have 1/4 * x = 5\n    # Multiplying both sides by 4, we get x = 5 * 4\n    total_money = spent * 4  # Calculating the total money she had\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for the number of stickers Sam and Peter have initially\n    sam, peter = symbols('sam peter')\n\n    # Equation 1: Sam had 40 stickers more than Peter initially\n    equation1 = sam - peter - 40\n\n    # Equation 2: After transactions, Sam had 96 stickers more than Peter\n    # Sam gives away 20% of his stickers and receives 25% of Peter's stickers after Peter received Sam's 20%\n    # Peter's new amount is his original amount plus 20% of Sam's - 25% of his new amount\n    # Sam's new amount is his original amount minus 20% of his own plus 25% of Peter's original amount\n    equation2 = (sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam)) - (peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam)) - 96\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the value of Peter's stickers initially\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Ones digit pattern for the powers of 32 (2): 2, 4, 8, 6\n    # Ones digit pattern for the powers of 22 (2): 2, 4, 8, 6\n\n    # Find the corresponding ones digit for 32^33 by its position in the pattern\n    # Pattern repeats every 4 terms, so we take 33 modulo 4 to find the position\n    ones_digit_32_power = [2, 4, 8, 6]\n    position_32 = 33 % 4  # pattern position for 32^33\n    ones_digit_for_32 = ones_digit_32_power[position_32 - 1]  # subtract 1 because list is 0-indexed\n\n    # Find the corresponding ones digit for 22^29 by its position in the pattern\n    ones_digit_22_power = [2, 4, 8, 6]\n    position_22 = 29 % 4  # pattern position for 22^29\n    ones_digit_for_22 = ones_digit_22_power[position_22 - 1]  # subtract 1 because list is 0-indexed\n\n    # Ones digit of the result is the difference between the ones digits of each term\n    ones_digit_result = (ones_digit_for_32 - ones_digit_for_22) % 10  # modulo 10 to get the ones digit\n\n    return ones_digit_result\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    # Starting the search based on observation, the number of pages\n    # must be greater than 100 since '6' appears 18 times and is less frequent before 100\n    page = 100\n    # Increment the search until the count of '6's is equal to 18\n    while True:\n        if count_sixes(page) == 18:\n            return page\n        page += 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given ratio is the square of (2:3), hence the missing number would be 2^2 = 4 times smaller than 81\n    ans = 81 // 4\n    return ans\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height_to_climb = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_cycle = 2\n    \n    effective_jump_height = (jumps_per_cycle * jump_up) - slide_down\n    full_cycles_needed = (height_to_climb - jump_up) // effective_jump_height\n    height_after_full_cycles = full_cycles_needed * effective_jump_height + jump_up\n\n    remaining_height = height_to_climb - height_after_full_cycles\n    jumps_to_reach_remaining_height = 0\n    if remaining_height > 0:\n        jumps_to_reach_remaining_height = (remaining_height + jump_up - 1) // jump_up\n    \n    total_jumps = full_cycles_needed * jumps_per_cycle + jumps_to_reach_remaining_height\n\n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    sum_series = 0\n    for i in range(2, 4027, 2):\n        if i == 4026:\n            sum_series += 1/i\n        else:\n            sum_series += (i**3) / (i*(i+1)*(i+2))\n    return sum_series\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if (num + 1) % 5 == 0 and num % 16 == 0 and (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15\n    term_to_find = 6  # Since we want the next term after the 5th term (39)\n\n    next_term = first_term + common_difference * term_to_find\n\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_score = 4\n    wrong_score = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + wrong_answers * wrong_score\n        if score == 152:\n            return correct_answers\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return int(cans_in_9_days)\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If 16 sausages should be shared equally among 24 people,\n    # each person should get 16/24 of a sausage, which simplifies to 2/3 of a sausage.\n    # To give each person 2/3 of a sausage without any leftover pieces,\n    # each sausage needs to be cut into three pieces.\n    # However, since the sausages are identical, cutting one sausage will not affect the others.\n    # Thus, you need to make two cuts on each sausage to turn it into three pieces.\n    # 16 sausages will therefore require 16 * 2 cuts.\n    \n    num_cuts = 16 * 2\n    return num_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(7)  # Total permutations of the word 'RAINBOW'\n\n    # Now we find the permutations where vowels (A, I, O) are together.\n    # We treat the vowels as a single entity, so we have 5 entities to permute (RAI, N, B, W).\n    vowels_permutations = factorial(5) * factorial(3)  # Permutations of the 5 entities and the 3 vowels\n \n    # Subtract the number of invalid permutations from the total to get the valid ones.\n    valid_permutations = total_permutations - vowels_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    return solutions[wendy] + 5\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in container B\n    x = symbols('x')\n\n    # Container A has x + 350 mL of water\n    # After spilling 500 mL, container A has (x + 350 - 500) mL of water\n    # Container B has twice as much water as container A now\n    equation = Eq(x, 2 * (x + 350 - 500))\n\n    # Solve the equation for x\n    amount_b = solve(equation, x)\n    \n    # Amount of water in container A at first is x + 350\n    amount_a = amount_b[0] + 350\n\n    return amount_a\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff_1 = abs(39 - 51)\n    diff_2 = abs(51 - 147)\n    diff_3 = abs(39 - 147)\n\n    # Find the greatest common divisor of the differences\n    gcd_1 = gcd(diff_1, diff_2)\n    gcd_final = gcd(gcd_1, diff_3)\n\n    return gcd_final\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle spoke to 5 team members, each saying 3 sentences to one another\n    # This is 3 * 5 = 15 pairs of sentences exchanged\n    sentences_between_lovelle_and_others = 3 * 5\n    \n    # However, sentences are exchanged in pairs, so to find the individual sentences,\n    # we need to multiply by 2.\n    individual_sentences_lovelle_and_others = sentences_between_lovelle_and_others * 2\n    \n    # There are also 12 team members who did not speak to Lovelle.\n    # Therefore, the total number of sentences not exchanged with Lovelle is 12 * 3\n    sentences_without_lovelle = 12 * 3\n    \n    # The total number of team members is the number Lovelle has spoken to\n    # (5 members) + Lovelle herself + the ones she hasn't spoken to (12 members)\n    total_team_members = 5 + 1 + 12\n    \n    return total_team_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    for page in range(1, 326):  # pages 1 to 325\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    count = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('T')) * \n                                     factorial(word.count('A')) * factorial(word.count('I')) *\n                                     factorial(word.count('C')))\n    \n    # Subtract arrangements where T's are together\n    t_count = word.count('T')  # Number of T's\n    for chars in permutations(\"SASIC\", t_count):  # Place T's into the other letters\n        tmp_word = \"\".join(chars)\n        if 'TT' not in tmp_word:\n            continue\n        count -= factorial(len(word) - 1) // (factorial(tmp_word.count('S')) * factorial(t_count - 1) * \n                                              factorial(tmp_word.count('A')) * factorial(tmp_word.count('I')) *\n                                              factorial(tmp_word.count('C')))\n   \n    return count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 1000):  # Assuming a practical upper limit for the number of gums\n        # After eating 2 in music lesson\n        remaining_after_music = gums - 2\n\n        # Shared one third with friends\n        shared_with_friends = remaining_after_music // 3\n        remaining_after_friends = remaining_after_music - shared_with_friends\n\n        # Eating the rest in next four lessons, must be divisible by 4\n        if remaining_after_friends % 4 == 0:\n            return gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    # Sarah had $20 more Pokemon cards than Mark.\n    equation1 = Eq(sarah, mark + 20)\n    # After buying 16 extra Pokemon cards, Sarah had 3 times more cards than Mark.\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    # Sarah's number of cards before buying new cards today.\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    num = 418\n    round_to_nearest_10 = round(num, -1)\n    return round_to_nearest_10\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) // 8\n    return result\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The maximum number of attempts will be made if the explorer tries every wrong key before finding the right one for each chest.\n    # For the first chest, the explorer may need to try all 9 keys (8 wrong keys and then the right one).\n    # For the second chest, there will be 8 remaining keys (7 wrong keys and then the right one).\n    # For the third chest, there will be 7 remaining keys (6 wrong ones and then the right one).\n    # For the fourth and last chest, there will be 6 remaining keys (5 wrong ones and then the right one).\n    \n    attempts = (8 + 1) + (7 + 1) + (6 + 1) + (5 + 1)\n    \n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyze the sequence, identifying the pattern.\n    # The pattern seems to be adding 500, then subtracting 200, alternating.\n    # 2945 + 500 = 3445\n    # 3445 - 200 = 3245\n    # 3245 + 500 = 3745\n    # So the next term should be 3745 - 200.\n    missing_number = 3745 - 200\n\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(1, 26, 2))\n    return sum_of_squares\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n\n    return h_value[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):  # Start from 99 down to 10 (inclusive)\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour.\n    # Let y be the number of mushrooms gathered in the second hour.\n    # We have two equations:\n    # x + y = 40 (Total number of mushrooms gathered in two hours.)\n    # x + 26 = y (26 more mushrooms in the first hour would equal the second hour.)\n    \n    # From the second equation: x = y - 26\n    # Substitute x in the first equation:\n    # (y - 26) + y = 40\n    # 2y = 40 + 26\n    # 2y = 66\n    # y = 66 / 2\n    y = 66 // 2  # Using integer division for whole number of mushrooms\n\n    return y\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    value_after_depreciation = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_depreciation\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    w, m = symbols('w m')  # women, men\n\n    # 4 times as many women as men\n    equation1 = Eq(w, 4 * m)\n    # Total mini cupcakes eaten by women and men\n    equation2 = Eq(2 * w + 5 * m, 182)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # One coin has a diameter of 1.85 cm\n    diameter_of_one_coin = 1.85\n\n    # There are 11 coins placed in a row, so there will be 10 gaps between them\n    # Since the coins are touching, the total length will be the length of 10 gaps (coin diameters)\n    # plus the diameter of one last coin\n    total_length = (10 * diameter_of_one_coin) + diameter_of_one_coin\n    \n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    # number of terms\n    n = 14\n    # first term\n    a1 = 5\n    # common difference\n    d = 3\n    \n    # nth term of the arithmetic sequence\n    an = a1 + (n - 1) * d\n    # sum of the sequence\n    sum_seq = n * (a1 + an) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # Subtract 1 because in circular permutations, fixing the position of one person is necessary\n    num_ways_to_sit = factorial(num_people - 1)\n    return num_ways_to_sit\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_diff = night_temp - morning_temp\n\n    return temp_diff\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_of_2 = (2 ** 2017) % 10\n    last_digit_of_3 = (3 ** 2017) % 10\n    ans = (last_digit_of_2 * last_digit_of_3) % 10\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_ants = symbols('initial_ants')\n\n    after_sweep = initial_ants * (1 - 3/4)\n    after_fear = after_sweep * (1 - 2/5)\n    final_ants = after_fear + 185\n\n    equation = Eq(final_ants, 2 * initial_ants)\n\n    solution_ants = solve(equation, initial_ants)\n\n    return solution_ants[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    cost_per_book = 13\n    books_first_day = 89\n    books_second_day = 11\n    \n    total_cost = (books_first_day + books_second_day) * cost_per_book\n    \n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the first term and 'd' the common difference\n    a, d = symbols('a d')\n    # Sum of first four terms: a + (a + d) + (a + 2d) + (a + 3d)\n    sum_first_four = 4*a + 6*d\n    # Sum of last four terms: (a + 4d) + (a + 5d) + (a + 6d) + (a + 7d)\n    sum_last_four = 4*a + 22*d\n\n    # The sum of the first four terms is $32$ less than the sum of the last four terms\n    equation = Eq(sum_first_four, sum_last_four - 32)\n\n    # Solve for the common difference 'd'\n    solution = solve(equation, d)\n    \n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # The sequence is a sequence of square numbers: 1 (1^2), 4 (2^2), 9 (3^2), 16 (4^2), 25 (5^2), 36 (6^2), 49 (7^2), ...\n    # The next term will be the square of the next integer 8^2 = 64\n    next_term = 8 ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(num):\n        doubled = num * 2\n        added_four = doubled + 4\n        return added_four % 100 if added_four >= 100 else added_four\n\n    num = 1\n    for i in range(2021):\n        num = next_number(num)\n    \n    return num\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange, isprime\n\n    primes = list(primerange(1, 42))  # since 3a and 7b should be less than 41\n\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a+b\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    # Find least common multiple of their flash rates to see how often they flash together per minute\n    flash_together_rate = lcm(red_flash_rate, green_flash_rate)\n\n    # Since they flash together every flash_together_rate times per minute, we want to find out how many times this occurs in an hour\n    flashes_in_hour = 60 // (60 // flash_together_rate)\n\n    # They flash together at both the beginning and end of the hour, so we add 1 \n    return flashes_in_hour + 1\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n\n    cost_price = selling_price / (1 + profit_percentage / 100)\n\n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percentage = (new_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Calculate the total volume of the drink using the fraction for water\n    total_volume_per_bottle = (120 / (1 - (3/5)))\n\n    # Calculate the volume of water in one bottle\n    water_volume_per_bottle = total_volume_per_bottle - 120\n\n    # Calculate the total volume of water needed for 6 bottles\n    total_water_volume = water_volume_per_bottle * 6\n\n    return total_water_volume\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    num_letters = len(\"EARTH\")\n    num_ways = factorial(num_letters)\n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's walking speed\n    simon_speed = 150\n    # Simon's friend's speed\n    friend_speed = 200\n    # Time walked before Simon runs back\n    time_walked = 10\n\n    # Distance Simon walked before turning back\n    simon_distance_walked = simon_speed * time_walked\n    # Distance Simon's friend walked in the same time\n    friend_distance_walked = friend_speed * time_walked\n\n    # Simon's running speed (twice his walking speed)\n    simon_run_speed = 2 * simon_speed\n    # Time took Simon to run back to school\n    time_run_back = simon_distance_walked / simon_run_speed\n\n    # Total time when Simon reaches school\n    total_time = time_walked + time_run_back\n    # Distance Simon's friend is from the school at that time\n    friend_total_distance = friend_distance_walked + (friend_speed * time_run_back)\n\n    return friend_total_distance\n   \nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        s, e, n, d = perm\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        money = m * 10000 + o * 1000 + n * 100 + e * 10 + y\n        if send + more == money:\n            return send * more\n    return None\n\n# Applying the variable names m, o, r, y as globals might result in NameError unless they are predefined.\n# Since the original question did not specify the full equation, assuming \"SEND + MORE = MONEY\" based\n# on a common cryptarithmetic problem. Update the function if different names or equation is intended.\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 7\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    # Calculate permutations considering the identical items\n    permutations = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n\n    return permutations\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Fastest two cross -- 2 minutes\n    # Fastest returns -- 1 minute\n    # Slowest two cross -- 10 minutes\n    # Second fastest returns -- 2 minutes\n    # Fastest two cross again -- 2 minutes\n\n    total_time = 2 + 1 + 10 + 2 + 2\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_water = 5  # in litres\n    container_size = 0.25 * initial_water\n    cup_volume = 150 / 1000  # 150 ml to litres\n    total_cups_volume = 14 * cup_volume\n\n    remaining_water = initial_water - (container_size + total_cups_volume)\n\n    return remaining_water\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    number1 = 4.5\n    number2 = 10.3\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n-1) * (derangement(n-1) + derangement(n-2))\n    \n    return derangement(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # in minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pages Anny has to write as 'p' and the original rate as 'r'\n    p, r = symbols('p r')\n\n    # Anny can finish her homework in 8 days with the original rate; so p = 8r\n    equation1 = Eq(p, 8 * r)\n\n    # If she writes 2 more pages per day (r+2), she will finish 2 days earlier (in 6 days); so p = 6(r+2)\n    equation2 = Eq(p, 6 * (r + 2))\n\n    # Solve the equations for p and r\n    solutions = solve((equation1, equation2), (p, r))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate loaves per minute for each baker\n    loaves_per_minute_pip = 5 / 20\n    loaves_per_minute_bud = 3 / 15\n\n    # Calculate the total time both bakers will be baking\n    total_time = 40 # minutes\n\n    # Calculate the total loaves baked by each baker in the total time\n    total_loaves_pip = loaves_per_minute_pip * total_time\n    total_loaves_bud = loaves_per_minute_bud * total_time\n\n    # Sum the total loaves baked by both bakers to get the answer\n    total_loaves = total_loaves_pip + total_loaves_bud\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The house value increased by 10% to reach £11,000 last year\n    last_year_value = 11000\n    original_value = last_year_value / 1.1\n\n    # This year, the house loses 10% of its value\n    this_year_value = last_year_value * 0.9\n\n    # Calculate the amount of profit or loss compared with the original price\n    profit_loss = this_year_value - original_value\n\n    return profit_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # He could take out all red and black socks before getting a white pair.\n    max_red_black_socks = 10 + 10\n    # After that, he needs to take out one more sock to finally get a white pair for sure.\n    max_white_socks_till_pair = 2\n\n    return max_red_black_socks + max_white_socks_till_pair\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12*a) / 4 + (2*a) * 5\n    simplified_expression = simplify(expression)\n    return simplified_expression\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    morning = 3 / 8\n    afternoon = 1 / 6\n    remaining = 33\n\n    # Equation representing the total cookies after eating some in the morning and afternoon\n    equation = Eq(cookies - (morning + afternoon) * cookies, remaining)\n\n    # Solve the equation for the total number of cookies\n    initial_cookies = solve(equation, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n        \n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    \n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jemma's number\n    jemmas_number = symbols('jemmas_number')\n\n    # Write the equation based on Jemma's instructions\n    equation = Eq((jemmas_number + 3) * 5, 35)\n\n    # Solve the equation\n    solution = solve(equation, jemmas_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Arbitrary year, since we only care about days of the week\n    end_date = datetime(2020, 6, 7)\n    one_day = timedelta(days=1)\n    \n    current_date = start_date\n    sundays_count = 0\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # where 0 is Monday and 6 is Sunday\n            sundays_count += 1\n        current_date += one_day\n\n    return sundays_count\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n\n    number_of_buckets = barrel_capacity // bucket_capacity\n\n    return number_of_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # total flour in kg\n    packets = 25  # number of packets\n\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red_original, white_original = symbols('red_original white_original', integer=True)\n    red_pip = symbols('red_pip', integer=True)\n\n    # Original ratio\n    equation1 = Eq(red_original / white_original, 3/2)\n    # After Pip adds red marbles\n    equation2 = Eq((red_original + red_pip) / white_original, 5/3)\n    # After Bud adds white marbles, which is red_pip + 100\n    equation3 = Eq((red_original + red_pip) / (white_original + red_pip + 100), 5/4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red_original, white_original, red_pip))\n\n    # Return the number of white balls originally in the box\n    return solutions[white_original]\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # The divisibility rule for 3 states that a number is divisible by 3 if the sum of its digits is divisible by 3.\n    # The divisibility rule for 4 states that a number is divisible by 4 if the last two digits form a number that is divisible by 4.\n\n    # We are given the number in the form 5K27K, so we can express it as (50000 + K*1000 + 200 + 70 + K).\n    for K in range(10):\n        # Calculate the sum of the digits to check divisibility by 3\n        if (5 + K + 2 + 7 + K) % 3 == 0:\n            # Check the last two digits to see if it's divisible by 4. The last two digits form the number 7K.\n            # Since K is a single digit, we only need to check 70, 71, ..., 79 for divisibility by 4.\n            if (70 + K) % 4 == 0:\n                return K  # Return the value of K if both conditions are satisfied.\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n\n    # Initial ratio of cookies to brownies: 4:3\n    equation1 = Eq(cookies / brownies, 4/3)\n\n    # After giving away 6 brownies, the ratio becomes 12:7\n    equation2 = Eq((cookies / (brownies - 6)), 12/7)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return int(total_baked)\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Number of companies and days for the first expressway\n    companies_first = 4\n    days_first = 5\n    length_first = 900\n\n    # Number of companies for the second expressway\n    companies_second = 6\n    length_second = 5400\n\n    # Work done by one company in one day for the first expressway\n    work_per_company_per_day = length_first / (companies_first * days_first)\n\n    # Total work needed for the second expressway\n    total_work_second = length_second\n\n    # Total number of workdays with 6 companies for the second expressway\n    days_second = total_work_second / (companies_second * work_per_company_per_day)\n\n    return days_second\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    initial_purchase = 10\n    first_sale = 20\n    second_purchase = 30\n    second_sale = 40\n\n    # Calculate profit from the first transaction (first sale - initial purchase)\n    first_profit = first_sale - initial_purchase\n    # Calculate profit from the second transaction (second sale - second purchase)\n    second_profit = second_sale - second_purchase\n\n    # Total profit is the sum of profits from both transactions\n    total_profit = first_profit + second_profit\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    # Calculate the price per ticket\n    price_per_ticket = adam_spent / adam_tickets\n    \n    # Calculate the number of tickets Claire bought\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_number = 10\n    difference = 28 - 25\n    last_term = 31\n\n    first_term = last_term - difference * (term_number - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    # Each cobbler takes 2 minutes to clean one shoe.\n    time_per_shoe = 2\n    \n    # There are 9 pairs of shoes, so 18 shoes in total.\n    total_shoes = 9 * 2\n    \n    # Two cobblers working together can clean 2 shoes in 2 minutes.\n    shoes_per_minute_per_cobbler = 1\n    \n    # Total shoes cleaned per minute by both cobblers working together.\n    total_shoes_per_minute = 2 * shoes_per_minute_per_cobbler\n    \n    # The shortest time for them to clean all shoes is the total shoes divided by\n    # the total shoes they can clean per minute.\n    shortest_time = total_shoes / total_shoes_per_minute\n    \n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        ""
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Since player one's cards sum to 23, and there are 8 cards in total numbered from 1 to 8,\n    # the sum of all cards is (1+2+3+4+5+6+7+8) = 36.\n    # Therefore, player two's cards must sum to 36 - 23 = 13\n\n    # All cards are from 1 to 8 so the maximum card player two can have is 8.\n    # Let's check if it's possible for player two to have 8 by trying to fulfill remaining sum with the smallest cards possible.\n    remaining_sum_after_eight = 13 - 8  # This is 5\n\n    # Let's see which cards player one could have for a sum of 23.\n    # The largest card can be a 7 because 8 goes to player two in this scenario.\n    # Also, we know player two must have at least one '1' to add up to 13 with the 8.\n    # Therefore, player one's smallest card can't be a '1'.\n\n    # We need to find a combination of 4 cards that sum up to 23 without using '1' and '8'.\n    # Let's create all possible combinations for player one's cards using '2' to '7'.\n    # We will then calculate the sums for these combinations until we find a sum of 23.\n\n    from itertools import combinations\n\n    # Generating all combinations of 4 cards between 2 to 7\n    cards = set(range(2, 8))  # Cards 2 through 7\n    all_four_combinations = list(combinations(cards, 4))\n\n    # Find out if there's a combination summing up to 23\n    player_one_valid_combinations = [\n        comb for comb in all_four_combinations if sum(comb) == 23\n    ]\n\n    # If we find valid combinations, then it's possible for player two to have the card '8'\n    # In that case, we return 8 as it's the highest single card Player Two could possibly have.\n    if player_one_valid_combinations:\n        highest_card_player_two = 8\n    else:\n        # Since it's not possible for player two to have '8', we need to check the next highest number which is '7'\n        # We continue this until we find the highest possible card.\n\n        # We adjust remaining sum to consider the next possible highest card '7'\n        remaining_sum_after_seven = 13 - 7  # This is 6\n\n        # Now we check if there is a combination of 4 cards between '2' to '6' that sums up to 23\n        cards = set(range(2, 7))  # Cards 2 through 6\n        all_four_combinations = list(combinations(cards, 4))\n\n        player_one_valid_combinations = [\n            comb for comb in all_four_combinations if sum(comb) == 23\n        ]\n\n        if player_one_valid_combinations:\n            highest_card_player_two = 7\n        else:\n            # We continue similarly down to the card '6'\n            highest_card_player_two = 6  # We can safely assume this, because we're guaranteed '6' should work\n\n    return highest_card_player_two\n\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n    correct_score = 4\n    incorrect_penalty = -1\n\n    # Assume all attempted questions were answered correctly\n    assumed_correct = attempted\n    assumed_incorrect = 0\n    assumed_score = assumed_correct * correct_score + assumed_incorrect * incorrect_penalty\n\n    # Adjust the assumed counts based on the difference between assumed score and actual score\n    while assumed_score != total_score:\n        assumed_correct -= 1\n        assumed_incorrect += 1\n        assumed_score = assumed_correct * correct_score + assumed_incorrect * incorrect_penalty\n\n    return assumed_correct\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    n_players = 6\n    n_handshakes = comb(n_players, 2)\n    return n_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n\n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Define symbols for digits\n    B, C, D, E = symbols('B C D E', integer=True)\n\n    # Constraints on the digits\n    constraints = [\n        (B*1000 + D*100 + E*10 + C) - (C*1000 + B*100 + C*10 + D) - (C*1000 + D*100 + B*10 + C) == 0,\n        B > 0,  # B cannot be zero as it's the first digit in a 4-digit number\n        C >= 0, D >= 0, E >= 0,\n        B < 10, C < 10, D < 10, E < 10,  # Single digit constraints\n        B != C, B != D, B != E, C != D, C != E, D != E  # All digits must be different\n    ]\n\n    # Solve the system of equations for the digits\n    solution = solve(constraints, (B, C, D, E))\n    \n    # Find first solution that makes all digits different and valid\n    if solution:\n        B, C, D, E = solution[0]\n        return B*1000 + D*100 + E*10 + C\n    else:\n        return None\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple (LCM) of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find the smallest number that is greater than or equal to 1000\n    # and is a multiple of the LCM\n    min_markers = (1000 // pack_lcm) * pack_lcm\n    if min_markers < 1000:\n        min_markers += pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "def solution():\n    from math import factorial\n\n    # Total number of letters in \"CHALLENGE\" is 10, with 'E' repeated twice.\n    total_letters = 10\n    repeat_e = 2\n    # Considering the 3 vowels as a single entity, we have 8 entities in total.\n    entities = total_letters - 2  # 2 vowels A and E will count as 1 entity\n\n    # Calculate permutations of these entities.\n    entity_permutations = factorial(entities)\n\n    # Now we need to calculate the permutations of the vowels 'AEE' when grouped together\n    vowels_permutations = factorial(3) // factorial(repeat_e) # 'EE' is considered one entity due to repetition\n\n    # Total permutations is the product of permutations of entities and vowel arrangements.\n    total_permutations = entity_permutations * vowels_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total expense for each period\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250  # Total already given\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total expense for the whole year\n    total_expense = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average expense per month from January to December\n    average_expense = total_expense / 12\n    \n    return average_expense\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_sales / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    divisor = remainder + 1  # Since the divisor is equal to the quotient and we need the least dividend, we start from remainder + 1\n    while True:\n        dividend = divisor * divisor + remainder\n        if dividend % divisor == remainder:\n            return dividend\n        divisor += 1\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # The number of cars is four-thirds of the number of bikes\n    eq1 = Eq(cars, 4/3 * bikes)\n\n    # The number of bikes is one quarter more than the number of lorries\n    eq2 = Eq(bikes, lorries + lorries/4)\n\n    # The total number is even and less than 100, we use this in the loop condition\n\n    # Solve the system for all variables\n    # We iterate since the total is less than 100 and even.\n    for total in range(2, 100, 2):  # even numbers less than 100\n        eq3 = Eq(cars + bikes + lorries, total)\n        sol_set = solve((eq1, eq2, eq3), (cars, bikes, lorries), dict=True)\n        for sol in sol_set:\n            if all(value.is_Integer and value > 0 for value in sol.values()):\n                return sol\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    difference = 2\n    row_number = 12\n\n    seats_in_12th_row = first_row_seats + (row_number - 1) * difference\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    # Given data\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    \n    # With one entrance, no one in the line after 16 minutes\n    one_entrance_clear_time = 16\n    \n    # Calculate the total number of visitors after 16 minutes with one entrance\n    total_visitors = one_entrance_clear_time * visitors_per_minute\n    \n    # Calculate time to clear the line with two entrances\n    two_entrances_clear_rate = 2 * check_in_per_entrance - visitors_per_minute\n    two_entrances_clear_time = total_visitors / two_entrances_clear_rate\n    \n    return two_entrances_clear_time\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    from sympy import symbols, solve\n\n    p = symbols('p')\n    # 245p must be equal to k^3 for some integer k\n    # Taking cube root of 245 results in 7*sqrt(5), which would need to be multiplied by sqrt(5) to get a perfect cube\n    # This means p must be 5 to make 245p a perfect cube (as 7^3 * 5^3 is a cube)\n    \n    # The cube root of 245p can be written as (245p)^(1/3) = k\n    # Simplifying (245*5)^(1/3) = k -> (5*7^2*5)^(1/3) = k -> (7^2 * 5^2)^(1/3) * 5^(1/3) = k\n    # It's clear that we need another 5 to make k an integer, so p should equal 5.\n\n    ans = solve(245*p - 5**3, p)\n    return ans[0]\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # The decimal part of 1/3 is recurring '3's\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    well_depth = 16\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < well_depth:\n        day_count += 1\n        total_climbed += day_climb\n        if total_climbed >= well_depth:\n            break\n        total_climbed -= night_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    doubled_number = final_number - added_number\n    original_number = doubled_number / 2\n\n    return int(original_number)\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    num_games = len(scores)\n    mean_score = total_goals / num_games\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let x be the number of oranges and y be the number of lemons initially.\n    # According to the problem, the initial ratio is 3:5, which gives us the equation 3y = 5x.\n    # After selling 48 oranges, the new ratio is 1:2, which gives us the equation 2(x - 48) = y.\n    \n    # From the first equation we can express y in terms of x: y = (5/3)*x.\n    # Substituting y from the first equation into the second equation, we get:\n    # 2(x - 48) = (5/3)*x\n    # Multiplying through by 3 to clear the fraction, we get:\n    # 6(x - 48) = 5x\n    # 6x - 288 = 5x\n    # x = 288\n    \n    # Now we can find y using the first equation:\n    # y = (5/3)*x\n    # y = (5/3)*288\n    y = (5/3)*288\n\n    return y\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10 / 100\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    num_burgers = 2  # Chicken burger, beef burger\n    num_sides = 3    # French fries, meshed potato, broccoli\n    num_drinks = 5   # Sprite, Coke, Fanta, lemonade, iced tea\n\n    # Using the Principle of Multiplication\n    total_combos = num_burgers * num_sides * num_drinks\n\n    return total_combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n    initial_amount = spent / fraction_spent\n    return initial_amount\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 7 possible combinations of fruit selections:\n    # 1. Apple\n    # 2. Pear\n    # 3. Cherry\n    # 4. Apple, Pear\n    # 5. Apple, Cherry\n    # 6. Pear, Cherry\n    # 7. Apple, Pear, Cherry\n\n    # According to the Pigeonhole Principle, if we have n pigeonholes and n+1 or more pigeons,\n    # there will be at least one pigeonhole with more than one pigeon.\n\n    # So, with 7 possible fruit selections (pigeonholes), we would need 8 students (pigeons)\n    # to ensure at least one selection (pigeonhole) is chosen by two students (pigeons).\n\n    # Therefore, the answer is 8.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Let's denote the number of cats as c.\n    # Ducks have 2 legs each, parrots have 2 legs each, rabbits have 4 legs, and cats have 4 legs each.\n    # Total legs from ducks: 3 * 2 = 6 legs\n    # Total legs from parrots: 2 * 2 = 4 legs\n    # Total legs from rabbit: 1 * 4 = 4 legs\n    # Total legs from cats: c * 4 = 4c legs\n    # Total legs in Jessica's house: 6 (ducks) + 4 (parrots) + 4 (rabbit) + 4c (cats) = 32\n    # We can set up the equation: 6 + 4 + 4 + 4c = 32\n    # Solving for c: 4c = 32 - 14\n    # Simplifying: 4c = 18\n    # Dividing both sides by 4: c = 18 / 4\n    c = (32 - (6 + 4 + 4)) // 4\n    return c\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    import math\n\n    # Get the number of students in each class\n    class_A = 45\n    class_B = 75\n    class_C = 210\n\n    # Calculate the greatest common divisor of the three numbers\n    gcd_AB = math.gcd(class_A, class_B)\n    gcd_ABC = math.gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    ans = phi(4, phi(8, 3))\n    \n    return ans\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    older_current, younger_current = symbols('older_current younger_current')\n    \n    # When the age of the older brother was the same as the younger brother's current age...\n    # older_current - younger_current = younger_current - 12\n    \n    # When the younger brother becomes the same age as the older brother's current age...\n    # younger_current + (older_current - younger_current) = older_current\n    # older_current + (younger_current - older_current) = 27\n    \n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    equation2 = Eq(older_current + (younger_current - older_current), 27)\n    \n    solutions = solve((equation1, equation2), (older_current, younger_current))\n    \n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n\n    # determine the least common multiple of the four numbers\n    markers_lcm = lcm(6, 8, 9, 15)\n\n    # find the minimum number of markers to purchase which is at least 1000\n    # by adding the lcm to itself until the total is greater than or equal to 1000\n    min_markers = markers_lcm\n    while min_markers < 1000:\n        min_markers += markers_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms = symbols('rooms')\n    # if there are 4 people in each room, 40 students don't have dormitories\n    # this means total students = 4 * rooms + 40\n    # if there are 6 people in each room, 24 beds will be vacated\n    # this means total students = 6 * rooms - 24\n\n    # these two are equal, so we equate them:\n    equation = Eq(4 * rooms + 40, 6 * rooms - 24)\n    # solving the equation\n    solution = solve(equation, rooms)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    nth_term = tenth_term + common_difference * (102 - 10)\n\n    return int(nth_term)\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_sweets = 18\n    fraction_eaten = 3/5\n    total_sweets = eaten_sweets / fraction_eaten\n    sweets_left_over = total_sweets - eaten_sweets\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n    \n    age_difference = jane_age_now - john_age_now\n    john_age_when_jane_15 = jane_target_age - age_difference\n    \n    return john_age_when_jane_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if 36 % num == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    # Create the equation (13-x)^2 = 25\n    equation = Eq((13-x)**2, 25)\n    # Solve for x\n    solutions = solve(equation, x)\n    # Out of the two solutions, we return the one which is a whole number if it exists\n    ans = next(filter(lambda sol: sol.is_integer, solutions), None)\n    return ans\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # cost price as a symbol\n    cp = symbols('cp')\n\n    # marked price is 120% of cost price\n    mp = 1.20 * cp\n\n    # sold price is 80% of the selling price\n    sp = 0.80 * mp\n\n    # loss is selling price minus cost price\n    loss = cp - sp\n\n    # loss is given as $40\n    equation = Eq(loss, 40)\n\n    # solve the equation\n    cp_value = solve(equation, cp)\n\n    return cp_value[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = ((7 + 3) * 11) - (7 + (3 * 11))\n    return result\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Time for both taps to fill the tank\n    both_taps_time = 6\n    \n    # Time for tap X to fill the tank alone\n    tap_x_time = 10\n    \n    # Rate of tap X (part of tank filled per minute)\n    rate_x = 1 / tap_x_time\n    \n    # Rate of both taps together\n    rate_both = 1 / both_taps_time\n    \n    # Rate of tap Y (part of tank filled per minute)\n    # rate_both = rate_x + rate_y -> rate_y = rate_both - rate_x\n    rate_y = rate_both - rate_x\n    \n    # Time for tap Y to fill the tank alone\n    tap_y_time = 1 / rate_y\n    \n    return tap_y_time\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10  # pupils who like only apples\n    only_strawberries = 30 - 10  # pupils who like only strawberries\n    both = 10  # pupils who like both\n    neither = 5  # pupils who like neither\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n    total_markers = 708\n\n    # Equation for the sum of markers they both have\n    equation1 = Eq(xuanrui + yaokuan, total_markers)\n    # Equation for the markers left after Xuanrui gave away and Yaokuan sold 3/7 of his\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7)*yaokuan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_rate = 0.12\n    discount_amount = usual_price * discount_rate\n    final_price = usual_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    # Let x be the number of correct answers\n    # Then, (total_questions - x) is the number of incorrect answers\n    # We have the equation: x*points_correct + (total_questions - x)*points_incorrect = total_points\n\n    # Solving for x\n    correct_answers = (total_points - total_questions * points_incorrect) / (points_correct - points_incorrect)\n\n    return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(x) for x in range(1, 9))\n    return factorial_sum % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_cup_a = 300 * 0.20\n    sugar_cup_b = 300 * 0.30\n\n    # Calculate total volume and total amount of sugar in the mixture\n    total_volume = 300 + 300\n    total_sugar = sugar_cup_a + sugar_cup_b\n\n    # Calculate the sugar concentration in the mixture (%)\n    sugar_concentration = (total_sugar / total_volume) * 100\n\n    return sugar_concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    \n    equation1 = Eq(ahmad + ryan, 1442)\n    equation2 = Eq(ahmad, 6 * ryan)\n    \n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    result = 3/10 + 1/100 + 7/1000\n    return result\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    exchange_rate = 2.5\n    amount_in_dollars = 1000\n\n    amount_in_pounds = amount_in_dollars / exchange_rate\n\n    return amount_in_pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    after_exchange_notes = 175\n    \n    # Grouping method:\n    # We consider each group of one $10-note exchanged for five $2-notes as one group.\n    # Then each $10-note becomes 4 more $2-notes after exchange.\n    # Let x be the number of $10-notes initially, and 95-x be the number of $2-notes.\n    # After exchange, the number of $2-notes would become 175. Hence:\n    # (95 - x) + 4x = 175\n    # 3x = 175 - 95\n    # x = (175 - 95) / 3\n    x = (after_exchange_notes - total_notes) // 3\n    initial_two_dollar_notes = total_notes - x\n    \n    return initial_two_dollar_notes\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n\n    # The length of the train without gaps\n    train_length_without_gaps = total_length - head_length\n\n    # Each carriage with its gap contributes this much length\n    carriage_total_length = carriage_length + gap_length\n\n    # Subtract one gap length because there is no gap after the last carriage\n    number_of_carriages = (train_length_without_gaps + gap_length) // carriage_total_length\n\n    # Including the head of the train\n    return number_of_carriages + 1\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Count occurrences of '8' in the ones place (from 1 to 288)\n    ones_place_count = 0\n    for i in range(1, 289):\n        if i % 10 == 8:\n            ones_place_count += 1\n\n    # Count occurrences of '8' in the tens place (from 10 to 280)\n    tens_place_count = 0\n    for i in range(10, 289, 10):\n        if (i // 10) % 10 == 8:\n            tens_place_count += 10\n        if i == 280:\n            tens_place_count += 9  # Adjust for range 280-288\n\n    # Count occurrence of '8' in the hundreds place (none in this case)\n    hundreds_place_count = 0\n\n    # Sum counts from all places\n    total_count = ones_place_count + tens_place_count + hundreds_place_count\n\n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_score = 2\n    incorrect_score = -1\n\n    # let x be the number of questions answered correctly, and y be the number of questions answered incorrectly.\n    # We know that x + y = total_questions and correct_score*x + incorrect_score*y = total_score\n    total_score = 82\n    supposed_correct = 32\n\n    # Calculate score based on the declared number of correct answers\n    declared_score = (supposed_correct * correct_score) + ((total_questions - supposed_correct) * incorrect_score)\n\n    # Check if the declared correct answers make up the total score\n    if declared_score == total_score:\n        # Her statement is correct\n        ans = supposed_correct\n    else:\n        # Her statement is not correct, so we solve for the correct number of answers\n        for x in range(total_questions + 1):\n            y = total_questions - x\n            if (x * correct_score) + (y * incorrect_score) == total_score:\n                ans = x\n                break\n    return ans\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24*x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):   # since x is the ten's digit it ranges from 1 to 9\n        for y in range(10):  # y is the unit digit, ranges from 0 to 9\n            A = x*10 + y     # Constructing the number A\n            B = 2*A          # Constructing the number B which is twice of A\n            if B == 25 + 6*A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price - (original_price * discount_rate)\n    final_price = discounted_price + (discounted_price * increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Price per kg for the 2.5 kg bag\n    price_per_kg_bag1 = 5 / 2.5\n    # Price per kg for the 4 kg bag\n    price_per_kg_bag2 = 7.70 / 4\n    \n    # Compare the two prices to find which one is a better value\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        better_value = \"2.5 kg bag\"\n    else:\n        better_value = \"4 kg bag\"\n\n    return better_value\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    num_books = 5\n    price_per_book = 4.50\n    total_cost = num_books * price_per_book\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    \n    trees_per_side = (road_length // interval) + 1\n    total_trees = trees_per_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses - 1) * distance_between_buses + number_of_buses * bus_length\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the original number\n    x = symbols('x')\n\n    # Define the equation based on the problem statement\n    equation = Eq((x / 4) - 25, 2021)\n\n    # Solve for x (the original number)\n    original_number = solve(equation, x)\n\n    # Perform the correct calculation\n    correct_answer = (original_number[0] * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    total_height_28_blocks = 182\n    number_of_blocks_28 = 28\n    number_of_blocks_42 = 42\n    \n    # Find the height of one block\n    height_of_one_block = total_height_28_blocks / number_of_blocks_28\n    \n    # Find the height of 42 blocks\n    height_of_42_blocks = height_of_one_block * number_of_blocks_42\n    \n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_quarter_full = 250\n    mass_three_quarter_full = 350\n    \n    mass_half_full = (mass_one_quarter_full + mass_three_quarter_full) / 2\n    \n    mass_of_Marmite = mass_three_quarter_full - mass_half_full\n    mass_of_empty_jar = mass_one_quarter_full - mass_of_Marmite\n\n    return mass_of_empty_jar\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1  # This gives us number of terms in the sequence\n    sum = (first_term + last_term) * num_terms // 2  # Sum of arithmetic sequence formula\n    return sum\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    x, y = symbols('x y')\n    equation = Eq(x/5, y/3)\n    \n    # solve for y when x is 5\n    solutions = solve(equation.subs(x, 5), y)\n    \n    return \"directly\", solutions[0]\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # From the given sequence we know:\n    # a4 = a3 + a2\n    # a6 = a5 + a4\n    # Given a4 = 6 and a6 = 15\n    # We can find a5 by assuming a2 = 1 and then scaling the sequence\n    # So, a5 = a6 - a4\n    # Then a7 = a6 + a5\n\n    a4 = 6\n    a6 = 15\n    a5 = a6 - a4\n    a7 = a6 + a5\n    \n    return a7\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_after_increase = cost_price * 1.50\n    final_selling_price = selling_price_after_increase * 0.90\n    profit = final_selling_price - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m_squared_plus_5 = 0\n    n_squared = 0\n    \n    while True:\n        m_squared_plus_5 += 5\n        if ((m_squared_plus_5 - 5) ** 0.5).is_integer():\n            n_squared = m_squared_plus_5 + 18\n            if (n_squared ** 0.5).is_integer():\n                break\n\n    # The original number of students is m_squared_plus_5 - 5\n    return m_squared_plus_5 - 5\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2 * x + 3) / 4 + (6 + 4 * x) / 3, (7 * x + 22) / 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    common_factor = gcd(gcd(students_A, students_B), students_C)\n    \n    return common_factor\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.time()\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average calculation\n    initial_average = 25\n    final_average = 22\n    number_count = 3\n\n    # Calculate initial total sum\n    initial_total = initial_average * number_count\n\n    # Calculate final total sum\n    final_total = final_average * number_count\n\n    # Calculate the number that was changed to 16\n    changed_number = initial_total - (final_total - 16)\n\n    return changed_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 3 and i % 6 == 5:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_score = 36 * 89\n    girls_total_score = girls * 88\n    boys_total_score = boys * 91\n\n    equation = Eq(girls_total_score + boys_total_score, total_score)\n\n    girls_count = solve(equation, girls)\n\n    return girls_count[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    score = 66\n    \n    # Rex did not attempt one question, so 24 questions were answered. \n    # Let's assume all answers were correct first, then deduct points for each wrong answer.\n    # correct_answers + incorrect_answers = 24, each incorrect answer changes the score by 4 + 2 = 6 points\n    # correct_answers * 4 - incorrect_answers * 2 = 66, \n    # subtract the score assuming all were correct:\n    incorrect_answers = (total_questions * points_correct - score) // (points_correct + abs(points_incorrect))\n    correct_answers = total_questions - 1 - incorrect_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Define variables for vertices, edges, and faces (V-E+F=2)\n    vertices = 8  # In a 3D shape like a cube, there would be 8 vertices\n    faces = 6     # A cube has 6 faces\n    # Use Euler's formula for polyhedra to find the number of edges\n    edges = vertices - faces + 2  # V - F + 2 = E -> E = V - F + 2\n    \n    return edges\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    total_solution_weight = 800 + 200 + 300\n    total_sugar_weight = (800 * 0.05) + (200 * 0.30) + (300 * 0.10)\n    sugar_concentration = (total_sugar_weight / total_solution_weight) * 100\n    return sugar_concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    \n    equation1 = Eq(gill - andrew, 18)\n    equation2 = Eq(andrew + gill, 62)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_in_first_punch = 0.35 * 20\n    fruit_juice_in_second_punch = 0.60 * 30\n    total_fruit_juice = fruit_juice_in_first_punch + fruit_juice_in_second_punch\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    n_people = 4\n    handshakes = comb(n_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges she made at the beginning\n    x = symbols('x')\n\n    # She sold 5/7 on the first day, so she had 2/7 left\n    after_first_day = (2/7) * x\n\n    # She sold 1/3 of the remaining badges on the second day\n    after_second_day = after_first_day - (1/3) * after_first_day\n\n    # She made an additional 354 badges\n    after_making_more = after_second_day + 354\n\n    # In the end she had 3 times the number of badges she made at first\n    equation = Eq(after_making_more, 3 * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    min_number = float('inf')  # Start with an infinitely large number\n\n    for hundreds in range(1, 10):  # Hundreds place must be between 1 and 9\n        for tens in range(10):  # Tens place must be between 0 and 9\n            for ones in range(10):  # Ones place must be between 0 and 9\n                if 7 in [hundreds, tens, ones]: # Check if 7 is one of the digits\n                    all_diffs_within_four = True\n                    # Check that the difference between any two digits is no more than 4\n                    for a, b in [(hundreds, tens), (hundreds, ones), (tens, ones)]:\n                        if abs(a - b) > 4:\n                            all_diffs_within_four = False\n                            break\n\n                    if all_diffs_within_four:\n                        number = 100 * hundreds + 10 * tens + ones\n                        min_number = min(min_number, number)\n                        \n    return min_number\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Convert the word 'Angel' to numbers based on the letter positions in the word\n    angel_numbers = [0, 1, 4, 1, 7, 0, 5, 0, 2, 1]\n\n    # Create a dictionary that maps each digit to its corresponding count in 'Angel'\n    angel_dict = {i: angel_numbers.count(i) for i in range(10)}\n\n    # Convert the word 'Devil' to numbers based on the attempt given by Andy\n    devil_numbers = [4, 0, 0, 5, 2, 2, 0, 9, 1, 2]\n\n    # Create a dictionary that maps each digit to its corresponding count in the attempt\n    attempt_dict = {i: devil_numbers.count(i) for i in range(10)}\n\n    # Check whether the count of each digit is the same in 'Angel' and the attempt\n    can_unlock = (angel_dict == attempt_dict)\n\n    # If Andy can unlock the treasure chest\n    if can_unlock:\n        return True\n    else:\n        # If Andy cannot unlock it, provide the correct password based on angel_dict\n        correct_password = ''.join(str(i) * angel_dict[i] for i in range(10))\n        return correct_password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    num_players = 4\n    rounds = 0\n    \n    while num_players > 1:\n        num_players = num_players / 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n\n    both_A_and_B = (not_by_A + not_by_B) - total_exhibits\n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # We know that if the magician picks one more than the total amount of balls of two colors, he guarantees one of each color.\n    # blue balls + red balls + 1 guarantees at least one green ball.\n    # blue balls + green balls + 1 guarantees at least one red ball.\n    # red balls + green balls + 1 guarantees at least one blue ball.\n    \n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # Only need to guarantee that we have one ball of the most abundant color\n    ans = blue_balls + red_balls + 1  # This will guarantee at least one green ball\n    \n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for blouse and skirt prices\n    blouse, skirt = symbols('blouse skirt')\n\n    # Each skirt costs $14 more than a blouse\n    equation1 = Eq(skirt, blouse + 14)\n\n    # The total cost of 3 skirts and 2 blouses is $317\n    equation2 = Eq(3 * skirt + 2 * blouse, 317)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    # Returning the cost of a blouse\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Given that the expression (8A - 3B) needs to be a multiple of 3\n    # Let's loop over prime number candidates for A and B\n    # Since 3 is the lowest prime number which can divide 8A - 3B without being a factor of A or B, \n    # Let's find value of A such that for any prime B, it satisfies the condition \n    \n    # import the sympy library which has functions to check for prime numbers\n    from sympy import isprime\n    \n    # Start checking for prime numbers\n    # Note that A cannot be 3 as 8A would be a multiple of 3, to meet the condition, B would then have to be 3 as well,\n    # which is not allowed as A and B are distinct primes. Hence, start with 2.\n    A = 2\n    \n    while True:\n        if isprime(A) and ((8 * A) % 3 == 0):\n            # If A is prime and 8A is a multiple of 3, then (8A - 3B) would certainly be a multiple of 3 for any prime B.\n            # (Except for B=3, but B must be different than A, so B will be some other prime.)\n            return A\n        # Check next number\n        A += 1\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # House value after the first year's 10% increase\n    value_after_first_year = 110000\n\n    # Derive original price of the house using the reverse of a 10% increase\n    original_price = value_after_first_year / 1.1\n\n    # Calculate the new value after 10% loss in the second year based on last year's value\n    new_value_after_second_year = value_after_first_year * 0.9\n\n    # Calculate the profit or loss by comparing new value with the original price\n    profit_or_loss = new_value_after_second_year - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations for the orders of the groups of flowers: 3! for roses, 4! for jasmines, and 1! for daisy.\n    roses_permutations = factorial(3)\n    jasmines_permutations = factorial(4)\n    daisy_permutations = factorial(1) # this is actually 1, since there's only one way to arrange a single flower\n\n    # Because there are 3 distinct groups, calculate permutations for arranging these groups: 3!\n    groups_permutations = factorial(3)\n\n    # Total arrangements are the product of the permutations of the groups and the permutations within each group.\n    total_arrangements = groups_permutations * roses_permutations * jasmines_permutations * daisy_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "from math import gcd\n\ndef solution():\n    lcm_1_to_6 = 1\n    for i in range(1, 7):\n        lcm_1_to_6 *= i // gcd(lcm_1_to_6, i)\n        \n    lcm_1_to_8 = 1\n    for i in range(1, 9):\n        lcm_1_to_8 *= i // gcd(lcm_1_to_8, i)\n    \n    count = 0\n    for m in range(lcm_1_to_6, lcm_1_to_8 + 1):\n        if m % lcm_1_to_6 == 0 and lcm_1_to_8 % m == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    total_sum = 60\n    possible_integers = 1\n    current_sum = 0\n    \n    while current_sum < total_sum:\n        current_sum += possible_integers\n        possible_integers += 1\n    \n    # Subtract one because the loop counts one additional integer\n    return possible_integers - 1\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 1000):  # assuming George wouldn't bake an unreasonable number of pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # ml per min\n    mins_per_hour = 60  # minutes in an hour\n    ml_per_litre = 1000  # ml in a litre\n    \n    leaked_ml_per_hour = leak_rate_per_min * mins_per_hour\n    leaked_litres_per_hour = leaked_ml_per_hour / ml_per_litre\n    \n    return leaked_litres_per_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 3):\n        s, e, addend_third_digit = perm\n        if s == '0':\n            continue\n        sum_see = int(s + e + e)\n        addend1 = int(e + s + s)\n        addend2 = int(s + s + e)\n        if sum_see == addend1 + addend2:\n            return sum_see\n    return None\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = ((1, 2), (1, 3), (1, 4), (1, 6), (0, 7))\n\n    # Use the Chinese Remainder Theorem to solve the system of congruences\n    age, _ = solve_congruence(*congruences)\n\n    # Return the age\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    return 4 + 1  # Worst case: she picks 1 of each color, then one more to guarantee a pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_into_three = (final_pieces - initial_pieces) // 2\n    return cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario using the pigeonhole principle:\n    # Take one red apple, then one green apple to avoid picking the same colour.\n    # Continue alternating until you are forced to take the same colour.\n    \n    # 1st draw: 1 red (can't guarantee 2 apples of same colour yet)\n    # 2nd draw: 1 green (can't guarantee 2 apples of same colour yet)\n    # 3rd draw: 1 red OR 1 green (must have 2 apples of the same colour now)\n    \n    # You must take 3 apples to guarantee 2 apples of the same colour.\n    \n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    each_pail_volume = 4  # in liters\n    water_left = 7  # in liters\n\n    original_volume = (pails_filled * each_pail_volume) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    total = sum((-1)**(i+1) * i for i in range(1, 47))\n    return total\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # Since 243 is 3 raised to the power of 5, we can assume that x^4 * y^3 * z = 3\n    # We need to find x^8 * y^6 * z^2, which is (x^4 * y^3 * z)^2\n    xyz_value = 3\n    ans = xyz_value ** 2\n    return ans\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    from math import factorial\n    \n    A = factorial(2010)\n    \n    while A % 10 == 0:\n        A //= 10\n\n    return A % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    from statistics import median\n\n    # Create the sequence according to the pattern\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1)) \n\n    # Calculate the median of the sequence\n    med = median(sequence)\n    return med\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # Total height of the six players\n    total_height_six_players = 6 * 150\n\n    # Average height of four players is 2 cm lower than the average height of the team\n    average_height_four_players = 150 - 2\n\n    # Total height of the four players\n    total_height_four_players = 4 * average_height_four_players\n\n    # Total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n\n    # Average height of the other two players\n    average_height_two_players = total_height_two_players / 2\n\n    return average_height_two_players\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one book and one pencil box\n    book, pencil_box = symbols('book pencil_box')\n\n    # Equation representing the cost of two similar books and three identical pencil boxes\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n\n    # Equation representing the cost of two similar books and six identical pencil boxes\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations for the cost of the book and the pencil box\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    # Return the solution for the cost of one pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500  # total length of the road\n    per_day_paving = 50  # meters paved each day\n    days_needed = total_length / per_day_paving  # how many days needed to complete the work\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle = 8\n    days = 4\n    daily_fodder_per_cattle = 10\n\n    total_fodder = cattle * days * daily_fodder_per_cattle\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # The product of 42 and x equals to the square of 42\n    # So, x must be 42 because 42 * x = 42^2\n    x = 42\n    \n    # Factoring the product of 42 and y, all factors' exponents equal to 1\n    # This implies that the prime factorization of 42 * y yields each prime factor exactly once\n    # Prime factorization of 42 is 2 * 3 * 7\n    # Therefore, for the product 42 * y to have unique prime factors, y must be the product of primes not in 42's factorization\n    # Since the question specifies that y must be a positive integer, the smallest such y is 1\n    y = 1\n    \n    # The sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let the original number of marbles Larry had be x.\n    # According to the problem, we have the following equation:\n    # (5/12)x + 30 + 26 + 35 = x\n    # To find x, we can solve this equation.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5/12)*x + 30 + 26 + 35, x)\n    original_marbles = solve(equation, x)\n    \n    return original_marbles[0]\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    # Let the cost of one pie be x dollars.\n    # Then the cost of one cake is x + 13 dollars.\n    # Let the number of pies sold be 4y and the number of cakes sold be y.\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # From the ratio of money collected from selling the pies to cakes being 15:7\n    equation1 = Eq(4*y*x, 15/22 * 1848)\n    # From the ratio of the number of pies to cakes sold being 4:1\n    equation2 = Eq(x + 13, 7/22 * 1848 / y)\n    \n    # Since we want to know how many cakes were sold, we solve for y\n    solution = solve((equation1, equation2), (x, y))\n    \n    return solution[y]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = 1 / 4\n    money_given = total_money * portion_given\n    return money_given\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = sum(range(1, 100))\n    digit_sum = sum([int(digit) for number in range(1, 100) for digit in str(number)])\n    return digit_sum\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    years_ago = 38\n    months_ago = 6\n\n    birth_date = current_date - timedelta(days=years_ago*365.25 + months_ago*30)\n\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n\n    remaining_length = original_length - piece_cut\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    remaining_after_cds = 24 + 6\n    total_after_cds = remaining_after_cds / (2/5)\n    initial_money = total_after_cds / (3/4) + 3\n    return initial_money\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for p in permutations(digits, 4):\n        if p[3] in ['0', '6', '8'] and p[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_solution_weight = 600  # in grams\n    sugar_percentage = 0.22  # 22%\n\n    sugar_weight = total_solution_weight * sugar_percentage\n\n    return sugar_weight\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = []\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            beads_count.append(beads)\n    ans = beads_count[0]  # Since there is only one possible answer based on the given conditions.\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jess, jill = symbols('jess jill')\n\n    # Before Jill gives sweets to Jess\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After Jill gives sweets to Jess\n    jill_new = jill - 8\n    jess_new = jess + 8\n    equation2 = Eq(jill_new, 4/7 * jess_new)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total sweets they have together\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n    \n    longest_piece_length = gcd(length1, length2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Extract the common factor 9^2015 from 9^2015 + 9^2016.\n    # We get 9^2015 * (1 + 9).\n    # Since we only need the units digit, we can reduce this to the units digit of 9^2015 * 10.\n    # The units digit of any power of 9 cycles as 9, 1, 9, 1, ..., and thus the units digit of 9^2015 is 9.\n    # The units digit of 9 * 10 is always 0.\n    # Hence, the units digit of the entire expression is 0.\n    \n    return 0\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Place 5 men first, which can be arranged in 5! ways\n    men_arrangements = factorial(5)\n    # For each arrangement of men, there are 6 possible places to put the first woman (before and after each of the 5 men)\n    # After placing the first woman, there are 5 places left for the second, and 4 places left for the third\n    women_arrangements = 6 * 5 * 4\n    # Multiply the number of arrangements of men with the number of arrangements of women\n    total_arrangements = men_arrangements * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # d = distance from the library to the school\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    weiling_time_advantage = 2  # minutes\n    qiqi_arrival_advantage = 4  # minutes\n\n    # Let t be the time taken by Qiqi to reach school\n    t = symbols('t')\n\n    # Distance is the same for both Qiqi and Weiling\n    # Qiqi's distance equation: d = qiqi_speed * t\n    # Weiling's distance equation: d = weiling_speed * (t - weiling_time_advantage - qiqi_arrival_advantage)\n    # We subtract (weiling_time_advantage + qiqi_arrival_advantage) because Weiling starts 2 min later and arrives 4 min earlier\n\n    equation = Eq(qiqi_speed * t, weiling_speed * (t - weiling_time_advantage - qiqi_arrival_advantage))\n\n    # Solve for the time taken by Qiqi\n    qiqi_time = solve(equation, t)[0]\n\n    # Calculate the distance using Qiqi's time and speed\n    distance = qiqi_speed * qiqi_time\n\n    return distance\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n    \n    T, income = symbols('T income')\n    tax_equation = (30000 * T/100) + ((income - 30000) * (T + 3) / 100) - (income * (T + 1) / 100)\n    solutions = solve((tax_equation, income - 30000), (T, income))\n    \n    return solutions[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    # Marc's watch shows 11:50 AM but it's actually 15 minutes later\n    marc_actual_time_in_min = (11 * 60 + 50) + 15  # converting 11:50 AM to minutes and adding 15 minutes\n    \n    # Half an hour's time in minutes\n    half_hour_in_min = 30\n\n    # Calculate the future time on Marc's watch in minutes\n    future_marc_time_in_min = marc_actual_time_in_min + half_hour_in_min\n\n    # Convert the future time on Marc's watch to hours and minutes\n    future_marc_time_hours = future_marc_time_in_min // 60\n    future_marc_time_minutes = future_marc_time_in_min % 60\n    \n    # George's watch is 7 minutes fast, so subtract 7 minutes to get the correct time\n    george_actual_time_in_min = future_marc_time_in_min - 7\n\n    # Convert George's correct future time to hours and minutes\n    george_future_time_hours = george_actual_time_in_min // 60\n    george_future_time_minutes = george_actual_time_in_min % 60\n    \n    # Adjusting the 24-hour format for George's time if needed\n    george_future_time_hours = george_future_time_hours if george_future_time_hours < 24 else george_future_time_hours - 24\n\n    # Returning time in AM/PM format\n    george_future_am_pm = \"AM\" if george_future_time_hours < 12 else \"PM\"\n    george_future_time_hours = george_future_time_hours if george_future_time_hours <= 12 else george_future_time_hours - 12\n\n    return f\"{george_future_time_hours:02d}:{george_future_time_minutes:02d} {george_future_am_pm}\"\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    correct, wrong = symbols('correct wrong')\n    equation1 = Eq(correct + wrong, 30)\n    equation2 = Eq(correct*5 - wrong, 90)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n    combined_rate = A_rate + B_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    jump_up = 3\n    slide_down = 2\n    net_gain_per_3_jumps = (jump_up * 3) - (slide_down * 2)\n    height = 31\n\n    # Number of complete cycles (of 3 jumps) before reaching the top or last cycle\n    full_cycles = (height - jump_up) // net_gain_per_3_jumps\n\n    # Height reached after full cycles\n    reached_height = full_cycles * net_gain_per_3_jumps\n\n    # Remaining height to reach the top\n    remaining_height = height - reached_height\n\n    # Number of extra jumps to reach the top after the last full cycle\n    extra_jumps = 0\n    while remaining_height > 0:\n        extra_jumps += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n    \n    # Total jumps = jumps in full cycles + extra jumps\n    total_jumps = full_cycles * 3 + extra_jumps\n\n    return total_jumps\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(0, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age of 22 years would have been 45 - 22 years ago from 2002\n    gigi_22_year = 2002 - (45 - 22)\n\n    # Jenny's age in the year when Gigi was 22 \n    jenny_age_when_gigi_22 = gigi_22_year - 1995 + 22\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We want to ensure we get 4 marbles of different colors.\n    # In the worst case, we might pick all the marbles of one color before getting a marble of a new color.\n    # So we pick all marbles of the most abundant color, then one of each of the other colors.\n    \n    # Sorting the number of marbles of each color in descending order\n    marble_counts = sorted([12, 9, 8, 3], reverse=True)\n\n    # In the worst case, we might pick all the marbles of the most abundant color, then one of each of the other colors.\n    # We must ensure that we have at least one marble of each of the 4 colors.\n    marbles_needed = marble_counts[0] + 1 + 1 + 1  # Add one for each of the other three colors.\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # Sum of the digits 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6 = 22\n    sum_digits = 22\n    # A 9-digit number is divisible by 9 if the sum of its digits is divisible by 9\n    # Find A such that (sum_digits + A) is divisible by 9\n    for A in range(10):\n        if (sum_digits + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Negative because the sequence is decreasing\n\n    # Find the last positive term using the formula:\n    # last_term = first_term + (n - 1) * difference\n    # where last_term > 0 and since the difference is negative, n will be positive\n\n    n = 1  # Start with 1 term\n    while first_term + (n - 1) * difference > 0:\n        n += 1  # Increment n to find the next term\n\n    # Since the loop exits when last_term <= 0, we subtract 1\n    n -= 1\n\n    return n\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    i = 1\n    while True:\n        num = i * 8  # Since 8 is a multiple of 2, this ensures the number ends in 2 or 6\n        if num % 3 == 0 and str(num).endswith('2'):\n            return num\n        i += 1\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for i in range(10):\n        num = int(\"451\" + str(i))\n        if num % 3 == 0 and num % 5 != 0 and num % 9 != 0:\n            return i\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    num_apples = 12\n    count = 0\n    for group1 in range(1, num_apples):\n        group2 = num_apples - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    downstream_speed = speed_in_still_water + speed_of_current\n    distance = 140\n\n    time = distance / downstream_speed\n    return time\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377/6 * 5/3)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount = 0.15\n\n    sale_price = original_price * (1 - discount)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        points = correct * 5 - wrong * 2\n        if points == 51:\n            return correct\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let's assume the total number of people in group A is a and in group B is b.\n    # According to the problem, a and b must satisfy:\n    # a % 36 == 11 and (a + b) % 36 == 0\n    # Let's start by finding the possible values for a where a % 36 == 11.\n    # We will then find the corresponding value of b where (a + b) % 36 == 0\n    # Since it's not specified the maximum number of people,\n    # and knowing that in group B there should be at least one person,\n    # we start the search from 11 (no buses for group A, just the extra people)\n    # up to 36 (maximum capacity of one bus).\n\n    min_pictures = 36  # Minimum number of pictures one roll can take\n\n    for a in range(11, 1000, 36): # Arbitrary large number for upper limit\n        if (a + 1) % 36 == 0:  # Since group B needs at least one person.\n            b = 36 - 11  # A single bus is filled with remaining A and all of B\n            total_pictures = a * b  # A took a picture with each member of B\n            remaining_pictures = total_pictures % min_pictures\n            return min_pictures - remaining_pictures if remaining_pictures != 0 else 0  # if divisible, no extra pictures\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    given_numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_count = 8\n\n    sum_of_given_numbers = sum(given_numbers)\n    total_sum_for_mean = mean_value * total_count\n    missing_number = total_sum_for_mean - sum_of_given_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]  # Calculate differences between terms\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n\n    # Check if the sequence of differences itself forms an arithmetic sequence\n    if len(set(second_differences)) == 1:\n        # In this case, we have a common second difference, which means we can find the next first difference\n        # by adding the common second difference to the last first difference.\n        next_difference = differences[-1] + second_differences[0]\n        next_term = 50 + next_difference\n    else:\n        # If the sequence of differences does not form an arithmetic sequence, it's not a sequence we can\n        # proceed with based on the information provided.\n        next_term = None\n\n    return next_term\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "from itertools import permutations\n\ndef solution():\n    # Initial person A\n    start = 'A'\n    # Other individuals\n    others = 'BCD'\n    count = 0\n    # Generate all permutations of 3 passes among the 3 individuals (not including A)\n    for perm in permutations(others, 3):\n        # Check if the ball returns to A after exactly 3 passes\n        # This check is redundant as all permutations of length 3 will satisfy this condition\n        # So, we can simply count all permutations without this check\n        # Adding this check for the sake of completion and understanding\n        if perm[-1] != start:\n            count += 1            \n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    cost_of_drinks = total_cost - total_cupcake_cost\n    cost_of_one_can = cost_of_drinks / 2\n    return cost_of_one_can\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    # Convert minutes to seconds for uniformity\n    cycle_time = 9 * 60  # 9 minutes in seconds\n\n    # First traffic light changes every 30 seconds (half a minute)\n    first_light_time = 30  # in seconds\n\n    # Second traffic light changes every 45 seconds (0.75 minutes)\n    second_light_time = 45  # in seconds\n\n    # Find the least common multiple of the first two traffic lights\n    from math import lcm\n    lcm_first_second = lcm(first_light_time, second_light_time)\n\n    # Now, we need to find a multiple of lcm_first_second that divides evenly into cycle_time\n    # And is not less than minimum_third_light_time = 30 seconds\n    third_light_time = lcm_first_second\n    while third_light_time < cycle_time:\n        if cycle_time % third_light_time == 0:\n            break\n        third_light_time += lcm_first_second\n\n    # Ensure that the third light time is at least 30 seconds\n    if third_light_time < 30:\n        third_light_time = 30\n\n    return third_light_time\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    weight_all_papers_g = weight_per_paper_g * number_of_girls\n    weight_all_papers_kg = weight_all_papers_g / 1000  # Convert grams to kilograms\n\n    return weight_all_papers_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '2', '8', '9']\n    max_product = 0\n    \n    for perm in permutations(cards):\n        number1 = int(perm[0] + perm[1])\n        number2 = int(perm[2] + perm[3])\n        max_product = max(max_product, number1 * number2)\n        \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    time_first_bridge = 8\n    time_second_bridge = 10\n    people_line_length = 3\n\n    # Speed = Distance / Time\n    # The speed is the same for both bridges, and the entire line must cross the bridge.\n    # For the first bridge: speed = (bridge_length + people_line_length) / time_first_bridge\n    first_bridge_length = 9\n    speed = (first_bridge_length + people_line_length) / time_first_bridge\n\n    # For the second bridge, we can now find its length by rearranging the formula:\n    # bridge_length = (speed * time_second_bridge) - people_line_length\n    second_bridge_length = (speed * time_second_bridge) - people_line_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1002 - 2 * i) * ((1000 - 2 * i) - (998 - 2 * i)) for i in range(0, 499))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for x in range(int(product ** (1/3)), 1, -1):  # start from approx cube root of product down to 1\n        if product % x == 0:\n            y = product // x  # find the quotient\n            # since they are consecutive even numbers, we check if (x+2)*(x+4) is the quotient\n            if (x + 2) * (x + 4) == y:\n                return x + 4  # the largest of the three numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    from datetime import datetime\n    \n    # Define the start and end time in 24-hour format\n    start_time = datetime.strptime('11:55 AM', '%I:%M %p')\n    end_time = datetime.strptime('1:40 PM', '%I:%M %p')\n    \n    # Calculate the duration in minutes\n    duration = (end_time - start_time).total_seconds() / 60\n    \n    return int(duration)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_side = 11\n    right_side = 7\n    crystal = 1  # Include Crystal herself\n\n    # Since there are two rows, we need to double the count and add Crystal\n    total_people = (left_side + right_side + crystal) * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    # Iterate over the range of valid three-digit numbers that are divisible by both 3 and 11.\n    # Since 3 and 11 are co-prime, their least common multiple is 3 * 11 = 33.\n    for num in range(100, 1000, 33):\n        # Check if subtracting one from the number makes it divisible by both 2 and 7.\n        if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n            # If the condition is met, this is the number the teacher is thinking of.\n            return num\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    number = 224\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    total_time = lesson_duration * 3 + moving_period * 2\n    break_start_time = start_time + total_time\n\n    return break_start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit must be non-zero\n        for b in range(a + 5, 10):  # tens digit must be greater than the hundreds by 5\n            c = b - 2  # ones digit is smaller than the tens by 2\n            if (a + b + c) / 2 == b:  # half the sum of the digits equals the tens digit\n                return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # If Maddy has 10 cupcakes and she wants to divide them into two groups\n    # with each group having at least 1 cupcake and a different number of cupcakes,\n    # she can give 1 cupcake to one group and 9 to the other,\n    # or 2 to one group and 8 to the other, and so on up to 5 to one group and 5 to the other.\n    # However, since each group must have a different number of cupcakes, the option of 5 and 5 is not allowed.\n    # Therefore, there are 9 possible ways to divide the cupcakes (from 1-9, 2-8, ... up to 4-6).\n\n    # The formula for the number of ways to divide n cupcakes into two groups with different amounts is:\n    # (n - 1) ways\n\n    ways = (10 - 1)\n    return ways\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    a = 28\n    b = 84\n    c = 126\n\n    greatest_common_divisor = gcd(gcd(a, b), c)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    complete_boxes = total_eggs // eggs_per_box\n    \n    return complete_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $5 notes be x and $10 notes be y\n    x, y = symbols('x y')\n\n    # Equation for total number of notes\n    equation1 = Eq(x + y, 57)\n\n    # Equation for the number of notes left after spending\n    equation2 = Eq(y - 0.6 * y, 2 * (x - 0.25 * x))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total cost of the bag\n    cost_bag = 0.6 * solutions[y] * 10 + 0.25 * solutions[x] * 5\n\n    return cost_bag\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_winnings = 12018\n    jasmine_winnings = 309\n    total_winnings = neha_winnings + jasmine_winnings\n    return total_winnings\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # initial condition: Troy had 5 times as many coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n\n    # after taking 24 more coins, Adam had 1/3 as many as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # calculate the total number of coins they had at first\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1,10):\n        for tens in range(0,10):\n            for ones in range(0,10,2): # Even number, so only check even digits for ones place\n                if hundreds + tens + ones == 8 and len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Hanson had initially\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, he has 3/4x - 3 left\n    remaining_after_CDs = (3/4)*x - 3\n\n    # Then he spends 3/5 of the remaining money plus an extra $6\n    # After which $24 is left, so we have the equation: (2/5)(3/4x - 3) - 6 = 24\n    equation = Eq((2/5)*remaining_after_CDs - 6, 24)\n\n    # Solve the equation to find the amount of money Hanson had initially\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    fraction1 = 1 / 4\n    number1 = 16\n    fraction2 = 1 / 2\n\n    missing_number = (fraction1 * number1) / fraction2\n\n    return int(missing_number)\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst case: Darrell draws all blue and all white beads first\n    blue_beads = 5\n    white_beads = 6\n    # To ensure 5 green beads, Darrell might have to draw all but 4 of the green beads\n    green_beads_needed = 5\n    green_beads_to_avoid = 8 - green_beads_needed + 1 # +1 as he needs to draw one more to ensure the 5th green bead\n    \n    # Total beads to draw to guarantee 5 green beads in worst case\n    beads_to_draw = blue_beads + white_beads + green_beads_to_avoid\n    \n    return beads_to_draw\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a, 2 * b)\n    equation2 = Eq(1/a, 1/(2*b) + 1/12)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    work_rate_a = solutions[a]\n    work_rate_b = solutions[b]\n\n    combined_rate = work_rate_a + work_rate_b\n    days_to_complete = 1 / combined_rate\n\n    return days_to_complete\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    last_term = 58\n\n    # Using the formula for the nth term of an arithmetic sequence to find n: an = a1 + (n-1)d\n    # 58 = 2 + (n-1) * 4\n    # Solving for n gives us:\n    n = (last_term - first_term) / common_difference + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Initially, each group contains 4 people.\n    group_size = 4\n    # Each group has a single round-robin tournament in which each contestant plays every other contestant once.\n    games_per_group = group_size * (group_size - 1) // 2\n    # There are 4 groups, so the total games in the group stage are:\n    group_games_total = games_per_group * 4\n\n    # After the group stage, 2 winners advance from each group, making it a total of 8 contestants.\n    # From this point, a single-elimination tournament is held, which has a structure like:\n    # Quarter finals: 4 games (8 -> 4 winners)\n    # Semi finals: 2 games (4 -> 2 winners)\n    # Finals and 3rd place match: 2 games (deciding 1st/2nd and 3rd/4th winner)\n    knockout_games_total = 8 - 1\n\n    # Total games played are the sum of the group stage games and the knockout games.\n    total_games_played = group_games_total + knockout_games_total\n\n    return total_games_played\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Rachel and Alice's candies\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: After giving 10 candies, Rachel and Alice have the same amount.\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: If Alice gives Rachel 10 candies, Rachel will have 4 more than 3 times Alice's candies.\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9 # total number of potted plants\n    r = 4 # number of plants to arrange in a row\n    arrangements = factorial(n) // factorial(n - r)\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    stickers_initial = stickers_end - stickers_bought + stickers_given_away\n    return stickers_initial\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    for perm in permutations(digits):\n        if perm[0] != '8':  # The leftmost digit must be 8\n            continue\n        number = ''.join(perm)\n        if all(int(number[:i]) % i == 0 for i in range(2, 11)):\n            return int(number)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave_away = 7\n\n    matthew_tomatoes = belinda_tomatoes - belinda_gave_away\n    matthew_initial = matthew_tomatoes - belinda_gave_away\n    \n    return matthew_initial\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_efficiency = 0.5\n    new_rate = original_rate * (1 + increased_efficiency)\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Find the greatest common divisor (GCD) for the difference of the two numbers\n    from math import gcd\n    D = gcd(2012 - 1274, 2012)\n    \n    # R equals to the remainder when either number is divided by D\n    R = 2012 % D\n    \n    # Return the largest possible value of D - R\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # assuming r is the number of rabbits and d is the number of ducks\n    # we know that \n    # r + d = 7 (total number of animals)\n    # 4r + 2d = 20 (total number of legs, since rabbits have 4 legs and ducks have 2)\n    # we can solve these equations to find the number of rabbits (r)\n\n    for r in range(8):  # since there are at most 7 animals, r can be from 0 to 7\n        d = 7 - r\n        if (4 * r + 2 * d) == 20:\n            return r\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5/7) * initial_amount\n    remaining_after_grace = initial_amount - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_amount = remaining_after_grace - given_to_evelyn\n\n    return remaining_amount\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    win_positions = [False] * 53  # Array to hold the winning positions\n    win_positions[0] = True  # Base case: if there are no numbers left, the current player wins\n    \n    # The numbers that can be written are 1, 3, 4, 6\n    moves = [1, 3, 4, 6]\n    \n    # Calculate the winning positions based on the possible moves\n    for i in range(1, 53):\n        for move in moves:\n            if i >= move and not win_positions[i - move]:\n                win_positions[i] = True\n                break\n    \n    # Determine if Betty can win by going first\n    can_win_by_going_first = win_positions[52]\n    \n    # If Betty can win by going first, her strategy is to always move to a non-winning position for Abby\n    strategy = \"\"\n    if can_win_by_going_first:\n        strategy = \"Betty should go first and always write enough numbers to leave a non-winning number for Abby.\"\n    else:\n        strategy = \"Betty should go second and leave non-winning numbers for Abby.\"\n\n    return {'Betty_should_go': 'first' if can_win_by_going_first else 'second', 'strategy': strategy}\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt\n\n    # Since 15 and 21 are factors of the number, their greatest common divisor (gcd)\n    # is also a factor, and their least common multiple (lcm) is the number itself or a multiple of it.\n    gcd = 3  # gcd of 15 and 21\n    lcm = 105  # lcm of 15 and 21\n\n    # The integer has 8 factors, which means it has the form p^3, pq, or pqr (p, q, r are primes).\n    # Since 15 and 21 share a common factor, the number cannot be a prime raised to the third power.\n    # We check if the lcm is the number itself (which would mean the form is pq).\n    # If not, the form must be pqr, and the lcm must be divisible by the number.\n\n    # Check if lcm has more than 3 prime factors (excluding 1 and itself)\n    prime_factors_count = 0\n    number = lcm  # Initialize number as lcm\n    for i in range(2, int(sqrt(lcm)) + 1):\n        if lcm % i == 0:\n            prime_factors_count += 1\n            # lcm is divisible by i, so divide it to find the next prime factor\n            while lcm % i == 0:\n                lcm //= i\n            # If lcm is still divisible by a prime, increment counter\n            if lcm != 1:\n                prime_factors_count += 1\n    # If more than 3 factors are found, then the number is of the form pqr and is a divisor of the lcm.\n    # Adjust the number to be the greatest divisor of the lcm that has exactly 8 factors.\n    if prime_factors_count > 3:\n        number = number // gcd\n\n    # For a number to have exactly 8 factors, it must be in the form of p^3 or p*q (where p and q are primes).\n    # Since the lcm is a multiple of both 15 and 21, and it is the smallest number that is a multiple\n    # of both, we consider it as p*q.\n    # We find all factors of the number.\n    factors = set()\n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    # Calculate the sum of all factors.\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_of_4 = 4**(2009 % 4) % 10\n    last_digit_of_6 = 6**(2010 % 4) % 10\n    \n    # Note: 6^n always ends with 6 as the last digit, for n > 0\n    # Thus, last_digit_of_6 is certain to be 6 without other calculations\n\n    ans = (last_digit_of_4 + last_digit_of_6) % 10\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    total_weight = 63\n    two_gram_weights = 0\n    five_gram_weights = total_weight // 5\n    count = 0\n\n    while five_gram_weights * 5 >= 0:\n        if (total_weight - (five_gram_weights * 5)) % 2 == 0:\n            count += 1\n        five_gram_weights -= 1\n\n    return count\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    \n    total_height_of_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_two_players = total_height_of_two_players / 2\n\n    return average_height_of_two_players\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n    \n    # If only A and C are turned on, A provides 18 tons\n    equation1 = Eq(A + C, A + 18)\n    # If only B and C are turned on, B provides 27 tons\n    equation2 = Eq(B + C, B + 27)\n    # B's flow rate is twice that of A\n    equation3 = Eq(B, 2 * A)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Total capacity is the sum of water provided by A and C or B and C\n    total_capacity = solutions[A] + solutions[C] + solutions[B]\n    \n    return total_capacity\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    for correct in range(25):\n        incorrect = 24 - correct\n        if correct * 4 - incorrect * 2 == 66:\n            return correct\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # a is the first term, d is the common difference of the arithmetic sequence\n    a, d = symbols('a d')\n    \n    # The sum of an arithmetic sequence can be calculated by the formula:\n    # S_n = n/2 * (2*a + (n - 1)*d) where S_n is the sum of the first n terms\n    \n    # Equation for the sum of the first 8 terms being 32\n    equation1 = Eq(8 / 2 * (2 * a + (8 - 1) * d), 32)\n    \n    # Equation for the sum of the first 22 terms being 44\n    equation2 = Eq(22 / 2 * (2 * a + (22 - 1) * d), 44)\n    \n    # Solve the system of equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Extract the solutions for a and d\n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    # Now calculate the sum of the first 15 terms\n    sum_15 = 15 / 2 * (2 * a_val + (15 - 1) * d_val)\n\n    return sum_15\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) * 2 - 20\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 5 colors to choose from for the first letter,\n    # 4 remaining colors for the second letter,\n    # 3 remaining colors for the third letter,\n    # 2 remaining colors for the fourth letter.\n    # The number of ways to paint each letter is distinct,\n    # so we apply the multiplication principle.\n    ans = factorial(5) // factorial(5 - 4)\n\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    # Assuming the age is between 10 and 99 as we are talking about two digits.\n    for age in range(10, 100):\n        # Interchange the digits.\n        reversed_age = int(str(age)[::-1])\n        # Check if the condition meets: reversed age + 1 is half of the original age.\n        if (reversed_age + 1) * 2 == age:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Starting at 1 meatball per student, increase incrementally\n    meatballs_per_student = 1\n    \n    while True:\n        # Calculate total meatballs given the current amount per student\n        # Additional student also gets meatballs_per_student meatballs\n        total_meatballs = (meatballs_per_student + 20) + (meatballs_per_student + 10)\n        \n        # Check if the total is divisible by the meatballs per student giving no remainder\n        if total_meatballs % meatballs_per_student == 0:\n            break\n        \n        # If not divisible, increase the count and try again\n        meatballs_per_student += 1\n\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_amount * increase_fraction\n\n    ans = original_amount + increase_amount\n\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_questions = symbols('total_questions')\n    \n    # On the 1st day, he completed 7 more than half of all the questions.\n    day1 = total_questions / 2 + 7\n    \n    # On the 2nd day, he completed 5 fewer than half of the remaining questions.\n    remaining_after_day1 = total_questions - day1\n    day2 = remaining_after_day1 / 2 - 5\n\n    # On the 3rd day, he finished the remaining 23 questions.\n    day3 = 23\n    \n    # Equation representing the total number of questions completed over the three days\n    equation = Eq(day1 + day2 + day3, total_questions)\n    \n    # Solve the equation for total number of questions\n    solutions = solve(equation, total_questions)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    ans = fraction_value > decimal_value\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_volume_ml = 1000  # 1 litre = 1000 ml\n    cup_volume_ml = 200   # Each cup is filled with 200 ml\n    number_of_cups = 3    # There are 3 cups\n\n    used_volume_ml = cup_volume_ml * number_of_cups\n    remaining_volume_ml = jug_volume_ml - used_volume_ml\n\n    return remaining_volume_ml\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    twelfth_number = tenth_number + (12 - 10) * common_difference\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    first_test_score = 0.20 * 10    # 20% of 10 problems\n    second_test_score = 0.80 * 20   # 80% of 20 problems\n    third_test_score = 0.90 * 30    # 90% of 30 problems\n\n    total_score = first_test_score + second_test_score + third_test_score\n    total_problems = 10 + 20 + 30\n\n    overall_percentage = (total_score / total_problems) * 100\n\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Side length of the large square bricks in centimeters\n    side_length_large = 6 * 10  # decimeters to centimeters\n    area_large = side_length_large**2  # Area of one large brick\n\n    # Total area covered by the 80 large bricks\n    total_area = area_large * 80\n\n    # Area of one small brick in square centimeters\n    area_small = 64\n\n    # Calculating the number of small bricks needed\n    number_of_small_bricks = total_area / area_small\n\n    return int(number_of_small_bricks)\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '134578'\n    max_number = 0\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 11 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the price of a bottle of water and a bag of fruit as symbols\n    bottle, bag = symbols('bottle bag')\n    \n    # Equation 1: The total cost of 2 bottles of water and 3 bags of fruit\n    equation1 = Eq(2 * bottle + 3 * bag, 2.55)\n\n    # Equation 2: A bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(bottle, bag + 0.15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bottle, bag))\n    \n    return solutions[bag]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    for i in range(2, 91):\n        if 91 % i == 0:\n            return (i, 91 // i)  # returns a tuple with the factors proving it's not prime\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_pupils = 500\n\n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, total_pupils)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n    while boys - girls < 31:\n        layer += 1\n        if layer % 2 == 1:\n            boys += layer * 4 - 4 if layer > 1 else 1\n        else:\n            girls += layer * 4 - 4\n        total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of roses and d be the initial number of daisies.\n    r, d, m = symbols('r d m')\n\n    # Total number of flowers initially (r + d = 300)\n    equation1 = Eq(r + d, 300)\n\n    # After m months, there are 280 roses (r + m = 280)\n    equation2 = Eq(r + m, 280)\n\n    # After m months, there are 180 daisies (d + m = 180)\n    equation3 = Eq(d + m, 180)\n\n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2, equation3), (r, d, m))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "from math import log10\n\ndef solution():\n    # 2018 instances of 4\n    exponent_4 = 2018\n    # 2018 instances of 25\n    exponent_25 = 2018\n    \n    # log10(4^2018) = 2018 * log10(4)\n    log4 = exponent_4 * log10(4)\n    # log10(25^2018) = 2018 * log10(25)\n    log25 = exponent_25 * log10(25)\n    \n    # A = 4^2018 * 25^2018\n    # log10(A) = log10(4^2018) + log10(25^2018)\n    logA = log4 + log25\n    \n    # Number of digits is the integer part of log10(A) + 1\n    num_digits = int(logA) + 1\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    return sum(1 for i in range(1, 251) if i**0.5 == int(i**0.5))\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    return comb(total_players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    \n    # Calculate the cost price based on the profit made\n    cost_price = selling_price / (1 + profit_percentage / 100)\n    \n    # Now with a different scenario profit of $5000\n    new_selling_price = cost_price + 5000\n    \n    # Calculate the new profit percentage\n    new_profit_percentage = ((new_selling_price - cost_price) / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let x be the total number of apples Mr. Aziz had originally.\n    # Mr. Aziz sold 1/5 of the apples on Monday, so he had 4/5 left.\n    # He then sold 80 apples on Tuesday.\n    # In the end, he was left with 30% of the apples he had at first, which is 30/100 or 3/10 of x.\n    # Therefore, we can set up the equation: (4/5 * x) - 80 = (3/10 * x).\n    # Solving for x gives us the original number of apples.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((4/5 * x) - 80, (3/10 * x))\n    original_apples = solve(equation, x)\n\n    # Calculate the number of apples Mr. Aziz had in the end, which is 3/10 of the original number of apples.\n    apples_in_end = (3/10) * original_apples[0]\n\n    return apples_in_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    # Emily is directly behind Danny, so we count them as two additional people\n    people_altogether = people_in_front_of_emily + people_behind_danny + 2\n    \n    return people_altogether\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Given that the numbers are consecutive even numbers, we can represent them as\n    # x, x+2, x+4, x+6, x+8, x+10, x+12\n    # The fourth number is x+6\n    # The sum of the first and seventh numbers is x + (x + 12)\n    \n    # Expression for the condition: x+6 is 6 more than one-third of (x + (x+12))\n    equation = Eq(x+6, (1/3)*(x + (x + 12)) + 6)\n\n    # Solve the equation\n    solution_x = solve(equation, x)[0]\n\n    # The sum of these seven consecutive even numbers: x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) + (x+12)\n    sum_seven_numbers = solution_x*7 + (2+4+6+8+10+12)\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n    length_each_piece = total_length / num_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = (3 / 4) * remainder_cookies\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometres = 1.5\n    metres = kilometres * 1000\n    return metres\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum_of_9_numbers = 140 * 9\n    sum_of_8_numbers = total_sum_of_9_numbers - 180\n    average_of_8_numbers = sum_of_8_numbers / 8\n\n    return average_of_8_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    red = 28\n\n    # Ben has twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    # and 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n\n    solutions = solve((equation1, equation2, equation3), (purple, yellow, white))\n\n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + red\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n\n    total_markers = red_markers + blue_markers + green_markers\n\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Calculate the number of trees on one side, including both ends\n    trees_on_one_side = (length_of_highway // distance_between_trees) + 1\n    \n    # Calculate the total number of trees on both sides of the highway\n    total_trees = trees_on_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n    n_term = 20\n    \n    nth_odd_number = first_odd_number + (n_term - 1) * common_difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_multiplier = 5\n    remaining_rings = 65\n\n    total_rings = johnny_rings + (amber_multiplier * johnny_rings) + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_paid = lily_book_price + amy_book_price\n    return round(total_paid, 2)\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_angles = (sides - 2) * 180\n    interior_angle = sum_of_angles / sides\n\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total_sum = sum(int('5' * i) for i in range(1, 21))\n    ans = total_sum % 10000  # get the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    men_for_one_wall = 2\n    days_for_one_wall = 3\n    work_per_man = 1 / (men_for_one_wall * days_for_one_wall)\n\n    def time_to_build(x_walls, y_men):\n        total_work = x_walls / (y_men * work_per_man)\n        return total_work\n\n    return time_to_build\n\nans = solution()(x=1, y=1)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1 / 5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    for checked_shirts in range(1, 72):\n        white_shirts = 7 * checked_shirts\n        if white_shirts + checked_shirts == 72:\n            return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_num = 0\n    for num in range(999, 100, -1):  # Start from the greatest 3-digit number\n        if num % 2 != 0 and num % 9 == 0:  # Check if the number is odd and divisible by 9\n            tens_digit = (num // 10) % 10  # Extract the tens digit\n            if tens_digit % 4 == 0:  # Check if the tens digit is divisible by 4\n                greatest_num = num\n                break  # Exit the loop once the greatest number is found\n    return greatest_num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Your question is missing the pattern or the value we need to find.\n    # Please provide the complete pattern or the exact value that needs to be evaluated.\n    # Once the missing information is provided, I can help you solve it with Python.\n    pass  # Placeholder for the actual code once the complete information is provided\n\n# Placeholder for the final answer once the complete information is provided\nans = None"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Worst case scenario is when you draw all balls of different colors without repeating any color.\n\n    # You can draw all 7 red balls and still not guarantee that you have 2 balls of the same color.\n    # You can then draw all 5 green balls and still not guarantee 2 balls of the same color.\n    # After drawing one more ball (which must be white in this case), you will have guaranteed to have 2 balls\n    # of the same color - 2 white balls at least.\n\n    # Therefore, we add 1 to the total count of red and green balls to calculate the minimum number of draws.\n    red_balls = 7\n    green_balls = 5\n\n    # Minimum draws to guarantee 2 balls of the same color\n    min_draws = red_balls + green_balls + 1 \n    \n    return min_draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(boys + girls, 390)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    candidates = [i for i in range(60) if all((i % 4 == 3, i % 5 == 4, i % 6 == 5))]\n    if candidates:\n        return candidates[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    total_yearly_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_monthly_spending = total_yearly_spending / 12\n\n    return average_monthly_spending\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = (three_quarters_of_number * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick_rate = 24 / 5\n    total_kg_picked = daily_pick_rate * 8.5\n    return total_kg_picked\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # 2% less than the previous volume, so k is 1 - 2/100\n    return k\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_when_tom_reaches_fathers_age = 70\n    age_difference = father_age_when_tom_reaches_fathers_age - tom_age_now\n    father_age_now = tom_age_now + age_difference\n    \n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of votes each candidate received\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Equation 1: Total number of votes\n    equation1 = Eq(jordan + evie + emily, 400)\n    # Equation 2: Jordan got 3 times as many votes as Emily\n    equation2 = Eq(jordan, 3 * emily)\n    # Equation 3: Evie got 20 fewer votes than Jordan\n    equation3 = Eq(evie, jordan - 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    # Return the number of votes Evie got\n    return solutions[evie]\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n\n    return temperature_drop\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime.strptime('07:35', '%H:%M')\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    \n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    for N in range(1, 200):\n        sum_digits_base_4 = sum(int(digit) for digit in format(N, 'b'))\n        sum_digits_base_6 = sum(int(digit) for digit in format(N, 'o'))\n        sum_digits_base_8 = sum(int(digit) for digit in format(N, 'x'))\n        \n        if sum_digits_base_4 == 5 and sum_digits_base_6 == 8 and sum_digits_base_8 == 9:\n            return N\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    first_digit_options = 2  # Can only be 2 or 3, not 0\n    second_digit_options = 3  # Can be 0, 2, or 3\n    third_digit_options = 3  # Can be 0, 2, or 3\n\n    total_ways = first_digit_options * second_digit_options * third_digit_options\n    return total_ways\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_for_6_hotdogs = 1.10\n    cost_for_12_hotdogs = cost_for_6_hotdogs * 2\n    return cost_for_12_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    total_pence = 200  # £2 is equal to 200 pence\n    price_per_bag = 16  # Each bag costs 16 pence\n\n    ans = total_pence // price_per_bag  # Using floor division to get the number of full bags that can be bought\n\n    return ans\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Chip and Dale's initial acorns\n    chip, dale = symbols('chip dale')\n\n    # Equation 1: Chip gave 14 acorns to Dale\n    equation1 = Eq(chip - 14, dale + 14)\n\n    # Equation 2: The total number of acorns is 124\n    equation2 = Eq(chip + dale, 124)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (chip, dale))\n\n    # Return the number of acorns Chip had originally\n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6     # Number of fiction books\n    comic_books = 2       # Number of comic books\n    \n    # Calculate the number of arrangements using the formula for permutations of identical items\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0:\n            sqrt_num = num ** 0.5\n            if sqrt_num.is_integer():\n                return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    target_sum = 51\n    answer = 0\n    # Since 2 is the smallest prime number, we initiate our calculation\n    # with the largest number of 2s that can sum up to a number less than or equal to 51\n    count_of_2s = target_sum // 2\n    \n    # Now we check if by removing a pair of 2s (equals 4) and adding a 5 \n    # (the next prime number after 2) results in a sum less or equal to 51.\n    # We keep doing this until we can't replace pairs of 2s with 5.\n    while (count_of_2s * 2 + 5 * (answer // 2) <= target_sum) and (count_of_2s > 1):\n        answer += 1 # The number of 5s needed replace pair of 2s\n        count_of_2s -= 2\n    \n    # Once we can no longer replace pairs of 2s with 5s, we add the remaining count\n    # of 2s to our answer.\n    answer += count_of_2s\n    \n    return answer\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Let x represent the cost of one CD\n    total_cost = 8 * x  # Total cost for 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    return solve(equation, x)[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([-x if x % 2 == 1 else x for x in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02  # 2% interest rate\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        total_written_pages = 3 * three_page_letters + 4 * four_page_letters\n        \n        if total_written_pages == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apple_pie_kg = 750 / 1000\n    apple_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (apple_pie_kg + apple_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    return 9 + 1 + (15 - 1)\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    growth_duration_weeks = 4\n\n    total_growth = final_height - initial_height\n    growth_per_week = total_growth / growth_duration_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Drawing all balls of two colors plus one ball ensures 3 different colors\n    balls_to_draw = 2 * 5 + 1\n    return balls_to_draw\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of the shorter piece\n    x = symbols('x')\n    \n    # According to the problem, the longer piece is twice as long as the other (shorter) piece 2*x\n    # The total length of the ribbon is the sum of both pieces, which is 12.75 m\n    equation = Eq(x + 2*x, 12.75)\n    \n    # Solving the equation for x\n    shorter_piece_length = solve(equation, x)[0]\n    \n    # The length of the longer piece is twice the length of the shorter piece\n    longer_piece_length = 2 * shorter_piece_length\n    \n    return longer_piece_length\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # If her favorite book is the 14th from the left and there are 6 books to the right of it,\n    # that means there are 13 books to the left of her favorite book.\n    books_to_left_of_favorite = 14 - 1\n    \n    # Including her favorite book, we add the 6 books to the right\n    total_books = books_to_left_of_favorite + 1 + 6\n    \n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # grams\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins_received = symbols('gigi lily coins_received')\n\n    equation1 = Eq(gigi, 120 + coins_received)\n    equation2 = Eq(lily, 24 + coins_received)\n    equation3 = Eq(gigi, 3 * lily)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins_received))\n\n    return solutions[coins_received]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    total_cards = 20\n    prime_cards = len(primes)\n    non_prime_cards = total_cards - prime_cards\n\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Brian's age at his 14th birthday\n    brian_age = 14\n    # Father's age at Brian's 14th birthday\n    father_age = 41\n\n    # Difference in ages between Brian and his father\n    age_difference = father_age - brian_age\n\n    # Loop until we find the next age reversal\n    while True:\n        # Increment their ages\n        brian_age += 1\n        father_age += 1\n\n        # Reverse Brian's age to check against his father's age\n        reversed_age = int(str(brian_age)[::-1])\n\n        if father_age == reversed_age:\n            # Return Brian's age when their ages are reversed\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Hundreds place, odd numbers only\n        for j in range(10):    # Tens place\n            for k in range(10):  # Ones place\n                if (i + j + k) == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # You can boil all 3 eggs at the same time, so it will take the same time as boiling one egg\n    time_to_boil_one_egg = 5  # minutes\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n\n    num_cabins = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n\n    return num_cabins\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be 'a' and the common difference be 'd'.\n    a, d, n = symbols('a d n', integer=True)\n    \n    # First four terms: a, a+d, a+2d, a+3d\n    # Sum of first four terms: 4a + 6d = 124\n    sum_first_four = Eq(4 * a + 6 * d, 124)\n    \n    # Last four terms: a+(n-4)d, a+(n-3)d, a+(n-2)d, a+(n-1)d\n    # Sum of last four terms: 4a + 4nd - 10d = 156\n    sum_last_four = Eq(4 * a + 4 * n * d - 10 * d, 156)\n\n    # S_n = n/2 * (2a + (n-1)d)\n    # Sum of all terms: n * a + n*(n-1)/2 * d = 210\n    sum_all_terms = Eq(n * a + n * (n - 1) * d / 2, 210)\n    \n    # Solve the system of equations\n    solutions = solve((sum_first_four, sum_last_four, sum_all_terms), (a, d, n))\n    count = 0\n    for sol in solutions:\n        if all(value.is_real for value in sol) and sol[n] > 0:\n            count += 1\n            ans = sol[n]\n    return ans\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_g = 11160  # Convert kg to g for easier calculations\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    total_cookies = 240\n    total_brownies = 2\n\n    dough_used_for_cookies = cookie_dough_g * total_cookies\n    dough_used_for_brownies = brownie_dough_g * total_brownies\n\n    total_dough_used_g = dough_used_for_cookies + dough_used_for_brownies\n    remaining_dough_g = total_dough_g - total_dough_used_g\n    remaining_dough_kg = remaining_dough_g / 1000  # Convert back to kg\n\n    return round(remaining_dough_kg, 2)\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # variable for calories taken in today\n    calories_today = symbols('calories_today')\n\n    # inequality representing Dan can take fewer calories than yesterday\n    inequality = calories_today < 1000\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Inverse of eating half of the remaining biscuits and 2 less\n    before_second_day = (remaining_biscuits + 2) * 2\n    # Inverse of eating half of all the biscuits and 4 more\n    total_biscuits = (before_second_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    days = 15\n    balance = 100\n    # Increment amounts for days with deposits and expenditures\n    deposit = 5\n    spend = 8\n\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Odd days (deposit days)\n            balance += deposit\n        else:  # Even days (spend days)\n            balance -= spend\n            \n    return balance\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]  # The repeating pattern\n    pattern_length = len(pattern)   # Length of the pattern\n\n    # Find the position of the number in the last cycle by taking modulus \n    position_in_pattern = (1004 % pattern_length) - 1\n\n    # If the position is -1, it means the 1004th number is the last in the pattern\n    if position_in_pattern == -1:\n        position_in_pattern = pattern_length - 1\n\n    # Return the number at the calculated position\n    return pattern[position_in_pattern]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    num_children = 5\n    wine_gums_per_child = total_wine_gums / num_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 7 + 10 + 13 + 16 + 19\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - friends * 18, 41)\n    equation2 = Eq(chocolates - friends * 23, -34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    remaining = solutions[chocolates] - solutions[friends] * 20\n\n    return remaining\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from itertools import combinations\n    from math import sqrt\n\n    # Function to check if the number is a perfect square\n    def is_perfect_square(n):\n        return sqrt(n).is_integer()\n\n    # Function to check if the sum of the digits equals 17\n    def sum_of_digits_is_17(n):\n        return sum(map(int, str(n))) == 17\n\n    # Loop through all 3-digit numbers\n    for number in range(100, 1000):\n        truths = [\n            number % 27 == 0,\n            number % 7 == 0,\n            sum_of_digits_is_17(number),\n            is_perfect_square(number),\n            89100 % number == 0\n        ]\n        # Check all combinations of three statements being true\n        for combo in combinations(truths, 3):\n            # If there are exactly three true statements and the other two are false\n            if sum(combo) == 3 and sum(truths) == 3:\n                return number\n                \nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_book = 0.15 * total_money\n    remaining_after_book = total_money - spent_book\n    spent_dvd = 0.30 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let 'm' represent the number of push-ups Mulan can do.\n    # According to the problem, Mulan can do more push-ups than the best boy soldier, who can do 50.\n    # Therefore, the inequality representing this situation is m > 50.\n    # Since we only need to return the inequality in some form, we can simply return it as a string.\n    return \"m > 50\"\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    initial_balloons = 40\n    blown_up = 22\n    burst = 3\n    remaining = initial_balloons - (blown_up - burst)\n\n    return remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # assuming the variable 'games_played' holds the number of games played and\n    # 'total_teams' holds the total number of teams in the tournament\n    total_teams = 32\n    games_played = 25\n\n    # In a knockout tournament, the number of games to be played is total_teams - 1\n    total_games = total_teams - 1\n\n    # The number of games left to be played\n    games_left = total_games - games_played\n    \n    return games_left\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Assigning the minimum number of candies to each child so they all get different amounts\n    # The sequence starts at 1 candy and increases by 1 for each child\n    candies = [i for i in range(1, 8+1)]\n    \n    # Calculate the total number of candies given away so far\n    current_total = sum(candies)\n\n    # Number of remaining candies to be distributed\n    remaining_candies = 88 - current_total\n\n    # The child who gets the most pieces will get the remaining candies plus his/her initial piece\n    most_pieces = candies[-1] + remaining_candies\n\n    return most_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Initial amounts in stacks A and B\n    stack_A = 20\n    stack_B = 20\n    \n    # Tom takes 4 stones from Stack B\n    stack_B -= 4\n\n    # To ensure a win, Jerry must take stones so that the number of stones in both stacks is equal\n    # because this will force Tom into a losing position no matter what he does next\n    stones_to_take = abs(stack_A - stack_B)\n\n    # Identify the stack from which Jerry should take the stones\n    stack_to_take_from = 'A' if stack_A > stack_B else 'B'\n    \n    return stones_to_take, stack_to_take_from\n\n# Assign the correct information to ans\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    midpoint = (15 + 37) / 2\n    return midpoint\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    volume_per_pail = 4\n    num_pails = 4\n    water_left = 7\n\n    original_volume = (volume_per_pail * num_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and the number of boys be 9x\n    # According to the problem, there are 16 more boys than girls\n    # Therefore, 9x - 7x = 16\n    x = 16 / 2  # solving for x\n\n    # Total number of pupils is the sum of girls and boys\n    total_pupils = 7 * x + 9 * x\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate the expected sum of the sequence if no mistakes were made\n    expected_sum = sum(1 + 3 * i for i in range(37))\n    \n    # The difference between the expected sum and actual sum will give us twice the number of the mistaken number\n    difference = expected_sum - 2011\n    \n    # Since the mistake was made by subtracting 3 instead of adding, the mistaken number is half of the difference\n    mistaken_number = difference // 2\n    \n    # Find who made the mistake by matching the mistaken number with the correct sequence\n    for i in range(37):\n        if 1 + 3 * i == mistaken_number:\n            return i + 1  # Adding 1 because the count starts from 1 not 0\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    number_of_trees = circumference // interval\n    return number_of_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_for_one_batch = 10\n    shortcakes_in_one_batch = 12\n    liz_milk_used = 25\n\n    liz_shortcakes_made = (liz_milk_used / milk_for_one_batch) * shortcakes_in_one_batch\n\n    return int(liz_shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    sum_of_balls = 160\n    number_of_students = 5\n\n    # Since the numbers are consecutive, for n numbers, the middle number is the average\n    # The sum divided by the number of students gives us the middle number\n    middle_number = sum_of_balls / number_of_students\n\n    # The largest number will be two steps away from the middle number (for five consec. numbers)\n    max_balls = middle_number + 2\n\n    return int(max_balls)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place cannot be 0\n        for ones in range(10):     # ones place could be from 0 to 9\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = ones * 100 + hundreds\n                ans = reversed_M // S\n                return ans\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    length_of_stick_cm = 2 * 100  # Convert 2 meters to centimeters\n    piece_length_cm = 6\n    num_pieces = length_of_stick_cm // piece_length_cm  # Use floor division for complete pieces\n    return num_pieces\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    \n    return comb(total_balls, balls_to_select)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    a = b = c = 0\n\n    # We want to find a, b, c such that 13/10 = 1 + 1/(a + 1/(b + 1/c))\n\n    # Start from 13/10 - 1 = 3/10\n    remaining = 3 / 10\n\n    # Find a by taking the reciprocal of remaining and flooring it\n    a = int(1 / remaining)\n\n    # Calculate the remaining part after removing a\n    remaining = 1 / (remaining - a)\n\n    # Find b by taking the reciprocal of remaining and flooring it\n    b = int(1 / remaining)\n\n    # Calculate the remaining part after removing b\n    remaining = 1 / (remaining - b)\n\n    # c is the remaining value after b, since we only have 3 variables\n    c = int(remaining)\n\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # The ones digit of a number in the form 8^n repeats every 4 powers: 8, 4, 2, 6, ...\n    # Since 30 is a multiple of 4, the ones digit will be the same as the one of 8^2\n    return (8**2) % 10\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n    days_spent = total_pages / average_pages_per_day\n    \n    return int(days_spent)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n    total_points = 52\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        points = correct * points_correct + incorrect * points_incorrect\n        if points == total_points:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    total_peaches = 100\n    # The monkey eats at least one peach a day\n    # So we start with day 1 eating 1 peach, day 2 eating 2 peaches, etc.\n    # until we can't add another day without making the total go over 100.\n    while (days + 1) * (days + 2) / 2 <= total_peaches:\n        days += 1\n    return days\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    # The given sequence is an arithmetic sequence\n    first_term = 10\n    common_difference = 5\n\n    # Finding the number of terms in the arithmetic sequence\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference\n    # Solving 155 = 10 + (n - 1) * 5 for n\n    last_term = 155\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    sum_of_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    result = (0.3 * 100) / (150)\n    return result\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    total_trees = 100\n    difference = 12\n\n    # Let x be the number of trees planted by boys\n    # Then, girls planted x + 12 trees\n    # The sum of trees planted by boys and girls is 100\n    # So we have the equation: x + (x + 12) = 100\n\n    # Solving for x gives us the number of trees planted by boys\n    boys_trees = (total_trees - difference) / 2\n\n    return int(boys_trees)\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 21):\n        if num % 6 == 1:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # total weight of the sugar solution\n    sugar_concentration = 0.48  # sugar concentration in decimal form\n    sugar_weight = total_weight * sugar_concentration  # weight of sugar\n    water_weight = total_weight - sugar_weight  # weight of water\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest be x.\n    # The ages of the youngest three would then be x, x+1, and x+2.\n    # Their sum is given by: x + (x+1) + (x+2) = 42\n    \n    # Solve for x:\n    x = (42 - 3) // 3  # Subtract 3 because we added 1 and 2 to x, then divide by 3 to find x.\n\n    # Now, the ages of the oldest three dwarfs would be x+4, x+5, and x+6\n    # We just need to calculate the sum of these ages:\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # Since we know that abcd is simply the decimal\n    # representation of the digits, we can rewrite the equation in terms of a, b, c, and d\n    # as follows: 1000a+100b+10c+d + 100a+10b+c + 10a+b + a = 1370\n    # That means we can combine like terms to find that:\n    # 1111a + 111b + 11c + d = 1370\n    \n    # The fastest way to solve this is by trying values of 'a' from 1 to 9 (since a cannot be zero)\n    # and then see if the rest of the equation gives integers for b, c, and d\n    \n    for a in range(1, 10):\n        remaining = 1370 - 1111*a\n        if remaining > 0:\n            for b in range(10):\n                remaining_bc = remaining - 111*b\n                if remaining_bc >= 0 and remaining_bc < 110:  # As 11c can at max be 99\n                    for c in range(10):\n                        d = remaining_bc - 11*c\n                        if 0 <= d < 10: # d must be a single digit\n                            return 1000*a + 100*b + 10*c + d\n    return None\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    mean_goals = total_goals / len(scores)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractions_sum = sum([(19 * 10**i + 4/5) for i in range(5)])\n    return fractions_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n    answer = total_pence * fraction\n    return answer\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    target_total_age = 35\n    years_needed = target_total_age - current_total_age\n\n    return years_needed\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the dad and the son\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Equation 1: Six years ago, the dad was 5 times older than the son\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    \n    # Equation 2: The sum of the current ages of dad and son is 78 years\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    # Since we want the dad's current age\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(1/i for i in range(1, 9) for _ in range(i))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    \n    solutions = solve((equation1, equation2), (terry, gerald))\n    \n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    # Let the total number of sweets be x.\n    # According to the problem:\n    # Number of milk chocolates is (3/4) * x\n    # Number of fruit drops is 6, which is (2/7) of the number of milk chocolates\n    # Therefore, 6 = (2/7) * (3/4) * x\n    # Solving for x\n    # x = 6 / ((2/7) * (3/4))\n    x = 6 / ((2/7) * (3/4))\n    ans = int(x)\n    return ans\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let f be the price of football and v be the price of volleyball\n    \n    # 1 football and 2 volleyballs cost $60\n    # f + 2v = 60\n\n    # 2 footballs cost $60 - $16\n    # 2f = 44\n    # f = 22\n\n    # Substitute the value of f into the first equation\n    # 22 + 2v = 60\n    # 2v = 38\n    # v = 19\n    \n    # The price of one volleyball is $19\n    volleyball_price = 19\n\n    return volleyball_price\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    # Knowing that the mode is 7, at least two team members are 7 years old.\n    # The mean age of the team is 9, so the total sum of their ages is 5 * 9 = 45.\n    # The median age is 8, which means the third age in the sorted list is 8.\n    # The range of the ages is 6, so if the minimum age is 7 - the maximum is 7+6 = 13.\n    # Let's denote the ages as a <= b <= c <= d <= e, where b = c = 7 (mode) and c = 8 (median).\n\n    # Total sum of ages in terms of variables: a + b + c + d + e = 45\n    # Since b = c = 7, it simplifies to: a + 7 + 8 + d + e = 45\n    # Therefore, a + d + e = 45 - 15 = 30\n\n    # Because the range is 6 and the minimum age (a) cannot be greater than the mode (b = c = 7),\n    # the maximum age e can only be 13. Thus, a can be 7 and e can be 13.\n    # We then only need to determine d (the second oldest) knowing that the third age is 8.\n\n    # If e = 13, then a + d = 30 - 13 = 17, and since b = c = 7 (the next two higher ages),\n    # the only possible value for d that doesn't conflict with a, b, and c is 10 (a cannot be less than b or c).\n\n    # Therefore, the ages must be 7, 7, 8, 10, 13 to satisfy all conditions.\n\n    # The second oldest member's age is 10.\n    return 10\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From the first clue, two of the digits in 1703 are correct and in their correct positions.\n    # From the second clue, two of the digits in 2745 are correct but all in the wrong positions.\n    # From the third clue, all digits in 3541 are correct but in the wrong positions.\n\n    # We will iterate through all possible 4-digit numbers where all digits are different and check them against the clues.\n    for i in range(1000, 10000):\n        num = str(i)\n        \n        # All digits must be different\n        if len(set(num)) != len(num):\n            continue\n        \n        # Check first clue: Exactly two correct digits in the correct positions for 1703\n        correct_1703 = sum(a == b for a, b in zip(num, \"1703\")) == 2\n        \n        # Check second clue: Exactly two correct digits in the wrong positions for 2745\n        correct_2745 = sum(a == b for a, b in zip(num, \"2745\")) == 0\n        # We subtract the number of matching digits from the total number of correct digits (known to be 2) to check positions\n        correct_2745_position = (sum(a in num for a in \"2745\") - correct_2745) == 2\n        \n        # Check third clue: Four correct digits in the wrong positions for 3541\n        correct_3541 = sum(a == b for a, b in zip(num, \"3541\")) == 0\n        correct_3541_position = (sum(a in num for a in \"3541\") - correct_3541) == 4\n        \n        # If all clues are satisfied, we've found the correct number\n        if correct_1703 and correct_2745 and correct_2745_position and correct_3541 and correct_3541_position:\n            return int(num)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3  # One math book, one English book, and one science book\n    ans = math.factorial(num_books)  # The number of arrangements is 3!\n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A cannot be in the first or last position, so A can only be in one of the middle 3 positions.\n    # That leaves 4 people to arrange in the remaining 4 positions.\n    # First we choose a position for A (3 ways),\n    # then we arrange the rest of the 4 people in the remaining 4 spots (4! ways).\n    num_ways_A = 3\n    factorial_4 = 4 * 3 * 2 * 1\n    return num_ways_A * factorial_4\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    rounds = math.ceil(math.log2(num_people))\n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let Y be the number of yellow flowers\n    # Let R be the number of red flowers, R = 3Y\n    # Let P be the number of pink flowers, P = Y - 7\n    # Given that P = 3\n    # We have Y - 7 = 3\n\n    Y = 3 + 7  # solving the equation for Y\n    R = 3 * Y  # calculating R using the relation R = 3Y\n\n    total_flowers = R + Y  # calculating the total number of red and yellow flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 6*x + 3*x + 2 - 38 - 5*x + 8*x\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls in the morning be g.\n    # Then, the number of boys will be 1.5g.\n    boys, girls = symbols('boys girls')\n\n    # Equations according to the given conditions\n    # Afternoon: boys + 12 girls + 12\n    # The final ratio of boys to girls becomes 19:14\n    equation1 = Eq((1.5 * girls) + 12, 19/14 * (girls + 12))\n\n    # Solve the equation to find the number of girls\n    solutions = solve((equation1), (girls))\n\n    # Calculate the number of boys using the number of girls\n    morning_boys = 1.5 * solutions[girls]\n    afternoon_boys = morning_boys + 12\n    afternoon_girls = solutions[girls] + 12\n\n    # Calculate the total\n    total = afternoon_boys + afternoon_girls\n\n    return total\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio equation: apples/oranges = 3/8\n    equation1 = Eq(apples / oranges, 3/8)\n    \n    # New ratio after removing one apple: (apples - 1)/oranges = 1/3\n    equation2 = Eq((apples - 1) / oranges, 1/3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    # The hundreds digit can be 1-9, and the units digit can be 1-9, but both can't be equal\n    for hundreds in range(1, 10):\n        for units in range(1, 10):\n            if units != hundreds:\n                # The tens digit must be less than the hundreds digit and the units digit \n                for tens in range(1, min(hundreds, units)):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    # This is a classic problem of derangements, also known as subfactorials\n    # or !n, which can be solved using the formula:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n    \n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n      \n    return subfactorial(6)\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    notebooks_price = 3\n    pencils_price = 9\n    total_classmates = 10\n\n    for pencils_count in range(total_classmates + 1):\n        notebooks_count = total_classmates - pencils_count\n        if notebooks_count * notebooks_price + pencils_count * pencils_price == 48:\n            return pencils_count\n            \nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    a = 7  # first term\n    r = 2  # common ratio\n    n = 5  # next term position\n\n    # Since it's a geometric sequence, the next term is a * r^(n-1)\n    next_term = a * (r ** (n - 1))\n\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_of_5 = 0\n    count_of_2 = 0\n    \n    for i in range(1, n + 1):\n        while i % 5 == 0:\n            count_of_5 += 1\n            i //= 5\n        while i % 2 == 0:\n            count_of_2 += 1\n            i //= 2\n    \n    ans = min(count_of_5, count_of_2)\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    n = 6  # number of consecutive even numbers\n    total = 510  # sum of the numbers\n\n    # Since the numbers are consecutive even numbers, we can consider them as:\n    # x, x+2, x+4, x+6, x+8, x+10 (where x is the first even number)\n    # The sum of these numbers is: 6x + (2+4+6+8+10) = 510\n    # 6x + 30 = 510 => 6x = 480 => x = 80\n    # Therefore, we have the sequence: 80, 82, 84, 86, 88, 90\n\n    # The mean of the numbers is the total sum divided by the number of terms\n    mean = total / n\n    \n    # The median of a sequence of consecutive even numbers is the average of the two middle terms\n    # In this case, it's the average of 84 and 86\n    median = (84 + 86) / 2\n    \n    # The difference between the mean and median\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_1 = 23\n    climb_down = -31  # Negative because it's a descent\n    climb_up_2 = 17\n\n    final_height = initial_height + climb_up_1 + climb_down + climb_up_2\n    return final_height\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let's denote the number of cards Helen has after several rounds as H\n    # and the number of cards Oliver has as O.\n    # Initially, H = 18 and O = 22\n    # After several rounds, H has 10 more cards than O, i.e., H = O + 10.\n    # Since loser gives winner 1 card each round, the total number of cards\n    # remains the same, i.e., H + O = 18 + 22.\n    \n    from sympy import symbols, Eq, solve\n    \n    H, O = symbols('H O')\n    equation1 = Eq(H, O + 10)\n    equation2 = Eq(H + O, 18 + 22)\n    \n    solutions = solve((equation1, equation2), (H, O))\n    \n    return solutions[H]\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the mass of mangoes and s the mass of strawberries at first\n    m, s = symbols('m s')\n\n    # Equation representing that there was 448g more mangoes than strawberries\n    equation1 = Eq(m, s + 448)\n\n    # After giving away 900g of mangoes, strawberries mass was twice the mass of mangoes\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (m, s))\n\n    # We need the mass of strawberries at first\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x, then the consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is given to be 40, so we can set up the following equation:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 40\n    # Simplifying, we get 5x + 10 = 40\n    # Solving for x gives us the smallest number\n    smallest_number = (40 - 10) / 5\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - 8, 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Subtract 1 from total_numbers to exclude the number 1, which is neither prime nor composite\n    composite_numbers = total_numbers - prime_numbers - 1\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '4', '6', '8', '9']\n    all_numbers = [int(\"\".join(p)) for p in permutations(digits, 5) if p[0] != '0']\n    multiples_of_9 = [num for num in all_numbers if num % 9 == 0]\n\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n\n    return (M - N) // 9\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39\n    n12 = 57\n    difference = (n12 - n4) / (12 - 4)\n    first_term = n4 - (4 - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    digits.sort(reverse=True)\n\n    ans = int(''.join(digits))\n    return ans\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the total amount of salt from both solutions\n    total_salt = (30 * 0.30) + (20 * 0.20)  # in grams\n    \n    # Calculate the total weight of the solution before adding water\n    current_weight = 30 + 20  # in grams\n    \n    # Let x be the weight of the water to be added\n    # The desired concentration is 10%, so the equation to find the water to be added is:\n    # (total_salt) / (current_weight + x) = 0.10\n    # We solve this equation for x as follows:\n    \n    x = total_salt / 0.10 - current_weight\n\n    return x\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(x*x + x, 380)\n    \n    solutions = solve(equation, x)\n    \n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Speed of Johnson and Vicky\n    speed_johnson = 600  # in meters per minute\n    speed_vicky = 250     # in meters per minute\n\n    # Total distance of the race\n    distance = 3000  # in meters\n\n    # Time taken for Johnson to finish the race\n    time_johnson = distance / speed_johnson  # in minutes\n\n    # Time taken for Vicky to finish the race\n    time_vicky = distance / speed_vicky  # in minutes\n\n    # Difference in time\n    time_difference = time_vicky - time_johnson\n\n    return time_difference\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Apply the pigeonhole principle: at least 3 cards with the same number.\n    # We have 13 different numbers and we want at least 3 cards with the same number.\n    # In the worst case, we can draw all cards of 2 of each number without getting 3 of the same number.\n    # That's 2 cards each for 13 numbers: 2 * 13 = 26 cards.\n    # Then we draw one more card, which must have a number we've already seen twice.\n    return 26 + 1\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n    prime_proportion = len(prime_numbers) / total_numbers\n\n    return prime_proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Apply the Pigeonhole Principle to find the worst case\n    # First we find the maximum number we can draw without fulfilling the condition\n    # Then we add one to that number to get the minimum amount guaranteeing the condition\n    \n    # We want to make sure we get 29 of one color, this means drawing 28 of two other colors is OK\n    max_without_29_of_one_color = 2 * 28\n    \n    # We also want to have at least 28 of another color,\n    # so drawing 27 of the last color is still acceptable\n    max_without_28_of_second_color = max_without_29_of_one_color + 27\n    \n    # To make sure we have at least 10 of the last color,\n    # we can still draw up to 9 of that color without fulfilling our requirement\n    max_without_10_of_last_color = max_without_28_of_second_color + 9\n    \n    # Now we add one to the maximum number we could draw without fulfilling the requirement\n    # This will give us the minimum number of balls we need to draw to guarantee meeting our condition\n    min_to_meet_condition = max_without_10_of_last_color + 1\n    \n    return min_to_meet_condition\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n\n    total_sum = mean_value * total_numbers\n    sum_of_known_numbers = sum(known_numbers)\n    missing_number = total_sum - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume transferred\n    x = symbols('x')\n\n    # Initial state of lime in each bottle\n    lime_A = 5 * 0.10\n    lime_B = 3 * 0.20\n\n    # Lime in each bottle after x liters is transferred\n    # Bottle A gives x liters to B and receives x liters from B\n    # Bottle B gives x liters to A and receives x liters from A\n    lime_A_after = lime_A - 0.10 * x + 0.20 * x\n    lime_B_after = lime_B - 0.20 * x + 0.10 * x\n\n    # The volume of each bottle after the transfer\n    volume_A_after = 5\n    volume_B_after = 3\n\n    # The concentration of lime after the transfer is the same for both bottles\n    # lime_A_after / volume_A_after - lime_B_after / volume_B_after\n    equation = Eq(lime_A_after / volume_A_after, lime_B_after / volume_B_after)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    # The sum of numbers from 1 to n is given by the formula S = n*(n+1)/2\n    # Here, S for 1 to 50 is given as 1275\n    # Now we need to add the next number which is 51 and subtract the first number which is 1\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51  # Subtract 1 and add 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFGH'):\n        if perm.index('C') in range(perm.index('A') + 1, perm.index('B')) or perm.index('C') in range(perm.index('B') + 1, perm.index('A')):\n            if (perm.index('D') == perm.index('E') + 1) or (perm.index('D') == perm.index('E') - 1):\n                if (perm.index('F') == perm.index('G') + 1) or (perm.index('F') == perm.index('G') - 1):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set([n + c for n in notebooks for c in calendars])\n    return len(prices)\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    hundreds_digit = (3 * 123) % 1000 // 100\n    return hundreds_digit\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_value = 50 + 20 + 10 + 5\n\n    coins = [50, 20, 10, 5]\n    for coin in coins:\n        if 2 * (total_value - coin) == total_value - coin // 2:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Apply the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's distance in meters\n    kane_behind = 12.5  # Distance Kane is behind Jaan in meters\n    kane_distance = jaan_distance - kane_behind  # Kane's distance in meters\n    jaan_speed = 8  # Jaan's speed in meters per second\n    jaan_time = jaan_distance / jaan_speed  # Jaan's time to finish the race in seconds\n    kane_speed = kane_distance / jaan_time  # Kane's speed in meters per second\n\n    return kane_speed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given values\n    length_painting = 90\n    length_lego_difference = 70.5\n    ratio_length_to_breadth = 5 / 2\n\n    # Calculating the length of the lego\n    length_lego = length_painting - length_lego_difference\n\n    # Using the ratio to determine the breadth of the lego\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    # Since lego blocks are discrete, the breadth should be an integer. \n    # We'll use floor division to ensure we get the maximum possible integer size.\n    max_breadth_lego = int(breadth_lego)\n\n    return max_breadth_lego\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # Convert pence to pounds\n\n    total_price = cake_price + milk_price\n    actual_payment = total_price - voucher\n\n    return round(actual_payment, 2)\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_rate = normal_rate * 1.25\n    normal_hours = 8\n    total_hours_worked = 10\n    overtime_hours = total_hours_worked - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # 1 hour = 60 minutes, let's convert everything to minutes\n    total_time = 60\n    john_raj_time = 72 \n    raj_peter_time = 90\n\n    # Let's denote the rates at which they work\n    # j, r, and p for John, Raj, and Pete, respectively\n    j, r, p = symbols('j r p')\n\n    # Setting up the equations based on work done\n    # They all add up their work rate to complete the job in 1 hour (60 minutes)\n    equation1 = Eq(j + r + p, 1/total_time)\n    # John and Raj can complete the job together in 72 minutes\n    equation2 = Eq(j + r, 1/john_raj_time)\n    # Raj and Pete can complete the job in 90 minutes\n    equation3 = Eq(r + p, 1/raj_peter_time)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n\n    # Raj's time to finish the job by himself\n    raj_time = 1 / solutions[r]\n\n    return int(raj_time)\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for elder and younger brother's current ages\n    elder, younger = symbols('elder younger')\n    \n    # Total age equation\n    total_age_eq = Eq(elder + younger, 42)\n    \n    # Few year ago when the elder brother was at the current age of the younger brother\n    # The younger brother was half of the current elder's age\n    few_years_ago_eq = Eq(younger - (elder - younger), elder / 2)\n    \n    # Solve the system of equations\n    solutions = solve((total_age_eq, few_years_ago_eq), (elder, younger))\n    \n    # Solutions will be in the form of [(elder_age, younger_age)]\n    # We want to return the elder brother's current age\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    x_value = solve(equation, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be expressed as:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    # and returning the smallest such integer 'x'\n    x = solve_congruence(*congruences)\n\n    return x[0]\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The 99-digit number is made up of the sequence \"928\" repeated 33 times.\n    repeated_sequence = \"928\"\n    number_of_repetitions = 99 // len(repeated_sequence)\n    \n    # Convert the repeated sequence to an integer and multiply by the number of repetitions\n    long_number = int(repeated_sequence) * (10**(len(repeated_sequence) * (number_of_repetitions - 1)))\n    \n    # To find the remainder when dividing by 9, sum the digits of the number until you have a single digit\n    digit_sum = sum(int(digit) for digit in str(long_number))\n    \n    # Summing the digits of long_number again since it might be greater than 9\n    while digit_sum >= 9:\n        digit_sum = sum(int(digit) for digit in str(digit_sum))\n    \n    remainder = digit_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = 10 * tens_digit + ones_digit\n            swapped_number = 10 * ones_digit + tens_digit\n            if swapped_number == original_number // 3 + 3:\n                return original_number\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure we get at least three of the same color, we should consider the worst-case scenario\n    # where we pick balls of different colors every time until the last pick.\n    # We need to pick all colors but one, and add 2 more from any color to ensure we have 3 of the same color.\n    \n    # First we pick all the colors except one:\n    # 3 white (for the worst case where the first three are different)\n    # 2 blue (now we have picked 2 blue, but no three of a kind yet)\n    # 1 green (we still don't have three of a kind)\n    # We do not need to pick any orange balls because we are considering the worst-case scenario \n    # where we avoid getting three of the same color for as long as possible.\n    worst_case_picks = 3 + 2 + 1\n    \n    # Then, we pick one more ball which will guarantee us three of the same color\n    guaranteed_same_color = 1\n\n    # Total number of picks to guarantee 3 of the same color\n    total_picks = worst_case_picks + guaranteed_same_color\n    \n    return total_picks\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let n be the number of teams\n    n = Symbol('n')\n\n    # Each team plays n - 1 other teams twice, so we have the equation\n    # (n - 1) * n / 2 * 2 = 30\n    equation = (n - 1) * n - 30 * 2\n\n    # Solve the equation for n\n    teams = solve(equation, n)\n\n    # The equation is quadratic and usually has two solutions, only one of them is positive\n    return [team for team in teams if team.is_real and team > 0][0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let's say the number of years later is 'y' when their combined ages will be 40.\n    # Their current combined ages is 34.\n    # Each year, both George and his sister get 1 year older, so in 'y' years, the total number of years they would have aged combined is 2y (since each ages y years).\n    # 34 (current combined age) + 2y (combined age in y years) = 40 (combined age after y years).\n    # We can solve this simple equation for y.\n    \n    # 34 + 2y = 40\n    # 2y = 40 - 34\n    # 2y = 6\n    # y = 6 / 2\n    # y = 3\n    \n    # So after 3 years, the sum of their ages will be 40.\n    return 3\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the circumference of the tree\n    # 10x - 3 = 12x + 3  # The equation representing the relationship as per the problem\n    # Solving for x: x = 3 meters (the circumference of the tree)\n    # For 8 turns, it will be 8x meters\n    # Since x is 3 meters, for 8 turns, it will be 8 * 3 meters\n\n    # Solving the equation\n    x = 6 / 2\n    \n    # Calculating the length for 8 turns\n    length_8_turns = 8 * x\n    \n    return length_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Following the Pigeonhole Principle: \n    # (Number of Pigeons / Number of Pigeonholes) = (Number of Participants / Number of Countries)\n    # If there are 11 countries and we want at least 5 participants from the same country,\n    # we need to distribute 4 participants to each of the 11 countries first, which is 44 participants.\n    # With the next participant, we will ensure that at least one country has 5 participants.\n    num_countries = 11\n    participants_for_4 = num_countries * 4\n    ans = participants_for_4 + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = -(-students // tables_per_row)  # Ceiling division to get the least number of rows\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if (A != 0) and (1000 * A + 100 * B + 10 * C + D) - (100 * D + 10 * C + B) == (900 * A + 90 * B):\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_amount = symbols('total_amount')\n\n    spent = (3 / 7) * total_amount\n    not_used = total_amount - spent\n    difference = spent - not_used\n\n    equation = Eq(difference, 12)\n\n    total_solution = solve(equation, total_amount)\n\n    spent_on_bag = (3 / 7) * total_solution[0]\n\n    return spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    initial_number = (final_number - 6) / 2\n    return initial_number\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    # Define the new operation as a function\n    def new_operation(number, count):\n        # Perform the subtraction\n        for i in range(count, 0, -1):\n            number -= i\n        return number\n\n    # Apply the new operation to 111 odot 7\n    ans = new_operation(111, 7)\n    return ans\n\n# Calculate the result\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # There are (100/5) terms in the sequence\n    sum_of_squares = (1/6) * n * (n + 1) * (2 * n + 1) * (5**2)  # Apply the formula, with each term 5 times larger\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Given that the dwarfs were born in seven consecutive years,\n    # their ages form an arithmetic sequence with a common difference of 1 year.\n    # Let the youngest dwarf's age be x years.\n    # Then the ages of the youngest three dwarfs will be x, (x + 1), (x + 2).\n    # Their sum is given as 42 years: x + (x + 1) + (x + 2) = 42\n    \n    # Solve for x, the age of the youngest dwarf\n    x = (42 - 3) // 3  # 3 is subtracted for the (1 + 2) added year, and divide by 3 for the three dwarfs.\n    \n    # Now, let's find the age of the fourth dwarf, which is also the first dwarf in the oldest three.\n    fourth_age = x + 3\n    \n    # The ages of the oldest three dwarfs will be (x+3), (x+4), (x+5),\n    # and we need to find their sum.\n    sum_oldest_three = fourth_age + (fourth_age + 1) + (fourth_age + 2)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_price, storybook_price = symbols('file_price storybook_price')\n\n    equation1 = Eq(7*file_price + 4*storybook_price, 108)\n    equation2 = Eq(5*file_price + 3*storybook_price, 80)\n\n    solutions = solve((equation1, equation2), (file_price, storybook_price))\n\n    total_cost = solutions[file_price] + solutions[storybook_price]\n\n    return total_cost\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    mixed_number = 3 + 1/2\n    divisor = 1/4\n    ans = mixed_number / divisor\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    # Hundreds digit can range from 1 to 9\n    for hundreds in range(1, 10):\n        # Tens digit can range from 0 to the smaller of hundreds - 1\n        for tens in range(0, hundreds):\n            # Units digit must be higher than tens but can be equal to hundreds, range from tens+1 to 9\n            for units in range(tens + 1, 10):\n                # If tens matches, it's only one combination\n                if units == hundreds:\n                    count += 1\n                else:  # Different units and hundreds, two different numbers\n                    count += 2\n    return count\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # speed = total_distance / time\n    time_second_bridge = 27  # given time to cross second bridge\n    length_second_bridge = (speed * time_second_bridge) - 137  # total_distance - train_length\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    difference = brenda - rani\n    money_to_give = difference // 2\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    total_balls = 125\n    # Let's denote blue balls as b and red balls as r\n    # According to the problem, (2/5)*b = (3/5)*r\n    # We also know that b + r = 125 (total balls)\n    # Therefore, we can set up two equations and solve for b and r\n    # (2/5)*b - (3/5)*r = 0\n    # and\n    # b + r = 125\n    \n    from sympy import symbols, Eq, solve\n    \n    b, r = symbols('b r')\n    eq1 = Eq((2/5)*b, (3/5)*r)\n    eq2 = Eq(b + r, total_balls)\n    \n    solutions = solve((eq1, eq2), (b, r))\n    \n    blue_balls = solutions[b]\n    red_balls = solutions[r]\n    more_blue_than_red = blue_balls - red_balls\n\n    return more_blue_than_red\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate combinations\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Total ways to distribute 7 books among 3 students\n    total_ways = 0\n    \n    # Student A can get 1, 2, 3, 4, or 5 books because each student needs to get at least one book \n    for books_for_a in range(1, 6):\n        books_left = 7 - books_for_a\n        for books_for_b in range(1, books_left):  # Student B can get 1 to books_left - 1 books\n            books_for_c = books_left - books_for_b\n            ways_for_a = nCr(7, books_for_a)\n            ways_for_b = nCr(7 - books_for_a, books_for_b)\n            ways_for_c = nCr(7 - books_for_a - books_for_b, books_for_c)\n            total_ways += ways_for_a * ways_for_b * ways_for_c\n\n    return total_ways\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_trays = 1\n    additional_sausages = 21\n    \n    total_sausages_initial = initial_trays * initial_mean\n    total_sausages_final = total_sausages_initial + additional_sausages\n    \n    total_trays = initial_trays + additional_trays\n    new_mean = total_sausages_final / total_trays\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n    \n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # We aim to minimize the number of pieces for the child with the most.\n    # In order to do that, we would distribute the candies as evenly as possible\n    # But since each child should receive a different number of candies, we start\n    # by giving the minimum, i.e., 1 candy to the first child, 2 to the second, and so on.\n\n    # Calculate the minimum candies we need to distribute to ensure everyone gets a different amount\n    # This forms an arithmetic sequence from 1 to n with a common difference of 1\n    n = 8  # number of children\n    min_candies_needed = sum(range(1, n+1))\n\n    # The remaining candies after distributing the min required ones will go to the child with the most\n    remaining_candies = 88 - min_candies_needed\n  \n    # The child with the most would get the remaining candies plus the base amount (8 in this case)\n    most_candies = remaining_candies + n # Adding base amount for the last child\n\n    return most_candies\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    \n    # Daughter's age on 1st December 1996\n    daughter_age_1996 = 40\n    \n    # Years between 1996 and 2008\n    years_between = 2008 - 1996\n    \n    # Daughter's age in 2008\n    daughter_age_2008 = daughter_age_1996 + years_between\n    \n    # Grandmother's age when her daughter was born\n    grandmother_age_when_daughter_born = grandmother_age_2008 - daughter_age_2008\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Other than A, there are 3 individuals left.\n    # For the first pass, A can pass to any of these 3 individuals.\n    # For the second pass, the individual who caught the ball from A can pass to 2 remaining individuals (not A and not themselves).\n    # For the third pass, since the ball must be passed back to A, there is only 1 choice for the last individual to pass the ball back to A.\n    \n    # Calculate the number of different methods:\n    num_methods = 3 * 2 * 1\n    \n    return num_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # There are 8 people and if A and B want to stand next to each other,\n    # we can think of them as a single unit AB. This gives us 7 units to arrange.\n    # These 7 units (AB, E, F, G, H, C, D) can be arranged in 7! ways.\n    arrangements_with_AB_together = factorial(7)\n\n    # These 7 units can be in two arrangements (AB or BA), thus we multiply by 2.\n    total_arrangements_AB_together = arrangements_with_AB_together * 2\n\n    # Now we need to subtract the cases where C and D are next to each other from the total arrangements.\n    # Consider C and D as a single unit CD. We have now 6 units (AB, E, F, G, H, CD).\n    # These can be arranged in 6! ways.\n    arrangements_with_CD_together = factorial(6)\n\n    # In each arrangement, CD can be in two arrangements (CD or DC), thus we multiply by 2.\n    # Also, for each arrangement of the 6 units, the AB duo can be arranged in 2 ways (AB or BA).\n    total_arrangements_CD_together = arrangements_with_CD_together * 2 * 2\n\n    # The total number of acceptable arrangements is all arrangements of 7 units minus the unacceptable cases.\n    ans = total_arrangements_AB_together - total_arrangements_CD_together\n\n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_amount = 200\n    lenny_amount = 300\n    leroy_concentration = 0.35\n    lenny_concentration = 0.50\n\n    total_salt = leroy_amount * leroy_concentration + lenny_amount * lenny_concentration\n    total_solution = leroy_amount + lenny_amount\n\n    concentration = total_salt / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    for valeria_candies in range(1, 36):\n        mike_candies = 36 - valeria_candies\n        if mike_candies - valeria_candies == 6 - 22:\n            return valeria_candies\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    # The total mass of the sugar solution\n    total_mass = 300  # in grams\n\n    # The mass of sugar from the concentration\n    sugar_mass = 0.35 * total_mass  # in grams\n\n    # The mass of water is the total mass minus the sugar mass\n    water_mass = total_mass - sugar_mass\n\n    return water_mass\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Since we want to find the largest whole number k such that\n    # 12^50 > k^75, we can take the 50th root of both sides to compare.\n    # (12^50)^(1/50) > (k^75)^(1/50)\n    # Simplify the powers:\n    # 12 > k^(75/50)\n    # 12 > k^(3/2)\n    # Now, take the square of both sides to get rid of the fractional power.\n    # 12^2 > k^3\n    # 144 > k^3\n    # Now find the largest whole number k whose cube is still less than 144.\n    # We can start by getting an approximate value for the cube root of 144.\n    k_approx = 144**(1/3)\n    # Since we want the largest whole number less than this approximate value\n    # we take the floor of k_approx.\n    k = int(k_approx) - 1\n\n    # Verify that k^3 is indeed less than 144.\n    while (k + 1) ** 3 <= 144:\n        k += 1\n\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_count = 133\n    rotten_oranges = 34\n    bought_oranges = 25\n\n    initial_count = final_count - bought_oranges + rotten_oranges\n\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    ans = psi(psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 20):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Number of each type of pet (except birds which we need to find)\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Calculate the total number of legs from cats, dogs, and rabbits\n    total_legs = num_cats * legs_per_cat + num_dogs * legs_per_dog + num_rabbits * legs_per_rabbit\n\n    # The remainder legs are for the birds\n    remaining_legs = 28 - total_legs\n\n    # Calculate the number of birds\n    num_birds = remaining_legs // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Calculate the total man-hours needed to paint the original fence\n    original_man_hours = 5 * 6  # 5 people * 6 hours\n    \n    # Since the neighbour's fence is twice as long, double the man-hours needed\n    neighbour_man_hours = original_man_hours * 2\n    \n    # Find the minimum number of people needed to complete the job in less than 5 hours\n    # We do this by dividing the total man-hours by 4 (which is the maximum full hours less than 5)\n    # and then rounding up to the next whole number\n    import math\n    people_needed = math.ceil(neighbour_man_hours / 4)  # using ceil to round up\n    \n    return people_needed\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_per_floor = 12 / (5 - 1)  # Time to walk one floor\n    floors_in_30_min = 30 / time_per_floor  # Number of floors in 30 minutes\n\n    return int(floors_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_new_amount = cookies_per_gram * 21.6\n    return cookies_with_new_amount\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    base8_num = \"12345654321\"\n    base10_num = int(base8_num, 8)\n\n    remainder_7 = base10_num % 7\n    remainder_9 = base10_num % 9\n\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    years_past = 3\n    years_future = 4\n\n    current_combined_age = combined_age_past + (2 * years_past)\n    future_combined_age = current_combined_age + (2 * years_future)\n\n    return future_combined_age\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (n + 2) * (2*n + 1)) // 12\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from math import isqrt\n    n = 2016\n    factors = set()\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    count = sum(1 for factor in factors if isqrt(factor)**2 == factor)\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    n = 60 // 3\n    largest_number = n + 1\n\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    equation1 = Eq(3 * big + 4 * small, 68)\n    equation2 = Eq(4 * big + 2 * small, 64)\n\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[big]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    # Ensure all digits are different\n                    if len({A, B, C, D}) == 4:\n                        if A*101 + C*101 + B*10 + D*10 == 726:\n                            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Maximum number of shirts that can be taken out without getting a yellow one is\n    # the sum of all other colors of shirts\n    max_non_yellow = 6 + 4 + 12\n\n    # To ensure getting at least one yellow shirt, take out one more than the maximum non-yellow shirts\n    ans = max_non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Using ceiling division to get the integer packs\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    ans = 9.8 + 99.8 + 199.8 + 2999.8 + 39999.8 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Find the differences between the given numbers\n    diff1 = 80 - 73  # Difference between the third and fourth numbers\n    diff2 = 73 - 66  # Difference between the fourth and fifth numbers\n\n    # Assume the difference changes consistently, find the expected difference for the first two numbers\n    expected_diff = diff1 + (diff1 - diff2)  # Incremental change in difference\n    \n    # Calculate the missing number using the expected difference\n    missing_number = 94 - expected_diff  # Since a higher number is followed by a lower number, we subtract.\n    \n    return missing_number\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    \n    total_wine_glass_sales_ml = 25 * wine_glass_ml\n    total_tumbler_sales_ml = 12 * tumbler_ml\n    \n    total_ml_sold = total_wine_glass_sales_ml + total_tumbler_sales_ml\n    ml_per_carton = 1000\n    \n    cartons_needed = total_ml_sold / ml_per_carton\n\n    return int(cartons_needed) if cartons_needed == int(cartons_needed) else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    ans = 620 // 20\n    return ans\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we are only interested in the last digit of the result of the multiplication,\n    # we only need to find the last digit of powers of 2.\n    # The last digits of powers of 2 repeat in cycles of 4: 2, 4, 8, 6, ...\n\n    # Find the remainder of the exponent divided by the cycle length to identify the relevant power\n    cycle_length = 4\n    remainder = 859433 % cycle_length\n\n    # Define the last digits for the cycle of powers of 2\n    last_digits = {0: 6, 1: 2, 2: 4, 3: 8}\n\n    # Get the last digit for our specific power\n    last_digit = last_digits[remainder]\n    \n    return last_digit\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assign symbols to the variables\n    a, p, l = symbols('a p l')  # a: avocados, p: peaches, l: lemons\n    \n    # Create equations based on the given ratios and changes\n    ratio_initial = Eq(a / p, 2 / 9) & Eq(p / l, 9 / 8)\n    ratio_final = Eq((p - 12) / (l - 60), 6 / 5)\n    sold_fruits = Eq(a, 52) & Eq(p,12) & Eq(l,60)\n\n    # Solving the system of equations\n    solutions = solve((ratio_initial, ratio_final, sold_fruits), (a, p, l))\n    \n    # Total number of fruits left after selling\n    total_left = solutions[a] + solutions[p] + solutions[l]\n    \n    return total_left\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    count = 0\n    for i in range(1, total_students + 1):\n        turns = 0\n        if i % 3 == 0:\n            turns += 1\n        if i % 5 == 0:\n            turns += 1\n        if turns % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, solve, symbols\n\n    peter_age = symbols('peter_age')\n    \n    lcm_2_4_6 = lcm(2, 4, 6)\n    # Find the lowest common multiple of 2, 4, 6 and then add 1 according to the condition\n    # Iterate starting from lcm_2_4_6 + 1 until finding a number that also has a remainder of 5 when divided by 7\n    age = lcm_2_4_6 + 1\n    while age % 7 != 5:\n        age += lcm_2_4_6\n    \n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets be the number of sweets Jess has initially\n    # Let jill_sweets be the number of sweets Jill has initially\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n\n    # Jill gives eight sweets to Jess\n    # Now Jess has jess_sweets + 8 sweets\n    # and Jill has jill_sweets - 8 sweets\n\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Calculate the total number of sweets they have altogether\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    # Loop over all possible permutations of the cards from largest to smallest\n    for n_cards in range(7, 0, -1):  # Start with all 7 cards, then 6, etc.\n        for cards in permutations(range(1, 8), n_cards):  # Permute cards\n            number = int(''.join(map(str, cards)))  # Join the digits to form a number\n\n            # Check if the formed number is divisible by all its digits\n            if all(number % int(digit) == 0 for digit in str(number)):\n                return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    n = 1\n    while True:\n        # Formula to find the sum of n consecutive odd numbers starting with 1 is n^2.\n        if n ** 2 > 900:\n            break\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A, B and C represent the weights of Adam, Ben and Carl respectively.\n    \n    # Equations based on the given information\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    A_plus_B = 102\n    B_plus_C = 97\n    A_plus_C = 93\n    \n    # Sum of all equations (A + B) + (B + C) + (A + C) = 2 * (A + B + C)\n    total_sum_twice = A_plus_B + B_plus_C + A_plus_C\n    \n    # Divide by 2 to get the total weight of Adam, Ben and Carl\n    total_weight = total_sum_twice / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 2 and i % 11 == 2:\n            return i\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    # Start checking from 121 as we need a number above 120\n    for dividend in range(121, divisor * divisor):  \n        # Check if the condition is met (dividend % divisor == remainder)\n        if dividend % divisor == remainder:\n            return dividend\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = (length + width) * 2\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_value = min(numbers)\n    return smallest_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n    height_centimetres_to_metres = height_centimetres / 100\n    total_height = height_metres + height_centimetres_to_metres\n    \n    return total_height\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal_amount = 5000\n    interest_rate = 0.03\n    time_period = 2\n\n    # Compound interest formula for yearly compound interest\n    final_amount = principal_amount * ((1 + interest_rate) ** time_period)\n\n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    # Let b be the total number of bookmarks and p be the number of pupils.\n    # According to the problem, we have two equations:\n    # b = 4p + 8 (if he gives each pupil 4 bookmarks)\n    # b = 6p - 10 (if he gives each pupil 6 bookmarks)\n\n    # We are going to solve the system of equations:\n    # 4p + 8 = 6p - 10\n    \n    # Rearrange the above equation to isolate the variable p:\n    # 2p = 18\n    p = 18 // 2  # Number of pupils\n\n    # Plug the value of p back into one of the original equations to find b\n    b = (4 * p) + 8  # Total number of bookmarks\n    \n    return b\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    \n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            hour_string = str(hour) if hour > 9 else '0' + str(hour)\n            minute_string = str(minute) if minute > 9 else '0' + str(minute)\n            time_string = hour_string + minute_string\n            if time_string.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum([7*i**2 for i in range(1, 16)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return round(total_sum, 2)\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144  # km\n    time_downstream = 8  # hours\n    still_water_speed = 15  # km/h\n\n    # Calculate the speed of the current using downstream information\n    downstream_speed = distance / time_downstream\n    current_speed = downstream_speed - still_water_speed\n    \n    # Calculate the speed of the ship upstream\n    upstream_speed = still_water_speed - current_speed\n\n    # Calculate the time taken to go back upstream\n    time_upstream = distance / upstream_speed\n\n    return time_upstream\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Correcting Sam's mistakes\n    first_multiple = 56 // 4  # First multiple of 4 within the range\n    if 56 % 4 != 0:\n        first_multiple += 1  # Adjust if 56 is not a multiple of 4\n    \n    last_multiple = 92 // 4  # Last multiple of 4 within the range\n\n    # Number of multiples of 4 from 56 to 92\n    num_multiples = last_multiple - first_multiple + 1\n    \n    # Sam's conclusion is incorrect if this number differs from his final result\n    return num_multiples\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n    \n    num_ways = comb(total_students, students_to_select)\n    \n    return num_ways\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k be the amount of food the kangaroo eats per day\n    # Let h be the amount of food the hippo eats per day\n    k, h = symbols('k h')\n\n    # We know that the hippo eats 45 kg more food than the kangaroo per day\n    equation1 = Eq(h, k + 45)\n\n    # We also know that after 20 days, the hippo has eaten 10 times as much as the kangaroo in total\n    equation2 = Eq(20 * h, 10 * (20 * k))\n\n    # Solve the equations to find the amount of food h (the hippo) eats per day\n    solutions = solve((equation1, equation2), (k, h))\n\n    # The amount of food the hippo has consumed in 20 days is 20 times the amount it eats per day\n    hippo_food_20_days = 20 * solutions[h]\n\n    return hippo_food_20_days\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    meet_time = datetime.strptime(\"3:15 PM\", \"%I:%M %p\") + wait_time\n    return meet_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create congruences [(remainder, modulus)]\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6)\n    ]\n\n    # Using Chinese Remainder Theorem to find the solution\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    # Check if the number of chocolate bars is a prime number,\n    # since a prime number cannot be evenly divided by any number other than 1 and itself.\n    num_bars = 233\n    if num_bars > 1:\n        for i in range(2, num_bars):\n            if (num_bars % i) == 0:\n                break\n        else:\n            # If the loop completes without finding a factor, it is a prime number.\n            return True\n    return False\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum([sum([1 / j for j in range(i+1, 21)]) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rates for A and B\n    work_rate_A = 1 / 15\n    work_rate_B = 1 / 20\n    \n    # Total work done in 2 days\n    work_done_in_2_days = 2 * (work_rate_A + work_rate_B)\n    \n    # Remaining work to be done by A\n    remaining_work = 1 - work_done_in_2_days\n    \n    # Time for A to do the remaining work\n    remaining_days_for_A = remaining_work / work_rate_A\n\n    return remaining_days_for_A\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # We start by taking one ball of each color, there's no guarantee they're the same\n    # After that, the next ball we take must be the same color as one we already have\n    green_balls = 7\n    blue_balls = 8\n    # One green + one blue + one more ball to ensure we have a pair\n    # Note: The +1 is because after taking one of each color the next one will guarantee a pair.\n    balls_needed = 1 + 1 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # At least 11 students share the same zodiac sign means that the 12th zodiac sign\n    # can have at most 10 students without having 11 students with the same sign.\n    # With 10 students for each of the other 11 zodiac signs, to guarantee at least\n    # 11 students with the same sign we need to add 1 more student.\n\n    # Using Pigeonhole Principle\n    students_per_sign = 10\n    min_students = (students_per_sign * (12 - 1)) + 1\n\n    return min_students\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    \n    # Generate all permutations of the students\n    for perm in permutations(students):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            # A must be between B and C\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                # D and E must stand together\n                if abs(perm.index('F') - perm.index('G')) != 1:\n                    # F and G must not stand adjacent to each other\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # To be sure that Ada gets 10 balls of the same colour,\n    # she has to consider the worst-case scenario,\n    # where she takes out all balls of other colours before getting 10 balls of the same colour.\n\n    # The worst-case is that she takes out all yellow and white balls first.\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n\n    # She can take at most 9 balls of each of the other colours without having 10 of the same colour\n    balls_to_get_9_yellow_white = (yellow_balls - 1) + (white_balls - 1)\n\n    # Now, no matter what, the next ball she takes out will be the 10th ball of the same colour (black).\n    # So, she needs to take out 1 more ball\n    balls_for_10th_black = 1  \n\n    # The total number of balls she needs to take out:\n    total_balls_to_take = balls_to_get_9_yellow_white + balls_for_10th_black\n\n    return total_balls_to_take\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    candies = 35\n    children = 9\n    starting_seat = 3\n    last_seat = (starting_seat + candies - 1) % children\n    return last_seat if last_seat != 0 else children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "from math import lcm\n\ndef solution():\n    cycle_spaghetti = 7\n    cycle_apple_pie = 3\n    cycle_both = lcm(cycle_spaghetti, cycle_apple_pie)\n\n    return f\"{cycle_both} days after 2nd January\"\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    \n    # Using Inclusion-Exclusion Principle, we find the intersection at minimum\n    children_with_both = (children_with_dogs + children_with_cats) - total_children\n    return children_with_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    sum_of_numbers = 0\n    # Assuming a 10x10 table with the sequence starting from 1 and incrementing by 1\n    for i in range(1, 101):  # Since it's a 10x10 table\n        sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    numbers = [12, 145, 32, 77, 62]\n    range_of_dataset = max(numbers) - min(numbers)\n    return range_of_dataset\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shirts, skirts = symbols('shirts skirts')\n\n    equation1 = Eq(shirts, skirts - 36) \n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    savings_per_month = 12\n    total_months = 3\n    total_savings = savings_per_month * total_months\n\n    return total_savings\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n    \n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n    \n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n    \n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance is the same in both directions: 120 miles\n    distance = 120\n\n    # Speed to the place: 20 mph\n    speed_to_place = 20\n\n    # Expected average speed: 30 mph\n    expected_avg_speed = 30\n\n    # Time taken to go to the place is distance/speed\n    time_to_place = distance / speed_to_place\n\n    # Total expected time for the round trip is (2 * distance) / expected average speed\n    total_expected_time = (2 * distance) / expected_avg_speed\n\n    # Time for the return trip is total expected time - time to place\n    time_for_return = total_expected_time - time_to_place\n\n    # Speed on return is distance / time for return\n    speed_on_return = distance / time_for_return\n\n    return speed_on_return\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for biscuits in range(400, 801):\n        if biscuits % 5 == 1 and biscuits % 6 == 2 and biscuits % 11 == 7:\n            return biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    # Given Nell's ratio is 4 and she received 24 sweets, which means each ratio point equals 6 sweets (24/4)\n    each_ratio_point = 24 // 4\n\n    # Joe's ratio is 5, so Joe received 5 * each_ratio_point sweets\n    joes_sweets = 5 * each_ratio_point\n\n    # Total sweets is the sum of Nell's and Joe's sweets\n    total_sweets = 24 + joes_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for number in range(1, 35):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    avg = sum(sequence) / len(sequence)\n    return avg\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    num_of_numbers = 3\n\n    total_original = original_average * num_of_numbers\n    new_total = new_average * (num_of_numbers + 1)\n\n    number_to_add = new_total - total_original\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jovan, sean, herman = symbols('jovan sean herman')\n    \n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(jovan, herman - 240)\n    \n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n    \n    total_marbles = solutions[jovan] + solutions[sean] + solutions[herman]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if int(f'14{m}') == 8 * int(f'1{m}') - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Calculate the total amount of hay needed for one horse for one day\n    hay_per_horse_per_day = days_initial * horses_initial\n\n    # Divide the total hay by the number of horses to get the number of days for 20 horses\n    days_final = hay_per_horse_per_day / horses_final\n\n    ans = days_final\n    return ans\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    num1 = 6\n    num2 = 9\n    num3 = 12\n\n    ans = gcd(gcd(num1, num2), num3)\n\n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    total_companies = 4\n    total_days = 5\n    \n    one_company_one_day = total_expressway / (total_companies * total_days)\n    \n    return one_company_one_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean = sum(data) / len(data)\n    deviations = [abs(x - mean) for x in data]\n    mad = sum(deviations) / len(deviations)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # There are 13 oranges and 3 kids. We can give 0-13 oranges to the first kid,\n    # and 0-13 to the second. Whatever remains goes to the third kid.\n    # Therefore, we are looking for the number of non-negative integer solutions to the equation:\n    # x1 + x2 + x3 = 13, where x1, x2, x3 are the number of oranges each kid gets.\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups.\n    # The formula to calculate that is: (n + r - 1) choose (r - 1).\n    # In our case, n = 13 and r = 3.\n    from math import comb\n    n = 13\n    r = 3\n    return comb(n + r - 1, r - 1)\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # The number of individuals (the alien and his brothers)\n    num_individuals = 1 + 5\n\n    # The number of legs for each individual\n    legs_per_individual = 5\n\n    # Total number of legs\n    total_legs = num_individuals * legs_per_individual\n\n    # The cost of one set of 5 individual shoes\n    cost_per_set_of_shoes = 78\n\n    # The cost of one pair of socks\n    cost_per_pair_of_socks = 12\n\n    # Since each set contains 5 shoes, we calculate the total number of sets needed\n    total_sets_of_shoes = total_legs // 5\n    if total_legs % 5 > 0:\n        total_sets_of_shoes += 1  # If there are remaining legs, they need one more set\n\n    # The total cost for shoes\n    total_cost_shoes = total_sets_of_shoes * cost_per_set_of_shoes\n\n    # The total cost for socks (one pair per leg)\n    total_cost_socks = total_legs * cost_per_pair_of_socks\n\n    # Total cost\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # A combination lock number has the form of ABCD where A, B, C, and D are digits\n    # If we switch D and A, we get the new number DCBA\n    # According to the problem, DCBA = ABCD + 5877\n    # Let's find out the original number ABCD\n\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    original_number = 1000 * A + 100 * B + 10 * C + D\n                    new_number = 1000 * D + 100 * C + 10 * B + A\n                    if new_number == original_number + 5877:\n                        return original_number\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n    for combo in combinations(numbers, 2):\n        prod = combo[0] * combo[1]\n        products[prod] = products.get(prod, []) + [combo]\n        \n    for combo3 in combinations(numbers, 3):\n        prod3 = combo3[0] * combo3[1] * combo3[2]\n        if prod3 in products:\n            common_product = prod3\n            two_card_choice = products[common_product]\n            break\n    \n    picked_numbers = set()\n    for combo in two_card_choice:\n        picked_numbers.update(combo)\n    picked_numbers.update(combo3)\n\n    for num in numbers:\n        if num not in picked_numbers:\n            return num\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    # Iterate over the given possible number of books to find the one that fits the condition\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for books in possible_totals:\n        if (books - 4) % 7 == 0:\n            return books\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # The distance between the first and fifth tree (which is 4 intervals)\n    distance_between_first_and_fifth = 20\n    \n    # Calculate the distance between each tree (intervals)\n    interval_distance = distance_between_first_and_fifth / 4\n    \n    # The length of the whole road\n    road_length = 200\n    \n    # Calculate the number of intervals along the 200m road\n    num_intervals = road_length / interval_distance\n    \n    # Calculate the number of trees:\n    # Since there is one tree at the start of the first interval,\n    # the total number of trees is the number of intervals plus 1\n    num_trees = num_intervals + 1\n    \n    return int(num_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    david_cost_per_cookie = 0.50\n    jeremy_cookie_ratio = 3/5\n    difference_in_cookies = 60\n    jeremy_cost_per_cookie = david_cost_per_cookie / 3\n\n    # Let x be the number of $0.50 cookies David has\n    # Jeremy has x - 60 number of $0.10 cookies, and (3/5) * (x - 60) number of $0.50 cookies\n\n    # The number of $0.50 cookies Jeremy has is three-fifths the number of $0.10 cookies he has\n    # Therefore, we have the equation\n    # x = (3/5) * (x - 60)\n    # Solving for x gives us the number of $0.50 cookies\n    \n    # Rearrange the equation to solve for x\n    x = (3/5) * (x - 60) / (1 - (3/5))\n\n    # Multiply both sides by (1 - (3/5)) to get x alone on one side and solve for x\n    x = (3/5) * (x - 60) / (2/5)\n\n    # Multiply both sides by (5/2) to simplify\n    x = 3 * (x - 60)\n\n    # Divide by 3 to solve for x\n    x = (x - 60)\n\n    # Add 60 to both sides of the equation to get x by itself\n    x = x + 60\n\n    # Now we have x by itself\n    x = 60\n\n    # So Jeremy has (3/5) * 60 number of $0.50 cookies\n    jeremy_50_cookies = (3/5) * 60\n\n    # Total cost for Jeremy's $0.50 cookies\n    jeremy_50_cost = jeremy_50_cookies * jeremy_cost_per_cookie\n\n    # Total cost for Jeremy's $0.10 cookies (which are 60 fewer than $0.50 cookies)\n    jeremy_10_cost = (jeremy_50_cookies - difference_in_cookies) * (jeremy_cost_per_cookie / 5)\n\n    # Jeremy's total cost is the sum of the cost of $0.50 cookies and $0.10 cookies\n    total_jeremy_cost = jeremy_50_cost + jeremy_10_cost\n\n    return total_jeremy_cost\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12\n    rate_B = 1 / 8\n    combined_rate = rate_A + rate_B\n    time_to_fill_half_tank = (1 / 2) / combined_rate\n    return time_to_fill_half_tank\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n\n    return int(num_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    num_girls = 17\n    for boys_side in range(1, num_girls):\n        if (boys_side + 1)**2 - boys_side**2 == num_girls:\n            total_boys = boys_side**2\n            return total_boys\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Evaluation of the expression step by step as per Jason's work\n    step_1 = 36 * 21  # calculates 36 times 21\n    step_2 = step_1 / (6 * 7)  # divides the result of step_1 by (6 times 7)\n    step_3 = (36 / 6) * 21 * 7  # alternative interpretation of initial expression\n    step_4 = 6 * 7 * 21  # simplifies step_3\n    \n    # The comparison between the four steps and the final answer Jason gave\n    mistake = step_2 != step_3\n    correct_answer = step_2 if not mistake else step_3\n    \n    return correct_answer\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n    total_people = ann_position + people_between + david_position_from_end\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8 = 0\n    page = 0\n    while count_8 < 22:\n        page += 1\n        count_8 += str(page).count('8')\n    return page\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - first_number - second_number\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (8 * 9) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    distance_per_day = 3 - 1\n    total_distance = 9\n    # Reach to 9 - 3 metres, because after reaching there in a day,\n    # it can climb out on the next day without sliding down.\n    remaining_distance = total_distance - 3\n    days = remaining_distance / distance_per_day\n    # The snail reaches to the top on the next day \n    # after covering the remaining_distance, so add 1 to days.\n    return int(days) + 1\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # We want to ensure to pick enough balls to satisfy the worst-case scenario\n    # according to the Pigeonhole Principle.\n    \n    # The worst case: we pick all balls of the types that we need the least number of.\n    # Therefore, we can pick 29 - 1 balls of one color, 28 - 1 balls of another color\n    # without getting the minimum count of those colors.\n    # Then we add all balls of the last color, which we need 10 - 1 (since in the worst\n    # case we could've picked 1 already), ensure we take all of those.\n    # Finally, we add 1 more ball to guarantee that we have reached the required minimum\n    # for any of the colors.\n    \n    # We need to ensure we get 29 of one color, 28 of another and 10 of the last.\n    # In the worst case, we select 28 balls without getting 29 of the same color.\n    # Then we pick 27 balls without getting 28 of second color.\n    # Finally, we pick all 30 white balls. After that, it is guaranteed that\n    # the next ball we pick will fulfill our requirement for one of the colors.\n    \n    balls_to_pick = (29 - 1) + (28 - 1) + 30 + 1\n\n    return balls_to_pick\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    x = (19 - 6 * 1.5) / 4\n    return x\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_highest = 978\n    height_world_highest = 8848\n\n    difference = height_world_highest - height_england_highest\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n    \n    for num in range(1, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0 and num < 50:\n            return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's initial amount of money\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)  # The total sum equation\n    # Each person's remaining money after spending is equal\n    equation2 = Eq(alicia / 2, beth - 60) \n    equation3 = Eq(alicia / 2, casey - 3 * (alicia / 2))\n    \n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 2014! contains the factor 10 (which is 2 * 5), and there are plenty of 2s and 5s in the multiplication,\n    # the last digit of 2014! will be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "from math import factorial\n\ndef solution():\n    n = 2 * 2 * 3 * 8 * 5 * 5 * 5\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6 * 5  # 30 is 6 multiplied by 5\n    denominator = 20 * 5  # To keep the fraction equivalent, multiply denominator by the same number (5)\n    return denominator\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((x + 6) * 3) / 8 - 8, 1)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n    \n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n\n    # Create an equation based on the sum of an arithmetic sequence formula:\n    # S_n = (n/2)*(2*a1 + (n - 1)*d), where S_n is the sum of n terms, a1 is the first term and d is the common difference\n    # In this case, S_5 = 100, a1 = x, n = 5, and d = 6 (because each day he eats 6 more cookies than the day before)\n    equation = Eq((5 / 2) * (2 * x + (5 - 1) * 6), 100)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0 and is_prime(num + 1):\n            return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    ways_for_men = factorial(4)\n    ways_for_women = factorial(4)\n    # Men and women can be arranged in two ways: MWWMWMWM or WMWMWMWM\n    arrangements = 2\n\n    ans = ways_for_men * ways_for_women * arrangements\n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")  # Total number of letters\n    p_count = \"HAPPY\".count('P')  # Count of the letter P\n\n    # Number of ways to arrange the letters = total_letters! / (p_count! for each repeating letter)\n    arrangements = factorial(total_letters) // factorial(p_count)\n\n    return arrangements\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    price_per_roll_ali = 2.40 / 8\n    price_per_roll_mya = price_per_roll_ali * 2\n    cost_for_three_rolls_mya = price_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2/5\n    fraction_girls = 1 - fraction_boys\n    total_children = girls / fraction_girls\n    boys = total_children * fraction_boys\n\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = 0.60 * 0.10 * 900\n    return result\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    departure_time = datetime.strptime(\"12:00\", \"%H:%M\")  # 12 noon in England\n    flight_duration = timedelta(hours=4)\n    arrival_time = departure_time + flight_duration\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    # FV = PV * (1 + r)^n\n    # where FV is the future value (870 dollars)\n    # PV is the present value (what we are trying to find)\n    # r is the annual interest rate (9% or 0.09)\n    # n is the number of years (5)\n\n    FV = 870\n    r = 0.09\n    n = 5\n\n    PV = FV / ((1 + r) ** n)\n\n    return PV\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if N != O:\n                NO = N * 10 + O\n                if len(set(str(NO**2))) == len(str(NO**2)):\n                    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([50 - i * 2 if i % 2 == 0 else - (50 - i * 2) for i in range(25)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # We use the Pigeonhole Principle to solve this problem.\n    # The worst case scenario is when Cindy picks one sock of each color without getting a pair.\n    # With 3 different colors, she can pick at most 3 socks without having a pair.\n    # Therefore, she needs to pick one more sock to ensure she has at least one pair.\n    # Hence, she must pick 3 (worst case without a pair) + 1 (to ensure a pair) socks.\n\n    num_socks_to_pick = 3 + 1\n    return num_socks_to_pick\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    result_in_g = 2.5 * kg_to_g\n    return result_in_g\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km per 5 cm on the map\n    map_distance_cm = 12  # distance on the map in cm\n    ground_distance_km = map_distance_cm * scale_ratio  # distance on the ground in km\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let the total number of children be x\n    # Then the number of boys is (3/8)x and the number of girls is (5/8)x\n    # Total sweets distributed = sweets per boy * number of boys + sweets per girl * number of girls\n    # 360 = 4 * (3/8)x + 12 * (5/8)x\n    # By solving the above equation we can find x, and then we can find the number of girls which is (5/8)x\n\n    # Multiply both sides by 8 to clear the fractions\n    # 8 * 360 = 4 * 3 * x + 12 * 5 * x\n    # 2880 = 12x + 60x\n    # 2880 = 72x\n    # x = 2880 / 72\n    # x = 40\n    # Number of girls = (5/8) * 40\n\n    total_children = total_sweets / (fraction_boys * sweets_per_boy + (1 - fraction_boys) * sweets_per_girl)\n    num_girls = (1 - fraction_boys) * total_children\n    return int(num_girls)\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the required number\n    n = symbols('n')\n\n    # Equations based on the given conditions\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n\n    # Solve the system of congruences using Chinese Remainder Theorem\n    residues = [5, 6, 6]\n    moduli = [7, 8, 10]\n    n_sol = solve([eq1, eq2, eq3])[0]\n\n    # Now we need to find the sum of quotients when n is divided by 6, 7, and 8\n    # To do this we substitute n in the following equations and solve for the sum\n    sum_quotients = (n_sol // 6) + (n_sol // 7) + (n_sol // 8)\n    \n    # The problem states that the sum of quotients when n is divided by 6, 7 and 8 is 265\n    # Since we found n that satisfies previous modular equations, we just need to check if sum of quotients is also 265\n    while sum_quotients != 265:\n        # If not, we keep adding the least common multiple of the moduli to n until sum of quotients equals 265\n        lcm_moduli = 7 * 8 * 10 // (2 * 5)  # LCM(7, 8, 10)\n        n_sol += lcm_moduli\n        sum_quotients = (n_sol // 6) + (n_sol // 7) + (n_sol // 8)\n    \n    return n_sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    speed_mps = speed_kmh * (1000 / 3600)  # converting km/h to m/s\n    time_seconds = 24\n\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # According to the definition, 1 is neither prime nor composite.\n    # Composite numbers are defined to have more than two factors; hence, the number 1 is excluded.\n    # For any other positive integer, if it's not prime, it is indeed composite.\n    # Therefore, Pip's statement needs a clarification that 1 is an exception to this rule.\n    \n    # Check if Pip is correct ignoring the special case of 1.\n    pip_is_correct_except_for_1 = True\n\n    return pip_is_correct_except_for_1\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    product = Fraction(1, 1)\n    for i in range(2, 10):\n        product *= Fraction(i + 1, i)\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            if x2 == x1:\n                continue\n            for x3 in range(1, 12):\n                if x3 == x1 or x3 == x2:\n                    continue\n                x4 = 12 - x1 - x2 - x3\n                if x4 > 0 and x4 != x1 and x4 != x2 and x4 != x3:\n                    count += 1\n    return count // 24  # Each combination is counted 24 times\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        i += 1\n        if str(40309 + i) == str(40309 + i)[::-1]:\n            return i\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Total sweets Kasia has\n    total_sweets = 42\n    \n    # Sweets kept by Kasia for herself\n    sweets_kept_by_kasia = 13\n    \n    # Sweets shared between Maya and Lucie\n    sweets_shared = total_sweets - sweets_kept_by_kasia\n    \n    # Sweets received by Lucie\n    sweets_lucie = sweets_shared / 2\n    \n    # Fraction of sweets Lucie gives to Joan\n    fraction_to_joan = 2 / 7\n    \n    # Sweets Lucie gives to Joan\n    sweets_lucie_to_joan = sweets_lucie * fraction_to_joan\n    \n    # Sweets Lucie keeps after giving to Joan\n    sweets_lucie_keeps = sweets_lucie - sweets_lucie_to_joan\n    \n    return sweets_lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boys_more = 52\n    students = 0\n    \n    for i in range(1, 1000, 2):  # Assuming square side is an odd number since boys are more\n        boys = i * i\n        girls = (i - 2) * (i - 2) if i - 2 > 0 else 0\n        diff = boys - girls\n    \n        if diff == boys_more:\n            students = boys + girls\n            break\n    \n    return students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable\n    x = symbols('x')\n    \n    # Set up the equation\n    equation = Eq(3 + 2*(9 - x), 4*(x - 5) + 5)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the total pension be represented by 1 (whole pension)\n    # On Friday, Granddad spends 1/4 of his pension\n    friday_spending_fraction = 1/4\n    # Remaining pension after Friday\n    remaining_after_friday = 1 - friday_spending_fraction\n    \n    # On Saturday, Granddad spends 1/3 of the remaining pension\n    saturday_spending_fraction = 1/3\n    saturday_spending = remaining_after_friday * saturday_spending_fraction\n    \n    # Remaining pension after Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spending\n    \n    # The remaining fraction of his pension after the weekend spending\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # let x be the capacity of the fish tank in litres\n    # using a 5-litre pail causes an overflow of 4 litres, so x + 4 = 5 litres\n    # using a 3-litre pail requires x / 3 + 4 additional 3-litre pails to fill the tank\n    # This means that after filling with the initial 3-litre pail, we need (x - 3) / 3 + 4 more pails to fill the tank\n    # So (x - 3) / 3 + 4 = 1 (because we use 1 initial 3-litre pail)\n    # After organizing we get (x - 3) / 3 = -3\n    # So, x - 3 = -9\n    # Finally, x = -6 which contradicts with x + 4 = 5\n    \n    # More adequately represented:\n    # 5-litre pail: tank capacity + overflow = 5 litres\n    # 3-litre pail: tank capacity = 4 * 3 litres (for the 4 additional pails) + 3 litres (for the initial pail)\n    \n    # Let the capacity of the tank be x litres.\n    # From the first scenario, x + 4 = 5 * 1 ==> x = 1 litre\n    # From the second scenario, x = 3 * (4 + 1) ==> x = 3 * 5 = 15 litres\n    \n    # Therefore, x is 15 litres\n    x = 15\n    return x\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n    adults = total_people * (ratio_adults / ratio_sum)\n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    \n    ans = num_school_bags * num_pencil_boxes\n    return ans\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    apples, pears = symbols('apples pears')\n\n    # Define the equations based on the given ratios\n    equation1 = Eq(apples / pears, 3 / 4)\n    equation2 = Eq((apples + 36) / (pears - 36), 3 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, pears))\n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # The repeating sequence is \"6129043\" and its length is 7\n    repeating_sequence = [6, 1, 2, 9, 0, 4, 3]\n    sequence_length = 7\n\n    # Calculate number of complete sequences in 212 digits\n    complete_sequences = 212 // sequence_length\n\n    # Calculate the remaining digits after the complete sequences\n    remaining_digits = 212 % sequence_length\n\n    # Sum the digits in the complete sequences\n    sum_complete_sequences = sum(repeating_sequence) * complete_sequences\n\n    # Sum the remaining digits\n    sum_remaining_digits = sum(repeating_sequence[:remaining_digits])\n\n    # The total sum of the first 212 digits\n    total_sum = sum_complete_sequences + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    n = 1\n\n    while True:\n        current = n\n        while current % 2 == 0:\n            count_2 += 1\n            current //= 2\n        while current % 5 == 0:\n            count_5 += 1\n            current //= 5\n        \n        if min(count_2, count_5) >= 28:\n            break\n        n += 1\n    \n    ans = n\n    return ans\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Initial condition: a square array\n    # Let's denote the original side of the square as n (rows or columns)\n    # Adding 31 soldiers results in n^2 + n + n + 1 = n^2 + 2n + 1 soldiers (since one row and one column are added)\n    # Therefore, the 31 soldiers are equal to the added row and column (minus the intersection which is counted twice): 31 = 2n + 1\n    # Now we solve for n\n\n    n = (31 - 1) // 2  # solve for n from the equation 31 = 2n + 1\n\n    # The total number now is the square of the new side of the square.\n    total_soldiers = (n + 1) ** 2  # the side of the square is now n+1 (original n plus the added row/column)\n\n    return total_soldiers\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n = 12 # Number of people\n    # Total number of handshakes is the combination of 12 people taken 2 at a time.\n    ans = n * (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Since there are yellow socks in the quantity of 9 which is the largest \n    # number, Daniel might pick all yellow socks without getting a complete pair of \n    # any other color. So we take all 9 yellow socks.\n    \n    # Then, he could pick 7 green socks and still not have two pairs of same color.\n\n    # At this point, he has 9 yellow socks and 7 green socks, but no two pairs of\n    # matching socks with the same colour.\n\n    # Next, he picks 4 white socks. He now has 2 pairs of white socks for sure. \n    \n    # But the question asks for the smallest number of socks to have two pairs of\n    # matching socks with the same colour, so we have to continue.\n\n    # Next, he can pick 2 red socks, and he will have 1 pair of red socks definitely.\n\n    # Finally, he picks 1 more sock which must give him a pair of any color \n    # because we have only green, yellow and black socks left.\n\n    # Therefore, the smallest number of socks Daniel must pick is \n    # 9 (yellow) + 7 (green) + 4 (white) + 2 (red) + 1 (any for the pair) = 23.\n    \n    ans = 9 + 7 + 4 + 2 + 1\n\n    return ans\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_cost_per_bottle = 1.09\n    chocolate_bar_cost = 0.55\n\n    total_lemonade_cost = 5 * lemonade_cost_per_bottle\n    total_chocolate_bar_cost = 6 * chocolate_bar_cost\n\n    total_cost = total_lemonade_cost + total_chocolate_bar_cost\n    total_paid = 10\n\n    change = total_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam = symbols('sam')\n    \n    equation = Eq(sam + 4, 2 * (sam - 4))\n    \n    sam_age = solve(equation, sam)\n    \n    return sam_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total letters in 'RAINBOW' are 7. There are 4 consonants (R, N, B, W) and 3 vowels (A, I, O).\n    total_letters = 7\n    consonants = 4\n    vowels = 3\n\n    # Total ways to arrange the consonants (R, N, B, W)\n    consonant_arrangements = factorial(consonants)\n    \n    # Since the vowels cannot be together, calculate the number of positions available for the vowels.\n    # There are 5 possible positions for vowels _ R _ N _ B _ W _\n    vowel_positions = consonants + 1\n\n    # Total ways to arrange the vowels (A, I, O) in the 5 possible positions\n    vowel_arrangements = vowel_positions * factorial(vowel_positions - vowels)\n\n    # Calculate the number of arrangements of vowels and consonants separately\n    consonants_permutation = consonant_arrangements\n    vowels_permutation = factorial(vowels)\n    \n    # Total arrangements where vowels are never together is the product of the arrangements\n    # of the consonants and the possible arrangements of the vowels within the consonant structure\n    total_arrangements = consonants_permutation * (vowel_arrangements - vowels_permutation)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    smallest_odd_number = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 == 1:\n            smallest_odd_number = min(smallest_odd_number, number)\n    \n    return smallest_odd_number\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let \"a\" be the first term and \"d\" be the common difference.\n    # Sum of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n\n    # From S_10:\n    # 5 * (2a + 9d) = 20\n    # 2a + 9d = 4 ... (1)\n    \n    # From S_30:\n    # 15 * (2a + 29d) = 90\n    # 2a + 29d = 6 ... (2)\n    \n    # Subtract equation (1) from equation (2):\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 20d = 2\n    # d = 2 / 20\n    d = 2 / 20\n    \n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Check all numbers between 10 and 20\n    for number in range(10, 21):\n        # Check if number is a multiple of 4 and a factor of 36\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_stickers = total_stickers * (4 / ratio_sum)\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n    speed_mps = speed_kmh * (1000 / 3600)  # Convert speed from km/h to m/s\n    distance = speed_mps * time_seconds  # Calculate distance in meters\n\n    return distance\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # chickens and goats combined\n    equation1 = Eq(chickens + goats, 40)\n    # 3 times the number of chickens is 5 times the number of cows\n    equation2 = Eq(3 * chickens, 5 * cows)\n    # 2 times the number of goats is 10 times the number of cows\n    equation3 = Eq(2 * goats, 10 * cows)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    \n    # chickens have 2 feet, goats and cows have 4 feet\n    total_feet = 2 * solutions[chickens] + 4 * (solutions[goats] + solutions[cows])\n    \n    return total_feet\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_apples = symbols('total_apples')\n    \n    # Equation: 40 = (4/7) * (1/2) * total_apples\n    equation = Eq(40, (4/7) * (1/2) * total_apples)\n    \n    # Solve for the total number of apples\n    solutions = solve(equation, total_apples)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_num = min(all_numbers, key=lambda x: abs(x - 2978))\n\n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    count = 0\n    for i in range(11):\n        count += i\n    return count\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Given:\n    # The average of the first 2 numbers is 10, so the sum of the first 2 numbers is 2 * 10 = 20.\n    sum_first_2 = 10 * 2\n    # The average of the last 2 numbers is 22, so the sum of the last 2 numbers is 2 * 22 = 44.\n    sum_last_2 = 22 * 2\n    # The average of the first and last numbers is 14, so the sum of the first and last numbers is 2 * 14 = 28.\n    sum_first_last = 14 * 2\n\n    # Let the four numbers be a, b, c, and d respectively.\n    # We have:\n    # a + b = 20 (sum of the first 2 numbers)\n    # c + d = 44 (sum of the last 2 numbers)\n    # a + d = 28 (sum of the first and last numbers)\n\n    # So, the sum of the two middle numbers b and c will be:\n    # (a + b) + (c + d) - (a + d) = 20 + 44 - 28\n    sum_middle_2 = sum_first_2 + sum_last_2 - sum_first_last\n\n    # The average of the two middle numbers will be their sum divided by 2.\n    average_middle_2 = sum_middle_2 / 2\n    return average_middle_2\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_all_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_all_terms\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    initial_number = (result + 10) / 2\n    return initial_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n    sum_AB = average_AB * 2\n    sum_ABC = sum_AB + C\n    average_ABC = sum_ABC / 3\n    return average_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using Pigeonhole Principle: if 50 cakes are put into 9 layers, at least one layer\n    # must have at least ceil(50 / 9) cakes.\n    min_cakes_in_top_layer = (total_cakes + layers - 1) // layers\n\n    return min_cakes_in_top_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23 ** 0.5)  # largest integer less than the sqrt of 23\n    square_perimeter = max_side_length * 4\n    cut_length = 23 - square_perimeter\n    return cut_length\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_chinese_english = 34\n    average_english_math = 36\n    average_chinese_math = 44\n\n    # Using the Inclusion-Exclusion Principle\n    # Let C be the total age of Chinese teachers, E be that of English teachers, and M be that of Math teachers.\n    # C + E = average_chinese_english * 2\n    # E + M = average_english_math * 2\n    # C + M = average_chinese_math * 2\n    # Adding them all up: 2C + 2E + 2M = (average_chinese_english + average_english_math + average_chinese_math) * 2\n    # To find the average for 3 teachers: (C + E + M) / 3\n    # (2C + 2E + 2M) / 6 = (average_chinese_english + average_english_math + average_chinese_math) / 3\n    # But we need to subtract one average because each teacher was counted twice in the sum of pairs\n\n    total_pair_average = average_chinese_english + average_english_math + average_chinese_math\n    average_all_three = (total_pair_average - 34) / 3  # Subtract the average for Chinese and English teachers\n\n    return average_all_three\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = (21 + 1) * 7 - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = 10  # Total number of boxes\n    a1 = 11  # Number of cookies in the first box\n    an = symbols('an')  # Number of cookies in the last box\n    total_cookies = 425  # Total number of cookies\n\n    # Sum of arithmetic progression: n/2 * (a1 + an)\n    equation = Eq(n / 2 * (a1 + an), total_cookies)\n    # Solve for 'an' which is the number of cookies in the last box\n    last_box_cookies = solve(equation, an)[0]\n    # The difference between the number of cookies in two adjacent boxes\n    difference = (last_box_cookies - a1) / (n - 1)\n\n    return difference\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    for i in range(10, 100):\n        if (7007 % i == 0) and (7007 // i < 100) and (7007 // i > 9) and (i % 7 == 0) and ((7007 // i) % 7 == 0):\n            num1 = i\n            num2 = 7007 // i\n            return num1 + num2\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3 / 4 * chelsia, 2 / 3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "import math\n\ndef solution():\n    total_sum = 0\n    for i in range(1, 2019):\n        fractional_part = ((2018 + i) / 5) - math.floor((2018 + i) / 5)\n        total_sum += fractional_part\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Since the numbers are consecutive odd numbers, the difference between them is 2.\n    # Let the first term be x, then the terms are x, x+2, x+4, ..., x+12\n    # The sum of an arithmetic sequence is (n/2) * (first_term + last_term)\n    # where n is the number of terms, first_term is x and last_term is x+12\n    # We are given that sum is 357 and n=7\n    # So the equation is (7/2) * (2x + 12) = 357\n    \n    # We can solve for x to find the first term which is the smallest of the seven numbers\n    x = (357 * 2) / 7 - 12\n    return int(x)\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    identical_ones = 2\n\n    # Number of permutations for all distinct elements\n    permutations_all_distinct = factorial(total_digits)\n    \n    # Divide by the factorial of the number of identical elements\n    # to correct for over-counting those permutations\n    permutations = permutations_all_distinct // factorial(identical_ones)\n\n    return permutations\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = (3 / 10) * total_students\n    year_5_girls = (3 / 5) * year_5_students\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A = 1 / sum(1 / i for i in range(1995, 2009))\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Carter be x metres per minute\n    # Then the speed of Martin is (x + 20) metres per minute\n    x = symbols('x')\n\n    # Given ratio of times taken (t_martin / t_carter) = 9/13\n    # Since distance = speed * time, and the distances are equal for both,\n    # We can write the relation as (x + 20)/x = 13/9\n    equation = Eq((x + 20)/x, 13/9)\n\n    # Solve the equation to find the value of x, the speed of Carter\n    carter_speed = solve(equation, x)\n\n    return carter_speed[0]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Dividing by the number of permutations for each combination\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # 2 is the only even prime number.\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    joint_hours = 6\n    fred_hours = 9\n\n    # Let's find the work rates in \"room per hour\"\n    fred_rate = 1 / fred_hours\n    joint_rate = 1 / joint_hours\n\n    # Now we find George's rate\n    george_rate = joint_rate - fred_rate\n\n    # George's time to paint the room on his own is the inverse of his rate\n    george_hours = 1 / george_rate\n\n    return george_hours\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    cloth_used_for_dress = symbols('x')\n    cloth_left = total_cloth - cloth_used_for_dress\n\n    return cloth_left\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    # To make sure we don't get two apples of the same color, we pick:\n    # 14 red apples + 1 yellow apple = 15 (all red apples + one yellow apple)\n    # The next apple we pick must be a yellow, ensuring two apples of the same color\n    ans = red_apples + 1 \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    red_end = 20\n    red_black_end_ratio = 5 / 13\n    black_end = red_end / red_black_end_ratio\n    red_start_red_end_ratio = 3 / 7\n    black_start = black_end / red_start_red_end_ratio\n    red_start = red_start_red_end_ratio * black_start\n    red_sold = red_start - red_end\n\n    return int(red_sold)\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132 + 68) * (520 - 506)\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    legs_cats = 2 * 4\n    legs_dogs = 2 * 4\n    legs_rabbit = 1 * 4\n    legs_birds = 0  # birds typically have 2 legs, but they are not considered in the total leg count here\n\n    total_legs_other_pets = legs_cats + legs_dogs + legs_rabbit\n    legs_birds_total = 28 - total_legs_other_pets\n\n    number_of_birds = legs_birds_total // 2  # each bird has 2 legs\n    return number_of_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n  \n    # Since people can pick any of the 5 entrances and order matters, \n    # each person has 5 choices, regardless of other people's choices.\n    ways = total_entrances ** total_people\n\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    last_year_value = 10500\n    # Since last year the value was 10500 after increasing 5%, we can calculate the original price.\n    original_price = last_year_value / 1.05\n    # This year the value decreases by 5%, so we calculate this year's value.\n    this_year_value = original_price * 0.95\n    # The profit or loss is the difference between this year's value and the original price.\n    profit_or_loss = this_year_value - original_price\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n    \n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_numbers = len(numbers) + 1\n    # Sum of the known numbers\n    sum_known = sum(numbers)\n    # Total sum for the average calculation\n    total_sum = average * total_numbers\n    # The missing number\n    missing_number = total_sum - sum_known\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler, pen = symbols('ruler pen')\n\n    # Equation 1: Total cost of rulers and pens\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    # Equation 2: Cost relationship between a ruler and a pen\n    equation2 = Eq(ruler, pen + 0.90)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n\n    num_bags = -(-total_weight // bag_weight)  # Ceiling division\n\n    return num_bags\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for prime in primes:\n        if prime < 50 and prime % 3 == 2 and (prime - 2) % 5 == 0:\n            return prime\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    # Number of terms in one direction (either increasing or decreasing sequence)\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of arithmetic sequence in one direction\n    sum_one_way = num_terms * (first_term + last_term) // 2\n\n    # Total sum is twice the one-way sum, minus the last term which is counted twice\n    total_sum = 2 * sum_one_way - last_term\n\n    return total_sum\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    result += 50  # Reverse of step 8\n    # Now the result should be: ((month * 4 + 6) * 5 - 20) * 5 + day\n\n    # Since after step 6, we know that the multiplication by 5 would make the\n    # last digit of the result equal to the day of birth, we can deduce the day directly\n    day = result % 10\n\n    # To reverse step 6, divide by 5\n    result /= 5\n    result += 20  # Reverse of step 5\n    # Now the result should be: (month * 4 + 6) * 5\n\n    # To reverse step 4, divide by 5\n    result /= 5\n    result -= 6  # Reverse of step 3\n    # Now the result should be: month * 4\n\n    # To reverse step 2, divide by 4\n    month = result / 4\n\n    return int(month), int(day)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    richard_money = 10\n\n    # Richard buys the first cup\n    richard_money -= initial_cup_price\n    number_of_cups = 1  # He gets one full cup initially\n\n    # Use the rest of the money for refills\n    number_of_refills = richard_money // refill_price\n    number_of_cups += number_of_refills\n\n    return number_of_cups\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # There are 3 types of books which can be arranged in 3! ways.\n    type_arrangement = factorial(3)\n    \n    # Each type of book can be arranged among themselves.\n    story_books_arrangement = factorial(2)\n    comic_books_arrangement = factorial(3)\n    science_books_arrangement = factorial(4)\n\n    # The total number of arrangements is the product of the arrangements of each type and their internal arrangements.\n    total_arrangements = type_arrangement * story_books_arrangement * comic_books_arrangement * science_books_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    tax_below_50k = 0.06 * 50000\n    tax_above_50k = (0.06 + T/100) * (120000 - 50000)\n\n    total_tax = Eq(tax_below_50k + tax_above_50k, 10000)\n\n    T_value = solve(total_tax, T)[0]\n\n    return T_value\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # Since each friend must get at least 1 ice-cream, we give one to each first.\n    # We now have 5 - 3 = 2 ice-creams left to distribute freely among 3 friends.\n    \n    # We can think of this as a stars and bars problem.\n    # With 2 identical stars (ice-creams) and 2 bars to divide them into 3 sections\n    # (for the 3 friends).\n    \n    # The total number of ways to arrange 2 stars and 2 bars is:\n    # (number_of_stars + number_of_bars) choose (number_of_bars)\n    \n    # We have 2 stars and 2 bars, so the computation is:\n    ways = comb(2 + 2, 2)\n\n    return ways\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    total_peaches_5_monkeys_4_days = peaches_per_monkey_per_day * 5 * 4\n    return total_peaches_5_monkeys_4_days\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's call the price per serving of ice cream as 'price'\n    # and the amount of money Sophie's mother gave her as 'money'.\n    \n    # From the problem we know:\n    # money = 3 * price + 0.30 (because she bought 3 servings and had $0.30 left)\n    # money + 2.30 = 5 * price (because she was short of $2.30 for 5 servings)\n    \n    # Now we can setup a simple equation to solve this problem\n    # (3 * price + 0.30) + 2.30 = 5 * price\n    # 3 * price + 2.60 = 5 * price\n    # 2.60 = 2 * price\n    # price = 2.60 / 2\n    price = 2.60 / 2\n    \n    # Now we calculate the money Sophie's mother gave her \n    # using the price per serving of ice cream\n    money = 3 * price + 0.30\n    \n    return money\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # in m/min\n    cycling_speed = 60  # in m/min\n\n    # Assuming the distance to the library is D meters\n    # Time taken to walk to the library is D / walking_speed\n    # Time taken to cycle back from the library is D / cycling_speed\n    # Total distance for the whole trip is 2D meters\n    # Total time for the whole trip is D/walking_speed + D/cycling_speed\n    # Average speed is total distance divided by total time\n\n    D = 1  # We can assume any distance as it will be canceled out in the calculation\n    total_distance = 2 * D\n    total_time = D / walking_speed + D / cycling_speed\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Given averages and total spent amounts\n    jan_to_mar_avg = 450\n    apr_to_jul_avg = 350\n    aug_to_oct_total = 1250\n    nov_to_dec_avg = 400\n\n    # January to March (3 months), April to July (4 months), August to October (3 months), November to December (2 months)\n    total_months = 3 + 4 + 3 + 2\n\n    # Total spent from January to March, April to July, and November to December\n    jan_to_mar_total = jan_to_mar_avg * 3\n    apr_to_jul_total = apr_to_jul_avg * 4\n    nov_to_dec_total = nov_to_dec_avg * 2\n\n    # Total spent for the whole year\n    total_spent_for_year = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n\n    # Calculating average spent per month from January to December\n    average_per_month = total_spent_for_year / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3.5 / (3 * x + 2)) + (2 / (1.5 * x + 1)), (4.5 / (5 - 6 * x)) - (3 / (2.5 - 3 * x)))\n    result = solve(equation, x)\n    \n    ans = result[0]\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols\n    x, y = symbols('x y')\n\n    # Given proportional relationship\n    proportional_relation = 9 / x - y / 2\n\n    # Set up the equation\n    equation = proportional_relation\n\n    # Solve for y when x=3\n    solved_y = solve(equation.subs(x, 3), y)\n\n    # Return the result\n    return solved_y[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # All possible permutations of the digits 2, 3, 5, and 6\n    perms = permutations(['2', '3', '5', '6'])\n    \n    # Filter only the odd permutations (last digit should be odd)\n    odd_numbers = [int(''.join(p)) for p in perms if int(p[-1]) % 2 != 0]\n    \n    # Return the smallest odd permutation\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    return 3\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    x = symbols('x')\n    expression = ((x + 3) * 2 - 2 + 10) / 2 - x\n    ans = expression.simplify()\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let F be the original number of Felicia's bracelets and J be the original number of Janice's bracelets (J=96)\n    from sympy import symbols, Eq, solve\n    \n    F = symbols('F')\n    J = 96  # Initial number of bracelets Janice had\n    \n    # Felicia sold 3/5 of her bracelets\n    sold_by_felicia = (3/5) * F\n    \n    # Janice bought 2/5 of the bracelets Felicia sold\n    bought_by_janice = (2/5) * sold_by_felicia\n    \n    # After selling and buying, the ratio of Felicia's to Janice's bracelets became 5:7\n    # Felicia has F - bought_by_janice bracelets left\n    # Janice has J + bought_by_janice bracelets now\n    # (F - bought_by_janice) / (J + bought_by_janice) = 5/7\n    \n    eq = Eq((F - bought_by_janice) / (J + bought_by_janice), 5/7)\n    \n    F_value = solve(eq, F)[0]  # Solve for original number of Felicia's bracelets\n\n    number_bought_by_janice = bought_by_janice.subs(F, F_value)  # Calculate how many bracelets Janice bought\n\n    return number_bought_by_janice\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    \n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(51, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count_two_sevens = 0\n    count_two_sevens += 8  # numbers like 77x\n    count_two_sevens += 8  # numbers like x77 (excluding 077)\n    count_two_sevens += 8 * 9  # numbers like 7x7 (excluding 707)\n\n    count_two_sevens -= 8  # Subtract the numbers that were counted twice, like 577 and 775. \n\n    count_three_sevens = 1  # The number 777\n\n    return count_two_sevens + count_three_sevens\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n    \n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n    \n    solutions = solve((equation1, equation2), (jack, kyle))\n    \n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Worst case scenario: Annabella takes one by one all shirts that are not yellow\n    # There are 6 orange, 4 pink, and 12 brown shirts, which sums up to 22 non-yellow shirts\n\n    # After taking out all these 22 shirts without getting a yellow one, \n    # the next shirt she takes out must be yellow for sure.\n    # So she needs to take out 22 + 1 shirts to get at least one yellow shirt.\n    ans = 22 + 1\n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    total_individual_cost = 15 * individual_packet_cost\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    simple_interest = principal * rate * time\n    total_amount = principal + simple_interest\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Total number of terms (n)\n    n = 20\n    # Sum of the arithmetic sequence (S)\n    S = 560\n    # Common difference (d)\n    d = 2\n    \n    # Formula for the sum of an arithmetic sequence: S = (n/2) * (2a + (n-1)d)\n    # where 'a' is the first term of the sequence.\n    # Rearrange the formula to solve for 'a':\n    # a = (S/n - (n-1)d) / 2\n    \n    # Calculate the first term 'a'\n    a = (S/n - (n-1) * d) / 2\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    well_depth = 8\n    climb_up = 3\n    slide_down = 2\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < well_depth:\n        day += 1\n        total_climbed += climb_up\n        if total_climbed >= well_depth:\n            break\n        total_climbed -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Number of pages read in the first four days\n    pages_first_four_days = 4 * 25\n    \n    # Number of pages read in the following six days\n    pages_following_six_days = 6 * 40\n    \n    # Number of pages read in the last five days\n    pages_last_five_days = 80\n    \n    # Total number of pages read\n    total_pages = pages_first_four_days + pages_following_six_days + pages_last_five_days\n    \n    # Total number of days\n    total_days = 4 + 6 + 5\n    \n    # Average pages read per day\n    average_pages = total_pages / total_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_toys_after = 14\n    brother_toys_after = 12\n    diff_toys = penny_toys_after - brother_toys_after\n\n    brother_toys_original = brother_toys_after - (10 - diff_toys)\n    \n    return brother_toys_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_A = 14\n    birds_B = birds_A + 7\n    total_birds = birds_A + birds_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    return 123 * 321\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        swapped_age = int(str(age)[1] + str(age)[0]) + 1\n        if swapped_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_series = n * (n + 1) // 2\n    return sum_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To ensure 4 cards of the same suit, Tom could draw:\n    # 3 cards of each suit and not have 4 of the same, so that's 3*4 = 12 cards\n    # The next card drawn is guaranteed to be the fourth card of some suit\n    return 12 + 1\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    sold_percentage = 0.60\n    remaining_tickets = 28\n    total_tickets = remaining_tickets / (1 - sold_percentage)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    spent = symbols('spent')\n\n    hayden_savings = 1420 - spent\n    mitchell_savings = 505 - spent\n    equation = Eq(hayden_savings, 4 * mitchell_savings)\n\n    solution = solve(equation, spent)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    girls = 45\n    boys_to_girls_ratio = 3/8\n    adults_to_total_ratio = 3/7\n    \n    children = girls / (1 - boys_to_girls_ratio)\n    total_people = children / (1 - adults_to_total_ratio)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's total amount in two-dollar notes\n    two_dollar_notes = 5 * 2\n    # Jim's total amount in fifty-cent coins converted to dollars\n    fifty_cent_coins = 7 * 0.50\n    # Total amount before buying the file\n    total_amount = two_dollar_notes + fifty_cent_coins\n    # Price of the file\n    file_price = 11.95\n    # Total amount after buying the file\n    remaining_amount = total_amount - file_price\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days_to_reach_one_day_short = (total_distance - climb_per_day) // net_distance_per_day\n    final_day = days_to_reach_one_day_short + 1\n\n    return final_day\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    n_pupils = 18\n    r_seats = 3\n\n    ans = permutations(n_pupils, r_seats)\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    spaces_between_ginkgos = ginkgo_trees - 1\n    willow_trees_per_space = 2\n\n    total_willow_trees = spaces_between_ginkgos * willow_trees_per_space\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    ship_speed = 28\n    current_speed = 3\n    distance = 150\n\n    upstream_speed = ship_speed - current_speed\n    time = distance / upstream_speed\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a, b, c be the amounts Andrew, Brian, and Christopher have respectively\n    a, b, c = symbols('a b c')\n    \n    # Equations based on the problem statement\n    ab_eq = Eq(a + b, 40)     # Andrew + Brian = £40\n    ac_eq = Eq(a + c, 37)     # Andrew + Christopher = £37\n    bc_eq = Eq(b + c, 25)     # Brian + Christopher = £25\n    \n    # Solving the system of equations\n    solutions = solve((ab_eq, ac_eq, bc_eq), (a, b, c))\n    \n    # The total amount is the sum of amounts each boy has\n    total_amount = solutions[a] + solutions[b] + solutions[c]\n    \n    return total_amount\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Equations based on the problem statement:\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 93\n\n    # Adding all equations: Adam + Ben + Ben + Carl + Adam + Carl = 102 + 97 + 93\n    # Simplifying: 2*Adam + 2*Ben + 2*Carl = 292\n    # Dividing by 2 gives the total weight\n    total_weight = (102 + 97 + 93) // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    \n    total_amount = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_amount\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_price_per_kg = 7.48\n    cheese_weight_g = 500\n    apple_price_each = 0.12\n    num_apples = 8\n    yoghurt_price_each = 0.46\n    num_yoghurts = 2\n    note_value = 10\n    \n    total_cheese_cost = (cheese_price_per_kg / 1000) * cheese_weight_g\n    total_apple_cost = apple_price_each * num_apples\n    total_yoghurt_cost = yoghurt_price_each * num_yoghurts\n\n    total_cost = total_cheese_cost + total_apple_cost + total_yoghurt_cost\n    change = note_value - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Zack's rate of selling aircrafts per hour\n    zack_rate = 150\n    \n    # Combined rate of selling aircrafts per hour\n    combined_rate = 1200 / 6\n    \n    # Andy's rate of selling aircrafts per hour\n    andy_rate = combined_rate - zack_rate\n    \n    # The time it takes for Andy to sell all the aircrafts by himself\n    andy_time = 1200 / andy_rate\n    \n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    people_diff = 80\n    total_people = 0\n\n    # Iterate through possible square side lengths, increasing by 2 to alternate between students and teachers\n    for side_length in range(1, 1000, 2):\n        students_in_layer = (side_length**2) - ((side_length - 2)**2)\n        teachers_in_layer = ((side_length - 1)**2) - ((side_length - 3)**2)\n\n        # Update count of students and teachers\n        total_students = students_in_layer + total_people\n        total_teachers = teachers_in_layer + total_people\n\n        # Check the condition\n        if total_students - total_teachers == people_diff:\n            total_people = total_students + total_teachers\n            break\n\n        total_people += students_in_layer + teachers_in_layer\n\n    return total_people\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n    \n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n    \n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    # Let the smaller number be x\n    # Then the bigger number would be 3x\n    # According to the problem, x + 3x = 528\n    # Simplify the equation: 4x = 528\n\n    x = 528 / 4\n\n    # Now calculate the bigger number which is 3 times the smaller number\n    bigger_number = 3 * x\n\n    return bigger_number\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return total_savings\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total = 400\n\n    # Given conditions\n    alan_amount = 74\n    bilal_amount = 86\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total)\n\n    # Substituting alan and bilal's amount\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    # Solving equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily, alan, bilal))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repayment_to_mum = 10.50\n    remaining_after_repayment = initial_amount - repayment_to_mum\n    amount_spent_on_magazines = remaining_after_repayment / 2\n    amount_left = remaining_after_repayment - amount_spent_on_magazines\n    return amount_left\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2 * (length + width), 72)\n    \n    solutions = solve((equation1, equation2), (length, width))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the amounts of money each person originally had\n    steve, mark, ryan = symbols('steve mark ryan')\n\n    # Create symbol for cost of the meal\n    cost = symbols('cost')\n\n    # Equations based on the given problem\n    equation1 = Eq(steve, mark + 40)  # Steve had $40 more than Mark\n    # Ratios if Steve paid\n    equation2 = Eq((steve - cost) / (mark / 3), 8)\n    equation3 = Eq((steve - cost) / (ryan / 3), 9)\n    # Ratios if Ryan paid\n    equation4 = Eq((ryan - cost) / (steve / 5), 4)\n    equation5 = Eq((ryan - cost) / (mark / 5), 1)\n    # Ratios if Mark paid\n    equation6 = Eq((mark - cost) / (steve / 10), 1)\n    equation7 = Eq((mark - cost) / (ryan / 10), 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (steve, mark, ryan, cost))\n\n    # Get the cost of the meal\n    return solutions[cost]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    num = 81\n    factors = 0\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # Initialize q to be the smallest possible cube number which is 1\n    q = 1\n    # Loop through all cube numbers up until 44000 \n    # (assuming that q is a natural number and q cannot be 0)\n    while q**3 <= 44000:\n        if 44000 % (q**3) == 0:\n            return 44000 // (q**3)\n        q += 1\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    mu_s = 0.4  # coefficient of static friction\n\n    # Calculate the normal force\n    normal_force = mass * g\n\n    # Calculate the maximum static friction force\n    max_static_friction = mu_s * normal_force\n\n    # Applied force\n    applied_force = 250  # in N\n\n    # The static friction force will be the minimum of the applied force and the maximum static friction force\n    force_static_friction = min(applied_force, max_static_friction)\n\n    return force_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Calculate the amount of salt in each solution\n    salt_nick = 300 * 0.12\n    salt_nicole = 500 * 0.28\n    \n    # Calculate the total amount of salt and the new total solution weight\n    total_salt = salt_nick + salt_nicole\n    total_solution = 300 + 500\n    \n    # Calculate the concentration of the resulting solution\n    concentration = total_salt / total_solution\n    \n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n    # The n-th term of an arithmetic sequence can be expressed as:\n    # a_n = a_1 + (n - 1) * d where d is the common difference\n\n    # Therefore, for the 3rd term:\n    # a_3 = a_1 + 2d\n    # And for the 15th term:\n    # a_15 = a_1 + 14d\n\n    # Now we have two equations:\n    # a_1 + 2d = 23  --> Equation 1\n    # a_1 + 14d = 155 --> Equation 2\n\n    # Now we can find d by subtracting Equation 1 from Equation 2:\n    # (a_1 + 14d) - (a_1 + 2d) = 155 - 23\n    # 12d = 132\n    # d = 132 / 12\n    d = (155 - 23) / (15 - 3)\n    \n    return d\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for A's and B's scores\n    A, B = symbols('A B')\n\n    # Equation based on B's statement: A = B + 50\n    equation1 = Eq(A, B + 50)\n\n    # Equation based on A's statement: A + 25 = 5 * (B - 25)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Return A's score\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # We need to find such a square number (n^2) that is one more than a cube number (m^3)\n    # n^2 = m^3 + 1\n    # Starting from the smallest cube (1^3) and checking for squares\n    m = 1\n    while True:\n        cube = m ** 3\n        square = cube + 1\n        square_root = int(square**0.5)  # Take the square root of the number\n        if square_root**2 == square:  # Check if the square root squared is the original number\n            return square  # When a square number is found\n        m += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let's denote the number of buttons James has as j and Nina has as n.\n    # According to the problem, we have the following equations:\n    # 1) j + n = 24\n    # 2) n - 6 = j + 6\n    \n    # From equation 1) we get n = 24 - j\n    for j in range(24):\n        n = 24 - j\n        # Now we use equation 2) to check if the condition is satisfied with the given j.\n        if n - 6 == j + 6:\n            return n\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_workers * total_hours)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    net_distance = day_distance - night_distance\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # y = 0.5x\n    # This linear equation represents the relationship between the number of bags used (x) and the tax charged (y).\n    # The tax charged is half the number of bags used.\n    return \"y = 0.5 * x\"\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    frac = 8 / 100\n    dec = 0.7\n\n    ans = frac if frac > dec else dec\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    term1 = Fraction(3)\n    term2 = Fraction(4, 5)\n    term3 = Fraction(10, 9)  # 1 1/9 is 10/9 as a fraction\n    term4 = Fraction(11, 2)  # 5 1/2 is 11/2 as a fraction\n    term5 = Fraction(3, 11)\n\n    return term1 * term2 * term3 * term4 * term5\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_payment = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    threshold_days = 5\n    daily_fee_long_term = 20\n\n    # Calculate cost for the initial 5 days\n    initial_cost = flat_fee + (daily_fee_short_term * threshold_days)\n    \n    # If total payment is less than or equal to initial_cost, calculate days in the short term\n    if total_payment <= initial_cost:\n        days = ((total_payment - flat_fee) // daily_fee_short_term)\n    else:\n        # Calculate additional days based on the long term daily fee if payment exceeds initial_cost\n        additional_days_cost = total_payment - initial_cost\n        additional_days = additional_days_cost // daily_fee_long_term\n        days = threshold_days + additional_days\n\n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    chickens_per_dog = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height\n\n    while initial_height * rebound_ratio > 0:\n        initial_height *= rebound_ratio\n        total_distance += initial_height * 2\n\n    return total_distance\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        term = (1/i) - (1/(51-i))\n        product *= term\n    return product\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initially, Sam had an equal number of green and yellow cars\n    equation1 = Eq(green, yellow)\n\n    # After giving away some cars, he had thrice as many yellow toy cars as green toy cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Number of green toy cars he had in the end\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_sequence = (first_term + last_term) * num_terms / 2\n    # Since the sequence is symmetric (repeats back after 400), multiply by 2\n    return int(sum_sequence * 2)\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    distance = 3000\n    speed_buck = 600\n    speed_elephant = 250\n    time_buck = distance / speed_buck\n    time_elephant = distance / speed_elephant\n    \n    return time_elephant - time_buck\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    for sheets in range(1, 58):\n        total_pages = sheets * 2  # Because each sheet has 2 pages, one on each side.\n        for first_page_number in range(1, total_pages):\n            # Calculate the other three page numbers based on the first page.\n            second_page_number = total_pages * 2 - first_page_number\n            third_page_number = first_page_number + 1\n            fourth_page_number = second_page_number - 1\n            \n            # Check if the sum of the four page numbers is 58.\n            if first_page_number + second_page_number + third_page_number + fourth_page_number == 58:\n                return sheets  # Return the number of sheets as the answer.\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    simon_speed = 80  # km/h\n    wife_speed = 60  # km/h\n    distance_difference = 15  # km\n\n    # Calculate relative speed\n    relative_speed = simon_speed - wife_speed  # km/h\n\n    # Calculate the time needed to cover the distance at the relative speed\n    time_needed = distance_difference / relative_speed  # hours\n\n    # Convert time needed to minutes\n    time_needed_minutes = time_needed * 60  # minutes\n\n    # Create a datetime object for the starting time\n    start_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the time of overtaking\n    overtaking_time = start_time + timedelta(minutes=time_needed_minutes)\n\n    # Format the result to return only the time\n    ans = overtaking_time.strftime('%H:%M')\n\n    return ans\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_12_pencils = 1.80\n    # Cost of 1 pencil\n    cost_1_pencil = cost_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7:3\n    # Let cost of 1 pen be 7x and cost of 1 pencil be 3x, where x is a common factor\n    # But we know cost of 1 pencil, so 3x = cost of 1 pencil\n    # Hence, x = cost of 1 pencil / 3\n    x = cost_1_pencil / 3\n    # Now, cost of 1 pen = 7x\n    cost_1_pen = 7 * x\n    # Therefore, cost of 5 pens = 5 * cost of 1 pen\n    cost_5_pens = 5 * cost_1_pen\n    return cost_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee and milk\n    foods = 3   # hamburgers, burritos, and bagels\n\n    combinations = drinks * foods\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlock_count = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                # If divisible by both 3 and 5, the locker's state is unchanged\n                continue\n            # Otherwise, locker is locked because it's only divisible by 3\n        elif i % 5 != 0:\n            # If not divisible by both 3 and 5, locker remains unlocked\n            unlock_count += 1\n    return unlock_count\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to compute number of ways to reach a given step\n    def ways_to_step(n):\n        a, b = 1, 2\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    # Nelson must step on the 5th step, so we calculate the ways to the 5th step,\n    # and the ways from the 5th to the 10th step separately, then multiply.\n    ways_to_5th_step = ways_to_step(4)  # Ways to reach step 4 (next step is 5th)\n    ways_after_5th_step = ways_to_step(5)  # Ways from 5th to 10th step\n    \n    # Multiplying both ways gives total ways to reach 10th step\n    # after stepping on the 5th\n    total_ways = ways_to_5th_step * ways_after_5th_step\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_for_2_pancakes = 3  # minutes\n    pancakes = 2\n    total_time = 12  # minutes\n\n    pancakes_cooked = (total_time / time_taken_for_2_pancakes) * pancakes\n\n    return int(pancakes_cooked)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The fastest two (Jason and Chi Yew) will be responsible for ferrying the others across.\n    # They take 5 minutes to cross together. One returns with the boat, taking another 5 minutes.\n    # Then the two slowest (Wei Jie and Michael) cross together taking 9 minutes (since Wei Jie is the slower one).\n    # Finally, Jason or Chi Yew return to get the last person, taking 5 minutes.\n    # Summing up the times: 5 (first trip) + 5 (return trip) + 9 (second trip) + 5 (final return trip)\n    \n    total_time = 5 + 5 + 9 + 5\n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1/5\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road_length = 500  # Total road length in metres\n    total_days = 5  # Total days to pave the road\n\n    road_per_day = total_road_length / total_days  # Meters of road paved per day\n\n    return road_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_per_country = 8  # 8 would not ensure 9 people from one country\n\n    # Using the pigeonhole principle, with 8 people per country, the maximum people\n    # without having 9 from the same country would be countries*people_per_country\n    # To ensure 9 people from the same country we add 1 more person\n    participants = (countries * people_per_country) + 1\n\n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Since the sum of an arithmetic sequence is (n/2)*(first_term + last_term)\n    # We can use the sum formula: sum = (n/2)*(2*a + (n-1)*d), where n is the number of terms, a is the first term and d is the difference\n    # As the difference d is 1 for consecutive integers, and we know the sum and number of terms, we can find the first term.\n    n = 53\n    sum_of_numbers = 2014\n    d = 1\n\n    a = (2*sum_of_numbers/n - (n-1)*d) / 2  # Formula rearranged to find the first term a\n\n    largest_number = a + (n - 1) * d  # The largest number is the first term plus the difference times the number of terms minus 1\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    incorrect_equation = Eq(88 / A, 22)\n    correct_A = solve(incorrect_equation, A)\n    \n    correct_answer = 98 / correct_A[0]\n    \n    return correct_A[0], correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four_calculators = 32\n    cost_of_one_calculator = cost_of_four_calculators / 4\n    cost_of_twelve_calculators = cost_of_one_calculator * 12\n    return cost_of_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed (laps per minute)\n    lucas_speed = 5 / 6\n    # Miller's speed (laps per minute)\n    miller_speed = 5 / 10\n    \n    # Relative speed\n    relative_speed = lucas_speed - miller_speed\n    \n    # Time between Lucas overtakes Miller for the first and second time (in minutes)\n    time_between_overtakes = 1 / relative_speed\n    \n    return time_between_overtakes\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    max_possible_amount = rounded_amount + 4\n    return max_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return int(total_minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    # Let x be the total number of visitors\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    children = (3/5) * x\n    remaining = x - children\n    men = (1/4) * remaining\n    equation = Eq(children - men, 120)\n\n    total_visitors = solve(equation, x)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost_cents = 80  # $0.80 up to 15 minutes\n    additional_cost_per_minute_cents = 5  # $0.05 for each additional minute\n    total_cost_cents = 140  # $1.40 in cents\n\n    if total_cost_cents <= base_cost_cents:\n        minutes = 15\n    else:\n        additional_minutes_cost_cents = total_cost_cents - base_cost_cents\n        additional_minutes = additional_minutes_cost_cents // additional_cost_per_minute_cents\n        minutes = 15 + additional_minutes\n\n    return minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    # Let x be the mother's current age\n    # Tim is 8 years old\n    # When Tim is x years old, his mother will be 54\n    # So, the number of years it will take for Tim to be x years old will be x - 8\n    # In x - 8 years, the mother will be 54\n    # The mother is currently x years old, in x - 8 years, she will be x + (x - 8) years old\n    # Therefore, we can set up the following equation: x + (x - 8) = 54\n\n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(x + (x - 8), 54)\n    mother_age = solve(equation, x)\n    \n    # We have 2 answers, we need the one that makes sense in our context (mother's age should be greater than Tim's age)\n    # Filter out the negative or same-as-Tim's value\n    mother_age = [age for age in mother_age if age > 8]\n\n    return mother_age[0]\n    \nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length_m = 5.52  # Length of the orange string in meters\n    orange_purple_ratio = 9.2     # The orange string is 9.2 times the length of the purple string\n    green_purple_difference_cm = 24.9 # The green string is 24.9 cm longer than the purple string\n\n    # Compute the length of the purple string\n    purple_string_length_m = orange_string_length_m / orange_purple_ratio\n    \n    # Convert green_purple_difference to meters\n    green_purple_difference_m = green_purple_difference_cm / 100\n    \n    # Compute the length of the green string\n    green_string_length_m = purple_string_length_m + green_purple_difference_m\n    \n    return green_string_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Considering the number puzzle is a common type of puzzle where:\n    # A\n    # BC\n    # DEF\n    # GHIA\n    # We are considering all the letters represent unique digits and \n    # when read as numbers, GHIA should sum up to the sum of A, BC, DEF in vertical form.\n\n    # As we don't have the specific puzzle details, a general solution\n    # for this kind of problem could use itertools permutations to try\n    # every combination until it finds one that satisfies the condition\n    \n    from itertools import permutations\n\n    # Generate all possible permutations of digits for A, B, C, D, E, F, G, H, and I\n    # Since there can be only one A and it's in the first row, it's the same as the last digit of GHIA\n    for perm in permutations('0123456789', 4):\n        A, B, C, D = perm\n        if A != '0':\n            # Convert tuple to int\n            A = int(A)\n            BC = int(B + C)\n            DEF = int(D + B + C)  # B and C are reused as it is vertical\n            GHIA = int(C + D + B + A)\n            if A + BC + DEF == GHIA:\n                return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n    \n    # Total amount of work done by both when they work together for 18 days\n    work_done = combined_rate * 18\n    \n    # Since the job is finished, work_done should be equal to 1 (complete job)\n    # If work_done is greater than 1, then we need to subtract the excess amount which is done by Ivy alone\n    # Since work_done is equal to 1, we have to find the number of days Kevin took off\n    if work_done > 1:\n        # As the job is completed exactly, work_done equals to 1\n        work_done = 1\n    \n    # Ivy's amount of work if she worked alone for 18 days\n    ivy_work_alone = ivy_rate * 18\n    \n    # Remaining work that has to be done by Kevin\n    kevin_work = work_done - ivy_work_alone\n    \n    # Kevin's work converted into days\n    kevin_days_worked = kevin_work / kevin_rate\n    \n    # Days Kevin took off\n    kevin_days_off = 18 - kevin_days_worked\n    \n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece\n    x = symbols('x')\n    # The longer piece is 5 times the shorter piece, so its length is 5x\n    # The sum of both pieces is the total length of the rope, which is 49.5 m\n    equation = Eq(x + 5 * x, 49.5)\n\n    # Solve the equation for x\n    shorter_piece_length = solve(equation, x)[0]\n    # Calculate the length of the longer piece\n    longer_piece_length = 5 * shorter_piece_length\n\n    return round(longer_piece_length.evalf(), 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / ratio_sum) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7, i.e., 0.2 * x\n    # After some girls miss school, 400 pupils remain, and 10% of them are Year 7, i.e., 0.1 * 400\n    # Therefore, the number of Year 7 pupils that remain is same as 20% of x minus the missing girls\n    # We are leaving out the missing girls from the equation since we don't know and don't need to find their exact number\n    # We set up the equation: 0.1 * 400 = 0.2 * x - (0.2 * x - 0.1 * 400)\n    # Which simplifies to: 0.1 * 400 = 0.2 * x - 0.2 * x + 0.1 * 400\n    # Further simplification gives: 0.1 * 400 = 0.1 * 400\n    # It doesn't give us any useful information since we eliminated the unknown we need to solve for.\n    # Therefore, we need to correct our approach.\n    # The right approach:\n    # After some Year 7 girls miss school, there are 40 Year 7 pupils left (10% of 400).\n    # This means that normally there are twice as much, since 20% is twice of 10%, so normally there are 80 Year 7 pupils.\n    # If 80 is 20% of the total, we calculate total by dividing 80 by 20 and then multiplying by 100\n    \n    year7_after = 0.1 * 400\n    year7_normal = year7_after / 0.1 * 0.2\n    total_pupils_normal = year7_normal / 0.2 * 1\n\n    return int(total_pupils_normal)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    distance_per_day = climb_up - slide_down\n    snail_position = 0\n    day = 0\n    \n    while snail_position < well_height:\n        day += 1\n        snail_position += climb_up\n        if snail_position >= well_height:\n            break\n        snail_position -= slide_down\n        \n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of working\n    nancy_rate = 1/6\n    # Combined rate of Nancy and Tim\n    combined_rate = 1/4\n    # Tim's rate of working is the difference between the combined rate and Nancy's rate\n    tim_rate = combined_rate - nancy_rate\n    # Time it takes for Tim to complete the work by himself\n    tim_time = 1/tim_rate\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    money = 100\n    for day in range(1, 16):\n        if day % 2 != 0:  # Deposit on odd days\n            money += 5\n        else:  # Spend on even days\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - slide_down\n    jumps_per_period = 3\n    period_height = effective_jump * jumps_per_period - slide_down\n\n    # Calculate the number of complete periods\n    full_periods = (total_height - jump_up) // period_height\n    height_after_full_periods = full_periods * period_height + jump_up\n\n    # Calculate the remaining jumps after full periods\n    remaining_height = total_height - height_after_full_periods\n    remaining_jumps = 0\n    while remaining_height > 0:\n        remaining_height -= jump_up\n        remaining_jumps += 1\n        if remaining_height > 0:\n            remaining_height += slide_down\n\n    # Total jumps is the jumps in full periods + remaining jumps\n    total_jumps = full_periods * jumps_per_period + remaining_jumps\n    \n    return total_jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the function to calculate the nth term of the series\n    def nth_term(n):\n        if n == 1:\n            return 1/2\n        else:\n            numerator = n - 1\n            denominator_start = (n - 2)**2 + 1\n            denominator_end = n**2 - n\n            return numerator / (denominator_start * denominator_end)\n\n    # Calculate the sum of the series up to the 6th term and the last term separately\n    series_sum = sum(nth_term(n) for n in range(1, 7))\n    last_term = 1/22\n\n    # Add the sum of the series and the last term\n    return series_sum + last_term\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_money_after_dress = 40 / (2/5)\n    initial_money = remaining_money_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    num_zeros = count_trailing_zeros(factorial(999)) - count_trailing_zeros(factorial(300))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Each side of the square will have 60 students including the corners\n    # Since the corners are counted for two sides, we subtract 4 to avoid counting them twice\n    perimeter_students = 60 * 4 - 4  # Students on the perimeter minus the 4 corners\n\n    # The length of the side of the square formed by the students is (perimeter_students / 4) + 1\n    side_length = (perimeter_students // 4) + 1\n\n    # The total number of students is the area of the square\n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve, divisors\n\n    # Define the symbols\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(cars, bikes + bikes / 3)\n    eq2 = Eq(bikes, lorries + lorries / 4)\n    eq3 = Eq(cars + bikes + lorries, 2 * symbols('n'), evaluate=False)\n\n    # Since the total number is even and less than 100, find all even divisors\n    possible_totals = [div for div in divisors(100) if div % 2 == 0 and div < 100]\n\n    # Try all possible total numbers of vehicles and use them to solve the system\n    for total in possible_totals:\n        solutions = solve((eq1, eq2, eq3.subs(symbols('n'), total // 2)), (cars, bikes, lorries))\n        # Check if we found a solution with integer numbers of vehicles\n        if solutions and all(isinstance(v, int) for v in solutions.values()):\n            return solutions\n\n    return None  # Return None if no solution found\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the boxes\n    A, B = symbols('A B', integer=True)\n\n    # Set up the equations based on the problem description\n    # Equation 1: A = B + 64 (There were 64 more buttons in box A than box B)\n    equation1 = Eq(A, B + 64)\n\n    # Equation 2: (A+x)/(B-2x) = 4 (After adding and removing buttons, the ratio of A to B is 4)\n    # But we know that the number of buttons B becomes 28 fewer, so x = 28/2 = 14.\n    # Equation 2 then becomes (A+14) / (B-28) = 4\n    equation2 = Eq((A + 14) / (B - 28), 4)\n\n    # We multiply both sides by (B-28) to remove the denominator\n    equation2 = Eq(A + 14, 4 * (B - 28))\n\n    # Use sympy's solve function to solve the system of equations\n    solution = solve((equation1, equation2), (A, B))\n\n    # Get the value for A which is the number of buttons in box A at first\n    return solution[A]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1) ** 2\n        if layer % 2 == 1:  # Odd layer - red tiles\n            red_tiles += tiles_in_layer\n        else:  # Even layer - green tiles\n            green_tiles += tiles_in_layer\n        total_tiles -= tiles_in_layer\n        layer += 1\n\n    color, difference = ('red', red_tiles - green_tiles) if red_tiles > green_tiles else ('green', green_tiles - red_tiles)\n    \n    return color, difference\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return (18 * 20132013) - (2013 * 180018)\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let's assume all rounds are wins initially\n    total_wins = total_cards // cards_per_win\n\n    # Calculate losses by considering how many wins are in excess\n    excess_wins = total_wins - total_rounds\n    total_losses = excess_wins // (cards_per_loss // cards_per_win)\n\n    return total_losses\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    num_bins = (boulevard_length // interval) + 1  # bins at intervals plus one at the end\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # Check divisibility by 3 and 11 since 33 = 3 * 11\n    # Divisibility by 3: Sum of digits must be divisible by 3\n    # Divisibility by 11: The difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even\n    # positions must be divisible by 11\n\n    # Constant part of the number's sum of digits\n    sum_digits_const = 2 + 6 + 7  # Initial sum of 267\n    \n    # For the repeating part 2011, sum is 4 and it alternates position\n    sum_digits_2011_odd = 2 + 1  # Sum of 2 and 1 at odd positions\n    sum_digits_2011_even = 0 + 1 # Sum of 0 and 1 at even positions\n    \n    n = 0  # Start with n = 0 repeating '2011' sequences\n    while True:\n        sum_digits_odd = sum_digits_const + n * sum_digits_2011_odd\n        sum_digits_even = (n + 1) * sum_digits_2011_even  # +1 because of the digit 6 at the end\n        # Check divisibility for 3 and 11\n        if (sum_digits_odd + sum_digits_even) % 3 == 0 and (sum_digits_odd - sum_digits_even) % 11 == 0:\n            return n  # Minimum n value found\n        n += 1  # Try next value of n\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour = flour_per_cake * number_of_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    \n    while min(x, y, z) > 0:\n        rounds += 1\n        # Player with the most coins gives one to each of the other players.\n        # If there's a tie for most coins, it doesn't matter who gives the coins away.\n        \n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        elif z > x and z > y:\n            z -= 3\n            x += 1\n            y += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Stars and Bars method (n+k-1 choose k-1).\n    from math import comb\n    lollipops = 7\n    plates = 3\n\n    # The number of ways to distribute lollipops into plates\n    # is equivalent to finding solution of x1 + x2 + x3 = lollipops\n    # where x1, x2, x3 are the lollipops on plate 1, plate 2, and plate 3 respectively,\n    # considering the plates are identical.\n    #\n    # Use the \"Stars and Bars\" theorem,\n    # which tells us the number of ways to put n identical objects into k bins is (n+k-1) C (k-1).\n    ans = comb(lollipops + plates - 1, plates - 1)\n\n    return ans\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Time to make one cut\n    time_per_cut = 3 / 3  # Since it takes 3 minutes to make 3 cuts\n\n    # Total cuts needed to get 8 pieces\n    cuts_needed = 8 - 1  # Since 1 log results in 1 more piece than the number of cuts\n\n    # Total time needed\n    total_time = cuts_needed * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng.\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money.\n    rasidah_left = rasidah - 3/5 * rasidah\n    \n    # Chai Seng spent 6/7 of his money.\n    chai_seng_left = chai_seng - 6/7 * chai_seng\n    \n    # Chai Seng had 1/2 as much money left as Rasidah.\n    equation2 = Eq(chai_seng_left, 1/2 * rasidah_left)\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    total_collection = total_cards - duplicates + new_cards\n\n    return total_collection\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Amy and Judy are considered as a single entity plus the other 6 people; we arrange these 7 \"entities\"\n    arrangements = factorial(7)\n    \n    # Once arranged, Amy and Judy can swap places in 2 ways\n    amy_judy_swaps = 2\n    \n    # Multiply arrangements of entities with the internal swaps of Amy and Judy\n    return arrangements * amy_judy_swaps\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies Andy had at first, so Ben had x + 84\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Set up the equations based on the problem statement\n    andy_final = andy_initial + andy_initial / 3\n    ben_final = ben_initial + ben_initial / 5\n    equation = Eq(andy_final, ben_final / 3)\n\n    # Ben initially had 84 more cookies than Andy\n    equation_initial = Eq(ben_initial, andy_initial + 84)\n\n    # Solve the equations\n    solutions = solve((equation, equation_initial), (andy_initial, ben_initial))\n\n    # Andy's final amount of cookies\n    andy_cookies_end = solutions[andy_initial] + solutions[andy_initial] / 3\n\n    return andy_cookies_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years = 0\n    \n    while initial_amount < final_amount:\n        initial_amount += initial_amount * interest_rate\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since Tom raised his hand in both rounds, his number is divisible by GCD of the mystery number and 24\n    # Let's start by considering all possible two-digit numbers divisible by GCD(mystery number, 24)\n    # The GCD of mystery number and 24 must be a factor of 24\n    factors_of_24 = [1, 2, 3, 4, 6, 8, 12, 24]\n    \n    # Finding all two-digit numbers divisible by these factors\n    possible_tom_numbers = set()\n    for factor in factors_of_24:\n        n = factor\n        while n < 100:\n            if n >= 10:  # Tom's hat number must be two-digit\n                possible_tom_numbers.add(n)\n            n += factor\n\n    # Now we need to find combinations where exactly 4 students know after the first question\n    # and 6 students know after the second question. We will do this by brute force checking\"\n    \n    # As the numbers on friends' hats are all two-digit and unique, \n    # We create a range for possible numbers from 10 to 99.\n    all_numbers = set(range(10, 100))\n    \n    # The sum of friends' numbers seen by Tom\n    sum_of_friends_numbers = 0\n    for tom_number in possible_tom_numbers:\n        friends_numbers = all_numbers - {tom_number}\n        for factor in factors_of_24:  # Assume the mystery number is each factor of 24\n        \n            # Count friends whose numbers are divisible by the factor\n            divisible_by_factor = sum(1 for num in friends_numbers if num % factor == 0)\n\n            # Count friends whose numbers are not divisible by the factor\n            not_divisible_by_factor = 8 - divisible_by_factor\n\n            if divisible_by_factor+not_divisible_by_factor == 4:  # First condition\n                # Now check the second condition with 24\n                divisible_by_24 = sum(1 for num in friends_numbers if num % 24 == 0)\n                not_divisible_by_24 = 8 - divisible_by_24\n\n                if divisible_by_24+not_divisible_by_24 == 6 and (tom_number % 24 == 0):\n                    # Both conditions are satisfied. Add the friends' numbers\n                    sum_of_friends_numbers = sum(friends_numbers)\n\n                    # Return the sum since we have satisfied both conditions\n                    return sum_of_friends_numbers\n\n    # If no combination found, return an indication (let's return 0)\n    return 0\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Recognizing the pattern:\n    # Positive numbers are increasing by 1 (18, 19, 20, ...)\n    # Negative numbers are increasing by 1 as well but starting from -16 (-16, -15, -14, ...)\n    # The sequence alternates between positive and negative, beginning with a positive number\n    \n    # Calculate the term number of the next number\n    term_number = 5 + 1  # We have 5 terms so far, so the next term is the 6th term\n    \n    # Since the sequence starts with a positive number, odd terms are positive and even terms are negative\n    if term_number % 2 == 1:  # If the term number is odd, the number is positive\n        n = 18 + (term_number // 2)  # Starting from 18 and incrementing by 1 for each pair of terms\n    else:  # If the term number is even, the number is negative\n        n = -16 + (term_number // 2 - 1)  # Starting from -16 and incrementing by 1 for each pair of terms\n    \n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the numbers be a, b, c, d where a > b > c > d\n    # Let's denote the average of the other three numbers as A and B respectively\n    # We have two equations based on the given information:\n    # d + A = 39\n    # a + B = 51\n    # We also know that the average of the numbers excluding the number itself is the sum of the other three divided by 3:\n    # A = (a + b + c)/3\n    # B = (b + c + d)/3\n    # Now, we can replace A and B in the original equations:\n    # d + (a + b + c)/3 = 39 => 3d + a + b + c = 117 (1)\n    # a + (b + c + d)/3 = 51 => 3a + b + c + d = 153 (2)\n    # Subtract equation (1) from equation (2) to find the maximum difference between a and d:\n    # 3a - 3d = 153 - 117\n    # 3(a - d) = 36\n    # a - d = 36/3\n    # a - d = 12\n    # So the maximum difference between the largest and smallest number is 12.\n    # To maximize a, we need to minimize b, c, and d. Since they are distinct positive whole numbers, let's assign b = 1, and c = 2, and d = 3 (smallest possible values).\n    # Now we have three equations:\n    # d = 3\n    # a - d = 12 => a = d + 12 = 3 + 12 = 15\n    # 3d + a + b + c = 117 => 3*3 + 15 + 1 + 2 = 117 => 24 + b + c = 117 => b + c = 117 - 24 => b + c = 93\n    # But b and c have already been chosen as 1 and 2 so this is just a verification step.\n    \n    # The largest possible value of a (the largest number) is 15 with the chosen values of b, c, and d.\n    ans = 15\n    return ans\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_passed_at_least_one = 43\n    total_students = 30 + 28 + 25  # Sum of students who passed each test\n\n    # Maximum number that passed all three tests can't be negative\n    # Using Inclusion-Exclusion principle:\n    max_passed_all_three = total_students - total_passed_at_least_one\n    max_passed_all_three = max(max_passed_all_three, 0)  # Ensure it's not negative\n\n    return max_passed_all_three\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "from fractions import Fraction\n\ndef solution():\n    expression1 = Fraction(1, 30) + Fraction(1, 6)\n    expression2 = Fraction(2, 25)\n    expression3 = 2 - Fraction(2, 3)\n    expression4 = Fraction(8, 3)\n\n    result = (expression1 / expression2) + (expression3 / expression4)\n    return result\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    # Digit in the thousands place is 8\n    thousands_place = 8 * 1000\n\n    # Digit in the ten thousands place is 8\n    ten_thousands_place = 8 * 10000\n\n    # Difference between place values of both 8's\n    difference = ten_thousands_place - thousands_place\n\n    return difference\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    # Since the pencil cases cannot be empty, start from 1\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            x3 = 6 - x1 - x2\n            if x3 > 0:  # Ensure the third pencil case is not empty\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        if (5720 + A) % 20 == 0:\n            return A\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance between the school and their home be x meters.\n    distance = symbols('distance')\n\n    # Ahmad's speed is 80 meters per minute, and his brother's speed is 50 meters per minute.\n    ahmad_speed = 80\n    brother_speed = 50\n\n    # Time taken for Ahmad to reach school is distance/ahmad_speed.\n    # Time taken for his brother to reach the point 210 meters from school is distance/brother_speed - 210/brother_speed.\n\n    # Ahmad travels the same distance to school and back to the meeting point with his brother.\n    # So his total distance traveled is distance + (distance - 210).\n    # His brother's distance traveled is distance - 210.\n\n    # Since they start at the same time, the time taken by Ahmad and his brother to meet is the same.\n    # Therefore, the equation is: ahmad_speed * time = distance + (distance - 210) and brother_speed * time = distance - 210.\n\n    # Now we have an equation in terms of 'distance':\n    # (distance/ahmad_speed) + ((distance - 210)/ahmad_speed) = (distance - 210)/brother_speed\n    equation = Eq((distance/ahmad_speed) + ((distance - 210)/ahmad_speed), (distance - 210)/brother_speed)\n\n    # Solve the equation for the 'distance'\n    solution = solve(equation, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    add_number = 0\n    while not is_palindrome(40309 + add_number):\n        add_number += 1\n    \n    return add_number\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "from math import gcd\n\ndef solution():\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n    \n    longest_possible_length = gcd(length_ribbon1, length_ribbon2)\n    \n    return longest_possible_length\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The smallest 5-digit number is 10000.\n    # The largest 5-digit number is 99999.\n    # A number is divisible by 45 if it is divisible by both 9 and 5.\n    # Since a palindromic number ends with the same digit it starts with, and to be divisible by 5, it must end with a 0 or a 5.\n    # It can't end with 0 because then it wouldn't be a 5-digit number.\n    # So it must end and start with 5. Hence the number must be of the form 5xxxx5.\n    # For a number to be divisible by 9, the sum of its digits must be divisible by 9.\n    \n    # Find the largest palindromic number that is a multiple of 45\n    for x in range(9, -1, -1):  # The tens and ten-thousands place\n        for y in range(9, -1, -1):  # The hundreds and thousandths place\n            palindromic_number = int(f\"5{x}{y}{x}5\")\n            if palindromic_number % 45 == 0:  # Check divisibility by 45\n                largest = palindromic_number\n                break\n        if palindromic_number % 45 == 0:\n            break\n\n    # Find the smallest palindromic number that is a multiple of 45\n    for x in range(0, 10):  # The tens and ten-thousands place\n        for y in range(0, 10):  # The hundreds and thousandths place\n            palindromic_number = int(f\"5{x}{y}{x}5\")\n            if palindromic_number % 45 == 0:  # Check divisibility by 45\n                smallest = palindromic_number\n                break\n        if palindromic_number % 45 == 0:\n            break\n\n    return largest - smallest\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    position_luna = 7\n    sheep_behind_luna = 4\n    total_sheep = position_luna + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    \n    hours_needed = desired_earnings / hourly_rate\n    \n    return hours_needed\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy import lcm\n    \n    # Step 1: Find the common supplement\n    # The common supplement here is the difference between the pile size \n    # and the remainder for each pile, which are 4, 4, and 4 respectively.\n    common_supplement = 4\n    \n    # Step 2: Find the LCM of all the divisors\n    # The divisors are 5, 6, and 11\n    divisors_lcm = lcm(5, 6, 11)\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common supplement\n    # Since the remainders are 1, 2, and 7 respectively when dividing by \n    # 5, 6, and 11, we look for such a number which has these properties.\n    # We iterate through multiples of the LCM and subtract the common supplement \n    # to check if it falls under the constraints defined by the remainders.\n    \n    unknown = None\n    for i in range(common_supplement, 500, divisors_lcm):\n        if (i % 5 == 1) and (i % 6 == 2) and (i % 11 == 7):\n            unknown = i\n            break\n    \n    # Return the calculated number of biscuits\n    return unknown\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n\n    # Top 3 student mean score\n    top_3_mean = 92\n\n    # Last 7 student mean score, which is 6 less than the mean score of all 10 students\n    last_7_mean = x - 6\n\n    # Equation based on the mean score computation\n    equation = Eq(3 * top_3_mean + 7 * last_7_mean, 10 * x)\n\n    # Solve the equation\n    mean_score = solve(equation, x)\n\n    return mean_score[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                consecutive = sorted(map(int, perm))\n                if consecutive == list(range(consecutive[0], consecutive[0] + 4)):\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5\n    distance = speed * 3\n    return distance\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = bags.copy()\n        x_bags.remove(red_marbles) \n        for jaslin_bags in combinations(x_bags, 3):\n            george_bags = tuple(set(x_bags) - set(jaslin_bags))\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n                \nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for Andre and Beth's initial number of sweets\n    andre, beth = symbols('andre beth')\n\n    # Writing Equations based on the problem statement\n    # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    equation1 = Eq(andre + 4 - (beth + 4), 6)\n    \n    # The total number of sweets they initially had is 24\n    equation2 = Eq(andre + beth, 24)\n\n    # Solving the system of equations to find the initial number of sweets\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Now we find how many sweets Beth has now (after receiving 4 more)\n    beth_now = solutions[beth] + 4\n\n    return beth_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let's call the first even number n.\n    # Since they are consecutive even numbers, the numbers will be:\n    # n, n+2, n+4, n+6, n+8\n    # Their sum will be:\n    # n + (n+2) + (n+4) + (n+6) + (n+8) = 5n + 20\n    # According to the problem, their sum is 100:\n    # 5n + 20 = 100\n    # Solving for n we get:\n    # 5n = 80\n    # n = 16\n    # So the smallest of these five numbers is 16\n\n    return 16\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5  # Fraction of apples left\n    remaining_apples = 150\n    total_apples = remaining_apples / remaining_fraction\n    return total_apples\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3  # inches per jump\n    number_of_jumps = 15 - 1  # Number of jumps from 1st to 15th post\n    total_distance = distance_per_jump * number_of_jumps\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    apples = 36\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries + apples\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from math import factorial\n    from fractions import Fraction\n    \n    # Total permutations of the blocks without restrictions\n    total_permutations = factorial(12) // (factorial(2) ** 6)\n    \n    # Consider permutations with same color blocks adjacent to each other (1+1)!\n    # and calculate permutations for remaining blocks\n    adjacent_permutations = 0\n    for adjacent_colors in range(1, 7):\n        single_blocks = 12 - 2 * adjacent_colors\n        adjacent_permutations += (factorial(6) // (factorial(6 - adjacent_colors) * factorial(adjacent_colors))) \\\n                                 * factorial(single_blocks)\n\n    # Now, find permutations which are even\n    even_permutations = total_permutations - adjacent_permutations\n    \n    # Calculate the probability\n    probability = Fraction(even_permutations, total_permutations)\n    \n    return probability.numerator + probability.denominator\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Define how much pool each inlet can fill per minute\n    A_rate = 1 / 36\n    B_rate = 1 / 48\n\n    # Initialize the filled pool percentage and time\n    filled_pool = 0\n    time = 0\n\n    # Define the cycle and corresponding times for each inlet\n    cycle = [('A', 1), ('B', 2), ('A', 2), ('B', 1)]\n    cycle_time = 0\n\n    # Loop until the pool is filled\n    while filled_pool < 1:\n        # Iterate over each step in the cycle\n        for inlet, duration in cycle:\n            # Fill the pool according to the inlet and its rate\n            if inlet == 'A':\n                filled_pool += A_rate * duration\n            else:\n                filled_pool += B_rate * duration\n            \n            # Increase the total time\n            time += duration\n\n            # Check if the pool is filled\n            if filled_pool >= 1:\n                break\n\n        # Update cycle time\n        cycle_time += 1\n    \n    # Return the nearest minute\n    return round(time)\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let alan's time to paint the room alone be x hours.\n    alan = symbols('alan')\n\n    # Equation based on work done. If a person can do a job in 't' hours, then they do 1/t of the work each hour\n    # Alan and Bob together do 1/4 of the work each hour.\n    equation = Eq(1/4, 1/alan + 1/6)\n    \n    # Solve the equation for Alan's time\n    alan_time = solve(equation, alan)\n    \n    # Return the time it takes for Alan to paint the room alone\n    return alan_time[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_not_rain_saturday = 1 - prob_rain_saturday\n    prob_not_rain_sunday = 1 - prob_rain_sunday\n    prob_neither_day = prob_not_rain_saturday * prob_not_rain_sunday\n    prob_at_least_one_day = 1 - prob_neither_day\n\n    return prob_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n\n    # Let the number of correct answers be x\n    # Then the number of incorrect answers is total_questions - x\n    # Form the equation based on the scoring system\n    # points_per_correct * x + points_per_incorrect * (total_questions - x) = total_points\n\n    for x in range(total_questions + 1):\n        if points_per_correct * x + points_per_incorrect * (total_questions - x) == total_points:\n            return total_questions - x\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    from math import log\n    n = 0\n    pow_of_five = 0\n    while pow_of_five < 28:\n        n += 1\n        k = n\n        while k % 5 == 0:\n            pow_of_five += 1\n            k //= 5\n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10 + 1  # Lucas buys 10 bottles and gets 1 on loan.\n    drunk_bottles = 0\n    empty_bottles = 0\n\n    while total_bottles > 0:\n        drunk_bottles += total_bottles\n        empty_bottles += total_bottles\n        total_bottles = empty_bottles // 2  # exchange two empty bottles for one mineral water bottle.\n        empty_bottles = empty_bottles % 2  # remaining empty bottles that cannot be exchanged.\n\n    return drunk_bottles - 1  # subtract the bottle that was on loan and needs to be returned.\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    sweets_initial = 320\n    sweets_purchased_weekly = 30\n    sweets_final = 348\n\n    sweets_eaten_weekly = ((sweets_initial + total_weeks * sweets_purchased_weekly) - sweets_final) // total_weeks\n\n    return sweets_eaten_weekly\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let x be the number of minutes after which A's waterline is 3 times B's.\n    # The rate of draining A is 1/10 per minute.\n    # The rate of draining B is 1/6 per minute.\n    # We have to solve for x in the equation: (1 - x/10) = 3 * (1 - x/6),\n    # where (1 - x/10) represents the remaining water in A after x minutes,\n    # and (1 - x/6) is for B.\n\n    # Solve the equation for x\n    # (1 - x/10) = 3 * (1 - x/6)\n    # 1 - x/10 = 3 - x/2\n    # Multiply by 10 to clear denominators\n    # 10 - x = 30 - 5x\n    # 4x = 20\n    # x = 5\n\n    # After 5 minutes, the height of A's waterline will be 3 times that of B's.\n    return 5\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        if (281 * 10 + digit) % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # There's only one way to represent 1 as the sum of positive integers, which is 1 itself.\n    # Hence, there's only one time we can represent the number 1.\n    return 1\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    return 200 * 0.35\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Converting minutes to hours for both cases\n    late_time = 12 / 60  # 12 minutes late converted to hours\n    early_time = -8 / 60  # 8 minutes early converted to hours\n    \n    # Let the distance be 'd' km\n    # Time taken at 3 km/h speed is (d/3) hours\n    # Time taken at 7 km/h speed is (d/7) hours\n    \n    # According to the problem\n    # (d/3) - (d/7) = late_time - early_time\n    \n    # Solving for 'd'\n    d = (3 * 7 * (late_time - early_time)) / (7 - 3)\n    \n    # Return the computed distance\n    return d\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"a\" be the number of students in school A before transfer\n    # Let \"b\" be the number of students in school B before transfer\n    a, b = symbols('a b')\n\n    # Equation 1: The total number of students before transfer is 1050\n    equation1 = Eq(a + b, 1050)\n\n    # Equation 2: School A has 10 more students than school B after 20 students leave\n    equation2 = Eq(a - 20 - (b + 20), 10)\n\n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Without brackets, the expression evaluates to:\n    # 15 + 25 + 15 - 6 + 7 = 56\n    # To maximize the expression, we should try to increase the multiplication part.\n    # Adding brackets in the expression to maximize the result could be:\n    # (15 + 5) * (5 + 15) - 6 + 7\n    # or\n    # 20 * 20 - 6 + 7 = 400 + 1 = 401\n\n    ans = (15 + 5) * (5 + 15) - 6 + 7\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    points_correct = 10\n    points_incorrect = -5\n    total_questions = 10\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return correct\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    digits = '08072003'\n    primes = []\n    for n in range(1, 50):\n        if isprime(n) and all(str(n).count(d) <= digits.count(d) for d in str(n)):\n            primes.append(n)\n    return max(primes)\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n\n    equation1 = Eq(chenxi, yue_ying + 5)\n\n    # When Chenxi gives Yue Ying 10 sweets\n    chenxi_after = chenxi - 10\n    yue_ying_after = yue_ying + 10\n\n    # The difference after giving 10 sweets\n    equation2 = Eq(chenxi_after - yue_ying_after, chenxi - yue_ying)\n\n    difference_eq = solve(equation2, chenxi - yue_ying)\n\n    # Solution to the original equation with the found difference\n    solutions = solve((equation1, difference_eq[0]), (chenxi, yue_ying))\n\n    return solutions[chenxi - yue_ying]\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    average_of_five = 54\n    average_of_first_two = 48\n    sum_of_five = average_of_five * 5\n    sum_of_first_two = average_of_first_two * 2\n    sum_of_last_three = sum_of_five - sum_of_first_two\n    average_of_last_three = sum_of_last_three / 3\n    \n    return average_of_last_three\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 69):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime2 - prime1\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Teddy's current age and Teddy's age when his father is 40\n    teddy, fathers_current_age = symbols('teddy fathers_current_age')\n\n    # From the problem we know that Teddy's father was 7 * 5 = 35 years old when Teddy was 5\n    equation1 = Eq(fathers_current_age, 7 * 5)\n\n    # Teddy grows one year for every year his father grows, so the difference between their ages will always be the same.\n    age_difference = fathers_current_age - teddy\n\n    # When his father is 40, their age difference will still be the same\n    equation2 = Eq(40 - teddy, age_difference)\n\n    solutions = solve((equation1, equation2), (teddy, fathers_current_age))\n\n    return solutions[teddy]\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    max_slices = sum(range(1, 5)) + 1 # the initial (uncut) piece counts as a slice as well\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_pos_left_to_right = 10\n    rabbit_to_elephant = 5\n\n    # If the elephant is to the left of the rabbit, we find the rabbit's position from the left.\n    rabbit_pos_left_to_right = elephant_pos_left_to_right + rabbit_to_elephant\n\n    # The rabbit's position counting from right to left is the total number of toys \n    # minus the rabbit's position from the left, plus 1.\n    rabbit_pos_right_to_left = total_toys - rabbit_pos_left_to_right + 1\n\n    return rabbit_pos_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_of_digits = 0\n    for page in range(1, 110):\n        for digit in str(page):\n            sum_of_digits += int(digit)\n    return sum_of_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = 1\n    gray = 11\n\n    # Number of pink and gray dolphins should sum up to 48\n    total_dolphins = pink + gray * pink\n\n    # Equation pink + gray * pink = 48 can be simplified to pink(1 + gray) = 48\n    # So we can find pink by dividing the total number of dolphins by (1 + gray)\n    pink_dolphins = 48 / (1 + gray)\n\n    return int(pink_dolphins)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n    \n    writing_students = total_students - neither_classes_students - (maths_students - both_classes_students)\n    \n    return writing_students\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression inside the division\n    # Note that 4^982 = (2^2)^982 = 2^(2*982) = 2^1964,\n    # reduce it by the common factor with 2^1963\n    numerator = 2**2019\n    denominator = 2**1964 - 2**1963\n    \n    # Simplify the denominator\n    # 2^1964 - 2^1963 = 2^1963 * (2^1 - 1) = 2^1963\n    simplified_denominator = 2**1963\n    \n    # Divide the numerator by the simplified denominator\n    # 2^2019 / 2^1963 = 2^(2019-1963) = 2^56\n    result = 2**(2019 - 1963)\n    \n    # Find the remainder when this result is divided by 5\n    # We can use the property that (a*b) mod m = ((a mod m) * (b mod m)) mod m\n    # 2^4 mod 5 = (2 * 2 * 2 * 2) mod 5 = 16 mod 5 = 1\n    # therefore (2^4)^k mod 5 will be 1 for any integer k\n    # and 2^56 = (2^4)^14, thus 2^56 mod 5 is 1.\n    remainder = result % 5\n    \n    return remainder\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 700 * (35 / 100)\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Define the ratio of adults and the ratio of girls based on Adriana's workings\n    ratio_of_adults = 2 / 7\n    ratio_of_girls_remainder = 1 / 5\n    ratio_of_girls_total = ratio_of_girls_remainder * (1 - ratio_of_adults)\n\n    # Calculate the difference in ratio between adults and girls.\n    difference_in_ratio = ratio_of_adults - ratio_of_girls_total\n\n    # According to the problem, 80 more adults than girls.\n    # 80 people represent the difference in ratio between adults and girls.\n    # Calculate the total number of people based on the ratio difference and the people difference.\n    total_people = 80 / difference_in_ratio\n\n    return int(total_people)\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left = 4\n    cabinets_right = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_left + cabinets_right + candy_cabinet\n    return total_cabinets\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for digits in product(range(10), repeat=3):\n        if digits[0] != 0 and sum(digits) == 7 and digits[2] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for num in range(99, -1, -1):\n        four_digit_number = int(f\"49{num:02d}\")\n        if all(four_digit_number % div == 0 for div in [2, 3, 5]):\n            return four_digit_number\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of tables (and chairs) be 'x'\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq((x + 24), 4 * (x - 42))\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    # Number of chairs originally\n    original_chairs = solution[0]\n\n    return original_chairs\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) // 4\n    sum_of_numbers = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # 5 chocolates + jar = 185g\n    # 17 chocolates + jar = 317g\n    # Let's find the weight of one chocolate\n    chocolates_difference = 17 - 5  # Difference in the number of chocolates\n    mass_difference = 317 - 185     # Difference in mass for the two states\n    weight_per_chocolate = mass_difference / chocolates_difference\n    \n    # Find the weight of the empty jar\n    weight_of_jar = 185 - (5 * weight_per_chocolate)\n    \n    # Now find the weight of the jar with 10 chocolates\n    weight_with_10_chocolates = weight_of_jar + (10 * weight_per_chocolate)\n    \n    return weight_with_10_chocolates\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    # Assuming all are motorcycles (2-wheelers), we get x = 27 * 2 = 54 wheels.\n    # But we have 96 wheels, which means wheels from cars and lorries account for 96 - 54 = 42 wheels.\n    # As each car and each lorry contributes an additional 2 wheels (compared to a motorcycle),\n    # and the number of cars is equal to the number of lorries,\n    # we can deduce that the number of cars and lorries together is 42 / 2 = 21 vehicles.\n    # Since the number of cars is equal to the number of lorries, there are 21 / 2 cars.\n    \n    num_cars = (42 // 2) // 2\n    return num_cars\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    kristoff_olaf_multiplier = 5.5\n\n    olaf_height = ana_height - 116\n    kristoff_height = olaf_height * kristoff_olaf_multiplier\n    \n    kristoff_ana_difference = kristoff_height - ana_height\n\n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # Total weight of sugar solution\n    sugar_concentration = 0.32   # Sugar concentration (32%)\n    \n    sugar_weight = total_solution_weight * sugar_concentration  # Weight of sugar\n    water_weight = total_solution_weight - sugar_weight  # Weight of water\n    \n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for i in range(1000):\n        number = int(\"1992\" + \"{:03d}\".format(i))\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the amount of money spent on apples, pears, and mangoes be A, P, and M respectively\n    A, P, M = symbols('A P M')\n    \n    # Let the number of apples be 'apple_count'\n    apple_count = symbols('apple_count')\n    \n    # Cost of each apple is given as $0.60, therefor cost of apples is 0.60 * apple_count\n    cost_per_apple = 0.60\n    \n    # Relations for the amount of money John spent on apples, pears, and mangoes\n    # From the ratios given in the problem, we have the following system of equations\n    eq1 = Eq(P, 2/3 * A)                     # Ratio of the amount on pears to apples, P:A = 2:3\n    eq2 = Eq(M, 5 * P)                       # Ratio of the amount on mangoes to pears, M:P = 5:1\n    eq3 = Eq(A + P + M, 150)                 # Total cost given as $150\n    eq4 = Eq(A, cost_per_apple * apple_count) # Money spent on apples is cost per apple multiplied by apple count\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (A, P, M, apple_count))\n\n    # The total number of fruits John bought is 4/5*apple_count (pears) + 2/5*apple_count (mangoes) + apple_count\n    total_fruits = (4/5 + 2/5 + 1) * solutions[apple_count]\n\n    return int(total_fruits)\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    ans = 3.05 - 1/10\n    return ans\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    total_distance_m = 800\n    distance_between_trees = total_distance_m / (total_trees - 1)\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n    \n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n\n    total_second_half = avg_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    months_in_year = months_in_half_year * 2\n\n    avg_per_month_last_year = total_year / months_in_year\n\n    return avg_per_month_last_year\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Given the average score of six assignments\n    average_six = 92\n    total_six = average_six * 6  # Total score after six assignments\n\n    # Given the average score of the first five assignments\n    average_five = 94\n    total_five = average_five * 5  # Total score after five assignments\n    \n    # Score of the sixth assignment\n    score_sixth = total_six - total_five\n\n    return score_sixth\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_way_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    duration = end_time - half_way_time\n    start_time = half_way_time - duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    final_count = 30\n    entered = 8\n    exited = 10\n\n    initial_count = final_count - entered + exited\n\n    return initial_count\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x * 2 / 4) ** 2 - 4) / 10, 6)\n    \n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of shoes sold\n    x = symbols('x')\n    \n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n    \n    # Equation representing the profit\n    equation = Eq((selling_price_per_pair * x) - (cost_price_per_pair * (x + remaining_pairs)), total_profit)\n    \n    # Solving for x, the number of shoes sold\n    number_of_shoes_sold = solve(equation, x)[0]\n    initial_pairs = number_of_shoes_sold + remaining_pairs\n    \n    return initial_pairs\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_water = 3  # Today's fill\n    days_passed = 1  # Since today is the first day\n\n    while current_water < total_water_needed:\n        current_water += (fill_rate - leak_rate)\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "from math import gcd\n\ndef solution():\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour\n\n    current_number = 1\n    digits_written = 0\n\n    # Loop until the total number of seconds is reached or exceeded\n    while True:\n        current_number_digits = len(str(current_number))\n        if digits_written + current_number_digits > total_seconds:\n            break\n        digits_written += current_number_digits\n        current_number += 1\n    \n    # The last number we've finished writing\n    last_number = current_number - 1\n    \n    return last_number\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    game_duration = timedelta(minutes=225)\n    \n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    max_non_green_marbles = 5 + 9 + 2  # blue, white, and black marbles\n    # Darrell must draw one more after all non-green marbles to ensure a green one.\n    draws_to_get_green = max_non_green_marbles + 1\n    return draws_to_get_green\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    num_teams = 20\n    matches = comb(num_teams, 2)\n\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a round-robin tournament, each player will play against each other player exactly once.\n    # Therefore, for 8 players, each player will play 7 matches.\n    # Because we are told each player has a different number of wins,\n    # the possible number of wins for each player is 0, 1, ..., 7 and are all distinct.\n    # The champion is the player with the most number of wins,\n    # so the champion will have the maximum number of wins, which is 7.\n    return 7\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # Snail climbs for 6 days and a different height on the 7th day\n    total_days = 7\n    well_height = 20\n\n    # Distance snail must slide down at night is the difference between the well height and the total climbed\n    # after subtracting the distance climbed on the last day (since the snail escapes on the 7th day)\n    night_slide = (total_climbed - well_height) / (total_days - 1)\n\n    return night_slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for _ in range(years):\n        initial_rabbits = initial_rabbits * 3 // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ivy_speed, candy_speed = symbols('ivy_speed candy_speed')\n    # Ivy started 6 minutes earlier, so by the time Candy started, Ivy has already covered some distance\n    ivy_distance_before_candy_start = ivy_speed * 6\n    \n    # Ivy and Candy meet after 12 minutes from the time Candy starts\n    ivy_distance_after_candy_start = ivy_speed * 12\n    candy_distance = candy_speed * 12\n    \n    # Total distance covered by Ivy is the sum of distances covered before and after Candy started\n    total_ivy_distance = ivy_distance_before_candy_start + ivy_distance_after_candy_start\n    \n    # The sum of the distances covered by Ivy and Candy is the distance between their houses\n    equation = Eq(total_ivy_distance + candy_distance, 1200)\n    \n    # Ivy's speed is 20 meters/minute more than Candy's speed\n    speed_relation = Eq(ivy_speed, candy_speed + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation, speed_relation), (ivy_speed, candy_speed))\n    \n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_needed = 120 / puffs_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Calculate the amount of nickel in each metal\n    nickel_in_first_metal = 6 * 0.45\n    nickel_in_second_metal = 14 * 0.60\n\n    # Calculate the total amount of nickel\n    total_nickel = nickel_in_first_metal + nickel_in_second_metal\n\n    # Calculate the total weight of the new metal\n    total_weight = 6 + 14\n\n    # Calculate the percent concentration of nickel\n    percent_nickel = (total_nickel / total_weight) * 100\n\n    return percent_nickel\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    # Given ages\n    edward_age = 8\n    mother_age = 32\n    \n    # Defining a future year variable which is unknown and initializing it to 0\n    years_later = 0\n    \n    # Checking the condition each year and incrementing the years_later\n    while mother_age != 3 * edward_age:\n        years_later += 1\n        edward_age += 1\n        mother_age += 1\n\n    return years_later\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3 / 5) * 35\n    return ans\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 1\n    while True:\n        if (n * n + 11) + 12 == (n + 1) * (n + 1):\n            return n * n + 11\n        n += 1\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boy_apples = 30\n    girl_apples = 20\n    avg_apples = 26\n    boys = 15\n\n    girls = symbols('girls')\n\n    equation = Eq((boy_apples * boys + girl_apples * girls) / (boys + girls), avg_apples)\n\n    solution = solve(equation, girls)\n\n    return int(solution[0])\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    difference = 56\n    tank_b = tank_a + difference\n    return tank_b\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketballs, volleyballs = symbols('basketballs volleyballs')\n    \n    # Equation representing total cost\n    equation1 = Eq(basketballs * 30 + volleyballs * 25, 340)\n    # Equation representing total number of balls\n    equation2 = Eq(basketballs + volleyballs, 12)\n    \n    solutions = solve((equation1, equation2), (basketballs, volleyballs))\n    \n    return solutions[basketballs]\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000 # Mr Rich's wealth\n\n    # Richie gets 1/3 of the entire wealth\n    richie_wealth = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_wealth\n\n    # Thrifty gets 1/2 of what's left after Richie\n    thrifty_wealth = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_wealth\n\n    # Bounty gets 2/5 of what's left after Richie and Thrifty\n    bounty_wealth = remaining_after_thrifty * (2/5)\n    remaining_after_bounty = remaining_after_thrifty - bounty_wealth\n\n    # Archie gets the rest\n    archie_wealth = remaining_after_bounty\n\n    return archie_wealth\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio_cm_to_m = 1 / 6  # 1cm to 6m\n    playground_length_on_plan_cm = 5\n    real_playground_length_m = playground_length_on_plan_cm / scale_ratio_cm_to_m\n    return real_playground_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * 3/4\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * 1/3\n    remaining_candy = remaining_after_lily - given_to_brother\n    \n    return int(remaining_candy)\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the mass of strawberry, chocolate and mint candies in each container\n    s1, c1, m1, s2, c2, m2, s3, c3, m3 = symbols('s1 c1 m1 s2 c2 m2 s3 c3 m3')\n\n    # Equations based on the given strawberry fractions\n    eq1 = Eq(s1, 2/5 * (s1 + c1 + m1))\n    eq2 = Eq(s2, 2/7 * (s2 + c2 + m2))\n    eq3 = Eq(s3, 2/9 * (s3 + c3 + m3))\n\n    # Since the amount of mint candies stays the same in all containers\n    eq4 = Eq(m1, m2)\n    eq5 = Eq(m1, m3)\n\n    # Total mass of all 3 containers\n    eq6 = Eq(s1 + c1 + m1 + s2 + c2 + m2 + s3 + c3 + m3, 1371)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (s1, c1, m1, s2, c2, m2, s3, c3, m3))\n\n    # Mass of all strawberry candies combined\n    total_strawberry = solution[s1] + solution[s2] + solution[s3]\n\n    return total_strawberry\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, j)) for j in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    # Let x be the number of curry puffs sold on Friday\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Create the equation based on the problem statement\n    equation = Eq(x + (x + 27) + (x - 14), 475)\n\n    # Solve the equation\n    sold_friday = solve(equation, x)[0]\n    \n    return sold_friday\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Roy's money as r and Dennis' money as d\n    r, d = symbols('r d')\n\n    # The total amount of money shared by Roy and Dennis is $340\n    equation1 = Eq(r + d, 340)\n\n    # After Roy spent 2/3 of his money, he has 1/3 left\n    # After Dennis spent 1/4 of his money, he has 3/4 left\n    # Dennis has twice as much as Roy after spending\n    equation2 = Eq((3/4)*d, 2*(1/3)*r)\n\n    # Now we solve the two equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    # Amount of money Dennis had in the end is 3/4 of d\n    dennis_money_end = (3/4) * solutions[d]\n\n    return dennis_money_end\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    number_of_balls = 8\n    number_of_hoops = 6\n    \n    total_ball_cost = ball_cost * number_of_balls\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / number_of_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    # Factorize the number 693 into prime factors\n    factors = factorint(693)\n    \n    # To make the product of 693 and the number a perfect square,\n    # each prime factor must appear to an even power.\n    # Find the smallest number that achieves such even powers for the prime factors.\n    mult = 1\n    for prime, exp in factors.items():\n        if exp % 2 != 0:  # Check if the exponent is odd\n            mult *= prime\n    \n    return mult\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    pages_with_one_digit = 9\n    pages_with_two_digits = 90 * 2\n    pages_with_three_digits = 300 - (pages_with_one_digit + pages_with_two_digits)\n\n    pages_count = pages_with_one_digit + pages_with_two_digits // 2 + pages_with_three_digits // 3\n    \n    return pages_count\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    unit_digit_13_power = pow(13, 242, 10)  # We only care about the last digit\n    unit_digit_17_power = pow(17, 379, 10)  # Exponentiation with modulus for last digit\n    unit_digit_4_power = pow(4, 2012, 10)   # Only the unit digit after raising 4 to any power\n\n    # Calculate the unit digit of the entire expression\n    unit_digit_sum = (unit_digit_13_power + unit_digit_17_power * unit_digit_4_power) % 10\n    \n    return unit_digit_sum\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk = 9\n    container_volume = 5\n    \n    remaining_juice = (total_cartons * juice_per_carton) - juice_drunk\n    containers_needed = (remaining_juice + container_volume - 1) // container_volume\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Alexis had initially.\n    alexis, mary, charlotte_initial, charlotte_final = symbols('alexis mary charlotte_initial charlotte_final')\n\n    # Mary had 7/5 as many stickers as Alexis.\n    eq1 = Eq(mary, (7/5) * alexis)\n\n    # Both Mary and Alexis each gave 20% of their stickers to Charlotte.\n    eq2 = Eq(charlotte_final, charlotte_initial + 0.2 * mary + 0.2 * alexis)\n\n    # Charlotte's stickers increased by 80%.\n    eq3 = Eq(charlotte_final, charlotte_initial * 1.8)\n\n    # Mary had 20 stickers more than Charlotte in the end.\n    eq4 = Eq(mary, charlotte_final + 20)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2, eq3, eq4), (alexis, mary, charlotte_initial, charlotte_final))\n\n    # Extract the number of stickers Alexis had initially.\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight_of_steak = 3 + 1/2\n    cost_per_kg = 7.50\n    available_money = 20\n\n    cost_of_steak = weight_of_steak * cost_per_kg\n\n    additional_money_needed = max(0, cost_of_steak - available_money)\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n    # To find the position from the end, we take the total number of people and subtract the position from the start\n    # We also subtract 1 because if he is 12th from the start, he is 11th from the end due to inclusive counting\n    position_from_end = total_people - position_from_start + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of the light and heavy balls.\n    mass_light = symbols('mass_light')\n\n    # We know that the mass of a heavy ball is twice the mass of a light ball.\n    mass_heavy = 2 * mass_light\n\n    # There are 6 light balls and 6 heavy balls, which together weigh 65.7 kg.\n    total_mass_eq = Eq(6 * mass_light + 6 * mass_heavy, 65.7)\n\n    # Solve for the mass of a light bowling ball.\n    mass_light_solution = solve(total_mass_eq, mass_light)\n\n    # Return the mass of a light bowling ball to the nearest kg.\n    return round(mass_light_solution[0])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    equation1 = Eq(benson - calculator_price, clive - racket_price)\n    equation2 = Eq(benson + clive, total_money)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # Loop through all 4-digit numbers\n    for i in range(1000, 10000):\n        # Convert number to string and check if it is a palindrome\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    ans = sum(scores) / len(scores)\n    return ans\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let the number of pens Denise has be x.\n    # Then Jay has 6 times as many pens as Denise, which is 6x.\n    # Together, they have 126 pens.\n    # So the equation is x + 6x = 126\n    # Solving for x, we have 7x = 126 -> x = 126 / 7\n    denise_pens = 126 / 7\n\n    return int(denise_pens)\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be b and the number of girls be g\n    b, g = symbols('b g')\n\n    # Set up the equations based on the problem statement\n    # Every 3 boys share 1 ball and 2 girls share 1 ball\n    equation1 = Eq((b / 3) + (g / 2), 250)\n    # Total number of children is 650\n    equation2 = Eq(b + g, 650)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[g]  # Return number of girls\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    # Let g be the number of girls and b be the number of boys originally in the classroom\n    from sympy import symbols, Eq, solve\n    \n    g, b = symbols('g b')\n    # After 25 girls went outside, the number of girls in the classroom is g - 25\n    # The number of girls now is (2/3) times the number of boys: g - 25 = (2/3) * b\n    equation1 = Eq(g - 25, (2/3) * b)\n    # After 15 boys left, the number of boys is b - 15\n    # Now, the number of boys and girls in the classroom is equal: g - 25 = b - 15\n    equation2 = Eq(g - 25, b - 15)\n    # Solve the system of equations for g and b\n    solutions = solve((equation1, equation2), (g, b))\n    # The total number of students originally in the classroom is the sum of boys and girls\n    total_students = solutions[g] + solutions[b]\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # Given that 8 * 11 = BOX * 9 + 34\n    # We need to find the BOX such that the equation is true\n\n    # Calculate the left hand side of the equation\n    left_hand_side = 8 * 11\n    \n    # Subtract 34 from the left_hand_side to balance the equation\n    balance = left_hand_side - 34\n    \n    # Divide the balance by 9 to find the number that goes into the box\n    box_number = balance / 9\n    \n    return box_number\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 7590  # Total value in cents\n    ratio_sum = 8 + 3\n    value_10_cent = 10  # Value of each 10-cent coin in cents\n    value_50_cent = 50  # Value of each 50-cent coin in cents\n\n    # Calculate the total value of 10-cent coins\n    value_per_ratio = total_value / ratio_sum\n    value_of_10_cent_coins = value_per_ratio * 8\n    \n    # Calculate the total number of 10-cent coins\n    num_of_10_cent_coins = value_of_10_cent_coins / value_10_cent\n    \n    # Calculate the total number of 50-cent coins using the ratio\n    num_of_50_cent_coins = num_of_10_cent_coins * 3 / 8\n    \n    # Calculate the total value of 50-cent coins\n    value_of_50_cent_coins = num_of_50_cent_coins * value_50_cent\n    \n    # Since we work in cents, divide by 100 to convert to dollars\n    return value_of_50_cent_coins / 100\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    spent = 6400\n    discount_percentage = 0.8\n    original_price = spent / (1 - discount_percentage)\n    savings = original_price - spent\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    # Area of the base of the prism\n    base_area = 7 * 7  # Side length squared\n\n    # Area of the square hole\n    hole_area = 3 * 3  # Side length squared\n    \n    # Area of the base with the hole\n    actual_base_area = base_area - hole_area\n\n    # Volume of the prism is the area of the base times the height\n    # Therefore, height is volume divided by the area of the base\n    height = 320 / actual_base_area\n    \n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person since they must sit together,\n    # then there are 7 \"people\" to arrange around the table.\n    arrangements_for_7 = factorial(7 - 1)  # (n-1)! for circular arrangements\n\n    # Amy and Judy can switch places with each other, which gives 2! arrangements.\n    amy_judy_arrangements = factorial(2)\n\n    # Total arrangements is the product of the two possibilities.\n    total_arrangements = arrangements_for_7 * amy_judy_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Find which triangular number the 2008th position is in\n    n = 1\n    while n * (n + 1) // 2 < 2008:\n        n += 1\n\n    # The triangular number just before the 2008th position\n    triangular_before = (n - 1) * n // 2\n\n    # The position within the current triangular sequence\n    position_in_sequence = 2008 - triangular_before\n\n    # The value at the 2008th position is the position within the current triangular sequence\n    ans = position_in_sequence\n\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_cost = 1.26\n    total_cost_chocolate_bars = 5 * chocolate_bar_cost\n    cookie_cost = total_cost_chocolate_bars / 6\n    money_initially = 9.05\n    cost_of_cookies_bought = 4 * cookie_cost\n    money_left = money_initially - cost_of_cookies_bought\n    \n    return money_left\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    # 3x = 10y -> y = (3/10)*x\n    y_weight = (3 / 10) * x_weight\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n    \n    tomatoes_sold = 27\n    \n    solutions = solve(equation.subs(tomatoes, tomatoes_sold), cucumbers)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 4):    # The hundredth digit has to be at least 1, because we're counting three-digit numbers\n        for j in range(10):  # The tenth digit can be between 0 and 9\n            for k in range(10):  # The oneth digit can also be between 0 and 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_of_numbers = sum(range(2, 101, 5))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Given data\n    n = 31  # Total number of nights\n    a16 = 100  # Mosquitoes eaten on the 16th night\n    d = 6  # Difference in mosquitoes eaten each night\n    \n    # The 16th term is in the middle of the arithmetic sequence for 31 days\n    # So, a1 (the first term) can be calculated by subtracting 15 times the common difference from the 16th term\n    a1 = a16 - (15 * d)\n    \n    # Sum of n terms (Sn) of an arithmetic sequence is given by Sn = n/2 * (2a1 + (n - 1)d)\n    Sn = n/2 * (2*a1 + (n - 1)*d)\n    \n    return int(Sn)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_bags = total_bags - given_to_avril\n    return remaining_bags\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # A winning strategy for Chris is to leave Dylan with a number of matches\n    # that is a multiple of 3 after his first move. This way, no matter what\n    # Dylan picks (1 or 2 matches), Chris can always pick 2 or 1 matches\n    # (respectively) to make the total matches picked by both equal to 3 each round.\n    # Since there are 7 matches, if Chris picks 1 match, then 6 matches are left,\n    # which is a multiple of 3, and Chris can follow this strategy to win.\n    return 1\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        a, b, c = p\n        abc = a * 100 + b * 10 + c\n        # A cannot be 0 since ABC is a 3-digit number\n        if a == 0:\n            continue\n        # Add your conditions here if there are any other clues about ABC provided\n        return abc\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    \n    # iterate through all permutations of the digits 0-9 to test possible values for A,B,C,D,E\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n\n        # ensure all letters are representing different digits\n        if len(set(perm)) == 5:\n            ABAC = A * 1000 + B * 100 + A * 10 + C\n            DBEC = D * 1000 + B * 100 + E * 10 + C\n            ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n\n            if ABAC + DBEC == ACEDC:\n                return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # converting 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # converting 1.06pm to minutes (13 because it is 1pm in 24-hour format)\n    \n    return afternoon_time - morning_time\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    return (64 + 36) * (64 - 36)\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Since there is no specific data given,\n    # the question seems to imply he can choose any number of restaurants from a given set.\n    # If he has N different restaurants to choose from\n    # and he can only choose one to eat at,\n    # then there are N different choices.\n\n    # However, as there's no N given in the problem, \n    # the solution cannot be computed without additional information.\n\n    # Assuming N is the number of restaurants (which is missing in the problem description),\n    # the answer would simply be:\n    # ans = N\n    # But since N is not specified, this problem is not solvable as stated.\n\n    return None\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sum_1_to_9 = sum(range(1, 10))\n    sum_8_to_1 = sum(range(1, 9))\n    ans = sum_1_to_9 + sum_8_to_1\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50\n    # This gives us the first equation\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # A notebook and a pencil case cost $6\n    # This gives us the second equation\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost $8\n    # This gives us the third equation\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([(53 - i*6) - (50 - i*6) for i in range(8)])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48  # Distance from Auntie Lina's house to the wet market in meters\n    walking_speed = 8  # Auntie Lina's walking speed in meters per minute\n\n    # Calculate the correct time taken to reach the wet market\n    correct_time = distance / walking_speed\n\n    return correct_time\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 as it's the first digit of a 4-digit number\n        for E in range(0, 10):\n            if A != E:\n                AEEA = int(f\"{A}{E}{E}{A}\")\n                return AEEA\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_people = 4\n    average_age = 25\n    \n    # Calculate the total age of all family members\n    total_age = total_people * average_age\n    \n    # The ages of Harry, Harry’s mom, and Harry’s sister\n    harry = 14\n    mom = 36\n    sister = 10\n    \n    # Calculate Harry's dad age\n    dad = total_age - (harry + mom + sister)\n    \n    return dad\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters.\n    # 1 meter = 100 centimeters\n    measurements_in_cm = [8300, 200, 8, 50]\n\n    # Generally, the standard height of a classroom door is around 200 cm or 2 meters.\n    # We find the closest measurement to this standard height.\n    standard_height = 200  # in centimeters\n    closest_height = min(measurements_in_cm, key=lambda x: abs(x - standard_height))\n    \n    return closest_height\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    pages = 0\n    digits_used = 0\n\n    while digits_used < 450:\n        pages += 1\n        digits_used += len(str(pages))\n    \n    return pages - 1  # Subtract 1 because we stop after exceeding 450\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    lunch_fraction = 5/12\n    dinner_fraction = 2/7\n    remaining_money = 45\n\n    # Equation representing Leonard's remaining money after lunch and dinner\n    equation = Eq(original_amount * (1 - lunch_fraction) * (1 - dinner_fraction), remaining_money)\n\n    # Solving the equation\n    sol = solve(equation, original_amount)\n\n    # Since we are dealing with money, we assume it must be positive\n    return sol[0]\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Each player plays against 4 others, divided by 2 for pairs\n    wins = 2 + 1 + 4 + 3  # Wins by Lily, Eva, Tina, and Emma\n    gina_wins = total_games - wins  # The remaining wins are Gina's\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    ans = 2 * (largest_number - smallest_number)\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    theta = math.radians(20)  # Angle of incline (convert degrees to radians)\n    mu_k = 0.2  # Coefficient of kinetic friction\n    d = 400  # Distance along the slope (m)\n\n    # Calculate acceleration using the components of gravitational force and friction\n    # a = g * (sin(theta) - mu_k * cos(theta))\n    a = g * (math.sin(theta) - mu_k * math.cos(theta))\n\n    # Using kinematic equation: vf^2 = vi^2 + 2 * a * d\n    # Since initial velocity (vi) is 0 (starting from rest), we simplify to vf = sqrt(2 * a * d)\n    vf = math.sqrt(2 * a * d)\n\n    return vf\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Amount of work one man can do in one day\n    work_per_man_per_day = 1 / (6 * 5)\n    # Amount of work one woman can do in one day\n    work_per_woman_per_day = 1 / (5 * 6)\n\n    # Total work per day for 10 men and 5 women\n    total_work_per_day = (10 * work_per_man_per_day) + (5 * work_per_woman_per_day)\n    \n    # Total number of days for 10 men and 5 women to complete the job\n    days_to_complete = 1 / total_work_per_day\n\n    return days_to_complete\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    total_spent = 300\n    shirt_cost = 5\n    bag_cost = 10\n    one_set_cost = 4 * shirt_cost + bag_cost # 4 shirts plus 1 bag\n\n    number_of_sets = total_spent // one_set_cost\n    number_of_shirts = number_of_sets * 4\n\n    remaining_money = total_spent - (number_of_sets * one_set_cost)\n    if remaining_money >= shirt_cost:\n        additional_shirts = remaining_money // shirt_cost\n        number_of_shirts += additional_shirts\n\n    return number_of_shirts\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of Type A, B, and C coffee beans\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n    \n    # Compute the Greatest Common Divisor (GCD) of the weights\n    gcd_AB = gcd(weight_A, weight_B)\n    greatest_mass = gcd(gcd_AB, weight_C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original number of boys and girls\n    original_condition = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined\n    new_condition = Eq(boys - 12, girls + 20)\n\n    # Solve the equations\n    solutions = solve((original_condition, new_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 0 # Total number of digits used up to a certain page\n    page = 0 # Current page number\n\n    while digits_per_page < 1524:\n        page += 1 # Go to the next page\n        digits_in_page = len(str(page)) # Find out how many digits the current page number has\n        digits_per_page += digits_in_page # Add the digits of the current page to the total\n\n    return page\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    ans = sum(factors)\n    \n    return ans\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    min_apples = (30 - (6 - 1)) // 6 + 1\n    return min_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n\n    # For every 1 apple, 2 bananas and 3 oranges are used\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n\n    # Total number of fruits used\n    equation3 = Eq(apple + banana + orange, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years after which the mother will be 3 times older than Anna\n    x = symbols('x')\n    # Anna's age in x years\n    anna_future_age = 8 + x\n    # Mother's age in x years\n    mother_future_age = 44 + x\n    # Equation representing the future ages\n    equation = Eq(mother_future_age, 3 * anna_future_age)\n\n    # Solve the equation for x\n    x_years = solve(equation, x)\n\n    return x_years[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for unknowns\n    may_long_ribbons = symbols('may_long_ribbons')\n    \n    # Lengths of ribbons in cm\n    long_ribbon_length = 70\n    short_ribbon_length = 40\n    length_difference = 240  # 2.4m in cm\n    \n    # May has 7 pieces of short ribbon\n    may_short_ribbons = 7  \n    # Nancy has 18 pieces of long ribbon\n    nancy_long_ribbons = 18\n    \n    # Equation based on the given information\n    equation = Eq(may_short_ribbons * short_ribbon_length + may_long_ribbons * long_ribbon_length, \n                  nancy_long_ribbons * long_ribbon_length - length_difference)\n    \n    # Solve the equation to find the number of long ribbons May has\n    may_long_ribbons_solution = solve(equation, may_long_ribbons)[0]\n    \n    # Total number of ribbons May has (long + short)\n    total_ribbons_may = may_short_ribbons + may_long_ribbons_solution\n    \n    return total_ribbons_may\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assume all animals are chickens, hence they all have 2 legs.\n    total_legs = 34\n    total_chickens = 12\n\n    # Each chicken has 2 legs, so 12 chickens will have 24 legs.\n    chicken_legs = total_chickens * 2\n\n    # Now we need to find how many legs are extra if all are chickens.\n    extra_legs = total_legs - chicken_legs\n\n    # Since rabbits have 4 legs, and chickens have 2 legs,\n    # for every rabbit we assumed to be a chicken, we have 2 'extra' legs.\n    # Thus the number of extra legs divided by 2 will give us the number of rabbits.\n    num_rabbits = extra_legs // 2\n\n    return num_rabbits\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    points_difference = 15\n    \n    for avril_correct in range(11):\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = total_points - avril_points\n        if eddie_points - avril_points == points_difference:\n            return avril_correct\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    return 2.4 * 52 / 100 + 7.6 * 52 / 100\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_volume = 1      # total volume in litres\n    ratio_red_to_blue = 3 # the ratio of red paint to blue paint\n\n    # Calculate red paint volume based on total volume and ratio\n    red_paint_volume = total_volume * (ratio_red_to_blue / (ratio_red_to_blue + 1))\n    \n    return red_paint_volume\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = 8\n    mean = 6\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    given_away = total_money / 4\n    money_left = total_money - given_away\n    return money_left\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume A has a books and B has b books originally\n    a, b = symbols('a b')\n\n    # If A gives B 40 books, they have the same number, so: a-40 = b+40\n    equation1 = Eq(a - 40, b + 40)\n\n    # If B gives A 40 books, A has 3 times the books B has, so: a+40 = 3*(b-40)\n    equation2 = Eq(a + 40, 3 * (b - 40))\n\n    # Solve the system of equations to find the number of books A and B have\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Total amount of grass is the same in both scenarios. \n    # Let total_grass = grass per cow per day * number of cows * number of days\n    # According to the first scenario: total_grass = 8 cows * 10 days\n    # According to the second scenario: total_grass = 4 cows * 15 days\n    # Set the two equal to each other: 8 cows * 10 days = 4 cows * 15 days\n    # Solve for grass per cow per day: grass_per_cow_per_day = (8 * 10) / (4 * 15)\n    grass_per_cow_per_day = (8 * 10) // (4 * 15)\n    \n    # We now know how much grass one cow will eat per day.\n    # We need to calculate how many cows can be fed for 5 days with the total amount of grass.\n    # total_cows_for_5_days = total_grass / (grass_per_cow_per_day * 5 days)\n    # But from the first scenario we know that total_grass == 8 cows * 10 days\n    # Therefore, total_cows_for_5_days = (8 cows * 10 days) / (grass_per_cow_per_day * 5 days)\n    total_cows_for_5_days = (8 * 10) // (grass_per_cow_per_day * 5)\n    \n    return total_cows_for_5_days\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_of_one_packet = 1.02 / 12\n    total_mass_of_four_packets = mass_of_one_packet * 4\n    return total_mass_of_four_packets\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    max_number = 99\n    while max_number > 0:\n        if (max_number - 3) % 4 == 0 and (max_number - 3) % 5 == 0:\n            return max_number\n        max_number -= 1\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let's denote the cost of each compact disc as c.\n    # We know that 4 compact discs plus 3 tapes cost £83\n    # And each tape costs £9. So, 3 tapes cost 3 * £9 = £27.\n    # Therefore, the cost of 4 compact discs is £83 - £27.\n\n    tapes_cost = 3 * 9\n    total_cost = 83\n    cds_cost = total_cost - tapes_cost\n    \n    # Now we have the total cost of 4 compact discs.\n    # To find the cost of each disc, we divide the total cost by 4.\n    \n    cost_per_cd = cds_cost / 4\n    return cost_per_cd\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # We start by giving 1 apple to each of the 8 children, which will leave us with 50 - 8 apples\n    remaining_apples = 50 - 8\n    # Now, we need to distribute these remaining apples among 8 children in such a way that\n    # each child receives a different number of apples and we want to minimize the number of apples\n    # for the child who receives the most.\n    \n    # The best strategy is to start giving 1 additional apple to each child until it's not possible\n    # to give more without repeating the number of apples for any child.\n    # For example, after giving 1 apple to each: 1, 1, 1, 1, 1, 1, 1, 1 (remaining: 42)\n    # Then we give 1 more apple starting from the child who got 1 apple, resulting in: 2, 1, 1, 1, 1, 1, 1, 1 (remaining: 41)\n    # We continue this process while keeping track of the maximum number of apples given to a single child\n\n    # Initial allocation of apples: 1, 2, 3, 4, 5, 6, 7, 8\n    # We have used 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36 apples, remaining 50 - 36 = 14 apples\n    max_apples_per_child = 8\n    remaining_apples = 14\n\n    # Now we distribute the remaining 14 apples starting from the child who has the least (1) to the one who has the most (8)\n    # giving 1 apple at a time:\n    # Each round of distribution, we add 8 apples (1 to each child), which means we can have 1 full round (8 apples)\n    # and then we can distribute the remaining 6 apples, giving 1 apple per child starting from the least.\n    # This will lead us to 1 additional apple for the first 6 children: 2, 3, 4, 5, 6, 7, 8, 9\n    # But, now we have 2 children with 7 apples, which is not allowed since each child must have a different\n    # number of apples, so we pass an apple from the child who was going to receive 7 to the child who\n    # was going to receive 8, resulting in: 2, 3, 4, 5, 6, 7, 7+1, 9-1. Now our distribution will look like:\n    # 1+1, 2+1, 3+1, 4+1, 5+1, 6+1, 8, 9\n\n    # Now we can give one more apple to the children who had 1 to 6 apples, but we must skip the child\n    # with 7 apples to prevent duplicates:\n    # Thus the distribution is now: 2+1, 3+1, 4+1, 5+1, 6+1, 7, 8+1, 8+1\n    \n    # Finally, we ensure that there are no duplicates by moving the apple from the first child to the last:\n    # 2, 4, 5, 6, 7, 7+1, 9, 9 => 2, 4, 5, 6, 7, 8, 9, 9+1\n\n    # The child with the most apples now has 8 (initially) + 1 full round + 2 apples from distributing the remainder = 8 + 1 + 2\n    max_apples_per_child += 1 + 2  # One full round and 2 remaining apples\n\n    return max_apples_per_child\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # We're given that the incorrect division result is 99.396 less than the true result.\n    # Let's denote the true result as R and the dividend (number being divided) as D.\n    # The divisor in incorrect division was treated as 122 (because the decimal was forgotten)\n    # The divisor in correct division is 1.22.\n    # Therefore, the incorrect result is D/122 and the true result is D/1.22.\n    # According to the problem: R - D/122 = 99.396.\n    # From this equation, we want to find the value of R.\n\n    # Given the error/miss value\n    error_result = 99.396\n    # Convert the divisor back to actual decimal form\n    correct_divisor = 1.22\n    incorrect_divisor = 122\n\n    # Derive the dividend D using the relation with the incorrect result (D = 122 * error_result)\n    D = incorrect_divisor * error_result\n    \n    # Now calculate the correct result (true result) R = D / correct_divisor\n    R = D / correct_divisor\n\n    return R\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let Hisham's number of cards be h.\n    # Since Melissa had twice as many cards as Hisham, Melissa's number of cards is 2h.\n    # Thus, we have h + 2h = total_cards.\n    # Solving for h gives us Hisham's number of cards.\n    h = total_cards // 3\n\n    # Melissa's number of cards\n    melissa = 2 * h\n\n    # The number of cards Melissa should give to Hisham\n    # so they have the same number is (melissa - h) / 2.\n    give_to_hisham = (melissa - h) // 2\n\n    return give_to_hisham\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # There are two unknowns, we can call them a and b.\n    # According to the sequence, we have the following relationships:\n    # a + b = third number\n    # b + (a + b) = fourth number, which is 6\n    # (a + b) + (b + a + b) = fifth number\n    # (b + a + b) + (a + b + b + a + b) = sixth number, which is 15\n\n    # Now, let's write those as equations\n    # fourth_number = 6\n    # fifth_number = unknown\n    # sixth_number = 15\n\n    # From this, we have:\n    # a + 2*b = fourth_number (1)\n    # 2*a + 3*b = fifth_number (2)\n    # 3*a + 5*b = sixth_number (3)\n\n    # Let's solve the equations (1) and (3) for a and b\n    fourth_number = 6\n    sixth_number = 15\n\n    # From equation (1): a = fourth_number - 2*b\n    # Substitute a in equation (3):\n    # 3*(fourth_number - 2*b) + 5*b = sixth_number\n    # 3*fourth_number - 6*b + 5*b = sixth_number\n    # b = sixth_number - 3*fourth_number\n    b = (sixth_number - 3*fourth_number) // -1\n    a = fourth_number - 2*b\n\n    # Now that we have a and b, we can find the fifth number\n    fifth_number = 2*a + 3*b\n\n    # Finally, the seventh number will be:\n    seventh_number = fifth_number + sixth_number\n\n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Let x be the number Tasha first thought of\n    # According to the problem, we have the equation 3x + 8 = 35\n    # To find x, we need to perform inverse operations:\n    # Subtract 8 from both sides of the equation then divide by 3\n\n    # Subtract 8 from 35\n    result_after_subtracting = 35 - 8\n    # Divide the result by 3\n    original_number = result_after_subtracting / 3\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    max_groups = gcd(boys, girls)\n\n    return max_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # 1 litre = 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    # Defining the function for the term calculation\n    def term(n):\n        return 1 / (n * (n + 5))\n\n    # Variable initialization\n    sum_terms = 0\n\n    # Calculate the sum of terms\n    for i in range(1, 36, 5):\n        sum_terms += term(i)\n\n    # Multiply the sum of the terms by 36\n    ans = 36 * sum_terms\n\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_permutations = permutations(digits)\n    valid_numbers = [int(''.join(map(str, perm))) for perm in all_permutations if perm[4] % 2 != 0]\n    return min(valid_numbers)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Men's rate of work\n    men_rate = 1 / (24 * 16)\n    # Women's rate of work\n    women_rate = 1 / (16 * 24)\n\n    # Combined rate of 10 men and 6 women\n    combined_rate = (10 * men_rate) + (6 * women_rate)\n\n    # Total time to complete the job with combined rate\n    days = 1 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    lines = rectangles * 2\n    regions = 1 \n\n    for i in range(1, lines + 1):\n        regions += i\n    \n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n\n    # First we calculate the number of permutations without restriction for total_people\n    total_permutations = factorial(total_people)\n\n    # Next, we calculate the number of permutations where Eddie is in middle (3rd position):\n    permutations_with_eddie_in_middle = factorial(total_people - 1)\n\n    # Finally, the total number of ways where Eddie is not in the middle is the\n    # difference between total permutations and permutations with Eddie in middle\n    ways_without_eddie_in_middle = total_permutations - permutations_with_eddie_in_middle\n\n    return ways_without_eddie_in_middle\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # This is a sequence where the ratio between terms is constant.\n    # Given: 96, n, 24, 12, 6, we can calculate the common ratio (r) with the given non-missing terms.\n    # Since 24 is (96/r^2) and 12 is (24/r), we can set up the equation 96/r^2 = 24 and 24/r = 12 to find r.\n    \n    # Calculate the ratio r\n    r = 24 / 12\n\n    # Once we have the common ratio, we can calculate n as the next term after 96.\n    # That is: 96 / r = n\n    n = 96 / r\n    \n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    \n    # Equation based on the problem statement\n    equation = Eq((1/3) * initial_money + 56, (1 - 3/8) * initial_money)\n    \n    # Solving the equation for initial amount of money\n    initial_money_solution = solve(equation, initial_money)[0]\n    \n    # Calculating the total amount spent\n    total_spent = (1/3) * initial_money_solution + 56\n    \n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the digits 1-9\n    perms = permutations([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    # Initialize minimum number to a large value\n    min_number = float('inf')\n\n    # The divisibility rule for 11 is that the alternating sum of the digits must be 0 or a multiple of 11\n    for perm in perms:\n        if (perm[0] - perm[1] + perm[2] - perm[3] + perm[4] - perm[5] + perm[6] - perm[7] + perm[8]) % 11 == 0:\n            # Convert the tuple to the corresponding integer\n            number = int(''.join(map(str, perm)))\n            # Update minimum number if a smaller number is found\n            if number < min_number:\n                min_number = number\n\n    return min_number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    pass_time = 10  # s\n    \n    # Relative speed of the train compared to Eddie\n    relative_speed = train_speed + eddie_speed\n    \n    # The length of the train is the relative speed times the time it takes to pass Eddie\n    train_length = relative_speed * pass_time\n    \n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Defining the congruences based on the problem statement.\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    # Using the solve_congruence function from sympy to apply the Chinese Remainder Theorem.\n    res = solve_congruence(*congruences)\n    return res[0]  # Taking only the first value, which is the least possible value.\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    ops = ['+', '*']  # list to store possible operations\n    # Generate all possible combinations of + and *\n    for combination in product(ops, repeat=3):\n        expression = f\"1{combination[0]}2{combination[1]}3{combination[2]}4\"\n        # Evaluate the expression and update the maximum value found\n        max_value = max(max_value, eval(expression))\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    marks_for_correct = 8\n    marks_deducted = 3\n    total_questions = 12\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * marks_for_correct - incorrect_answers * marks_deducted == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900  # distance of the train plus the bridge\n    speed = 400  # speed of the train in m/min\n    time = total_distance / speed  # time = distance / speed\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated using the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # We have n = 60 as the total number of terms.\n    # We also know the sum of the first 5 numbers and the sum of the last 5 numbers.\n    # We need to find the first_term and last_term of the sequence in order to find the sum of all 60 numbers.\n    \n    n = 60\n    # Let's denote the first term of the sequence as a, and the common difference as d.\n    # The sum of the first 5 terms (S5) is: S5 = 5/2 * (2a + (5-1)*d) = 10\n    # The sum of the last 5 terms (SL5) is: SL5 = 5/2 * (2(a + (60-1)*d) + (5-1)*d) = 120\n\n    # From the given sums we can derive two equations:\n    # 5/2 * (2a + 4d) = 10  -> (1)\n    # 5/2 * (2(a + 59d) + 4d) = 120  -> (2)\n\n    # Equation (1) simplifies to:\n    # 5a + 10d = 10  -> To make calculations simpler divide by 5\n    # a + 2d = 2 -> (1a)\n    \n    # Equation (2) simplifies to:\n    # 5a + 295d + 10d = 120\n    # 5a + 305d = 120 -> To make calculations simpler divide by 5\n    # a + 61d = 24 -> (2a)\n\n    # Let's use equation (1a) to express a in terms of d:\n    # a = 2 - 2d -> (3)\n\n    # Substitute a from (3) into (2a) to find d:\n    # (2 - 2d) + 61d = 24\n    # 61d - 2d = 24 - 2\n    # 59d = 22\n    d = 22 / 59\n    \n    # Now substitute d back into (3) to find a:\n    # a = 2 - 2*(22/59)\n    a = 2 - (44 / 59)\n    a = (118/59) - (44/59)\n    a = 74/59\n    \n    # Now we can calculate the sum of all 60 numbers\n    first_term = a\n    last_term = a + (n - 1) * d\n    \n    Sum = n/2 * (first_term + last_term)\n    return Sum\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(3, 1997):\n        a, b = b, a + b\n        a %= 3  # only remainder is significant for divisibility by 3\n        b %= 3\n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let peter have x stickers\n    peter = symbols('peter')\n    \n    # Sam had 40 more stickers than Peter initially\n    sam = peter + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_to_peter = 0.20 * sam\n    \n    # Peter's new count is original plus what Sam gave\n    peter_new = peter + sam_to_peter\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_to_sam = 0.25 * peter_new\n    \n    # Sam's new count is original plus what Peter gave minus what Sam gave to Peter\n    sam_new = sam - sam_to_peter + peter_to_sam\n    \n    # In the end, Sam had 96 more stickers than Peter\n    final_equation = Eq(sam_new - peter_new, 96)\n    \n    # Solve the equation\n    result = solve(final_equation, peter)\n\n    return result[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current_age * 3, hazel_current_age + 12)\n    \n    # On Hazel's 18th birthday, her mom will be three times Hazel's age\n    # Hazel_current_age + (18 - Hazel_current_age) => 18 (Hazel's age on 18th birthday)\n    # Mom_current_age + (18 - Hazel_current_age) => Mom's age when Hazel is 18\n    equation2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n    \n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_n = n * (n + 1) // 2\n    ans = sum_n ** 2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    cards_needed = 13 + 1  # One from each number plus an extra one to ensure consecutive numbers.\n    return cards_needed\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # The fifth sheet will have pages 9, 10, 27, and 28.\n    # The back page has number 36, so page 1 is on the first sheet.\n    # The page numbers increase from the front to the middle of the newspaper,\n    # then decrease from the middle to the back.\n\n    # Since the newspaper is unfolded, the pages facing each other sum up to 36 + 1 = 37\n    # Because the fifth sheet from the front would also be the fifth sheet from the back if unfolded.\n    \n    # So we calculate the sum of the page numbers for the fifth sheet.\n    page_sum = 9 + 10 + 27 + 28\n    \n    return page_sum\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_laptops, initial_cost_per_laptop = symbols('initial_laptops initial_cost_per_laptop')\n    \n    # Original situation equations\n    original_revenue = 2000 * initial_laptops\n    original_profit = 60000\n    original_total_cost = original_revenue - original_profit\n    \n    # After cost decrease\n    decreased_cost_per_laptop = initial_cost_per_laptop - initial_cost_per_laptop / 5\n    new_total_cost = decreased_cost_per_laptop * initial_laptops\n    increased_profit = original_profit * 1.3\n    new_revenue = new_total_cost + increased_profit\n    \n    # Set the revenue from selling laptops at the increased selling price equal to the original scenario\n    equation = Eq(new_revenue, original_revenue)\n        \n    # Solve the two equations together\n    solutions = solve((equation, Eq(original_total_cost, initial_laptops * initial_cost_per_laptop)), \n                      (initial_laptops, initial_cost_per_laptop))\n    \n    return solutions[initial_laptops]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    a = 1  # Initial guess for 'a'\n    while True:\n        # Test each value of 'a' until the conditions are satisfied\n        remainders = []\n        for d in [7, 9, a, 28]:\n            # Find the smallest positive remainder for division by d\n            for i in range(1, d):\n                if (i * 9) % d == 0:\n                    remainders.append(i)\n                    break\n            else:\n                break\n        else:\n            # Check if the remainders form an increasing arithmetic sequence\n            if len(set([remainders[i+1] - remainders[i] for i in range(len(remainders)-1)])) == 1:\n                # Calculate number M using the last remainder and divisor\n                M = (28 * 9) - remainders[-1]\n                return M\n        a += 1\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4\n\n    # Calculate number of rows\n    num_rows = ((last_row_seats - first_row_seats) / difference) + 1\n\n    # Calculate the sum of an arithmetic series\n    total_seats = num_rows * (first_row_seats + last_row_seats) / 2\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 130):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boys_more = 36\n    # Start looking for a square number which can be written as a difference of two squares\n    n = 1\n    while True:\n        girls = (n + 1) // 2\n        boys = girls + boys_more\n        if girls ** 2 - (girls - 1) ** 2 == boys:\n            break\n        n += 2\n    total_students = boys + girls ** 2 - (girls - 1) ** 2\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Three men can dig a trench 120 metres long in two days.\n    work_done_by_3_men_in_2_days = 120\n    \n    # To find out how much work one man can do in one day, we need to divide\n    # the total work by the number of men and then by the number of days.\n    work_done_by_1_man_in_1_day = work_done_by_3_men_in_2_days / 3 / 2\n    \n    # Now we need to find out how much work four men would do in one day.\n    work_done_by_4_men_in_1_day = work_done_by_1_man_in_1_day * 4\n    \n    # If four men dig, how long it would take them to dig a trench 880 metres long.\n    time_for_4_men_to_dig_880_metres = 880 / work_done_by_4_men_in_1_day\n    \n    return time_for_4_men_to_dig_880_metres\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    # total number of people to interview\n    total_people = 400\n    \n    # Ellie's interview rate per week\n    ellie_rate = 60\n\n    # total time in weeks when Ellie and Gloria work together\n    together_time = 4\n\n    # people interviewed by Ellie when working together\n    ellie_work = ellie_rate * together_time\n\n    # remaining work Gloria needs to finish alone\n    gloria_work = total_people - ellie_work\n\n    # Gloria's interview rate per week\n    gloria_rate = gloria_work / together_time\n\n    # time it would take Gloria to finish all interviews by herself\n    gloria_time = total_people / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    return (2 / 5) * 15\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books to move from the first shelf to the second shelf\n    # After moving, the first shelf will have 18 - x books\n    # After moving, the second shelf will have 24 + x books\n    # The second shelf will have twice as many books as the first shelf, so:\n    # 24 + x = 2 * (18 - x)\n\n    # Solving for x\n    x = (24 - 2 * 18) / (1 - 2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = (285 + 6/7) + (181 + 10/11) + (153 + 12/13)\n    denominator = 1/7 + 1/11 + 1/13\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = symbols('total_pupils')\n    \n    band_pupils = 5\n    choir_pupils_fraction = 3/4\n    neither_fraction = 2/9\n\n    equation = Eq(band_pupils + choir_pupils_fraction * (total_pupils - band_pupils) + neither_fraction * total_pupils, total_pupils)\n    \n    solutions = solve(equation, total_pupils)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_in_seconds = 20\n    distance_in_meters = 300\n\n    speed_in_meters_per_second = distance_in_meters / time_in_seconds\n\n    return speed_in_meters_per_second\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_last_box_7 = 3\n    for i in range(lollipops_left_4, 1000, 4):  # assuming maximum lollipops he could have is less than 1000\n        if (i - lollipops_last_box_7) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    long_tubes, short_tubes = symbols('long_tubes short_tubes')\n\n    equation1 = Eq(8*long_tubes + 5*short_tubes, 47)\n    # The number of tubes must be non-negative integers\n    for possible_long_tubes in range(47//8 + 1):\n        try:\n            solutions = solve(equation1.subs(long_tubes, possible_long_tubes), short_tubes)\n            if solutions[short_tubes].is_integer and solutions[short_tubes] >= 0:\n                return possible_long_tubes\n        except:\n            continue\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    a3 = 8\n    a9 = 26\n    \n    # Calculate the common difference (d)\n    d = (a9 - a3) / (9 - 3)\n\n    # Calculate the first term (a1) using the 3rd term and the common difference\n    a1 = a3 - 2 * d\n\n    # Calculate the 11th term\n    a11 = a1 + 10 * d\n\n    return a11\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F represent the original amount of bracelets Felicia had\n    # Janice initially had J bracelets and we know that J = 96\n\n    # According to the given information,\n    # Janice bought 2/5 of the bracelets which Felicia sold (which is 3/5 of F),\n    # so Janice bought (2/5) * (3/5) * F = (6/25) * F bracelets from Felicia\n\n    # After selling, Felicia had (1 - 3/5)F = (2/5)F bracelets\n\n    # After buying, Janice had J + (6/25)F = 96 + (6/25)F bracelets\n\n    # Then the ratio of the number of Felicia's bracelets to the number of Janice's bracelets became 5:7\n    # Which can be written as (2/5)F / [96 + (6/25)F] = 5/7\n\n    # Now let's find F which is the original number of bracelets Felicia had\n    # Using cross multiplication, we can set up the equation as follows:\n    # 7 * (2/5)F = 5 * [96 + (6/25)F]\n    # Simplifying both sides gives:\n    # 14F = 480 + (30/25)F\n    # 14F = 480 + (6/5)F\n    # 14F - (6/5)F = 480\n    # (70/5)F - (6/5)F = 480\n    # (64/5)F = 480\n    # F = 480 * (5/64)\n    \n    F = 480 * (5/64)\n\n    # Now we can calculate how many bracelets Janice bought from Felicia\n    # Janice bought (6/25) * F bracelets\n    bracelets_bought = (6/25) * F\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    sum_of_cubes = sum([x**3 for x in range(1, 15) if x % 3 != 0])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15 / 100\n    discount_amount = original_price * discount_percentage\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Decimal multiplication without the decimal point is equivalent to multiplication by an additional 100 (moving the decimal point two places to the right)\n    # Let x be the number Will multiplies 4.32 with\n    # The equation representing the error is: 432 * x - 4.32 * x = 2138.4\n    # Simplify the equation: (432 - 4.32) * x = 2138.4\n    # This simplifies to: 427.68 * x = 2138.4\n    # Solve for x: x = 2138.4 / 427.68\n    x = 2138.4 / 427.68\n    # The true result is then: 4.32 * x\n    true_result = 4.32 * x\n    \n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    from math import gcd\n\n    # Find the differences between the numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n\n    # Find the GCD of the two differences\n    gc = gcd(diff1, diff2)\n\n    # Find the divisors of the GCD (possible values of A)\n    divisors = []\n    for i in range(1, gc + 1):\n        if gc % i == 0:\n            divisors.append(i)\n\n    # Sum the divisors, excluding 1 because A should be greater than 1\n    return sum(divisors) - 1\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    equation2 = Eq(girls, boys + 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the initial amount of milk candy, and f be the amount of fruit candy\n    m, f = symbols('m f')\n\n    # At first, the ratio of milk candy to fruit candy was 7:9\n    equation1 = Eq(m/f, 7/9)\n\n    # After eating eight pieces of milk candy, the ratio changes to 2:3\n    equation2 = Eq((m - 8)/f, 2/3)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (m, f))\n\n    # Return the initial amount of milk candy\n    return solutions[m]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Age of grandmother in 2008\n    grandmother_age_2008 = 80\n\n    # Year when grandmother was 80\n    year_grandmother_80 = 2008\n\n    # Age of mum in 1996\n    mum_age_1996 = 40\n\n    # Year when mum was 40\n    year_mum_40 = 1996\n\n    # Calculate the year when mum was born\n    mum_birth_year = year_mum_40 - mum_age_1996\n\n    # Calculate how old grandmother was when mum was born\n    grandmother_mum_birth = grandmother_age_2008 - (year_grandmother_80 - mum_birth_year)\n\n    return grandmother_mum_birth\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i):\n            if i == 23:\n                ans = count\n                break\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    lemonade, plus1000 = symbols('lemonade plus1000')\n\n    # Set up the equations based on the given information\n    equation_income = Eq(4 * lemonade + 7 * plus1000, 2012)\n    equation_bottles = Eq(lemonade + plus1000, 350)\n\n    # Solve the system of equations\n    solutions = solve((equation_income, equation_bottles), (lemonade, plus1000))\n\n    # Find the minimum number of bottles of \"1000 Plus\"\n    # Since we want the minimum \"1000 Plus\", we want to maximize lemonade\n    # We achieve this by looking for the solution where lemonade is an integer\n    for sol in solutions:\n        if sol[lemonade].is_integer:\n            return sol[plus1000]\n\n# Get the final answer\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples = 60\n    apples_per_friend = 4\n    number_of_friends = apples // apples_per_friend\n    apples_needed = (apples_per_friend + 1) * number_of_friends\n    return apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Maximum socks to be drawn to guarantee no white pair:\n    # Draw all red and black socks first in the worst case scenario.\n    max_drawn_without_white_pair = 10 + 10 \n    # Draw one more which has to be white for sure to make at least one white pair.\n    max_drawn_for_white_pair = max_drawn_without_white_pair + 1\n    \n    return max_drawn_for_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups of 4 pupils\n    # Let y be the number of groups of 6 pupils\n    # Total number of students: 4x + 6y = 112\n    # Total number of groups: x + y = 24\n    \n    # Using the system of linear equations to solve for x and y\n    # x = 24 - y\n    # 4(24 - y) + 6y = 112\n    \n    # Simplify the equation: 96 - 4y + 6y = 112\n    # 2y = 112 - 96\n    # 2y = 16\n    # y = 8\n    \n    # The number of groups of 6 pupils\n    y = 8\n    return y\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Total sum of the first three numbers\n    total_sum_first_three = 3 * 60\n    # Total sum of the four numbers\n    total_sum_four = 4 * 90\n    # Fourth number is the difference between the sum of four numbers and the sum of the first three\n    fourth_number = total_sum_four - total_sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                if len(set([A, B, C])) == 3:\n                    ABC = 100 * A + 10 * B + C\n                    return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    wheat_needed = 8\n    fish_needed = wheat_needed / fish_to_wheat_ratio\n\n    return fish_needed\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    discount_handbag_percentage = 20\n    paid_handbag = 428\n    total_discount = 121\n\n    original_price_handbag = paid_handbag / (1 - discount_handbag_percentage / 100)\n    discount_handbag = original_price_handbag * (discount_handbag_percentage / 100)\n    discount_purse = total_discount - discount_handbag\n\n    discount_purse_percentage = 28\n    original_price_purse = discount_purse / (discount_purse_percentage / 100)\n\n    return original_price_purse\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "from math import factorial\n\ndef solution():\n    n = 25\n    count = 0\n    factorial_n = factorial(n)\n    while factorial_n % 10 == 0:\n        count += 1\n        factorial_n //= 10\n    return count\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    day_climb = 4\n    night_slide = 1\n    distance_per_day = day_climb - night_slide\n    day = 0\n    current_distance = 0\n\n    while True:\n        day += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n\n    total_times = times_per_week * weeks\n\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since the recurring decimal is 0.A22A22A22...,\n    # the sum of the first 20 digits include the complete recurring pattern 10 times.\n    total_sum = 80\n    num_repeats = total_sum // (A + 2 * 2) # Since A2 is repeated\n\n    # Find A from the equation: A + 4 = 8\n    A = total_sum // (num_repeats * 2) - 4\n\n    return A\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    total = 398\n    quarter = total / 4\n    return quarter\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Star jogs from 6:30 am to 7:00 am\n    jogging_time = 0.5  # 30 minutes in terms of hours\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Star walks from 7:00 am to 8:00 am\n    walking_time = 1  # 60 minutes in terms of hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x represent the original amount of money Elvin had.\n    # Amount spent on chair: $120\n    # Remaining after buying the chair: x - 120\n    # 40% of the remainder spent on the jacket: 0.4 * (x - 120)\n    # Remaining after buying the jacket: (x - 120) - 0.4 * (x - 120) = 0.6 * (x - 120)\n    # According to the problem, after all the shopping, Elvin had 30% of his original amount left, i.e. 0.3 * x\n\n    # Therefore, we have the equation: 0.6 * (x - 120) = 0.3 * x\n    # Solving for x:\n    \n    # 0.6x - 72 = 0.3x\n    # 0.6x - 0.3x = 72\n    # 0.3x = 72\n    # x = 72 / 0.3\n    # x = 240\n\n    # Elvin originally had $240\n    return 240\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_max_layer = (total_books + layers - 1) // layers \n    return min_books_max_layer\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    target_sum = 31\n    max_product = 0\n    \n    for a in range(1, target_sum - 1):\n        for b in range(1, target_sum - a):\n            c = target_sum - a - b\n            max_product = max(max_product, a * b * c)\n            \n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let x be the number of books originally bought.\n    # Total cost of the original books is 3.50x.\n    # Total cost of the 2 new books is 2 * 6 = 12.\n    # The new average cost is 4.00, and the total number of books is now x + 2.\n    # The total cost for all the books is now 3.50x + 12.\n    # According to the new average, total cost should also be 4 * (x + 2).\n    # We set up the equation: 3.50x + 12 = 4(x + 2)\n    # Now solve for x:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(3.5*x + 12, 4*(x + 2))\n    num_books_original = solve(equation, x)[0]\n    # The total number of books is the original number of books plus 2\n    total_books = num_books_original + 2\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    # Since 0 cannot be the first digit in a three-digit number, we need to consider cases\n    count = 0\n    \n    # Case 1: 0 is the middle digit\n    # - There are 3 choices for the first digit (1, 2, 3)\n    # - There are 2 remaining choices for the last digit (the two numbers that weren't used in the first digit)\n    count += 3 * 2\n    \n    # Case 2: 0 is the last digit\n    # - There are 3 choices for the first digit (1, 2, 3)\n    # - There are 2 remaining choices for the middle digit (the two numbers that weren't used in the first digit)\n    count += 3 * 2\n    \n    # Case 3: 0 is not used\n    # - There are 3 choices for the first digit (1, 2, 3)\n    # - There are 2 remaining choices for the middle digit (the two numbers that weren't used in the first digit)\n    # - There is only 1 choice left for the last digit (the number that wasn't used in the first or second digit)\n    count += 3 * 2 * 1\n    \n    return count\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_of_cheese_kg = 1.2\n    weight_of_one_piece_g = 30\n\n    weight_of_cheese_g = weight_of_cheese_kg * 1000\n    num_pieces = weight_of_cheese_g // weight_of_one_piece_g\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # It's a decreasing sequence\n    n = 1  # Starting from the first term\n\n    # Since we want to determine the number of terms before it becomes negative\n    # we want to find n such that a_n = a_1 + (n - 1)*d > 0\n    while (first_term + (n - 1) * common_difference) > 0:\n        n += 1\n\n    # After the loop ends, n will be one term past the last positive term\n    return n - 1  # Thus, we return n - 1 to get the number of positive terms\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # convert liters to quarts\n    cups = liters_to_quarts / 0.5  # divide by the capacity of the cup in quarts\n    return round(cups)\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has, and a be the number Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 candies, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 candies, Rachel has 3 times as many as Alice\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # already known values of B and D\n    B, D = 2, 0\n\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len(set([A, B, C, D, E, F])) == 6:  # all digits must be different\n                        ABCDEF = A * 10**5 + B * 10**4 + C * 10**3 + D * 10**2 + E * 10 + F\n                        EFABCD = E * 10**5 + F * 10**4 + A * 10**3 + B * 10**2 + C * 10 + D\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return E * 10**3 + F * 10**2 + A * 10 + C\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    angel, belle = symbols('angel belle')\n    \n    # Angel had 5/6 as many sweet wrappers as Belle\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, 0.75 * belle)\n    \n    solutions = solve((equation1, equation2), (angel, belle))\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time is from 6:30 AM to 7:30 AM, which is 1 hour\n    jogging_time = 1  # in hours\n\n    # Walking time is from 7:30 AM to 9:30 AM, which is 2 hours\n    walking_time = 2  # in hours\n\n    # Jogging speed is 6 miles per hour\n    jogging_speed = 6  # in miles per hour\n\n    # Walking speed is 5 miles per hour\n    walking_speed = 5  # in miles per hour\n\n    # Distance covered by jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Distance covered by walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance covered\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Since the order of the vases doesn't matter\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n    new_balance = account_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, money = symbols('children money')\n\n    # If there was £0.20 more, each child would get £0.70\n    equation1 = Eq(money + 0.20, children * 0.70)\n\n    # If each child was to receive £0.60, £2.10 would be left\n    equation2 = Eq(money - children * 0.60, 2.10)\n\n    solutions = solve((equation1, equation2), (children, money))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('2 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for n in range(10, 10000):  # Let's start with a reasonable range, expecting the number not to be too large\n        if int(str(9) + str(n)[:-1]) == 4 * n:  # move the 9 to the front, and compare with 4 times the original number\n            return n\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n    \n    total_students = 5  # Excluding Eddie and Avril who have fixed positions\n    arrangements = factorial(total_students)  # 5 students can be arranged in 5! ways\n    \n    # Eddie is at the left end and Avril has two possible positions (left or right of Eddie)\n    possible_positions_for_Avril = 2  # Avril can either be to the left or right of Eddie\n    \n    ans = arrangements * possible_positions_for_Avril\n    return ans\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # We take the worst case scenario for each pair until we get a matching pair.\n    # Since Dilly can't differentiate between left-hand and right-hand gloves, \n    # we should calculate based on color.\n    # We pick gloves one by one in the worst case scenario.\n\n    # Pick 1 blue left, 2 green lefts (which guarantees a pair of green)\n    # but we continue for blue since 1 blue left was picked, we might end\n    # up picking all 3 blue rights.\n    # So far: 1 (blue left) + 2 (green left) + 3 (blue right) = 6 gloves\n    # If we pick one more glove, we are either picking the pair for the\n    # blue left or a green right which in either case gives us a pair.\n    # One more glove needed, so the total is 6 (previous count) + 1 = 7 gloves\n\n    count = 6 + 1\n    return count\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Calculate the number of holes initially planned\n    initial_interval = 3\n    circumference = 300\n    initial_holes = 30  # 30th hole\n    \n    # Calculate total number of holes under new interval\n    new_interval = 5\n    total_holes = circumference // new_interval  # Floor division to get whole number of holes\n    \n    # Calculate additional holes needed\n    additional_holes = total_holes - initial_holes\n    \n    return additional_holes\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n    \n    total_combinations = types_of_pasta * types_of_sauces * types_of_toppings\n    \n    return total_combinations\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) * 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total = solutions[rachel] + solutions[alice]\n    return total\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Calculate the number of ways to reach the 5th step\n    ways_to_fifth = [0] * 6\n    ways_to_fifth[0] = 1  # starting point\n    ways_to_fifth[1] = 1  # one step to the first step\n    ways_to_fifth[2] = 2  # two one-steps or one two-step to the second step\n    \n    for i in range(3, 6):\n        ways_to_fifth[i] = ways_to_fifth[i - 1] + ways_to_fifth[i - 2]\n    \n    # Calculate the number of ways to reach the 10th step from the 5th step\n    ways_from_fifth_to_tenth = [0] * (10 - 5 + 1)\n    ways_from_fifth_to_tenth[0] = 1  # starting at the fifth step\n    \n    for i in range(1, 10 - 5 + 1):\n        ways_from_fifth_to_tenth[i] = ways_from_fifth_to_tenth[i - 1]\n        if i - 2 >= 0:\n            ways_from_fifth_to_tenth[i] += ways_from_fifth_to_tenth[i - 2]\n    \n    # Total number of ways would be product of the ways to reach the 5th and \n    # ways to go from 5th to 10th step\n    total_ways = ways_to_fifth[5] * ways_from_fifth_to_tenth[10 - 5]\n    \n    return total_ways\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    n = 1\n    while True:\n        if n % 3 == 1 and n % 4 == 3 and n % 5 == 4:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits = 0\n    page = 1\n    \n    while digits < total_digits:\n        digits += len(str(page))\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_goal_average = 80 + 10\n    billy_goal_total = billy_goal_average * 5\n    \n    billy_fifth_score = billy_goal_total - billy_total\n    return billy_fifth_score\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 45\n\n    final_cost = initial_cost * (1 + (increase_percentage / 100))\n\n    return final_cost\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    max_val = None\n    expressions = [\n        '((15+5)*5)+(15-(6+7))',  # Outer brackets around (15+5)*5, inner brackets around (6+7)\n        '(15+(5*5))+((15-6)+7)',  # Outer brackets around (5*5), inner brackets around ((15-6)+7)\n        '(15+5)*(5+(15-(6+7)))',  # Outer brackets around (15+5), inner brackets around (15-(6+7))\n        '((15+5)*5)+(15-6)+7',     # Outer brackets around (15+5)*5, no inner brackets needed\n    ]\n    \n    for expr in expressions:\n        val = eval(expr)\n        if max_val is None or val > max_val:\n            max_val = val\n    \n    return max_val\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    term_7 = 39\n    term_8 = 44\n    difference = term_8 - term_7\n    term_100 = term_7 + (100 - 7) * difference\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260\n    factors = factorint(1260)\n\n    # For 1260m to be a square, all primes in its factorization must have even powers\n    # Start with m = 1 (initialize m with the product of primes that do not have even powers)\n    m = 1\n    for prime, power in factors.items():\n        if power % 2 == 1:  # if power is odd, multiply m by the prime to make it even\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    num_peaches = 45\n    num_apples = 5 + 2 * num_peaches\n    return num_apples\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # To find the number of ways two whole numbers can add up to 1000, we\n    # can simply iterate from 1 to 999 (since 0 + 1000 is not a valid pair\n    # as per the example given) and count each pair (x, 1000 - x) as a valid way.\n    # Each number x will pair with exactly one number (1000 - x) to make the sum 1000.\n    \n    # We start counting from 1 because 0 + 1000 is not considered in the provided examples\n    count = 0\n    for x in range(1, 1000):\n        count += 1  # Each iteration represents a valid way to sum up to 1000\n    \n    return count\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    \n    return boats_needed\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    # Find a number that when divided by 4 leaves a remainder of 3\n    # and when divided by 7 also leaves a remainder of 3.\n    # We can iterate over multiples of 28 and check the criteria.\n    \n    i = 0\n    while True:\n        # Check the number that leaves a remainder of 3 when divided by 4 and 7\n        number = 28 * i + 3\n        if number % 4 == 3 and number % 7 == 3:\n            # once we find the number, return the remainder when it is divided by 28\n            remainder = number % 28\n            return remainder\n        i += 1\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11 // 2  # Least common multiple of 8 and 11\n    num = lcm + 6  # The number must be 6 greater than a multiple of the lcm of 8 and 11\n\n    # Finding a two-digit number that satisfies the conditions\n    while num < 10 or num > 99:\n        if num > 99:\n            num -= lcm  # Find a smaller number if num is not two-digit\n        else:\n            num += lcm  # Find a larger number if num is less than 10\n\n    return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base_ones_digit = 9  # The ones digit of 9 is 9.\n    power = 99  # The power we are raising 9 to.\n\n    # The cycle for the ones digit of powers of 9 is 4 steps: 9, 1, 9, 1... and so on.\n    # Thus, we want to find the remainder of the power when divided by the cycle length.\n    cycle_length = 4\n    remainder = power % cycle_length\n\n    # Now we determine the ones digit based on the remainder.\n    # If remainder is 1, the ones digit is 9. If remainder is 0, the cycle has completed which means ones digit is 1.\n    if remainder == 1:\n        ones_digit = base_ones_digit\n    else:\n        ones_digit = 1  # The cycle completed or it's a power multiple of 4 (i.e., 4, 8...) turning ones digit to 1.\n\n    return ones_digit\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Last operation was to subtract 50, so we add back the 50\n    result += 50\n\n    # Step before last is to add the day of his birth twice\n    # Since we don't know the day, we can't directly reverse this step yet\n    # Proceed to the previous step\n\n    # The result before adding the day of his birth twice was a multiple of 50\n    # We can find the closest multiple of 50 below our current result by dividing\n    # and then flooring the result before multiplying back by 50\n    temp_result = (result // 50) * 50\n\n    # Now we can find the day of birth by subtracting this from our result and dividing by 2\n    day_of_birth = (result - temp_result) // 2\n\n    # Now that we have the day, we subtract it twice from our result to revert step (4)\n    result -= (day_of_birth * 2)\n\n    # Previous step was to multiply by 50, so now we divide by 50\n    result /= 50\n\n    # Step (2) was to add 1, so we subtract 1\n    result -= 1\n\n    # The first operation was to multiply the month by 4\n    # So we divide the result by 4 to get the month of birth\n    month_of_birth = result // 4\n\n    # Convert to integers\n    month_of_birth = int(month_of_birth)\n    day_of_birth = int(day_of_birth)\n    \n    # We return the month and day as a tuple\n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n    return stickers_left\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    total_ponies = 6\n    rein_beaus_value = 250000\n    increase_in_average = 10000\n\n    # Let x be the total value of all ponies except Rein Beau\n    # Original total value of ponies in the larger stable is x/2\n    # Original total value of ponies in the smaller stable (with Rein Beau) is x/2 + 250000\n    # The original average value of the larger stable is (x / 2) / 3\n    # The original average value of the smaller stable is (x / 2 + 250000) / 3\n\n    # After Rein Beau moves to the larger stable:\n    # The new average value of the larger stable is ((x / 2) + 250000) / 4\n    # The new average value of the smaller stable is (x / 2) / 2\n    # Both of these new averages are increased by 10000\n    \n    # Setting up the equations based on the above information:\n    # ((x / 2) + 250000) / 4 = (x / 2) / 3 + 10000\n    # (x / 2) / 2 = (x / 2 + 250000) / 3 - 10000\n    # By solving these equations, we find the x, which is then added to Rein Beau's value for the total value.\n\n    # Simplify both equations and solve for x\n    x = symbols('x')\n    equation1 = (x / 2 + 250000) / 4 - (x / 2) / 3 - 10000\n    equation2 = (x / 2) / 2 - ((x / 2 + 250000) / 3 - 10000)\n\n    # Solve the system of equations for x\n    solutions = solve((equation1, equation2), (x))\n\n    # The total value of all ponies is the solution x plus Rein Beau's value\n    total_value = solutions[x] + rein_beaus_value\n\n    return total_value\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Consider the 4 pupils who want to stand together as a single entity.\n    # Then we have 5 entities to arrange (4 individuals + 1 group of 4 pupils).\n    arrangements_of_5 = factorial(5)\n    \n    # The 4 pupils within the group can be arranged amongst themselves in 4! ways.\n    arrangements_within_group = factorial(4)\n    \n    # Multiply the possible arrangements of the 5 entities with the internal arrangements of the group.\n    total_arrangements = arrangements_of_5 * arrangements_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    # Since we're calculating the remainder of an exponentiation by a small number (3),\n    # we can use the property of powers modulo a number, which repeats in cycles.\n    # For base 2 and modulus 3, the sequence is 2, 1, 2, 1,... and so on.\n\n    # Find the cycle length for base 2 modulo 3\n    cycle = [2]\n    next_value = (cycle[-1] * 2) % 3\n    while next_value != cycle[0]:\n        cycle.append(next_value)\n        next_value = (cycle[-1] * 2) % 3\n\n    # The length of the cycle for base 2 modulo 3\n    cycle_length = len(cycle)\n    \n    # Find the position in the cycle for 2^2015\n    cycle_position = 2015 % cycle_length\n\n    # Get the remainder for that position\n    remainder = cycle[cycle_position - 1]  # subtract 1 because list index is 0-based\n\n    return remainder\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    n = 60 // 3\n    return n + 1\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    concentration = (sugar / total_mixture) * 100\n    return concentration\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb = 8.70\n    cost_of_beef = 9.40\n    total_cost = (7 * cost_of_lamb) + (30 * cost_of_beef)\n    return total_cost\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Introduce a variable for the work rates\n    master_rate, apprentice_rate = symbols('master_rate apprentice_rate')\n    \n    # Equations based on the problem statement\n    # 1 master + 3 apprentices working 4 days to complete 1 task\n    equation1 = Eq((1 * master_rate + 3 * apprentice_rate) * 4, 1)\n    \n    # 2 masters + 1 apprentice working 3 days to complete 1 task\n    equation2 = Eq((2 * master_rate + 1 * apprentice_rate) * 3, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (master_rate, apprentice_rate))\n    \n    # Calculate the time it takes for 1 apprentice to complete the task alone\n    apprentice_time = 1 / solutions[apprentice_rate]\n    \n    return apprentice_time\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's denote the number of gold medals as g and the number of silver medals as s.\n    # We have the following system of linear equations to solve:\n    # 5g + 4s = 331 (points)\n    # g + s = 80    (medals)\n    \n    # We can solve this in terms of g (number of gold medals):\n    # g = 80 - s\n    # 5g + 4s = 331\n    # 5*(80 - s) + 4s = 331\n    # 400 - 5s + 4s = 331\n    # 400 - s = 331\n    # s = 400 - 331\n    # s = 69\n\n    # Now we can find g:\n    # g = 80 - s\n    g = 80 - 69\n\n    return g\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # If 5/8 of the remainder were men, then 3/8 of the remainder were women.\n    remainder_women_fraction = 3 / 8\n    total_remainder = women / remainder_women_fraction\n    children_fraction = 1 / 3\n    # If 1/3 were children, then 2/3 were the remainder (men and women).\n    total_spectators = total_remainder / (1 - children_fraction)\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def new_operation(a, b):\n        if a > b:\n            return a + b\n        else:\n            return a * b\n    \n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant = 10\n    position_rabbit = 9\n    dolls_between = 5\n\n    total_dolls = (position_elephant - 1) + (position_rabbit - 1) - dolls_between\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    part1 = 11 / 52 / (2 + 3 / 4)\n    part2 = 4.3 - 1.8\n    result = 0.4 * (part1 * part2) * 26\n\n    return result\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10\n    term_diff = fifteenth_term - tenth_term\n\n    common_difference = term_diff / position_diff\n    nth_term_position = 102\n    nth_term = tenth_term + (nth_term_position - 10) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n    \n    # Since boys and girls are arranged in alternate layers, starting and ending with boys\n    # we can start with a guess and check approach to find the number of students\n\n    # We know that the difference in perimeter for consecutive squares differing by one layer\n    # is 8 (since each side will have two more students - one at each end of the side)\n    \n    # Loop through possible side lengths of the square where boys are the outermost layer\n    side = 1  # smallest possible side length of the square\n    while True:\n        # Boys on the outer perimeter = Side length * 4 - 4 (since each corner is counted twice)\n        boys = side * 4 - 4\n        # If side length is only 1, there is only one boy, no girls\n        if side <= 1:\n            girls = 0\n        else:\n            # Girls are on the perimeter of the inner square\n            girls = (side - 2) * 4 - 4\n        # Calculate the total number of students by summing series up to the current side length\n        total_boys = sum(4 * s - 4 for s in range(1, side + 1, 2))\n        total_girls = sum(4 * s - 4 for s in range(3, side, 2))\n        # Check if the difference between boys and girls is 32\n        if total_boys - total_girls == boys_more_than_girls:\n            total_students = total_boys + total_girls\n            break\n        side += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months = symbols('original_roses original_daisies months', integer=True)\n    \n    # Total number of flowers initially (roses + daisies = 300)\n    equation1 = Eq(original_roses + original_daisies, 300)\n    \n    # In a few months, roses and daisies increase\n    # so original_roses + months = 280 (future roses) \n    # and original_daisies + months = 180 (future daisies)\n    equation2 = Eq(original_roses + months, 280)\n    equation3 = Eq(original_daisies + months, 180)\n\n    solutions = solve((equation1, equation2, equation3), (original_roses, original_daisies, months))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    remaining_books = total_books - english_books  # Chinese books and comics\n\n    # Let x be the number of comics, then the number of Chinese books is 2x.\n    # Since the sum of Chinese books and comics is the remaining_books, we have:\n    # 2x + x = remaining_books\n\n    comics = remaining_books // 3  # Integer division since we can't have a fraction of a book.\n\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    lost_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + lost_shots\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kilograms = 0.6\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    apples = 50\n    children = 8\n    \n    # Counting from 1 to (children - 1) for minimal distribution to other children\n    minimal_distributed = sum(range(1, children))\n    \n    # The least number for the child with most apples\n    least_apples_most = apples - minimal_distributed\n    \n    return least_apples_most\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    num_boxes = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    # Let a be the mass of one apple and o be the mass of one orange\n    # We have two equations based on the information given:\n    # 3a + 5o = 270\n    # 3a + 7o = 342\n    # We can solve these equations using substitution or elimination. Here, we'll do elimination.\n    \n    from sympy import symbols, Eq, solve\n    \n    a, o = symbols('a o')  # creating symbols for apple and orange\n    equation1 = Eq(3 * a + 5 * o, 270)  # equation from the first condition\n    equation2 = Eq(3 * a + 7 * o, 342)  # equation from the second condition\n    \n    # Subtracting the first equation from the second to eliminate a and find o\n    solution = solve((equation2 - equation1), o)\n    \n    return solution[o]\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Assuming everyone with a bow tie also wears spectacles\n    # This is the minimum number of men wearing either bow ties or spectacles\n    min_both = max(bow_ties + spectacles - total_men, 0)\n\n    # The greatest number of men that do not wear both is the total\n    # subtracted by the minimum number who wear either.\n    max_neither = total_men - (bow_ties + spectacles - min_both)\n\n    return max_neither\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    percentage1 = 50 / 100\n    percentage2 = 20 / 100\n    amount = 350\n\n    result = percentage1 * percentage2 * amount\n\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return 414 * (1/3)\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child has at least one apple, give each child one apple first.\n    apples = 19 - 5\n    \n    # Now we have apples to distribute such that no two children get the same number.\n    # To maximize the number of apples for the child with the most, \n    # we must minimize the apples the others get. Thus, we give the next \n    # smallest unique amounts:\n    # First child (least apples): 1 apple\n    # Second child: 1 + 1 apples (we add at least 1 to make it unique)\n    # Third child: 1 + 2 apples\n    # Fourth child: 1 + 3 apples\n    # The fifth child will then get the rest of the apples.\n    \n    # Calculate the minimum number of apples given to the first four children.\n    min_apples_to_others = (1 + 1) + (1 + 2) + (1 + 3)\n    \n    # Calculate the maximum number of apples for the fifth child.\n    max_apples_to_last_child = apples - min_apples_to_others\n\n    return max_apples_to_last_child\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Treat Ali and Bala as one person since they must stand together, we now have 4 \"people\"\n    # to arrange which includes Dan, Ali&Bala unit, Charles, and Ella.\n    # Dan must stand at the furthest left, hence there are no choices for Dan's position.\n\n    # There are 3! ways to arrange the remaining three \"people\"\n    # Ali and Bala can interchange their positions within their unit,\n    # which gives us 2 additional permutations.\n\n    arrangements = factorial(3) * 2\n    return arrangements\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Evaluate the complex fractions step by step\n    numerator1 = (1/30) + (1/6)\n    denominator1 = (2/25)\n    \n    numerator2 = 2 - (2/3)\n    denominator2 = (8/3)\n\n    # Calculate each expression separately\n    expression1 = numerator1 / denominator1\n    expression2 = numerator2 / denominator2\n\n    # Add the expressions to get the final result\n    ans = expression1 + expression2\n    \n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for x in range(1, 8):\n        count += 1  # Each x gives a unique (x, 8 - x) pair\n    return count // 2  # Divide by 2 to account for duplicates (e.g., (2, 6) and (6, 2))\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n\n    for page in range(1, 141):\n        total_digits += len(str(page))\n\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for original_tens in range(1, 10):\n        for original_ones in range(10):\n            for error_tens in range(10):\n                for error_ones in range(10):\n                    original_number = original_tens * 10 + original_ones\n                    error_number = error_tens * 10 + error_ones\n                    if error_tens == original_tens and error_ones == original_ones - 1:\n                        continue\n                    calc_difference = (error_tens * 10 + error_ones) - (original_tens * 10 + original_ones)\n                    real_difference = (original_tens * 10 + original_ones) - ((original_tens - 2) * 10 + (original_ones + 1))\n                    if calc_difference == 36 and original_tens - 2 == error_tens and original_ones + 1 == error_ones:\n                        return real_difference\n    return None\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen gives 3 fishes for 2 rabbits.\n    # So for 1 rabbit, Owen needs to give 3/2 fishes.\n\n    # Oscar trades these 2 rabbits for 4 packs of wheat.\n    # Therefore, for 1 pack of wheat, Oscar needs 2/4 = 0.5 rabbit.\n\n    # We can now calculate how many fishes Owen needs for 1 pack of wheat:\n    # 1 pack of wheat needs 0.5 rabbit, and 1 rabbit needs 3/2 fishes.\n    # Therefore, 1 pack of wheat needs (0.5) * (3/2) = (3/4) fishes.\n\n    # If Dennis needs 8 packs of wheat, then Owen must give:\n    # (3/4) * 8 = 6 fishes for 8 packs of wheat\n\n    fishes_for_8_packs_of_wheat = (3/4) * 8\n    return fishes_for_8_packs_of_wheat\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Add one to the total number of balls of the two largest quantities\n    # This ensures that even in the worst case where we draw all balls of one color, then all of another,\n    # the next draw will be of the third color\n    total_balls = 15 + 9 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    # This is an arithmetic sequence where a = 2, n = 12 (number of terms), d = 3 (common difference)\n    a = 2\n    n = 12\n    d = 3\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    S_n = n / 2 * (2 * a + (n - 1) * d)\n    \n    return S_n\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_wood = 6.5\n\n    remaining_length = total_length - (used_fence + used_wood)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, solve\n\n    T = symbols('T')\n    tax_paid = 120000 - 10000\n\n    first_50k_tax = 0.06 * 50000\n    remaining_income = tax_paid - 50000\n    remaining_tax = remaining_income * (0.06 + T / 100)\n\n    tax_eq = first_50k_tax + remaining_tax\n\n    ans = solve(tax_eq - 10000, T)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # Eq1: After Ellen gives away 12 sweets, she has 13/24 of the total\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n\n    # Eq2: After Lenny gives away 12 sweets, he has 3/8 of the total\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Summing the number of sweets they have altogether\n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    train_speed = 10     # in meters per second\n    \n    total_distance = train_length + tunnel_length  # total distance the train needs to cover to pass the tunnel\n    time_to_pass = total_distance / train_speed    # time taken to pass the tunnel is distance divided by speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    digits = [str(i) for i in range(10)]\n    digits.sort()\n    \n    # To get the smallest possible difference, the smallest number should start with the smallest digit (excluding 0)\n    # and the largest number should start with 0 and then the next largest digits.\n    # Arrange the other digits in increasing order for the smaller number and in decreasing order for the larger number.\n    \n    smallest_number = int(''.join(digits[1] + digits[0] + digits[2:5]))\n    largest_number = int(''.join(digits[-1] + digits[:-1]))\n\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial\n\ndef solution():\n    total_presents = 7\n    total_children = 5\n    ways_for_richard_kevin = 2  # toy car or puzzle for Richard, and toy car or calculator for Kevin\n\n    # Case 1: toy car given to either Richard or Kevin\n    # Giving the car to Richard or Kevin gives 1 way, and then giving the other boy any of the remaining presents is 2 ways\n    # Then distribute the rest of the 5 presents among the remaining 3 children\n    ways_case_1 = ways_for_richard_kevin * factorial(5) // (factorial(3) * factorial(2))\n\n    # Case 2: neither Richard nor Kevin gets the toy car\n    # Richard gets puzzle or Kevin gets the calculator, other boy gets one of the remaining 5 presents\n    # Then distribute the rest of the 4 presents among the remaining 3 children\n    ways_case_2 = ways_for_richard_kevin * 5 * factorial(4) // (factorial(3) * factorial(1))\n\n    # Sum the ways from both cases\n    ans = ways_case_1 + ways_case_2\n    return ans\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz, jessie + 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # cost in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    pounds_in_pence = 100  # £1 in pence\n    change = pounds_in_pence - total_cost\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all the numbers are prime\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6) and \n            isprime(n + 132) and isprime(n + 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution in grams\n    concentration = 0.15  # concentration of the sugar in the solution\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # Time until they meet in hours\n\n    # Calculate relative speed\n    relative_speed = jack_speed - rose_speed\n\n    # Calculate the distance between Town A and Town B\n    distance = relative_speed * meeting_time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2 * i) ** 2 - (2 * i - 2) ** 2 for i in range(2, 2020 // 2 + 1))\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n    \n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 35 / 100, 0.57)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        return 0\n    ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n    \n    boys = total_pupils - girls\n    difference = boys - teachers\n    \n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')  # The number of days Emma worked on the journal\n\n    # David's work rate is 1/10 journal per day\n    # Emma's work rate is 1/18 journal per day\n    # David worked for (14 - emma_days) days, then Emma worked for emma_days\n    # The total work done should be equal to 1 journal, so we set up the equation:\n    equation = Eq((14 - emma_days) * (1/10) + emma_days * (1/18), 1)\n\n    solutions = solve(equation, emma_days)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    tshirts_total = 145\n\n    money_spent = tshirts_total - tshirts_bought\n    price_per_tshirt = money_left / money_spent\n    total_money_had = price_per_tshirt * tshirts_total\n\n    return total_money_had\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    unique_letters = len(set(word))\n    total_s = word.count('S')\n    \n    # Calculate all permutations without restriction\n    total_permutations = factorial(len(word)) // (factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')) * factorial(total_s))\n\n    # Calculate permutations where S's are together, to be subtracted\n    # Consider all S's as one unit and permute with the remaining letters\n    s_together = factorial(len(word) - total_s + 1) // (factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    \n    # Subtract permutations where S's are together from all permutations\n    ans = total_permutations - s_together\n\n    return ans\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n+1)**2) // 4\n    sum_of_integers = (n * (n+1)) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f'1{a}2{a}3{a}4{a}5{a}')\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    same_height_students = 4\n    # Since there are 9 possible heights (132 - 124 + 1) and at least 4 students are of the same height,\n    # using the pigeonhole principle we can find the minimum class size where at least 4 students\n    # would be of the same height (the worst case scenario).\n    # Thus, we would need at least 9 * (4 - 1) + 1 students.\n    class_size = (max_height - min_height + 1) * (same_height_students - 1) + 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = old_pay_per_hour * (1 + increase_percentage)\n    \n    return new_pay_per_hour\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # Since the numbers are consecutive even numbers, we can represent them as\n    # x, x + 2, x + 4, ..., x + 26 where x is the smallest number\n    # The average of these 14 numbers is (x + (x + 26)) / 2, which equals 119\n    # Simplifying the expression, we get the equation 2x + 26 = 238\n    # Solving for x gives us the smallest number\n\n    total_sum = 119 * 14  # The total sum of the 14 numbers\n    x = (total_sum / 14) - 13  # Subtract half the length of the sequence to get the first term\n    return int(x)\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Calculating time per cut\n    time_per_cut = 12 / 4  # Since cutting it into 5 sections requires 4 cuts\n\n    # Calculating time to make 5 cuts\n    time_for_5_cuts = time_per_cut * 5\n\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let x be the number of each type of coin in the bag.\n    # We have 2p, 5p coins and the total amount is 126p (1 pound = 100 pence).\n    # Therefore, the equation to solve is: 2x + 5x = 126\n    total_pence = 126\n    # Each type contributes x coins.\n    # Coefficient for 2p is 2, for 5p is 5, and they should equal total_pence when summed up.\n    \n    # Simplify the equation: 7x = 126\n    # Divide both sides by 7 to find x\n    x = total_pence // 7\n    \n    # Since there are an equal number of 2p and 5p coins, we multiply x by the number of different types of coins (2) to get the total\n    total_coins = x * 2\n    \n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of 3 in powers repeats every 4: 3, 9, 7, 1\n    # We need to find the equivalent power of 3 that corresponds to 2009 modulo 4\n    \n    # Find the remainder of 2009 divided by 4\n    remainder = 2009 % 4\n    \n    # Determine the ones digit based on the remainder\n    if remainder == 0:\n        ones_digit = 1\n    elif remainder == 1:\n        ones_digit = 3\n    elif remainder == 2:\n        ones_digit = 9\n    elif remainder == 3:\n        ones_digit = 7\n    \n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `p` be the total number of people at the party\n    p = symbols('p')\n\n    # Adults amount\n    adults = 2/5 * p\n\n    # Remaining people after adults\n    remaining = p - adults\n\n    # Boys amount\n    boys = 5/9 * remaining\n\n    # Girls amount, which is given as 36\n    girls = remaining - boys\n\n    # Equation for the number of girls\n    equation = Eq(girls, 36)\n\n    # Solve the equation for p\n    total_people = solve(equation, p)\n\n    return total_people[0]\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    n = 1\n    while True:\n        square = n * n\n        if square % 2 == 0 and square % 5 == 0:\n            ans = square\n            break\n        n += 1\n    return ans\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    child_cost = 30\n    adult_cost = child_cost / (1 - child_discount)\n    senior_cost = adult_cost * (1 - senior_discount)\n    return senior_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    num_books = 20\n    num_kids = 4\n    books_per_kid = [i for i in range(num_books + 1)]\n\n    combinations = combinations_with_replacement(books_per_kid, num_kids)\n    valid_combinations = [combo for combo in combinations if sum(combo) == num_books]\n\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    total_work = men * days\n    new_men = 2\n\n    new_days = total_work / new_men\n    return new_days\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the Law of Addition\n    ans = trains + cars + boats\n\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # The problem can be seen as distributing 30 - 2*5 = 20 books to 5 kids\n    # Since each kid must get at least two books, we give them two upfront.\n    \n    # We are using stars and bars concept, where we are placing 4 bars among 20 books (stars) to divide them.\n    # This implies we have 20+4=24 places and we need to choose 4 places for bars.\n    num_ways = comb(20 + 4 - 1, 4 - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    result = 6846 * 8\n    return result\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 2/5 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n\n    return total_soup_ml / 1000  # Convert ml to litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operators = ['+', '-', '*', '/']\n    max_sum = float('-inf')\n    second_largest_term = None\n\n    for op_perm in permutations(operators):\n        term1 = eval(f\"Fraction(1, 2) {op_perm[0]} Fraction(1, 9)\")\n        term2 = eval(f\"Fraction(1, 3) {op_perm[1]} Fraction(1, 8)\")\n        term3 = eval(f\"Fraction(1, 4) {op_perm[2]} Fraction(1, 7)\")\n        term4 = eval(f\"Fraction(1, 5) {op_perm[3]} Fraction(1, 6)\")\n        term_sum = term1 + term2 + term3 + term4\n\n        if term_sum > max_sum:\n            max_sum = term_sum\n            sorted_terms = sorted([term1, term2, term3, term4])\n            second_largest_term = sorted_terms[-2]\n\n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    trees_count = (road_length // interval) + 1\n\n    return trees_count\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    # We have two equations based on the problem statement\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solve the system of equations for both jug and cup\n    sol = solve((equation1, equation2), (jug, cup))\n    \n    # We are only interested in the price of one cup\n    cup_price = sol[cup]\n\n    return cup_price\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    inequality = Eq((x + 3) / (2*x + 5), 0.505)\n    result = solve(inequality, x)\n    \n    # Since x represents the number of matches won before the weekend and it must be an integer,\n    # we take the integer part of the result just below 47.5.\n    ans = int(result.evalf()) - 1\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    total = 0\n    for i in range(1, 89, 2):\n        total += (i+1) - i\n    return total\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coin denominations in pence: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), £2 (200p)\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Susan's bus fare\n    fare = 44\n    # The driver needs to give her change, so she must pay more than the fare\n    # The smallest banknote is £5 (500p), hence she will pay with it\n    amount_paid = 500\n    change_to_give = amount_paid - fare\n    \n    # Count minimum coins for change\n    coin_count = 0\n    for coin in coins:\n        while change_to_give >= coin:\n            change_to_give -= coin\n            coin_count += 1\n    \n    # The driver gives change in coins and Susan gives a £5 note.\n    # So the total number of coins that change hands equals the number of change coins.\n    ans = coin_count\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # Since they end up with the same number of pupils\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    money_spent = 89.65\n    money_left = 20.35\n    initial_money = money_spent + money_left\n    return initial_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_at_center = total_points  # One point at center and two others at the ends making a diameter\n    \n    # if the right angle is not at the center, it must be subtended from halfway across the circle\n    # since the points are equidistant, choose a point and count 3 points away (halfway arc for one of the sides of the triangle to be a right angle)\n    right_angle_not_center = total_points * 4  # 4 right triangles can be made for each point\n\n    ans = right_angle_at_center + right_angle_not_center\n    return ans\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [(1, 1, 2), (2, 2, 4), (3, 4, 7), (4, 7, 11), (5, 11, 16), (6, 16, 22), (7, 22, 29), (1, 29, 1)]\n    ans = 0\n    for numerator, start, end in terms:\n        if start == end:\n            ans += numerator / start\n        else:\n            ans += numerator / (start * end)\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    students_A = 24\n    students_B = 36\n    students_C = 42\n\n    gc = gcd(gcd(students_A, students_B), students_C)\n\n    return gc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i for i in range(1, 101)]) - 198\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_cost = 4.36\n    total_days = 5\n\n    total_payment = children * daily_cost * total_days\n\n    return total_payment\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == 76:\n            return correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n\n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.90\n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    \n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    people = 38\n    total_cost = cost_per_person * people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    balls_in_six_boxes = balls_per_box * 6\n    return balls_in_six_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, Eq, solve, Abs\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    ways_diff_colors = factorial(4)  # 4 socks, 4! permutations\n\n    # Now, for two pairs of different colored socks\n    # Treat each pair as one item, so we have two items to arrange.\n    # But, each pair can be flipped, contributing an additional factor of 2! for each pair.\n    ways_two_pairs = (factorial(2) * (factorial(2) ** 2)) // factorial(2)  # Since pairs are considered identical\n\n    return ways_diff_colors, ways_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # If Anthea removes 1, 2, or 3 apples on her first turn,\n    # she can always force a win by leaving a multiple of 4 apples\n    # for Ben, because whatever he takes (1, 2, or 3 apples),\n    # she can take the remaining to make the total taken\n    # equal to 4. By repeating this strategy, Ben will eventually\n    # be forced to take the last apple.\n    \n    # To find out how many apples Anthea should take on her first turn,\n    # we find the first multiple of 4 below 18.\n    \n    apples_to_remove = 18 % 4\n    if apples_to_remove == 0:\n        # If already a multiple of 4, she must change the pattern.\n        apples_to_remove = 1  # Her best move is then to take 1 apple.\n    return apples_to_remove\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Andre and Beth both had a total of 24 sweets before\n    equation1 = Eq(andre + beth, 24)\n\n    # After their teacher gave them 4 sweets each, Andre now has 6 more sweets than Beth\n    equation2 = Eq(andre + 4, beth + 10)\n\n    # Find the solutions of the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's sweets now (after 4 sweets received)\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand on either end, so there are 2 choices for her\n    judy_positions = 2\n    \n    # The rest of the 5 friends can stand in any order in the remaining positions\n    remaining_positions = factorial(5)\n\n    # Total arrangements is the product of Judy's positions and her friends' arrangements\n    total_arrangements = judy_positions * remaining_positions\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Equation 1: After receiving 4 sweets each, the sum of their sweets is 24 + (2 * 4)\n    equation1 = Eq(andre + beth, 24 + 8)\n    \n    # Equation 2: Andre now has 6 sweets more than Beth\n    equation2 = Eq(andre, beth + 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = 5 * cost_per_bar\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    return 9 + 12 + 17 + 18 + 21 + 23\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place,\n    # it means there was only one car ahead of him.\n    # Since the driver overtook 5 cars, those must have been behind the car\n    # that was originally in the first place.\n    # So we add the 5 overtaken cars to the 2 cars that finished ahead\n    # of all those to get the total number of cars in the race.\n    \n    cars_overtaken = 5\n    finishing_position = 2\n    cars_ahead_after_race = 1  # Only the first place car was ahead of Ferrari\n   \n    # Total number of cars is the cars overtaken + Ferrari itself + the car ahead.\n    total_cars = cars_overtaken + finishing_position\n\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    x = (2 * 12) + 6\n    return x\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let ym be the time younger sister spent on maths and ye be the time on English.\n    ym, ye = symbols('ym ye')\n\n    # The elder sister spent 10 minutes more on maths than the younger sister\n    em = ym + 10\n    # The younger sister spent 4 minutes more on English\n    ee = ye - 4\n    \n    # The elder sister spent a total of 88 minutes\n    equation1 = Eq(em + ee, 88)\n    # The younger sister spent 12 minutes less on her maths homework than on her English homework\n    equation2 = Eq(ye - 12, ym)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (ym, ye))\n\n    return solutions[ye]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4\n    remaining_sum = 110 * 3\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n\n    # Convert the time periods for the traffic lights into seconds\n    # 1 minute = 60 seconds, 1.5 minutes = 90 seconds, 9 minutes = 540 seconds\n    time_first_light = 60\n    time_second_light = 90\n    time_target = 540\n    \n    # Find the least common multiple of the first two traffic lights\n    lcm_first_two = lcm(time_first_light, time_second_light)\n    \n    # The third light has to be at least 30 seconds or longer, start checking from 30 seconds\n    time_third_light = 30\n    \n    while True:\n        # If the least common multiple of all three times equals the target time,\n        # we've found the shortest time for the third traffic light\n        if lcm(lcm_first_two, time_third_light) == time_target:\n            return time_third_light\n        time_third_light += 30  # Increment by at least 30 seconds\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Since Leo wants to ensure his victory, he needs to make sure that\n    # he leaves Mia with a number of apples that is a multiple of 3 on her turn.\n    # To achieve this, Leo should take away a certain number of apples so that\n    # the remaining apples are a multiple of 3 after his first turn.\n    # As there are 14 apples to start with, he wants to leave 12 apples for Mia\n    # (which is the next multiple of 3 below 14), so he must take away 2 apples.\n    leo_first_turn = 14 % 3\n    return leo_first_turn\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be s, and the value of one gold ring be g.\n    # According to the problem, 12 silver spoons have three quarters the value of 6 gold rings\n    # so, 12 * s = (3/4) * 6 * g\n    # Simplify it, we get 12 * s = 4.5 * g\n    # The problem asks for how many silver spoons have the same value as 3 gold rings.\n    # So, we want to find x such that x * s = 3 * g\n    # Dividing both sides of the first equation by 4.5 gives s = g / 4.5\n    # Now substitute s from the second equation: x * (g / 4.5) = 3 * g\n    # Simplify it we get x = (3 * 4.5) / 1\n    # So, x = 13.5\n    \n    # Since we can't have a fraction of a spoon, we round down to the nearest whole number\n    x = 13.5 // 1  # Using floor division to round down to whole number\n    return int(x)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_more_than_girls = 55\n    total_students = 0\n\n    # Solve for n in (n+1)^2 - n^2 = boys_more_than_girls\n    # Simplify to 2n + 1 = boys_more_than_girls\n    # Solve for n\n    n = (boys_more_than_girls - 1) // 2\n\n    # The total number of students is (2n+1)^2\n    total_students = (2 * n + 1) ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    pencil_cost = solutions[pencil]\n    marker_cost = solutions[marker]\n\n    total_cost = 7 * pencil_cost + 7 * marker_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    paintbrush_cost = 1\n    marker_cost = 3\n    total_items = 12\n\n    # Assume all items are paintbrushes\n    total_paintbrush_cost = total_items * paintbrush_cost\n    remaining_cost = total_cost - total_paintbrush_cost\n    # Each substitution of a paintbrush for a marker increases the cost by marker_cost - paintbrush_cost\n    cost_difference = marker_cost - paintbrush_cost\n    # The number of markers is the additional cost divided by the cost difference\n    num_markers = remaining_cost // cost_difference\n\n    return num_markers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position from the front and from the back gives the total rows\n    total_rows = 5 + 7 - 1  # Subtract 1 because Cora is counted in both front and back\n\n    # Cora's position from the left and right gives the total columns\n    total_columns = 2 + 4 - 1  # Subtract 1 because Cora is counted from both left and right\n\n    # Total students is the product of total rows and total columns\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n    \n    # Combine the factors\n    combined_factors = {**factors_33, **factors_55}\n    for key in combined_factors:\n        if key in factors_33:\n            combined_factors[key] += factors_33[key]\n        if key in factors_55:\n            combined_factors[key] += factors_55[key]\n    \n    # Find the smallest m by making sure all primes have even powers\n    smallest_m = 1\n    for prime, power in combined_factors.items():\n        if power % 2 != 0:\n            smallest_m *= prime\n\n    return smallest_m\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # Since Star must be the first runner, we are left with arranging 4 teammates\n    # The number of ways to arrange the remaining 4 teammates is 4!\n    \n    ans = factorial(4)\n    \n    return ans\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since there are 8 identical pieces of candy and each plate has at least 2 pieces,\n    # we can start by giving each plate 2 pieces, leaving us with 2 pieces to distribute.\n    # We can then count the number of ways we can distribute the remaining 2 pieces\n    # among the 3 plates.\n    \n    # Give each plate a starting 2 pieces of candy\n    remaining_candies = 8 - 2*3  # Every plate has at least 2 candies\n\n    # Now, we have to distribute the remaining 2 candies to 3 plates.\n    # As the candies are identical, the problem is equivalent to\n    # finding the number of non-negative integer solutions for the equation\n    # a + b + c = 2 where a, b, c represents the number of additional candies\n    # on top of the 2 candies that each plate would already have.\n    \n    # This problem fits the \"stars and bars\" combinatorial concept\n    # where we have two \"stars\" (remaining candies) to place into three \"bins\"\n    # separated by \"bars\". The number of ways to place the stars is thus\n    # the number of ways to arrange two stars and two bars.\n    \n    # We have 4 positions to fill with either 2 stars or 2 bars\n    from math import factorial as fact\n    \n    # The number of ways to arrange this is 4! / (2! * (4-2)!) which is\n    # the formula for combinations: C(n+k-1, k), where n is the number of stars\n    # and k is the number of bars\n    ways = fact(4) // (fact(2) * fact(4 - 2))\n    return ways\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (a * b) + (a + b) * 2\n    \n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Calculate the time to cut one segment\n    time_per_segment = 60 / (31 - 1) # There are 30 cuts for 31 segments\n\n    # Calculate the total time to cut into 50 segments, which require 49 cuts\n    total_time = time_per_segment * (50 - 1)\n\n    return total_time\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for d1 in range(1, 10):  # The thousands digit must be between 1 and 9\n        for d2 in range(0, 10):  # The hundreds digit must be between 0 and 9\n            for d3 in range(d2 + 1, 10):  # The tens digit should be greater than the hundreds digit\n                for d4 in range(d3 + 1, 10):  # The ones digit should be greater than the tens digit\n                    # Since the digits are increasing, we have the first number as follows\n                    num1 = d1 * 1000 + d2 * 100 + d3 * 10 + d4\n                    # Reversing the digits gives us the second number\n                    num2 = d4 * 1000 + d3 * 100 + d2 * 10 + d1\n                    # We now find all possible permutations of these digits for the third number\n                    # We start permutations with the second highest digit to ensure\n                    # it is smaller than num1 and larger than num2\n                    for td3 in range(d2, d4 + 1):\n                        for td2 in set([d1, d2, d3, d4]) - {td3}:\n                            for td4 in set([d1, d2, d3, d4]) - {td3, td2}:\n                                td1 = 10 - (td2 + td3 + td4)\n                                if td1 in set([d1, d2, d3, d4]) - {td3, td2, td4}:\n                                    num3 = td1 * 1000 + td2 * 100 + td3 * 10 + td4\n                                    if num1 + num2 + num3 == 26352:\n                                        # Since the digits are increasing, num1 must be the smallest integer\n                                        return num1\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The remainders correspond to the equations:\n    # x ≡ 1 (mod 3), x ≡ 3 (mod 5), x ≡ 5 (mod 7)\n    # Use the Chinese Remainder Theorem to find a solution\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    x = solve_congruence(*congruences)\n    \n    # Loop to find all solutions in the given range (100, 200)\n    ans = None\n    lcm = 3 * 5 * 7  # Least common multiple of divisors (since they are prime, simply multiply)\n    current = x[0]  # First solution\n    while current < 100:   # Get to the minimal solution in the given range\n        current += lcm\n    if current < 200:\n        ans = current  # Check if the found solution is in the range and assign\n\n    return ans\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of female teachers as 'female_teachers'\n    female_teachers = symbols('female_teachers')\n    \n    # According to the problem, the total weight of male teachers is\n    total_male_weight = 3 * 75\n    \n    # We will write the equation for the average weight of all teachers\n    # Average weight of all teachers (65) = (total weight of male teachers + total weight of female teachers) / (3 + female_teachers)\n    equation = Eq(65, (total_male_weight + 60 * female_teachers) / (3 + female_teachers))\n    \n    # Now we solve for the number of female teachers\n    solutions = solve(equation, female_teachers)\n    \n    # We want the only positive and realistic solution (count of female teachers must be a whole number).\n    for s in solutions:\n        if s.is_real and s > 0 and s.is_integer:\n            return s\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(number - 0.30 * number, 210)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003  # Start the search from the year after 2002\n    while True:\n        if str(year) == str(year)[::-1]:  # Check if the year is a palindrome\n            return year - 2002  # Return the difference in years\n        year += 1  # Move to the next year\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    # Let x be the number of flowers given by Candy to Nancy\n    # Initial count of Candy's flowers is 11, and Nancy's is 9\n    # After giving x flowers, Candy has 11 - x and Nancy has 9 + x\n    # We're given that Nancy has 8 more flowers than Candy after the exchange\n    # So, (9 + x) = (11 - x) + 8\n    # Solving the above equation for x\n    x = symbols('x')\n    equation = Eq(9 + x, (11 - x) + 8)\n    solution_x = solve(equation, x)\n    \n    # Candy's flowers after giving x flowers to Nancy\n    candy_flowers = 11 - solution_x[0]\n    \n    return candy_flowers\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    # Counts of each letter: A-2, R-2, N-1, G-1, E-1\n    count_A = 2\n    count_R = 2\n    count_N = 1\n    count_G = 1\n    count_E = 1\n    # Total ways to arrange the letters taking into account the repetitions\n    ways = factorial(total_letters) // (factorial(count_A) * factorial(count_R) * factorial(count_N) * factorial(count_G) * factorial(count_E))\n    return ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_price = 200\n    increase_percentage = 0.45\n    new_price = initial_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_monday = 60 + 40\n    total_money = money_monday * 3  # Monday, Tuesday, Wednesday\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temp_midnight_friday = -5\n    temp_midday_saturday = 17\n\n    overall_temp_change = temp_midday_saturday - temp_midnight_friday\n\n    return overall_temp_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_term = 1\n    difference = 1\n    while current_term <= 50:\n        difference += 1\n        current_term += difference\n    return current_term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185\n    total_p = 10 * 100  # converting pounds to pence for ease of calculation\n\n    total_cost = 3 * pen_cost_p + 4 * booklet_cost_p\n\n    change_p = total_p - total_cost\n\n    return change_p / 100  # converting back to pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Sibel is counted in both counts.\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # Assuming that the question requires hardcoding the population of St. Petersburg\n    # Since this is a simple read and write number task, I'll provide the population as of my knowledge cutoff in 2023.\n    # Please note that populations are subject to change and the answer might not be accurate after my knowledge cutoff.\n    # According to the latest data available to me as of the cutoff in 2023, the population of St. Petersburg, Russia, is around 5.3 million.\n    ans = 5300000  # this is the population figure written in numbers\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    # Define the list of possible digits (0-9)\n    digits = list(range(10))\n    \n    # Initialize a counter to keep track of valid X-numbers\n    x_numbers_count = 0\n    \n    # Loop over all possible 3-digit numbers\n    for i in range(100, 1000):\n        # Extract the digits of the number\n        d1, d2, d3 = (i // 100), ((i // 10) % 10), (i % 10)\n        \n        # Check if any two adjacent digits differ by at least 7\n        if abs(d1 - d2) >= 7 and abs(d2 - d3) >= 7:\n            x_numbers_count += 1\n\n    return x_numbers_count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for t in range(5, 10): # Thousands digit must be from 5 to 9\n        for h in range(10): # Hundreds digit from 0 to 9\n            for te in range(10): # Tens digit from 0 to 9\n                for o in range(1, 10): # Ones digit from 1 to 9 (cannot be zero)\n                    if t % h == 0 and t % te == 0 and t % o == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n    prime_numbers = list(primerange(1, 10))  # the third prime number will definitely be less than 10\n    third_prime = prime_numbers[2]  # since indexing starts from 0 in Python\n    return third_prime\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possible_digits = [[], [], [], []]  # Each sublist represents possible digits for each position\n    for i in range(10):\n        if i not in [1, 2, 5, 8]:  # All these digits are wrong for all positions\n            possible_digits[0].append(i)\n            possible_digits[1].append(i)\n            possible_digits[2].append(i)\n            possible_digits[3].append(i)\n\n    # Check conditions for the attempts. Where two digits are correct, we can eliminate the others.\n    attempts = [\"5648\", \"3628\", \"3147\", \"5629\"]\n    for attempt in attempts:\n        wrong_count = 0\n        for index, digit in enumerate(attempt):\n            if int(digit) in [1, 2, 5, 8]:\n                wrong_count += 1\n                possible_digits[index] = [d for d in possible_digits[index] if d != int(digit)]  # Remove wrong digit\n\n        # If two digits are wrong, remove two possibilities from each position\n        if wrong_count == 2:\n            for index, digit in enumerate(attempt):\n                if int(digit) not in [1, 2, 5, 8]:\n                    possible_digits[index] = [int(digit)]  # Only the correct digit remains\n\n    # Construct the final combination\n    combination = ''\n    for digits in possible_digits:\n        combination += str(digits[0])\n\n    # Convert the combination to an integer\n    ans = int(combination)\n    return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child, the number of children\n    # between them across the circle should be equal.\n    # Hence, the number of children is 22 - 4, doubled (to account for both sides of the circle), plus 2\n    # for the children at positions 4 and 22 themselves. This is equal to (22 - 4) * 2 + 2.\n    return (22 - 4) * 2 + 2\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_diff = 4\n    num_weeks = 10\n    \n    nth_term = first_term + (num_weeks - 1) * common_diff\n    \n    total_coins = num_weeks * (first_term + nth_term) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d, e = symbols('a b c d e')\n    \n    # The average mark of A, B and C is 95\n    equation1 = Eq((a + b + c) / 3, 95)\n    \n    # The average mark of B, C and D is 94\n    equation2 = Eq((b + c + d) / 3, 94)\n    \n    # E's mark of 96 ranks as the second highest among all\n    equation3 = Eq(e, 96)\n    \n    # A has the highest mark, and all marks are above 91\n    equation4 = Eq(a, 96 + 1)  # The smallest number above 96\n\n    # B and D have the same score\n    equation5 = Eq(b, d)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, d, e))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the formula\n    p = 35000  # Principal amount\n    r = 1.5 / 100  # Interest rate (converted to decimal)\n    a = 37100  # Final amount\n    t = symbols('t')  # Number of years, which we need to find\n    \n    # Compound Interest formula: A = P(1 + r)^t\n    # Since the interest is per year, and it is simple interest, the formula is A = P + Prt\n    equation = Eq(p + p * r * t, a)\n    \n    # Solve the equation for t\n    solution = solve(equation, t)\n    \n    # Return the number of years saved\n    return solution[0]\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # Total weight of male teachers = 3 * 75\n    # Total weight of female teachers = 60 * x\n    # Average weight is 65\n    # Total number of teachers = x + 3\n    # Total weight of all teachers = 65 * (x + 3)\n    # Set up the equation: 3 * 75 + 60 * x = 65 * (x + 3)\n    \n    x = symbols('x')\n    eq = Eq(3 * 75 + 60 * x, 65 * (x + 3))\n    solution = solve(eq, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n\n    mass_half_full = (mass_three_quarters_full - mass_quarter_full) / 2 + mass_quarter_full\n    empty_jar_mass = mass_quarter_full - (mass_half_full - mass_quarter_full)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda = 13.15  # litres\n    bottle_portion = 9.1 * (1 / 7)  # litres\n    cups_total = 4 * 350 / 1000  # litres, converting ml to l\n\n    soda_left = total_soda - bottle_portion - cups_total\n\n    return round(soda_left, 2)\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in m\n    x = 0.04  # displacement from equilibrium in m\n\n    # Total energy of the oscillator (E) is given by E = (1/2) * k * A^2\n    E = 0.5 * k * A**2\n\n    # The speed of the block (v) can be found using conservation of energy\n    # At displacement x, E = potential energy + kinetic energy\n    # Kinetic energy (KE) = E - potential energy => KE = E - (1/2) * k * x^2\n    KE = E - 0.5 * k * x**2\n\n    # The speed (v) = sqrt(2 * KE / m)\n    v = math.sqrt(2 * KE / m)\n\n    return E, v\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Rose needs to leave a multiple of 3 marbles to win.\n    # Since 14 is not a multiple of 3, she needs to make it one.\n    # The closest multiple of 3 to 14 is 12, so she should take 2 marbles.\n    # This will leave 12 marbles, and no matter what Kylie does next,\n    # Rose can always take a number of marbles that allows the total to remain\n    # a multiple of 3, ensuring her victory.\n\n    # Total marbles\n    total_marbles = 14\n    # Multiple of 3 closest and less than total_marbles\n    closest_multiple_of_3 = total_marbles - total_marbles % 3\n    # Marbles Rose must take to reach the closest multiple of 3\n    marbles_for_rose_to_take = total_marbles - closest_multiple_of_3\n\n    return marbles_for_rose_to_take\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**(0.5)\n    b = -2023**(0.5)\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_pence = 45 * 100  # converting pounds to pence\n    coin_value_pence = 5\n    num_coins = total_money_pence // coin_value_pence\n    \n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance Bud runs in one minute\n    x = symbols('x')\n    # Given that Pip runs 20 meters more than Bud each minute\n    # Therefore, in 3 minutes, Bud runs 3x meters and Pip runs 3(x+20) meters\n    # Together they run 540 meters in 3 minutes\n    equation = Eq(3*x + 3*(x + 20), 540)\n    \n    # Solve for x to find the distance Bud runs in one minute\n    solutions = solve(equation, x)\n    \n    # Calculate the distance Pip runs in 3 minutes\n    distance_pip = 3 * (solutions[x] + 20)\n    \n    return distance_pip\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'b' be the number of coins in Box B and 'a' be the number in Box A\n    a, b, c = symbols('a b c')\n\n    # Given:\n    # A = 4B\n    # A - 0.06A + C = A (since 6% of A moved to C)\n    # B - 0.2B + C = B (since 20% of B moved to C)\n    # C = C_original + 0.06A + 0.2B\n    # C = 1.22*C_original\n    # And C = 1220\n    equations = [\n        Eq(a, 4*b),\n        Eq(c, 1.22*c - 0.06*a - 0.2*b),\n        Eq(1220, c)\n    ]\n\n    # Solving the system of equations\n    solutions = solve(equations, (a, b, c))\n\n    # The number of coins in box A at the beginning\n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let's assume Sally originally had 100 bottles (to make percentages easier to work with).\n    # 60% were coffee, hence 60 bottles of coffee and 40 bottles of tea.\n    initial_coffee_bottles = 60\n    initial_tea_bottles = 40\n    \n    # After buying more tea, only 40% were coffee, so the remaining 60% must be tea.\n    # Let c be the new total count of bottles.\n    # We have the same number of coffee bottles, hence 0.4 * c = 60 -> c = 150.\n    final_total_bottles = 150\n    final_tea_bottles = final_total_bottles * 0.6\n    \n    # Calculate the percentage increase in the number of tea bottles\n    increase_in_tea = final_tea_bottles - initial_tea_bottles\n    percentage_increase_in_tea = (increase_in_tea / initial_tea_bottles) * 100\n    \n    return percentage_increase_in_tea\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex(int('2A3', 16) + int('17B', 16)).upper()\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Extract the solution (result will be a list, we want the first element)\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 25 / 100 * 30 / 100 * 40 / 100 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_selling_price = total_revenue / total_flowers\n    return average_selling_price\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_melons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    total_time = washing_melons + washing_glasses + juicer_working + pouring_juice\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60 / 100  # Convert pence to pounds\n    james_money = 1.10\n    total_money = lewis_money + james_money\n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('WINNING')\n    w_count = 'WINNING'.count('W')\n    i_count = 'WINNING'.count('I')\n    n_count = 'WINNING'.count('N')\n    g_count = 'WINNING'.count('G')\n    \n    ans = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    return ans\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    # Let x be the number of tricycles and y be the number of cars.\n    # We know that the total number of vehicles is 24, so x + y = 24.\n    # A tricycle has 3 wheels and a car has 4 wheels, and there are 86 wheels in total.\n    # Hence, we have the equation 3x + 4y = 86.\n    # We can solve these equations to find the number of tricycles (x).\n    \n    # Total number of vehicles\n    total_vehicles = 24\n\n    # Total number of wheels\n    total_wheels = 86\n\n    # Let's use the first equation (x + y = total_vehicles) to express y in terms of x:\n    # y = total_vehicles - x\n    \n    # Now, let's plug the expression for y into the second equation (3x + 4y = total_wheels):\n    # 3x + 4(total_vehicles - x) = total_wheels\n    \n    # Distribute the 4 and rearrange to solve for x:\n    # 3x + 4 * total_vehicles - 4x = total_wheels\n    # -x = total_wheels - 4 * total_vehicles\n    # x = 4 * total_vehicles - total_wheels\n    \n    tricycles = 4 * total_vehicles - total_wheels\n    \n    # Since each car has 4 wheels, for every car switched to a tricycle would decrease the number\n    # of wheels by one (since 4 - 3 = 1). Therefore, we need to divide the difference by 1 \n    # to get the number of tricycles.\n    tricycles /= 1\n    \n    return int(tricycles)\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Since each stack must have at least 3 books, we start from 3\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - x1 - x2\n            # Check if the third stack has at least 3 books\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import symbols, Eq, solve\n\n    # Derangement problem also known as subfactorial or !n\n    # It is generally solved using formula !n = (n - 1)(!(n-1) + !(n-2))\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import divisors\n\n    # Create a list to hold the counts of divisors\n    divisor_counts = [len(divisors(i)) for i in range(1, 14)]\n\n    # Find the numbers with unique divisor counts, as seen by the two students who raised their hands\n    unique_divisors = set([num for num in divisor_counts if divisor_counts.count(num) == 1])\n\n    # Since Alice and May see each other's number and both raised their hands, their numbers must have a unique count of divisors\n    # Hence they must see one even and one odd number (because the even numbers in 1-13 with unique divisor count are 4, 6, 10)\n    # Since Alice knows her number is odd, she must see an even number\n    # May's number is smaller than Alice's by 2 and greater than Mark's by 1, which means Alice's number could not be 4 or 6\n    # Therefore, Alice's number is 10 and May's number is 8\n\n    # We find the set of possible numbers May could be seeing\n    may_sees = 10 - 2\n\n    # Mark's number is smaller than May's by 1\n    mark_sees = may_sees - 1\n\n    # Remaining numbers after removing the viewed, Alice's and May's\n    remaining_numbers = set(range(1, 14)) - {may_sees, mark_sees, 10}\n\n    # Calculate the product of the remaining numbers\n    ans = 1\n    for num in remaining_numbers:\n        ans *= num\n\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    income = 2012\n    total_bottles = 350\n    price_lemonade = 4\n    price_plus = 7\n\n    # Assuming all bottles were 1000 Plus\n    max_plus = income // price_plus\n    min_plus = 0\n\n    for plus in range(max_plus + 1):\n        lemonade = total_bottles - plus\n        if (lemonade * price_lemonade) + (plus * price_plus) == income:\n            min_plus = plus\n            break\n\n    return min_plus\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Total number of pens initially\n    total_pens_initial = 96\n\n    # Ratio of the number of blue pens to the number of red pens\n    ratio_blue_to_red_initial = 3 / 5\n\n    # Calculate initial number of blue and red pens\n    blue_pens_initial = (3 / (3 + 5)) * total_pens_initial\n    red_pens_initial = (5 / (3 + 5)) * total_pens_initial\n\n    # Number of red pens added\n    red_pens_added = 60\n\n    # After adding 60 red pens\n    total_red_pens = red_pens_initial + red_pens_added\n\n    # 40% of the pens are blue after additional blue pens are added\n    total_pens_after_addition = total_pens_initial + red_pens_added\n    blue_pens_after_addition = 0.4 * total_pens_after_addition\n\n    # Calculate the number of blue pens added\n    blue_pens_added = blue_pens_after_addition - blue_pens_initial\n\n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n\n    acceleration = final_velocity / time  # m/s^2\n    force = mass * acceleration  # Newton's second law: F = m * a\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    # We are looking for a number n such that:\n    # n % 4 == 0 (divisible by 4)\n    # n % 7 == 6 (remainder 6 when divided by 7)\n    # n % 5 == 0 (divisible by 5)\n    \n    # Since the number is divisible by 4 and 5, it is also divisible by 20 (4*5).\n    # We will iterate through multiples of 20 and check the remainder when divided by 7.\n    \n    for n in range(0, 101, 20):\n        if n % 7 == 6:\n            return n\n    return None  # If no number found, but there should be one as per the problem statement.\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # 3 and 7 are coprime, and according to the Chicken McNugget Theorem,\n    # the largest number that cannot be obtained by a combination of 3 and 7 is:\n    # (3*7) - 3 - 7\n\n    ans = (3 * 7) - 3 - 7\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    # correct answers are 12 more than three times the incorrect answers\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    # total points Jane got\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert base 10 numbers to base 7 and sum them up\n    sum_base_10 = 45 + 66\n    # Convert sum to base 7\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n    \n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Since in chess, each player plays with another only once.\n    # The total number of matches is the number of ways to choose 2 players out of 7 (7 choose 2)\n    # We use the formula for combinations: C(n, k) = n! / (k! * (n - k)!)\n\n    # Number of played matches\n    total_matches_played = 4 + 6 + 2 + 1 + 3 + 5\n    # Each match is counted twice because it involves 2 players.\n    total_matches_played //= 2\n\n    # Calculate total number of possible matches\n    from math import factorial\n    total_possible_matches = factorial(7) // (factorial(2) * factorial(7 - 2))\n\n    # Calculate number of matches player F has played\n    matches_F = total_possible_matches - total_matches_played\n\n    return matches_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Initialize the two consecutive numbers to None\n    missing_numbers = (None, None)\n\n    # Loop through all pairs of consecutive numbers from 1 to 19\n    for i in range(1, 20):\n        # Assume the current pair of consecutive numbers cannot divide N\n        # Check if the least common multiple (LCM) of all numbers except\n        # the current pair is divisible by all numbers in the range 1 to 20,\n        # except the current pair.\n        all_nums = list(range(1, 21))\n        all_nums.remove(i)\n        all_nums.remove(i + 1)\n        \n        # Calculate LCM of the remaining numbers\n        lcm_val = all_nums[0]\n        for num in all_nums[1:]:\n            # Calculate lcm_value using gcd\n            lcm_val = lcm_val * num // math.gcd(lcm_val, num)\n\n        # Check if lcm_val is not divisible by either i or i + 1,\n        # it means that those two cannot divide N\n        if lcm_val % i != 0 and lcm_val % (i + 1) != 0:\n            missing_numbers = (i, i + 1)\n            break\n\n    # Return the sum of the two numbers\n    return sum(missing_numbers)\n\nimport math\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cici, linda = symbols('cici linda')\n\n    # When Cici was born, Linda was 11 years old\n    equation1 = Eq(cici, linda - 11)\n\n    # 4 years later, the sum of their ages will be 37\n    equation2 = Eq((cici + 4) + (linda + 4), 37)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cici, linda))\n\n    # Calculate Linda's age 3 years later\n    linda_age_later = solutions[linda] + 3\n\n    return linda_age_later\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the number of Natasha's stamps be x.\n    # According to the problem, Jamie-Anne has x + 18 stamps.\n    # Their ratio is 5:3, so:\n    # (x + 18) / x = 5 / 3\n    # Solving for x, we get:\n    x = 18 * 3 / (5 - 3)\n\n    # Now we find the total number of stamps by adding Jamie-Anne's and Natasha's stamps.\n    total_stamps = (x + 18) + x\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    # In the form of (n = 15q + r), we need to find all n > 160 \n    # where q (quotient) = r (remainder)\n\n    # Since the numbers are greater than 160 and give the same quotient\n    # and remainder when divided by 15, we can represent the number as\n    # n = 15q + q, which simplifies to n = 16q, where q > 10 (because 16*10 = 160).\n\n    # Finding all such numbers n, we iterate over values of q\n    q = 11\n    while True:\n        n = 16 * q\n        if n > 160:\n            ans += n\n        else:\n            break\n        q += 1\n\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    # Calculate the number of terms in the sequence\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum using the formula for the sum of an arithmetic sequence\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # The least possible value for the first number is 5\n    first_number = 5\n    # The least possible value for the second number is 2\n    second_number = 2\n    # The least possible sum of the two numbers\n    least_possible_sum = first_number + second_number\n    return least_possible_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance = 300  # in meters\n    speed_uphill = 10  # in m/min\n    speed_downhill = 30  # in m/min\n\n    time_uphill = distance / speed_uphill  # time = distance / speed\n    time_downhill = distance / speed_downhill\n\n    total_distance = distance * 2  # round trip\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time  # average speed = total distance / total time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n\n    ans = total_entrances ** total_people\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of distributed apples, pears and oranges\n    distributed_apples = 226 - 10\n    distributed_pears = 352 - 28\n    distributed_oranges = 157 - 13\n    \n    # Calculate the GCD of the distributed fruits\n    gcd_apples_pears = gcd(distributed_apples, distributed_pears)\n    gcd_all = gcd(gcd_apples_pears, distributed_oranges)\n    \n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n\n    # Judy can either be in the first place or the last place\n    judy_positions = 2\n\n    # The rest of the 5 friends can be arranged in any order\n    friend_permutations = math.factorial(5)\n\n    # Number of ways they can form the line is given by the product of the two\n    total_ways = judy_positions * friend_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    lcm = 12\n    \n    for num2 in range(1, lcm + 1):\n        if lcm == (num1 * num2) // gcd(num1, num2) and gcd(num1, num2) == 2:\n            return num2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    number = 1\n\n    while True:\n        number_length = len(str(number))\n        if digit_count + number_length < 200:\n            digit_count += number_length\n            number += 1\n        else:\n            break\n    index_in_number = 200 - digit_count - 1\n    ans = int(str(number)[index_in_number])\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_production = total_days * 500\n    total_points = 9931\n\n    # let x be the number of qualified products\n    # let y be the number of unqualified products\n\n    # x + y = total_production\n    # 5x - 18y = total_points\n\n    # Convert the above system of equations to solve for x and y\n    x = (total_points + 18 * total_production) / (5 + 18)\n\n    return int(x)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    price = cost + 40  # price is $40 more than the cost\n    discounted_price = price * 0.8  # customer buys it with 20% off\n    profit = discounted_price - cost  # profit is the discounted price minus the cost\n    equation = Eq(profit, 12)  # profit is given as $12\n\n    solution = solve(equation, cost)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Daniel and his daughter's ages.\n    daniel, daughter = symbols('daniel daughter')\n\n    # Create equations based on the problem statement.\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Return Daniel's age this year.\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let v_A be the speed of April and v_B be the speed of Baye\n    # The distance between P and Q is 1800m\n\n    # When April meets Baye, April has travelled a distance of 1800 + 800 = 2600m\n    # And Baye has travelled a distance of 1800 - 800 = 1000m\n\n    # Let's denote the ratio of April's speed to Baye's speed as k = v_A / v_B\n    # We can create the ratio of distances they traveled to get k\n    # April traveled 2600m when Baye traveled 1000m, so k = 2600 / 1000 = 2.6\n\n    # When April meets Baye, the time they have been traveling is the same\n    # So the ratio of their speeds, k, should be equal to April's distance divided by Baye's distance\n    # Therefore, k = 2.6 implies v_A = 2.6 * v_B\n\n    # Since April runs back at 4 times of her original speed,\n    # her new speed is 4 * v_A = 10.4 * v_B\n\n    # April will reach P 10.4 times faster than Baye reaches Q\n    # And since the remaining distance for April is 800m when she meets Baye,\n    # Baye's remaining distance when April reaches P will be 800 / 10.4\n\n    remaining_distance_for_baye = 800 / 10.4\n\n    # The total distance from P to Q is 1800m\n    # So Baye's distance away from Q when April reaches P will be 1800m - remaining_distance_for_baye\n    distance_away_from_Q = 1800 - remaining_distance_for_baye\n\n    return round(distance_away_from_Q)\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original relationship: hens = 6 * roosters\n    equation1 = Eq(hens, 6 * roosters)\n\n    # After increasing roosters and hens by 60 each\n    # New relationship: hens + 60 = 4 * (roosters + 60)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve for the number of hens and roosters\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    # Calculate the total number of chickens before the increase\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven = 7 * 12\n    total_for_eight = 8 * 11\n    eighth_number = total_for_eight - total_for_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of the series\n    sum_series = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum([1, 2])\n    return sum_series\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    sequence = '538462'\n    seq_length = len(sequence)\n    position = 2021 % seq_length\n\n    if position == 0:\n        position = seq_length\n\n    # Subtract 1 because string indexing starts at 0\n    ans = sequence[position - 1]\n\n    return int(ans)\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef solution():\n    count = 0\n    for num in range(10, 1000):\n        if is_palindrome(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % 4  # Subtract 1 because the sequence is zero-indexed in Python\n    ans = sequence[index]\n    return ans\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    # Let x be the total amount of money Bud had initially.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Bud spent 1/3 of her money on a book\n    book = x / 3\n    # Bud spent 2/5 of her money on a bag\n    bag = (2 * x) / 5\n    # Together, the book and bag cost £132\n    equation = Eq(book + bag, 132)\n\n    # Solve the equation for x.\n    initial_money = solve(equation, x)\n\n    # Return the solution.\n    return initial_money[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # To ensure getting 5 green beads for sure, Darrell might have to pick all the beads of the other colors.\n    # So the worst case scenario is picking all blue and white beads, and then picking 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    beads_needed_for_5_green = blue_beads + white_beads + 5\n    return beads_needed_for_5_green\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    # Number divisible by 5\n    div_by_5 = 105 // 5\n\n    # Number divisible by 7\n    div_by_7 = 105 // 7\n\n    # Number divisible by both 5 and 7 (i.e., 35)\n    div_by_35 = 105 // 35\n\n    # Using Inclusion-Exclusion Principle\n    ans = div_by_5 + div_by_7 - div_by_35\n\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 216):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):  # 5-digit numbers range from 10000 to 99999\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    count = 0\n    for page in range(1, 82):\n        count += len(str(page))\n    return count\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # It is assumed that each floor takes the same amount of time to climb.\n    # Since John takes 12 minutes to walk from the first floor to the fourth floor,\n    # he climbs 3 intervals (from 1st to 2nd, 2nd to 3rd, and 3rd to 4th floor).\n\n    # Number of intervals for 4 floors\n    intervals_4_floors = 4 - 1  # (4th floor - 1st floor)\n\n    # Time taken for each interval\n    time_per_interval = 12 / intervals_4_floors\n\n    # Number of intervals for 8 floors\n    intervals_8_floors = 8 - 1  # (8th floor - 1st floor)\n\n    # Total time to walk up to the eighth floor\n    total_time = time_per_interval * intervals_8_floors\n\n    return total_time\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for basket1 in range(7):\n        for basket2 in range(7):\n            for basket3 in range(7):\n                if basket1 + basket2 + basket3 == 6:\n                    count += 1\n    # Divide by 3! for identical baskets\n    count /= 6\n    return int(count)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    initial_birds_to_squirrels_ratio = 8 / 5\n    squirrel_increase = 20 / 100\n\n    # Let's express the initial number of birds and squirrels \n    # as 8k and 5k respectively (k being any positive integer)\n    initial_birds = 8\n    initial_squirrels = 5\n\n    # Number of squirrels after 20% increase\n    final_squirrels = initial_squirrels * (1 + squirrel_increase)\n\n    # Since the total number remains the same, find the final number of birds\n    total_initial = initial_birds + initial_squirrels\n    final_birds = total_initial - final_squirrels\n\n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((initial_birds - final_birds) / initial_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5*a - 2*b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    # Since the remainder is fixed at 3, calculate the sum of the other three values\n    sum_other_values = 40 - remainder\n    \n    # Iterate through possible values of the divisor (from 1 up to sum_other_values-1)\n    # and calculate corresponding quotient and dividend\n    for divisor in range(1, sum_other_values):\n        for quotient in range(1, (sum_other_values - divisor) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + quotient + dividend == sum_other_values:\n                possible_values.add(dividend / quotient)\n    \n    # The number of unique dividend/quotient values\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # n = (last_term - first_term) / difference + 1\n    num_days = (last_day_pages - first_day_pages) // difference + 1\n\n    return num_days\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Analyzing the pattern\n    # a◈b = b - (2*a - 2)\n    \n    # Define the new operation\n    def new_operation(a, b):\n        return b - (2 * a - 2)\n    \n    # Apply the operation to find 9◈20\n    ans = new_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3\n    juice_consumed = 9\n    juice_remaining = total_juice - juice_consumed\n    container_size = 5\n    \n    containers_needed = -(-juice_remaining // container_size)  # Ceiling division to get enough containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    return 782 - 9 * 52 // 2\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    for values in permutations(range(1, 10), 5):\n        D, A, R, T, C = values\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_value = max(max_value, A + R + T)\n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # Since 9/A < 1, A must be greater than 9. But also has to be an integer\n        if (5/9) < (9/A) < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend, so we use the handshake problem formula: n*(n-1)\n    cards_sent = friends * (friends - 1)\n    return cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 39)\n    equation2 = Eq(boys/4, 2*girls/5)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left = 3\n    members_right = 5\n    tanya = 1\n\n    total_members = members_left + tanya + members_right\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import isprime\n\n    number = 87878\n    max_prime_factor = 0\n\n    # Start checking from the largest 4-digit number\n    for i in range(9999, 999, -1):\n        if number % i == 0 and isprime(i):\n            max_prime_factor = i\n            break  # We break at the first occurrence of a prime factor\n\n    return max_prime_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each segment\n    time_first_segment = 280 / 7   # Time = Distance / Speed\n    time_middle_segment = 400 / 5\n    time_final_segment = (800 - (280 + 400)) / 8  # Time = (Total Distance - Previous Distances) / Speed\n\n    # Sum the times for all segments to get the total time\n    total_time = time_first_segment + time_middle_segment + time_final_segment\n\n    ans = total_time\n    return ans\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # 24 crates each weighing 5 tonnes\n    max_load = 12          # each van carries a maximum load of 12 tonnes\n    vans_needed = -(-total_weight // max_load)  # ceiling division to get number of required vans\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    # Equation representing the initial state where both had an equal number of stickers\n    equation1 = Eq(daniel, patrick)\n    # Equation representing the final state\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def split_number(n, max_value):\n        # Base case: when the remaining number is 0, there's only one way to split\n        if n == 0:\n            return 1\n        ways = 0\n        # Loop over possible values and recurse\n        for i in range(1, min(n, max_value) + 1):\n            ways += split_number(n - i, i)\n        return ways\n\n    num_ways = split_number(5, 5)\n    return num_ways\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    # Start from the smallest two-digit number, 10\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82  # The whale is 82 meters below sea level\n    plane_height = 569  # The plane is 569 meters above sea level\n\n    # Positive distance from sea level to the plane\n    # plus\n    # Positive distance from the whale to sea level\n    vertical_distance = plane_height + whale_depth\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Using inclusion-exclusion principle to find the minimum overlap\n    # Total pupils is the sum of right-handed pupils and girls minus the unknown overlap\n    # We want to minimize the number of right-handed girls, so we maximize the number of left-handed girls\n    max_left_handed_girls = total_pupils - right_handed\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = float('inf')  # Initialize the smallest difference as infinity\n    num_list = [str(i) for i in range(1, 10)]  # Create a list of digits 1 to 9 as strings\n\n    # Utilizing itertools.permutations to generate all possible permutations of the num_list\n    from itertools import permutations\n    perms = list(permutations(num_list))\n\n    for i in range(len(perms)):\n        # Convert each tuple in the permutation list to an integer\n        num1 = int(\"\".join(perms[i]))\n        for j in range(i + 1, len(perms)):\n            # Convert the second tuple to an integer\n            num2 = int(\"\".join(perms[j]))\n            # Compute the absolute difference between the two numbers\n            diff = abs(num1 - num2)\n    \n            # Update the smallest difference if the current difference is smaller\n            if diff < smallest_diff:\n                smallest_diff = diff\n\n                # If the difference is 1, it's the smallest it can possibly be with distinct digits\n                if smallest_diff == 1:\n                    break\n        if smallest_diff == 1:\n            break\n\n    return smallest_diff\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples = 2/3 * total_fruits\n    bananas = 1/9 * total_fruits\n    lemons = total_fruits - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    total_fruits_solution = solve(equation, total_fruits)\n    lemons_number = lemons.subs(total_fruits, total_fruits_solution[0])\n\n    return lemons_number\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n\n    for day in range(1, 10):\n        workers = day\n        daily_production = workers * skirts_per_day\n        total_skirts += daily_production\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    result = 234000 / 520\n    return int(result)\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pieces = 6\n    qiqi_pieces = jenny_pieces + 5\n    return qiqi_pieces\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = (probability_over_25_given_over_20 * probability_over_20) / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # If 5 taps take 2 minutes to fill a 1-litre jug, \n    # then 1 tap will take 5 times longer to fill the same 1-litre jug.\n    time_for_one_tap_to_fill_one_litre = 5 * 2  # minutes\n    \n    # Since the volume to fill is half (500 ml which is 0.5 litre),\n    # it will take half the time for one tap to fill the 500 ml jug.\n    time_for_one_tap_to_fill_half_litre = time_for_one_tap_to_fill_one_litre / 2  # minutes\n\n    return time_for_one_tap_to_fill_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john - brother, 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    # Let total visitors be x.\n    # Then children were (3/5)x and remaining visitors were (2/5)x.\n    # Half of the remaining visitors were men, which is (1/2)*(2/5)x = (1/5)x.\n    # There were 140 more children than men, so: (3/5)x - (1/5)x = 140\n    # Simplify the equation to find x.\n    x = symbols('x')\n    equation = Eq((3/5)*x - (1/5)*x, 140)\n    total_visitors = solve(equation, x)[0]\n\n    return total_visitors\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    all_three_digit_numbers = list(permutations(digits, 3))\n    all_sums = []\n\n    for i in range(len(all_three_digit_numbers)):\n        for j in range(i + 1, len(all_three_digit_numbers)):\n            num1 = int(''.join(map(str, all_three_digit_numbers[i])))\n            num2 = int(''.join(map(str, all_three_digit_numbers[j])))\n            if len(set(str(num1) + str(num2))) == 6:  # Ensure all digits are used\n                all_sums.append(num1 + num2)\n\n    return max(all_sums)\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_cola_ml = 2000  # 2 litres is 2000 millilitres\n    drank_ml = 350\n    remaining_cola_ml = total_cola_ml - drank_ml\n    return remaining_cola_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40\n    total = 3280\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let G be the total amount of grass available\n    # A horse eats H grass per day\n    # A sheep eats S grass per day\n    # 20 horses can eat all grass in 12 days : 20H * 12 = G\n    # 60 sheep can eat all grass in 24 days : 60S * 24 = G\n    # H = 4S\n\n    # From the above two equations, we can find the relation between H and S\n    # 20H * 12 = 60S * 24\n    # H / S = (60 * 24) / (20 * 12)\n    # H / S = 4\n    # So the total grass G can be represented as 20H * 12\n\n    # Now we need to find out in how many days 12 horses and 88 sheep can eat all the grass\n    # 12 horses will eat 12H per day\n    # 88 sheep will eat 88S per day\n    # Total daily grass consumption by 12 horses and 88 sheep: 12H + 88S = 12H + 88/4 H = 12H + 22H = 34H\n\n    # Since 20 horses eat in 12 days: G = 20H * 12\n    # The number of days 12 horses and 88 sheep will eat all grass: G / 34H = (20H * 12) / 34H\n\n    # H cancels out\n    days = (20 * 12) / 34\n\n    return days\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Identify the pattern in the sequence\n    # If we analyze the sequence we can see that there are two alternating operations:\n    # Multiplying the last number by 2 and then adding 7 to the result.\n    # Starting from 1: (1*2) + 7 = 9 (incorrect), we must adjust this.\n\n    # Correct the alternating operations\n    # Looking again, we can see that the correct operations are:\n    # 1. Adding 7 for odd steps and,\n    # 2. Multiplying by 2 for even steps.\n    # So we have 1 (start), 8 (+7), 16 (*2), 23 (+7), 46 (*2), 53 (+7), ...\n    # The next number should be 53 (*2), following the pattern.\n\n    next_number = 53 * 2\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + C, 18)  # When only pipes A and C are turned on, A provides 18 tons\n    equation2 = Eq(B + C, 27)  # When only pipes B and C are turned on, B provides 27 tons\n    equation3 = Eq(B, 2 * A)   # The rate of B is twice that of A\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Capacity of the pool can be found by any of the equations after solving\n    pool_capacity = solutions[A] + solutions[C]\n\n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    payment_per_match = 500\n    payment_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n\n    total_earnings = (payment_per_match * number_of_matches) + (payment_per_goal * average_goals_per_game * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n\n    cost_per_kg = total_cost / total_kg\n\n    return cost_per_kg\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    from itertools import permutations\n    \n    for digits in permutations(range(10), 4):\n        M, A, T, H = digits\n        if M == 0 or H == 0:\n            continue  # M and H can't be zero since they are the first digits in MATH and HTAM.\n        MATH = M * 1000 + A * 100 + T * 10 + H\n        HTAM = H * 1000 + T * 100 + A * 10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a = 1\n    n = 10\n    sum_sequence = sum((2*i - 1) for i in range(a, a + n))\n    return sum_sequence\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_numbers = 0\n    # Numbers with exact two sevens\n    for i in range(10):\n        if i != 7:\n            total_numbers += 2  # 7 can appear in two different places within the number (e.g., 77x, and x77).\n    # Numbers with all three sevens\n    total_numbers += 1  # 777\n\n    return total_numbers\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n    cost_per_ball = total_cost / total_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes Cindy had initially.\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 notes at first.\n    equation1 = Eq(x + y, 55)\n\n    # She spent 1/3 of the number of $2 notes.\n    spent_2_notes = x / 3\n\n    # She received another 8 pieces of $5 notes from her father.\n    received_5_notes = y + 8\n\n    # After that the number of $5 notes she had (received_5_notes) was 3/7 of the remaining number of notes.\n    remaining_notes = x - spent_2_notes + received_5_notes\n    equation2 = Eq(received_5_notes, 3/7 * remaining_notes)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the amount of money Cindy had at first.\n    initial_money = solutions[x] * 2 + solutions[y] * 5\n\n    return int(initial_money)\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Treat Mr Spencer and his 2 children as a single unit first, plus 3 other individuals.\n    units = 4 \n    \n    # Find the permutations of these 4 units.\n    units_permutations = factorial(units)\n    \n    # Now, within the unit of Mr Spencer and his 2 children, Mr Spencer can choose any of the 3 places to sit.\n    spencer_permutations = 3\n    \n    # The two children can switch places with each other.\n    children_permutations = 2\n    \n    # Multiply the permutations together for the final answer.\n    ans = units_permutations * spencer_permutations * children_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    midpoint = (num1 + num2) / 2\n\n    return midpoint\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    incorrect_mark = -2\n    total_questions = 6\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n\n    # Since A * B = 24 and B * C = 52, B must be a common factor of 24 and 52\n\n    # Find Greatest Common Divisor (GCD) of 24 and 52, which could be the value of B\n    B = gcd(24, 52)\n\n    # Calculate A and C using the value of B\n    A = 24 // B\n    C = 52 // B\n\n    # Sum of A and C\n    ans = A + C\n\n    return ans\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # Total distance in meters\n    speed = 7      # Speed in meters per minute\n    time = distance / speed  # Time in minutes\n    \n    return int(time)\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    subtracted_value = result - 7\n    original_number = subtracted_value * 3\n\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    nth_odd = first_odd + (20 - 1) * difference\n\n    return nth_odd\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be Diana's daily production rate\n    # and t be the total number of scarfs she needs to produce\n    d, t = symbols('d t')\n\n    # Original plan: produce t scarfs in 6 days\n    equation1 = Eq(d * 6, t)\n\n    # Increased production rate: produce t scarfs in (6-2) days with rate (d + 24)\n    equation2 = Eq((d + 24) * (6 - 2), t)\n\n    # Solve the system of equations for d and t\n    solutions = solve((equation1, equation2), (d, t))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C as a single unit and E, F as another single unit.\n    # We now have 6 \"units\" to arrange: {ABC}, D, G, H, {EF}, and the empty 8th spot\n    \n    # There are 6! ways to arrange these 6 \"units\"\n    units_permutations = factorial(6)\n    \n    # ABC can be arranged in 3! ways, EF can be arranged in 2! ways\n    abc_permutations = factorial(3)\n    ef_permutations = factorial(2)\n    \n    # Total arrangements = units_permutations * abc_permutations * ef_permutations\n    total_arrangements = units_permutations * abc_permutations * ef_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    sweets, students = symbols('sweets students')\n    \n    # If given 6 sweets per student, Mr. Lim is short of 26 sweets\n    equation1 = Eq(sweets - 6*students, -26)\n    \n    # If given 5 sweets per student, Mr. Lim is short of 5 sweets\n    equation2 = Eq(sweets - 5*students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n    return solutions[sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', real=True, positive=True)\n    \n    initial_ratio = Eq(boys / girls, 5/3)\n    final_ratio = Eq((boys - 15) / girls, 5/6)\n\n    solutions = solve((initial_ratio, final_ratio), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - x1 - x2\n            if x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    import math\n\n    A = 675\n    # Factorize 675 to its prime factors 3, 3, 3, 5, 5\n    prime_factors = {}\n    for i in range(2, int(math.sqrt(A)) + 1):\n        while A % i == 0:\n            A //= i\n            if i in prime_factors:\n                prime_factors[i] += 1\n            else:\n                prime_factors[i] = 1\n    if A > 1:\n        prime_factors[A] = 1\n\n    # Find the smallest B by making sure each prime factor's exponent is even\n    B = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_age_now = 65\n    joshs_age_5_years_ago = (3/5) * (shelby_age_now - 5)\n    joshs_age_now = joshs_age_5_years_ago + 5\n    return int(joshs_age_now)\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    total_individual_price_pence = 12 * single_can_price_pence\n    savings = total_individual_price_pence - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    # Since we're looking for 4-digit numbers\n    for thousands in range(3, 6):  # 3267's thousand digit is 3 and 5120's is 5\n        for hundreds in range(1, 7):\n            for tens in range(1, 7):\n                for ones in range(1, 7):\n                    if len({thousands, hundreds, tens, ones}) == 4:  # digits are unique\n                        number = 1000 * thousands + 100 * hundreds + 10 * tens + ones\n                        if 3267 <= number <= 5120:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let a, b and c represent the weights of Adam, Ben, and Carl respectively.\n    # We are given the following three equations:\n    # a + b = 102 (Adam and Ben's combined weight)\n    # b + c = 97 (Ben and Carl's combined weight)\n    # a + c = 93 (Adam and Carl's combined weight)\n    # The total weight is a + b + c. To find this, we can sum the three equations:\n    # (a + b) + (b + c) + (a + c) = 102 + 97 + 93\n    # This simplifies to:\n    # 2a + 2b + 2c = 292\n    # Since we're counting each person's weight twice, we divide by 2 to find the total weight:\n    # a + b + c = 292 / 2\n\n    total_combined_weight = 102 + 97 + 93\n    total_weight = total_combined_weight / 2\n    return int(total_weight)\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A represent the time it would take for Alan to paint the room on his own\n    A = symbols('A')\n\n    # Alan's rate of work (fraction of room painted per hour)\n    rate_Alan = 1 / A\n    # Bob's rate of work (fraction of room painted per hour)\n    rate_Bob = 1 / 6\n    # Combined rate when working together\n    rate_together = 1 / 4\n\n    # Equation based on combined rate\n    equation = Eq(rate_Alan + rate_Bob, rate_together)\n\n    # Solve for Alan's time\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    first_number = 10024\n    second_number = 3968\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    weeks = 26\n    total_consumption = weekly_consumption * weeks\n    return total_consumption\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    # To be elected without fail, Peter must have more than half of the total votes.\n    votes_needed_for_majority = total_votes // 2 + 1\n\n    # Additional votes Peter needs to get the majority\n    additional_votes_needed = votes_needed_for_majority - peter_votes\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial amount of money both Alex and Nicholas had.\n    x = symbols('x')\n    \n    # After spending, Nicholas has 6 times the money left compared to Alex.\n    equation = Eq(x - 13, 6 * (x - 58))\n    \n    # Solve for x to find the initial amount of money.\n    solved_value = solve(equation, x)\n    \n    # They both had x amount of money initially.\n    # So we multiply the solution by 2 to get the total amount they had together.\n    return 2 * solved_value[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500  # Initial amount deposited\n    rate = 0.08  # Interest rate\n    time = 10  # Time period in years\n\n    # Calculation using the compound interest formula: A = P(1 + r/n)^(nt)\n    # Since interest is compounded yearly, n = 1\n    account_balance = principal * ((1 + rate) ** time)\n\n    return account_balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    initial_value = 250\n    subtract_values = (6 * 6) + (8 * 6)\n    ans = initial_value - subtract_values\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    # Calculate the day of the week 28 days later\n    day_of_week_number = (days_later % days_in_week)\n\n    # Mapping weekdays to numbers according to the given format\n    weekday_mapping = {\n        0: '0001', # Monday\n        1: '0002', # Tuesday\n        2: '0003', # Wednesday\n        3: '0004', # Thursday\n        4: '0005', # Friday\n        5: '0006', # Saturday\n        6: '0007', # Sunday\n    }\n\n    # Today is Monday (0001), so 28 days later will be Monday again\n    ans = weekday_mapping[day_of_week_number]\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 0.01\n    digit_value = 6 * position_value\n    return digit_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    pole_interval = 12\n    # The first pole would be placed 12m from the start\n    # and the last pole would be 12m from the end.\n    # Thus, the effective length for placing the poles is (240 - 2*12)m.\n    effective_length = road_length - 2 * pole_interval\n    # Now, we can calculate the number of intervals (gaps) between the poles.\n    # The number of poles is one more than the number of intervals.\n    num_poles = (effective_length // pole_interval) + 1\n    \n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_pencils_rulers = 52\n    difference = 10\n\n    rulers = (total_pencils_rulers - difference) / 2\n    return int(rulers)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    # Given values\n    dataset = [11, 13, 17, 12]\n    mean_value = 11\n\n    # Add up the values we know\n    known_sum = sum(dataset)\n\n    # Calculate the total sum of all values based on the mean\n    total_sum = mean_value * (len(dataset) + 1)  # We have one unknown value, hence +1\n\n    # Subtract the known sum from the total sum to find x\n    x = total_sum - known_sum\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    position1_value = 7 * 10**3  # value of the 7 at ten-thousands place\n    position2_value = 7 * 10**1  # value of the 7 at tens place\n    difference = position1_value - position2_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    # Define the equations based on the given information\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    # Access the solution for the blue dress price\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Taking out 3 marbles of each color will not guarantee 4 of the same color\n    # 3 red, 3 yellow, and 3 blue only guarantees 3 of the same color\n    marbles_needed = 3 * 3\n    \n    # Taking one more will ensure that there are 4 of the same color\n    # Since you will either get a fourth of a color already taken or\n    # one of each which still guarantees 4 of the same color\n    marbles_needed += 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_to_girls_ratio = 5 / 6\n    boys = 200\n    girls = (boys / boys_to_girls_ratio)\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.3333... repeating\n    # Since the digit \"3\" repeats, the sum of the first 1000 digits is simply\n    # 1000 times the digit \"3\"\n    sum_of_digits = 1000 * 3\n    return sum_of_digits\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    amount = 29\n\n    result = (percentage / 100) * amount\n\n    return result\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # concentration of the solution in container A (unknown)\n    concentration_A = symbols('concentration_A')\n\n    # concentration in container B after mixing\n    # initially B has 40g of pure water, so 0% concentration\n    # we add 10g from A which has 'concentration_A' percentage\n    # resulting concentration in B is 10g * 'concentration_A' / (40g + 10g)\n    concentration_B = (10 * concentration_A) / (40 + 10)\n\n    # concentration in container C after mixing\n    # initially C has 50g of pure water, so 0% concentration\n    # we add 10g from B which has 'concentration_B' percentage\n    concentration_C = (10 * concentration_B) / (50 + 10)\n\n    # given that the final concentration in C is 0.5%\n    # set the equation and solve for 'concentration_A'\n    equation = Eq(concentration_C, 0.5 / 100)\n    solution = solve(equation, concentration_A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n\n    ans = len(range(start, end + 1, step))\n\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal_number = 0.604\n\n    ans = fraction + percentage + decimal_number\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import symbols, Eq, solve, factorint\n\ndef solution():\n    # Let x, y, z be the current ages of the three cousins\n    x, y, z = symbols('x y z', integer=True)\n\n    # Form equations based on given conditions\n    equation_current = Eq(x * y * z, 2016)\n    equation_last_year = Eq((x - 1) * (y - 1) * (z - 1), 1377)\n\n    # Use the fact that the product of their ages 2 years ago is (x-2)(y-2)(z-2)\n    # Since 2016 = 1377 * k for some integer k\n    factors_2016 = factorint(2016)\n    factors_1377 = factorint(1377)\n    # k is the ratio of the two products, and also equal to (x/y)(y/z)(z/x) = k/k/k = k\n    k = 2016 // 1377\n\n    # The product of ages 2 years ago is then 1377/k\n    product_two_years_ago = 1377 // k\n\n    return product_two_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Treat the two people who want to stand next to each other as a single unit.\n    # This leaves us with 4 \"units\" to arrange: the pair and the other 3 individuals.\n    units_to_arrange = 4\n\n    # Arrange these 4 units.\n    arrange_units = factorial(units_to_arrange)\n\n    # Now, within this single unit, the two people can be arranged in 2! ways.\n    arrange_within_unit = factorial(2)\n\n    # Multiply the arrangements of the units by the arrangements within the unit.\n    total_arrangements = arrange_units * arrange_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_apples_first_3_days = 33\n    average_last_4_days = 18\n    total_days = 7\n\n    total_last_4_days = average_last_4_days * 4\n    total_week = total_apples_first_3_days + total_last_4_days\n    average_per_day = total_week / total_days\n\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight1 = 12  # mg\n    nickel_percent1 = 40  # %\n\n    weight2 = 13  # mg\n    nickel_percent2 = 60  # %\n\n    total_weight = weight1 + weight2\n    total_nickel = (weight1 * nickel_percent1 / 100) + (weight2 * nickel_percent2 / 100)\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # If there are 8 players in a single round-robin tournament, each player plays against every other player once.\n    # Hence, each player plays 7 games, because there are 7 other players.\n    \n    # Since everyone scores a different number of wins and no ties occurred,\n    # we can distribute the wins in a strictly decreasing fashion starting from the top scorer (the champion).\n    # Therefore, the possible number of wins are 7, 6, 5, ... , 0 (one for each player).\n    \n    # The champion is the player with the most wins, so the champion records 7 wins.\n    \n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        total = (n * (n + 1)) // 2\n        if total > 3405:\n            break\n        if 3405 - total <= n:\n            return 3405 - total\n        n += 1\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Let the first term be a and the common difference be d.\n    # sum of first n terms of an AP is given by S_n = n/2 * (2a + (n-1)d)\n    # sum of first 6 terms, S_6 = 64\n    # sum of first 12 terms, S_12 = 156\n\n    # From the sum of first 6 terms:\n    # S_6 = 6/2 * (2a + (6-1)d) = 64\n    # 3 * (2a + 5d) = 64\n    # 2a + 5d = 64 / 3\n\n    # From the sum of first 12 terms:\n    # S_12 = 12/2 * (2a + (12-1)d) = 156\n    # 6 * (2a + 11d) = 156\n    # 2a + 11d = 156 / 6\n\n    # We can form a system of two equations:\n    # 2a + 5d = 64 / 3     (1)\n    # 2a + 11d = 156 / 6   (2)\n\n    # Subtract equation (1) from equation (2) to find d:\n    # (2a + 11d) - (2a + 5d) = (156 / 6) - (64 / 3)\n    # 6d = 156 / 6 - 64 / 3\n    # 6d = 26 - 21.333...\n    # 6d = 4.666...\n    # d = 4.666... / 6\n    # d = 0.777...\n\n    # Find a using equation (1):\n    # 2a + 5d = 21.333...\n    # 2a + 5 * 0.777... = 21.333...\n    # 2a + 3.888... = 21.333...\n    # 2a = 21.333... - 3.888...\n    # 2a = 17.444...\n    # a = 17.444... / 2\n    # a = 8.722...\n\n    # Now calculate the sum of the first 18 terms using the found values of a and d:\n    # S_18 = 18/2 * (2a + (18 - 1)d)\n    # S_18 = 9 * (2 * 8.722... + 17 * 0.777...)\n    # S_18 = 9 * (17.444... + 13.209...)\n    # S_18 = 9 * 30.653...\n    # S_18 = 275.881...\n    # Since the terms are in AP, the answer should be an integer so we round if needed.\n    \n    a = (64 / 3 - 5 * (156 / 12 - 64 / 3) / 6) / 2\n    d = (156 / 12 - 64 / 3) / 6\n    \n    S_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n    \n    return int(S_18)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let c be the total number of chickens\n    # Let p be the number of pens before building 6 more\n    # Let x be the number of chickens per pen before building 6 more\n    # c = p * x\n    # After building 6 more pens and reducing the number of chickens per pen by 6,\n    # We have c = (p + 6) * (x - 6)\n    # And since we know p is 24 (the original number of pens), we have\n    # c = 24 * x = (24 + 6) * (x - 6)\n    # Simplify this equation\n    # 24 * x = 30 * (x - 6)\n    # 24 * x = 30 * x - 180\n    # 6 * x = 180\n    # x = 30\n    # Now we can find c (total number of chickens)\n    p = 24\n    x = 180 // 6\n    c = p * x\n    return c\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    # Since remainder is fixed at 3, we iterate through possible divisors (1 to 36 because the sum must not exceed 40)\n    for divisor in range(1, 37):\n        for quotient in range(1, (40 - divisor - remainder) + 1):\n            dividend = quotient * divisor + remainder\n            # Checking if all parts sum up to 40\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_club_total = (7 / 8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Subtract numbers normally\n    normal_result = 729 - 26\n    \n    # Convert the result to a string and reverse it\n    reversed_result_str = str(normal_result)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_result = int(reversed_result_str)\n    \n    return reversed_result\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n    \n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    # Ashley is 10 years old\n    ashley_age_now = 10\n    \n    # Three years ago, she was 2 years older than her brother\n    ashley_age_then = ashley_age_now - 3\n    age_difference = 2\n    \n    # Brother's age three years ago\n    brother_age_then = ashley_age_then - age_difference\n    \n    # Brother's current age\n    brother_age_now = brother_age_then + 3\n    \n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160  # meters\n    time_to_pass = 30   # seconds\n    speed = 20          # meters per second\n\n    # Distance covered to pass the bridge completely is speed * time.\n    distance_covered = speed * time_to_pass\n    # Length of the bridge is distance covered minus the length of the train.\n    length_of_bridge = distance_covered - train_length\n\n    return length_of_bridge\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n    \n    return int(difference)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time from 6:30am to 7:00am => 30 minutes = 0.5 hours\n    jogging_time = 0.5\n    jogging_speed = 9  # km per hour\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Walking time from 7:00am to 8:00am => 1 hour\n    walking_time = 1\n    walking_speed = 7.5  # km per hour\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    options_for_first_digit = 2  # Can be 3 or 4, not 0\n    options_for_second_digit = 3  # Can be 0, 3, or 4\n    options_for_third_digit = 3  # Can be 0, 3, or 4\n\n    total_combinations = options_for_first_digit * options_for_second_digit * options_for_third_digit\n    return total_combinations\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for games won and games lost\n    games_won, games_lost = symbols('games_won games_lost')\n    \n    # Equation representing total games played, which is 63\n    total_games_eq = Eq(games_won + games_lost, 63)\n    \n    # Equation representing the team won twice as many games as it lost\n    games_ratio_eq = Eq(games_won, 2 * games_lost)\n    \n    # Solving the system of equations\n    solutions = solve((total_games_eq, games_ratio_eq), (games_won, games_lost))\n    \n    # Return the number of games lost\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return (55 - 44) * common_factor\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cows as 'c' and goats as 'g'.\n    c, g = symbols('c g')\n\n    # The initial condition says 65% were cows, so 35% were goats.\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # After 240 more cows and goats were added, cows increased by 20%, goats doubled.\n    equation3 = Eq(c + 0.20 * (c + g) + 240, c + 0.65 * (c + g))\n    equation4 = Eq(2 * g, g + 240 - 0.20 * (c + g))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    # Define the alternating addition and subtraction\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    # Return the calculated result\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # First, consider the arrangement of the three boys with spaces between them to ensure they \n    # are not adjacent to each other: B _ B _ B\n    # There are 4 spaces (including the beginning and end of the line) to insert the girls and teachers\n\n    # The three girls want to stand together, so treat them as a single unit: GGG\n    # There are 4 spaces to put this unit, so there are 4 possibilities for the girls\n\n    girls_as_unit_possibilities = 4\n\n    # Now, we have 4 units to arrange: boys (as 3 separate units) + girls (as 1 unit) + 3 teachers\n    # Total units = 3 boys + 1 group of girls + 3 teachers = 7 units to arrange in 7 positions\n    total_units_arrangement = factorial(7)\n\n    # The three girls can arrange themselves in 3! ways\n    girls_arrangement = factorial(3)\n\n    # The three boys and three teachers can each be permuted among themselves in 3! (each) ways\n    # Since boys and teachers are already counted in total_units_arrangement, we do not need to count\n    # their individual permutations again here\n\n    # The total number of ways is the product of these possibilities\n    total_ways = girls_as_unit_possibilities * total_units_arrangement * girls_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Triangle X is a smaller equilateral triangle with side 3 cm\n    # Triangle Y is a larger equilateral triangle with side 9 cm\n    # The area of an equilateral triangle is (sqrt(3) / 4) * side^2\n\n    from math import sqrt\n\n    # Area calculation for Triangle X\n    area_x = (sqrt(3) / 4) * (3**2)\n\n    # Area calculation for Triangle Y\n    area_y = (sqrt(3) / 4) * (9**2)\n\n    # The number of times Triangle X fits into Triangle Y\n    # is the ratio of the area of Triangle Y to Triangle X\n    num_times = area_y / area_x\n\n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = 5*x*12 + 3*x*5\n    equation = Eq(total_cost, 120)\n    \n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    students_to_choose = 2\n\n    return comb(num_students, students_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    difference = product1 - product2\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup = 2  # 1 soup plus the option of not having soup\n    desserts = 3  # 2 desserts plus the option of not having a dessert\n    \n    # Calculate the number of combinations using the multiplication principle\n    ans = appetisers * main_courses * soup * desserts\n\n    return ans\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruence for the first game: x ≡ -3 (mod 8)\n    # Congruence for the second game: x ≡ -1 (mod 9)\n    congruences = ((-3, 8), (-1, 9))\n    \n    # solve_congruence returns a tuple (x, modulus) where x is the solution\n    # Since we're looking for a number between 100 and 200, we need to find the appropriate multiple of modulus\n    x, modulus = solve_congruence(congruences)\n    \n    # Find the lowest multiple of modulus that is more than 100\n    while x <= 100:\n        x += modulus\n\n    return x\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    # The number of red balls is given as 4\n    red_balls = 4\n    # The probability that both balls are red is 2/7\n    probability = 2 / 7\n\n    # Let's say there are 'x' blue balls\n    # Total balls in the bag is red_balls + x\n    \n    # The probability of taking one red ball is red_balls / total_balls\n    # The probability of taking a second red ball without replacement is (red_balls - 1) / (total_balls - 1)\n    # The combined probability is the product of the two probabilities which is given to be 2/7\n    \n    # Thus we have the equation:\n    # (red_balls / (red_balls + x)) * ((red_balls - 1) / (red_balls + x - 1)) = 2/7\n    \n    # Now let's set up a loop to find the number of blue balls\n    x = 0\n    while True:\n        if (red_balls / (red_balls + x)) * ((red_balls - 1) / (red_balls + x - 1)) == probability:\n            break\n        x += 1\n    # We return the number of blue balls as the final answer\n    return x\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    a1 = 6\n    an = 41\n    d = 5\n    n = (an - a1) // d + 1\n    sum_seq = n * (a1 + an) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit_weight = 8\n    rabbit_to_chicken_weight = 2\n    dog_to_chicken_weight = dog_to_rabbit_weight * rabbit_to_chicken_weight\n    \n    return dog_to_chicken_weight\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let's say the total number of slices is x.\n    # According to the question, 3/5 of the cake has been eaten,\n    # 2 slices were given to friends, and 4 slices are left.\n    \n    # Therefore, (3/5)*x + 2 + 4 = x\n    # Simplify the equation to find x\n    # (3/5)*x + 6 = x\n    # (3/5)*x = x - 6\n    # Multiply both sides by 5 to get rid of the denominator\n    # 3*x = 5*(x - 6)\n    # 3*x = 5*x - 30\n    # Subtract 3x from both sides to solve for x\n    # 0 = 2*x - 30\n    # Add 30 to both sides\n    # 2*x = 30\n    # Divide both sides by 2\n    # x = 15\n    return 15\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be Mike's work rate and d be Danny's work rate\n    m, d = symbols('m d')\n\n    # Mike and Danny working together finish the job in 10 hours\n    equation1 = Eq(1, 10 * (m + d))\n\n    # Mike working for 8 hours plus Danny working for 13 hours also finish the job\n    equation2 = Eq(1, 8 * m + 13 * d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n\n    # Calculate the time it will take for Danny to finish the job by himself\n    # Since d is Danny's work rate, the time it takes is the reciprocal of d\n    danny_time = 1 / solutions[d] \n    \n    return danny_time\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from sympy import Integer, factorial\n\ndef solution():\n    # The product 2^27 can be realized by the digits as follows:\n    # 2^0 = 1, 2^1 = 2, 2^2 = 4, 2^3 = 8\n    # These are the only digits we can use to achieve the product of 2^27.\n    # Let's find the exponents of 2 that sum up to 27.\n    \n    # The number of 2's, 4's, and 8's can be calculated using stars and bars method.\n    # If we have 27 2's, we need to arrange them into 10 places where each place can carry more than one 2.\n    # The number of ways to do that is C(27 + 10 - 1, 10 - 1) \n    # which is C(36, 9) as we are placing 9 dividers in 36 places.\n    \n    # However, we also have to consider that the digit '0' is not allowed and \n    # there should be at least one '1's in each number.\n    # So we have to calculate this for 9 digits and multiply by 10 for the placements of '1's in the 10-digit number.\n    \n    # For 9 places, it is C(27 + 9 - 1, 9 - 1) which is C(35, 8).\n    \n    # The overall calculation:\n    # - We need to place 27 as sum of powers of 2 => 3^27 -> using 1, 2, 4, 8\n    # - We have to remember these can be in any order in a 10-digit number; hence we'll use permutations.\n    \n    count = 0\n    for num_twos in range(28):\n        for num_fours in range(14):\n            num_eights = (27 - num_twos - 2 * num_fours) // 3\n            # Check if the sum adds to 27 and num_eights is a non-negative integer\n            if num_twos + 2 * num_fours + 3 * num_eights == 27 and num_eights >= 0:\n                # Count the number of '1's to fill the remaining places\n                num_ones = 10 - (num_twos + num_fours + num_eights)\n                # Use multinomial theorem to account for permutations of digits \n                if num_ones >= 0:\n                    count += factorial(num_ones + num_twos + num_fours + num_eights) // (\n                        factorial(num_ones) * factorial(num_twos) * factorial(num_fours) * factorial(num_eights))\n\n    return Integer(count)\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    first_three_value = 3 * 10**2\n    second_three_value = 3 * 10**5\n    difference = second_three_value - first_three_value\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    min_pencils_in_case = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils_in_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # define a function for the operation based on its definition\n    def custom_operation(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    # we need to solve for m in the equation m ⊕ 10 = 66\n    # we use a simple loop to find the value of m that satisfies this condition\n    for m in range(66):  # starting the range at 66 is unnecessary, m has to be less than 66\n        if custom_operation(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Subtract the corners because they are counted twice (once for each side they intersect)\n    num_chess = 4 * (side_length // interval) - 4\n    return num_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the red squares, we need to maximize the usage of different numbers without repeating any number 5 times.\n    # Since there are 10 possible digits, if we use each digit 4 times, we end up with 40 squares painted with different digits.\n    # For the remaining 60 squares, we start filling with different digits again without repeating any five times yet.\n    # After 40 + 60 = 100 squares, we have each digit repeated 4+2 = 6 times.\n    # So the minimum possible number of red squares will be 6 times 10, since each digit will now be counted as red.\n\n    min_red_squares = 6 * 10\n    return min_red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Common difference between terms\n\n    # Calculate number of terms until first negative term\n    # an = a1 + (n - 1) * d < 0\n    # 0 > 50 + (n - 1) * (-4)\n    # -50 > (n - 1) * (-4)\n    # 50 < (n - 1) * 4\n    # 12.5 < n - 1\n    # 13.5 < n\n    \n    num_terms = (0 - first_term) / difference\n    num_terms = int(num_terms) + 1  # Since we want the full term before it gets negative\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    received_amount = 4/5\n\n    final_amount = initial_amount - spent_amount + received_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            num = int(f\"{x}{x}{y}{y}\")\n            if (int(num ** 0.5) ** 2) == num:\n                ans = num\n                return ans\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    from sympy import primerange\n\n    powers_of_five = 0\n    n = 1\n    for prime in primerange(1, 5 * 28 + 1):\n        if prime == 5:\n            k = prime\n            while (n // k) > 0:\n                powers_of_five += n // k\n                k *= prime\n\n    # Find the largest n with at least 28 powers of five\n    while powers_of_five < 28:\n        n += 1\n        # Add the factors of 5 in n (including multiples of 5)\n        k = n\n        while k % 5 == 0:\n            powers_of_five += k // 5\n            k //= 5\n\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    combined_speed = 56 + 74\n    distance_initially = 780\n    distance_remaining = 130\n    distance_covered = distance_initially - distance_remaining\n    time = distance_covered / combined_speed\n\n    return time\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    daily_climb = 3\n    nightly_slide = 1\n    effective_daily_climb = daily_climb - nightly_slide\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= daily_climb\n        if total_distance <= 0:\n            break\n        total_distance += nightly_slide\n    \n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - (-4.226)\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    ans = lcm(akon_cycle, ben_cycle, cris_cycle)\n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Check if there are 4 unique digits\n            for perm in permutations(digits):\n                num = int(''.join(perm))\n                if num >= 1000 and set(str(num)) == digits:\n                    # Check if the digits are consecutive\n                    if all(abs(int(perm[i]) - int(perm[i+1])) == 1 for i in range(len(perm)-1)):\n                        count += 1\n                        break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_decimal = '8354'\n    sum_of_digits = sum(int(number) for number in recurring_decimal)\n    total_sum = sum_of_digits * (84 // len(recurring_decimal))\n    remaining_digits = 84 % len(recurring_decimal)\n    total_sum += sum(int(recurring_decimal[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # There is a 3-second sound for each strike\n    # There is a pause between strikes, which is why 6 strikes take more than 6 * 3 = 18 seconds\n    \n    # First, calculate the total duration of pauses after 6 strikes\n    total_duration_for_6_strikes = 43\n    sound_duration_per_strike = 3\n    number_of_strikes_initial = 6\n    \n    # Duration of all sound strikes for 6 times\n    total_sound_duration_for_6_strikes = sound_duration_per_strike * number_of_strikes_initial\n    \n    # Duration of all pauses for 6 strikes\n    total_pause_duration_for_6_strikes = total_duration_for_6_strikes - total_sound_duration_for_6_strikes\n    \n    # Calculate the duration of one pause\n    # There is one fewer pause than the number of strikes\n    pause_duration = total_pause_duration_for_6_strikes / (number_of_strikes_initial - 1)\n    \n    # Now calculate the total duration for 12 strikes\n    number_of_strikes_final = 12\n    \n    # Duration of all sound strikes for 12 times\n    total_sound_duration_for_12_strikes = sound_duration_per_strike * number_of_strikes_final\n    \n    # Duration of all pauses for 12 strikes\n    total_pause_duration_for_12_strikes = pause_duration * (number_of_strikes_final - 1)\n    \n    # Total duration for 12 strikes is the sum of all sounds and pauses\n    total_duration_for_12_strikes = total_sound_duration_for_12_strikes + total_pause_duration_for_12_strikes\n    \n    return total_duration_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # As each kid gets at least one pen, we can give one pen to each kid to start with.\n    # So, we need to distribute the remaining pens (20 - 6 = 14 pens) among the 6 kids.\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups is given by the formula:\n    # Combinations(n + r - 1, r - 1)\n    # In this case, we have n = 14 pens remaining and r = 6 kids.\n    # So, we will calculate Combinations(14 + 6 - 1, 6 - 1).\n    remaining_pens = 14\n    kids = 6\n    ans = comb(remaining_pens + kids - 1, kids - 1)\n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_left_initially = 5\n    students_joined = 18\n\n    m = 0\n    while True:\n        total_students = (m * m) + students_left_initially\n        if ((total_students + students_joined) ** 0.5).is_integer():\n            break\n        m += 1\n\n    ans = m * m + students_left_initially\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    original_hours = 15\n    target_hours = 2\n\n    work_rate_per_person = 1 / original_hours\n    total_work_rate_required = people * work_rate_per_person\n    required_people = total_work_rate_required * target_hours\n\n    return int(required_people)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    no_zero_numbers = 9 * 9 * 9  # Excluding any zeroes\n    at_least_one_zero_numbers = total_three_digit_numbers - no_zero_numbers\n    return at_least_one_zero_numbers\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n\n    # Kinetic Energy formula: KE = 1/2 * mass * velocity^2\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 1) and (num % 4 == 1) and (num % 5 == 1) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The greatest odd number for one's place is 9.\n    ones_place = 9\n    \n    # The digits in the hundreds and the tens place add up to 13.\n    # We need to minimize the hundreds place value, start from 1 as it's the smallest 4-digit number.\n    for hundreds_place in range(1, 10):\n        for tens_place in range(0, 10):\n            if hundreds_place != tens_place and (hundreds_place + tens_place) == 13:\n                # The digits in the thousands place must be different from others and minimum possible.\n                for thousands_place in range(1, 10):\n                    if thousands_place != hundreds_place and thousands_place != tens_place and thousands_place != ones_place:\n                        return thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let s be the speed of Jerry\n    # Then 1.5s is the speed of Kevin\n    # Let t be the time they meet\n    # The distance covered by Jerry is s * t\n    # The distance covered by Kevin is 1.5s * t\n    # The total distance is the sum of distances covered by Jerry and Kevin\n    # s * t + 1.5s * t = 225 miles\n    # We can summarize this as (1 + 1.5)s * t = 225 miles\n    # The time they meet will be t = 225 / (2.5s)\n    # So the distance Jerry drives will be:\n    # s * t = s * (225 / (2.5s)) = 225 / 2.5\n    # Calculate this value to get the distance driven by Jerry\n    distance_jerry = 225 / 2.5\n    return distance_jerry\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length_cm = 99\n    cuts = 8\n    pieces = cuts + 1  # plus one because after the cuts you have one more piece than cuts\n\n    length_each_piece_cm = total_length_cm / pieces\n\n    return length_each_piece_cm\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    num_pictures = 10\n\n    usable_space = wall_width - 2 * picture_width\n    space_between_centers = usable_space / (num_pictures - 1)\n    distance_to_center_wall = wall_width / 2\n    centre_third_picture = picture_width + space_between_centers\n\n    distance_from_center_wall = centre_third_picture - distance_to_center_wall\n\n    return abs(distance_from_center_wall)\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 100  # Assume initial height is 100 for calculation convenience\n    bounce_height = original_height\n    bounce_count = 0\n    limit_height = original_height * 25 / 100  # 25% of the original height\n\n    while bounce_height >= limit_height:\n        bounce_height *= 75 / 100  # 75% of the previous height\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    return sum(terms)\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    future_uncle_age = 40\n    uncle_age = future_uncle_age - (future_uncle_age - doris_age)\n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n\n    # Ellie's transaction: 2 bananas + 3 apples = 1.50\n    # Beth's transaction: 3 bananas + 2 apples = 1.45\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Annabella's transaction: 1 banana + 1 apple\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    ans = 597 * 63\n    return ans\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100  # Convert percentage to decimal\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n    \n    return solutions[lisa]\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    watch_price = 200\n    spent_on_shirt = (2/7) * (original_money - watch_price)\n    remaining_money = original_money - watch_price - spent_on_shirt\n    equation = Eq(remaining_money, original_money / 3)\n\n    initial_money = solve(equation, original_money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    possible_solutions = []\n    for i in range(1, 16):\n        if i + 5 < 15:\n            continue  # This ensures regrouping has taken place since 5 is smaller than the missing number (i)\n        elif (i + 5) - 10 == 15 - 10:\n            # Regrouping means borrowing 1 ten and adding it to the other number; we check if this works\n            possible_solutions.append(i)\n    \n    if 7 in possible_solutions:\n        # Timothy's answer is correct if 7 is a possible solution\n        return True, 7\n    else:\n        # Otherwise, return False and the correct answer(s)\n        return False, possible_solutions[0] if possible_solutions else None\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as one entity plus the remaining 5 students, so we have 6 entities to arrange\n    entities_arrangements = factorial(6)\n    \n    # Tom and Harry can switch places with each other\n    tom_harry_arrangements = factorial(2)\n    \n    # Multiply for all possible arrangements considering the above two cases\n    total_arrangements = entities_arrangements * tom_harry_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    amount_after_three_years = initial_investment * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    # Rounding to the nearest 100, the range of possible actual prices is 124950 to 125049\n    # Therefore, the lowest possible price to the nearest dollar is...\n    lowest_possible_price = rounded_price - 50\n    # Ryna's guess at 125001 is incorrect. 124950 is the correct lowest possible price.\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols\n    distance, original_time, original_speed = symbols('distance original_time original_speed')\n    \n    # Increase speed by 20%, time reduces by 1 hour\n    eq1 = Eq(original_speed * 1.2 * (original_time - 1), distance)\n    \n    # Travels 200 km at usual speed, then increases speed by 25% for the remaining distance\n    remaining_distance = distance - 200\n    remaining_time = original_time - 200 / original_speed\n    eq2 = Eq(200 / original_speed + remaining_distance / (original_speed * 1.25), original_time - 12/60)\n    \n    # Original equation with usual speed\n    eq3 = Eq(original_speed * original_time, distance)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (distance, original_time, original_speed))\n    \n    # Extract distance from the solutions\n    distance_solution = solutions[distance]\n    \n    return distance_solution\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total_score = 4 * 89\n    target_average = 95\n\n    # Initialize the number of additional tests he needs to take\n    additional_tests = 0\n    while True:\n        # Calculate the new total tests taken\n        total_tests = 4 + additional_tests\n        \n        # Calculate the minimum total score needed to achieve the target average\n        minimum_total_score_needed = total_tests * target_average\n        \n        # Determine if Paul can reach the average with his current total score\n        # by scoring 100 on all additional tests\n        if current_total_score + additional_tests * 100 >= minimum_total_score_needed:\n            break\n        \n        # If not, increment the number of additional tests he needs to take\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    # Let x be the uncle's age now\n    x = symbols('x')\n\n    # Define the equation based on the problem statement\n    equation = Eq(x + (x - doris_age), 40)\n\n    # Solve the equation\n    uncle_age = solve(equation, x)[0]\n\n    return uncle_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepares an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - (distance1 + distance2)\n    \n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sheep at the beginning, and y be the number of cows at the beginning\n    x, y = symbols('x y')\n\n    # Original ratio of sheep to cows: x/y = 5/7\n    original_ratio = Eq(x / y, 5 / 7)\n\n    # After adding 21 sheep and removing 7 cows\n    # 21 new sheep brought in, and 7 cows were removed\n    # New number of sheep is x + 21, new number of cows is y - 7\n\n    # New ratio: (y - 7)/(x + 21) = 3/4\n    new_ratio = Eq((y - 7) / (x + 21), 3 / 4)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (x, y))\n\n    # Return the number of sheep at the beginning\n    return solutions[x]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_start = (8, 30)  # Hours and minutes for 08:30\n    time_end = (9, 25)  # Hours and minutes for 09:25\n\n    time_delta_h = time_end[0] - time_start[0]  # Difference in hours\n    time_delta_m = time_end[1] - time_start[1]  # Difference in minutes\n\n    # Since time_end is always after time_start (otherwise we'd need more checks)\n    n = time_delta_h * 60 + time_delta_m  # Converting hours to minutes and adding remaining minutes\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 1 / 6\n    B_efficiency = A_efficiency / 2\n    total_efficiency = A_efficiency + B_efficiency\n\n    days_needed = 1 / total_efficiency\n    return days_needed\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Assign variable to the total sum of their ages currently\n    current_sum_ages = 22\n    # Assign variable to the final sum of ages we are looking for\n    final_sum_ages = 30\n    # Calculate the difference in the sum of ages\n    age_difference = final_sum_ages - current_sum_ages\n    # Assume their ages increase at the rate of 1 year per year for each of them\n    # Calculate the number of years it will take for the sum of their ages to be 30\n    years = age_difference // 2  # Divide by 2 as they both age 1 year each year\n    \n    return years\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cost of Haribo in cents\n    mamee_cost = haribo_cost - 30  # cost of Mamee is 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # big packet of jelly costs 6 times as Mamee\n\n    return big_jelly_cost / 100  # converting the cost from cents to dollar\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # m/s\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    anna = (3/8) * total_candies\n    belle = (1/4) * total_candies\n    cathy_dawn = total_candies - anna - belle\n    \n    equation = Eq(anna + belle, cathy_dawn + 90)\n\n    total_candies_solution = solve(equation, total_candies)\n    \n    return total_candies_solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return (18 / 36) * 32\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fish balls Mr. Tan made at first.\n    x = symbols('x')\n\n    # He sold 3/4 in the morning, so he has 1/4 left.\n    # He then sold 1/3 of the remaining in the afternoon, leaving him with 2/3 of what was left.\n    # Equation: original amount - 3/4 sold in morning - 1/3 of (1/4 remaining) + 506 = 2 * original amount\n    morning_sold = (3/4) * x\n    remaining = x - morning_sold\n    afternoon_sold = (1/3) * remaining\n    final_remaining = remaining - afternoon_sold\n\n    # The equation for the problem:\n    equation = Eq(final_remaining + 506, 2 * x)\n\n    # Solving the equation for x:\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n\n    # Undo Joel's removal\n    joel_removed = (remaining_plants + 2) * 2\n\n    # Update remaining plants and undo Valerie's removal\n    remaining_plants = joel_removed\n    valerie_removed = (remaining_plants + 3) * 2\n    \n    # Update remaining plants and undo Ethan's removal\n    remaining_plants = valerie_removed\n    ethan_removed = (remaining_plants + 1) * 2\n\n    # Total plants at first\n    total_plants = ethan_removed\n    return total_plants\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n    return books_to_give\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v represent the number of vanilla cupcakes\n    v = symbols('v')\n\n    # Calculate the quantity of chocolate and blueberry cupcakes based on vanilla cupcakes\n    chocolate = v + 72\n    blueberry = v - 36\n\n    # Calculate the number of cupcakes left after selling\n    cupcakes_left = chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9)\n\n    # Set the equation for the total cupcakes left after selling\n    equation = Eq(cupcakes_left, 427)\n\n    # Solve the equation\n    vanilla_cupcakes = solve(equation, v)\n    \n    # We need to make sure we pick the positive solution since the number of cupcakes cannot be negative\n    vanilla_cupcakes = [sol for sol in vanilla_cupcakes if sol > 0]\n\n    # Assuming we get a unique positive solution\n    vanilla_cupcakes = vanilla_cupcakes[0] if vanilla_cupcakes else None\n\n    # Original number of chocolate cupcakes before selling\n    chocolate_cupcakes = vanilla_cupcakes + 72\n\n    # Number of chocolate cupcakes sold\n    chocolate_sold = chocolate_cupcakes * (1/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boys_to_girls_ratio = 2 / 7\n    # Number of girls = Number of boys * (girls part of the ratio / boys part of the ratio)\n    girls = boys * (7 / 2)\n    # Total number of students = Number of boys + Number of girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    # Given values\n    strawberry_cake_price = 3\n    marble_cake_more = 2\n    cheese_cake_times = 3\n\n    # Calculate the prices based on the relationships given\n    marble_cake_price = strawberry_cake_price + marble_cake_more\n    cheese_cake_price = cheese_cake_times * marble_cake_price\n\n    # The price of 2 cheese cakes\n    total_price_for_2_cheese_cakes = 2 * cheese_cake_price\n\n    return total_price_for_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle_value = (6*6 + 2 - 17) / 3\n    return circle_value\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]  # (remainder, modulus)\n    number, _ = solve_congruence(*congruences)\n    while number <= 500:\n        if number >= 400:\n            return number\n        number += 3 * 5 * 7  # product of moduli\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import divisors\n\n    num_factors = len(divisors(36))\n\n    return num_factors\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    num_pigs = 8\n    green_apples = num_pigs  # one green apple per pig\n    red_apples = num_pigs / 2  # one red apple for every two pigs\n\n    total_apples = green_apples + red_apples\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    dead_seeds_fraction = 1 / 4\n    dead_seeds = total_seeds * dead_seeds_fraction\n    grown_sunflowers = total_seeds - dead_seeds\n    return grown_sunflowers\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    days = 15\n\n    deposit_days = (days + 1) // 2\n    spend_days = days // 2\n\n    total_deposits = deposit_amount * deposit_days\n    total_spends = spend_amount * spend_days\n\n    ans = initial_amount + total_deposits - total_spends\n\n    return ans\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    result *= 4  # Reverse the division\n    result -= 178  # Reverse the addition\n    original_number = result / 2  # Reverse the multiplication\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    \n    average_apples = total_apples / num_students\n    \n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Original speed = distance / time\n    # Original time to destination is 8 hours\n    # New time to destination is 8 - 1 = 7 hours\n    # New speed = Original speed + 5 km/h\n    \n    # Let the original speed be s and the distance be d.\n    # Original equation: d = s * 8\n    # New speed equation: d = (s + 5) * 7\n\n    # Setting the two equations equal to each other since distance is the same:\n    # s * 8 = (s + 5) * 7\n    s = symbols('s')\n    equation = Eq(8 * s, 7 * (s + 5))\n\n    # Solve for s\n    original_speed = solve(equation, s)\n\n    # Calculate distance using original speed\n    distance = original_speed[0] * 8\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    # Total ways to seat 4 people without any restrictions is 4! (4 factorial)\n    total_ways = 4 * 3 * 2 * 1\n    \n    # Ways in which Claire and Tony sit opposite each other: \n    # Fix Claire at a position, Tony will sit opposite to her, \n    # and the remaining 2 seats can be filled in 2! ways\n    claire_tony_opposite_ways = 2 * 1\n    \n    # To calculate the ways where Claire and Tony do NOT sit opposite each other,\n    # subtract the ways they sit opposite from the total ways\n    non_opposite_ways = total_ways - claire_tony_opposite_ways\n    \n    return non_opposite_ways\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # Set up the equations based on the given problem\n    equation1 = Eq(banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)      # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # Extract the price of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of stickers\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n    \n    # Mary and Alexis had some stickers in the ratio 7 : 5\n    equation1 = Eq(mary, alexis * 7/5)\n    \n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    mary_after = mary - mary * 20/100\n    alexis_after = alexis - alexis * 20/100\n    \n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial * 180/100)\n    \n    # The amount given to Charlotte by both\n    equation3 = Eq(charlotte_final - charlotte_initial, mary * 20/100 + alexis * 20/100)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(mary_after, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    permuted_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return permuted_numbers[4]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    num_bottles = 1000\n    # The minimum number of test tubes required is the ceiling of the logarithm base 2 of the number of bottles\n    # This is due to the binary search method or binary representation of bottle numbers\n    # which ensures that each test can effectively halve the number of suspect bottles.\n    min_test_tubes = math.ceil(math.log2(num_bottles))\n    \n    return min_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs_initial = 10\n    total_distance = 36\n    distance_between_each_initial = total_distance / (total_chairs_initial - 1)\n    \n    total_chairs_final = total_chairs_initial - 3\n    distance_between_each_final = distance_between_each_initial * ((total_chairs_initial - 1) / (total_chairs_final - 1))\n   \n    return distance_between_each_final\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for brother1 in range(2, 10):\n        for brother2 in range(2, 10):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the angles\n    angle1, angle2 = symbols('angle1 angle2')\n\n    # Given that two angles in the quadrilateral are right angles\n    right_angle_sum = 90 + 90  # sum of the two right angles\n\n    # Given that one of the other angles is five times larger than the fourth angle\n    # angle1 is five times angle2\n    equation = Eq(angle1, 5 * angle2)\n\n    # The sum of the angles in any quadrilateral is 360 degrees\n    sum_of_angles = Eq(angle1 + angle2 + right_angle_sum, 360)\n\n    solutions = solve((equation, sum_of_angles), (angle1, angle2))\n\n    # angle1 is the largest angle since it is five times angle2\n    return solutions[angle1]\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def climb_ways(steps):\n        if steps <= 1:\n            return 1\n        elif steps == 2:\n            return 2\n        elif steps == 3:\n            return 4\n        else:\n            return climb_ways(steps - 1) + climb_ways(steps - 2) + climb_ways(steps - 3)\n\n    # Count ways to reach the 4th step\n    ways_to_step_4 = climb_ways(4)\n\n    # Count ways to reach every step from 6 to 10 (excluding the muddy 5th step)\n    ways_to_step_10 = climb_ways(6) + climb_ways(5) * ways_to_step_4\n    \n    return ways_to_step_10\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the smallest number of boxes to a large number\n    min_boxes = float('inf')\n    # Loop through each possible combination of small, medium, and large boxes\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if small * 5 + medium * 7 + large * 10 == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    # Return the smallest number of boxes if found; otherwise return 0\n    return min_boxes if min_boxes != float('inf') else 0\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = [i for i in range(10, 100) if i % 7 == 0 and 7007 % i == 0]\n    pair = [x for x in factors if 7007 // x in factors]\n    return sum(pair)\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    # Linear equation: (x + 6) / 3 = 5\n    # To find x, we multiply both sides by 3 and subtract 6 from both sides.\n    x = 5 * 3 - 6\n    return x\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    \n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    \n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    # Number of visitors arriving per minute\n    visitors_per_minute = 10\n    # Number of visitors each entrance can check-in per minute\n    check_in_per_entrance = 25\n\n    # If there is one entrance, there will be no one waiting after 16 min\n    # So to find out how many visitors will be there after 16 min\n    visitors_in_16_min = visitors_per_minute * 16\n\n    # With two entrances, the combined check-in rate per minute is doubled\n    # Hence, we need to find out after how many minutes the two entrances can clear\n    # the number of visitors that would have been waiting after 16 min with one entrance\n    check_in_per_minute_with_two_entrances = 2 * check_in_per_entrance\n    \n    # Calculate the time it takes for two entrances to clear the line of visitors\n    time_with_two_entrances = visitors_in_16_min / check_in_per_minute_with_two_entrances\n    \n    return int(time_with_two_entrances)\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    weekly_carrots = 14\n    weeks = 30\n    total_carrots = weekly_carrots * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n\n    distance_miles = miles_per_hour * hours\n    miles_to_kilometers = 1.60934\n\n    distance_kilometers = distance_miles * miles_to_kilometers\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    # Define the initial number of frogs and dragonflies.\n    initial_frogs = symbols('initial_frogs')\n    \n    # The initial number of dragonflies can be expressed in terms of the initial number of frogs.\n    initial_dragonflies = initial_frogs - 9\n    \n    # Define the equations based on the problem statement after the magic show.\n    equation1 = Eq(initial_frogs - (11-10), 11) # Frogs turned into dragonflies and vice versa\n    equation2 = Eq(initial_dragonflies + (11-10), 10) # Frogs turned into dragonflies and vice versa\n    \n    # Solve the system of equations for the initial number of frogs.\n    solution = solve((equation1, equation2), (initial_frogs))\n\n    # Return the value of initial_frogs.\n    return solution[initial_frogs]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb = 5\n    slide = 3\n    day_progress = climb - slide\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb\n\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide\n    \n    return day\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n    \n    cookies_left = total_cookies - cookies_given_away\n    num_bottles = cookies_left / cookies_per_bottle\n    \n    return int(num_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n    \n    # cookies is 24 more than muffins\n    eq1 = Eq(cookies, muffins + 24)\n    # after selling, she had 74 cookies and muffins left\n    eq2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n    \n    # solve the equations\n    sol = solve((eq1, eq2), (cookies, muffins))\n    \n    # number of cookies she baked at first\n    return sol[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 25 == 0:\n            return num\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming the cost for each item is not given and needs to be asked or assumed.\n    # Since no specific costs are given, let's assume hypothetical costs for each:\n    cost_per_ticket = 10  # the cost for one ticket to the game\n    cost_per_coffee = 2   # the cost for one cup of coffee\n    cost_per_metro = 1    # the cost for metro both ways\n\n    # Total cost for Richard\n    richard_cost = cost_per_ticket + cost_per_coffee + cost_per_metro\n\n    # Remaining money to spend on friends\n    remaining_money = 40 - richard_cost\n\n    # Cost per friend\n    cost_per_friend = cost_per_ticket + cost_per_coffee + cost_per_metro\n\n    # Number of friends he can treat\n    number_of_friends = remaining_money // cost_per_friend\n\n    return number_of_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        if ((1 + 2 + 3 + A + 4 + 5 + 6 + A + 7 + 8 + 9 + A) % 9 == 0) and A % 5 != 0 and A % 2 == 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of the driver to the cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n    \n    # The cyclist takes 143 minutes more than the driver to reach the destination\n    extra_time_cyclist = 143  # minutes\n    \n    # time = distance / speed\n    # since the distance is the same, time_driver / time_cyclist = speed_cyclist / speed_driver\n    # therefore, time_cyclist = time_driver * (speed_driver / speed_cyclist)\n    # this means that time_cyclist = time_driver * (speed_ratio_driver_to_cyclist)\n    # we also know that time_cyclist = time_driver + extra_time_cyclist\n    # combining the two equations above gives us:\n    # time_driver * (speed_ratio_driver_to_cyclist) = time_driver + extra_time_cyclist\n    # solving for time_driver gives us:\n    # time_driver = extra_time_cyclist / (speed_ratio_driver_to_cyclist - 1)\n    \n    time_driver = extra_time_cyclist / (speed_ratio_driver_to_cyclist - 1)\n    return time_driver\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(2, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Hypothesis test for each statement:\n\n    # Statement 1: All of the statements below are correct.\n    # If statement 1 is correct, statements 2, 3, 4, and 5 must be correct. \n    # But if statement 2 is correct, saying none of the statement below is correct, it\n    # conflicts with statement 1. Therefore, statement 1 cannot be correct.\n\n    # Statement 2: None of the statement below is correct.\n    # If statement 2 is correct, then statement 3 and 5 which follows should be incorrect,\n    # which is a logical inconsistency. Therefore, statement 2 cannot be correct.\n\n    # Statement 3: One of the statements above is correct.\n    # If statement 3 is correct, then only one of the statements 1 or 2 should be correct.\n    # But we know from analysis that both statements 1 and 2 are incorrect, hence statement \n    # 3 cannot be correct.\n\n    # Statement 4: All the statements above are correct.\n    # If statement 4 is correct, then statements 1, 2, and 3 must be correct,\n    # which we've already determined are incorrect, so statement 4 cannot be correct.\n\n    # Statement 5: None of the statement above is correct.\n    # If statement 5 is correct, then statements 1, 2, 3, and 4 must be incorrect, which is consistent\n    # with our previous analysis. As long as statement 5 is correct, no other statements should be correct.\n\n    # Therefore, the correct statement can only be statement 5.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins on the table.\n    x = symbols('x')\n\n    # According to the problem, one quarter of x coins are heads before flipping,\n    # and one third of x coins are heads after flipping two coins.\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n\n    # Solve the equation for x.\n    num_coins = solve(equation, x)[0]\n\n    return num_coins\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Total slots after placing each comedy show between singing shows\n    # CS_C1S_C2S_C3S_C4S_C5S_C where C represent a comedy slot\n    # and S represent all the possible slots for singing shows\n    # which are 6 here (before, in between and after all singing shows).\n    # There are 6 slots and we need to choose 3 slots to place our comedy shows.\n    singing_slots = 6\n    comedy_shows = 3\n    \n    # Calculate the number of ways to choose 3 slots out of 6 for the comedy shows\n    ways_to_place_comedy = factorial(singing_slots) // (factorial(comedy_shows) * factorial(singing_slots - comedy_shows))\n    \n    # Calculate total arrangements for singing shows\n    total_arrangements_singing_shows = factorial(5)\n    \n    # The total number of ways to arrange the shows is the product\n    # of the ways to place comedy shows and the arrangements of singing shows.\n    total_ways = ways_to_place_comedy * total_arrangements_singing_shows\n    \n    return total_ways\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    # Number of options for taking a train, a car, or a plane\n    trains = 4\n    cars = 3\n    flights = 2\n    \n    # Total number of different ways Mike can choose\n    ans = trains + cars + flights\n    return ans\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    recurring_sequence = '23456' * 420\n    digits_sum = sum(int(digit) for digit in recurring_sequence)\n\n    return digits_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_numbers = sorted(numbers)\n    middle_index = len(sorted_numbers) // 2\n    return sorted_numbers[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5*x + 7)/4, 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let x be the original number\n    # According to the problem, (x / 2) - 9 = 12\n    # We can rearrange the equation: x / 2 = 12 + 9\n    # So x = (12 + 9) * 2\n    x = (12 + 9) * 2\n    return x\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    chocolates = 0\n    for choco in range(41, 60):\n        if choco % 4 == 2 and choco % 6 == 2:\n            chocolates = choco\n            break\n    return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # For a circular arrangement, (n-1)! gives the distinct number of ways to arrange n people\n    # There are two empty seats, thus 6 people can be seated in 6! ways around the table\n    # However, because rotations of the table result in the same order,\n    # we must divide by the number of seats (8) to eliminate duplicates from rotations.\n    \n    ans = factorial(6) // 8\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n\n    min_even_4_digit_number = float('inf')\n    for even_digit in even_digits:\n        other_digits = [d for d in digits if d != even_digit]\n        for perm in permutations(other_digits):\n            num = int(str(perm[0]) + str(perm[1]) + str(perm[2]) + str(even_digit))\n            if num < min_even_4_digit_number:\n                min_even_4_digit_number = num\n\n    return min_even_4_digit_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let the number of steps of the escalator be x\n    # Let the speed of the escalator be s steps per second\n    # First scenario: Peter walks at 1 step per second and the escalator takes him up (x - 10) steps in 10 seconds\n    # Second scenario: Peter walks at 2 steps per second and the escalator takes him up (x - 16) steps in 8 seconds\n\n    # From the first scenario: 10s + 10 = x\n    # From the second scenario: 8s + 16 = x\n\n    # Equating the two expressions for x gives us two equations with two unknowns:\n    # 10s + 10 = 8s + 16\n    # Solving for s gives us:\n    s = (16 - 10) / (10 - 8)\n\n    # Substitute the value of s back into either equation to solve for x\n    x = 10 * s + 10\n\n    return int(x)\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    total_paid = 10 * 100  # Convert pounds to pence for consistency\n    total_change = 3.88 * 100  # Convert pounds to pence for consistency\n    chocolate_price = 72  # Price of chocolate bar in pence\n    balloon_price = 20  # Price of each balloon in pence\n\n    money_spent = total_paid - total_change  # Total money spent in pence\n    # Subtract the price of the chocolate bar to find the amount spent on balloons\n    money_spent_on_balloons = money_spent - chocolate_price\n    # Calculate the number of balloons by dividing the amount spent by the price of one balloon\n    number_of_balloons = money_spent_on_balloons // balloon_price\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45 / 100\n    total_length = 2000\n    length_part = percentage * total_length\n    return length_part\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n\n    number_of_kayaks = -(-students // kayak_capacity) # Ceiling division to get the minimum number of kayaks needed\n\n    return number_of_kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    money_spent_fraction = 2 / 9\n    money_spent = total_money * money_spent_fraction\n    remaining_money = total_money - money_spent\n\n    # Let the cost of one slice of pizza be p, and the cost of one cupcake be c.\n    # 3 slices of pizza cost as much as 2 cupcakes: 3p = 2c\n    # Mark bought 5 cupcakes and 6 slices of pizza: 5c + 6p = money_spent\n    # From 3p = 2c, we get p = (2/3)c\n    # Substitute p in the second equation: 5c + 6*(2/3)c = money_spent\n    # Solve for c: (5 + 4)c = money_spent, c = money_spent / 9\n\n    cost_per_cupcake = money_spent / 9\n    max_cupcakes = remaining_money // cost_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # The ages of the dwarfs form an arithmetic sequence\n    # Let's denote the ages of youngest three dwarfs as a, a+1, and a+2\n    # Given that a + (a + 1) + (a + 2) = 42\n    # We have 3a + 3 = 42\n    # Hence, a = (42 - 3) / 3 = 13\n    youngest_first_age = (42 - 3) // 3\n    \n    # The middle term in an arithmetic progression where the number of terms is odd\n    # is equal to the average of all the terms.\n    # Here we have 7 terms, hence the middle term is at position 4 (1-based indexing)\n    # The middle term is the age of the fourth dwarf, which is:\n    middle_age = youngest_first_age + 3\n\n    # The ages of the oldest three dwarfs are middle_age+1, middle_age+2, and middle_age+3\n    # Their total age is then (middle_age+1) + (middle_age+2) + (middle_age+3)\n    total_oldest_three_age = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n\n    return total_oldest_three_age\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        # Convert to string to check for distinct digits\n        num_str = str(i)\n        if len(set(num_str)) == len(num_str):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    count = 0\n    for i in range(1, 6):\n        number = int('2' + '5' * i)\n        root = int(number**0.5)\n        if root * root == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    for x in range(10):\n        if (10 - x) + (x * 3) == 16:\n            return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of parts that 6 workers can produce in 1 minute\n    parts_per_minute_for_6_workers = 120 / 4\n    \n    # Number of parts that 1 worker can produce in 1 minute\n    parts_per_minute_per_worker = parts_per_minute_for_6_workers / 6\n    \n    # Number of parts that 3 workers can produce in 1 minute\n    parts_per_minute_for_3_workers = parts_per_minute_per_worker * 3\n    \n    # Number of parts that 3 workers can produce in 10 minutes\n    total_parts_for_3_workers_in_10_minutes = parts_per_minute_for_3_workers * 10\n    \n    return total_parts_for_3_workers_in_10_minutes\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2240 to get the prime factors and their powers\n    factors = factorint(2240)\n    \n    # We need to find the divisor n such that 2240/n is a perfect square.\n    # A perfect square has even powers for all its prime factors.\n    # For every prime factor, if its power in 2240 is odd, we must multiply n by that prime factor.\n    # This will ensure that 2240/n leaves even powers for the factors, forming a perfect square.\n    n = 1\n    for factor, power in factors.items():\n        if power % 2 != 0:  # Check if the power is odd\n            n *= factor  # Multiply n by the factor to make the power even\n\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = total_pupils * 0.70\n    girls_swim = 200\n    boys_cannot_swim = total_pupils * 0.40\n    boys_swim = total_pupils - swim_pupils - boys_cannot_swim\n    total_girls = swim_pupils - boys_swim\n\n    return total_girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n    \n    total_apples = total_trees * apples_per_tree\n    non_rotten_apples = total_apples * (1 - rotten_ratio)\n    \n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n\n    increase = new - original\n    percentage_increase = (increase / original) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Quantity of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation for the mixture concentration\n    total_sugar = 4 * 0.30 + x * 0.10\n    total_volume = 4 + x\n    desired_concentration = 0.26\n\n    equation = Eq(total_sugar, desired_concentration * total_volume)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    # Calculate the original price before the first discount\n    original_price = 32 / (1 - 0.20)\n\n    # Calculate the price after the second discount\n    price_after_second_discount = 32 - 4\n\n    # Calculate the total discount from original price\n    total_discount = original_price - price_after_second_discount\n\n    # Calculate the total percentage discount\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let x be the mass of one chocolate and y be the mass of the empty jar.\n    # We have two equations based on the given information:\n    # 5x + y = 185  ---(1)\n    # 17x + y = 317 ---(2)\n    \n    # From equation (1) we get:\n    # y = 185 - 5x  ---(3)\n    \n    # Substituting y from equation (3) into equation (2) we get:\n    # 17x + (185 - 5x) = 317\n    \n    # Simplifying the above equation we get:\n    # 12x = 317 - 185\n    # x = (317 - 185) / 12\n    x = (317 - 185) / 12\n    \n    # Now calculate y using equation (3):\n    y = 185 - 5 * x\n    \n    # The mass of the jar with 10 chocolates will be:\n    # 10x + y\n    ans = 10 * x + y\n    return ans\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    n = 200\n    count = -1  # to subtract the case where 200 is not split\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    \n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # The field's perimeter is the total length along which wheat is planted\n    width = 144\n    length = 204\n    perimeter = 2 * (width + length)\n\n    # Since every corner is planted with wheat, we subtract 4 from the 116 wheat to account for corners\n    # Then we calculate the spaces between the remaining wheat plants\n    spaces = 116 - 4\n\n    # The distance between each 2 wheat is the perimeter divided by the number of spaces\n    distance_between_wheat = perimeter / spaces\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n\n    equation1 = Eq(lana + mark, 674)\n    equation2 = Eq(lana - lana/3, mark - 34)\n\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    difference = solutions[lana] - solutions[mark]\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_days = symbols('total_days')\n    # He spent half of his holiday working which leaves him with half.\n    # He then spends half of the remaining time (1/4 of total) reading and relaxing.\n    # After spending 4 days at a friend's house, he has 2 weeks (14 days) left for the camp.\n    # total_days / 2 (working) + total_days / 4 (relaxing) + 4 (friend's house) + 14 (camp) = total_days\n    equation = Eq(total_days / 2 + total_days / 4 + 4 + 14, total_days)\n    days = solve(equation, total_days)\n    return days[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # If one cat takes 10 minutes to catch a fish\n    # then 5 cats will also take 10 minutes to catch 5 fish (5 times more cats catching 5 times more fish)\n    return 10\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    # Subtract corners, since the wheat on corners wouldn't count towards the distance between them\n    perimeter_without_corners = perimeter - (4 * 1)  \n    # Minus 4 because we already have wheat at each corner\n    distance_between_wheat = perimeter_without_corners / (116 - 4)\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    # Create a variable to hold the result after operations\n    result = 81\n    \n    # Reverse the operations mentioned in the question\n    original_number = (result / 9) * 4 - 3\n    \n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder_after_morning\n    made_bracelets = morning_bracelets + afternoon_bracelets\n    bracelets_to_make = total_bracelets - made_bracelets\n    return bracelets_to_make\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n\n    ellie_work = ellie_rate * combined_weeks\n    remaining_people = total_people - ellie_work\n    gloria_rate = remaining_people / combined_weeks\n\n    gloria_weeks = total_people / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    # B and D are given.\n    B, D = 2, 0\n\n    # Find all permutations of the remaining digits for A, C, E, and F.\n    # Since B = 2 and D = 0 are given and each letter represents a distinct digit, we can remove these digits from the list.\n    possible_digits = [i for i in range(10) if i not in [B, D]]\n\n    for A, C, E, F in permutations(possible_digits, 4):\n        # Construct the original and multiplied numbers using the given B and D\n        original_number = A * 100000 + B * 10000 + C * 1000 + D * 100 + E * 10 + F\n        multiplied_number = E * 100000 + F * 10000 + A * 1000 + B * 100 + C * 10 + D\n\n        # Check the condition: 5 * original_number == 6 * multiplied_number\n        if 5 * original_number == 6 * multiplied_number:\n            # Construct the FACE number\n            face_number = F * 1000 + A * 100 + C * 10 + E\n            return face_number\n\n    return None\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3 / 8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Let x be the percentage of rice in dogfood B\n    # The total weight of the mixture is 15 + 60 = 75 pounds\n    # Total rice from A is 40% of 15 pounds, which is 0.40 * 15\n    rice_from_A = 0.40 * 15\n    # Total rice from B is x% of 60 pounds, which is (x/100) * 60\n    # Total rice in mixture is 28% of 75 pounds, which is 0.28 * 75\n    rice_in_mixture = 0.28 * 75\n    # Set up equation 0.40 * 15 + (x/100) * 60 = 0.28 * 75\n    # Solve for x percentage of rice in dogfood B\n    x = (rice_in_mixture - rice_from_A) / 0.60\n    return x\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the four numbers\n    a, b, c, d = symbols('a b c d')\n\n    # First equation: d + (a + b + c) / 3 = 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n\n    # Second equation: a + (b + c + d) / 3 = 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # Additional constraints: a,b,c,d are positive integers and a > b > c > d\n    # The largest possible value for a under these conditions occurs when b, c and d are as small as possible\n    # Hence, let b=c=d+1 and c=d+2, d=d (minimum possible values for distinct integers)\n    equation3 = Eq(b, c + 1)\n    equation4 = Eq(c, d + 1)\n\n    # Now solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, d))\n\n    # The largest possible value of the largest number is then\n    largest_number = max(solutions[a])\n\n    return largest_number\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    # Define the rate of water leakage per minute\n    rate_per_minute = 15  # in milliliters\n    \n    # Convert 2 hours to minutes\n    total_minutes = 2 * 60  # 2 hours in minutes\n    \n    # Calculate the total amount of water leaked in milliliters\n    total_milliliters = rate_per_minute * total_minutes\n    \n    # Convert milliliters to liters (1000 milliliters = 1 liter)\n    total_liters = total_milliliters / 1000\n    \n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Calculate the number of trees along the stretch of road, including both ends\n    ans = (road_length // tree_spacing) + 1\n\n    return ans\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for distances\n    distance = symbols('distance')\n\n    # Barbara's speed (in metres per minute)\n    barbara_speed = 60\n    # Catherine's speed (in metres per second)\n    catherine_speed = 45\n\n    # When Barbara reaches the shopping mall (distance), Catherine still has 60 metres to go\n    # Hence, Catherine would have walked (distance - 60) metres\n    # They started at the same time so the time taken for both of them is the same.\n    # Time = Distance / Speed must be equal for both\n\n    # Setting up the equation Barbara's_distance / Barbara's_speed = Catherine's_distance / Catherine's_speed\n    equation = Eq(distance / barbara_speed, (distance - 60) / catherine_speed)\n\n    # Solving the equation for distance\n    solutions = solve(equation, distance)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes_value = 2 * 10\n    five_dollar_notes_value = 5 * 5\n    twenty_cent_coins_value = 4 * 0.20\n    total_change = ten_dollar_notes_value + five_dollar_notes_value + twenty_cent_coins_value\n    money_spent = 100 - total_change\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total_money = 200\n\n    equation1 = Eq(A / B, 4 / 3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, total_money)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solutions = solve(equation, x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n\n    plates = total_time // time_per_plate\n\n    return plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nini, dad = symbols('nini dad')\n    \n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n    \n    solutions = solve((equation1, equation2), (nini, dad))\n    \n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for student in range(1, 51):\n        if student % 4 != 0 and student % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 / 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 / 9\n    \n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3/4\n    percentage = 30 / 100\n    number = 120\n\n    ans = fraction * percentage * number\n\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Given that at least one student gets at least 3 apples,\n    # we can \"pre-distribute\" those 3 apples to 1 student\n    remaining_apples = 29 - 3\n    \n    # Once 3 apples are given out, the remaining apples can be distributed freely among the students\n    # Each student can get at least 1 apple and the order of distribution doesn't matter\n    # This is a stars and bars combinatorial problem, where we are placing 'remaining_apples' indistinguishably\n    # into 'n' distinguishable bins (students)\n    \n    # n + remaining_apples = 29\n    # n = 29 - remaining_apples, because we already know we have at least 1 student with 3 apples\n    # This will give us the minimum amount of students in the class\n    # Each student can get from 0 to all the remaining apples but one student already took 3\n    # So we calculate how many students can get at least 1 apple from the remaining.\n    # Every student in class could have received 1 apple before giving 3 to one\n    # and splitting remaining ones, hence the class size is remaining_apples + 1\n\n    class_size = remaining_apples + 1\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(10, 100):\n        if isprime(i):\n            reverse_i = int(str(i)[::-1])\n            if i != reverse_i and isprime(reverse_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    \n    percent_change = ((new_value - original_value) / original_value) * 100\n    \n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    # After removing 2/5 of the blue balls and 28 green balls, green and blue are equal\n    equation = Eq(green - 28, blue - (2 / 5) * blue)\n\n    # The total number of green and blue balls was 140\n    total_balls_equation = Eq(green + blue, 140)\n\n    solutions = solve((equation, total_balls_equation), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since there are only three bars, and the alcoholic is not at two of them,\n    # the probability that the alcoholic is at the third bar is 100% (or 1 as a decimal).\n    \n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Eliot's current age and his cousin's current age\n    eliot, cousin = symbols('eliot cousin')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(eliot, 2 * cousin)              # Eliot is now twice his cousin's age\n    equation2 = Eq(eliot + 4, 16)                  # In 4 years, Eliot will be 16\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # Calculate the cousin's age in 4 years\n    cousin_age_in_4_years = solutions[cousin] + 4\n\n    return cousin_age_in_4_years\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_first_catch = 100\n    caught_fish_second_catch = 100\n    marked_fish_second_catch = 16\n\n    estimated_total_fish = (marked_fish_first_catch * caught_fish_second_catch) / marked_fish_second_catch\n    \n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let x be the distance that Nancy walks\n    # Randy walks 10 meters more than Nancy, so he walks x + 10 meters\n    # Their speeds are in the ratio 2:3, so we set up the following equation based on their ratios:\n    # 2/5 * total_distance = x (because Nancy walks 2 parts out of 2+3=5 total parts)\n    # 3/5 * total_distance = x + 10 (Randy walks 3 parts out of 5 and also walks 10 more meters)\n\n    # Now we can solve for x:\n    # 2/5 * total_distance = x\n    # 3/5 * total_distance = x + 10\n    # Subtracting these equations gives us:\n    # (3/5 - 2/5) * total_distance = 10\n    # 1/5 * total_distance = 10\n    # total_distance = 10 * 5\n    total_distance = 10 * 5\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = 12 - elaine_current_age\n\n    mandy_age_when_elaine_is_12 = mandy_current_age + age_difference\n\n    return mandy_age_when_elaine_is_12\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = (1 * 99 + 3) / 99\n    num2 = (3 * 33 + 3) / 33\n    num3 = (9 * 11 + 3) / 11\n    den1 = (1 * 99 + 1) / 99\n    den2 = (3 * 33 + 1) / 33\n    den3 = (9 * 11 + 1) / 11\n\n    # Calculate the numerator and the denominator\n    numerator = num1 + num2 + num3\n    denominator = den1 + den2 + den3\n\n    # Divide numerator by denominator\n    return numerator / denominator\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    x = symbols('x')\n    recurring_fraction = 0.2014 + 14/9900 / (1 - 1/100)\n    equation = Eq(x/9900, recurring_fraction)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles Ali, Bronson, and Charlie have\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Create the equations from the problem statement\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    # Use the two equations to solve for Ali and Bronson's marbles\n    solutions = solve((equation1, equation2), (ali, bronson))\n\n    # Calculate Charlie's number of marbles\n    ali_marbles = solutions[ali]\n    bronson_marbles = solutions[bronson]\n    charlie_marbles = 2*ali_marbles + 5  # From rearranging equation1\n\n    return charlie_marbles\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2): # even numbers end in 0, 2, 4, 6, or 8\n                if hundreds + tens + units == 8 and len({hundreds, tens, units}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(100000, 1000000):\n        if i % 10 == 2:  # Check for a 2 in the units column\n            new_number = int(\"2\" + str(i)[:-1])  # Remove the 2 and place it at the beginning\n            if new_number == i // 3:  # Check if the new number is one-third of the original number\n                return i  # Original six-digit number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    pass_both_exams = (pass_first_exam - pass_second_fail_first)\n    pass_only_first_exam = total_students - fail_second_exam - pass_both_exams\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 500:\n        num += 5 * 8 * 9\n  \n    return num\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n    remainder = total_cereal_bars % people\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit will appear in each place value (hundreds, tens, ones) twice.\n    # Since we are summing them, we consider the place value contribution by multiplying by the position value. \n    # For hundreds place: 100 * 2 * (a + b + c) \n    # For tens place: 10 * 2 * (a + b + c)\n    # For ones place: 1 * 2 * (a + b + c)\n    # Summing up the contributions for all place values we get:\n    sum_of_all_numbers = 2 * (a + b + c) * (100 + 10 + 1)\n\n    return sum_of_all_numbers\n    \na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            number = 10*a + b\n            reverse_number = 10*b + a\n            product = number * reverse_number\n            if product % 100 == 0:\n                return number\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n    \n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Equation 1: Total number of oranges and apples\n    equation1 = Eq(oranges + apples, 125)\n\n    # Equation 2: after selling half apples and 35 oranges, there's equal number\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5/9\n    ans = round(fraction, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    least_5_digit_palindrome = int(\"10001\")\n    greatest_6_digit_palindrome = int(\"999999\")\n    \n    return greatest_6_digit_palindrome - least_5_digit_palindrome\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = (students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for number in range(1, 59):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Initialize count of total digits from 1200 to 1\n    digit_count = 0\n    # Count how many digits in each number from 1200 to 1 and accumulate\n    for number in range(1200, 0, -1):\n        # Stop when we have included the 2011th digit from the right\n        if digit_count >= 2011:\n            break\n        # Add the number of digits of the current number\n        digit_count += len(str(number))\n    \n    # Calculate how many digits have exceeded 2011 \n    # to find the actual number containing the 2011th digit from the right\n    digits_exceeded = digit_count - 2011\n    # The actual number containing the 2011th digit is one step back\n    # since we stopped right after including the 2011th digit\n    containing_number = (number + 1)\n    # Find the exact digit by using string indexing\n    ans = str(containing_number)[digits_exceeded]\n\n    return int(ans)\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n\n    number_of_coins = solve(equation, x)\n\n    return number_of_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_multiple = 50 // 5 * 5\n    first_multiple = 5\n    number_of_multiples = (last_multiple - first_multiple) / 5 + 1\n    sum_multiples = number_of_multiples * (first_multiple + last_multiple) / 2\n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes\n\n    distance_apart = (speed_planet1 + speed_planet2) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c and the number of motorbikes be m\n    # Each car has 4 tyres and each motorbike has 2 tyres\n    # Total vehicles (cars + motorbikes) = 140\n    # Total tyres (4 tyres per car + 2 tyres per motorbike) = 490\n\n    # The system of equations can be written as:\n    # c + m = 140 (equation for total vehicles)\n    # 4c + 2m = 490 (equation for total tyres)\n\n    # Rearrange the second equation to isolate m:\n    # 2c + m = 245 -> m = 245 - 2c (half the number of tyres to align with motorbikes)\n\n    # Substitute the value of m from the second to the first equation\n    # c + 245 - 2c = 140\n    # Simplify: -c = 140 - 245\n    # c = 245 - 140\n\n    c = 245 - 140\n\n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    tens_place_options = 5  # Since we can't use 0 in the tens place for two-digit numbers\n    ones_place_options = 6  # Any of the 6 digits can be used in the ones place\n\n    total_combinations = tens_place_options * ones_place_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_ratio = 4\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol for the unknown divisor\n    divisor = symbols('divisor', integer=True)\n    a = symbols('a', integer=True)\n\n    # Set up the equations based on the congruence conditions\n    eq1 = Eq(190 % divisor, a)\n    eq2 = Eq(137 % divisor, a + 4)\n    eq3 = Eq(101 % divisor, a + 6)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (divisor, a))\n\n    # Since we expect multiple solutions but only one with positive integers, filter out the valid one\n    valid_solution = next(sol for sol in solutions if sol[0] > 0 and sol[1] >= 0)\n\n    # Get the remainder when 299 is divided by the calculated divisor\n    remainder = 299 % valid_solution[0]\n    \n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    return round(8.765, 1)\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kilograms = 960\n    per_box_kilograms = 8\n\n    num_boxes = total_kilograms // per_box_kilograms\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(2 * number + 12, 26)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_progress = 3\n    night_regress = 1\n    net_progress = day_progress - night_regress\n    days = 0\n    distance_covered = 0\n    \n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_progress\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_regress\n\n    return days\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n    total_donation = classes * students_per_class * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    max_sum = 0\n    for x in range(2, 200):  # x is a prime number less than 200\n        if isprime(x):\n            y = 200 - x * 2  # Derived from the given equation x(2+y) = 200+y\n            if y > 1 and isprime(y) and x != y:  # Ensure y is a prime number and different from x\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total = factorial(6)\n    repeated_2 = factorial(2)\n    repeated_3 = factorial(2)\n    ans = total // (repeated_2 * repeated_3)\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Since 2p is one-quarter of Bud's money, let's represent Bud's total money as 'x'\n    # So, one-quarter of Bud's money is x / 4\n    # According to the question, one-quarter of Bud's money is 2p\n    # Therefore, x / 4 = 2p\n    # Solving for x gives us Bud's total money\n\n    # Given:\n    one_quarter_of_money = 2  # 2p (in pence)\n    \n    # Calculate the total money (x)\n    total_money = one_quarter_of_money * 4  # since (x / 4) = 2, then x = 2 * 4\n\n    return total_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the heights of the dwarfs\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Create the system of equations based on the information given\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(doc + sleepy, dopey + sneezy)\n    equation7 = Eq(sleepy, 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    rounds_played = (num_teams * (num_teams - 1)) // 2\n    return rounds_played\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(31, 6) + Fraction(31, 5)) / (Fraction(1, 6) + Fraction(1, 5))\n    ans = result\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    ans = (7/9) * 27\n    return ans\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_numbers = sorted([''.join(p) for p in permutations(digits)])\n    return int(all_numbers[4])\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_for_5_hours = 5\n    time_for_3_hours = 3\n\n    speed = distance_in_5_hours / time_for_5_hours\n    distance_in_3_hours = speed * time_for_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_apart = 5\n    road_length = (number_of_trees - 1) * distance_apart\n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle = symbols('triangle')\n    \n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula:\n    # sum = (n / 2) * (first_term + last_term)\n    # where n is the number of terms.\n\n    # The sequence starts at 12 and ends at 90, and we can calculate the number of terms by:\n    # n = (last_term - first_term) / difference + 1\n    first_term = 12\n    last_term = 90\n    difference = 1  # Since the sequence goes up by 1 each time\n\n    n = (last_term - first_term) // difference + 1 \n\n    # Now calculate the sum using the formula\n    sum_seq = (n / 2) * (first_term + last_term)\n\n    # A number is even if it is divisible by 2, odd otherwise.\n    # However, since n/2 is multiplied by an even number (first_term + last_term),\n    # the sum_seq will essentially be an even number.\n\n    # This is because the result of (first_term + last_term) will always be even as\n    # both first_term and last_term are consecutive integers, one of which is always even.\n    # So an even number times anything will always be even.\n\n    return 'even' if sum_seq % 2 == 0 else 'odd'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Suppose the numbers on the hats are A, B and C respectively\n    # A + B = 11\n    # B + C = 17\n    # A + C = 22\n    \n    # Solve the system of equations\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 11)\n    equation2 = Eq(B + C, 17)\n    equation3 = Eq(A + C, 22)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    A_value, B_value, C_value = solutions[A], solutions[B], solutions[C]\n    \n    # Find the largest number\n    largest_number = max(A_value, B_value, C_value)\n\n    return largest_number\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n    for i in range(2, 10):\n        result *= Fraction(i, i+1)\n    return result.numerator / result.denominator\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(20):\n        if isprime(i):\n            if isprime(i + 6) or isprime(i - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Andy drives for 90 minutes, which is equivalent to 1.5 hours.\n    # Let's convert the distances covered in each 30 minutes into hours by dividing by 2\n    # first 30 minutes: 0.5 * x miles\n    # second 30 minutes: 0.5 * (x-20) miles\n    # last 30 minutes: 0.5 * (x+10) miles\n    # The sum of these distances should be 70 miles.\n\n    equation = Eq(0.5 * x + 0.5 * (x - 20) + 0.5 * (x + 10), 70)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n    \n    # Digits for pages 1-9 (1 digit each)\n    if pages > 9:\n        digits += 9\n    else:\n        digits += pages\n        return digits\n\n    # Digits for pages 10-99 (2 digits each)\n    if pages > 99:\n        digits += (99 - 9) * 2\n    else:\n        digits += (pages - 9) * 2\n        return digits\n\n    # Digits for pages 100-345 (3 digits each)\n    digits += (pages - 99) * 3\n    \n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    buses_needed = (total_people + max_per_bus - 1) // max_per_bus\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    denise_singles = (1/5) * total_prize\n    denise_doubles = (1/15) * total_prize\n    total_denise = 360\n\n    equation = Eq(denise_singles + denise_doubles, total_denise)\n\n    solved_value = solve(equation, total_prize)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Since the coach has to stand in the middle, this position is fixed\n    # There are 2 positions next to the coach where the captain can stand (left or right)\n    captain_positions = 2\n\n    # For the remaining 5 positions, we can arrange the 5 players in any order\n    # This is a permutation of 5 items (5!)\n    player_permutations = factorial(5)\n\n    # Use the principle of multiplication to find the total number of line ups\n    total_ways = captain_positions * player_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let n be the length of the outermost layer.\n    # If n is odd, then there are (n^2 + 1)/2 boys and (n^2 - 1)/2 girls\n    # If n is even, then there are n^2/2 boys and (n^2/2 - 1) girls\n    # The difference between the number of boys and girls is always 1, hence the number of boys can't be 20 more than the number of girls if n is even.\n\n    # We only consider the case where n is odd:\n    # (n^2 + 1)/2 - (n^2 - 1)/2 = 20\n    # n^2 = 39\n    # n = 7 (since the square root of 39 is not an integer and we need n to be the side of the square)\n    # The total number of students = n^2\n    n = 7\n    total_students = n ** 2\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    # Let's assume the number of penguins is p.\n    for p in range(1, 100):  # Reasonable bound for the number of penguins.\n        total_fish_when_3_each = 3 * p + 25  # Total fish when giving 3 fish to each penguin.\n        total_fish_when_6_each = 6 * (p - 1) + 1  # Total fish when giving 6 fish to each, except for one.\n        # If the number of fish is the same in both scenarios, we found the answer.\n        if total_fish_when_3_each == total_fish_when_6_each:\n            return p\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    total_sum = 0\n    current_number = 1\n    current_count = 1\n    \n    for i in range(1, 31):\n        total_sum += current_number\n        current_count -= 1\n        \n        if current_count == 0:\n            current_number += 1\n            current_count = current_number\n    \n    return total_sum\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    return 0.25 * 20 + (1/5) * 30 + (2/3) * 18\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    votes_cindy = 47\n    votes_others = total_votes - votes_cindy  # Votes for Alice and Betty and any other students\n    votes_needed_for_majority = (votes_others // 2) + 1  # Equivalent to half the other votes plus one\n    \n    if votes_cindy >= votes_needed_for_majority:\n        return 0  # Cindy already has the majority\n    else:\n        return votes_needed_for_majority - votes_cindy  # Additional votes needed\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol declaration for Chelsia's and Brian's money\n    c, b = symbols('c b')\n\n    # setting up the equation based on the problem statement\n    equation1 = Eq(3/4 * c, 5/6 * b)\n    equation2 = Eq(c, b + 24)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    # summing Chelsia's and Brian's money to get the total\n    total_money = solutions[c] + solutions[b]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina is 50 years old on 10th May 2005\n    gina_age_2005 = 50\n    # Thus, Gina was born in 2005 - 50 = 1955\n\n    # James is 20 years old on 10th May 1997\n    james_age_1997 = 20\n    # Thus, James was born in 1997 - 20 = 1977\n    \n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = 1977 - 1955\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    desired_salary = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    sales_partition = 25000\n    commission_2_sales = sales_partition * commission_1_rate\n\n    extra_salary_needed = desired_salary - base_salary\n    if extra_salary_needed <= commission_2_sales:\n        sales = extra_salary_needed / commission_1_rate\n    else:\n        extra_commission_needed = extra_salary_needed - commission_2_sales\n        sales_over_partition = extra_commission_needed / commission_2_rate\n        sales = sales_partition + sales_over_partition\n    \n    return sales\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    import fractions\n    # Evaluate the first term: 7 / (-3.333...)\n    # -3.333... can be represented as -10/3\n    first_term_numerator = 7\n    first_term_denominator = fractions.Fraction(-10, 3)\n    first_term = first_term_numerator / first_term_denominator\n\n    # Evaluate the second term: cube root of -0.027\n    # -0.027 is (-3/1000) which is (-1/1000) * 27, so its cube root is -1/10\n    second_term = -1 / 10\n\n    # Evaluate the first fraction\n    first_fraction = first_term / second_term\n\n    # Evaluate the third term: 2^3 / 4^2\n    third_term_numerator = 2**3\n    third_term_denominator = 4**2\n    third_term = third_term_numerator / third_term_denominator\n\n    # Evaluate the fourth term: 0.125 * [1.8 - (0.2*7)]\n    fourth_term_multiplier = 0.125\n    fourth_term_expression = 1.8 - (0.2 * 7)\n    fourth_term = fourth_term_multiplier * fourth_term_expression\n\n    # Evaluate the second fraction\n    second_fraction = third_term / fourth_term\n\n    # Evaluate the fifth term: 0.1 / 0.142857...\n    # 0.142857... can be represented as 1/7\n    fifth_term_numerator = 0.1\n    fifth_term_denominator = fractions.Fraction(1, 7)\n    fifth_term = fifth_term_numerator / fifth_term_denominator\n\n    # Evaluate the sixth term: 2 * 0.3\n    sixth_term = 2 * 0.3\n\n    # Bracketed expression\n    bracketed_expression = fifth_term + sixth_term\n\n    # Final result\n    ans = first_fraction + second_fraction - bracketed_expression\n\n    return ans\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    r, a = symbols('r a')  # r for Ryan, a for Audrey\n    # Original ratio equation: 7r = 2a\n    equation1 = Eq(7*r, 2*a)\n    # New ratio after transactions equation: 3(r + 20) = a - 80\n    equation2 = Eq(3*(r + 20), a - 80)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    # Return the number of marbles Audrey had originally\n    return solutions[a]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Total height of six players\n    total_height_six = 6 * 150\n\n    # Average height of four players is 2 cm lower than the average of the team\n    average_height_four = 150 - 2\n    \n    # Total height of four players\n    total_height_four = 4 * average_height_four\n\n    # Total height of the remaining two players\n    total_height_two = total_height_six - total_height_four\n\n    # Average height of the remaining two players\n    average_height_two = total_height_two / 2\n\n    return average_height_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing the test on the first attempt\n    p1 = 0.4\n    \n    # Probability of failing the first test but passing on the second attempt\n    p2 = (1 - p1) * 0.5\n    \n    # Probability of failing the first two tests but passing on the third attempt\n    p3 = (1 - p1) * (1 - 0.5) * 0.3\n    \n    # Total probability of passing before the fourth attempt\n    total_p = p1 + p2 + p3\n    \n    return total_p\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    page = 0\n    while digits > 0:\n        page += 1\n        digits -= len(str(page))\n    return page\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    difference = -1\n\n    last_term = first_term + (num_terms - 1) * difference\n\n    sum_of_terms = (first_term + last_term) * num_terms // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age = symbols('age')\n    equation = Eq((age / 4) + 32, age - 22)\n    solution = solve(equation, age)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n\n    for layer in range(1, 100): # Assuming a reasonable upper limit for layers\n        boys = (layer * 2 + 1)**2 - (layer * 2 - 1)**2\n        girls = (layer * 2 - 1)**2 - (layer * 2 - 3)**2 if layer > 1 else 1\n        \n        if boys - girls == boys_more_than_girls:\n            total_students = (layer * 2 + 1)**2\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climb = 7 * 5 + 3  # The snail's progress for the first 6 days\n    remaining_distance = 18 - total_climb\n    slide_down = 7 - remaining_distance  # The snail reaches the top on the 7th day, so it climbs only the remaining distance\n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # The maximum number of apples the second student can get is when the first student\n    # gets the minimum (1 apple), and the third and fourth students get 1 more apple each \n    # than the second student. To maximize the apples for the second student, \n    # we find the largest number that allows for increasing numbers for the other three.\n    total_apples = 48\n    for second_student_apples in range(total_apples // 4, 0, -1):\n        # Assign apples to the other three based on the condition\n        first_student_apples = 1\n        third_student_apples = second_student_apples + 1\n        fourth_student_apples = second_student_apples + 2\n        if (first_student_apples + second_student_apples +\n            third_student_apples + fourth_student_apples) == total_apples:\n            return second_student_apples\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Fastest and second fastest go together first\n    time = 1 + 2  # Eddie and Jack cross together (2 minutes)\n    \n    # Fastest goes back\n    time += 1  # Eddie returns with the flashlight (1 minute)\n    \n    # Slowest and third fastest go together\n    time += 10 # Mary and Rose cross together (10 minutes)\n    \n    # Second fastest goes back\n    time += 2  # Jack returns with the flashlight (2 minutes)\n    \n    # Fastest and second fastest go together again\n    time += 2  # Eddie and Jack cross together (2 minutes)\n    \n    return time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length of the rectangle be l\n    # Let the original width of the rectangle be w\n    # Increase the length by 12 cm: l + 12\n    # The perimeter of the new rectangle is 38 cm: 2 * (l + 12) + 2 * w = 38\n    # The perimeter of the original rectangle is: P_original = 2 * l + 2 * w\n\n    # Simplifying the perimeter of the new rectangle: 2 * l + 2 * w + 24 = 38\n    # Subtract 24 from both sides to get the perimeter of the original rectangle: P_original = 38 - 24\n    \n    P_original = 38 - 24\n\n    return P_original\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2 ** 19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    number_of_students = 4\n    ans = factorial(number_of_students)\n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are 3 choices for the first day: chocolate (C), peaches (P), strawberries (S)\n    # But given that Jenny eats chocolate on the first day, we only care about the cases starting with C.\n\n    # For the second day, Jenny has only 2 choices because she cannot eat the food she ate on the first day.\n    # So if she eats chocolate (C) on the first day, she can only eat peaches (P) or strawberries (S) on the second day.\n\n    # For the third day, Jenny again has 2 choices. She cannot eat the same food as the second day,\n    # and since the first day's food was chocolate, it's not a constraint here.\n\n    # Combining these choices, we can calculate the total as:\n    # Total number of ways = Choices for second day * Choices for third day\n\n    total_ways = 2 * 2  # Second day choices * Third day choices\n    return total_ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    total = 8\n    count = 0\n    for i in range(1, total // 2 + 1):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Let the total salary be x dollars\n    from fractions import Fraction\n\n    x = symbols('x')\n\n    # Almaz spent 5/9 of her salary on a television\n    tv_cost = Fraction(5, 9) * x\n\n    # She spent 3/4 of the remainder on a table\n    table_cost = Fraction(3, 4) * (x - tv_cost)\n\n    # She had $160 left\n    remaining_money = x - tv_cost - table_cost\n\n    # Set up the equation and solve it\n    equation = Eq(remaining_money, 160)\n    total_salary = solve(equation, x)\n\n    # Calculate the cost of the television\n    tv_cost_value = Fraction(5, 9) * total_salary[0]\n\n    return tv_cost_value\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # There are 7 people to arrange and 8-1=7 positions to fill (circular table)\n    # so the arrangement is (7-1)! because rotating one full cycle doesn't change the order\n    num_orders = factorial(7 - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5 / 3)\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    john, emma = symbols('john emma')\n\n    # Equations according to the problem statement\n    equation1 = Eq(john + emma + 2 * 3, 27)   # In 3 years, the sum of their ages will be 27\n    equation2 = Eq(emma, john - emma)         # Emma's age is the difference between her own and John's ages\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Define the speed of Tom and Jack\n    speed_tom = 48  # km per hour\n    speed_jack = 50  # km per hour\n\n    # Calculate the distance Tom travels in the extra 3 hours\n    extra_time_tom = 3  # hours\n    extra_distance_tom = speed_tom * extra_time_tom\n\n    # Calculate the total time Jack is traveling when they are 15km apart\n    total_time_jack = 5  # hours since Jack stated\n    total_distance_jack = speed_jack * total_time_jack\n\n    # Tom also travels 5 hours before they are 15 km apart\n    total_distance_tom = speed_tom * (extra_time_tom + total_time_jack)\n\n    # Total distance between A and B when they are 15km apart\n    total_distance_AB_apart = total_distance_tom + total_distance_jack + 15\n\n    return total_distance_AB_apart\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Angle for water is given\n    angle_water = 36\n\n    # Total angle for a pie chart is 360 degrees\n    total_angle = 360\n\n    # Fraction of the pie chart for water section\n    fraction_water = angle_water / total_angle\n\n    # Number of people who chose tea is 1/4 of the total people\n    fraction_tea = 1 / 4\n    \n    # Number of people who chose cola is 30% of the total people\n    fraction_cola = 0.30\n\n    # Find the fraction for coffee as well, which is 7 people\n    # But we don't have number of people yet, so we can represent them as a fraction of total for now\n    # Let x be the total number of people who took the survey\n    # Then, the fraction for coffee is 7 / x\n\n    # Now we know that all the fractions should add up to 1 (total survey)\n    # So, fraction_tea + fraction_coffee + fraction_cola + fraction_water = 1\n    # Replacing the values we have\n    # (1/4) + (7/x) + (0.30) + fraction_water = 1\n    \n    # We can now solve the equation for x using the fractions\n    # x = Number of people who took the survey\n    x = 7 / (1 - (fraction_tea + fraction_cola + fraction_water))\n\n    return round(x)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n    # Each child has 2 legs, each dog has 4 legs.\n    total_legs = Eq(children * 2 + dogs * 4, 56)\n    # There are 3 times as many dogs as children.\n    dog_child_ratio = Eq(dogs, 3 * children)\n\n    solutions = solve((total_legs, dog_child_ratio), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    return (26 + 4) // 5\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    fraction_present = 1 - 2/5\n    total_pupils = present_pupils / fraction_present\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_in_week = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * days_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate the number of trees on each side, subtract one tree for each corner\n    # because it's counted on both sides. Then multiply by 2 for both pairs of sides.\n    trees_on_length = (length // spacing) - 1\n    trees_on_width = (width // spacing) - 1\n    total_trees = 2 * (trees_on_length + trees_on_width) + 4  # Add the 4 corner trees\n\n    return total_trees\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_rate = 3 / 100\n    tax_amount = initial_income * tax_rate\n    final_income = initial_income - tax_amount\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n    num_children = 0\n\n    # At least two adults in the party\n    for num_adults in range(2, total_charge // adult_price + 1):\n        if (total_charge - num_adults * adult_price) % child_price == 0:\n            num_children = (total_charge - num_adults * adult_price) // child_price\n            break\n\n    return num_children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):  # Looping through possible digits for tens place and beyond\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    orange_squash = 750\n    total_parts = 1 + 9\n    ml_per_part = orange_squash / 1\n    total_ml = ml_per_part * total_parts\n    litre_per_bottle = 1000\n    full_bottles = total_ml // litre_per_bottle\n    \n    return int(full_bottles)\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36  # Katie's height in meters\n    height_cm = height_m * 100  # Convert meters to centimeters\n    ans = height_cm\n    return ans\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculate each term modulo 100 to find the last two digits\n    term1 = 6**2015 % 100\n    term2 = (2015 * 6) % 100\n    term3 = 2015**6 % 100\n    \n    # Sum the terms modulo 100 to find the last two digits of the total\n    ans = (term1 + term2 + term3) % 100\n    \n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    for A in range(10):\n        for E in range(10):\n            for F in range(10):\n                for C in range(10):\n                    if len({A, B, C, D, E, F}) == 6:\n                        num1 = int(f\"{A}{2}{C}{0}{E}{F}\")\n                        num2 = int(f\"{E}{F}{A}{2}{0}{C}\")\n                        if 5 * num1 == 6 * num2:\n                            return int(f\"{F}{A}{C}{E}\")\n\nB = 2\nD = 0\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    # The remainder of 221 divided by 7\n    remainder_base = base % divisor\n\n    # Using Fermat's little theorem, for a prime p, a^(p-1) congruent to 1 (mod p)\n    # since 7 is prime, we can simplify 221^2020 mod 7 to (221 mod 7)^2020 mod 7\n\n    # Calculate the remainder by raising remainder_base to the power of exponent modulo divisor\n    ans = pow(remainder_base, exponent, divisor)\n    \n    return ans\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    ans = (180 / (0.6 * 100))\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Let's check Thomas's solution mathematically using Python\n\n    # According to Thomas's solution:\n    # cost_of_book_and_bag = 132\n    # one_unit = cost_of_book_and_bag / 5\n    one_unit = 132 / 5\n\n    # total_money_according_to_thomas = one_unit * 6\n    total_money_according_to_thomas = one_unit * 6\n\n    # Calculate the correct answer\n    # Let x be the total money Li Yan had at first.\n    # She spent 1/3 on the book, so she has 2/3 left.\n    # Then she spent 1/2 of the remainder (2/3) on the bag, so she spent another (1/2)*(2/3) = 1/3 of the total.\n    # This means she spent a total of 1/3 (book) + 1/3 (bag) = 2/3 of the total money on both.\n\n    # Let cost_of_both = book + bag = 132\n    # Hence, 2/3 of the total money (x) is equal to the cost_of_both.\n    cost_of_both = 132\n    # So, 2/3 * x = cost_of_both\n    # Hence, x = (3/2) * cost_of_both\n    total_money = (3 / 2) * cost_of_both\n\n    # Now let's compare Thomas's answer with the correct answer.\n    return total_money == total_money_according_to_thomas, total_money\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # The first 5 factors of the number are already given: 1, 2, 4, 7, and 8.\n    # Since 7 is a factor and is a prime number, it must be one of the prime factors\n    # of the number. Moreover, because 8 is a factor, which is 2^3,\n    # the number must be at least 7 * 8 = 56.\n\n    # We look for a number with exactly 8 factors. The 6th factor (if we ignore the \n    # number itself and 1) must be a multiple of 2 or 7, greater than 8 and not a prime.\n    # The smallest number that fits this description, assuming 7 is a prime factor, would be 14 (7*2).\n\n    # The remaining factors must include the number itself and 56 (7*8), given from above. \n    # Since we already have 7 factors (1, 2, 4, 7, 8, 14, and 56), the eighth factor must be the\n    # number itself, which means it must be a perfect square (since we have 4, an even power of 2).\n\n    # The square root of 56 doesn't give an integer, so we look for the next perfect square that is\n    # greater than 56 and has 7 as a factor. This leads us to 7^2 = 49, but 49 only has 3 factors (1, 7, 49).\n    # The next candidate is 7 * 8^2 = 7 * 64 = 448, which is a perfect square times 7.\n\n    # We can verify this by listing the factors of 448 and ensuring there are 8 of them (including 1 and itself).\n    candidate = 7 * 8 ** 2\n    factors = set()\n    for i in range(1, int(candidate**0.5) + 1):\n        if candidate % i == 0:\n            factors.add(i)\n            factors.add(candidate // i)\n    if len(factors) == 8:\n        return candidate\n    else:\n        return None\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 10 / 100 * original_price  # calculating the discount amount\n    sale_price = original_price - discount  # subtracting discount from the original price\n    \n    return sale_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, goats = symbols('total_animals goats')\n\n    # 65% of the animals are cows, so 35% are goats.\n    equation1 = Eq(goats, 0.35 * total_animals)\n\n    # After adding 240 animals, cows become 85% of the total.\n    # The number of goats has doubled, so it's now 2 * goats.\n    equation2 = Eq(0.85 * (total_animals + 240), total_animals * 0.65 + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_in_box, cookies_sold_second_month = symbols('cookies_in_box cookies_sold_second_month')\n\n    # Sold 7/20 more in the second month than 1680\n    equation1 = Eq(cookies_sold_second_month, 1680 + (7/20) * 1680)\n\n    # Kept 3/20 less\n    equation2 = Eq(cookies_in_box - cookies_sold_second_month, (cookies_in_box - 1680) - (3/20) * cookies_in_box)\n\n    solutions = solve((equation1, equation2), (cookies_in_box, cookies_sold_second_month))\n\n    return solutions[cookies_in_box]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # According to the problem, considering Jolene's position (6th from front),\n    # and Amy's position being directly behind Jolene (so 7th from front), but also 8th from back,\n    # we can set up the equation: 7 (Amy's position from front) + 8 (Amy's position from back) - 1 = total children in queue\n    # We subtract 1 because we've counted Amy twice.\n    total_children = 7 + 8 - 1\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    # Initialize the height of the tree and the height the monkey climbs\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_required = 0\n    current_height = 0\n\n    # Loop until the monkey reaches or exceeds the height of the tree\n    while current_height < total_height:\n        # Monkey jumps up\n        current_height += jump_up\n        jumps_required += 1\n\n        # Check if the monkey has reached the top\n        if current_height >= total_height:\n            break\n\n        # Every 2 jumps, the monkey slides down\n        if jumps_required % 2 == 0:\n            current_height -= slide_down\n\n    return jumps_required\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    x = 1\n    while True:\n        if x % 5 == 1 and x % 6 == 2 and x % 11 == 9:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432  # length of each side of the pentagon\n    distance_apart = 4  # distance between each sunflower\n\n    # Total perimeter of the garden is 5 times the side length\n    perimeter = 5 * side_length\n    \n    # Sunflowers are planted 4 meters apart, excluding the corners\n    # Calculate the number of sunflowers on the edges, without corners\n    sunflowers_on_edges = (perimeter - 5 * distance_apart) // distance_apart\n    \n    # Adding the sunflowers at the 5 corners\n    total_sunflowers = sunflowers_on_edges + 5\n    \n    return int(total_sunflowers)\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # 3 pounds in pence\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2\n\n    trips_required = (adventurers - 1) // (capacity - 1)\n    total_time = (trips_required * 2) - 1  # Subtract 1 since no return trip is needed on the last trip\n\n    return total_time * trip_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    usual_speed = 45\n    reduced_speed = 30\n    delay = 2\n\n    # Distance is the same, so time * speed at usual speed is equal to (time + delay) * reduced speed\n    equation = Eq(usual_speed * t, reduced_speed * (t + delay))\n\n    usual_time = solve(equation, t)\n\n    return usual_time[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    ans = 58 * 36\n    return ans\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (976 * 10 + digit * 1 + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate sum of the series from 3 to 10\n    sum_forward = sum(range(3, 11))\n    \n    # Since the series is symmetric (forward and backward), the total sum\n    # is twice the sum from 3 to 10, minus the middle number (10) to avoid counting it twice\n    total_sum = 2 * sum_forward - 10\n    \n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partition(number):\n        answer = 0\n        p = [0] * (number + 1)\n        p[0] = 1  # There is one way to partition 0\n\n        # Fill the partitions table\n        for i in range(1, number + 1):\n            for j in range(i, number + 1):\n                p[j] += p[j - i]\n\n        answer = p[number]\n        return answer - 1  # Exclude the number itself\n\n    ans = partition(5)\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    first = 3\n    second = 10\n    remainder_first = first % 3\n    remainder_second = second % 3\n\n    for i in range(3, 1998):\n        next_remainder = (remainder_first + remainder_second) % 3\n        remainder_first, remainder_second = remainder_second, next_remainder\n\n    return remainder_second\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students, sweets = symbols('students sweets')\n    \n    equation1 = Eq(6 * students - sweets, 26)\n    equation2 = Eq(5 * students - sweets, 5)\n\n    solutions = solve((equation1, equation2), (students, sweets))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Given that there are 8 trees and the difference between the fruits of neighboring trees is 1\n    # Let the smallest number of fruits be x. The next trees will have x+1, x+2,..., x+7 fruits respectively.\n    # The sum of the fruits would then be: x + (x+1) + (x+2) + ... + (x+7)\n\n    # This forms an arithmetic sequence with the first term x and last term x+7.\n    # The sum S of the sequence can be calculated using the formula for the sum of an arithmetic sequence:\n    # S = n/2 * (first_term + last_term), where n is the number of terms\n\n    n = 8 # there are 8 trees\n    \n    # S is given as 225.\n    S = 225\n    \n    # Let's find the first_term (x) using the formula:\n    # 225 = 8/2 * (x + (x + 7))\n    # 225 = 4 * (2x + 7)\n    first_term = (S / 4 - 7/2) / 2\n    \n    # Since the number of fruits must be an integer, let's check if the first term is an integer.\n    if first_term == int(first_term):\n        # If the first term is an integer, we return the first term and the sum is possible\n        return first_term\n    else:\n        # If the first term is not an integer, the sum is not possible\n        return None\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbols for Leo's current age and son's current age\n    leo, son = symbols('leo son')\n    \n    # Leo's current age minus son's current age equals son's age (when Leo was the son's current age)\n    # Which we are given to be 4 years\n    equation1 = Eq(leo - son, 4)\n    \n    # Leo's age when the son reaches Leo's current age \n    # will be Leo's current age plus the difference between their current ages\n    equation2 = Eq(leo + (leo - son), 70)\n\n    # Solve the system of equations \n    solutions = solve((equation1, equation2), (leo, son))\n    \n    # We want Leo's current age\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permuations for arranging 4 singing (S) performances\n    singing_permutations = factorial(4)\n    \n    # Calculate possible arrangements for 3 dancing (D) performances among S with restrictions\n    # Place 1 D at the beginning, 1 at the end, and 1 in between any of the 4 S performances\n    # This gives us 5 places to choose from for placing 3 D performances\n    dancing_slots = 5\n    dancing_permutations = factorial(dancing_slots) // (factorial(dancing_slots - 3) * factorial(3))\n    \n    # The total arrangements is the product of singing and dancing permutations\n    total_permutations = singing_permutations * dancing_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years = 0\n    while True:\n        if (dad_age + years) == 4 * (heidi_age + years):\n            break\n        years += 1\n    return years\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count = 0\n    \n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i /= 5\n    \n    return count\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    total_initial = average_initial * 3\n\n    average_final = 150\n    total_final = average_final * 4\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r = symbols('r', integer=True)\n    equation = Eq(216 * r, r**2)\n\n    # Since 216*r must be a square and r**2 is obviously a square (as it is r squared),\n    # r itself must also be a multiple of 216 for 216*r to be a square number.\n    # The smallest such number is 216 itself because 216 is also a perfect square (6^3).\n    # Hence, we solve for r assuming it is a perfect square.\n    solutions = solve(equation, r)\n\n    # Filter the solutions for positive integers since a negative number cannot be a square\n    solution_positive = [sol for sol in solutions if sol.is_positive]\n\n    return solution_positive[0]\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_up = 8\n    slide_down = 3\n    net_climb = climb_up - slide_down\n    \n    # On the 9th day, the snail climbs out without sliding down, so we need to calculate for 8 days\n    total_days = 9\n    climbing_days = total_days - 1\n    \n    # Calculate how far the snail climbed in the 8 days\n    distance_climbed = net_climb * climbing_days\n    \n    # Add the last 8 meters on the 9th day\n    well_depth = distance_climbed + climb_up\n    \n    return well_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    price_after_discount = original_price * (1 - discount)\n\n    return price_after_discount\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n\n    # The dividend is smallest when the divisor is smallest (greater than the remainder)\n    # Dividend = Divisor * Quotient + Remainder\n    smallest_dividend = (smallest_divisor * quotient) + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    know_french = 75\n    know_japanese = 45\n\n    # By the Inclusion-Exclusion Principle, we calculate the number of teachers who know both languages\n    both_languages = know_french + know_japanese - total_teachers\n\n    # Number of teachers who only know French\n    only_french = know_french - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, drink = symbols('sweets drink')\n\n    equation1 = Eq(3 * sweets + 5 * drink, 4.90)\n    equation2 = Eq(sweets + 3 * drink, 2.70)\n\n    solutions = solve((equation1, equation2), (sweets, drink))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)  # Total ways without any restriction\n    ways_with_teddy_first = factorial(5)  # Ways with Teddy on the furthest left\n\n    # Subtract ways where Teddy is on the furthest left from the total ways\n    ans = total_ways - ways_with_teddy_first\n\n    return ans\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n\n    # The term becomes negative when it is less than 0; formula: Tn = a + (n-1)d < 0\n    # Solving for n: n < (0 - a) / d + 1\n    n = (0 - first_term) / common_difference + 1\n\n    return int(n) - 1  # We don't count the term that goes negative\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    ans = total_pence * fraction\n    return int(ans)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since the numbers are consecutive, the middle number times 7 will be equal to sum of all seven numbers.\n    # We can find the middle number by dividing the total sum by 7.\n    middle_number = 280 // 7\n    \n    # the largest number would be the middle number plus 3 (since there are 3 numbers before and 3 numbers after).\n    largest_number = middle_number + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000 ** 2 - 990 ** 2) + (980 ** 2 - 970 ** 2) + (20 ** 2 - 10 ** 2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Since the highest common factor of A and B is 75, both A and B must be multiples of 75.\n    # We need to find the largest two 3-digit multiples of 75 with distinct digits, two of which are the same.\n    # Given that a 3-digit number ranges from 100 to 999, we find the largest two such multiples of 75.\n\n    multiples = []\n    for number in range(999, 99, -1):\n        if number % 75 == 0:\n            as_str = str(number)\n            if len(set(as_str)) < 3: # Contains at least two equal digits\n                multiples.append(number)\n                if len(multiples) == 2:\n                    break\n\n    # Compute the sum of the two largest multiples of 75 that match the criteria.\n    ans = sum(multiples)\n    return ans\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    result = sum((-1)**(i % 2) * (20 - i) for i in range(0, 18, 2))\n    return result\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    sum_result = 8 + 32 + 72 + 128 + 200 + 288 + 392 + 512 + 648\n    return sum_result\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # The problem is equivalent to arranging 5 magazines (M) and 4 spaces (s) to ensure at least 1 magazine between every 2 storybooks.\n    # We have 5 storybooks (S), so we need to place them with 4 spaces between them: S_s_S_s_S_s_S_s_S.\n    # We can then distribute the 5 magazines in these spaces. The magazines are identical, and the spaces are distinguishable.\n    # Hence, it's a problem of distributing indistinguishable objects into distinguishable boxes.\n    # First, we place 4 magazines into 4 spaces, because each space must contain at least 1 magazine.\n    # We are left with 1 magazine to distribute to any of the 5 spaces (including the ends).\n    # This can be done in C(5, 1) ways, which represents the number of ways to distribute the remaining 1 magazine.\n\n    # Calculate C(5, 1) for the magazines distribution\n    magazines_distribution = factorial(5) // (factorial(1) * factorial(5 - 1))\n\n    # Calculate the permutations for 5 storybooks (since they are distinct).\n    storybooks_permutations = factorial(5)\n\n    # Multiply the two counts together to get the total number of ways.\n    total_ways = magazines_distribution * storybooks_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    moves = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    next_throw = False\n    \n    for move in moves:\n        if next_throw:\n            position -= move\n            next_throw = False\n        elif move == 6:\n            next_throw = True\n        else:\n            position += move\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n    \n    # Alex and Brayden had $756 altogether\n    total_money = Eq(alex + brayden, 756)\n    # After Alex gave $65 to Brayden, Alex had three times as much money as Brayden\n    alex_after = alex - 65\n    brayden_after = brayden + 65\n    new_ratio = Eq(alex_after, 3 * brayden_after)\n    \n    # Solve the equations\n    solutions = solve((total_money, new_ratio), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # We iterate over a sensible range to find the smallest number of gums\n        remaining_after_music = gums - 2  # Ate 2 gums in music lesson\n        shared_at_break = remaining_after_music // 3  # Shared 1/3 of remaining gums\n        remaining_after_break = remaining_after_music - shared_at_break  # Remaining gums after break\n        # Check if the remaining gums can be divided equally in four lessons\n        if remaining_after_break % 4 == 0:\n            return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    total_money = kate_money + james_money\n    # After giving some money to Kate, both will have the same amount which is the average\n    final_each = total_money / 2\n    # James gives Kate enough to make up the difference to the average\n    money_given = final_each - kate_money\n    return money_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # Use divisibility rule for 99 which states the number must be divisible by both 9 and 11\n    # For divisibility by 9, the sum of the digits must be divisible by 9\n    # For divisibility by 11, the difference between the sum of the digits in\n    # the odd positions and the sum of the digits in the even positions must be divisible by 11\n\n    # Fixed digits: 4, 2, 2, 8\n    fixed_sum = 4 + 2 + 2 + 8  # sum of fixed digits\n\n    # Finding A and B such that the number is divisible by 11\n    for A in range(10):\n        for B in range(10):\n            if (fixed_sum + A + B) % 9 == 0:  # check for divisibility by 9\n                # check for divisibility by 11\n                if (4 - 2 + A - 2 + 8 - B) % 11 == 0 or (B - 8 + 2 - A + 2 - 4) % 11 == 0:\n                    return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_original = 10 * 10 # Average times number of numbers\n    total_sum_remaining = 9 * 9 # New average times new number of numbers\n    number_removed = total_sum_original - total_sum_remaining\n    return number_removed\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # converting speed to meters per second\n    time_seconds = 300  # time in seconds\n    distance_meters = speed_mps * time_seconds  # distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original sum of money\n    x = symbols('x')\n    \n    # If the brothers alone had shared the money, they would have received 20 more\n    # Original sum divided by 4 is equal to the amount each brother would receive minus 20\n    equation = Eq(x / 4, (x / 3) - 20)\n\n    # Solve the equation for x\n    original_sum = solve(equation, x)[0]\n    \n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    sum_of_numbers = sum(range(1, 22, 2))\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    r, g, b = symbols('r g b') # the number of red, green and blue beads left\n    \n    # initial assumptions about relationships between beads\n    equation1 = Eq(r, 2 * g)\n    equation2 = Eq(b, r - 50)\n    equation3 = Eq(r + g + b, 350)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (r, g, b))\n\n    # Calculate the original number of blue beads\n    original_blue = solutions[b] + 112\n\n    return original_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Average of some 4 of these 5 numbers given\n    averages = [36, 38, 39, 45, 49]\n\n    # Convert averages to the sum of 4 numbers\n    sums_of_four = [avg * 4 for avg in averages]\n\n    # Sum of all 5 numbers together (which includes the largest number, L) can\n    # be found by adding all sums_of_four and subtracting 4 times the sum of averages\n    # This is because each of the four number sums includes the largest number once\n    # Therefore, sum_all - 4*sum(averages) = L\n    sum_all = sum(sums_of_four) - 4 * sum(averages)\n\n    return sum_all\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    # 1/3 of the art books is 4/5 of the science books\n    science_books = (art_books / 3) * (5 / 4)\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / 2, jared / 5)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    return solutions[katelyn] + solutions[jared]\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n\n    amount_after_three_years = principal * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To share 16 sausages among 24 people equally, each person must get 16/24 of a sausage.\n    # Simplify the fraction 16/24 to its lowest term which is 2/3.\n    # Each person gets 2/3 of a sausage.\n    # To cut sausages into thirds, we need 2 cuts per sausage.\n    # As we have 16 sausages, we will therefore need 16 * 2 cuts.\n    num_cuts = 16 * 2\n    \n    # However, we can save on one cut per sausage by aligning them and making a single cut across all sausages at once.\n    # This would bring it down to 16 + 1 cuts.\n    # But since each person needs 2/3 and not 1/3, we do not save on the second cut, thus we need all original 2 cuts.\n    # So, the number of cuts required remains the same as initially calculated: 16 * 2.\n    return num_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Number of textbooks for each subject\n    chinese = 42\n    math = 63\n    nature = 28\n\n    # Calculate the greatest common divisor (GCD)\n    gcd_result = gcd(gcd(chinese, math), nature)\n\n    return gcd_result\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed in m/min\n    speed_qiqi = 60\n    # Weiling's speed in m/min\n    speed_weiling = 72\n    # Time difference between Qiqi and Weiling in minutes\n    time_difference = 2\n    # Time advantage of Weiling over Qiqi when she arrives in minutes\n    advantage_weiling = 4\n\n    # Let the time taken by Qiqi be t minutes\n    # Then the time taken by Weiling will be t - time_difference - advantage_weiling\n    # since Weiling starts 2 minutes later and arrives 4 minutes earlier.\n\n    # Distance covered by Qiqi will be equal to the distance covered by Weiling.\n    # Speed * Time for both should be same for the distance to be same\n    # speed_qiqi * t = speed_weiling * (t - time_difference - advantage_weiling)\n    # Solving for t, we get:\n    t = (speed_weiling * (time_difference + advantage_weiling)) / (speed_weiling - speed_qiqi)\n    \n    # Using t, we can now find the distance between the library and the school\n    distance = speed_qiqi * t\n    \n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work done by Star in 1 hour\n    # Let n be the work done by Nini in 1 hour\n    s, n = symbols('s n')\n\n    # Star types for 5 hours and Nini types for 20 hours to finish the job - equation 1\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # Star types for 20 hours and Nini types for 8 hours to finish the job - equation 2\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations to find the work done by Star and Nini in 1 hour respectively\n    solutions = solve((equation1, equation2), (s, n))\n\n    # The time taken by Nini to finish the job by herself is the reciprocal of the work she does in 1 hour\n    nini_time = 1 / solutions[n]\n\n    return nini_time\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Calculate the work rate of 4 construction companies for 900 m expressway\n    work_rate_4_companies = 900 / 5\n    # Calculate the work rate of 1 construction company\n    work_rate_1_company = work_rate_4_companies / 4\n    # Calculate the number of days for 1 construction company to build 2700 m expressway\n    days = 2700 / work_rate_1_company\n    return days\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the timezone differences\n    manchester_offset = 0  # Assuming Manchester is UTC;\n    st_petersburg_offset = 3  # St. Petersburg is UTC+3;\n\n    # Define the time the plane was met\n    met_time_st_petersburg = datetime.strptime(\"12:00\", \"%H:%M\")\n\n    # Flight duration given in the question, in this case, is 3 hours and 40 minutes\n    flight_duration = timedelta(hours=3, minutes=40)\n\n    # Convert the meeting time to Manchester time by subtracting the difference in timezone offsets\n    met_time_manchester = met_time_st_petersburg - timedelta(hours=st_petersburg_offset - manchester_offset)\n\n    # Calculate the departure time from Manchester\n    departure_time_manchester = met_time_manchester - flight_duration\n\n    # Format the time into a 24-hour format\n    departure_time_manchester_str = departure_time_manchester.strftime(\"%H:%M\")\n\n    return departure_time_manchester_str\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben is 6th from the front: so there are 5 people in front of Ben.\n    ben_position = 6\n    people_in_front_of_ben = ben_position - 1\n    \n    # There are 10 people between Ben and Frank.\n    people_between_ben_and_frank = 10\n    \n    # Frank is 9th from the back: so there are 8 people behind Frank.\n    frank_position_from_back = 9\n    people_behind_frank = frank_position_from_back - 1\n    \n    # The total number of people is the sum of the people in front of Ben,\n    # the people between Ben and Frank, the people behind Frank, and Ben and Frank themselves.\n    total_people = (\n        people_in_front_of_ben +\n        people_between_ben_and_frank +\n        people_behind_frank +\n        2  # Ben and Frank themselves\n    )\n    \n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n\n    coffee_litres = 6\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_positive = sum(range(4, 33, 4))  # Sum of 4, 8, 12, ..., 32\n    sum_negative = sum(range(2, 31, 4))  # Sum of -2, -6, -10, ..., -30\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of marbles\n    x = symbols('x')\n    # Equation representing total marbles combining fractions and yellow marbles\n    equation = Eq((2/5)*x + (1/3)*x + 96, x)\n    # Solve for x\n    total_marbles = solve(equation, x)\n    # Return the total number of marbles\n    return total_marbles[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_last_4_digits = 0\n    current_number = 0\n    \n    for i in range(1, 2016):\n        current_number = (current_number * 10 + 1) % 10000\n        sum_last_4_digits = (sum_last_4_digits + current_number) % 10000\n\n    return sum_last_4_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each term.\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17_times_4 = (pow(17, 379, 10) * pow(4, 2012, 10)) % 10\n\n    # Calculate the sum of the unit digits of the terms and find the unit digit of the result.\n    unit_digit_sum = (unit_digit_13 + unit_digit_17_times_4) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # After taking 3 marbles out, we must have at least 2 marbles of the same color,\n    # because even if the first 2 are of different colors, the third must match one of them.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    john = mary = 1\n    child1 = child2 = child3 = 0\n    sum_ages = 0\n\n    while True:\n        mary = john - 1\n        child1 = john - ((john - 1) // 3)\n        child2 = child1 - 2\n        child3 = child1 - 4\n\n        this_year_product = john * mary * child1 * child2 * child3\n        next_year_product = (john + 1) * (mary + 1) * (child1 + 1) * (child2 + 1) * (child3 + 1)\n\n        if this_year_product < 2019 and next_year_product > 2020:\n            sum_ages = john + mary + child1 + child2 + child3\n            break\n        \n        john += 1\n\n    return sum_ages\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    for total_money in range(1, 100000):  # assume a reasonable upper limit for total_money\n        if (total_money - 36) * 3/4 == total_money - (total_money / 6) - 36:\n            return total_money\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc = p[0] * 100 + p[1] * 10 + p[2]\n        bcd = p[1] * 100 + p[2] * 10 + p[3]\n        cde = p[2] * 100 + p[3] * 10 + p[4]\n        def_ = p[3] * 100 + p[4] * 10 + p[5]\n        efg = p[4] * 100 + p[5] * 10 + p[6]\n        fgh = p[5] * 100 + p[6] * 10 + p[7]\n        ghi = p[6] * 100 + p[7] * 10 + p[8]\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        if A > max_A:\n            max_A = A\n\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    minutes_per_mile = 2 + 30 / 60\n    miles_per_hour = 60 / minutes_per_mile\n    return miles_per_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    current = 8\n    length = 1  # initial length of numbers starting with 8\n    while count < 2012:\n        # Calculate the range this length covers, considering that the first digit is always 8\n        range_count = 10 ** (length - 1)\n        \n        # If the addition of this range count is less than or equal to 2012, update the count and length\n        if count + range_count >= 2012:\n            # Calculate the actual number by adding the difference to the initial value of this range\n            num = (2012 - count - 1) + 10 ** (length - 1)\n            return int('8' + str(num))\n        count += range_count\n        length += 1\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle student have x balls, then the students have x-2, x-1, x, x+1, and x+2 balls\n    # The sum of these balls is 5x, which should be equal to 160.\n    total_balls = 160\n    x = total_balls // 5\n    max_balls = x + 2\n    return max_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    ways = 0\n    # Since A needs at least 2, B at least 4 and C at least 3, D will take the rest, so we start from there.\n    for a in range(2, 15):               # A can take from 2 to 14 envelopes (15 minus 1 because at least one needs to go in the other boxes)\n        for b in range(4, 15):           # B can take from 4 to 14 envelopes\n            for c in range(3, 15):       # C can take from 3 to 14 envelopes\n                d = 15 - (a + b + c)     # D will take the rest.\n                if d > 0:                # D needs to have at least 1 envelope\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum([i**2 for i in range(2, 21, 2)])\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Let x be the individual's income.\n    # 0.15 * 20000 = taxes for the first 20000 dollars\n    base_taxes = 0.15 * 20000\n    \n    # If the individual is taxed 7000 dollars, and the base taxes for the first\n    # 20000 is 3000 dollars, then the additional taxes paid are:\n    additional_taxes = 7000 - base_taxes  # Taxes paid over the 20% tax rate portion\n    \n    # Calculate the amount of income over 20000 that results in additional_taxes\n    # at a 20% rate.\n    additional_income = additional_taxes / 0.20\n    \n    # Income is then the sum of the first 20000 and the additional income.\n    income = 20000 + additional_income\n    \n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    numerator = 1\n    denominator = 13\n    # Find the cycle of the recurring decimal for 1/13\n    recurring_cycle = \"\"\n    remainders = []\n    remainder = numerator % denominator\n    while remainder not in remainders:\n        remainders.append(remainder)\n        numerator = remainder * 10\n        digit = numerator // denominator\n        recurring_cycle += str(digit)\n        remainder = numerator % denominator\n        if remainder == 0:\n            break\n    \n    # The required digit is in the cycle at position 2021 % cycle_length\n    cycle_length = len(recurring_cycle)\n    position = (2022 - 1) % cycle_length\n\n    return int(recurring_cycle[position])\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n    length1 = 28\n    length2 = 14\n    length3 = 56\n    longest_piece_length = gcd(gcd(length1, length2), length3)\n    return longest_piece_length\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    # Let c be the number of chickens and r be the number of rabbits.\n    # Each chicken has 2 legs and each rabbit has 4 legs.\n    # According to the problem we have two equations:\n    # c + r = 40 (total animals)\n    # 2c + 4r = 100 (total legs)\n    \n    # We can transform the second equation to:\n    # c + 2r = 50 by dividing by 2\n    \n    # Now subtracting the first equation from the modified second equation we get:\n    # r = 50 - 40 => r = 10 (number of rabbits)\n    \n    # Now we can find the number of chickens by substituting r in the first equation:\n    # c + 10 = 40 => c = 40 - 10 => c = 30 (number of chickens)\n    \n    c = 40 - 10\n    return c\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of packs of potato chips each store had originally\n    x = symbols('x')\n\n    # After store A sold 290 packs, store A has x - 290 packs\n    # Store B has 3 times the amount of store A, so store B has 3 * (x - 290) packs\n\n    # Equation representing the situation\n    equation = Eq(3 * (x - 290), x)\n\n    # Solving for the original number of packs x\n    x_value = solve(equation, x)[0]\n\n    # The total packs both stores had originally is 2 * x\n    total_packs = 2 * x_value\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys\n    boys_packed = 4\n    girls_school_lunch = 7\n    boys_home = 3\n    students_home = 5\n\n    boys_school_lunch = boys - boys_packed - boys_home\n    \n    girls_packed = total_students - (boys_school_lunch + boys_packed + boys_home + girls_school_lunch + students_home)\n\n    total_packed = boys_packed + girls_packed\n\n    return total_packed\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    stawberry_chocolate_price = 4\n\n    total_dark_chocolate_price = dark_chocolate_price * 20\n    total_milk_chocolate_price = milk_chocolate_price * 20\n    total_stawberry_chocolate_price = stawberry_chocolate_price * 20\n\n    total_price = (total_dark_chocolate_price + total_milk_chocolate_price + total_stawberry_chocolate_price)\n    total_chocolates = 20 + 20 + 20\n\n    average_cost = total_price / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets = 3600\n    days_for_5_days = 5\n    \n    rate_per_day = sets_made_in_5_days / days_for_5_days\n    total_days_needed = total_sets / rate_per_day\n    \n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    max_value = 100\n    divisible_by = 12\n    count = (max_value - 1) // divisible_by\n    return count\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19  # time in seconds to pass a tree\n\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days the wife would take to finish the barrel on her own\n    # 1/15 is the man's rate of drinking the barrel per day\n    # 1/x is the wife's rate of drinking the barrel per day\n    # 1/12 is their combined rate of drinking the barrel per day\n    # Their combined rate is the sum of their individual rates\n    # So we have the equation: 1/15 + 1/x = 1/12\n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/15 + 1/x, 1/12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    friends_count = 6\n\n    pear_per_friend = total_pear // friends_count\n    strawberry_per_friend = total_strawberry // friends_count\n    chocolate_per_friend = total_chocolate // friends_count\n\n    fruits_per_friend = pear_per_friend + strawberry_per_friend + chocolate_per_friend\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    \n    total_wheels = wheels_per_tricycle * num_tricycles\n    \n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    offer_books_required = 3\n    offer_books_free = 1\n    books_to_buy = 5\n    \n    sets_of_offers = books_to_buy // (offer_books_required + offer_books_free)\n    remaining_books_to_buy = books_to_buy % (offer_books_required + offer_books_free)\n    \n    total_price = (sets_of_offers * offer_books_required * price_per_book) + (remaining_books_to_buy * price_per_book)\n    \n    return total_price\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    number = symbols('number')\n\n    # Create the equation based on the problem statement\n    equation = Eq(2 * number + 6, 3 * number - 3)\n\n    # Find the solution to the equation\n    solutions = solve(equation, number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    # Let's assume the number of children to be 'c'. Then:\n    women = (2/5) * total_people\n    men = 3 * 'c' # since men are thrice the number of children\n    children = women - 190 # there were 190 more women than children\n\n    # As men = 3 * children, let's also express men in terms of 'c'\n    men = 3 * children\n    \n    # Now we can set up the equation of total people:\n    equation = Eq(women + men + children, total_people)\n    \n    # Substitute women and men in terms of children 'c' into the equation\n    equation = equation.subs(women, 2/5 * total_people).subs(men, 3 * children).subs(children, (2/5 * total_people) - 190)\n    \n    # Solve for total_people\n    solution = solve(equation, total_people)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) % 4\n    return ans\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # below sea level\n    mount_fuji_tip = 3776  # above sea level\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n\n    for i in range(1, 201):\n        count += str(i).count('1')\n        \n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys = symbols('boys')\n\n    # Create equations based on the problem\n    total_pupils = 40\n    girls = total_pupils - boys\n    avg_pencils = 35\n    boys_avg = 20\n    girls_avg = 60\n\n    # Equation representing the total number of pencils\n    total_pencils = avg_pencils * total_pupils\n    # Equation based on average pencils per gender\n    equation = Eq(boys_avg * boys + girls_avg * girls, total_pencils)\n\n    # Solve for the number of boys\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20  # Students participating only in coding\n    math_only = 21 - 20    # Students participating only in math\n    both = 20              # Students participating in both\n\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Define the minimum number of envelopes required for each mailbox\n    min_A, min_B, min_C = 2, 4, 3\n    # Calculate the remaining envelopes after placing the minimum required in A, B, C\n    remaining_envelopes = 15 - (min_A + min_B + min_C)\n    # There are no minimum requirements for mailbox D\n    min_D = 0\n    \n    count = 0\n    # Generate all possible combinations with repetition for the remaining envelopes\n    for placement in combinations_with_replacement(range(min_D, remaining_envelopes + 1), 4):\n        if sum(placement) == remaining_envelopes:\n            # Only count those combinations where the minimum requirements are met\n            if placement[0] >= min_A and placement[1] >= min_B and placement[2] >= min_C:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the true result\n    true_result = symbols('true_result')\n    \n    # The incorrect division is done without the decimal point, i.e., dividing by 211 instead of 2.11\n    incorrect_divisor = 211\n    correct_divisor = 2.11\n    \n    # Equation representing the relationship between the incorrect and true result\n    equation = Eq(true_result - (true_result * incorrect_divisor/correct_divisor), 98.01)\n    \n    # Solve for the true result\n    solved = solve(equation, true_result)\n    \n    # There should be only one solution to the equation\n    return float(solved[0])\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    price_apple, price_banana = symbols('price_apple price_banana')\n    \n    # Define the equations based on the information given\n    equation1 = Eq(6 * price_apple + 7 * price_banana, 8 * price_apple + 4 * price_banana)\n    equation2 = Eq(price_apple, price_banana)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (price_apple, price_banana))\n    \n    # Calculate the number of bananas Einstein could afford if he only bought bananas\n    total_cost = 8 * price_apple + 4 * price_banana\n    bananas = total_cost / price_banana\n    \n    return int(bananas)\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of money they have left\n    john_left, choon_left = symbols('john_left choon_left')\n\n    # Equations based on the problem statement\n    # 1. John had the same amount of money as Choon Mui initially\n    # 2. John spent $30 and Choon Mui spent $150\n    # 3. John's remaining amount is four times Choon Mui's remaining amount\n    equation1 = Eq(john_left + 30, choon_left + 150)\n    equation2 = Eq(john_left, 4 * choon_left)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john_left, choon_left))\n\n    # John's remaining amount of money\n    return solutions[john_left]\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of female visitors on the first day as f\n    f = symbols('f')\n\n    # Given that the number of male visitors is 450 more than the number of female visitors\n    m_day1 = f + 450\n\n    # On the second day, number of female visitors increased by 15%\n    f_day2 = f * 1.15\n\n    # On the second day, the number of male visitors decreased by 18%\n    m_day2 = m_day1 * 0.82\n\n    # The total number of visitors for the second day was 1354\n    total_day2 = m_day2 + f_day2\n\n    # Let's write the equation and solve it\n    equation = Eq(total_day2, 1354)\n    solution = solve(equation, f)\n\n    # Number of male visitors on the first day is m_day1 which is f + 450\n    male_visitors_first_day = solution[0] + 450\n\n    return male_visitors_first_day\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Let x be the number of eggs in the basket at first.\n    # Sold 5 eggs more than half of x\n    # Sold 4 eggs fewer than half of the remaining eggs (x / 2 - 5)\n\n    # Remainder after the first sell\n    remaining_after_first_sell = x / 2 - 5\n\n    # Remainder after the second sell\n    remaining_after_second_sell = remaining_after_first_sell / 2 - 4\n\n    # Equation for the eggs left (15)\n    equation = Eq(remaining_after_second_sell, 15)\n\n    # Solve the equation\n    initial_eggs = solve(equation, x)\n    return initial_eggs[0]\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10  # 10%\n    \n    increased_amount = original_amount * (1 + percentage_increase / 100)\n    \n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    yacht_length_m = 8  # in meters\n    scale = 20  # scale ratio\n    # Since 1 m = 100 cm, we convert the yacht length to cm and divide by the scale\n    model_length_cm = (yacht_length_m * 100) / scale\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n    \n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    \n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    balloons_per_pupil = total_balloons // num_pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    \n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # The problem is to find the number of derangements (permutations where no element is in its original position) of 4 elements.\n    # The formula for the number of derangements (also known as !n) or subfactorial of n is:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # For n=4, it simplifies as follows:\n    # !4 = 4! * (1 - 1/1! + 1/2! - 1/3! + 1/4!)\n\n    n = 4\n    derangement = factorial(n)\n    for i in range(n + 1):\n        derangement += (-1)**i / factorial(i)\n    \n    # Convert float approximation of factorial derangement to integer\n    derangement = int(round(derangement * factorial(n)))\n    \n    return derangement\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= distance_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95*x - 2/5*x, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    \n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934  # Conversion factor from miles to kilometers\n    \n    return kilometers\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    ans = 53 * 627\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Our congruences are: x ≡ 2 (mod 7) and x ≡ 2 (mod 13)\n    congruences = [(2, 7), (2, 13)]\n    \n    # Using the Chinese Remainder Theorem to solve the modular equations\n    number, _ = solve_congruence(*congruences)\n\n    # Ensure that the number is less than 100\n    while number < 100:\n        return number\n        number += 7 * 13\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate the hourly wage\n    hourly_wage = 78 / 6.5\n    \n    # Number of working days in a week (assuming a 5-day work week)\n    working_days = 5\n\n    # Hours worked per day\n    hours_per_day = 8\n    \n    # Calculate the total earnings for the week\n    total_earnings = hourly_wage * hours_per_day * working_days\n    \n    # Calculate the shortfall from John's debt\n    shortfall = 700 - total_earnings\n    \n    return shortfall\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        str_num = str(number)\n        if str_num.count('0') == 1 and str_num[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n\n    # Arjun's haircut cycle in days\n    arjun_cycle = 2 * 7  # 2 weeks\n\n    # Yahya's haircut cycle in days\n    yahya_cycle = 10  # 10 days\n\n    # Find least common multiple to determine when they will both get a haircut on the same day\n    ans = lcm(arjun_cycle, yahya_cycle)\n\n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Assuming A is unknown and using symbols for the digits of A (a1, a2)\n    a1, a2 = symbols('a1 a2')\n\n    # Construct the equation based on the assumptions\n    # Since it says A = ~~~~~ and we're supposed to use A in vertical form we can assume that\n    # A stands for a two-digit number a1a2 where a1 is the tens digit and a2 is the ones digit.\n    # As per the form of such puzzles, the vertical form implies addition and can be structured as:\n    #  a1 a2\n    # +a2 a1\n    # -----\n    #  a1 a2\n    # This implies that a2 + a1 (the ones digit of the result) must be equal to a2 and since\n    # a2 cannot be greater than 9, a1 must be zero. Moreover, for the tens digit in the result,\n    # we must consider any carry from the addition of the ones place. However, since a1 is zero,\n    # there is no carry and a1 must also equal the tens digit of the result, which as established,\n    # is also a1.\n    # This leads to the conclusion that A = a1a2 must be a number where a1 is 0.\n    # Hence, A = 0a2 = a2, which means that A can be any one-digit number.\n    # Since the task is to find the value of A, and any digit from 0 to 9 is valid,\n    # we can return a range (0 to 9 inclusive) as the answer.\n    A = list(range(10))\n\n    return A\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_1 = 280 / 7  # Time to run the first 280 meters at 7 m/s\n    time_2 = 400 / 5  # Time to run the middle 400 meters at 5 m/s\n    time_3 = (800 - 280 - 400) / 8  # Time to run the last segment at 8 m/s\n\n    # Total time is the sum of times for each segment\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n\n    num_trees = (highway_length - tree_spacing) // tree_spacing\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_after = 34\n    stamps_given_to_sister = 14\n    stamps_bought = 11\n    stamps_used_to_send_letter = 2\n\n    stamps_initial = stamps_after + stamps_given_to_sister + stamps_used_to_send_letter - stamps_bought\n\n    return stamps_initial\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note = 50\n    shoe_cost = 30\n    loss = fake_note + shoe_cost\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    \n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C as a single entity plus the other 7 students.\n    # So, we have 8 entities to arrange.\n    entity_arrangements = factorial(8)\n\n    # Within the single entity, A, B, and C can be arranged in 3! ways.\n    abc_arrangements = factorial(3)\n\n    # Total arrangements is the product of the two possibilities.\n    total_arrangements = entity_arrangements * abc_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    smallest_after_removal = number_str[46:]\n\n    return int(smallest_after_removal)\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum_first_part = sum(range(1, 5)) # Calculates the sum of (1+2+3+4)\n    sum_second_part = sum(range(2018, 2021)) # Calculates the sum of (2020+2019+2018)\n\n    ans = (sum_first_part * 1) - (sum_second_part * 0) # Computes the final expression\n\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    length_of_each_ruler = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    total_length = (length_of_each_ruler * number_of_rulers) - (overlap_length * (number_of_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    exchange_rate = 7\n    new_cups = 0\n\n    while total_used_cups >= exchange_rate:\n        new_cups_batch = total_used_cups // exchange_rate\n        new_cups += new_cups_batch\n        total_used_cups = total_used_cups - (new_cups_batch * exchange_rate) + new_cups_batch\n\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    num = 2000 - 222\n    return num\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # converting plot length to centimeters\n    cauliflower_spacing = 15  # spacing between cauliflowers in cm\n    first_cauliflower_offset = 20  # first cauliflower planted 20 cm from start in cm\n    cauliflower_width = 45  # width of each cauliflower in cm\n\n    total_space_for_cauliflowers = plot_length_cm - first_cauliflower_offset - cauliflower_width\n    number_of_cauliflowers = total_space_for_cauliflowers // (cauliflower_spacing + cauliflower_width)\n    \n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    a_students = 8\n    b_students = 12\n    c_students = 20\n\n    # Find the greatest common divisor (GCD) of the number of students in each class\n    gcd_ab = gcd(a_students, b_students)\n    gcd_abc = gcd(gcd_ab, c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # in meters per second\n    distance = 1.5 * 10**3  # 1.5 kilometers in meters\n\n    time = distance / speed_of_sound  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors_count = 0\n    for factor in range(1, number + 1):\n        if number % factor == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of members in the Bowling Club\n    b = symbols('b')\n\n    # Badminton Club had thrice as many members as the Bowling Club\n    # So, the number of members in the Badminton Club is 3*b\n    # After 36 members left the Badminton Club, it has 3*b - 36 members\n    # After 4 members left the Bowling Club, it has b - 4 members\n    # Both clubs have the same number of members in the end\n    equation = Eq(3*b - 36, b - 4)\n\n    # Solving the equation\n    solution = solve(equation, b)\n\n    # Using the solution to find the number of members in each club after the given changes\n    num_members_bowling = solution[b] - 4\n    num_members_badminton = (3 * solution[b]) - 36\n\n    return num_members_bowling  # Both clubs have the same number of members in the end\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    difference = 6\n\n    # The number of cards\n    num_cards = total_sum // average\n\n    # Difference between greatest and smallest numbers divided equally among numbers\n    # Since the difference is 6 and the average step between each number should be same, we can divide the difference by 2 to find step on each side\n    step = difference // 2\n\n    # Since the numbers are in increasing order and odd, our starting number should be average - step for the smallest number\n    smallest_number = average - step\n\n    return smallest_number\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(301, 1000):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n            \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum([1/i for i in range(10, 20)])\n    return int(sum_fraction)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the current ages of Wendy and Vivien\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Calculate Wendy's age in 5 years' time\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3 * x - (2 * x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls + boys, 1690)\n\n    # Solve for number of girls and boys\n    solution_pupils = solve((equation1, equation2), (girls, boys))\n    girls_num = solution_pupils[girls]\n    boys_num = solution_pupils[boys]\n\n    # Find number of girls who can and cannot swim\n    girls_swim = 31 / (31 + 49) * girls_num\n    girls_cannot_swim = 49 / (31 + 49) * girls_num\n\n    # Solve for the number of boys who can and cannot swim\n    boys_swim = symbols('boys_swim')\n    equation3 = Eq(boys_swim, boys_num - boys_swim - 120)\n\n    # Solve for boys_swim using the second equation\n    solution_swim = solve(equation3, boys_swim)\n    boys_swim_num = solution_swim[boys_swim]\n    boys_cannot_swim = boys_num - boys_swim_num\n    \n    # Total pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance run by Boris\n    # Let x + 1656 be the distance run by Bolt\n    x = symbols('x')\n\n    # Define the equation based on the problem statement\n    equation = Eq(x + 1656, 5 * x + 280)\n\n    # Solve for x\n    distance_boris = solve(equation, x)[0]\n    \n    # Calculate distance run by Bolt\n    distance_bolt = distance_boris + 1656\n\n    # Calculate total distance run by both\n    total_distance = distance_bolt + distance_boris\n\n    return total_distance\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # in m/min\n    turtle_speed = 30  # in m/min\n    race_distance = 6990  # in meters\n    rabbit_sleep_time = 215  # in minutes\n    start_delay = 10  # in minutes\n\n    # Calculate the distances covered by each before the rabbit fell asleep\n    distance_rabbit_before_sleep = rabbit_speed * start_delay\n    distance_turtle_before_rabbit_sleep = turtle_speed * (start_delay + rabbit_sleep_time)\n\n    # Check if the turtle finished the race before the rabbit woke up\n    if distance_turtle_before_rabbit_sleep >= race_distance:\n        winner = 'turtle'\n        lead_distance = race_distance - distance_rabbit_before_sleep\n    else:\n        # Calculate remaining distance for rabbit to finish after sleep\n        remaining_distance_rabbit = race_distance - distance_rabbit_before_sleep\n\n        # Time it takes for rabbit to finish the race\n        time_rabbit_to_finish = remaining_distance_rabbit / rabbit_speed\n\n        # Calculate where the turtle would be when the rabbit finishes\n        time_turtle_running = start_delay + rabbit_sleep_time + time_rabbit_to_finish\n        distance_turtle_when_rabbit_finishes = turtle_speed * time_turtle_running\n\n        # Check who wins and their lead distance\n        if distance_turtle_when_rabbit_finishes >= race_distance:\n            winner = 'turtle'\n            lead_distance = race_distance - (distance_rabbit_before_sleep + rabbit_speed * time_rabbit_to_finish)\n        else:\n            winner = 'rabbit'\n            lead_distance = distance_turtle_when_rabbit_finishes - race_distance\n\n    return winner, abs(lead_distance)\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_only = 20 - 15\n    math_only = 35 - 15\n    both = 15\n    total_students = english_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 1.10  # 10% increase each year\n\n    # Calculate the amount he received in 2018 by dividing by annual_increase twice\n    initial_amount = final_amount / (annual_increase ** 2)\n\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    # Total number of people\n    total_people = 7\n    \n    # Three people who don't want to stand next to each other\n    cluster_people = 3\n    \n    # Number of ways to arrange 7 individuals\n    total_arrangements = factorial(total_people)\n    \n    # Number of ways to arrange 3 individuals as a cluster\n    cluster_arrangements = factorial(cluster_people)\n    \n    # Treat the cluster as one unit, calculate arrangements for the remaining units\n    remaining_units = total_people - cluster_people + 1  # +1 because the cluster is treated as one\n    arrangements_with_cluster = factorial(remaining_units)\n    \n    # Calculate the number of valid arrangements\n    valid_arrangements = total_arrangements - (arrangements_with_cluster * cluster_arrangements)\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)\n    total_rows = 25\n\n    total_athletes = (total_rows / 2) * (2 * first_term + (total_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n    \n    # Count the amount of 5s in prime factorization, since the number of 2s will\n    # certainly be larger, the 5s will determine the count of trailing zeros. \n    fives = 0\n    for i in range(1, 790):\n        fives += count_factors(i, 5)\n    \n    return fives\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n\n    # Using the arithmetic sum formula: S_n = n/2 * (a_1 + a_n)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n    return sum_sequence\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    total_participants = 100\n    min_participants_in_largest_school = 4\n\n    # Applying the Pigeonhole Principle. If each of the n schools had 3 participants or less,\n    # we could only have a total of 3n participants (each school being a pigeonhole).\n    # To ensure that there's at least one school with >=4 participants, we must have:\n    # 3n + 1 <= total_participants\n    # Solving for n gives us the maximum number of schools possible.\n    \n    max_schools = (total_participants - 1) // 3\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    team_a_avg = 76\n    team_b_avg = 67\n    combined_avg = 70\n    team_a_students = 20\n\n    # Let's denote the number of students in Team B as x.\n    # According to the problem Team A's total score is 20 * 76,\n    # and Team B's total score is x * 67.\n    # The total combined score is (20 * 76) + (x * 67).\n    # Also given that the average combined score is 70, and\n    # the total number of students combined is 20 + x,\n    # we can set up the equation [(20 * 76) + (x * 67)] / (20 + x) = 70.\n\n    # Solve for x, the number of students in Team B.\n    # (20 * 76) + (x * 67) = 70 * (20 + x)\n    # x = ((70 * (20 + x)) - (20 * 76)) / 67\n\n    team_a_total_score = team_a_avg * team_a_students\n    \n    # Rearrange the equation to find x, which denotes the number of students in Team B.\n    # 20 * 76 + x * 67 = 70 * (20 + x)\n    # => x * 67 = 70 * (20 + x) - 20 * 76\n    # => x * 67 = 1400 + 70x - 1520\n    # => x * 67 - 70x = 1400 - 1520\n    # => x * (67 - 70) = -120\n    # => x * (-3) = -120\n    # => x = -120 / -3\n    # => x = 40\n    \n    team_b_students = (combined_avg * (team_a_students + 'x') - team_a_total_score) / team_b_avg\n    team_b_students = (-120) / (team_b_avg - combined_avg)\n    \n    return int(team_b_students)\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24): # Loop through 24 hours\n        for minute in range(60): # Loop through 60 minutes\n            time_str = f\"{hour:02d}{minute:02d}\" # Format as a string with leading zeros\n            if time_str.count('4') >= 2: # Check if there are at least two '4's\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 6)\n    min_product = float('inf')\n\n    for perm in perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_num1, min_num2 = num1, num2\n            min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)\n    max_product = 0\n    min_product = float('inf')\n\n    for perm in permutations(digits, 7):\n        num_A, num_B, num_C, num_D, num_E, num_F, num_G = perm\n        num_ABCD = 1000 * num_A + 100 * num_B + 10 * num_C + num_D\n        num_EFG = 100 * num_E + 10 * num_F + num_G\n        \n        if num_ABCD + num_EFG == 1993:\n            product = num_ABCD * num_EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n\n    difference = max_product - min_product\n    return difference\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_roll = 6\n    target_position = 25\n    min_rolls = (target_position - 1) // max_roll \n    if (target_position - 1) % max_roll > 0:\n        min_rolls += 1\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -50\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    num_terms = int(num_terms)\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_rate = 40\n    slip_back = 10\n    net_gain_per_hour = climb_rate - slip_back\n    hours = 0\n\n    while depth > 0:\n        hours += 1\n        depth -= climb_rate\n        if depth <= 0:\n            break\n        depth += slip_back\n\n    return hours\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    max_prime = 0\n    for i in range(29, 0, -1):\n        if isprime(i):\n            max_prime = i\n            break\n    return max_prime\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_cost = 0.96 * 8\n    price_per_lettuce = total_cost / 6\n    return price_per_lettuce\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Total words typed by 5 typists in 20 minutes\n    total_words = 6000\n\n    # Total minutes taken by 5 typists to type 6000 words\n    total_minutes = 20\n\n    # Calculate the rate per typist per minute\n    rate_per_typist_per_minute = total_words / (5 * total_minutes)\n\n    # Number of words needed to be typed\n    required_words = 9000\n\n    # Number of typists available (after 2 fell sick)\n    available_typists = 5 - 2\n\n    # Calculate the total time needed by the available typists to type the required words\n    time_needed = required_words / (rate_per_typist_per_minute * available_typists)\n\n    return time_needed\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_on_shoes = 97\n    saved_money = total_money - spent_on_shoes\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    initial_plants = 11\n    final_plants = 3  # after removing 8 plants\n    total_distance = 30  # in meters\n\n    initial_intervals = initial_plants - 1\n    new_intervals = final_plants - 1\n\n    initial_spacing = total_distance / initial_intervals\n    new_spacing = initial_spacing * initial_intervals / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert 13:52 to minutes\n    end_time = 14 * 60 + 5     # Convert 14:05 to minutes\n    duration = end_time - start_time  # Duration of the call in minutes\n    cost_per_minute = 14  # Cost in pence per minute\n    total_cost = duration * cost_per_minute  # Total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    ans = sum(divisors(20))\n    \n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    ans = 0.40 * 320\n    return ans\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            if i + j == 15:\n                return i * 10 + j\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"2023-10-17\", \"%Y-%m-%d\")\n    end_date = datetime.strptime(\"2023-12-20\", \"%Y-%m-%d\")\n\n    # The start date is a Tuesday, so find the first Sunday after this date\n    days_until_sunday = (6 - start_date.weekday() + 7) % 7\n    first_sunday = start_date + timedelta(days=days_until_sunday)\n\n    # Calculate the number of days between the first Sunday and the end date\n    days_between = (end_date - first_sunday).days\n\n    # Calculate number of Sundays by integer division\n    num_sundays = days_between // 7 + 1\n\n    return num_sundays\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "from itertools import product\n\ndef solution():\n    digits = ['2', '3']\n    count = 0\n    for number in product(digits, repeat=3):\n        if '2' in number and '3' in number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    # Define the cost of an apple tart as 'x'\n    # Then the cost of a strawberry tart will be 'x + 0.40'\n    # If she bought 'y' strawberry tarts, then she bought '2y' apple tarts\n    # '2y' apple tarts cost '2y * x' dollars\n    # 'y' strawberry tarts cost 'y * (x + 0.40)' dollars\n    # Total cost is 40 dollars:\n    # 2y * x + y * (x + 0.40) = 40\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(2*y*x, y*(x + 0.40))\n    equation2 = Eq(2*y*x + y*(x + 0.40), 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    apple_tarts = 2 * solutions[y]\n    strawberry_tarts = solutions[y]\n    total_tarts = apple_tarts + strawberry_tarts\n    \n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for uniformity \n    light1_interval = 30  # 0.5 minutes is 30 seconds\n    light2_interval = 45  # 0.75 minutes is 45 seconds\n    light3_interval_start = 30  # Starting point for light 3 interval as seconds\n\n    # Since the first two lights turn every 9 minutes (540 seconds),\n    # the Least Common Multiple (LCM) of their intervals should be 540\n    # We need to find the smallest interval for the third light that\n    # would also have 540 seconds as LCM when combined with the first two\n    lcm_two_lights = lcm(light1_interval, light2_interval)\n    ans = light3_interval_start\n\n    while True:\n        if lcm(lcm_two_lights, ans) == 540:\n            break\n        ans += 1  # Increase the interval by one second and try again\n\n    return ans\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    ways = factorial(5)  # Number of ways to distribute 5 unique skiboards among 5 people\n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    ans = 2 * 1000  # There are 1000 millimeters in 1 meter\n    return ans\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of pieces in the jigsaw puzzle\n    x = symbols('x')\n    \n    # On the first day Tim fits 20% of the pieces, which is 0.2 * x\n    # On the second day, he fits another 60 pieces. The total number fitted is 0.2 * x + 60\n    # The number of unfitted pieces is x - (0.2 * x + 60)\n    # The ratio of fitted to unfitted pieces is 2:5, which gives us the equation:\n    # (0.2 * x + 60) / (x - (0.2 * x + 60)) = 2 / 5\n    \n    equation = Eq((0.2 * x + 60) / (x - (0.2 * x + 60)), 2 / 5)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since we're looking for the total number of pieces, we return the solution as an integer\n    return solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n    \n    # Since there are 26 children in total, the position of Tony from the left is:\n    tony_position_from_left = total_children - tony_position_from_right + 1\n    \n    # The number of children between Henry and Tony would be the distance between their positions:\n    # We subtract 1 to include Henry in the count\n    children_between_henry_and_tony = abs(henry_position_from_left - tony_position_from_left) + 1\n    \n    return children_between_henry_and_tony\n    \nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiple_of_10 = total_numbers // 10\n    not_multiple_of_10 = total_numbers - multiple_of_10\n    percentage_not_multiple_of_10 = (not_multiple_of_10 / total_numbers) * 100\n    return percentage_not_multiple_of_10\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment_percent = 30\n    repayment_amount = initial_loan * (repayment_percent / 100)\n    remaining_loan = initial_loan - repayment_amount\n    \n    return remaining_loan\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # We know that:\n    # - Each cat has 4 legs\n    # - Each dog has 4 legs\n    # - The rabbit has 4 legs\n    # - Each bird has 2 legs\n    # Using the above information, we can set up an equation:\n    # 4 * (Number of cats) + 4 * (Number of dogs) + 4 * (Number of rabbits) + 2 * (Number of birds) = Total number of legs\n    # We also know that Tina has 2 cats, 2 dogs, 1 rabbit, and some birds. Let's denote the number of birds as B.\n    # So, the equation is:\n    # 4*2 (cats) + 4*2 (dogs) + 4*1 (rabbit) + 2*B (birds) = 28\n    # That simplifies to:\n    # 8 (cats) + 8 (dogs) + 4 (rabbit) + 2*B = 28\n    # Now we solve for B:\n    # 2*B = 28 - 8 - 8 - 4\n    # 2*B = 8\n    # B = 8 / 2\n    # B = 4\n    # Tina has 4 birds.\n    \n    number_of_birds = (28 - (4*2 + 4*2 + 4*1)) // 2\n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # The time after which they meet in hours\n\n    total_distance = (jack_speed + rose_speed) * meeting_time\n\n    return total_distance\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Initialize symbols for the number of cards Nelson and Oliver had at first\n    nelson_cards = symbols('nelson_cards')\n    \n    # Melvin's original number of cards\n    melvin_original = 40\n    \n    # Melvin gains 5/8 of his original number from Nelson\n    melvin_gained_from_nelson = (5/8) * melvin_original\n    \n    # Nelson loses the same amount to Melvin\n    nelson_lost_to_melvin = melvin_gained_from_nelson\n    \n    # Melvin and Nelson each lose 1/4 of Melvin's original number to Oliver\n    melvin_lost_to_oliver = (1/4) * melvin_original\n    nelson_lost_to_oliver = (1/4) * melvin_original\n    \n    # In the final round, Melvin gains 1/8 of his original number from Nelson\n    melvin_gained_final = (1/8) * melvin_original\n    nelson_lost_final = melvin_gained_final\n    \n    # Compute the total cards Nelson and Oliver had at first\n    nelson_initial = nelson_cards - nelson_lost_to_melvin + nelson_lost_to_oliver - nelson_lost_final\n    oliver_initial = melvin_lost_to_oliver + nelson_lost_to_oliver\n    \n    # After all rounds, Melvin, Nelson and Oliver have the same number of cards\n    melvin_final = melvin_original + melvin_gained_from_nelson - melvin_lost_to_oliver + melvin_gained_final\n    nelson_final = nelson_initial\n    oliver_final = oliver_initial\n    \n    # Equation: all have the same number of cards\n    equal_cards = Eq(melvin_final, nelson_final)\n    equal_cards = Eq(melvin_final, oliver_final)\n    \n    # Solve for the initial number of cards Nelson had\n    solutions = solve((equal_cards), (nelson_cards))\n    \n    # The total number of cards they had initially\n    total_cards_initially = melvin_original + solutions[nelson_cards] + melvin_lost_to_oliver\n    \n    return total_cards_initially\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0)\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly's age be x when the sum of her children's ages is equal to her age\n    # Child 1 age when Polly is x: x - 20\n    # Child 2 age when Polly is x: (x - 20) - 2\n    # Child 3 age when Polly is x: (x - 20) - 2 - 2\n    # Sum of children's ages: (x - 20) + (x - 20 - 2) + (x - 20 - 2 - 2)\n    # This sum is equal to Polly's age x\n    # x = (x - 20) + (x - 22) + (x - 24)\n    \n    # 3x - 66 = x\n    # 3x - x = 66\n    # 2x = 66\n    # x = 33\n    # Polly is 33 years old when her age equals the sum of her children's ages\n    \n    ans = 33\n    return ans\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    series_sum = (num_terms * (first_term + last_term)) // 2\n    return series_sum\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Get all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    # We create sets of products to compare\n    candy_products = {prod(combo) for combo in candy_combinations}\n    candice_products = {prod(combo) for combo in candice_combinations}\n\n    # Find the common product\n    common_product = candy_products.intersection(candice_products).pop()\n\n    # Find the cards that are used to obtain this product\n    for combo in candy_combinations:\n        if prod(combo) == common_product:\n            candy_set = set(combo)\n            break\n\n    for combo in candice_combinations:\n        if prod(combo) == common_product:\n            candice_set = set(combo)\n            break\n\n    # The number that is not picked is the one not in the union of both sets\n    all_picked_numbers = candy_set.union(candice_set)\n    not_picked = set(cards) - all_picked_numbers\n    \n    return not_picked.pop()\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiplier = 5\n\n    suitcase_weight = total_weight / (multiplier - 1)\n\n    return suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed_since_then = 4 + 2\n    combined_future_age = combined_age_4_years_ago + 2 * years_passed_since_then\n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let's denote the smaller number as x and the bigger number as y.\n    # According to the problem statement, we have two equations:\n    # y - x = 39 (1)\n    # x + y = 59 (2)\n    # We can add both equations to eliminate y.\n    # (y - x) + (x + y) = 39 + 59\n    # 2y = 98\n    # y = 98 / 2\n    # y = 49\n    # Now we can substitute the value of y in equation (2) to find x.\n    # x + 49 = 59\n    # x = 59 - 49\n    # x = 10\n    # So the value of the smaller number is 10.\n    return 10\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    valid_solution = next(s for s in solutions if all(elem.is_real and elem > 0 for elem in s))\n\n    return sum(valid_solution)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after = x - 12 + y\n    return passengers_after\n\n# Example call to the function with hypothetical values of x and y\nx = 50  # Replace with any number of initial passengers\ny = 20  # Replace with any number of passengers getting on\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n\n    # Cora gives Qingle 8 sweets\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    # Solve the equations\n    solutions = solve((equation1), (cora, qingle))\n    \n    # Calculate the difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10):        # a cannot be 0 as we are dealing with a three-digit number (100a + 10b + c)\n        for b in range(10):       # b can be 0-9\n            for c in range(10):   # c can be 0-9\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0\n    b = 0\n    \n    # Now we use the point (4, 8) to solve for m\n    # y = mx + b, where y = 8, x = 4, and b = 0\n    x = 4\n    y = 8\n    m = y / x  # => m = 8 / 4\n    \n    # Now we construct the linear equation with our found values for m and b\n    linear_equation = f\"y = {m}x + {b}\"\n\n    return linear_equation\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    max_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n    \n    while warren_addition != 0:\n        current_number += warren_addition\n        max_number = max(max_number, current_number)\n        current_number -= naida_subtraction\n        warren_addition -= 1\n        naida_subtraction += 1\n        \n    return max_number\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the number of seashells Jane originally has\n    # Let e represent the number of seashells Eric originally has\n    j, e = symbols('j e')\n\n    # Jane has 5 seashells for every 7 seashells Eric has\n    equation1 = Eq(j, 5/7 * e)\n\n    # If Eric gives Jane 6 seashells, the ratio of Jane's to Eric's becomes 11/13\n    # (j + 6) / (e - 6) = 11 / 13\n    equation2 = Eq((j + 6) / (e - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, e))\n\n    # Calculate the total number of seashells they have together\n    total_seashells = solutions[j] + solutions[e]\n\n    return int(total_seashells)\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / combined_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    all_possible_numbers = sorted(\n        int(''.join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 == 0\n    )\n    for num in all_possible_numbers:\n        if len(str(num)) == 5:\n            return num\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "from sympy import factorint\n\ndef solution():\n    # Product of the numbers\n    product = 48 * 925 * 38 * 435\n    \n    # Prime factorization of the product\n    prime_factors = factorint(product)\n    \n    # The number of 0s at the end of the product will be determined by the powers of 2 and 5\n    # Since each 0 at the end is a result of 10, which is 2*5\n    num_twos = prime_factors.get(2, 0)\n    num_fives = prime_factors.get(5, 0)\n    \n    # The number of 0s will be the minimum of the powers of 2 and 5\n    num_zeros = min(num_twos, num_fives)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils // 4\n\n    neither = total_pupils - (piano_pupils + violin_pupils - piano_and_violin)\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n\n    total_amount = principal * (1 + interest_rate * time)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        if mother_age == 3 * (justin_age + years):\n            return years\n        years += 1\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    maths_A = 10\n    english_A = 15\n    both_A = 2\n    either_A = maths_A + english_A - both_A\n    return either_A\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "import sympy as sp\n\ndef solution():\n    # The area of the isosceles right triangle (1/2 * base * height)\n    area_triangle = sp.Rational(1, 2) * 2 * 2\n\n    # The area of the quarter circle with radius 1 (1/4 * pi * radius^2)\n    area_quarter_circle = sp.Rational(1, 4) * sp.pi * 1**2\n\n    # The probability is the ratio of the quarter circle area to the triangle area\n    probability = area_quarter_circle / area_triangle\n\n    return probability\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    subtracted_value = 10\n    divided_by = 3\n\n    initial_result = (final_result - subtracted_value) * divided_by\n\n    return initial_result\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    leave_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_drop_off_time = bus_catch_time + timedelta(minutes=18)\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Walking time before the bus\n    walking_time_before_bus = bus_catch_time - leave_school_time\n    # Walking time after the bus\n    walking_time_after_bus = home_arrival_time - bus_drop_off_time\n\n    # Total walking time in minutes\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n    total_walking_time_minutes = total_walking_time.total_seconds() / 60\n\n    return int(total_walking_time_minutes)\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers_sum = 5 * 7  # Mean * Number of Values\n    known_sum = 2 + 3 + 8 + 4 + 7 + 6\n    a = numbers_sum - known_sum\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    lhs = 2030452  # left hand side of the equation\n    # rhs = 2 * box + 30000 + 452, we need to find 'box'\n    box = (lhs - 30000 - 452) // 2\n    return box\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    percentage = 20\n    total = 8880\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    initial_length_cm = 150\n    cut_pieces = 2\n    length_per_piece_m = (initial_length_cm / cut_pieces) / 100\n\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure at least one pair of the same color:\n    # Worst case scenario: Lina gets 1 sock of each color (white, grey, black).\n    # Adding another sock guarantees a pair since there are only 3 colors.\n    worst_case_socks = 1 + 1 + 1 + 1  # +1 to guarantee a pair\n    return worst_case_socks\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    # We will try all possible values for the digits of ABCD.\n    for A in range(1, 10):  # As it's the first digit, it can't be 0.\n        for D in range(1, 10):  # Similarly, D can't be 0 – it's a digit of a 4-digit number.\n            if 4 * D == A:  # First digit is 1/4 of its last digit\n                B = A - 1  # Second digit is 1 less than its first digit\n                if B == 0:  # The digit B cannot be zero\n                    continue\n                C = 4 * B  # From the multiplication property\n                if C > 9:  # Digit C cannot be more than 9\n                    continue\n                ABCD = 1000 * A + 100 * B + 10 * C + D\n                DCBA = 1000 * D + 100 * C + 10 * B + A\n                if ABCD * 4 == DCBA:\n                    # Check if all digits are different\n                    if len(set(str(ABCD))) == 4:\n                        return ABCD\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    # Calculate the number of pupils in Victoria's row\n    pupils_in_row = 6 + 1 + 7  # 6 on left, Victoria herself, 7 on right\n\n    # Calculate the total number of rows\n    total_rows = 1 + 1 + 8  # 1 row in front, the row Victoria is in, 8 rows behind\n\n    # Calculate the total number of pupils\n    total_pupils = pupils_in_row * total_rows\n\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    num = symbols('num')\n    \n    # Set up the equation according to the problem statement\n    equation = Eq((num + 3) / 4 * 9, 81)\n    \n    # Solve the equation\n    solution = solve(equation, num)\n    \n    # solution is a list, we need to return the first element\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mr_smith_sugar = 300 * 0.50 + 600 * 0.20\n    mrs_smith_sugar = 700 * 0.10 + 300 * (x / 100)\n\n    mr_smith_total = 300 + 600\n    mrs_smith_total = 700 + 300\n\n    equation = Eq(mr_smith_sugar / mr_smith_total, mrs_smith_sugar / mrs_smith_total)\n\n    sol = solve(equation, x)\n    x_value = sol[0]\n\n    return round(x_value, 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    judy_initial_candy = 36\n    lily_candy = judy_initial_candy * (3/4)\n    remaining_candy = judy_initial_candy - lily_candy\n    brother_candy = remaining_candy * (1/3)\n    judy_final_candy = remaining_candy - brother_candy\n    return int(judy_final_candy)\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_initial = 6300  # distance at 8.00 am\n    distance_later = 1800    # distance at 8.30 am\n    time_initial = 8 * 60    # time at 8.00 am in minutes\n    time_later = (8 * 60) + 30  # time at 8.30 am in minutes\n\n    # Calculate the speed per minute\n    distance_traveled_in_30_min = distance_initial - distance_later\n    speed_per_minute = distance_traveled_in_30_min / (time_later - time_initial)\n    \n    # Calculate the time taken to travel the initial distance\n    total_time_to_travel_6300m = distance_initial / speed_per_minute\n    \n    # Calculate the arrival time in minutes since midnight\n    arrival_time = time_initial + total_time_to_travel_6300m\n    \n    # Convert arrival time to hours and minutes\n    arrival_hour = int(arrival_time // 60)\n    arrival_minute = int(arrival_time % 60)\n    \n    return arrival_hour, arrival_minute\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age_when_10 = 10\n    kenny_older_by = 2\n    three_times_may_age = 3 * may_age_when_10\n    total_age_kenny_and_brother = three_times_may_age\n    kenny_age_when_may_10 = (total_age_kenny_and_brother + kenny_older_by) / 2\n    may_current_age = 7\n    kenny_current_age = kenny_age_when_may_10 - (10 - may_current_age)\n    return kenny_current_age - may_current_age\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_money, donuts, muffins = symbols('total_money donuts muffins')\n\n    # Donuts and muffins prices\n    price_donuts = 10 / 7\n    price_muffins = 6 / 3 \n\n    # Equations based on the problem statement\n    equation1 = Eq(donuts * price_donuts, total_money / 2)\n    equation2 = Eq(muffins * price_muffins, total_money / 2)\n    equation3 = Eq(donuts - muffins, 54)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (total_money, donuts, muffins))\n\n    return solutions[total_money]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # cost price in pounds\n    selling_price_per_bag = 0.65  # selling price per bag in pounds\n    weight_per_bag = 0.25  # weight per bag in kg (250g = 0.25kg)\n    \n    # Total weight bought\n    total_weight = 5  # in kg\n    \n    # Number of bags\n    num_bags = total_weight / weight_per_bag\n    \n    # Total selling price\n    total_selling_price = num_bags * selling_price_per_bag\n    \n    # Total profit\n    profit = total_selling_price - cost_price\n    \n    # Profit percentage\n    profit_percentage = (profit / cost_price) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Start with the maximum number of apples one child can get\n    max_apples = 14\n    # Subtract minimum number of apples for the other children (1 each)\n    max_apples -= (5 - 1)\n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_between_teeth = 30 / (9 - 4)\n    total_length_mm = distance_between_teeth * (100 - 1)\n    total_length_cm = total_length_mm / 10\n    return total_length_cm\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total_sum = 46563 + 9785 + 859\n    return total_sum\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5!  # all possible ways without restrictions\n    adjacent_ways = 2 * 4!  # ways in which two specific people can stand next to each other\n\n    ans = total_ways - adjacent_ways  # all possible ways minus the ones where the two are adjacent\n    return ans\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Given that grandmother was 80 years old on 1st December 2008\n    grandmother_age_2008 = 80\n    # And mum was 40 years old on 1st December 1996\n    mum_age_1996 = 40\n    \n    # Calculate the year when mum was 25\n    year_when_mum_was_25 = 1996 - (40 - 25)\n    \n    # Calculate the difference in years between 2008 and the year when mum was 25\n    years_difference = 2008 - year_when_mum_was_25\n    \n    # Calculate grandmother's age when mum was 25\n    grandmother_age_when_mum_was_25 = grandmother_age_2008 - years_difference\n\n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    sold_monday = (2/3) * total_vegetables\n    remaining_after_monday = total_vegetables - sold_monday\n    sold_tuesday = (2/5) * remaining_after_monday\n    total_sold = sold_monday + sold_tuesday\n    \n    return total_sold\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum = 0\n    for i in range(1, 858, 5):\n        if i % 2 == 1:\n            sum += i\n        else:\n            sum -= i\n\n    return sum\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To ensure getting 16 balls of one color and 13 balls of another,\n    # we have to consider the worst case scenario using the Pigeonhole Principle.\n    \n    # The worst case would be picking balls in such a way that we almost pick\n    # the full count of each color without completing any set of 16 or 13.\n    # So we pick 15 balls of each color at first because picking the 16th would complete a set,\n    # and we want to avoid that in the worst case.\n    # Then we pick 12 more of any other color because picking the 13th would complete a set of 13.\n    \n    # Number of balls of each color\n    colors = [16, 26, 34, 24, 40]\n    \n    # Picking 15 of each color in the worst case\n    worst_case_picks = sum(c-1 for c in colors)  # c-1 because we only need 15 to not complete a set\n    \n    # Then we pick 12 more from the color with at least 13 balls (all have more than 13)\n    worst_case_picks += 12\n    \n    # The next ball picked will either complete the set of 16 or 13, hence ensuring the condition\n    worst_case_picks += 1  # The last pick that ensures we meet the condition\n    \n    return worst_case_picks\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend gets at least one ice-cream cone, we'll give one to each first.\n    remaining_cones = 5 - 3 # 3 cones have been given out, one to each friend.\n\n    # The problem now reduces to finding the number of ways to distribute the remaining\n    # 2 identical cones to the 3 friends. This is a classic stars and bars problem.\n\n    # The formula for distributing 'n' identical items to 'k' distinct bins, with\n    # no restriction is: (n + k - 1) choose (k - 1)\n\n    # Here, 'n' is replaced by the remaining_cones and 'k' is 3 (for the three friends).\n    # Hence, we want to calculate (remaining_cones + 3 - 1) choose (3 - 1)\n\n    # We'll use the `comb` function from `math` for the combinations calculation.\n    from math import comb\n    \n    # By substituting we get (2 + 3 - 1) choose (3 - 1) = 4 choose 2\n    num_ways = comb(4, 2)\n\n    return num_ways\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of water in containers P and Q\n    P, Q = symbols('P Q')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(P, 4 * Q)       # Container P has 4 times as much water as container Q\n    equation2 = Eq(P - Q, 2700)    # Container P contains 2700ml more water than container Q\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (P, Q))\n    \n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits / 4\n    left_with_freddie = total_biscuits - given_away\n    return left_with_freddie\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the cost of one table and c be the cost of one chair.\n    t, c = symbols('t c')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(2*t + 5*c, 220)  # 2 tables and 5 chairs cost £220\n    equation2 = Eq(t, 3*c)          # The cost of one table is the same as 3 chairs\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    money_spent = 1.55 + 2.25\n    money_left_fraction = 4 / 5\n    money_left = money_spent / (1 - money_left_fraction)\n    return money_left\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 75 * 0.40\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    difference = 5\n    lily_walk_time = hook_walk_time - difference\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n\n    total_coins = joann + sana + nancy\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    walked_distance = total_distance - remaining_distance\n\n    lucas_ratio = 3\n    mother_ratio = 5\n    total_ratio = lucas_ratio + mother_ratio\n\n    lucas_distance = walked_distance * (lucas_ratio / total_ratio)\n\n    return lucas_distance\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    # Using Arithmetic Sum formula: S_n = n/2 * (2*a1 + (n-1)*d)\n    sum_of_sequence = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_initial / people_initial\n    pizzas_needed = unit_rate * people_final\n\n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    num_rounds = 0\n    while num_teams > 1:\n        num_teams //= 2\n        num_rounds += 1\n    return num_rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n\n    limit = 2016\n    multiplier = 72\n    count = 0\n\n    # Loop through the numbers to find perfect squares after multiplying by 72\n    for number in range(1, limit + 1):\n        product = number * multiplier\n        sqrt_product = sqrt(product)\n        if sqrt_product == floor(sqrt_product):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = sum(solutions.values())\n\n    return total_earnings\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in the big class, y be the number of students in the small class\n    x, y = symbols('x y')\n\n    # Each student in the big class receives 2 apples\n    # Each student in the small class receives 2 apples\n    # Total apples given out is 48\n    equation1 = Eq(2 * x + 2 * y, 48)\n\n    # Each student in the big class receives 3 oranges\n    # Each student in the small class receives 2 oranges\n    # Total oranges given out is 55\n    equation2 = Eq(3 * x + 2 * y, 55)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return number of students in the small class\n    return solutions[y]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n\n    total_cost = cost_per_lollipop * number_of_lollipops\n\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of years needed for the ratio to be 5:3\n    x = symbols('x')\n    \n    # Let d and e be the current ages of Danny and Efron, respectively\n    d, e = symbols('d e')\n    \n    # First equation comes from the fact that Danny is 30 years older: d = e + 30\n    equation1 = Eq(d, e + 30)\n\n    # Second equation comes from the ratio of their ages: d/e = 8/3\n    equation2 = Eq(d/e, 8/3)\n\n    # Find the current ages of Danny and Efron\n    current_ages = solve((equation1, equation2), (d, e))\n\n    # Third equation is the ratio after x years: (d + x) / (e + x) = 5/3\n    equation3 = Eq((current_ages[d] + x) / (current_ages[e] + x), 5/3)\n\n    # Solve the equation for x\n    years = solve(equation3, x)\n\n    return years[0]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem description\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7) because one child had to sit out, and 7 - 1 = 6\n    # x ≡ 7 (mod 8) because one child had to sit out, and 8 - 1 = 7\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    butter_per_cookie = 40 / 100\n    butter_needed = butter_per_cookie * 150\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose_pencil_and_ruler = pencils * rulers\n    ways_to_choose_pencil_and_pen = pencils * pens\n    ways_to_choose_ruler_and_pen = rulers * pens\n\n    total_ways = ways_to_choose_pencil_and_ruler + ways_to_choose_pencil_and_pen + ways_to_choose_ruler_and_pen\n\n    return total_ways\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):\n        for second_digit in range(0, 10):\n            if (first_digit == 2*second_digit + 1):\n                for third_digit in range(0, 10):\n                    if 9 < (first_digit + second_digit + third_digit) < 14:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = (-6 / 6) == 6\n    return ans\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of games in the group stage\n    # Each group has 4 teams that play a single round-robin tournament\n    # Each team will play with every other team in the group once\n    # For a single group, there will be C(4, 2) matches\n    from math import comb\n\n    group_games_per_group = comb(4, 2)\n    total_group_games = group_games_per_group * 8  # 8 groups\n\n    # Number of games in the knockout round\n    # There are 16 teams entering the knockout round\n    # Knockout round consists of Round of 16, Quarter-finals, Semi-finals, Third place, and Final\n    # Each round halves the number of teams, leading to the number of matches played equal to the participating teams - 1\n    knockout_games = 16 - 1  # 15 matches including the third place play-off, but excluding the final\n\n    # Total number of games\n    total_games = total_group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # equations based on the given problem\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solving the system of equations for the price of one apple and one banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of the ball and racket\n    ball, racket = symbols('ball racket')\n    \n    # Equation for the total cost\n    equation1 = Eq(ball + racket, 30)\n    # Equation for the cost difference\n    equation2 = Eq(racket, ball + 28)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    # Return the cost of the ball\n    return solutions[ball]\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(n * (n - 1) / 2, 15)\n\n    solutions = solve(equation, n)\n\n    # Filter the positive solution because the number of teams cannot be negative\n    ans = [sol for sol in solutions if sol.is_real and sol > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    # Prime factor 224 to get the exponents of the prime factors\n    n = 224\n    factors = {}\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors[d] = factors.get(d, 0) + 1\n            n //= d\n        d += 1\n    if n > 1:\n       factors[n] = factors.get(n, 0) + 1\n\n    # Calculate the number of factors using the formula (exponent_1 + 1)*(exponent_2 + 1)*...\n    num_factors = 1\n    for exponent in factors.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / 0.7\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways = pencils * rulers * pens\n\n    return ways\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct in range(11):\n        wrong = 10 - correct\n        if 6 * correct - 2 * wrong == 44:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one pair of shorts and one T-shirt\n    shorts, tshirt = symbols('shorts tshirt')\n\n    # Set up equations based on the given information\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of triangles be x, thus quadrilaterals will be x + 82\n    # As there are 2 pentagons, each pentagon has 5 sides, so there are 10 sides from pentagons\n    # The total number of sides from triangles will be 3*x, and from quadrilaterals will be 4*(x + 82)\n    x = symbols('x')\n    equation = Eq(3*x + 4*(x + 82) + 10, 394)\n    \n    # Solve the equation for x\n    num_triangles = solve(equation, x)[0]\n    # Calculate the number of quadrilaterals\n    num_quadrilaterals = num_triangles + 82\n\n    return num_quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # Tens digit must be from 1 to 9\n        ones = tens - 3  # Ones digit is 3 less than tens digit\n        if 0 <= ones < 10:  # Check if ones digit is a valid single digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # After Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # After eating 8 sweets each, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # The total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # since there are 4 posts, there are 3 gaps between them\n\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # The least common multiple of 3, 5, and 7\n    lcm = 3 * 5 * 7\n    \n    # Loop through all multiples of lcm to find the three digit number starting with '6'\n    for i in range(lcm, 1000, lcm):\n        if str(i).startswith('6'):\n            ans = i\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # From the given conditions:\n    # Let's use the variable x for the number of all-boy teams\n    # Let g be the number of all-girl teams\n    # From condition (iii), we have x = 2g \n\n    # Total number of teams with at least one boy = 15 + 27\n    teams_with_boys = 15 + 27  # condition (i) + condition (ii)\n\n    # Total teams\n    total_teams = 150 // 3\n    \n    # The remaining teams are all-girl teams\n    g = total_teams - teams_with_boys\n\n    # Finding the number of all-boy teams from condition (iii)\n    x = 2 * g \n    \n    # The total number of teams is the sum of all scenarios\n    all_boy_teams = x\n    one_boy_teams = 15\n    two_or_more_boy_teams = 27\n    \n    # Calculate the number of boys and girls in the level\n    boys = all_boy_teams * 3 + one_boy_teams + two_or_more_boy_teams * 2\n    girls = 150 - boys\n    \n    return girls\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and Town B be d kilometers.\n    # If Ben cycles at 10 km/h and arrives at 10 am, let the time he starts be t hours.\n    # Distance = Speed * Time\n    # Therefore, d = 10 * (t + 2)\n    \n    # If he cycles at 15 km/h and arrives at 8 am, the time he starts is the same (t)\n    # So, d = 15 * t\n    \n    # Since both expressions equal the distance d, we have 10 * (t + 2) = 15 * t\n    # Simplify the equation and solve for t: 10t + 20 = 15t => 5t = 20 => t = 4 hours\n    \n    # If t = 4 hours, he starts at 4 am (since he arrives at Town B at 10 am after 6 hours riding at 10 km/h)\n    \n    # To arrive at 9 am, he wants to travel for 5 hours (from 4 am to 9 am).\n    # We already know the distance d = 15 * 4 (from the 15 km/h scenario)\n    d = 15 * 4\n    \n    # To find the speed to cover distance d in 5 hours, we use Speed = Distance / Time\n    speed_required = d / 5\n    \n    return speed_required\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pears, apples, peaches = symbols('pears apples peaches')\n    equation1 = Eq(apples, 5 + 6*pears)\n    equation2 = Eq(peaches, 3*pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n    \n    solutions = solve((equation1, equation2, equation3), (pears, apples, peaches))\n    \n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, perform the subtraction, then convert back to base 7\n    num1_base10 = int(str(61), 7)\n    num2_base10 = int(str(34), 7)\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result from base 10 back to base 7\n    if result_base10 == 0:\n        return '0'\n\n    digits = []\n    while result_base10 > 0:\n        digits.append(str(result_base10 % 7))\n        result_base10 //= 7\n    \n    ans = ''.join(reversed(digits))\n    return ans\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8  # 1 dog = 8 rabbits\n    rabbit_to_chicken = 2  # 1 rabbit = 2 chickens\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Maximum gloves that can be picked without having a matching pair:\n    # 3 blue gloves (max of one type of blue) + 4 green gloves (max of one type of green) + 1 (next glove will ensure a pair)\n    max_without_pair = 3 + 4 + 1\n\n    return max_without_pair\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # total candies before new student joins\n    new_student_count = 5 + 1  # total students after new student joins\n    new_candies_per_student = total_candies // new_student_count  # candies each student gets after redividing\n    return new_candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders and moduli for the congruences\n    congruences = [(3, 4), (4, 5), (6, 7)]\n\n    # Solve the system of congruences\n    least_num_cards, _ = solve_congruence(*congruences)\n\n    return least_num_cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    # As 1 depreciation step = 0.96 (100% - 4% depreciation), after 5 years the value is 0.96^5 * initial_value.\n    value_after_years = (0.96 ** years) * initial_value\n    \n    return value_after_years\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    for boys_layer in range(1, 100, 2):  # Assume a reasonable upper limit for school sizes\n        girls_layer = boys_layer + 1\n        boys_count = (boys_layer * 4) - 4 if boys_layer > 1 else 1\n        girls_count = (girls_layer * 4) - 4 if girls_layer > 1 else 0\n        diff = boys_count - girls_count\n        if diff == 52:\n            # Calculate total students by sum of squares\n            total_students = sum((4 * i - 4) if i > 1 else 1 for i in range(1, girls_layer + 1, 2))\n            total_students += sum((4 * i - 4) if i > 1 else 1 for i in range(2, boys_layer + 1, 2))\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna') \n    \n    equation1 = Eq(eugene, 3 * yuna)\n    equation2 = Eq(yuna + 76, (7/9) * (eugene))\n\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    # The word \"REVISE\" has 6 letters where \"E\" is repeated twice.\n    total_letters = 6\n    repeated_letters = 2  # The letter \"E\" is repeated.\n\n    # Calculate the total number of arrangements.\n    total_arrangements = factorial(total_letters) // factorial(repeated_letters)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n\n    number = hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4/7 * remaining_flowers\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    def mixed_to_fraction(whole, num, den):\n        return Fraction(whole * den + num, den)\n\n    # Numerator sum of mixed numbers\n    numerator_sum = (mixed_to_fraction(5, 1, 7) +\n                     mixed_to_fraction(3, 3, 11) +\n                     mixed_to_fraction(1, 13, 23))\n\n    # Denominator sum of mixed numbers\n    denominator_sum = (mixed_to_fraction(3, 3, 7) +\n                       mixed_to_fraction(2, 2, 11) +\n                       mixed_to_fraction(1, 1, 23))\n\n    # Final result\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To find a value of A such that the number is divisible by 9,\n    # we need to ensure the sum of the digits is divisible by 9.\n    digits_sum = 1 + 2 + 3 + 4 + 5  # Sum of the known digits\n    # Find the smallest A such that (digits_sum + A) is divisible by 9\n    for A in range(10):  # A can be any digit from 0 to 9\n        if (digits_sum + A) % 9 == 0:\n            # The last two digits of the six-digit number form a number itself.\n            # To find the remainder when this number is divided by 4,\n            # we only need to consider the last two digits, which are \"5A\".\n            remainder = int(str(5) + str(A)) % 4\n            return remainder\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure Kelly wins, she must force Dan into a position where\n    # no matter what he does, Kelly will be able to pick the last match.\n    # If Kelly leaves a number of matches that is multiple of 3 for Dan,\n    # she can always respond to Dan's move to maintain her winning position.\n    \n    # We can work backwards. If Kelly wants to be in a position where there is\n    # 1 match left after Dan's turn, she needs to leave 2 or 3 matches before\n    # Dan's turn. Because if there were 4 matches, Dan could still win by taking\n    # 1 or 3 matches respectively.\n    \n    # To leave 2 or 3 matches for Dan, Kelly needs to take away a certain number\n    # of matches so that the remaining number of matches (11 minus the number Kelly takes)\n    # is a multiple of 3. (Because whatever Dan takes, 1 or 2, Kelly can always take\n    # 2 or 1 to make the total taken in the round 3.)\n\n    # Since it's Kelly's first turn, she needs to reduce the total matches to 9\n    # (multiple of 3 and maximum she can achieve in her first move).\n    # So she must take away:\n    num_matches_to_take = 11 - 9\n\n    return num_matches_to_take\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    total_kids = 3\n    ans = math.factorial(total_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Assuming all vehicles are motorcycles with 2 wheels\n    # Then, each car that replaces a motorcycle adds 2 more wheels\n    # So, the number of cars would be the extra wheels divided by 2\n    motorcycles_wheels = 2 * total_vehicles\n    extra_wheels = total_wheels - motorcycles_wheels\n    cars = extra_wheels // 2\n\n    return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason = 20\n    jason += 18  # After receiving stickers from Nicole\n    # Let nicole_original represent the number of stickers Nicole originally had.\n    # jason - 5 is the number of stickers Nicole has after giving 18 to Jason\n    # Therefore, nicole_original - 18 is equal to jason - 5\n    nicole_original = jason - 5 + 18\n    return nicole_original\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for i in range(39):  # We can have at most 38 two-gram weights because 2 * 39 = 78 which is more than 77\n        for j in range(26):  # We can have at most 25 three-gram weights because 3 * 26 = 78 which is more than 77\n            if 2 * i + 3 * j == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n\n    # Convert total distance to meters\n    total_distance_m = total_distance_km * 1000\n\n    # The distance between two marshals is the total distance\n    # divided by the number of gaps between marshals\n    # There are num_marshals - 1 gaps\n    distance_between_marshals_m = total_distance_m / (num_marshals - 1)\n\n    return distance_between_marshals_m\n    \nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume = length * breadth * height\n    # Let's assume the original dimensions are 100% (1 in ratio terms)\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n    \n    # New dimensions after the changes:\n    new_length = original_length * 1.10  # Increased by 10%\n    new_breadth = original_breadth * 4/5  # Reduced to 4/5\n    new_height = original_height * 11/10  # New height to original height ratio is 11:10\n    \n    # New volume = new length * new breadth * new height\n    new_volume = new_length * new_breadth * new_height\n    \n    # Express the new volume as a percentage of its original volume\n    volume_percentage = (new_volume / (original_length * original_breadth * original_height)) * 100\n    \n    return volume_percentage\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n\n    speed_tired = 120  # meters per minute\n    time_tired = 8     # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize tile counts\n    red_tiles = 0\n    green_tiles = 0\n    # Calculate the total layers\n    layers = 0\n    while (layers + 1) * (layers + 1) <= 400:\n        layers += 1\n    # Loop through layers\n    for layer in range(1, layers + 1):\n        # Tiles in the current layer (4 sides of the layer, minus 4 corners counted twice)\n        tiles_in_layer = (layer * 4) - 4\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n    # Add the center tile if the number of layers is odd\n    if layers % 2 == 1:\n        red_tiles += 1\n    else:\n        green_tiles += 1\n    # Calculate tiles of the dominant color more than the other color\n    if red_tiles > green_tiles:\n        more_tiles = red_tiles - green_tiles\n    else:\n        more_tiles = green_tiles - red_tiles\n    return more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    \n    # First year interest\n    first_year_interest = principal * rate\n    new_balance = principal + first_year_interest\n    \n    # Second year interest\n    second_year_interest = new_balance * rate\n    \n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # 1 hour and 20 minutes\n    number_of_pictures = total_time_available / time_for_one_picture\n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    fraction = 1 + 4/7\n    return round(fraction, 1)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # The recurring sequence of digits in the decimal form of 3/7\n    index = (69 - 1) % len(recurring_sequence)  # -1 because the sequence starts right after the decimal point\n    ans = int(recurring_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014.\n    # Then Vastco sold 68% more, so Vastco sold x * 1.68 in 2014.\n    \n    # In 2015, Vastco's sales rose by 32%, so Vastco sold x * 1.68 * 1.32 in 2015.\n    # In 2015, Vastco sold 44% more widgets than Megacorp, so Megacorp sold (x * 1.68 * 1.32) / 1.44 in 2015.\n    \n    # We want to find the percentage increase for Megacorp, so we compare their sales in 2015 to sales in 2014.\n    # Let y be the percentage increase for Megacorp.\n    # Therefore, we have the equation: x * (1 + y/100) = (x * 1.68 * 1.32) / 1.44.\n    # Solving for y gives us the percentage increase.\n\n    # Resolving the equation for y gives:\n    y = (1.68 * 1.32 / 1.44 - 1) * 100\n\n    return y\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    samantha_left = y / 2\n    return samantha_left\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let's assume the cost price of the goods is $100\n    # Planned profit is 50%, so the planned selling price is $150\n    # On the first day, he sold 70% of his goods at a profit of 50%\n    # So, the selling price for 70% of the goods is 70% of $150 = $105\n    # With a 50% profit margin, the cost for the 70% goods is 70% of $100 = $70\n    # Hence the actual profit for the first day is $105 - $70 = $35\n\n    # Total planned profit is $50\n    # He achieved 82% of his planned profit which is $50 * 0.82 = $41\n    # He has already made a $35 profit on the first day\n    # Thus, the profit on the second day should be $41 - $35 = $6\n\n    # The remaining goods are 30% of his stock, which is 30% of $100 = $30 at cost price\n    # He needs to make a $6 profit on these goods, so the selling price should be $30 + $6 = $36\n\n    # The selling price for the remaining 30% goods without a discount would have been 30% of $150 = $45\n    # So, the discount rate on the second day is: (($45 - $36) / $45) * 100%\n    discount_rate = ((45 - 36) / 45) * 100\n\n    return discount_rate\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from itertools import combinations\n\n    def is_valid_combination(ages):\n        sons, daughters = sorted(ages[:2]), sorted(ages[2:])\n        return sons[1] - sons[0] == 3 and daughters[1] - daughters[0] == 2 and sons[0] == 2 * daughters[1]\n\n    # all possible ages from 1 to 55 (assuming the youngest child is at least 1)\n    possible_ages = range(1, 55)\n    \n    # find all combinations of 4 different ages that add up to 55\n    valid_combinations = [\n        ages for ages in combinations(possible_ages, 4)\n        if sum(ages) == 55 and is_valid_combination(ages)\n    ]\n\n    # the youngest child's age is the minimum age in the valid combinations\n    youngest_child_age = min(min(combo) for combo in valid_combinations)\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles, leftover = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + leftover\n        if empty_bottles == 3:  # Borrow one bottle\n            total_bottles += 1\n            empty_bottles = 0  # After borrowing and returning the bottle\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Digits for numbers 1-9\n    digits_1_9 = 9 * 1\n    \n    # Digits for numbers 10-99\n    digits_10_99 = (99 - 10 + 1) * 2  # From 10 to 99, inclusive\n    \n    # Digits for numbers 100-113\n    digits_100_113 = (113 - 100 + 1) * 3  # From 100 to 113, inclusive\n    \n    # Total number of digits\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let x be the original number of pearls on the strand\n    x = symbols('x')\n\n    # Half of the pearls fell onto the floor -> x/2\n    # A fourth rolled under a chair -> x/4\n    # A sixth fell into her lap -> x/6\n    # Three pearls remained on the strand -> 3\n    # The sum of all these should be equal to the original number x\n    equation = Eq(x/2 + x/4 + x/6 + 3, x)\n\n    # Solve the equation for x\n    sol = solve(equation, x)\n\n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done = workers * days  # Total amount of work done in worker-days\n\n    # Now we find out how many days 1 worker would take\n    days_for_one_worker = work_done / 1  # Divide the total work by 1 worker\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from itertools import permutations\n\n    # Consider the 3 entrances as A, B, C.\n    # And we need at least one person at each entrance, then we set ABC as the minimum requirement.\n    people = 'ABC'\n    # Since we also have a fourth person (we'll call that person 'D'), \n    # we account for the ways to assign this person to one of the three entrances.\n    possible_permutations = set(permutations(people + 'D', 4))\n    # The number of different ways is simply the number of unique permutations.\n    count = len(possible_permutations)\n\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    # Let's denote the number of erasers John's brother has as x.\n    # According to the problem, John has x + 32 erasers.\n    # The sum of the erasers John and his brother have is x + (x + 32).\n    # So, we can create the equation: 2x + 32 = 246.\n\n    # Solving for x gives us the number of erasers John's brother has.\n    x = (total_erasers - difference) // 2\n\n    return x\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit = 92\n    safe_delivery_profit = 1\n    broken_glass_cost = -1\n    \n    # Assume all glasses were delivered safely\n    max_profit = total_glasses * safe_delivery_profit\n    \n    # Calculate number of broken glasses\n    num_broken_glasses = (max_profit - profit) / 2  # Divide by 2 since each broken glass results in losing $2 ($1 profit and $1 penalty)\n\n    return int(num_broken_glasses)\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from math import sqrt\n\n    # In a round-robin tournament, each team plays every other team exactly once.\n    # The total number of matches that are played is given by C(n, 2) = n(n - 1) / 2,\n    # where n is the number of teams and C(n, 2) is the number of ways to choose 2 teams from n.\n    # So, we solve the equation n(n - 1) / 2 = 45 for the positive integer n.\n    \n    # This simplifies to the quadratic equation n^2 - n - 2 * 45 = 0\n    # Using the quadratic formula (ignoring the negative root because the number of teams can't be negative):\n    n = (1 + sqrt(1 + 4 * 2 * 45)) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Let's denote Mayank's original number as x.\n    # According to the problem, he doubles the number and adds 4 to get 40.\n    # So the equation is: 2*x + 4 = 40\n\n    # Now we will solve the equation for x\n    # First, we subtract 4 from both sides of the equation:\n    # 2*x = 36\n    \n    # Next, we divide both sides by 2 to solve for x:\n    # x = 18\n    \n    # Mayank's original number is 18\n    return 18\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    change = (12 * 100) - total_cost  # Convert £12 to pence for subtraction\n    return change / 100  # Convert the change back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57, 2):\n        if i + (i + 2) + (i + 4) == 57:\n            return i\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for x in [2, 6, 1, 10, 5, 3]:\n        if x * 3 == 6:\n            ans = x\n            break\n\n    return ans\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let x be the initial number of boats and y be the number of people in each boat.\n    # We set up two equations based on the two scenarios provided:\n    # (x - 1) * 9 = x * y   (1) If the number of boats reduces by 1, then each boat takes exactly 9 people.\n    # (x + 1) * 6 = x * y   (2) If the number of boats increases by 1, then each boat takes exactly 6 people.\n    # We need to solve this system of equations to find the number of people in the whole class.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # Equation (1)\n    equation1 = Eq((x - 1) * 9, x * y)\n    # Equation (2)\n    equation2 = Eq((x + 1) * 6, x * y)\n\n    # Solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    # Extract the solutions for x and y\n    x_value = solutions[x]\n    y_value = solutions[y]\n\n    # Number of people in the whole class is the product of x and y values\n    number_of_people = x_value * y_value\n\n    return number_of_people\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # Dividing by factorial of number of items (3!) to account \n                       # for indistinct solutions since order doesn't matter\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, peter = symbols('john peter')\n    \n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(4/5 * john, 1/2 * (peter - 3/10 * peter))\n    \n    solutions = solve((equation1, equation2), (john, peter))\n    \n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = set(range(8, 16, 4)) # Numbers between 5 and 15 that are multiples of 4\n    factors_of_36 = set(i for i in range(1, 37) if 36 % i == 0) # Factors of 36\n\n    # The number must be both a multiple of 4 and a factor of 36\n    ans = multiples_of_4.intersection(factors_of_36)\n    \n    return next(iter(ans)) # Return the number, as there should be only one in the intersection\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    # Initial average for 4 tests\n    initial_average = 60\n    total_marks_initial = initial_average * 4\n    \n    # Score for the fifth test\n    fifth_test_score = 70\n    \n    # Total marks including the fifth test\n    total_marks_now = total_marks_initial + fifth_test_score\n    \n    # New average after 5 tests\n    new_average = total_marks_now / 5\n    \n    return new_average\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')  # Start with an infinitely large sum\n\n    for perm in permutations(digits, 4):  # Generate all permutations of the 4 digits\n        number1 = perm[0] * 10 + perm[1]  # Create the first 2-digit number\n        number2 = perm[2] * 10 + perm[3]  # Create the second 2-digit number\n        current_sum = number1 + number2  # Calculate the sum of the two numbers\n        \n        if current_sum < min_sum:\n            min_sum = current_sum  # Update min_sum if the current sum is smaller\n            \n    return min_sum\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples = (total_horses * apples_per_horse +\n                    total_pigs * apples_per_pig +\n                    total_rabbits * apples_per_rabbit)\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if int(str_num[2]) == int(str_num[0]) + int(str_num[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    total_money = 590\n    benson_spent = 74\n    jayden_spent = 120\n    \n    benson_left = total_money - benson_spent - jayden_spent\n    jayden_left = benson_left / 3\n\n    return jayden_left\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n    discount1_threshold = 5\n    discount1_rate = 0.1\n    discount2_threshold = 10\n    discount2_rate = 0.2\n    \n    total_full_price = full_price_per_cup * number_of_cups\n    \n    if number_of_cups < discount1_threshold:\n        discount = 0\n    elif number_of_cups < discount2_threshold:\n        discount = total_full_price * discount1_rate\n    else:\n        discount = total_full_price * discount2_rate\n    \n    total_price = total_full_price - discount\n    \n    return total_price\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    # Let the number of students in Class B be x\n    # Then the number of students in Class A will be x + 3\n    # Total peaches when given to Class A: 5*(x+3) + 10\n    # Total peaches when given to Class B: 8*x - 2\n    # Since both expressions represent the total peaches, they are equal\n    # Setting up the equation: 5*(x+3) + 10 = 8*x - 2\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*(x+3) + 10, 8*x - 2)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    # Find the total number of peaches\n    peaches = 5*(solution_x[0] + 3) + 10\n\n    return peaches\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    sum_last_5 = sum(int('2'*i) for i in range(1, 2018)) % 100000\n    return sum_last_5\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3 / 4\n    water_amount = total_drink * water_fraction\n    return water_amount\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    own_dog = 100\n    own_goldfish = 14\n    own_both = 9\n\n    own_neither = total_pet_owners - (own_dog + own_goldfish - own_both)\n\n    return own_neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    glass_size = 300\n\n    raspberry_juice = (raspberry_part / total_parts) * glass_size\n\n    return raspberry_juice\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    kevin_speed = symbols('kevin_speed')\n    betty_speed = symbols('betty_speed')\n    betty_lead_time = symbols('betty_lead_time')\n\n    # Equations based on the problem statement\n    # Betty's distance to the grocery store\n    equation1 = Eq(betty_speed * 6, kevin_speed * betty_lead_time)\n    # Kevin has walked 150 meters when Betty is at the grocery store\n    equation2 = Eq(kevin_speed * betty_lead_time, 150)\n    # After 3 more minutes, Kevin arrives at the grocery store and Betty is 900 meters away from the cinema\n    equation3 = Eq(kevin_speed * (betty_lead_time + 3), betty_speed * 6)\n    # Betty is 900 meters away from the cinema (initial distance + walked in 9 minutes)\n    equation4 = Eq(betty_speed * (6 + 3), 900)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (kevin_speed, betty_speed, betty_lead_time))\n\n    return solutions[betty_lead_time]\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # As the whole number in each box is the same, we can represent it as x.\n    # Thus the equation is x*x + x = 380.\n    # We can rearrange this to form a quadratic equation: x^2 + x - 380 = 0\n    from sympy import symbols, solve\n    \n    # Define the variable x as a symbol\n    x = symbols('x')\n    # Define the equation\n    equation = x**2 + x - 380\n    # Solve the quadratic equation for x\n    solutions = solve(equation, x)\n    \n    # We are looking for a whole number solution\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ]
}