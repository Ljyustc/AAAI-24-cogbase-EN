{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15  # upper limit of the sequence\n    n_start = 5  # starting number of the sequence\n    sum_to_n = n*(n+1)*(2*n+1)//6  # sum of squares formula for 1^2 + 2^2 + ... + n^2\n    sum_to_start_minus_one = (n_start-1)*(n_start)*(2*(n_start-1)+1)//6  # sum of squares up to the number before the starting number\n    ans = sum_to_n - sum_to_start_minus_one  # required sum is the difference between the two sums\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "from datetime import datetime\n\ndef solution():\n    format = \"%H:%M\"\n    start_time = datetime.strptime(\"9:00\", format)\n    end_time = datetime.strptime(\"10:00\", format)\n    duration = end_time - start_time\n    return duration.seconds // 60  # Convert to minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6  # 60% left after buying the skirt\n    initial_amount = remaining_after_bag / 0.8  # 80% left after buying the bag\n    return initial_amount\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John.\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples.\n    # According to the problem, Amy will have 4 more apples than John:\n    # amy - x = john + x + 4\n\n    # Solve for x\n    x = (amy - john - 4) / 2\n\n    return x\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # Assuming the number of students won't exceed 10000\n        original_square = n**2\n        new_square = (n + 1)**2\n        if new_square - original_square == 26 and original_square % n == 5:\n            return original_square\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n_pots = 9  # total number of different potted plants\n    r_pots = 4  # number of potted plants to arrange in a row\n\n    arrangements = factorial(n_pots) // factorial(n_pots - r_pots)\n\n    return arrangements\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # If Fred needs to ensure his win, he should aim to leave a multiple of 4 for George.\n    # That way, no matter if George takes 1, 2, or 3 oranges, Fred can take the remaining\n    # to make the total taken in the round a 4.\n    # Since there are 15 oranges, Fred should take away oranges so that 12 remain, since\n    # 12 is a multiple of 4.\n    oranges_to_take = 15 % 4  \n\n    return oranges_to_take\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n\n    # Let c1 be the cost of the house on which the owner made a profit\n    # Let c2 be the cost of the house on which the owner had a loss\n\n    # We have sale_price = c1 * (1 + profit_rate)\n    # => c1 = sale_price / (1 + profit_rate)\n    c1 = sale_price / (1 + 0.10)\n\n    # Similarly, sale_price = c2 * (1 - loss_rate)\n    # => c2 = sale_price / (1 - loss_rate)\n    c2 = sale_price / (1 - 0.10)\n\n    # The overall profit or loss is the sale prices minus the cost prices\n    total_profit_or_loss = (sale_price * 2) - (c1 + c2)\n\n    return total_profit_or_loss\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n    \n    solutions = solve(equation, tom_age)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # combinations wearing a shirt and pants (with either shoes or heels for the dress)\n    shirt_pants_combinations = shirts * pants * shoes\n\n    # combinations wearing a dress with shoes\n    dress_shoes_combinations = dresses * shoes\n\n    # combinations wearing a dress with heels\n    dress_heels_combinations = dresses * heels\n\n    total_combinations = shirt_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n    ans = '3/20' if fraction_value > decimal_value else '0.16'\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # A should stand in the middle of B and C, which implies that we have two cases: BACD.. or CADB..\n    # For each case, we permute the remaining three choices for the other positions\n    from itertools import permutations\n    # First, fix BAC\n    for perm in permutations(['B', 'A', 'C', 'D', 'E']):\n        if perm.index('A') == (perm.index('B') + perm.index('C')) // 2:\n            count += 1\n    # Second, fix CAD\n    for perm in permutations(['C', 'A', 'B', 'D', 'E']):\n        if perm.index('A') == (perm.index('C') + perm.index('B')) // 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Jogging time in hours (from 6.30 am to 8.30 am)\n    jogging_time = 2\n    # Walking time in hours (from 8.30 am to 9.30 am)\n    walking_time = 1\n\n    # Jogging speed in kilometres per hour\n    jogging_speed = 8\n    # Walking speed in kilometres per hour (half of jogging speed)\n    walking_speed = jogging_speed / 2\n\n    # Distance travelled during jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance travelled during walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of each note as 'n'\n    n = symbols('n')\n\n    # Let's set up the equation: 5n + 10n + 20n = 280\n    equation = Eq(5*n + 10*n + 20*n, 280)\n\n    # Now solve the equation to find the value of 'n'\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n    \n    def square(M, N):\n        return 8 * M - N * N\n    \n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2 = (2 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n\n    ans = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n    \n    p = 2  # start checking from the first prime\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Initially, start by giving 1 marble to each pile to ensure they are different\n    piles = [1, 2, 3, 4]  # The smallest sequence of different numbers\n    remaining_marbles = 16 - sum(piles)  # Subtract the base marbles from 16\n\n    # Since we want the smallest possible number for the biggest pile,\n    # we should distribute the remaining marbles starting from the smallest pile\n    while remaining_marbles > 0:\n        for i in range(len(piles)):\n            if remaining_marbles > 0:\n                piles[i] += 1\n                remaining_marbles -= 1\n            else:\n                break\n\n    # The biggest pile is the last one after distribution\n    largest_pile = piles[-1]\n    return largest_pile\n\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # This is because we are only summing the squares of odd numbers up to 19\n    ans = (1/6) * n * (n + 1) * (2*n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "import math\n\ndef solution():\n    total_students = 92\n    minibus_capacity = 6\n    \n    return math.ceil(total_students / minibus_capacity)\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1) + Fraction(1, 2) + Fraction(1, 3) + Fraction(1, 4) + Fraction(1, 5)\n    result = result * Fraction(60, 1)  # Convert the result to have a denominator of 60\n    return result.numerator  # We only need the numerator for the value of A\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Danny takes 12 minutes to go from the first to the fourth floor.\n    # This means he crosses 3 intervals (1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    # Assuming a constant speed, each interval takes an equal amount of time.\n    # So we divide the total time by the number of intervals to find the time for one interval.\n    \n    total_time = 12  # Total time to go from the first to fourth floor.\n    intervals = 3  # Number of intervals between four floors.\n    \n    # Calculate time for one interval (from the first to the second floor).\n    time_per_interval = total_time / intervals\n    \n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n ** 2 + (n + 1) ** 2) / (n * (n + 1))\n    \n    ans = round(total)\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls in the class.\n    # The total height with the incorrect recording was then n * 159\n    # The total height without the incorrect recording should have been n * 163\n    # Given that the incorrect recording was 126 instead of 162, the difference is 162 - 126 = 36\n    # This difference of 36 affected the total sum, so we know that n * 163 - n * 159 = 36\n    # Simplify to get n * (163 - 159) = 36 --> n * 4 = 36 --> n = 36 / 4\n\n    n = 36 / 4\n    return int(n)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 * 25 / 100\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    # Define the numbers to calculate\n    product = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10\n    return product\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    sum_of_cubes = sum(i**3 for i in range(1, 14, 2))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for b in range(199, 0, -1):\n        ans = hash_op(ans, b)\n\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    \n    num_containers = (apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for Ken's and Beth's seashells\n    ken, beth = symbols('ken beth')\n    \n    # Ken had $75 more seashells than Beth\n    equation1 = Eq(ken, beth + 75)\n    \n    # $\\frac{4}{5}$ of Beth's seashells = $\\frac{2}{5}$ of Ken's seashells\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (ken, beth))\n    \n    # Calculating the total number of seashells they had altogether\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "import math\n\ndef solution():\n    ribbon_lengths = [56, 42, 84]\n    gcd_value = math.gcd(ribbon_lengths[0], math.gcd(ribbon_lengths[1], ribbon_lengths[2]))\n    return gcd_value\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_num = 9876543\n    ans = original_num + 10000\n    return ans\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square_root = int((cube - 2) ** 0.5)\n        square = square_root ** 2\n        if cube - square == 2:\n            return square\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of $10 notes, and s be the number of $2 notes.\n    t, s = symbols('t s')\n\n    # Total notes condition\n    equation1 = Eq(t + s, 40)\n\n    # Spent notes condition\n    # After spending, David has 60% of the $10 notes and 75% of the $2 notes left.\n    # The remaining $10 notes is (4/5) times the remaining $2 notes.\n    equation2 = Eq(0.6 * t, 0.75 * s * (4/5))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, s))\n\n    # Calculate the number of notes before spending\n    ten_notes_before = solutions[t]\n    two_notes_before = solutions[s]\n\n    # Calculate the number of notes after spending (40% of $10 notes and 25% of $2 notes)\n    ten_notes_after = ten_notes_before * 0.6\n    two_notes_after = two_notes_before * 0.75\n\n    # Calculate the total amount spent\n    spent_tens = ten_notes_before - ten_notes_after\n    spent_twos = two_notes_before - two_notes_after\n\n    cost = spent_tens * 10 + spent_twos * 2\n\n    return cost\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7  # The sequence is the sum of numbers from 1 to 9, plus an extra 7\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    from math import factorial\n\n    # After giving each child 2 oranges, we have 13 - 2*3 = 7 oranges left to distribute.\n    remaining_oranges = 13 - 3 * 2\n    \n    # We need to find the number of solutions to the equation x1 + x2 + x3 = 7\n    # where x1, x2, x3 represents the number of remaining oranges given to each kid.\n    # This is a problem of distributing 'remaining_oranges' indistinguishable items into 3 distinguishable bins.\n    # The formula to calculate this is: C(n+k-1, k-1), where n is the number of items and k is the number of bins.\n    # In our case n = 7 (remaining_oranges) and k = 3.\n    \n    # Calculate the number of ways using combinations C(n+k-1, k-1).\n    ans = factorial(remaining_oranges + 3 - 1) // (factorial(3 - 1) * factorial(remaining_oranges))\n    \n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the two original numbers such that x + y = 11.63\n    x, y = symbols('x y')\n    \n    # The equation due to the accidental shift of the decimal point\n    # One number is divided by 10 when its decimal point is shifted to the left\n    shifted_sum_eq = Eq(x + y/10 , 5.87)\n    \n    # The equation for the sum of the numbers\n    original_sum_eq = Eq(x + y , 11.63)\n    \n    # Solving the two equations\n    solutions = solve((shifted_sum_eq, original_sum_eq), (x, y))\n    \n    # The difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n    \n    # Return one hundred times the difference\n    return 100 * difference\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bill, son, father = symbols('bill son father')\n    \n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    sally, john = symbols('sally john')\n\n    # Equation for their ages in 3 years\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    \n    # Equation for their current total age\n    equation2 = Eq(sally + john, 50)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    common_difference = 3\n    num_days = 7\n\n    # Using the formula for the sum of an arithmetic sequence\n    # sum = n/2 * (2a + (n - 1)d)\n    ans = num_days / 2 * (2 * first_day + (num_days - 1) * common_difference)\n    return int(ans)\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    harry, liam = symbols('harry liam')\n    \n    equation1 = Eq(harry + liam, 640)  # total amount of water\n    equation2 = Eq(harry + 90, 3 * (liam - 90))  # after transferring 90ml of water\n    \n    solutions = solve((equation1, equation2), (harry, liam))\n    \n    return solutions[harry]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # A four-digit number can't start with zero\n            continue\n        PASO = 1000 * P + 100 * A + 10 * S + O\n        SO = 10 * S + O\n        APA = 100 * A + 10 * P + A\n        \n        # Given P + APA + SO = PASO \n        # => P + (100A + 10P + A) + (10S + O) = 1000P + 100A + 10S + O\n        # => P + 100A + 10P + A + 10S + O = 1000P + 100A + 10S + O\n        # => 11P + 101A + 10S = 1000P\n        # 1000P - 11P = P * 989 = 101A + 10S\n        # Here P must be 1 because if P > 1 then 989*P will be a number which has its thousands digit as 9 which is not possible\n        # for four-digit numbers\n        if P == 1 and (1000 * P - 11 * P) == 101 * A + 10 * S:\n            ans = PASO\n            return ans\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let the rate at which the man drinks be m barrels per day \n    # and the rate at which his wife drinks be w barrels per day.\n\n    # The man can finish the barrel on his own in 15 days,\n    # so his rate m is 1 barrel per 15 days, m = 1/15.\n\n    # Together, they can finish the barrel in 12 days,\n    # so the combined rate (m + w) is 1 barrel per 12 days, m + w = 1/12.\n\n    # We want to find out how many days it would take his wife alone to finish,\n    # so we solve for w, where 1/w is the number of days it would take his wife.\n\n    # From the first info we know that m = 1/15\n    m = 1 / 15\n\n    # From the second info we know that m + w = 1/12\n    # now we solve for w\n    w = (1 / 12) - m\n\n    # Now we find the number of days it would take his wife alone to finish\n    # which is 1 / w\n    return 1 / w\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return (2 ** 10) % 3\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    # Total count of all possible ways to pick the balls\n    total_count = 0\n    \n    # Iterate through the range of remaining white balls (min 3, max 8)\n    for white_left in range(3, 9):\n        # Iterate through the range of remaining red balls (min 2, max 5)\n        for red_left in range(2, 6):\n            # Calculate how many black balls can be left\n            # We need to ensure we pick a total of 10 balls\n            # So if w white and r red balls are left, we picked (9-w) white and (5-r) red\n            # The total picked must be 10, so black picked is 10 - (9-w) - (5-r)\n            black_left = 10 - (9 - white_left) - (5 - red_left)\n\n            # If the calculated black_left is within the bounds [2,6], then we proceed\n            if 2 <= black_left <= 6:\n                # Calculate the combination of picking (9-white_left) white, (5-red_left) red, and (6-black_left) black\n                ways_to_pick = comb(9, 9 - white_left) * comb(5, 5 - red_left) * comb(6, 6 - black_left)\n                # Add to the total count\n                total_count += ways_to_pick\n\n    return total_count\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Using formula for the nth term of an arithmetic sequence: an = a1 + (n - 1)d\n    # where an is the nth term, a1 is the first term, n is the term number, and d is the common difference\n    # Given three terms (9 to 10, 10 to 11, 11 to 12 o'clock) and their respective beans quantities:\n    # a3 = 20 beans (9 to 10 o'clock is the third hour),\n    # a4 = 28 beans (10 to 11 o'clock is the fourth hour),\n    # a5 = 36 beans (11 to 12 o'clock is the fifth hour),\n    # we need to find a1 (the first hour, 7 to 8 o'clock).\n    \n    # We can find the common difference by subtracting a4 from a5 (or a3 from a4):\n    d = 36 - 28  # Common difference is the increment in the number of beans peeled every hour\n    \n    # Now we find the first term using the nth term formula:\n    # a1 = a5 - (5 - 1)d\n    a1 = 36 - (5 - 1) * d  # Here, 5 represents the term number for a5\n\n    return a1\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let the original number of pearls be x\n    # According to the problem:\n    # floor = x / 2\n    # chair = x / 4\n    # lap = x / 6\n    # strand = 3\n    # floor + chair + lap + strand = x\n    # (x / 2) + (x / 4) + (x / 6) + 3 = x\n    # Multiply all terms by 12 (the LCM of 2, 4, 6) to clear the fractions:\n    # 6x + 3x + 2x + 36 = 12x\n    # 11x + 36 = 12x\n    # x = 36\n    return 36\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    # This sequence is not a geometric sequence, but rather follows a pattern\n    # where the difference between consecutive terms increases by 2 each time.\n    # 1, 3, 7, 13, 21, ...:\n    # Differences: 2, 4, 6, 8, ...\n    # We need to find the largest two-digit term in the sequence.\n\n    term = 1  # The first term\n    difference = 2  # The difference starting from the first term\n\n    # Continue generating terms until the next term is a three-digit number\n    while True:\n        if term + difference < 100:\n            term += difference\n            difference += 2\n        else:\n            break\n\n    return term\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    remaining_mass = initial_mass - mass_given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The arithmetic mean of three numbers is 120\n    # Therefore, the sum of the first three numbers is 3 * 120\n    sum_first_three = 3 * 120\n    \n    # With the fourth number added, the mean of four numbers becomes 150\n    # Therefore, the sum of all four numbers is 4 * 150\n    sum_all_four = 4 * 150\n    \n    # The fourth number is the difference between the sum of all four and the sum of the first three\n    fourth_number = sum_all_four - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n    \n    empty_basket_weight = half_full_weight - mangoes_half_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate the common difference\n    difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the arithmetic sequence nth term formula\n    last_term = first_term + (total_rows - 1) * difference\n    \n    # Calculate total number of athletes using arithmetic sum formula\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, so there are 5 people ahead of Pip.\n    people_ahead_of_pip = 5\n\n    # Bud is 6th from the end, so there are 5 people behind Bud.\n    people_behind_bud = 5\n\n    # There are 5 children in the queue from Pip to Bud, not including Pip and Bud.\n    # Therefore, to include Pip and Bud, add 2 to the count.\n    children_between_pip_and_bud = 5 + 2\n\n    # Total number of children in the queue is the sum of:\n    # people ahead of Pip, people behind Bud, and the children between Pip and Bud.\n    total_children = people_ahead_of_pip + people_behind_bud + children_between_pip_and_bud\n\n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The conditions are the first number is a multiple of 7, the second one of 8, and the third one of 9.\n    # Since they are consecutive even numbers, we can say:\n    # first number = 2a, where 2a % 7 == 0\n    # second number = 2a + 2, where (2a + 2) % 8 == 0\n    # third number = 2a + 4, where (2a + 4) % 9 == 0\n\n    # Rearrange each condition to match the form of congruences: x = b (mod m)\n    # first number congruence: 2a = 0 (mod 7) => a = 0 (mod 7/2)\n    # second number congruence: 2a + 2 = 0 (mod 8) => a = -1 (mod 4)\n    # third number congruence: 2a + 4 = 0 (mod 9) => a = -2 (mod 9/2)\n    # We need to multiply each congruence by the mod inverse to get them in standard form.\n    # The -1 and -2 can simply be adjusted by adding multiples of the mod value.\n\n    congruences = [(0, 7), (-1, 4), (-2, 9)]\n\n    # Use the Chinese Remainder Theorem to find 'a' that satisfies all three congruences\n    a_val, _ = solve_congruence(*congruences)\n\n    # Calculate the actual numbers based on 'a'\n    first_num = 2 * a_val\n    second_num = first_num + 2\n    third_num = first_num + 4\n\n    # Return the sum of the three numbers\n    return first_num + second_num + third_num\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    ans = (3+3+3+3+3+3+3+3) // 3\n    return ans\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_family = 29 * 6  # Average age times the number of family members\n    total_age_parents = total_age_family - 64  # Subtract total age of children from total family age\n    average_age_parents = total_age_parents / 2  # Average age of parents (assuming there are 2 parents)\n    average_age_parents_3_years_ago = average_age_parents - 3  # Average age of parents 3 years ago\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # Calculate the number of intervals between papers\n    intervals = 18 // 3\n    # Calculate the number of leaves, which is the same as the number of intervals\n    leaves = intervals\n    return leaves\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_taken = 5\n    total_paintings = 56\n\n    paintings_per_day = paintings_done / days_taken\n    remaining_paintings = total_paintings - paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    nth_term = lambda a, d, n: a + (n - 1) * d  # Nth term of an arithmetic progression\n    a5 = 8  # Given 5th term\n    a12 = 50  # Given 12th term\n    # a5 = a + 4d, a12 = a + 11d -->  a12 - a5 = 50 - 8 = 42 = 7d\n    common_difference = (a12 - a5) / (12 - 5)\n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Utilize the distributive property of multiplication over addition\n    # a * (b + c + d) = a * b + a * c + a * d\n    # Here, a = 95, b = 37, c = 42, d = 21\n    \n    a = 95\n    b = 37\n    c = 42\n    d = 21\n\n    ans = a * (b + c + d)\n\n    return ans\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest = min(numbers, key=lambda x: abs(x - 0.1))\n\n    return closest\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Initial values of the arithmetic progression\n    first_term = 2\n    diff = 3\n\n    # Count how many times we can carry out the process \n    # of erasing the first three numbers and adding their sum to the end\n    n = 242\n    count = 0\n    while n >= first_term + 2 * diff:\n        n -= 3\n        count += 1\n\n    # The second number after the final iteration\n    # is the initial second number plus the number of iterations times the difference\n    second_number = first_term + diff + count * diff\n\n    return second_number\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 3 * x + 2, 30 + 6 * x - 8 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    from itertools import combinations\n\n    # The times it takes for each person to row the boat\n    times = [7, 9, 4, 10]\n\n    # All possible pairs of people that can row together\n    all_pairs = list(combinations(times, 2))\n\n    # The shortest time it will take for two people to cross the river is the maximum of their two times\n    # (since they are rowing together, the boat will go at the speed of the slower person)\n    all_pair_times = [max(pair) for pair in all_pairs]\n\n    # This would be the most straightforward approach, but since it requires the consideration of\n    # many possibilities and combinations of back and forth trips, we will follow a more efficient\n    # established strategy for solving this problem.\n\n    def cross_river_strategy(times):\n        times = sorted(times)\n\n        # Total time taken\n        total_time = 0\n\n        while len(times) > 3:\n            # Strategy 1: Send the two fastest to the other side, then send the fastest back.\n            # Send the two slowest to the other side, then send the second fastest back.\n            strategy_1 = times[1] + times[0] + times[-1] + times[1]\n            # Strategy 2: Send the two fastest to the other side, then send the fastest back.\n            # Send the two fastest back over, then send the fastest back again.\n            strategy_2 = times[-1] + times[0] + (2 * times[0]) + times[-2]\n\n            if strategy_1 < strategy_2:\n                total_time += strategy_1\n            else:\n                total_time += strategy_2\n\n            # The two slowest have now crossed the river\n            times = times[:-2]\n\n        # Only three people left to cross, send the fastest person with the two remaining\n        # people one at a time\n        total_time += times[0] + times[1] + times[2]\n\n        return total_time\n\n    # Use the strategy to find the minimum time for all to cross\n    min_time = cross_river_strategy(times)\n\n    return min_time\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let x be Pip's weight, y be Bud's weight, and z be Bob's weight.\n    # According to the problem, we have the following equations:\n    # (x + y) / 2 = 30  =>  x + y = 60\n    # (x + z) / 2 = 33  =>  x + z = 66\n    # (y + z) / 2 = 36  =>  y + z = 72\n    \n    # Solving the equations for x gives us:\n    # Adding the first two equations: (x + y) + (x + z) = 60 + 66\n    # 2x + (y + z) = 126\n    # We have y + z = 72 from the third equation, substituting it here:\n    # 2x + 72 = 126\n    # 2x = 126 - 72\n    # 2x = 54\n    # x = 54 / 2\n    # x = 27\n    \n    pip_weight = 54 / 2\n    return pip_weight\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_days = 15\n    target_days = 7\n    original_people = 5\n\n    # Calculate the total person-days required to finish the work\n    total_work = original_days * original_people\n\n    # Calculate how many people would be required to finish the work in target_days\n    required_people = total_work / target_days\n\n    # Calculate how many more people are needed\n    additional_people_needed = required_people - original_people\n\n    return int(additional_people_needed) if additional_people_needed == int(additional_people_needed) else int(additional_people_needed) + 1\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_time = 5\n    final_time = 10.5\n    initial_temperature = -3\n    temperature_rise_per_hour = 2\n    hours_passed = final_time - initial_time\n\n    temperature_increase = hours_passed * temperature_rise_per_hour\n    final_temperature = initial_temperature + temperature_increase\n    \n    return final_temperature\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let the original number of students in school A be a\n    # Then the original number of students in school B will be 1050 - a\n\n    # After 20 students from school A transfer to school B, school A has a - 20 students\n    # and school B has (1050 - a) + 20 students\n\n    # According to the problem, after the transfer, school A still has 10 more students than school B\n    # So we have: (a - 20) = 10 + ((1050 - a) + 20)\n    # Simplifying the equation: a - 20 = 10 + 1050 - a + 20\n    # 2a = 1100\n    # a = 550\n\n    # Therefore, school A originally has 550 students\n    return 550\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(x / 2 - 1 + (x / 2 - 1) / 2 - 2 + ((x / 2 - 1) / 2 - 2) / 3 - 3, 49)\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    dividend = 12321\n    divisor = 37\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell could draw all the blue and white pencils before getting a green one.\n    blue_pencils = 3\n    white_pencils = 3\n    # No matter what, the next draw will be a green pencil after drawing all blue and white ones.\n    next_draw = 1\n    # The number of pencils must be drawn to ensure getting a green pencil\n    ans = blue_pencils + white_pencils + next_draw\n    return ans\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Given that 2240/n should be a square number, find all divisors of 2240\n    all_divisors = divisors(2240)\n\n    # Check which divisor satisfies the condition that 2240/divisor is a square\n    for d in all_divisors:\n        if is_square(2240 // d):\n            return d  # Return the divisor that satisfies the condition\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n\n    sweep_interval = 3\n    mop_interval = 5\n    cook_interval = 9\n    clean_windows_interval = 3 * 7  # 3 weeks\n\n    ans = lcm(sweep_interval, mop_interval, cook_interval, clean_windows_interval)\n\n    return ans\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    total_books = 280\n    number_of_shelves = 7\n    # Since each shelf has 3 fewer books than the one below it, \n    # we have an arithmetic sequence with a common difference of -3.\n    \n    # Let the number of books on the top shelf be a.\n    # Then the sequence of books per shelf from top to bottom is:\n    # a, a+3, a+6, a+9, ..., a + 3*(number_of_shelves - 1)\n    \n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    # Here, n is the number of shelves and first_term is a\n    # The last term will be a + 3*(number_of_shelves-1)\n    \n    # The sum of the arithmetic sequence representing the number \n    # of books on all shelves must equal total_books.\n    # Hence, number_of_shelves/2 * (2*a + 3*(number_of_shelves-1)) = total_books\n\n    # Solving for a:\n    # 2*a = (2*total_books/number_of_shelves) - 3*(number_of_shelves-1)\n    # a = (total_books/number_of_shelves) - 3*(number_of_shelves-1)/2\n    \n    a = (total_books / number_of_shelves) - (3 * (number_of_shelves - 1) / 2)\n    return int(a)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    ans = sum(sum_of_digits(page) for page in range(1, 311))\n    return ans\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids and y be the total number of candies\n    x, y = symbols('x y')\n\n    # When each kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(x * 18, y - 12)\n\n    # When each kid eats 15 candies, it's enough for 2 more kids\n    equation2 = Eq((x + 2) * 15, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the total number of candies\n    return solutions[y]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n    \n    numerator = (-4.56)**2 - (8.1)**3\n    denominator = 7.2**3\n    inner_root = math.sqrt(6 + 3/4)\n    \n    value = 16.7 - ((numerator / denominator) / (-inner_root - (-30.15)))**(1/3)\n    \n    ans = round(value, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Oliver's current age\n    oliver_age = 20\n    # Lin's current age\n    lin_age = 26\n    # Years later for the sum of their ages to be 48\n    years_later = (48 - (oliver_age + lin_age)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Jayden's speed to Carter's speed ratio\n    ratio_jayden = 7\n    ratio_carter = 4\n    total_ratio = ratio_jayden + ratio_carter\n    \n    # Total distance\n    distance = 440\n\n    # Jayden will cover a distance of 7 units while Carter covers 4 units before they meet for the first time\n    # Therefore, the meeting point from A will be covered mostly by Jayden\n    distance_meeting_from_A = distance * (ratio_jayden / total_ratio)\n    \n    # When Jayden reaches B he turns back and will now cover 4 units while Carter continues to cover 7 units\n    # They will meet at 4/11 of the way from B to A, i.e., 7/11 of the initial distance measured from A\n    distance_second_meeting_from_A = distance * (7 / total_ratio)\n\n    return distance_meeting_from_A + distance_second_meeting_from_A\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Total score of 5 students\n    total_score_5_students = 5 * 87\n    # Total score of 6 students\n    total_score_6_students = 6 * 88\n    # Jim's score\n    jim_score = total_score_6_students - total_score_5_students\n    return jim_score\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current ages of Mr. Lim and Mrs. Lim\n    age_mr, age_mrs = symbols('age_mr age_mrs')\n\n    # Equation 1: 7 years ago, the ratio of their ages was 6:5\n    equation1 = Eq((age_mr - 7)/ (age_mrs - 7), 6 / 5)\n\n    # Equation 2: The sum of their current ages is 69\n    equation2 = Eq(age_mr + age_mrs, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (age_mr, age_mrs))\n\n    # Mr. Lim's current age\n    return solutions[age_mr]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let's denote the usual speed as V (m/min) and the distance as D (meters)\n\n    # At her usual speed, Maria can cover D meters in 30 minutes, which gives us the equation: V = D / 30\n\n    # After it rains, her speed becomes 0.8V because her speed is reduced by 20%\n    # We know she runs for 2400 meters at the reduced speed, which takes her (2400 / 0.8V) minutes\n\n    # She is 5 minutes late, which means the total time at reduced speed should have been (30 + 5) minutes,\n    # but it actually took her (2400 / 0.8V) + the initial time before the rain (denoted as T).\n\n    # Thus, the equation is: T + (2400 / 0.8V) = 35\n    \n    # She covered the first part of the journey (VT) at her usual speed before the rain, and the 2400 m at the reduced speed\n    # So, the total length of the journey, D, is the sum of the two parts. D = VT + 2400\n\n    # Now we have two equations:\n    # 1) D = VT + 2400\n    # 2) T + (2400 / 0.8V) = 35\n\n    # Since V = D / 30, we can replace it in the second equation and we get:\n    # T + (2400 / (0.8 * (D / 30))) = 35\n    # T + (2400 * 30) / (0.8D) = 35\n    # T + (72000 / (0.8D)) = 35\n    # T + (90000 / D) = 35\n    # T = 35 - (90000 / D)\n\n    # Now we can replace T in the first equation with the expression from the second equation:\n    # D = V * (35 - (90000 / D)) + 2400\n    # D = (D / 30) * (35 - (90000 / D)) + 2400\n    # D = (D * 35 / 30) - (90000 / 30) + 2400\n    # D = (7 * D / 6) - 3000 + 2400\n    # D = (7 * D / 6) - 600\n    # 6D = 7D - 3600\n    # D = 3600\n\n    return 3600\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # one-fifth of the wood length is 6cm\n    full_length = one_fifth_length * 5  # calculate full length of the wood\n    one_third_length = full_length / 3  # calculate one-third of the wood length\n\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n\n    # Let x be the total number of bats purchased at first\n    # Total cost price = cost_price_per_bat * x\n    # Total selling price when 3 bats are remaining = selling_price_per_bat * (x - 3)\n    # According to the problem, total selling price = total cost price + profit\n    x = symbols('x')\n    equation = Eq((selling_price_per_bat * (x - remaining_bats)), (cost_price_per_bat * x) + profit)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    minibusses_needed = (boys + minibus_capacity - 1) // minibus_capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # After Raja spent $286, his remaining money is raja - 286\n    # After Kumar spent $109, his remaining money is kumar - 109\n    # Kumar had 4 times as much money as Raja\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Initially, Raja and Kumar had the same amount of money\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    # Since both variables represent the same initial amount, we can return either\n    return solutions[raja]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s, p, and j be the number of stickers Sam, Peter, and John originally had\n    s, p, j = symbols('s p j')\n    \n    # Sam and Peter give 20% of their stickers to John\n    sam_gives = s * 0.2\n    peter_gives = p * 0.2\n    \n    # John's stickers increase by 80%\n    john_new_total = j + sam_gives + peter_gives\n    equation1 = Eq(john_new_total, j * 1.8)\n    \n    # Sam had 20 stickers more than John in the end\n    sam_new_total = s - sam_gives\n    equation2 = Eq(sam_new_total, j * 1.8 + 20)\n    \n    # Sam and Peter had stickers in the ratio 7 : 5\n    equation3 = Eq(s/p, 7/5)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (s, p, j))\n    \n    # We are interested in the initial number of stickers Peter had\n    return solutions[p]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_price = symbols('chair_price')\n    table_price = chair_price + 160\n    total_cost = table_price + 5 * chair_price\n\n    equation = Eq(total_cost, 328)\n    cost_per_chair = solve(equation, chair_price)[0]\n\n    return cost_per_chair\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Replace each equation to find the relationship between diamond and triangle\n    # From equation1 we get square = 2*triangle\n    # Putting square's value in equation2 we get circle = 3* triangle\n    # Putting square's value and circle's value in equation3 we get diamond = 6*triangle\n\n    # Solve the equations\n    solution = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Calculate how many triangles are equal to one diamond\n    num_triangles_in_diamond = solution[diamond] / solution[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time taken by the hot tap to fill the bathtub on its own\n    hot_time = symbols('hot_time')\n    # The cold tap fills twice as fast, hence it takes half the time\n    cold_time = hot_time / 2\n    # Both taps together fill the bathtub in 10 minutes\n    # 1/hot_time + 1/cold_time = 1/10\n    \n    equation = Eq(1/hot_time + 1/(hot_time/2), 1/10)\n    \n    # Solve the equation for hot_time\n    solutions = solve(equation, hot_time)\n    \n    # Calculate cold tap time\n    cold_tap_time = solutions[0] / 2\n    \n    return cold_tap_time\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_mean = 1111\n    num_numbers = 10\n    total_sum = total_mean * num_numbers\n    \n    first_4_mean_less = 240\n    first_4_mean = (total_mean * num_numbers - first_4_mean_less * 6) / num_numbers\n    last_6_mean = first_4_mean + first_4_mean_less\n    \n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's amount to pence.\n    bud_pence = 110  # £1.10 = 110p\n\n    # Pip's amount in pence.\n    pip_pence = 60\n\n    # Total amount in pence.\n    total_pence = pip_pence + bud_pence\n\n    # Return the total amount in pence since the question does not specify the format.\n    return total_pence\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 3):\n        i, s, p = map(int, p)\n        if 4 * (i * 10 + s) == p * 100 + i:\n            return p * 10 + i\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the original number of candies Rachel has, and a be the original number of candies Alice has.\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 candies, they have the same number: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 candies, Rachel has 4 more than 3 times the candies Alice has: r + 10 = 3 * (a - 10) + 4\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total number of candies they originally had: r + a\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Given speeds and distances\n    speed1 = 7  # meters per second for the first 280 meters\n    distance1 = 280  # meters\n    speed2 = 5  # meters per second for the middle 400 meters\n    distance2 = 400  # meters\n    speed3 = 8  # meters per second for the sprint stage\n    \n    # Calculates the remaining distance for the sprint stage\n    total_distance = 800\n    distance3 = total_distance - (distance1 + distance2)  # meters\n\n    # Calculate time spent on each part of the race\n    time1 = distance1 / speed1  # time for the first 280 meters\n    time2 = distance2 / speed2  # time for the middle 400 meters\n    time3 = distance3 / speed3  # time for the sprint stage\n\n    # Total time spent on the race is the sum of time spent on all stages\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed is 2 meters per second\n    ratio_jocye_to_lori = 3/2  # Jocye's speed to Lori's speed is 3:2\n\n    # Calculate Jocye's speed using the ratio\n    jocye_speed = lori_speed * ratio_jocye_to_lori\n\n    # Calculate how far Jocye can run in 10 seconds\n    distance_jocye_runs = jocye_speed * 10\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    # In a single round-robin tournament, each team plays every other team once.\n    # Therefore, the total number of games played is the number of ways to choose\n    # 2 teams out of 5, which is the combination of 5 taken 2 at a time.\n    number_of_teams = 5\n    games_played = comb(number_of_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    # Initialize the number of digits and pages\n    total_digits = 792\n    pages = 0\n    digits_used = 0\n\n    # The loop to calculate the number of pages\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_20 = 0.6  # Probability of living over 20 years\n    probability_A_25 = 0.3  # Probability of living over 25 years\n\n    # To find the conditional probability that animal A lives over 25 years given \n    # it already lived over 20 years, we use the formula:\n    # P(A|B) = P(A and B) / P(B)\n    # Here, P(A|B) is the probability of living over 25 years old given living over 20 years old,\n    # P(A and B) is the probability of living over 25 years old,\n    # and P(B) is the probability of living over 20 years old.\n\n    # So, the probability of living over 25 years old given living over 20 years old is:\n    probability_A_25_given_20 = probability_A_25 / probability_A_20\n\n    return probability_A_25_given_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # Distance where they meet from the house\n    total_distance = 780  # Total distance from house to library\n\n    # Time taken for Don to walk to the meeting point\n    time_don = distance_met / don_speed  # time = distance/speed\n\n    # Distance Danny has covered when they meet\n    distance_danny = total_distance - distance_met\n\n    # Danny's speed\n    danny_speed = distance_danny / time_don  # speed = distance/time\n\n    return danny_speed\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight = (1 * 1000 + 500) + (1 * 1000 + 200) + 900  # in grams\n    mixture_per_tin = total_weight / 8\n    \n    return mixture_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have 2 options for the far right and far left positions\n    # AB or BA at the ends\n    ab_positions = 2\n    \n    # C and D have 2 options for the remaining two positions in the center\n    # CD or DC in the middle\n    cd_positions = 2\n    \n    # Total ways they can line up is the product of the two possibilities\n    total_ways = ab_positions * cd_positions\n\n    return total_ways\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 + digit2)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    max_red = 3\n    max_blue = 3\n    max_green = 3\n\n    # Add one to ensure we have at least one more than the max of each color, thus,\n    # ensuring at least 4 of the same color.\n    min_marbles = max_red + max_blue + max_green + 1\n\n    return min_marbles\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Starting from the largest two-digit number and working downwards\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    total_work = workers * days_for_3_workers\n    \n    days_for_1_worker = total_work / 1  # Since work is directly proportional to the number of workers\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    all_combinations = permutations(digits)\n    smallest_even_number = float('inf')\n\n    for combination in all_combinations:\n        if combination[-1] % 2 == 0:  # Check if the last digit is even\n            number = int(''.join(map(str, combination)))\n            if number < smallest_even_number:\n                smallest_even_number = number\n                \n    return smallest_even_number\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    A = 10 * x + y\n    B = 200 + 10 * x + y\n    equation = Eq(6 * A + 25, B)\n\n    solutions = solve(equation)\n\n    return solutions[A]\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n\n    pupils_per_row = total_pupils // num_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b = symbols('a b')\n\n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Get the value of b\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    count_unlocked = 0\n    \n    # Iterate through all lockers\n    for locker in range(1, 101):\n        is_locked = False\n        \n        # Locker operation for divisible by 3\n        if locker % 3 == 0:\n            is_locked = not is_locked\n        \n        # Locker operation for divisible by 5\n        if locker % 5 == 0:\n            is_locked = not is_locked\n            \n        # Check if locker remains unlocked\n        if not is_locked:\n            count_unlocked += 1\n            \n    return count_unlocked\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "from sympy import *\n\ndef solution():\n    # Define the symbols to be used in the expressions\n    a, b, c, d = symbols('a b c d')\n    # Define the original expression without brackets\n    original_expr = a + b / c - d\n\n    # Substitute values for the symbols in the expression\n    values = {a: 285, b: 15, c: 5, d: 2}\n\n    # Generate all possible expressions with one or two pairs of brackets\n    expressions = [\n        (a + (b / c)) - d,\n        a + ((b / c) - d),\n        (a + b) / (c - d),\n        a + (b / (c - d)),\n        ((a + b) / c) - d,\n        (a + (b / c - d)),\n    ]\n\n    # Calculate and store the unique results\n    results = set()\n    for expr in expressions:\n        results.add(simplify(expr.subs(values)))\n  \n    return len(results)\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_final_level = 16\n    yiding_initial_speed = 3 / 4\n    yiding_final_level = yiding_initial_speed * nicolas_final_level\n    return int(yiding_final_level)\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations for 7 students\n    for perm in permutations(\"ABCDEFG\"):\n        # Convert the tuple to a string for easier processing\n        sequence = ''.join(perm)\n        # Check for the specific conditions given:\n        # A should be in the middle of B and C\n        if sequence.index('A') > sequence.index('B') and sequence.index('A') < sequence.index('C') or \\\n           sequence.index('A') < sequence.index('B') and sequence.index('A') > sequence.index('C'):\n            # D and E should not be next to each other\n            if 'DE' not in sequence and 'ED' not in sequence:\n                # F and G should be next to each other\n                if 'FG' in sequence or 'GF' in sequence:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    dividend = 12 * 11 + 5\n    return dividend\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_cake = symbols('cost_per_cake')\n    money_lucy_has = symbols('money_lucy_has')\n\n    equation1 = Eq(10 * cost_per_cake - money_lucy_has, 11)\n    equation2 = Eq(13 * cost_per_cake - money_lucy_has, 26)\n\n    solutions = solve((equation1, equation2), (cost_per_cake, money_lucy_has))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50  # Total mass of boys\n    total_mass_girls = 6 * 40  # Total mass of girls\n    total_children = 4 + 6  # Total number of children\n    total_mass = total_mass_boys + total_mass_girls  # Total mass of all children\n    average_mass = total_mass / total_children  # Average mass of all children\n    return average_mass\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    return (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    scores = [37, 53, 29, 41]\n    total_score = mean_score * total_matches\n\n    x = total_score - sum(scores)\n    \n    return x\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(0, 10):\n            # Constructing the palindrome by assuming the numbers at the end are equal,\n            # 'x1x2x2x1', which is palindromic by construction\n            pal_num = int(f\"{x1}{x2}{x2}{x1}\")\n            if 1000 <= pal_num <= 9999:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    freq = {'C': 1, 'H': 1, 'E': 3, 'S': 1}\n    \n    arrangements = factorial(total_letters)\n    \n    for key in freq:\n        arrangements //= factorial(freq[key])\n    \n    return arrangements\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_total_animals, initial_goats = symbols('initial_total_animals initial_goats')\n    equation1 = Eq(0.65 * initial_total_animals, initial_total_animals - initial_goats)\n    equation2 = Eq(0.85 * (initial_total_animals + 240), initial_total_animals - initial_goats + 240)\n    equation3 = Eq(initial_goats * 2, initial_total_animals - initial_goats + 240)\n    \n    solutions = solve((equation1, equation2, equation3), (initial_total_animals, initial_goats))\n    \n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    # Total number of three digit numbers is from 100 to 999\n    total_three_digit_numbers = 999 - 100 + 1\n\n    # We need to find the count of three digit numbers with no sevens and with one seven\n    count_no_sevens = 8 * 9 * 9  # Choices for hundreds, tens, ones without 7 (0-9 but not 7 or leading 0)\n    count_one_seven = 3 * 8 * 9  # Choose the position for one seven (3 options) and fill the other places\n    \n    # Subtract numbers with no sevens and with one seven from total to get at least two sevens\n    count_at_least_two_sevens = total_three_digit_numbers - (count_no_sevens + count_one_seven)\n\n    return count_at_least_two_sevens\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The smallest possible divisor is 1\n    smallest_divisor = 1\n    # The minimum value of the dividend is divisor * quotient + remainder\n    min_dividend = smallest_divisor * quotient + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    # loop through all 5 digit numbers as the first 5 digits of our number\n    for i in range(10000, 100000):\n        original_num = i * 10 + 9  # add the 9 in the units column to make it a 6-digit number\n        new_num = int(str(9) + str(i))  # move the 9 to the start of the number\n        if new_num == 4 * original_num:\n            return original_num\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    result = new_operation(4, 3) - new_operation(3, 4)\n    return result\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n\n    # Let x be the number of days Alice takes off\n    # Alice works (27 - x) days and Bob works for 27 days\n    # The work done by Alice and Bob together should add up to 1 (the whole job)\n\n    # Equation representing total work: (Alice's work rate)*(27 - x days) + (Bob's work rate)*27 days = 1 job\n    # Solve for x\n    x = (1 - (bob_work_rate * 27)) / alice_work_rate + x - 27\n\n    return x\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be Abigail's age and 'j' be Jonathan's age\n    a, j = symbols('a j')\n\n    # Abigail is 6 years older than Jonathan\n    eq1 = Eq(a, j + 6)\n\n    # Six years ago, Abigail was twice as old as Jonathan\n    eq2 = Eq(a - 6, 2 * (j - 6))\n\n    # Solve the equations\n    solution_set = solve((eq1, eq2), (a, j))\n\n    # Jonathan's age is what we're looking for\n    return solution_set[j]\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D', integer=True)\n\n    # Set the domain for digits (0-9)\n    digits = range(10) \n    \n    # Representing the given equation ABA + CDC = 726\n    equation = Eq(A * 101 + C * 101 + B + D, 726)\n    \n    # Find all solutions that satisfy the equation\n    for a in digits:\n        for b in digits:\n            for c in digits:\n                for d in digits:\n                    # Replace A, B, C, D in the equation with the current digits\n                    # Also, check that all digits are different\n                    if a != b != c != d != a and equation.subs({A: a, B: b, C: c, D: d}):\n                        # Return the sum A+B+C+D\n                        return a + b + c + d\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of an apple and the price of a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the question\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost for 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    # Direct computation of the remainder using the modulo operator\n    remainder = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return remainder\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days, total_pages = symbols('total_days total_pages')\n\n    # Vanessa reads 30 pages a day and finishes 2 days late\n    eq1 = Eq(30 * (total_days + 2), total_pages)\n    # Vanessa reads 39 pages a day and finishes 4 days early\n    eq2 = Eq(39 * (total_days - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (total_days, total_pages))\n\n    return solutions[total_days], solutions[total_pages]\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    # Determine the repetition pattern \"2020020220\" which has 10 digits with 4 occurrences of digit \"2\"\n    pattern = \"2020020220\"\n    pattern_length = len(pattern)\n    count_2_in_pattern = pattern.count('2')\n\n    # Calculate how many full repetitions of the pattern we have within 535 digits\n    full_repetitions = 535 // pattern_length\n\n    # Count how many times '2' appears in the full repetitions\n    count_2_full_repetitions = full_repetitions * count_2_in_pattern\n\n    # Calculate the remaining digits after the full repetitions\n    remaining_digits = 535 % pattern_length\n    \n    # Count how many '2' are there in the remaining digits\n    remaining_2s = pattern[:remaining_digits].count('2')\n\n    # The total count of '2's is the sum of '2's from full repetitions and the remaining '2's\n    total_count_2 = count_2_full_repetitions + remaining_2s\n\n    return total_count_2\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(a, b):\n        return a * a + a + b\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if (adults * 5) + (children * 3) == 75:\n            return adults\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    brenda_daily_savings = 6\n    andy_total_savings = 378\n\n    days_passed = andy_total_savings // andy_daily_savings\n    brenda_total_savings = brenda_daily_savings * days_passed\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let x be the total number of coins Owen had initially\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # According to the question, initially Owen had (2/7)*x fifty-cent coins and (5/7)*x one-dollar coins\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins, which is 5*2 = 10 fifty-cent coins\n    # After that, Owen had (2/7)*x + 10 fifty-cent coins and (5/7)*x + 10 one-dollar coins\n    # Finally, he had twice as many one-dollar coins as fifty-cent coins\n    # Therefore, we have the equation: (5/7)*x + 10 = 2*((2/7)*x + 10)\n\n    equation = Eq((5/7)*x + 10, 2*((2/7)*x + 10))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Since the number of coins must be integer, we pick the integer solution\n    coins_initially = int(solution[0])\n\n    return coins_initially\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dress, belt, shirt = symbols('dress belt shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (dress, belt, shirt))\n\n    difference = solutions[dress] - solutions[shirt]\n\n    return abs(difference)\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of marbles that Anna, Betsy and Charlene finally had be 2k, 5k, and 7k respectively.\n    a, b, c, k = symbols('a b c k')\n    \n    # Charlene gave 15 marbles to Betsy, Betsy gave 8 marbles to Anna\n    # The equations based on the problem statement:\n    equation1 = Eq(a + 8, 2 * k)\n    equation2 = Eq(b - 8 + 15, 5 * k)\n    equation3 = Eq(c - 15, 7 * k)\n    equation4 = Eq(a + b + c, 168)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, k))\n\n    # Betsy initially had b marbles before giving 8 and receiving 15\n    betsy_initial = solutions[b] - 15 + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_incorrect = -2\n    total_points = 44\n\n    # Let x be the number of correct answers, then total_questions - x is the number of incorrect answers.\n    # Form the equation based on the total score.\n    # points_for_correct * x + points_for_incorrect * (total_questions - x) = total_points\n    # Solve for x.\n    x = (total_points - points_for_incorrect * total_questions) / (points_for_correct - points_for_incorrect)\n\n    return int(x)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_volume_ratio = 1  # original volume is 100%\n    length_increase_ratio = 1.10  # length increased by 10%\n    breadth_decrease_ratio = 4/5  # breadth reduced to 4/5 of the original\n    height_increase_ratio = 11/10  # new height to original height is 11:10\n\n    new_volume_ratio = length_increase_ratio * breadth_decrease_ratio * height_increase_ratio\n    new_volume_percentage = new_volume_ratio * original_volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    contestants = 8\n    ans = factorial(contestants) // factorial(contestants - 3)\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_of_numbers = (30 + 40 + 50) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 0.60\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    more_mushrooms_first_hour = 26\n\n    second_hour_mushrooms = (total_mushrooms + more_mushrooms_first_hour) // 2\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number_to_round = 278\n    ans = round(number_to_round / 10) * 10\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be Scan's current age and t be Ted's current age\n    s, t = symbols('s t')\n\n    # Given ratios\n    ratio_now = Eq(s, t / 4)\n    ratio_future = Eq(s + 4, (t + 4) / 3)\n\n    # Solve the system of equations for s and t\n    ages_now = solve((ratio_now, ratio_future), (s, t))\n    \n    # Calculate the desired ratio ages in the past\n    # Let p be the number of years in the past when the ratio was 1:9\n    p = symbols('p')\n    ratio_past = Eq(s - p, (t - p) / 9)\n\n    # Solve for p using the current ages of Scan and Ted\n    years_past = solve(ratio_past.subs(ages_now), p)\n\n    return years_past[p]\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n    difference = hottest_temperature - coldest_temperature\n    return difference\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    cm_per_m = 100  # there are 100 centimeters in a meter\n    meters = 9\n    centimeters = meters * cm_per_m\n    return centimeters\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "from itertools import combinations\n\ndef solution():\n    total_questions = 40\n    number_students = 5\n\n    # The questions need to be distributed to each student such that each gets at least one\n    # and no two students get the same number of questions.\n    \n    # Let's first find the maximum Noa can get if all other students have different numbers and as few as possible.\n    # The remaining four students can get [1, 2, 3, 4] or any combination adding up to 10,\n    # leaving Noa with 30 questions as a start.\n    # However, there are multiple combinations to consider for the other 4 students that sum to 10.\n    \n    # Find all combinations of 4 numbers that sum to 10, representing the minimum number of questions\n    # the other students could solve.\n    min_combinations = []\n    for comb in combinations(range(1, total_questions - number_students + 1), number_students - 1):\n        if sum(comb) == 10:\n            min_combinations.append(comb)\n    \n    # Noa's maximum is based on these minimum distributions to other students\n    max_for_noa = total_questions - max(map(sum, min_combinations))\n    \n    return max_for_noa\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Speeds\n    jogging_speed = 6.5  # miles per hour\n    walking_speed = 4.5  # miles per hour\n    \n    # Time durations in hours\n    jogging_time = 1  # 6:30 AM to 7:30 AM is 1 hour\n    walking_time = 2  # 7:30 AM to 9:30 AM is 2 hours\n    \n    # Distance calculations\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies / 2\n    guppies = goldfish / 2\n\n    ans = mollies - guppies\n    return int(ans)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # model scale in cm per real size in meters\n    real_tree_height_m = 12  # real tree height in meters\n    model_tree_height_cm = (real_tree_height_m / 3) * 2  # calculate model height in cm\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb_rate = 10\n    current_height = 0\n    night_slides = 0\n    day = 1\n\n    while current_height < height:\n        current_height += climb_rate\n        if current_height >= height:\n            break\n        current_height -= day\n        night_slides += day\n        day += 1\n            \n    return day\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    students = 20\n    # To ensure that one student gets at least 3 pieces,\n    # we can give 2 pieces to each of the other students\n    # and 3 pieces to one student.\n    min_pieces = (students - 1) * 2 + 3\n    return min_pieces\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f and n be the number of foldable and non-foldable bicycles respectively\n    f, n = symbols('f n')\n\n    # Total bicycles before any were sold\n    equation1 = Eq(f + n, 476)\n\n    # Bicycles remaining after sales. From the question, we have:\n    # (5/9) of the non-foldable bicycles and (4/7) of the foldable bicycles are left,\n    # meaning (4/9) of the non-foldable and (3/7) of the foldable bicycles were sold.\n    # After 208 bicycles were sold, this is the remaining number in the shop:\n    remaining_bicycles = 476 - 208\n\n    # The remaining bicycles are also equal to the sum of the remaining foldable and non-foldable bicycles.\n    # So we can write an equation using the fractions provided in the question:\n    equation2 = Eq((5/9)*n + (4/7)*f, remaining_bicycles)\n\n    # Solve the system of equations for f and n\n    solutions = solve((equation1, equation2), (f, n))\n\n    # Calculate the number of foldable bicycles sold, which is\n    # the initial number of foldable bicycles minus the bicycles left (4/7 of the initial foldable bicycles)\n    foldable_sold = solutions[f] - (4/7) * solutions[f]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Worst case scenario: Yohan picks all the non-white socks first\n    max_non_white_socks = 10 + 10  # red and black\n    \n    # After picking all red and black socks, the next two socks he picks must be white to form a pair of white socks\n    max_picks_for_white_pair = max_non_white_socks + 2\n\n    return max_picks_for_white_pair\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n\n    original_flour = remaining_flour / remaining_fraction\n\n    return original_flour\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_correct = 8\n    score_wrong = -4\n    total_score = 100\n\n    # We are solving the equation: correct_answers*score_correct + wrong_answers*score_wrong = total_score\n    # Since total_questions = correct_answers + wrong_answers, we can express wrong_answers as:\n    # wrong_answers = total_questions - correct_answers\n    # Then we can substitute this into the original equation.\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * score_correct + wrong_answers * score_wrong == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    # Each interval between lamp posts gets 3 flowers, so to find the number of intervals,\n    # we divide the total number of flowers by the flowers between each lamp post.\n    intervals = total_flowers / flowers_between_lamps\n    # Since lamp posts are at both ends of the road, the number of lamp posts is intervals + 1\n    lamp_posts = intervals + 1\n    # The distance between every 2 lamp posts is the road length divided by the number of intervals\n    distance_between_lamps = 50 / intervals\n    \n    return distance_between_lamps\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    books_left = 6\n    books_right_from_favorite = 13  # it's 14th when counting from right, so 13 on the right\n    \n    total_books = books_left + 1 + books_right_from_favorite\n    \n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease = 17\n    final_temp = initial_temp - decrease\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1  # Plus one for the tree at the start\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5 / 4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_to_give = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Since the rosebushes are 1.5 meters from the edge, we have 9 meters of usable space (12m - 2 * 1.5m)\n    usable_space = 12 - 2 * 1.5\n\n    # Rosebushes are 3 meters apart, so we divide the usable space by 3 and add 1 for the first rosebush\n    bushes_per_side = int(usable_space / 3) + 1\n\n    # There are 4 sides, but the 4 corners are counted twice, so we subtract 4\n    total_bushes = 4 * bushes_per_side - 4\n\n    return total_bushes\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    p_rate_per_day = 1 / (12 * 8)\n    # Q's work rate per hour\n    q_rate_per_day = 1 / (8 * 10)\n    # Combined work rate when working 8 hours a day\n    combined_rate_per_day = 8 * (p_rate_per_day + q_rate_per_day)\n    # Number of days to complete the job working together\n    days_to_complete = 1 / combined_rate_per_day\n    return days_to_complete\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # We want to determine the largest possible number of apples the child who gets the most can receive\n    # when distributing 19 apples among 5 children with each getting at least one apple and no two receiving the same number of apples.\n    # We will start by giving the child who gets the smallest amount 1 apple, the next one 2 apples, and so on,\n    # until we reach the child who gets the most apples.\n\n    total_apples = 19\n    children = 5\n    # We distribute the apples starting with one for each child\n    apples_given = children * (children + 1) // 2 # This is the sum of the arithmetic series 1 + 2 + 3 + ... + children\n    remaining_apples = total_apples - apples_given # The rest of the apples that can be distributed\n    \n    # The child who gets the most will be the last one, so we add the remaining apples to his share\n    max_apples_for_last_child = children + remaining_apples\n    \n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 0.60\n    total_masks = remaining_work / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132  # speed of the faster van in km/h\n    speed_van_2 = 78   # speed of the other van in km/h\n    time = 8           # time after which we need to find the distance apart in hours\n    \n    # Since they are travelling in opposite directions, we can add their speeds to get relative speed\n    relative_speed = speed_van_1 + speed_van_2\n    \n    # Distance formula: distance = speed * time\n    distance_apart = relative_speed * time\n    \n    return distance_apart\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    ans = solve(equation, original_score)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    total_apples = 78\n    # Get all divisors\n    divisor_list = divisors(total_apples)\n    \n    # Count the even divisors only (excluding 1 since 1 is not even)\n    count_even_divisors = sum(1 for divisor in divisor_list if divisor % 2 == 0 and divisor != 1)\n    \n    return count_even_divisors\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Number of rabbits for 1 goat\n    rabbits_per_goat = 9 / 3\n    # Number of goats for 1 cow\n    goats_per_cow = 2 / 4\n\n    # Rabbits for 1 cow using cross-multiplication (rabbits_per_goat / goats_per_cow)\n    rabbits_per_cow = rabbits_per_goat * (1 / goats_per_cow)\n    \n    # Rabbits for 2 cows\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    score = 168\n\n    # Let x be the number of correct answers\n    # The number of wrong answers then is (total_questions - unattempted_questions - x)\n    # 4x - (total_questions - unattempted_questions - x) = score\n    # 4x - total_questions + unattempted_questions -x = score\n    # 3x = score + total_questions - unattempted_questions\n    correct_answers = (score + total_questions - unattempted_questions) / 3\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    for pencils in range(1, 1000):  # Set a reasonable upper bound for iteration\n        pens = (5 / 4) * pencils  # Original ratio is 4:5\n        new_pencils = pencils + 1\n        new_pens = pens - 1\n        if new_pencils / new_pens == 7 / 8:  # New ratio is 7:8\n            total = new_pencils + new_pens\n            return int(total)  # Ensure result is integer because we cannot have fraction of a pen or pencil\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n\n    # Using the arithmetic series sum formula: n/2 * (2a + (n-1)d)\n    total_seats = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    girls_percentage = 100 - boys_percentage\n\n    total_children = (girls * 100) / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = hash_op(10, 9)\n    ans = hash_op(ans, 8)\n    ans = hash_op(ans, 7)\n    ans = hash_op(ans, 6)\n    ans = hash_op(ans, 5)\n    ans = hash_op(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    final_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return final_strawberries\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Each sheet of a newspaper has 2 pages, one on the front and one on the back\n    last_page_before_missing = 14\n    first_page_after_missing = 35\n    # Since pages are consecutive and each sheet has 2 pages, difference in page number will give us\n    # the number of pages missing. We divide by 2 to get the number of sheets missing.\n    sheets_missing = (first_page_after_missing - last_page_before_missing - 1) / 2\n    return int(sheets_missing)\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the price of a tuna puff\n    t = symbols('t')\n    \n    # Price of a curry puff is t - 0.20\n    c = t - 0.20\n    \n    # The total cost for 12 tuna puffs and 19 curry puffs is $39.60\n    equation = Eq(12 * t + 19 * c, 39.60)\n    \n    # Solve for t\n    t_price = solve(equation, t)[0]\n\n    return t_price\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                number = tens * 10 + ones\n                if number % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_profit = 0.6  # Planned profit\n    total_profit = 0.8 * initial_profit  # Total profit made\n    first_day_sold = 0.7\n    second_day_sold = 1 - first_day_sold\n\n    # Let x = original price of each book\n    # Let y = discount rate on the second day\n    x, y = symbols('x y')\n\n    # Equation for first day\n    # He sold 70% at a profit of 60%\n    first_day_profit = first_day_sold * (1 + initial_profit) * x\n\n    # Equation for second day\n    # He sold the remaining at an unknown discount y\n    second_day_profit = second_day_sold * (1 - y) * x\n\n    # Equation for total profit made\n    total_profit_eq = Eq(first_day_profit + second_day_profit, (1 + total_profit) * x)\n\n    # Solve for y\n    solution = solve(total_profit_eq, y)\n\n    return solution[y]\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = end - start + 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (4, 8), (5, 9)]\n    elizabeth_number, _ = solve_congruence(*congruences)\n\n    # Ensure the number is less than 500\n    while elizabeth_number >= 500:\n        elizabeth_number -= 5 * 8 * 9\n\n    return elizabeth_number\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_per_minute = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_per_minute * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_balloons = 126\n    total_children = 38\n\n    # Let x be the number of boys and y be the number of girls.\n    # Since every boy received 2 balloons, and every girl received 4 balloons,\n    # we can form the following equations:\n    # 2x + 4y = total_balloons\n    # x + y = total_children\n    \n    # We can solve these equations using substitution or any other algebraic method.\n    # For simplicity, we will use substitution and the knowledge that x = total_children - y\n    \n    # Substitute the value of x from the second equation into the first equation\n    # 2(total_children - y) + 4y = total_balloons\n    # Simplify the equation to find the number of girls (y)\n    y = (total_balloons - 2 * total_children) / 2\n    \n    # Now, find the number of boys (x)\n    x = total_children - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(1, 1)\n    for i in range(1, 20, 2):\n        result *= Fraction(1 + i, i)\n    \n    ans = result * Fraction(2, 1)\n    return ans.numerator if ans.denominator == 1 else ans\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    total_length_needed_cm = 400 * 85  # Total length needed in centimeters\n    roll_length_cm = 20 * 100  # Length of one roll in centimeters\n\n    rolls_needed = total_length_needed_cm / roll_length_cm\n\n    # If rolls_needed is not an integer, we need to round up to the next whole number\n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total, goats_at_first = symbols('total goats_at_first')\n    cows_at_first = 0.65 * total\n    goats_at_first = total - cows_at_first\n\n    new_total = total + 240\n    new_percentage_cows = 0.65 + 0.20\n    new_cows = new_percentage_cows * new_total\n    new_goats = new_total - new_cows\n\n    equation1 = Eq(new_cows, cows_at_first + 240)\n    equation2 = Eq(new_goats, 2 * goats_at_first)\n\n    solutions = solve((equation1, equation2), (total, goats_at_first))\n\n    return solutions[goats_at_first]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    ans = 863 * 37\n    return ans\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n\n    equation1 = Eq(john, emma + 7)\n    equation2 = Eq(emma + john + 6, 27)  # Adding 3 to each age to account for \"in 3 years' time\"\n\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_of_2 = pow(2, 2017, 10)\n    last_digit_of_3 = pow(3, 2017, 10)\n\n    ans = (last_digit_of_2 * last_digit_of_3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    charity = salary / 4\n    remaining = salary - charity\n    food = 5 * remaining / 6\n    equation = Eq(food - charity, 78)\n\n    solution = solve(equation, salary)\n\n    return solution[salary]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    seventh_term = 57\n    fifteenth_term = 89\n    # The difference between the terms indexes\n    term_index_difference = 15 - 7\n    # The difference between the terms values\n    term_value_difference = fifteenth_term - seventh_term\n    # Common difference of the arithmetic sequence\n    common_difference = term_value_difference / term_index_difference\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 400:\n        return ans\n        ans += 2*3*5*7\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed.\n    t = symbols('t')\n\n    # David walks 10 minutes at the original speed of 150m/min and then t minutes at the increased speed of 200m/min\n    distance_first_part = 10 * 150\n    distance_second_part = t * (150 + 50)\n\n    # Total distance is the sum of distances he walked in both parts, and it should equal 3700m\n    equation = Eq(distance_first_part + distance_second_part, 3700)\n    \n    # Solving for t\n    solved_time = solve(equation, t)\n\n    # Total time spent walking is the sum of 10 minutes and the time he walked at the increased speed\n    total_time = 10 + solved_time[0]\n\n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_per_week = 45 - 60\n    final_sweets = 150\n\n    weeks = (final_sweets - initial_sweets) / sweets_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Jessie's purchase: 2 apples + 1 orange = 40p\n    eq1 = Eq(2 * apple + orange, 40)\n\n    # Bella's purchase: 1 apple + 2 oranges = 35p\n    eq2 = Eq(apple + 2 * orange, 35)\n\n    # Solve the system of equations\n    prices = solve((eq1, eq2), (apple, orange))\n\n    # Carrie's purchase: 1 apple + 1 orange\n    carrie_cost = prices[apple] + prices[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digits_count = 3  # Since the digits are 5, 6, and 7\n    places = 3  # This is for a three-digit number\n\n    # Each digit can be used more than once, so each place can be filled in 3 ways\n    ans = digits_count ** places\n\n    return ans\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Using Inclusion-Exclusion Principle to find students in both classes\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # Since the number is divisible by 9, the sum of all its digits must be divisible by 9.\n    fixed_digits_sum = 4 + 7 + 1 + 9  # Sum of the fixed digits in the number\n    remaining_digits_sum = 9 * ((fixed_digits_sum // 9) + 1) - fixed_digits_sum  # Sum of A, B, and C\n    \n    # We generate all possible 3-digit combinations from 0 to 9 where A, B, and C are different\n    # and their sum equals remaining_digits_sum. Also, A, B, and C must not be 4, 7, 1, or 9.\n    forbidden_digits = {4, 7, 1, 9}\n    results = []\n    \n    for A in range(10):\n        if A in forbidden_digits:\n            continue\n        for B in range(10):\n            if B in forbidden_digits or B == A:\n                continue\n            for C in range(10):\n                if C in forbidden_digits or C == A or C == B:\n                    continue\n                if A + B + C == remaining_digits_sum:\n                    results.append((A, B, C))\n\n    # We can choose any of the (A, B, C) combinations assuming all are applicable\n    result_number = f\"47{results[0][0]}1{results[0][1]}9{results[0][2]}\"\n    sum_abc = results[0][0] + results[0][1] + results[0][2]\n\n    return sum_abc, int(result_number)\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    num_rackets = 2\n\n    # Calculate the total cost for two rackets\n    total_racket_cost = racket_price * num_rackets\n\n    # Calculate the remaining money after buying two rackets\n    remaining_money = total_money - total_racket_cost\n\n    # Calculate the number of tennis balls that Ryan can buy\n    num_balls = remaining_money // ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since there are 3 colors and we want 3 different colored balls,\n    # in the worst case, we might pick all balls of the same color before\n    # starting to pick a different color.\n\n    # Thus we would pick all 4 purple, then all 4 white,\n    # resulting in 8 balls without necessarily getting 3 different colors.\n\n    # The next ball we pick has to be red, which would give us the third color.\n    # So the minimum number of draws required in the worst case is 4 + 4 + 1 = 9.\n\n    return 9\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_weekly_increase = 4\n\n    jed_chocolates = 137\n    jed_weekly_decrease = 6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_weekly_increase\n        jed_chocolates -= jed_weekly_decrease\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes with 6 donuts each\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = (35/5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Each right angled triangle in a circle is determined by its hypotenuse.\n    # For a set of 12 points on a circle, the hypotenuse can be the diameter or not.\n    # If the hypotenuse is a diameter, there are 12/2 = 6 diameters possible.\n    # For each diameter, there are 12 - 2 = 10 points left to form a right angle triangle with it (excluding the diameter's endpoints).\n    right_triangles_diameter = 6 * 10\n\n    # Now, if the hypotenuse is not the diameter, it can be formed by two adjacent points.\n    # There are 12 possible ways to choose the first point, and then 2 ways to choose the second point (the next or previous point on the circle),\n    # but this counts each hypotenuse twice, once for each point, so we divide by 2.\n    # The third point of the triangle has to be one of 2 other points making a right angle over the center of the circle.\n    # So total number of right triangles without a diameter as hypotenuse is:\n    right_triangles_no_diameter = (12 * 2 / 2) * 2\n\n    # The total number of right angled triangles is the sum of these two possibilities.\n    total_right_triangles = right_triangles_diameter + right_triangles_no_diameter\n\n    return total_right_triangles\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples], solutions[oranges]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5*shuttlecock, 205)\n    equation2 = Eq(2*racket + 15*shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Tiger is the 11th from the front and also at the exact middle\n    # If the tiger is in the middle, it means there are 10 animals in front and 10 animals after it\n    total_animals = 10 + 1 + 10  # 10 animals in front, the tiger itself, 10 animals behind\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1 / 3) * 24 + (2 / 5) * 30 + (1 / 3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    # The first digit (hundreds place) can't be 0, so it ranges from 1 to 4\n    for i in range(1, 5):\n        # The second and third digits can range from 0 to 4\n        for j in range(0, 5):\n            for k in range(0, 5):\n                # The sum of the digits should be equal to 4\n                if (i + j + k) == 4:\n                    # Ensure that we are constructing a three-digit number\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Given that Nancy initially divides 24 roses into 3 vases,\n    # this means each of the 3 vases contains 24 / 3 = 8 roses.\n    roses_per_vase_initial = 24 // 3\n    \n    # Nancy's mother brings more roses and these are divided into another 4 vases,\n    # with each vase containing the same amount as before, which is 8 roses.\n    roses_per_vase_after = roses_per_vase_initial\n    \n    # Since there are 4 vases after Nancy's mother brought more roses,\n    # the total number of these additional roses is 4 * 8.\n    additional_roses = 4 * roses_per_vase_after\n    \n    # The total number of roses is the sum of the initial 24 and the additional roses.\n    total_roses = 24 + additional_roses\n    \n    return total_roses\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    from num2words import num2words\n\n    num = 2405 + 1827\n    ans = num2words(num)\n\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost_cents = 50\n    mamee_cost_cents = haribo_cost_cents - 30\n    big_jelly_cost_cents = 6 * mamee_cost_cents\n    big_jelly_cost_dollars = big_jelly_cost_cents / 100\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    return lemon_candies + cherry_candies\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    num = solve_congruence(*congruences)\n\n    if num[0] < 100:\n        return num[0]\n    else:\n        return \"No solution less than 100\"\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    result = 10.256 + 9.2 - 7.51\n    return result\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # Price of strawberry cake\n    strawberry_cake = 3\n\n    # Price of marble cake\n    marble_cake = strawberry_cake + 2\n\n    # Price of cheese cake\n    cheese_cake = 3 * marble_cake\n\n    # Price for 2 cheese cakes\n    price_2_cheese_cake = 2 * cheese_cake\n\n    return price_2_cheese_cake\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # Number of games needed to determine a winner in a single elimination tournament\n    # is always one less than the number of participants, as each game eliminates one player.\n    num_teachers = 16\n    num_games = num_teachers - 1\n\n    return num_games\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Since ABC is divisible by 9 and AB is divisible by 2, A cannot be odd.\n    # Iterate through all possible four digit numbers where AB is even.\n    for A in range(2, 10, 2):  # A is even and nonzero\n        for B in range(10):\n            if A == B:\n                continue\n            for C in range(10):\n                if C in [A, B] or C % 3 != 0:\n                    continue\n                for D in range(1, 10, 2):  # D is odd for CD to be divisible by 5\n                    if D in [A, B, C]:\n                        continue\n                    # Recreate the numbers AB, BC, CD, ABC, and BCD\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 100 * A + 10 * B + C\n                    BCD = 100 * B + 10 * C + D\n\n                    # Check the divisibility conditions\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        return 1000 * A + 100 * B + 10 * C + D\n                        \nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences is:\n    # x ≡ 1 (mod 2)\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    x, mod = solve_congruence(*congruences)\n\n    # Given x < 80, we simply return the first solution found.\n    while x >= 80:\n        x -= mod\n\n    return x\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    # The ratio of height to width is 3:4, so width is 4/3 times the height\n    width = (4 / 3) * height\n    # The perimeter is twice the sum of width and height\n    perimeter = 2 * (width + height)\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    number_of_friends = 3\n\n    average_distance = total_distance / number_of_friends\n\n    return average_distance\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n    \n    # Given conditions translated into equations\n    sum_ages_eq = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    son_age_diff_eq = Eq(younger_son - older_son, 3)\n    daughter_age_diff_eq = Eq(younger_daughter - older_daughter, 2)\n    younger_son_twice_older_daughter = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((sum_ages_eq, son_age_diff_eq, daughter_age_diff_eq, younger_son_twice_older_daughter), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    # Extract the solution and find the youngest child\n    youngest_child_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a wallet and a watch\n    wallet, watch = symbols('wallet watch')\n\n    # Two equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n    \n    # Return the cost of a wallet\n    return solutions[wallet]\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    ways = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    \n    total_water = audrey_water + jane_water\n    \n    return total_water\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    # The recurring part of the fraction is '428571', and it repeats every 6 digits.\n    recurring_part = '428571'\n    \n    # The sum of one occurrence of the recurring part.\n    sum_of_one_set = sum(int(digit) for digit in recurring_part)\n    \n    # Calculate how many full sets of the recurring part fit into 58 digits.\n    full_sets = 58 // len(recurring_part)\n    \n    # Calculate the partial set (remaining digits) after filling with full sets.\n    partial_set = 58 % len(recurring_part)\n    \n    # The sum of digits in the partial set.\n    sum_of_partial_set = sum(int(recurring_part[i]) for i in range(partial_set))\n    \n    # Total sum is the sum of the digits in the full sets plus the sum of the digits in the partial set.\n    total_sum = full_sets * sum_of_one_set + sum_of_partial_set\n    \n    return total_sum\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string_extra = 25\n    nicks_string = toms_string + nicks_string_extra\n    return nicks_string - toms_string\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    num_students = 50\n    num_choose_chicken_tenders = 18\n    percent_choose_chicken_tenders = (num_choose_chicken_tenders / num_students) * 100\n    return percent_choose_chicken_tenders\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of solution to exchange from A to B\n    x = symbols('x')\n    \n    # Initial amounts of sugar in solution A and B\n    sugar_A = 0.11 * 50\n    sugar_B = 0.47 * 50\n    \n    # After exchanging x grams, the amounts of sugar in solution A and B\n    new_sugar_A = sugar_A - 0.11 * x + 0.47 * x\n    new_sugar_B = sugar_B + 0.11 * x - 0.47 * x\n    \n    # The new concentrations should be equal\n    equation = Eq(new_sugar_A / (50 + x - x), new_sugar_B / (50 + x - x))\n    \n    # Solve for x\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Given digits are 1, 3, and 6\n    digits = [1, 3, 6]\n    \n    # A three-digit number means we have 3 places to fill\n    # Since cards can be rotated (repeated), we can choose each digit for each place\n    \n    count = len(digits) * len(digits) * len(digits)\n    \n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # convert meters to cm\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    space_for_cauliflowers_cm = plot_length_cm - first_cauliflower_offset_cm\n    number_of_cauliflowers = space_for_cauliflowers_cm // cauliflower_spacing_cm\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total = 250\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    piles = 4\n    ans = 0\n    \n    # Generate all possible combinations for 4 piles such that sum is 15\n    for combo in combinations(range(1, candies), piles - 1):\n        if sum(combo) < candies:\n            ans += 1\n            \n    return ans\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 <= 50:\n            primes.append(num)\n        elif isprime(num) and isprime(num - 6) and num - 6 > 0:\n            primes.append(num)\n    return primes\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Convert 64cm to metres and add to 3.7m\n    to_subtract_metres = 2 + 7 / 100  # Convert 7cm to metres and add to 2m\n    ans = total_metres - to_subtract_metres  # Subtract 2m 7cm from the total in metres\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n    \n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n    \n    return solutions[lucy]\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while b < 21:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruits * fraction_apples\n    num_pears = total_fruits - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This sequence is a geometric sequence with a common ratio of 2\n    first_term = 1\n    common_ratio = 2\n    \n    # Find the 20th term\n    twentieth_term = first_term * (common_ratio ** (20 - 1))\n    \n    # Find the 17th term\n    seventeenth_term = first_term * (common_ratio ** (17 - 1))\n    \n    # Divide the 20th term by the 17th term\n    ans = twentieth_term / seventeenth_term\n    \n    return ans\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # In order to maximize the product of two numbers with a fixed sum,\n    # the numbers should be as close to each other as possible.\n    # Since the sum is 35, the closest two numbers would be 17 and 18.\n    num1 = 35 // 2\n    num2 = 35 - num1\n\n    # Calculate the maximum product.\n    max_product = num1 * num2\n\n    return max_product\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    average_initial = 60\n    average_with_dennis = 70\n    people_initial = 3\n    people_with_dennis = 4\n    \n    total_books_initial = average_initial * people_initial\n    total_books_with_dennis = average_with_dennis * people_with_dennis\n    \n    dennis_books = total_books_with_dennis - total_books_initial\n    \n    return dennis_books\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    # Smallest two-digit prime number\n    smallest_two_digit_prime = 11\n\n    # Largest two-digit square number\n    largest_two_digit_square = 81  # 9^2\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # The distance between the 1st and 4th flag is 9m\n    distance_between_1_and_4 = 9\n\n    # The distance between each flag is constant, so the distance between the 1st and 9th flag\n    # is the distance between the 1st and 4th flag times two (because 9th flag is twice as far from the 1st flag as the 4th flag is).\n    distance_between_1_and_9 = distance_between_1_and_4 * 2\n\n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n    \nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    climb_up = 5\n    slide_down = 3\n    day_progress = climb_up - slide_down\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_up\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_down\n\n    return days\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # The digit 7 is in the hundredths place.\n    hundredths = 7 * 0.01\n\n    # The digit 6 is in the tenths place.\n    tenths = 6 * 0.1\n\n    # The ones place has a value of 4.\n    ones = 4\n\n    # Combining the values to get the final number\n    num = ones + tenths + hundredths\n\n    return num\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    distance = 200\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    planes = 2\n\n    total_ways = trains + buses + planes\n\n    return total_ways\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let's use x to represent the number of correct answers\n    # and y to represent the number of incorrect or skipped answers.\n    \n    # We have two equations based on the problem statement:\n    # 1) x + y = 10 (since Justin answers all the questions)\n    # 2) 6x - 2y = 36 (since he gets 6 points for a correct answer\n    # and loses 2 points for a wrong answer or skipping).\n    \n    # We can solve this system of equations using substitution or elimination.\n    # I will use substitution for simplicity.\n    \n    # From the first equation, we can express y in terms of x: y = 10 - x.\n    # Substituting y in the second equation gives us:\n    # 6x - 2(10 - x) = 36.\n    \n    # Solving for x:\n    x = (36 + 2*10) / (6 + 2)\n    # Since we need to find the number of correct answers, the value we look for is x.\n    return int(x)\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of peaches as P and the number of students in Class B as B.\n    # Since Class A has 3 more students, number of students in Class A is B + 3.\n    P, B = symbols('P B')\n\n    # If all peaches are given to Class A, then (P - 10) is divisible by (B + 3) with quotient 5.\n    equation1 = Eq(P - 10, 5 * (B + 3))\n\n    # If all peaches are given to Class B and each gets 8, we'll need 2 more peaches.\n    equation2 = Eq(P + 2, 8 * B)\n\n    # Solve the two equations simultaneously.\n    solutions = solve((equation1, equation2), (P, B))\n    \n    return solutions[P]\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28512)  # Get prime factors and their powers\n    h = 1\n    for prime, power in factors.items():\n        if power % 3 != 0:\n            h *= prime ** (3 - (power % 3))  # Make the remaining powers of primes a multiple of 3\n    return h\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # We treat the 3 playing a sketch performances as fixed elements that need to be separated by dancing performances.\n    # There must be at least 1 dancing performance between every 2 playing a sketch, so we have 2 slots.\n    # In total, we have 5 slots among the playing a sketch performances (2 between them and 1 before the first and 1 after the last)\n    # We need to place the remaining 7 - 2 = 5 dancing performances into these 5 slots. This can be done in C(5 + 5 - 1, 5) ways.\n    # The reason we use 5 - 1 is to remove one slot to account for the minimum requirement of 1 dance between the plays.\n    \n    # Calculate combinations for the dancing performances\n    slots = 5\n    dances = 5\n    dance_combinations = factorial(slots + dances - 1) // (factorial(dances) * factorial(slots - 1))\n    \n    # Calculate the permutations of the dancing performances within themselves\n    dance_permutations = factorial(dances)\n    \n    # The playing a sketch performances are already fixed in order so no need to count permutations for them\n    \n    # The total arrangement is the product of the combinations and permutations of dancing\n    total_arrangements = dance_combinations * dance_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "from math import comb\n\ndef solution():\n    # The worst case scenario is taking all chips of one color first\n    # So we should calculate the smallest number of chips such that\n    # when taking one more, we are guaranteed a different color\n    \n    # max single color chips\n    max_chips = max(3, 4, 5) \n    \n    # To ensure getting two different colors, we need to take \n    # one more than the max quantity of any single color.\n    num_to_take = max_chips + 1 \n    \n    return num_to_take\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = 31415925\n\n    ans = (b - 1)**2 - b * c\n\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n    \n    total_children = mark_position + children_between + helen_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    total_handshakes = 0\n\n    # Each father shakes hands with fathers, mothers and children from other 9 families\n    # Fathers: 9 (other fathers) + 9 (wives) + 9 (children) = 27 handshakes per father\n    total_handshakes += families * 27\n\n    # Each mother shakes hands with fathers and children from other 9 families\n    # Mothers: 9 (fathers) + 9 (children) = 18 handshakes per mother\n    total_handshakes += families * 18\n\n    # Each child shakes hands with fathers and mothers from other 9 families\n    # Children: 9 (fathers) + 9 (mothers) = 18 handshakes per child\n    total_handshakes += families * 18\n\n    return total_handshakes\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    decimal_part = \"85274\"\n    digit_index = (79 - 1) % len(decimal_part)  # Adjusting for zero-based indexing\n    digit = decimal_part[digit_index]\n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_three_digit_number = 999\n    for number in range(max_three_digit_number, 99, -1):\n        if (number + 2009) % (17 * 19) == 0:\n            return number\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9.\n    # Each digit in the 3-digit number can be one of these 5 odd digits.\n    # The first digit has 5 choices (it can't be 0), and the same applies to the second and third digits.\n    count_per_place = 5\n    total_numbers = count_per_place ** 3  # Applying the multiplication principle\n\n    return total_numbers\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    actual_sum = sum(range(total_pages + 1))\n    tim_sum = 1939\n    missing_page = actual_sum - tim_sum\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Worst case scenario: Jane draws all marbles of one color, then another, and so on.\n    # To ensure she gets all 4 colors, she needs to draw almost all of one color, then almost all of the second, and so on.\n    # At the end, any marble she draws will be of the fourth color for sure.\n    \n    # Red:    4 (need to draw 3 to still have a chance of missing 4th color)\n    # Green:  7 (need to draw 6)\n    # Blue:   6 (need to draw 5)\n    # Orange: 2 (no need to draw any as we are now sure to get the last color)\n\n    # Summing up the worst case draws for red, green, and blue:\n    must_draw = 3 + 6 + 5\n\n    # Adding one more draw will ensure that we have the fourth color:\n    must_draw += 1\n    \n    return must_draw\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    paid_hours = 0\n\n    # Calculate the additional hours after the first 40 free hours\n    additional_hours = 0\n\n    # Calculate the number of hours in the $5 per hour bracket\n    if bill > 0:\n        if bill <= (10 * 5):  # 10 hours at $5 per hour\n            paid_hours += bill / 5\n        else:  # More than 10 hours in this bracket\n            bill -= (10 * 5)\n            paid_hours += 10\n\n    # Calculate the number of hours in the $8 per hour bracket\n    if bill > 0:\n        if bill <= (10 * 8):  # 10 hours at $8 per hour\n            paid_hours += bill / 8\n        else:  # More than 10 hours in this bracket\n            bill -= (10 * 8)\n            paid_hours += 10\n\n    # Calculate the number of hours in the $15 per hour bracket\n    if bill > 0:\n        paid_hours += bill / 15\n\n    # Total hours parked\n    total_hours = free_hours + paid_hours\n\n    return total_hours\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket_number in range(999):\n        next_ticket_number = ticket_number + 1\n        if ticket_number + next_ticket_number == 777:\n            return next_ticket_number + 1\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    num_years = 5\n\n    final_value = initial_value * (depreciation_rate ** num_years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Helper function to calculate ways to climb to the nth step\n    def climb_stairs(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        \n        memo[n] = climb_stairs(n-1) + climb_stairs(n-2) + climb_stairs(n-3)\n        return memo[n]\n\n    memo = {}\n    # Calculate ways to climb up to the 4th step\n    total_ways_to_fourth_step = climb_stairs(4)\n\n    # Jim can't step on the 5th step, so we consider the 6th step as the starting point\n    # from there, how many ways to go to the 10th step.\n    memo = {}\n    total_ways_from_sixth_to_tenth_step = climb_stairs(10 - 6)\n\n    # Since he can reach the 6th step from the 4th step by taking 2 steps,\n    # the number of ways to climb up to the 6th step directly influences the total ways.\n    total_ways_to_avoid_fifth_step = total_ways_to_fourth_step * total_ways_from_sixth_to_tenth_step\n\n    return total_ways_to_avoid_fifth_step\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    \n    total_weekly_earnings = average_daily_earnings * days_in_a_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    max_odd = 85 - (1 + 3 + 5 + 7)  # Subtract the smallest four odd numbers from the total\n    return max_odd\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    speed_downstream = speed_ship + speed_current\n    distance = 500\n\n    time = distance / speed_downstream\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    # There are 60 seconds in 1 minute\n    seconds_in_a_minute = 60\n    # Two and a half minutes is 2.5 minutes\n    minutes = 2.5\n    # Calculate number of seconds in two and a half minutes\n    n = seconds_in_a_minute * minutes\n    return int(n)\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    # Tax on first $30,000\n    tax_first_30k = T * 30000 / 100\n\n    # Tax on the rest (income - 30000)\n    tax_rest = (T + 3) * (income - 30000) / 100\n\n    # Total tax is the sum of both parts\n    total_tax = tax_first_30k + tax_rest\n\n    # Equation based on Ryan's observation\n    equation = Eq(total_tax, (T + 1) * income / 100)\n\n    # Solve the equation for income\n    solutions = solve((equation,), (income,))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_coins = 21\n    total_value = 630  # value in cents\n\n    for num_50_cent in range(total_coins + 1):\n        num_20_cent = total_coins - num_50_cent\n        if 50 * num_50_cent + 20 * num_20_cent == total_value:\n            return num_50_cent\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    for i in range(1, 6):\n        number = int('2' + '5' * i)\n        if sqrt(number).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, tom = symbols('alice tom')\n\n    equation1 = Eq(alice - 36, tom - 25.40)\n    equation2 = Eq(tom, 68.10)\n\n    solutions = solve((equation1, equation2), (alice, tom))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_for_first_set = 5 * 28\n    total_for_second_set = 12 * 11\n    mean_of_all_numbers = (total_for_first_set + total_for_second_set) / (5 + 12)\n    \n    return mean_of_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percent = 20\n    discount_amount = original_price * (discount_percent / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the distance between A and B as d,\n    # p_speed as Phillip's speed in meters per minute,\n    # and a_speed as Alan's speed in meters per minute.\n    d, p_speed, a_speed = symbols('d p_speed a_speed')\n    \n    # Given that Phillip walks 15 meters more than Alan does per minute\n    equation1 = Eq(p_speed, a_speed + 15)\n    \n    # Phillip arrives in 12 minutes\n    equation2 = Eq(d, 12 * p_speed)\n    \n    # Alan arrives in 12 minutes + 3\n    equation3 = Eq(d, (12 + 3) * a_speed)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, p_speed, a_speed))\n    \n    # Return the distance between A and B, which is d\n    return solutions[d]\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74\n    space_between_benches = 7\n    number_of_gaps = 8  # as there are 9 benches, there are 8 gaps between them\n    total_space_between_benches = space_between_benches * number_of_gaps\n    \n    bench_length = (total_length - total_space_between_benches) / 9\n    return bench_length\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    regrowth = 5\n    original_arms = (total_cuts - 1) / (regrowth - 1)\n\n    return int(original_arms)\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # To ensure we get 2 coins of different colors, we need to consider the worst case scenario.\n    # Worst case scenario: we keep drawing the same color.\n    # Since there are 6 gold and 6 silver coins, after drawing 6 coins we could still have coins of the same color.\n    # Therefore, we must draw one more coin to be certain that we have at least 2 different colored coins.\n    \n    # Drawing 6 coins (all could be the same color) + 1 more coin guarantees 2 different colored coins.\n    ans = 6 + 1\n    return ans\n\n# Call the function and store the result in the variable `ans`\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies = symbols('candies')\n    students_B = symbols('students_B')\n    \n    # Equation: If each student in class A gets 4 candies, 20 more candies are needed\n    # translates to 4 * (2 * students_B) = candies - 20\n    equation1 = Eq(4 * (2 * students_B), candies - 20)\n    \n    # Equation: If each student in class B gets 6 candies, there will be 16 candies left\n    # translates to 6 * students_B = candies - 16\n    equation2 = Eq(6 * students_B, candies - 16)\n\n    solutions = solve((equation1, equation2), (students_B, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Given the distance from the 1st to the 5th tree is 20 cm\n    # This covers 4 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th, 4th to 5th)\n    \n    # Calculate the distance of one interval\n    distance_per_interval = 20 / 4\n    \n    # Determine the number of intervals between the 8th and 14th tree\n    num_intervals = 14 - 8\n    \n    # Calculate the distance from the 8th to the 14th tree\n    distance = distance_per_interval * num_intervals\n    \n    return distance\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Since the 3rd greatest number is 246 and we want to minimize the 4th greatest number,\n    # we need to maximize the sum of the 1st, 2nd and 3rd greatest numbers.\n    # To do this, we distribute the remaining sum (2021 - 246) among the 7 smallest numbers,\n    # giving each one as much as possible without exceeding 246.\n\n    # Total sum of numbers\n    total_sum = 2021\n    \n    # The third greatest number\n    third_greatest = 246\n    \n    # Remaining sum after the 3rd greatest number is subtracted\n    remaining_sum = total_sum - third_greatest\n    \n    # Since we want to maximize the 1st and 2nd greatest numbers,\n    # we give the minimum possible value to the 7 numbers that are less than the 4th greatest.\n    # We use 1 instead of 0 for the smallest whole number as per the problem's requirement for whole numbers.\n    # We then distribute the remaining sum to the smallest 7 numbers equally without making any of them exceed 246.\n    \n    # We calculate the maximum sum we can assign to the smallest 7 numbers\n    min_possible_values = 7  # 1 for each of the smallest seven numbers\n    remaining_sum_for_smallest_seven = remaining_sum - min_possible_values\n    \n    # Now we distribute the remaining sum to the smallest 7 numbers such that none of them exceed 246\n    max_sum_per_small_number = third_greatest - 1\n    sum_smallest_seven = min(max_sum_per_small_number * 7, remaining_sum_for_smallest_seven)\n\n    # Anything that is left will be added to the 4th greatest number\n    min_value_fourth_greatest = remaining_sum - sum_smallest_seven + 1  # The +1 is because we start from 1, not 0\n    \n    return min_value_fourth_greatest\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    nums = list(range(1, 25))\n    valid_selections = []\n\n    def is_valid_circle(selection):\n        for i in range(len(selection)):\n            if gcd(selection[i], selection[(i + 1) % len(selection)]) != 1:\n                return False\n        return True\n\n    def find_combinations(current_selection, remaining_nums):\n        if not remaining_nums:\n            if is_valid_circle(current_selection):\n                valid_selections.append(current_selection[:])\n        else:\n            for num in remaining_nums:\n                if not current_selection or gcd(current_selection[-1], num) == 1:\n                    find_combinations(current_selection + [num], [x for x in remaining_nums if x != num])\n\n    find_combinations([], nums)\n    max_length = max(len(selection) for selection in valid_selections)\n    return max_length\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_per_minute = 60\n    time_in_seconds = 150\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_per_minute * time_in_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38*32 + 37*33 + 36*34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    equation1 = Eq(devi, jerry + 8)  # Devi is 8 years older than Jerry.\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)  # Ratio of their ages in 4 years is 5:7.\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey_age, father_age = symbols('grey_age father_age')\n    equation1 = Eq(father_age, 30 + grey_age)\n    equation2 = Eq(father_age, 3 * grey_age)\n    \n    solutions = solve((equation1, equation2), (grey_age, father_age))\n    \n    return solutions[father_age]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator / denominator\n    ans = 10 * fraction\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n\n    # Using the Pigeonhole Principle\n    least_books_on_most_layer = -(-total_books // total_layers)\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_seats = num_terms * (first_term + last_term) // 2\n    return total_seats\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Assume Bud has 1 part, then Pip has 5 parts\n    bud_parts = 1\n    pip_parts = 5\n    \n    parts = {'Bud': bud_parts, 'Pip': pip_parts}\n\n    # Create a bar graph\n    names = list(parts.keys())\n    values = list(parts.values())\n    \n    fig, ax = plt.subplots()\n    ax.bar(names, values)\n\n    # Show graph; however, the function will not officially \"return\" the graph\n    plt.show()\n\n    # Return the text description instead of the graph\n    ans = \"Pip has 5 parts, Bud has 1 part.\"\n    return ans\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    perm = permutations(digits)\n    \n    ans = len(list(perm))\n    return ans\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The Chinese Remainder Theorem can solve a system of simultaneous congruences\n    # Here we have the congruences:\n    # x ≡ 1 (mod 3)\n    # x ≡ 3 (mod 5)\n    # x ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Use the Chinese Remainder Theorem to find a solution\n    x, _ = solve_congruence(*congruences)\n\n    # Since we are looking for a number between 100 and 200, we should find the smallest\n    # x such that 100 ≤ x < 200 by adding multiples of the least common multiple of\n    # 3, 5, and 7 until we are in this range\n    lcm = 3 * 5 * 7\n\n    while x < 100:\n        x += lcm\n\n    return x if x < 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    # Dividend = Divisor * Quotient + Remainder\n    # To find the minimum value of the dividend, we assume the minimum possible divisor is 1\n    # Therefore, the minimum dividend is as follows:\n    min_dividend = 1 * quotient + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Three digit numbers formed using 0, 1, 2\n    # We cannot start a three-digit number with 0, hence we have only two choices for the first position: 1, 2\n    first_digit_options = 2\n\n    # For the second position, we can use any of the three digits: 0, 1, 2\n    # However, we can't repeat the digit used in the first position.\n    second_digit_options = 2\n\n    # For the third position, we can use any of the remaining two digits\n    # We have used one digit in the first position and a different one in the second position\n    third_digit_options = 1\n\n    # Total different three-digit numbers is the product of the options for each position\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    # Eliza sold twice as many cookies as Veron\n    equation1 = Eq(eliza, 2 * veron)\n    # Betty sold 185 fewer cookies than Eliza\n    equation2 = Eq(betty, eliza - 185)\n    # Together they sold 855 cookies\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    age_difference = uncle_future_age - melanie_age\n    uncle_current_age = melanie_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')  # y represents Hazel's age in three years\n    hazel_current = y - 3  # Hazel's current age\n    jessica_current = hazel_current - 3  # Jessica's current age, which is 3 years younger than Hazel's current age\n\n    # Their ages next year\n    hazel_next_year = hazel_current + 1\n    jessica_next_year = jessica_current + 1\n\n    # Total age next year\n    total_age_next_year = hazel_next_year + jessica_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "网络故障，请重试"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Conversion of units to centimeters\n    section1_cm = 30\n    section2_cm = 1.5 * 100 # 1 meter = 100 centimeters\n    section3_cm = 150 / 10  # 1 millimeter = 0.1 centimeters\n\n    # Total width of the wardrobe\n    total_width_cm = section1_cm + section2_cm + section3_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"15:25\", \"%H:%M\")\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = float(result)\n    \n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    # Define variables for Amy's current age and her age 5 years ago\n    amys_age_now = 15\n    amys_age_5_years_ago = amys_age_now - 5\n    \n    # Amy's age 5 years ago is the same as her sister's age 3 years later:\n    # So if we let S be the sister's current age, we have:\n    # amys_age_5_years_ago = S + 3\n    # We need to solve for S:\n    sisters_age_now = amys_age_5_years_ago - 3\n\n    return sisters_age_now\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree_of_x = 3\n    degree_of_y = 2  # because we have y to the power of 2n, and we're looking for the value of n\n    \n    total_degree = degree_of_x + degree_of_y * n  # total degree is sum of degrees of x and y\n\n    # We know the total degree is 5 (given), so we can set up the equation and solve for n\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    # n = 1\n\n    n = (5 - degree_of_x) / degree_of_y\n\n    return int(n)  # converting float result to int because degree can't be a fraction\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different number/letter, and 4 suits\n    # Drawing one from each number/letter will result in 13 cards\n    # Hence, to ensure we have at least two of the same number/letter\n    # we must draw one more card than the number of different numbers/letters\n\n    num_different_cards = 13  # there are 13 different numbers/letters\n    cards_to_draw = num_different_cards + 1  # draw one more to ensure a match\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # Initialize the result to a high number since we are looking for the minimum\n    result = float('inf')\n\n    # Loop through all possible 3-digit numbers\n    for i in range(100, 1000, 2):  # step by 2 because we want even numbers only\n        if sum(map(int, str(i))) == 21:\n            result = i\n            break  # Break after finding the smallest such number\n            \n    return result\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j / i for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    whole_amount = (part * 5) // 3\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_spent = 156\n    cactus_cost = 2\n    sunflower_cost = 7\n    additional_cacti = 6\n\n    # Let the number of sunflowers be 's'\n    # Then, the number of cacti will be 's + additional_cacti'\n    # The total cost will be the cost of sunflowers plus the cost of cacti\n    \n    # total_spent = s * sunflower_cost + (s + additional_cacti) * cactus_cost\n    # 156 = s * 7 + (s + 6) * 2\n    # Simplify this equation to find the number of sunflowers\n    \n    s = (total_spent - (additional_cacti * cactus_cost)) / (sunflower_cost + cactus_cost)\n    cacti = s + additional_cacti\n\n    return int(cacti)\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x represent the cost of a book in pence\n    x = symbols('x')\n    \n    # Sarah's cost\n    sarah_cost = 8 * x + 3 * 40\n    \n    # Rebecca's cost\n    rebecca_cost = 3 * x + 8 * 40\n    \n    # Equation: Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 100)\n    \n    # Solve the equation\n    cost_of_book = solve(equation, x)[0]\n    \n    # Convert the book's cost to pounds\n    return cost_of_book / 100\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_sum = sum([i**2 for i in range(1, 20, 2)])\n    \n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    L, M = symbols('L M')  # L for Liverpool fans, M for Manchester United fans\n    \n    # Initial condition, Liverpool fans (L) are 1000 more than Manchester United fans (M)\n    equation1 = Eq(L, M + 1000)\n    \n    # After 30 minutes, condition, Man Utd fans (M + 4836) are 3 times Liverpool fans (L + 472)\n    equation2 = Eq(M + 4836, 3 * (L + 472))\n    \n    solutions = solve((equation1, equation2), (L, M))\n    \n    return solutions[L]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil = symbols('book pencil')\n    pencil_price = 0.40  # 40p is £0.40\n\n    # Sarah's total cost\n    sarah_total = 8 * book + 3 * pencil_price\n    # Rebecca's total cost\n    rebecca_total = 3 * book + 8 * pencil_price\n\n    # Sarah paid £1 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1)\n\n    # Solve the equation\n    solutions = solve((equation), (book))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    needed_players = 6\n\n    return comb(total_players, needed_players)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Final money after giving $2 to Mike and $3 left\n    final_money = 2 + 3\n    # Money before giving to Mike\n    before_mike = final_money * 2\n    # Money before giving to Nini\n    before_nini = before_mike * 2\n    # Money before giving to Bob\n    before_bob = before_nini * 2\n    # Money before giving to her mother\n    original_money = before_bob * 2\n    \n    return original_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(7 * x + 3 * (x + 5), 45)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    number = \"\"\n    digit = 2023\n    current = 1\n    while len(number) < digit:\n        number += str(current)\n        current += 1\n    return int(number[digit - 1])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of students in Class B be 'b' and Class A will have 'b + 3' students\n    # Let the total number of peaches be 'p'\n    b, p = symbols('b p')\n    \n    # Create equations based on the problem statement\n    # Class A equation: p = 5 * (b + 3) + 10\n    # Class B equation: p = 8 * b - 2\n    equation1 = Eq(p, 5 * (b + 3) + 10)\n    equation2 = Eq(p, 8 * b - 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    current_year = 1\n\n    age_at_end_of_98 = 11 - 1\n    age_at_end_of_01 = age_at_end_of_98 + (current_year - birth_year)\n\n    return age_at_end_of_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    all_permutations = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in all_permutations if int(p[-1]) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of T-shirts be t and the number of caps be c\n    t, c = symbols('t c')\n    \n    # Given ratio of T-shirts to caps: t / c = 8 / 5\n    ratio_eq = Eq(t / c, 8 / 5)\n    \n    # Sold 1/4 of T-shirts and 1/5 of caps, collected $132\n    # 3*(1/4)*t + 5*(1/5)*c = 132\n    sales_eq = Eq(3 * (1/4) * t + 5 * (1/5) * c, 132)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, sales_eq), (t, c))\n    \n    # Number of T-shirts Siti had at first\n    return solutions[t]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n    trips = -(-(total_students) // boat_capacity)  # This is the same as math.ceil()\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    target_term = 36\n    difference = 2\n\n    ordinal_number = ((target_term - first_term) / difference) + 1\n\n    return int(ordinal_number)\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of cards Eric has be x\n    # Then Joe has 7x cards\n    # After giving away some cards, they both have 168 cards\n    # So, Joe gives away (7x - 168) cards to Eric\n    # And Eric has (x + (7x - 168)) cards\n    # Which means x + 7x - 168 = 168\n    # Simplifying that we get 8x = 168 + 168\n    # Hence, x = (168 + 168) / 8\n    x = (168 + 168) / 8\n    \n    # Number of cards Joe gives to Eric is (7x - 168)\n    cards_given = (7 * x) - 168\n    \n    return int(cards_given)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens in [2, 3, 5, 7]:  # These are the prime digits\n        for ones in [2, 3, 5, 7]:\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    escaped = 5\n    additional_catch = 9\n\n    ans = initial_catch - escaped + additional_catch\n    \n    return ans\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_to_paint_one_picture = 10  # minutes\n    total_time_available = 80  # one hour and twenty minutes in minutes (60 + 20)\n\n    num_pictures = total_time_available / time_to_paint_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for i in range(1, 50):  # Reasonable upper limit for people\n        if (19 - 6) % i == i / 2:\n            return i\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    ways = 0\n    # Since the number of apples in each group should be different and sum up to 10,\n    # we only need to find combinations for the smaller group and the other group is implied.\n    for group1 in range(1, 10 // 2 + 1):\n        group2 = 10 - group1\n        if group1 != group2:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    num_students = 5\n    ans = factorial(num_students)\n\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let's assume Charlie has x pears, so Anne has (38 - x) pears.\n    # If Anne gives Charlie 6 pears, then Charlie will have (x + 6) pears and Anne will have (38 - x - 6) pears.\n    # Since they will have an equal number of pears after the exchange, we can set up the following equation:\n    # x + 6 = 38 - x - 6\n    # Solving for x gives us the number of pears Charlie has.\n    # Let's solve this equation.\n    \n    # rearranging the equation x + 6 = 32 - x we get:\n    # 2x = 32 - 6\n    # x = (32 - 6) / 2\n    \n    charlie_pears = (32 - 6) / 2\n    anne_pears = total_pears - charlie_pears\n    return int(anne_pears)\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    diff_swims = amy_swims - joanne_swims\n\n    return diff_swims\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d')\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n    \n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation)\n    \n    return solutions[abcd]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    time_taken = 1 / combined_rate\n    \n    return time_taken\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial condition\n    initial_condition = Eq(isaac, 5 * joseph)\n    \n    # Condition after Joseph receives stamps\n    after_condition = Eq(joseph + 154, 9/10 * isaac)\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, after_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    n = 29\n    count_2 = count_5 = 0\n    \n    for i in range(2, n+1):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10\n    N = int('12345654321', 8)\n    \n    # Calculate remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum of the remainders\n    sum_remainders = remainder_7 + remainder_9\n    \n    return sum_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Linda's speed ratio is 3, Ted's is 4\n    # When Linda has jogged 1200 m, Ted has jogged more since his speed is greater\n    # Ted's distance is (4/3) * Linda's distance when they meet\n    # Let's calculate Ted's distance when they meet \n    ted_distance = (4/3) * 1200\n    \n    # The length of the path is the sum of the distances jogged by both\n    path_length = 1200 + ted_distance\n    \n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2018 * 10 + A) % 9 == 0:\n            return (2018 * 10 + A) % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_in_front = 5\n    elvis_behind = 7\n    between_ryan_and_elvis = 1\n\n    # Since Ryan is in front of Elvis and there is 1 squirrel between them,\n    # The total number of squirrels is Ryan's position + 1 (the squirrel between) + Elvis' position + Elvis himself.\n    total_squirrels = ryan_in_front + between_ryan_and_elvis + elvis_behind + 1  # +1 for Elvis himself\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # Derangement formula or subfactorial: !n = (n-1)(!(n-1) + !(n-2))\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    return subfactorial(6)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done_by_one_worker_in_one_day = 1 / (workers * days)\n    days_for_one_worker_to_build = 1 / work_done_by_one_worker_in_one_day\n\n    return int(days_for_one_worker_to_build)\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    return solution[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    amount = 45\n    percent = 30\n    result = (amount * percent) / 100\n    return result\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    result = (percentage / 100) * total_weight\n\n    return result\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pupils_p, pupils_q = symbols('pupils_p pupils_q')\n\n    # Given ratio of pupils in School P and School Q is 2:3\n    equation1 = Eq(pupils_p/pupils_q, 2/3)\n\n    # After admitting 240 pupils each, the ratio becomes 3:4\n    equation2 = Eq((pupils_p + 240)/(pupils_q + 240), 3/4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (pupils_p, pupils_q))\n\n    return solutions[pupils_p]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    spent_on_bag_percentage = 70\n    remainder = 100 - spent_on_bag_percentage\n    spent_on_purse_percentage = (3/8) * remainder\n    \n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    # Sum of all odd numbers between 0 and 20\n    # An odd number between 0 and 20 can be represented as 2n+1 where n is a whole number\n    # For 2n + 1 to be less than or equal to 20, n must be less than or equal to 9 (since 2*9 + 1 = 19)\n    # There are 10 whole numbers from 0 to 9 inclusive, which correspond to the odd numbers 1, 3, ..., 19\n    \n    # Calculate sum of odd numbers from 1 to 19 by summing the arithmetic series\n    first_odd = 1\n    last_odd = 19\n    total_odds = (last_odd - first_odd) // 2 + 1\n    sum_odds = total_odds * (first_odd + last_odd) // 2\n    \n    return sum_odds\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's create a symbol for Jack's present age\n    jack_present_age = symbols('jack_present_age')\n\n    # Now setting up the equation based on the problem statement\n    # Five years ago, Jack's age was (jack_present_age - 5)\n    # The age he will be in 8 years is (jack_present_age + 8)\n    # Five years ago, Jack's age was half of the age he will be in 8 years translates to:\n    equation = Eq(jack_present_age - 5, 0.5 * (jack_present_age + 8))\n\n    # Now solve the equation for Jack's present age\n    solution = solve(equation, jack_present_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    consonants = \"\".join([ch for ch in word if ch not in vowels])\n    \n    total_permutations = factorial(len(word))\n    vowel_permutations = factorial(len(vowels))\n    consonant_permutations = factorial(len(consonants))\n\n    # Total permutations with vowels together\n    vowels_together = vowel_permutations * factorial(len(consonants) + 1)\n\n    # Subtracting from the total permutations gives us permutations where vowels are never together\n    ans = total_permutations - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1\n    candies_per_student = total_candies // total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = sweets_bought\n    while wrappers >= 3:\n        exchange_sweets = wrappers // 3\n        sweets_bought += exchange_sweets\n        wrappers = wrappers % 3 + exchange_sweets\n    return sweets_bought\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given values\n    angle_BAC = 50\n    \n    # In the problem, BP bisects angle ABC, and CP bisects angle ACB.\n    # Hence, angle ABC and angle ACB must be equal, as they both sum up to the \n    # remaining 130 degrees of the triangle (180 degrees in total for any triangle).\n    \n    # Let angle ABC = angle ACB = x.\n    # Therefore, angle ABP = angle CBP (as BP bisects angle ABC)\n    # and angle ACP = angle BCP (as CP bisects angle ACB).\n\n    # Since the sum of angles in triangle ABC is 180 degrees, we have:\n    # angle BAC + angle ABC + angle ACB = 180\n    # 50 + 2x + 2x = 180\n    # 4x = 130\n    # x = 32.5\n    x = (180 - angle_BAC) / 4\n    \n    # Now, angle BPC is the external angle for triangle BPB and triangle BPC, which is equal to\n    # the sum of the two opposite internal angles (angle ABP + angle ACP).\n    # Hence, angle BPC = 2*(angle ABP) + 2*(angle ACP)\n    # angle BPC = 2*x + 2*x\n    angle_BPC = 4 * x\n    \n    return angle_BPC\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers start from 10 to 99\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    equation2 = Eq(three_tailed, 2 + six_tailed / 2)\n    equation3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 16 * eight_tailed, 2 * (2 + two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n    equation4 = Eq((2 + two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 16 * eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    # The number of three-tailed birds\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    total_weight_kg = 5\n    weight_per_bag_kg = 0.25\n    number_of_bags = total_weight_kg / weight_per_bag_kg\n    total_selling_price = number_of_bags * selling_price_per_bag\n    profit = total_selling_price - cost_price\n    percentage_profit = (profit / cost_price) * 100\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # number of ways to go from Ayton to Beeton\n    AB = 4\n    # number of ways to go from Beeton to Ceeton\n    BC = 5\n    # number of ways to go from Ceeton to Deeton\n    CD = 6\n    # number of ways to go directly from Ayton to Deeton\n    AD_direct = 3\n\n    # number of ways to go from Ayton to Deeton through Beeton and Ceeton\n    AD_through_BC = AB * BC * CD\n\n    # total number of ways to go from Ayton to Deeton\n    total_ways = AD_direct + AD_through_BC\n    \n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    value = (20 * 3) / 15\n    return value\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Difference between terms is spread equally among the steps between the terms\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Calculate 12th term, using the 10th term as a base\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return int(twelfth_term)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n\n    # Multiple of 2 and 3 are underlined red and blue\n    count += len(set(range(2, 2017, 2)).intersection(set(range(3, 2017, 3))))\n    \n    # Multiple of 2 and 4 are underlined red and green. However, every multiple of 4 is already a multiple of 2.\n    # So there's no need to check this combination as they will not be underlined exactly twice.\n\n    # Multiple of 3 and 4 are underlined blue and green\n    count += len(set(range(3, 2017, 3)).intersection(set(range(4, 2017, 4))))\n\n    # Numbers that are multiples of 2, 3, and 4 are underlined three times, which we have to subtract\n    count -= len(set(range(2*3*4, 2017, 2*3*4)))\n\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbol for Joe's money\n    joe = symbols('joe')\n    \n    # Sally has $3.75, spends $2.50\n    sally_after = 3.75 - 2.50\n    \n    # Joe has some money 'joe', spends $2.50\n    joe_after = joe - 2.50\n    \n    # Together they have $5 left after spending\n    equation = Eq(sally_after + joe_after, 5)\n    \n    # Solve the equation to find Joe's original amount of money\n    solutions = solve(equation, joe)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    first_average = 135\n    last_average = 151\n    \n    total_trees_first = first_days * first_average\n    total_trees_last = last_days * last_average\n    \n    total_days = first_days + last_days\n    \n    total_trees = total_trees_first + total_trees_last\n    \n    overall_average = total_trees / total_days\n    \n    return overall_average\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for magic number\n    magic_number = symbols('magic_number')\n\n    # Define equation based on the problem statement\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n\n    # Solve for magic number\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate combinations for choosing 2 out of 4 options\n    options = [salads, soups, vegetables, sandwiches]\n    combinations = 0\n    for i, option1 in enumerate(options):\n        for option2 in options[i+1:]:\n            combinations += comb(option1, 2) + comb(option2, 2)\n\n    return combinations\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):\n                if hundred + ten + one == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Initialize count of boys and girls\n    boys = 0\n    girls = 0\n    \n    # The array forms concentric squares, boys on the outside, girls on the next layer and so on\n    # We start by assuming one layer of boys\n    layer = 1\n    \n    while True:\n        # Total students on the current layer\n        if layer == 1:\n            # If it's the first layer, it's a single point boy\n            boys += 1\n        else:\n            # Each layer contributes 4 * (layer - 1) students\n            students_current_layer = 4 * (layer - 1)\n            # Odd layers are boys, Even layers are girls\n            if layer % 2 == 1:\n                boys += students_current_layer\n            else:\n                girls += students_current_layer\n        \n        # Stop the loop if we have found the case where boys exceed girls by 32\n        if boys - girls == 32:\n            break\n        \n        # Go to the next layer\n        layer += 1\n    \n    # The total number of students is the sum of boys and girls\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if n, n + 2, n + 4, n + 106, and n + 308 are all prime\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    ans = 6.2 - 3.7\n    return ans\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s represent the mass of strawberries at first\n    s = symbols('s')\n\n    # Set up the equation based on the information given\n    # Mass of mangoes at first is s + 448\n    # After giving away 900g, mass of mangoes becomes s + 448 - 900\n    # It is also given that the mass of strawberries is twice the mass of remaining mangoes\n    equation = Eq(s, 2 * (s + 448 - 900))\n\n    # Solving the equation\n    mass_of_strawberries = solve(equation, s)\n\n    return mass_of_strawberries[0]\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n    \n    # Max bought the chocolates\n    equation1 = Eq((max_money - 12) / anthony_money, 2 / 5)\n    \n    # Anthony bought the chocolates\n    equation2 = Eq(max_money / (anthony_money - 12), 8 / 13)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n    \n    return solutions[max_money]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the number of lemons\n    lemons = symbols('lemons')\n\n    # Given equations based on the problem statement\n    # If x represents the total items, then (2/3)x - 12 = lemons (since Rena bought 12 more apples than lemons)\n    # Then we also know (2/3)x + (1/9)x + lemons = x (the sum of all the fractions of items is the total items)\n    # This simplifies to (7/9)x + lemons = x\n    # Therefore, (2/9)x = lemons\n    # But we also have the equation (2/3)x = lemons + 12 from the first piece of information\n    # We equate the two expressions for lemons to find the number of lemons: (2/9)x = (2/3)x - 12\n\n    # Solving the equation\n    # (2/9)x = (2/3)x - 12\n    # Multiply each term by 9 to clear the fractions: 2x = 6x - 108\n    # Subtract 6x from both sides: -4x = -108\n    # Divide by -4: x = 27\n\n    # Now that we have x, we can calculate lemons\n    # lemons = (2/9) * x\n    x = 27\n    lemons_count = (2 / 9) * x\n\n    return lemons_count\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    unit_digit_sequence = []\n    current_digit = base_unit_digit\n\n    for _ in range(4):  # 4 has a cycle of 4 in terms of unit digits.\n        unit_digit_sequence.append(current_digit)\n        current_digit = (current_digit * base_unit_digit) % 10\n\n    # The unit digit repeats every 4 powers of 4, so the unit digit of 444^2022\n    # will be the same as the unit digit of 4^(2022 % 4).\n    index_in_sequence = 2022 % 4\n    unit_digit_of_power = unit_digit_sequence[index_in_sequence - 1]  # -1 due to zero-based indexing\n\n    return unit_digit_of_power\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let the initial common number of red and blue stickers be r (for both colors)\n    # After giving away 2/3 of her red stickers, she has 1/3 of r left as red stickers\n    # Let's say she gave away b fraction of blue stickers, she then has (1 - b) * r left of blue stickers\n    # These remaining red and blue stickers combined make up 1/4 of the total stickers she initially had (which is 2r)\n\n    # Equation representing the remaining stickers:\n    # (1/3)r (red stickers remaining) + (1 - b)r (blue stickers remaining) = 1/4 * 2r (1/4 of the total stickers)\n    # Simplify the equation:\n    # 1/3 + (1 - b) = 1/2\n    # Solve for b:\n    b = 1 - ((1/2) - (1/3))\n\n    return b\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since each child gets at least one pen, we first give one pen to each child.\n    # Then we have 20 - 6 = 14 pens left to distribute to 6 kids.\n    # We can use the \"stars and bars\" method to calculate the ways to divide 14 pens between 6 kids.\n    # We need 5 bars to create 6 sections for 6 kids.\n    # So, the problem reduces to finding the combinations of placing 5 bars among 14 + 5 = 19 objects.\n    return nCr(19, 5)\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Initialize the minimum number of marbles in the biggest pile to 16\n    min_biggest_pile = 16\n    \n    # We calculate the smallest number for the biggest pile by trying\n    # different sizes for the smaller piles that precede it. We start\n    # with the smallest possible number for the smallest pile and increment\n    # until there are not enough marbles left for the biggest pile to be\n    # the smallest it can possibly be.\n    for x1 in range(1, min_biggest_pile - 3):\n        for x2 in range(x1 + 1, min_biggest_pile - 2):\n            for x3 in range(x2 + 1, min_biggest_pile - 1):\n                x4 = 16 - (x1 + x2 + x3) \n                if x4 > x3:\n                    min_biggest_pile = min(min_biggest_pile, x4)\n                    \n    return min_biggest_pile\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the total number of days it took Dave to read the book\n    days = ((last_day_pages - first_day_pages) // difference) + 1\n    \n    # Calculate the total number of pages read using arithmetic sum formula\n    total_pages = (days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    \n    difference = smallest_6_digit - largest_5_digit\n    \n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    count = 0\n    for hundreds in [1, 2, 3, 4, 5, 6]:\n        for tens in [1, 2, 3, 4, 5, 6]:\n            for ones in [1, 3, 5]:  # Only odd digits for the ones place\n                if hundreds != tens and tens != ones and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define a dictionary to convert all units to metres\n    unit_conversion = {\n        \"millimetres\": 0.001,\n        \"centimetres\": 0.01,\n        \"metres\": 1,\n        \"kilometres\": 1000\n    }\n    \n    # Define a dictionary with the given lengths and their units\n    lengths = {\n        \"10 millimetres\": 10 * unit_conversion[\"millimetres\"],\n        \"100 centimetres\": 100 * unit_conversion[\"centimetres\"],\n        \"10 metres\": 10 * unit_conversion[\"metres\"],\n        \"2 kilometres\": 2 * unit_conversion[\"kilometres\"],\n        \"2800 centimetres\": 2800 * unit_conversion[\"centimetres\"],\n        \"2500 metres\": 2500 * unit_conversion[\"metres\"],\n        \"100 millimetres\": 100 * unit_conversion[\"millimetres\"],\n        \"100 metres\": 100 * unit_conversion[\"metres\"]\n    }\n    \n    # Sort the lengths by their converted values in metres\n    sorted_lengths = sorted(lengths.items(), key=lambda x: x[1])\n    \n    # The smallest length is the first element after sorting\n    smallest_length = sorted_lengths[0][0]\n    \n    return smallest_length\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    can_swim = 20\n    can_play_basketball = 25\n    can_do_both = 10\n    can_do_neither = 9\n\n    total_students = (can_swim + can_play_basketball) - can_do_both + can_do_neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C - A, 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n\n    # Let's denote the number of cows as 'c' and the number of ducks as 'd'.\n    # We have two equations:\n    # c + d = total_animals (Equation 1)\n    # 4c + 2d = total_legs (Equation 2)\n\n    # From Equation 1: c = total_animals - d\n    # Substitute 'c' in Equation 2:\n    # 4*(total_animals - d) + 2d = total_legs\n    # 4*total_animals - 4d + 2d = total_legs\n    # 2d = total_legs - 4*total_animals\n    # d = (total_legs - 4*total_animals) / 2\n\n    ducks = (total_legs - legs_per_cow * total_animals) / (legs_per_cow - legs_per_duck)\n    \n    return int(ducks)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # total children\n    total_children = 11 + 5\n    # total average height\n    total_avg_height = 122.5\n    # difference in average height between girls and boys\n    diff_avg_height = 3.2\n\n    # Let the average height of the boys be b.\n    # Then the average height of the girls will be b + 3.2.\n    # We can set up the following equation based on the total height:\n    # (11 * (b + 3.2) + 5 * b) / 16 = 122.5\n    # Solving for b will allow us to find the average height of the girls.\n\n    from sympy import symbols, Eq, solve\n    b = symbols('b')\n    equation = Eq((11 * (b + diff_avg_height) + 5 * b) / total_children, total_avg_height)\n\n    # Solve for b\n    solutions = solve(equation, b)\n    avg_height_boys = solutions[0]\n    avg_height_girls = avg_height_boys + diff_avg_height\n\n    return avg_height_girls\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    # Let x be the number of pupils and y be the number of bookmarks.\n    # From the first statement: 4x + 8 = y\n    # From the second statement: 6x - 10 = y\n    # Solve the system of equations.\n\n    # Since both expressions equal y, we can set them equal to each other:\n    # 4x + 8 = 6x - 10\n\n    # Rearrange the equation to solve for x:\n    # 2x = 18\n    # x = 9 (number of pupils)\n\n    # Substitute x back into either of the original equations:\n    # 4x + 8 = y\n    # 4(9) + 8 = y\n    # 36 + 8 = y\n    # y = 44 (number of bookmarks)\n\n    x = (18 + 10) // 2\n    y = 4 * x + 8\n\n    return y\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Number of regions formula for n triangles: R(n) = n(n + 1)/2 + 1\n    # where n is the number of triangles.\n    triangles = 5\n    ans = triangles * (triangles + 1) // 2 + 1\n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    total_odd_numbers = 9\n    sum_of_numbers = 1503\n    average = sum_of_numbers // total_odd_numbers\n    middle_number = average\n\n    # Given that the numbers are consecutive and odd, the smallest number is 4 positions away from the middle\n    smallest_number = middle_number - (total_odd_numbers - 1)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls and b the number of boys\n    g = symbols('g')\n    total_students = 70\n    b = total_students - g\n\n    # We use the information given to set up the equation\n    # Total score = Average score * number of students\n    # We have two averages (for girls and boys) and their combined average\n    total_score = total_students * 66\n    girls_score = 70 * g\n    boys_score = 63 * (total_students - g)\n\n    # The combined score of girls and boys should be equal to the total score\n    eq = Eq(girls_score + boys_score, total_score)\n\n    # Solve for the number of girls (g)\n    solution = solve((eq), (g))\n\n    return solution[g]\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # Given values\n    term_32 = 157\n    term_108 = 537\n    n_32 = 32\n    n_108 = 108\n\n    # Calculate common difference\n    common_difference = (term_108 - term_32) / (n_108 - n_32)\n\n    # Calculate first term using the formula: nth_term = first_term + (n - 1) * common_difference\n    first_term = term_32 - (n_32 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    total_days = 5\n    total_cost = cost_per_day * total_days\n    return total_cost\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 other individuals that A can pass to initially\n    first_pass_options = 3\n    \n    # After A passes to one of the 3, the receiver has 2 options to pass to\n    second_pass_options = 2\n    \n    # The third pass must then go to person who has not touched the ball, leaving the fourth to pass back to A\n    # There's only 1 way to complete the sequence to ensure the ball returns to A\n    third_pass_options = 1\n    \n    # Multiply the options for each pass to find the total different methods\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    return (36 * 21) // (6 * 7)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of candies Donna had.\n    x = symbols('x')\n\n    # According to the problem, after Donna kept half of the x plus 3 candies,\n    # she gave the remaining to Jane. So Jane received x - (x/2 + 3)\n    # Jane then ate 1/3 of what she received plus 4 candies.\n    jane_remained = (x - (x/2 + 3)) - (1/3 * (x - (x/2 + 3)) + 4)\n    \n    # The remaining candies that Jane gave to Kate was eaten such that\n    # 1/4 of it was consumed, and 42 candies were left.\n    # Setting the equation according to the statement.\n    equation = Eq(jane_remained - jane_remained/4, 42)\n    \n    # Solving the equation for x.\n    solution_dict = solve(equation, x)\n    # Since the problem indicates the initial amount must be an integer,\n    # we extract the integer solution.\n    initial_candies = solution_dict[0]\n\n    return initial_candies\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 1\n    a = 4\n    b = 10\n    \n    # Find the Least Common Multiple (LCM) of 4 and 10\n    for i in range(1, a * b + 1):\n        if i % a == 0 and i % b == 0:\n            lcm = i\n            break\n            \n    return lcm\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    return 0.98 + 1.98 + 2.98 + 3.98\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the initial number of storybooks Anthea has.\n    # Since giving 4 storybooks away leaves them with the same number,\n    # we can derive the following equation: Jason's books - 4 = Anthea's books + 4\n    # Jason has 30 storybooks.\n    # This simplifies to: 30 - 4 = x + 4\n    jason_books = 30\n    anthea_books_after = jason_books - 4  # After giving away 4 books\n\n    # Set up the equation and solve for x\n    anthea_initial_books = anthea_books_after - 4\n\n    # The difference in the number of storybooks between Jason and Anthea initially\n    difference = jason_books - anthea_initial_books\n\n    return difference\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # speed in metres per second\n    time_in_minutes = 12\n    time_in_seconds = time_in_minutes * 60  # convert minutes to seconds\n\n    distance = speed * time_in_seconds  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = 2020 * 68 + 505 * 128\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):  # Generate all permutations of 2 different digits\n        # Check if the equation holds\n        if (10 * q + p) == (p * q):\n            return 10 * q + p\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10.00\n    newspaper_cost = 2.20\n    change_received = 4.83\n    \n    tissues_cost = total_money - (newspaper_cost + change_received)\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the initial number of boys (which is also the initial number of girls)\n    b = symbols('b')\n\n    # After 3/5 of the boys and 42 girls left, there are 12 more boys than girls\n    equation = Eq((2/5) * b, b - 42 + 12)\n\n    # Solve the equation to find the value of b\n    num_boys_girls = solve(equation, b)\n\n    # Multiply by 2 to get the total number of students (boys + girls)\n    total_students = num_boys_girls[0] * 2\n\n    return int(total_students)\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    # A's efficiency is twice B's\n    equation1 = Eq(A, 2 * B)\n    # A finishes in 12 days less than B, so A's time plus 12 is B's time\n    equation2 = Eq((1/A) + 12, 1/B)\n\n    # Solve the equations to find A and B's rates\n    rates = solve((equation1, equation2), (A, B))\n\n    # The combined rate when A and B work together is A + B\n    combined_rate = rates[A] + rates[B]\n\n    # The time to complete the job working together is the reciprocal of the combined rate\n    time_together = 1 / combined_rate\n\n    return time_together.evalf()\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's solution details\n    xavier_total = 100\n    xavier_sugar = 25 / 100 * xavier_total\n\n    # Yelena's solution details\n    yelena_total = 500\n    yelena_sugar = 55 / 100 * yelena_total\n\n    # Carol's solution details\n    carol_total = 400\n    carol_sugar = 35 / 100 * carol_total\n\n    # Total amount of solution after mixing\n    total_solution = xavier_total + yelena_total + carol_total\n\n    # Total amount of sugar after mixing\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n\n    # Concentration of sugar in the mixed solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + 3 * baskets_of_tomatoes\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from math import factorial\n\ndef solution():\n    digits = 3  # we have 3 different digits\n\n    # numbers with 1 digit (1, 2, 3)\n    one_digit_numbers = digits\n\n    # numbers with 2 different digits\n    # for each digit taken first, there are (digits - 1) ways\n    # to choose the second digit\n    two_digit_numbers = digits * (digits - 1)\n\n    # numbers with 3 different digits\n    # for each digit taken first, there are (digits - 1) options left for the second,\n    # and then (digits - 2) for the third\n    three_digit_numbers = factorial(digits)\n\n    # total is sum of all possibilities\n    total_numbers = one_digit_numbers + two_digit_numbers + three_digit_numbers\n\n    return total_numbers\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12 = cost_per_case * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    morning_ratio = Eq(boys / girls, 3 / 2)\n    afternoon_boys = boys + 12\n    afternoon_girls = girls + 12\n    afternoon_ratio = Eq(afternoon_boys / afternoon_girls, 19 / 14)\n\n    solutions = solve((morning_ratio, afternoon_ratio), (boys, girls))\n\n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let's denote the distance from Mike's home to office as 'd' kilometers.\n    # Let's denote the time in hours he would take to travel at the normal speed without being late or early as 't'.\n    # At the speed of 3 km/h he is 12 min (12/60 hours) late, so he takes t + (12/60) hours to travel the distance.\n    # At the speed of 5 km/h he is 4 min (4/60 hours) early, thus he takes t - (4/60) hours to travel the same distance.\n    \n    # We can write two equations based on the above information:\n    # d = 3 * (t + (12/60)) [1]\n    # d = 5 * (t - (4/60)) [2]\n    \n    # Now we'll solve these equations for d by first equating (1) and (2).\n    # Rearrange equation [1]: d = 3t + 3*(12/60)\n    # Rearrange equation [2]: d = 5t - 5*(4/60)\n    \n    # Since both equations are equal to d, we can set them equal to each other:\n    # 3t + 3*(12/60) = 5t - 5*(4/60)\n    \n    # Now we solve for t:\n    # 3t + (3/5) = 5t - (1/3)\n    # 3t - 5t = -(1/3) - (3/5)\n    # -2t = -((1*5)+(3*3))/(3*5)\n    # -2t = -((5+9)/15)\n    # -2t = -14/15\n    # t = (14/15) / 2\n    # t = 7/15 (this is t in hours)\n    \n    # Put the value of t back into one of the distance equations to find d:\n    # For instance, using equation [1]:\n    # d = 3*(7/15) + 3*(12/60)\n    # d = 21/15 + 6/20\n    # d = (28 + 3)/20\n    # d = 31/20\n    \n    # Hence the distance from his home to the office is:\n    # d = 31/20 km\n    return 31 / 20\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    # Importing the required function from sympy\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the number of candies Rachel and Alice have\n    rachel, alice = symbols('rachel alice')\n    \n    # Creating equations based on the given conditions\n    # If Rachel gives Alice 10 candies, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 candies, Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculating the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    initial_temp = -8\n    final_temp = 13\n    increase = final_temp - initial_temp\n    return increase\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    \n    total_value = card_A + card_B + card_C\n    \n    return int(total_value)\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks\n    num_different_socks = 4\n    arrangements_different_socks = factorial(num_different_socks)\n\n    # For two different colored pairs of socks\n    num_pairs = 2\n    socks_per_pair = 2\n    arrangements_pairs_socks = factorial(num_pairs) * (factorial(socks_per_pair)**num_pairs) // factorial(socks_per_pair**num_pairs)\n\n    return (arrangements_different_socks, arrangements_pairs_socks)\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar_1 = 23\n    length_iron_bar_2 = 37\n    welded_part_length = 3\n\n    full_piece_length = length_iron_bar_1 + length_iron_bar_2 - welded_part_length\n\n    return full_piece_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    # On Earth\n    g_earth = 9.81  # acceleration due to gravity on Earth in m/s^2\n    T_earth = 1.0   # period of the pendulum on Earth in seconds\n\n    # On the Moon\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon in m/s^2\n\n    # The period of a simple pendulum T is proportional to the square root of (l/g),\n    # where l is the length of the pendulum and g is the acceleration due to gravity.\n    # Therefore, if T_earth = 2 * pi * sqrt(l/g_earth), then\n    # T_moon = 2 * pi * sqrt(l/g_moon),\n    # given the same length l for the pendulum on Earth and the Moon.\n    # we know that T_moon / T_earth = sqrt(g_earth/g_moon)\n    T_moon = T_earth * (g_earth / g_moon) ** 0.5\n\n    return T_moon\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Number of questions Justin and William answered correctly\n    for justin_correct in range(11):\n        william_correct = justin_correct - 24/6\n        total_points = justin_correct*6 + william_correct*6 - (10-justin_correct)*2 - (10-william_correct)*2\n        if total_points == 96:\n            return int(william_correct)\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('1/3/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('15/4/2023', '%d/%m/%Y')\n    trip_duration = end_date - start_date\n    return trip_duration.days + 1  # Include both the start and end dates\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    red_tiles = 0\n    green_tiles = 0\n    layer = 0\n    while (20 - 2 * layer) ** 2 > total_tiles:\n        layer_tiles = (20 - 2 * layer) ** 2 - (18 - 2 * layer) ** 2\n        if layer % 2 == 0:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        layer += 1\n    \n    if layer % 2 == 0:\n        red_tiles += total_tiles - red_tiles - green_tiles\n    else:\n        green_tiles += total_tiles - red_tiles - green_tiles\n    \n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Given that the puzzle is a vertical addition with unique digits for each letter,\n    # Hence, we have A + BB + CCC = BCBA, focusing on possible values for A by trial and error.\n\n    # For all unique digits, let's check the sum\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                # Skip if any provided digits are the same\n                if A == B or B == C or A == C:\n                    continue\n    \n                # Check if sum of A, BB and CCC equals BCBA\n                if A + (11 * B) + (111 * C) == (1000 * B + 100 * C + 10 * B + A):\n                    return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # Assigning the rates at which A and B can complete the job individually\n    A_rate_per_day = 1 / 15\n    B_rate_per_day = 1 / 10\n\n    # Calculate the part of the job done by A and B together in 3 days\n    work_done_together = 3 * (A_rate_per_day + B_rate_per_day)\n\n    # Remaining job to be done after A leaves\n    remaining_job = 1 - work_done_together\n\n    # Calculating the number of days B will take to finish the remaining job alone\n    B_days_to_finish = remaining_job / B_rate_per_day\n\n    return B_days_to_finish\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Since it is a square array, the side of the square is the square root of the total number of people\n    import math\n    side_length = int(math.sqrt(100))\n    \n    # Total people on the outer layer would be the perimeter of the square minus the four corners (already counted once)\n    outer_layer_people = 4 * side_length - 4\n    \n    return outer_layer_people\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    initial_amount = remaining_after_sister / (1 - 3/7)\n    return initial_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    cups_needed_for_24_loafs = 24 / loafs_per_cup\n    return cups_needed_for_24_loafs\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is negative because the sequence is decreasing\n\n    # We need to find the term that just before it turns negative, i.e. when it is greater than 0\n    # a + (n-1)d > 0\n    # 50 + (n-1)(-4) > 0\n    # (n-1)(-4) > -50\n    # n-1 < 50/4 since -4<0 we change the sign of inequality\n    # n < 50/4 + 1\n\n    num_terms = 50 // abs(difference) + 1  # We need to round down because we want the last non-negative term\n\n    return num_terms\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # This is a classic example of a game involving strategy, related to the game of Nim.\n    # The winning strategy involves creating a situation after your turn\n    # where the piles have sizes that are multiples of a key number.\n    # In the game of Nim, this key number is related to the binary XOR of the pile sizes.\n    \n    # Calculate the XOR of the two pile sizes.\n    xor_value = 88 ^ 52\n    \n    # If the xor_value is 0, it means the two piles are already in 'Nim-sum 0' position,\n    # which is losing position for the first player if the second player knows the strategy.\n    # In this case, Tom doesn't have a winning strategy. However, that's not our case.\n    \n    # Tom's winning strategy is to ensure that after his turn, the xor of pile sizes is 0\n    # This means he needs to reduce one pile so that:\n    # reduced pile size XOR other pile size = 0\n    \n    # The pile to reduce is the one with the larger XOR when its size is XORed with the xor_value\n    # Here, Pile A has more cards, so Tom should pick from Pile A\n    pile_a_xor = 88 ^ xor_value\n    pile_b_xor = 52 ^ xor_value\n    \n    # The desired size of Pile A after Tom's turn is 88 - pile_a_xor\n    desired_pile_a_size = 88 - pile_a_xor\n    \n    # Number of cards Tom should take from Pile A on his first move is:\n    cards_to_take = 88 - desired_pile_a_size\n    return cards_to_take\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # If at least one student gets at least 3 apples,\n    # and there are 80 apples to distribute,\n    # then the maximum number of students (pigeonholes) is calculated\n    # by dividing the total number of apples by 3 and rounding down.\n    apples = 80\n    apples_per_student = 3\n    max_students = apples // apples_per_student\n\n    # However, since at least one student must get at least 3 apples,\n    # there must be at least one less student than the maximum calculated\n    class_size = max_students - 1\n\n    return class_size\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # For any number greater than 10 factorial, the last digit is always 0\n    # because they all include the factor 2 and 5, which multiplies to 10.\n    return 0\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake_price, logcake_price = symbols('cheesecake_price logcake_price')\n\n    equation1 = Eq(6 * cheesecake_price + 7 * logcake_price, 1426)\n    equation2 = Eq(4 * cheesecake_price, 3 * logcake_price)\n\n    solutions = solve((equation1, equation2), (cheesecake_price, logcake_price))\n\n    cost_10_cheesecakes_and_10_logcakes = 10 * solutions[cheesecake_price] + 10 * solutions[logcake_price]\n\n    return cost_10_cheesecakes_and_10_logcakes\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5**2  # Area of the square base\n    hole_area = 1*1  # Area of the square hole\n    effective_area = base_area - hole_area  # Effective base area\n    volume = 480  # Given volume of the prism\n\n    height = volume / effective_area  # Height is volume / base area\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total_sum = sum(i * (2 * i - 1) for i in range(1, 11))\n    return total_sum\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    red_to_white = 1 / 2\n    white_to_black = 3 / 4\n\n    # Find common ratio by multiplying ratios of red:white and white:black\n    red_to_black = red_to_white * white_to_black\n\n    # Since 1 red + 2 white = 3 parts and 3 white + 4 black = 7 parts,\n    # 3 parts (red & white) stand for 3/7 of total balls,\n    # and 7 parts (white & black) stand for 4/7 of total balls.\n    total_parts = 3 + 7 # because 1 part of red is for 3 parts of white and 4 parts of black\n    \n    # Calculate number of balls per part\n    balls_per_part = 34 / total_parts\n\n    # Number of red balls\n    red_balls = balls_per_part * 3 / 7  # because 3 parts out of 10 parts are red\n\n    return int(red_balls)\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    numbers = [12, 102, 1002, 10002]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let y be the initial number of yellow beads and g be the initial number of green beads\n    y, g = symbols('y g')\n    \n    # Original ratio of yellow to green beads is 3:2\n    original_ratio = Eq(y/g, 3/2)\n    \n    # After buying more beads, green to yellow ratio becomes 3:2\n    new_ratio = Eq((g + 20)/(y + 5), 2/3)\n    \n    # Solve the system of equations for y and g\n    solutions = solve((original_ratio, new_ratio), (y, g))\n    \n    # Calculate the total number of beads originally\n    total_beads_initial = solutions[y] + solutions[g]\n    \n    return total_beads_initial\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Dividing by 6 for permutations of the 3 numbers\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    # Since the pattern is alternating addition and subtraction of consecutive numbers,\n    # we can group the numbers in pairs: (1-2), (3-4), ..., (999-1000), and then add 1001 at the end\n    # Each pair except the last one results in -1\n    # There are 500 pairs of numbers before 1001\n    num_pairs = 500\n\n    # Calculate the sum of all pairs (-1 each)\n    pairs_sum = -1 * num_pairs\n\n    # Add the last number, which is not part of any pair\n    final_sum = pairs_sum + 1001\n\n    return final_sum\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Two-digit palindromes: from 11 to 99 (9 possibilities)\n    count += 9\n    # Three-digit palindromes: from 101 to 999 (9 possibilities for hundreds and tens, 10 for mid)\n    count += 9 * 10\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2  # Two sisters\n    marbles_left = 16\n\n    total_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n\n    return total_marbles\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i + 1) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    time_to_meet = 4\n\n    # Distance between the two starting points\n    total_distance = (amy_speed + christen_speed) * time_to_meet\n\n    # Time it takes for Christen to reach Amy's starting point\n    time_for_christen_to_reach_amy = total_distance / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '013689'\n    even_digits = '068'\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[3] in even_digits and perm[0] != '0':\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    correct, wrong = 0, 50\n    while correct <= 50:\n        if 4 * correct - 1 * wrong == 110:\n            return correct\n        correct += 1\n        wrong -= 1\n    \nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    lemon_to_chocolate_ratio = 4 / 5\n    chocolate_cakes = remaining_cakes / (1 + lemon_to_chocolate_ratio)\n    lemon_cakes = lemon_to_chocolate_ratio * chocolate_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    lily, judy, shared_books = symbols('lily judy shared_books')\n\n    # Set up the equations\n    equation1 = Eq(lily - shared_books, judy + shared_books)\n\n    # Solve the equation\n    solutions = solve((equation1,), (lily, judy, shared_books))\n\n    # The difference in books\n    return solutions[shared_books]*2\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are two passes and starting from Lily; she can pass the ball to Cici or April (2 choices).\n    first_pass_options = 2\n    \n    # For the second pass, the person who receives the ball can only pass it to the remaining person (1 choice).\n    second_pass_options = 1\n    \n    # The total number of passing ways is the product of the choices for each pass.\n    total_ways = first_pass_options * second_pass_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    initial_average = 89\n    total_scores_for_first_four = initial_average * 4\n    fifth_assignment_score = 94\n    total_scores_for_five_assignments = total_scores_for_first_four + fifth_assignment_score\n    new_average = total_scores_for_five_assignments / 5\n    return new_average\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 180):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(b):\n                return a + int(b)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # There are three cases for a three-digit number to have exactly two different digits:\n    # Case 1: XYX\n    # Case 2: XXY\n    # Case 3: YXX\n\n    # In each case, X can be any digit from 1 to 9 (can't be 0 as it would not be a three-digit number)\n    # Y can be any digit from 0 to 9 except the digit used for X\n\n    # Count for case 1: XYX\n    # Choice for X (1-9): 9 choices\n    # Choice for Y (0-9 except X): 9 choices\n    # Total for this case: 9 * 9\n\n    # Count for case 2: XXY\n    # Choice for X (1-9): 9 choices\n    # Choice for Y (0-9 except X): 9 choices\n    # Total for this case: 9 * 9\n\n    # Count for case 3: YXX\n    # Choice for X (1-9): 9 choices\n    # Choice for Y (0-9 except X): 9 choices\n    # Total for this case: 9 * 9\n\n    # Sum the totals for each case\n    count = 9 * 9 + 9 * 9 + 9 * 9\n\n    return count\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    arms_per_wibble = 6\n    num_wibbles = 11\n    total_arms = 81\n    \n    wibble_arms = arms_per_wibble * num_wibbles\n    wobble_arms = total_arms - wibble_arms\n    arms_per_wobble = 5\n    \n    num_wobbles = wobble_arms // arms_per_wobble\n    return num_wobbles\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15 / 100\n    total_amount = 420\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return int(total_seconds)\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the custom operation\n    def custom_hash(a, b):\n        return a + b - (a * b / 910)\n\n    # Evaluate the expression from right to left\n    result = 1\n    for i in range(2, 2017):\n        result = custom_hash(i, result)\n\n    return int(result)\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    # number of ways to choose 1 boy from 3 AND 1 girl from 4 = 3 * 4\n    ans = boys * girls\n    return ans\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two unknown numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of two numbers is 80\n    equation1 = Eq(x + y, 80)\n\n    # Equation 2: The difference of the two numbers is 40\n    equation2 = Eq(x - y, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Get the smaller number\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Speed difference in km/h\n    speed_difference = 15 - 10  # Maverick's speed - Kelvin's speed\n\n    # Distance that needs to be covered to catch up in km\n    distance_to_catch_up = 10\n\n    # Time taken to catch up in hours\n    time_to_catch_up = distance_to_catch_up / speed_difference\n\n    # Time Maverick thinks it took to catch up in hours (24 minutes = 0.4 hours)\n    maverick_time_in_hours = 24 / 60\n\n    # Compare the times\n    if time_to_catch_up > maverick_time_in_hours:\n        maverick_was_wrong = True\n        # Time taken for Maverick to actually catch up in minutes\n        actual_time_in_minutes = time_to_catch_up * 60\n    else:\n        maverick_was_wrong = False\n        actual_time_in_minutes = maverick_time_in_hours * 60\n\n    # If Maverick was wrong, return the correct time\n    if maverick_was_wrong:\n        return actual_time_in_minutes\n    else:\n        # If Maverick was correct we return None as the question expects the time\n        # only if Kelvin was correct (implying Maverick was wrong)\n        return None\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    num_questions = 6\n\n    for correct in range(num_questions + 1):\n        wrong = num_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_marks:\n            return correct\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    # Since each child gets at least one eraser, start with one eraser per child\n    for x1 in range(1, 6 - 2 + 1):  # The first child can get between 1 to 4 erasers (6 - 2 others)\n        for x2 in range(1, 6 - x1 - 1 + 1):  # The second child gets at least 1, up to the remaining minus 1 for the third\n            x3 = 6 - x1 - x2  # The third child gets the remainder\n            count += 1  # Every valid combination counts towards the solution\n    return count\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total distance covered by the plum trees\n    total_distance = (41 - 1) * 4  # Since 41 trees, there are 40 intervals of 4m each\n\n    # Calculate number of pine trees, considering the trees at both ends\n    num_pine_trees = (total_distance // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_liters = week1 + week2 + week3\n    return total_liters\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    cost_of_bag = 120\n    fraction_spent_on_bag = 2/5\n    # the fraction of remaining money spent on the bag is 2/5, so the remaining money is 5/2 times the cost of the bag\n    remaining_money = cost_of_bag * (5/2)\n    # She spent 1/3 of her original money on a book and the remaining is 2/3\n    original_money = remaining_money * (3/2)\n    \n    return original_money\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for younger and older person's current age\n    y, o = symbols('y o')\n\n    # Given conditions\n    # o - (o - y) = 4 [When the older person was the younger's current age]\n    # y + (o - y) = 61 [When the younger person will be the older's current age]\n    eq1 = Eq(o - (o - y), 4)\n    eq2 = Eq(y + (o - y), 61)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (y, o))\n\n    # solutions[y] gives us the younger person's current age\n    return solutions[y]\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    hours_first_group = 9\n    people_first_group = 10\n    hours_second_group = 3\n    \n    # Calculate work done by one person in one hour (work rate)\n    work_rate_per_person = 1 / (hours_first_group * people_first_group)\n    \n    # Calculate total work needed to build the bridge (work = number of people * number of hours)\n    total_work = people_first_group * hours_first_group\n    \n    # Calculate number of people needed for second group to finish in 3 hours\n    people_second_group = total_work / hours_second_group\n    \n    return people_second_group\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x in range(1, 9):\n        for y in range(1, 9):\n            for z in range(1, 9):\n                if x < y < z and x + y + z == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Jessica sits in front of Judy, so there's one desk (Jessica's) between them.\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Calculate the sum of squares from 1 to n\n    total_sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    # Calculate the sum of squares from 1 to the term before the first term\n    sum_before_first = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    # Subtract to get the sum from the first term to n\n    ans = total_sum_of_squares - sum_before_first\n    return ans\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(75/100 * x - 5, 2.5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    difference = 11\n\n    # Find the number of terms after which the sequence becomes negative\n    term = initial_value\n    term_count = 0\n    while term >= 0:\n        term -= difference\n        term_count += 1\n\n    # Calculate the first negative term\n    first_negative_term = initial_value - (difference * term_count)\n    return first_negative_term\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    first_number = 0.11\n    middle_number = 0.126\n\n    second_number = 2 * middle_number - first_number\n\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    sweets = 486\n    classmates = 17\n    sweets_each = sweets // classmates\n    return sweets_each\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    # Total number of students\n    total_students = 152\n\n    # Let's denote b as the number of boys before removal\n    # So, 152 - b will be the number of girls before removal\n    # We remove 1/11 of b (b/11) boys and 5 girls\n    # After removal, the number of boys and girls are equal\n    # Therefore, (b - b/11) = (152 - b - 5)\n    # Simplifying, we get 11b - b = 11*(152 - b) - 11*5\n    # So, 10b = 11*152 - 11*5 - 11*b\n    # => 21b = 11*152 - 11*5\n    # => b = (11*152 - 11*5) / 21\n    \n    b = (11*152 - 11*5) // 21\n    \n    return b\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio_toffees_to_chocolates = 7 / 12\n    toffees = chocolates * ratio_toffees_to_chocolates\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factors(num)):\n            return num\n\ndef factors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_price_per_case = 56\n    mangoes_cases = 24\n    lychees_cases = 19\n    total_cost = 2826\n    \n    cost_of_mangoes = mangoes_cases * mangoes_price_per_case\n    cost_of_lychees = total_cost - cost_of_mangoes\n    lychees_price_per_case = cost_of_lychees / lychees_cases\n    \n    return lychees_price_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    amounts = set()\n    for first_coin in [1, 2, 5]:\n        for second_coin in [1, 2, 5]:\n            for third_coin in [1, 2, 5]:\n                total = first_coin + second_coin + third_coin\n                amounts.add(total)\n    return len(amounts)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:\n            num1 = 100 * A + 10 * B + C\n            num2 = 100 * C + 10 * B + A\n            if num1 * 4 == num2:\n                return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set()\n    \n    for perm in permutations(cards, 3):\n        number = ''.join(perm)\n        if number[0] != '0':  # Exclude numbers that start with 0\n            unique_numbers.add(number)\n    \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if 100*P + 10*Q + R + 10*P + Q == 10*Q + R + 100*Q + 10*Q + R:\n                    return P + Q + R\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal_number = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal_number + fraction\n\n    return ans\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    total_children = 50\n    total_amount_paid = 555\n    cost_with_name = 15\n    cost_without_name = 10\n\n    # Let x be the number of children who paid for the name.\n    # Then, (total_children - x) is the number of children who did not pay for the name.\n    # We then set up the equation:\n    # (cost_with_name * x) + (cost_without_name * (total_children - x)) = total_amount_paid\n    # And solve for x.\n\n    x = (total_amount_paid - (cost_without_name * total_children)) / (cost_with_name - cost_without_name)\n\n    return int(x)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Calculate the time spent jogging and the distance covered\n    jogging_time = 1  # from 7:30 AM to 8:30 AM\n    jogging_speed = 5  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the time spent walking and the distance covered\n    walking_time = 2  # from 8:30 AM to 10:30 AM\n    walking_speed = 3  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    for num in range(100):\n        if num + (num + 1) + (num + 2) + (num + 3) + (num + 4) == 100:\n            return num\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factors of 44000\n    prime_factors = factorint(44000)\n    \n    # Each prime factor should be raised to a power divisible by 3 for the number to be a cube.\n    # Initialize q to 1, will multiply with prime factors not part of the cube\n    q = 1\n\n    # Check each prime factor's power\n    for prime, power in prime_factors.items():\n        remainder_power = power % 3\n        if remainder_power > 0:\n            q *= prime ** remainder_power\n\n    return q\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n\n    # Calculate the number of bags used\n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    \n    return oranges_left\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    # Since trees are at both ends, we have num_trees - 1 intervals\n    distance_between_trees = total_length / (num_trees - 1)\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # To guarantee that at least 3 cards have the same number, we need to consider the worst-case scenario.\n    # The worst-case scenario ensures that we have drawn 2 cards of each number without getting 3 of the same number.\n    # Since there are 13 distinct numbers, after drawing 2 cards of each number, we will have 2 * 13 = 26 cards.\n    \n    # When we draw the next card (the 27th card), we will definitely have 3 cards with the same number\n    # because there can't be a 14th distinct number and it has to match one of the existing numbers.\n    \n    return 26 + 1\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    result = (3/4) * 28\n    return result\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Starting with the given number of notebooks Andy has\n    andy_notebooks = 149\n    # Calculating the correct number of notebooks Andy's sister should have to make them equal after giving 38 notebooks\n    andy_gives = 38\n    correct_sister_notebooks = (andy_notebooks - andy_gives) / 2\n\n    # Joey's incorrect calculation\n    joey_calculation = andy_notebooks - (andy_gives // 2)\n\n    # Check if Joey is incorrect\n    is_joey_incorrect = joey_calculation != correct_sister_notebooks\n    \n    # If Joey is incorrect, return the correct_sister_notebooks\n    if is_joey_incorrect:\n        return int(correct_sister_notebooks)\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_trees = 9\n    number_of_intervals = number_of_trees + 1\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n    \n    return distance_between_each_tree\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define the possible cards in each suit\n    spades = ['A', 'J', 'K']\n    hearts = ['3', '5', 'K']\n    diamonds = ['2', '7', 'J']\n    clubs = ['A', '7']\n\n    # Define all possible cards\n    possible_cards = {\n        'spades': spades,\n        'hearts': hearts,\n        'diamonds': diamonds,\n        'clubs': clubs\n    }\n\n    # Eddie can't identify the card, so the card cannot be a unique card from the\n    # suit knowledge alone, eliminating all suits where there's only one card possible.\n    # Clubs has 'A', and since it's the only one that could be an ace, we remove clubs 'A'\n    possible_cards['clubs'].remove('A')\n\n    # Avril then knows the card after Eddie said he didn't know.\n    # For Avril to know for sure, the number must be unique across the remaining possibilities.\n    # Avril knowing removes all number duplicates.\n    # This means we can eliminate '7' from diamonds and 'K' from spades and hearts because\n    # they could belong to two suits.\n    possible_cards['diamonds'].remove('7')\n    possible_cards['spades'].remove('K')\n    possible_cards['hearts'].remove('K')\n\n    # Eddie then knows the card after Avril speaks, which means that the suit\n    # of the card must now be uniquely determined by its remaining number.\n    # Find the card with unique number after removals\n    for suit, numbers in possible_cards.items():\n        for number in numbers:\n            is_unique = True\n            for other_suit, other_numbers in possible_cards.items():\n                if suit != other_suit and number in other_numbers:\n                    is_unique = False\n                    break\n            if is_unique:\n                return (suit, number)\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # let's denote the smaller number as x\n    # therefore, the larger number is 2x\n    # according to the problem, the sum of the two numbers is 72\n    # hence, we have the equation:\n    # x + 2x = 72\n\n    # now we solve for x\n    x = 72 / 3\n\n    # since x is the smaller number, we return it as our answer\n    return x\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean = 5\n    total_numbers = 5\n    given_numbers = [3, 4, 6, 10]\n\n    total_sum = mean * total_numbers\n    sum_given_numbers = sum(given_numbers)\n    fifth_number = total_sum - sum_given_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    number = 200\n    # Convert the number to a list of its digits\n    digits = [int(d) for d in str(number)]\n    prime_count = 0\n\n    # The number of options for each digit position, except for the first digit,\n    # which can't be 0; Hence, it has 9 options (1-9).\n    options = [9, 10, 10]\n\n    # For each digit in the number\n    for i in range(len(digits)):\n        for digit in range(1 if i == 0 else 0, 10):  # excluding the digits[i] value\n            if digit != digits[i]:  # Changed digit must be different from the original\n                # Create a new number with the changed digit\n                new_digits = digits.copy()\n                new_digits[i] = digit\n                new_number = int(''.join(map(str, new_digits)))\n                # Check if this new number is prime\n                if isprime(new_number):\n                    prime_count += 1\n                \n    return prime_count\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_behind_danny = 14 - 1\n    people_in_front_of_emily = 25\n    danny_emily = 2\n\n    total_people = people_behind_danny + people_in_front_of_emily + danny_emily\n    \n    return total_people\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    total_cups = 9\n    cost_per_cup = total_cost / total_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Since it takes 12 minutes to cut the wood into 4 sections,\n    # this means it takes 3 cuts, because cutting into 4 sections involves 3 cuts.\n    # Therefore, each cut takes 12 / 3 = 4 minutes.\n    cut_time_per_cut = 12 / 3\n\n    # If Emma needs to cut the wood 5 times, it will take her\n    # 5 cuts * time per cut.\n    total_time_for_five_cuts = 5 * cut_time_per_cut\n\n    return total_time_for_five_cuts\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days given to finish the book\n    # Let p be the total number of pages in the book\n    d, p = symbols('d p')\n\n    # Equation 1: If Vanessa reads 30 pages a day, she finishes in d+2 days\n    equation1 = Eq(30 * (d + 2), p)\n    # Equation 2: If Vanessa reads 39 pages a day, she finishes in d-4 days\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solve the equations for d and p\n    solutions = solve((equation1, equation2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 30:\n        if '5' in str(page):\n            count += str(page).count('5')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = total_rooms / (workers * rooms_per_day_per_worker)\n\n    return days\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum1 = sum(range(6, 11))  # Calculate the sum of 10+9+8+7+6\n    sum2 = sum(range(1, 6))   # Calculate the sum of 5+4+3+2+1\n    ans = sum1 - sum2         # Subtract sum2 from sum1\n    return ans\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(apple + 2 * orange, 48)\n    equation2 = Eq(apple + orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n    \n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + 151, pocket_money)\n    \n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    seconds_per_page = seconds_per_hour / pages_per_hour\n    \n    return seconds_per_page\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n    total_steps = steps_per_staircase * number_of_staircases\n    return total_steps\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given_away = total_badges * (3 / 8)\n    badges_left = total_badges - badges_given_away\n\n    return int(badges_left)\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return louis_position\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Elias had 5 times as many stickers as Aileen initially\n    equation1 = Eq(elias, 5 * aileen)\n\n    # After giving away and losing stickers, they have the same number\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Calculate the final number of stickers for each\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n\n    return elias_final, aileen_final\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    thomas, gerald = symbols('thomas gerald')\n    \n    equation1 = Eq(thomas, 5 * gerald / 3)\n    equation2 = Eq(thomas + gerald, 104)\n    \n    solutions = solve((equation1, equation2), (thomas, gerald))\n    \n    thomas_pieces = solutions[thomas]\n    gerald_pieces = solutions[gerald]\n    \n    return thomas_pieces - gerald_pieces\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    ans = sum(range(11, 32, 2))\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the octal numbers to decimal, add them, then convert back to octal\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    sum_decimal = num1 + num2\n    ans = oct(sum_decimal)[2:]  # [2:] to remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of girls be g, boys be b, and adults be a\n    g, b, a = symbols('g b a')\n    \n    # Given that there were 2/7 as many boys as girls\n    equation1 = Eq(b, (2/7) * g)\n    \n    # And 2/3 as many adults as children\n    # The number of children is the sum of girls and boys\n    equation2 = Eq(a, (2/3) * (g + b))\n    \n    # There were 1228 more adults than boys at the park\n    equation3 = Eq(a - b, 1228)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (g, b, a))\n    \n    # Calculate the total number of people at the park\n    total_people = solutions[g] + solutions[b] + solutions[a]\n    \n    return total_people\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # let n be the number of tennis rackets purchased at first\n    # cost_price_per_racket * n = selling_price_per_racket * (n - 8) - profit\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of rackets sold\n    # (x * selling_price_per_racket) = (cost_price_per_racket * (x + remaining_rackets)) + profit\n    # Solving the equation for x gives us the number of rackets sold.\n    # We then add the remaining_rackets to get the initial number purchased.\n    x = (cost_price_per_racket * remaining_rackets + profit) / (selling_price_per_racket - cost_price_per_racket)\n    \n    initial_rackets_purchased = x + remaining_rackets\n\n    return initial_rackets_purchased\n\nans = int(solution())"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money both Chloe and Gordon had\n    x = symbols('x')\n\n    # Chloe's remaining amount is 157\n    # Gordon's remaining amount is 82\n    # Chloe spends 20 each day, Gordon spends 25 each day\n    # They spend money for the same number of days, say d\n    # Hence, Chloe's equation: x - 20d = 157\n    # and Gordon's equation is: x - 25d = 82\n\n    # The number of days they spent the money is (x - 157)/20 which should be equal to (x - 82)/25\n    # Solve these equations to find the value of x\n    chloe_days = (x - 157) / 20\n    gordon_days = (x - 82) / 25\n\n    # Set up the equation and solve for x\n    equation = Eq(chloe_days, gordon_days)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Solution is a list, we just need the first (and only) solution\n    initial_amount = solution[0]\n\n    return initial_amount\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n*(n+1)//2\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n        \n    count_zeros = 0\n    while factorial % 10 == 0:\n        count_zeros += 1\n        factorial //= 10\n    \n    return count_zeros\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "from math import gcd\n\ndef solution():\n    # Calculate the number of oranges and apples that can be divided equally\n    oranges_divisible = 150 - 17  # oranges after subtracting the leftover\n    apples_divisible = 100 - 5    # apples after subtracting the leftover\n    \n    # Find the greatest common divisor of the two numbers\n    num_neighbours = gcd(oranges_divisible, apples_divisible)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total value of jewels in box P\n    x = symbols('x')\n\n    # Initial average value of jewels in box P: x / 3\n    # Initial average value of jewels in box Q: (x - 5000) / 3\n\n    # After transferring £5000 worth jewel from P to Q,\n    # New average in P: (x - 5000) / 2\n    # New average in Q: (x + 5000) / 4\n\n    # Equate the increments of the averages to £1000\n    equation1 = Eq((x - 5000) / 2 - x / 3, 1000)\n    equation2 = Eq((x + 5000) / 4 - (x - 5000) / 3, 1000)\n\n    # Solve the system of equations to find x\n    solutions = solve((equation1, equation2), (x))\n\n    # Total value is x plus one jewel of £5000 initially in Q\n    total_value = solutions[x] + 5000\n\n    return total_value\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    length_of_line = 10  # Line length is 10 cm\n    distance_between_crosses = 1  # Crosses are drawn every 1 cm\n\n    # As crosses are drawn at the beginning and end, and every 1 cm along,\n    # the total number of crosses is one more than the length of the line\n    total_crosses = length_of_line + 1\n\n    return total_crosses\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    melon_cost = 15\n    bad_melons_fraction = 1/5\n    sell_price_per_melon = 1.50\n\n    # Number of melons thrown away\n    bad_melons = total_melons * bad_melons_fraction\n\n    # Number of melons sold\n    melons_sold = total_melons - bad_melons\n\n    # Total sales from melons\n    total_sales = melons_sold * sell_price_per_melon\n\n    # Profit calculation\n    profit = total_sales - melon_cost\n\n    return profit\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_occurrences = 2  # two green balloons per pattern\n\n    # Compute full patterns completed\n    full_patterns = 75 // pattern_length\n    # Compute number of balloons in the incomplete pattern\n    remaining_balloons = 75 % pattern_length\n    # For the incomplete pattern, count the number of green balloons\n    extra_greens = remaining_balloons // 3 + (remaining_balloons % 3 > 0)\n\n    # Total number of green balloons\n    total_green = full_patterns * green_occurrences + extra_greens\n    \n    return total_green\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles\n    sandra, jessica = symbols('sandra jessica')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(sandra - jessica, 13 + (sandra - 13 - (jessica + 13)))\n    equation2 = Eq(sandra - 13, jessica + 13 - 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sandra, jessica))\n\n    # Calculate the difference in the beginning\n    ans = solutions[sandra] - solutions[jessica]\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_between_first_and_sixth = 6 - 1  # because we count the spaces between posts\n    distance_between_two_adjacent_posts = distance_between_first_and_sixth / number_of_intervals_between_first_and_sixth\n\n    number_of_intervals_between_first_and_ninth = 9 - 1\n    distance_between_first_and_ninth = distance_between_two_adjacent_posts * number_of_intervals_between_first_and_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor = 9\n    bob_floor = 5\n    top_floor = 25\n\n    bob_at_top = (bob_floor * top_floor) / andy_floor\n\n    return int(bob_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3 / 2)\n    return ans\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each friend received 26 pieces of candy and there are 7 friends\n    candies_shared = 26 * 7\n    # Kate is left with 22 pieces of candy\n    candies_left = 22\n    # Total candies brought to school is the sum of shared candies and what Kate is left with\n    candies_to_school = candies_shared + candies_left\n    # Since she ate 1/3 at home, the amount brought to school is 2/3 of the initial amount\n    # Therefore, to find the initial amount, divide the amount brought to school by 2/3\n    initial_candies = candies_to_school / (2/3)\n    return int(initial_candies)\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    words, speed = symbols('words speed')\n    \n    original_time = 3\n    increased_speed_time = original_time - 1\n    \n    # Original speed equation: words = speed * original_time\n    original_speed_eq = Eq(words, speed * original_time)\n    \n    # Increased speed equation: words = (speed + 30) * increased_speed_time\n    increased_speed_eq = Eq(words, (speed + 30) * increased_speed_time)\n    \n    # Solve the system of equations\n    solutions = solve((original_speed_eq, increased_speed_eq), (words, speed))\n    \n    return solutions[words]\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Start with the assumption that N has two digits\n    ones = 15\n    twos = 14\n    tens_digit_ones = ones // 10  # Number of times '1' appears in the tens place\n    tens_digit_twos = twos // 10  # Number of times '2' appears in the tens place\n    ones_digit_ones = ones % 10   # Number of times '1' appears in the ones place\n    ones_digit_twos = twos % 10   # Number of times '2' appears in the ones place\n    \n    N = 0  # Initialize N\n    for num in range(10, 100):  # Check two-digit numbers\n        # Count digits for '1' and '2' in the current num\n        count_ones = str(num).count('1')\n        count_twos = str(num).count('2')\n        \n        # Reduce the respective digit counts\n        tens_digit_ones -= count_ones\n        tens_digit_twos -= count_twos\n        ones_digit_ones -= count_ones\n        ones_digit_twos -= count_twos\n        \n        # If the counts of '1's and '2's in the tens and ones places are non-negative,\n        # it means it's still possible for this to be N\n        if tens_digit_ones >= 0 and tens_digit_twos >= 0 and ones_digit_ones >= 0 and ones_digit_twos >= 0:\n            N = num\n        else:\n            # If any of the counts goes negative, the last valid number was the previous one\n            break  # N found\n\n    return N\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0 for _ in range(10)]  # 0 represents off, 1 represents on\n    # Ms. Lily pressed switches\n    for i in range(0, 10, 2):  # Presses every other one starting with 1 (0 in index)\n        lights[i] = 1\n    \n    # Sam pressed even-numbered lights 7 times\n    for i in range(1, 10, 2):  # Even numbered lights indices are odd (1, 3, 5, 7, 9)\n        lights[i] += 7  # Each press changes the state, odd number of presses leads to a change\n    \n    # Calculate how many lights are on\n    ans = sum([1 for light in lights if light % 2 == 1])\n    \n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the quantity of water in Pails A and B\n    A, B = symbols('A B')\n    \n    # Initial condition: A has 2/3 as much water as B\n    initial_condition = Eq(A, 2/3 * B)\n    \n    # Condition after transferring water: A has 7/8 as much water as B after transferring 4 liters\n    transfer_condition = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, transfer_condition), (A, B))\n\n    # Calculate the total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    day_distance = 3\n    night_distance = 2\n    total_distance = 8\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < total_distance:\n        day_count += 1\n        total_climbed += day_distance\n        if total_climbed >= total_distance:\n            break\n        total_climbed -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_concentration = 0.06\n    desired_concentration = 0.10\n\n    amount_of_sugar_initially = initial_volume * initial_concentration\n    final_volume = initial_volume\n\n    added_sugar = symbols('added_sugar')\n    equation = Eq((amount_of_sugar_initially + added_sugar) / (final_volume + added_sugar), desired_concentration)\n\n    added_sugar_amount = solve(equation, added_sugar)\n\n    return float(added_sugar_amount[0])\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_seamstress_per_day = 2\n    number_of_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_seamstress_per_day * number_of_seamstresses * days\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    # Parts made in 2 hours\n    made_parts = 20\n    # Total parts needed\n    total_parts = 100\n    # Time spent to make the 20 parts\n    time_spent = 2\n\n    # Speed of making parts per hour\n    speed = made_parts / time_spent\n    \n    # Remaining parts to be made\n    remaining_parts = total_parts - made_parts\n\n    # Time needed for the remaining parts\n    time_needed = remaining_parts / speed\n\n    return time_needed\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # You need to draw all balls of two colors completely before you are sure to have all three colors.\n    # In the worst-case scenario, you could draw all 5 red and all 5 white balls first, and only the next ball\n    # (which would have to be yellow) would guarantee you have all three different colors.\n    \n    # Number of balls of the first color (red)\n    red_balls = 5\n    # Number of balls of the second color (white)\n    white_balls = 5\n    # Number of balls to be drawn to ensure the third color (yellow) is also drawn\n    third_color_balls = 1\n\n    total_balls_drawn = red_balls + white_balls + third_color_balls\n\n    return total_balls_drawn\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Calculate the number of combinations for picking 2 balls of the same color\n    same_color_combinations = 5 * comb(2, 2)\n    # Calculate the number of combinations for picking 2 balls of different colors\n    different_colors_combinations = comb(5, 2)\n    # Total possible combinations for 2 people is the sum of the above combinations\n    total_combinations = same_color_combinations + different_colors_combinations\n    # If there are n people, then we need to find the smallest n such that (n choose 2) is\n    # greater than or equal to the total distinct combinations\n    # Because at least (n choose 2) pairs of students who have drawn balls\n    # and we want to guarantee at least one matching pair.\n    n = 1\n    while comb(n, 2) < total_combinations:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # Since it's an arithmetic sequence, the common difference (d) can be found by:\n    d = (third_term - first_term) // (3 - 1)\n    return d\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let the number of cards Hisham has be x\n    # Then, Melissa has 2x cards\n    # 2x + x = 876\n    # x = 876 / 3\n    hisham_cards = total_cards // 3\n    melissa_cards = 2 * hisham_cards\n    \n    # After giving away some cards, they should have the same number of cards.\n    # This means Melissa should give (melissa_cards - hisham_cards) / 2 to Hisham\n    cards_to_give = (melissa_cards - hisham_cards) // 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure at least two numbers have a product divisible by 4,\n    # we need to consider the worst-case scenario. In the worst case,\n    # we pick the maximum number of integers with either 2 or 0 as\n    # their remainder when divided by 4 (all odd or multiples of 2 but not 4).\n\n    # Count numbers divisible by 4\n    divisible_by_4 = len([i for i in range(10, 42) if i % 4 == 0])\n    \n    # Count numbers with remainder 2 when divided by 4\n    remainder_2 = len([i for i in range(10, 42) if i % 4 == 2])\n    \n    # Count odd numbers\n    odd_numbers = len([i for i in range(10, 42) if i % 2 != 0])\n    \n    # The worst case would be taking all numbers that do not ensure a product divisible by 4:\n    # All odd numbers and all numbers with a remainder of 2 when divided by 4\n    worst_case = odd_numbers + remainder_2\n    \n    # To ensure we have a product divisible by 4, we draw one more number than the worst case\n    return worst_case + 1\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum_of_products = 0\n    for i in range(46, 51):\n        sum_of_products += i * (100 - i)\n    return sum_of_products\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange\n    from math import sqrt\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = int(sqrt(99))**2\n\n    # Calculate the product of the two\n    ans = smallest_two_digit_prime * largest_two_digit_square\n\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the variable\n    equation = Eq(40 / (x + 5), 5)  # Construct the equation\n\n    # Solve the equation\n    solution = solve(equation)\n\n    return solution[0]  # Return the solution\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_dollars = cost_in_euros * euro_to_dollar_rate\n    return cost_in_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = float('-inf')\n    \n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        \n        value = a + b/c + (d/e)*f - (g + h/j)\n        \n        if value.is_integer():\n            max_value = max(max_value, value)\n    \n    return int(max_value)\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age when his age was the reverse of his father's age\n    brian_age = 14\n    father_age = 41\n    \n    # Calculate the age difference between Brian and his father\n    age_difference = father_age - brian_age\n    \n    for i in range(1, 100):\n        # Calculate Brian's and his father's ages in i years\n        brian_future_age = brian_age + i\n        father_future_age = father_age + i\n        \n        # Check if Brian's future age is a reverse of his father's future age\n        if str(brian_future_age) == str(father_future_age)[::-1]:\n            return brian_future_age\n    \n    # Return None if no such age is found within a reasonable range\n    return None\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_count = 12\n    seniors_count = 8\n    total_participants = juniors_count + seniors_count\n\n    average_score_juniors = 10\n    average_score_total = 14\n    \n    total_score_juniors = average_score_juniors * juniors_count\n    total_score_all = average_score_total * total_participants\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    average_score_seniors = total_score_seniors / seniors_count\n    \n    return average_score_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    # Since the number is rounded to the nearest hundred, to find the smallest possible value\n    # We need to consider the number that would round up to 9700.\n    # That number would just be one less than the halfway point between 9700 and 9800.\n    \n    halfway_to_next_hundred = 9700 + 50  # Halfway point\n    smallest_possible_value = halfway_to_next_hundred - 1\n\n    return smallest_possible_value\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total number of books initially\n    total_books_initial = 3900\n    # Number of new books\n    new_books = 510\n    \n    # Initial ratio of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Initial number of books per language\n    chinese_books_initial = (ratio_chinese / total_ratio) * total_books_initial\n    malay_books_initial = (ratio_malay / total_ratio) * total_books_initial\n    english_books_initial = (ratio_english / total_ratio) * total_books_initial\n\n    # Percentage increase for Chinese and Malay books\n    increase_chinese = 0.20\n    increase_malay = 0.10\n    \n    # New number of Chinese and Malay books\n    chinese_books_new = chinese_books_initial * (1 + increase_chinese)\n    malay_books_new = malay_books_initial * (1 + increase_malay)\n    \n    # Remaining new books for English\n    remaining_new_books = new_books - (chinese_books_new - chinese_books_initial) - (malay_books_new - malay_books_initial)\n    \n    # New total number of English books\n    english_books_new = english_books_initial + remaining_new_books\n    \n    # Percentage increase in the number of English books\n    percentage_increase_english = (english_books_new - english_books_initial) / english_books_initial * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_4_years_ago = 10\n    current_combined_age = combined_age_4_years_ago + (2 * 4)  # Each dog aged 4 years\n    combined_age_in_2_years = current_combined_age + (2 * 2)  # Each dog will age 2 more years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # According to the Pigeonhole Principle, if n containers are to have at least 1 apple each,\n    # then having n + 1 apples will ensure at least one container has 2 or more apples.\n    # Since we want to find the least number of apples where there's at least one container with\n    # 2 apples, we can use the Pigeonhole Principle formula: apples = containers + 1\n    apples = containers + 1  # Adding 1 to ensure at least one container has 2 apples\n    return apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** -2022)\n    denominator = 92 * (10 ** -2023)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    attempted_questions = total_questions - not_attempted\n    rex_score = 66 \n    correct_answer_score = 4\n    incorrect_answer_score = -2  \n\n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        score = (correct_answers * correct_answer_score) + (incorrect_answers * incorrect_answer_score)\n        if score == rex_score:\n            return correct_answers\n            \n    return None  # This point will never be reached for the given problem\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    answered_questions = int(0.6 * total_questions)\n    unanswered_questions = total_questions - answered_questions\n\n    # Let x be the number of correct answers\n    # Each correct answer gives 5 marks, each wrong answer deducts 2 marks, and each unanswered question gives 1 mark\n    \n    # total score = 5*x - 2*(answered_questions - x) + 1*(unanswered_questions)\n    # total score = 5*x - 2*answered_questions + 2*x + unanswered_questions\n    # 264 = 7*x - 2*answered_questions + unanswered_questions\n    # 7*x = 264 + 2*answered_questions - unanswered_questions\n    x = (264 + 2 * answered_questions - unanswered_questions) / 7\n\n    return int(x)\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made_with_50g = 160\n    required_cookies = 300\n    grams_of_butter_per_cookie = 50 / cookies_made_with_50g\n    grams_needed_for_300_cookies = grams_of_butter_per_cookie * required_cookies\n    return grams_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) / 3\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n    initial_condition = Eq(dedra, 4 * timm)\n    final_condition = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((initial_condition, final_condition), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    only_A = A - AC - AE + ACE\n    only_C = C - AC - CE + ACE\n    only_E = E - AE - CE + ACE\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    total_fruits = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n    return total_fruits\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initializing the number as a string to keep track of the digits\n    number = ''\n    # Starting from 1 and adding each number to the string until it reaches 1000 digits\n    i = 1\n    while len(number) < 1000:\n        number += str(i)\n        i += 1\n    # Getting the 1000th digit\n    ans = int(number[999])\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    total_pupils = 18\n    pupils_to_seat = 3\n\n    ways = factorial(total_pupils) / factorial(total_pupils - pupils_to_seat)\n\n    return int(ways)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    return 6.31 - 3.2\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n\n    return rachel\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    n = 1  # Let's start with one friend and increase until we find a solution\n    while True:\n        erasers_if_5_per_friend = 5 * n + 3\n        erasers_if_6_per_friend = 6 * n - 2\n        if erasers_if_5_per_friend == erasers_if_6_per_friend:\n            return erasers_if_5_per_friend\n        n += 1\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n    \n    # The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n    \n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n    \n    # Calculate John's age in 14 years\n    john_future_age = solutions[john] + 14\n    \n    return john_future_age\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    jack_age = 4\n    jason_age = symbols('jason_age')\n    bruce_age = jason_age\n    willie_age = jason_age\n    \n    total_age = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n    \n    jason_age_solution = solve(total_age, jason_age)\n    \n    return jason_age_solution[0]\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the age of the youngest child\n    youngest = symbols('youngest')\n\n    # Since the children are born at regular intervals, and the oldest is 6 times the age of the youngest,\n    # the difference between each child's age is 15 months. There are 8 intervals of 15 months.\n    # Therefore, the oldest is youngest + 8 * 15 months.\n    oldest = youngest + 8 * 15\n\n    # We have the equation which states that the oldest is 6 times as old as the youngest.\n    equation = Eq(oldest, 6 * youngest)\n\n    # Solve for the youngest child's age.\n    solution = solve(equation, youngest)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    result = 0\n    for n in range(1, 2008):\n        result += (n**2 + (n+1)**2) / (n * (n+1))\n        \n    return round(result)\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let the number of sweets Jiaxiang has be x.\n    # Then, Cayden has x + 5 sweets.\n    # After Cayden gives Jiaxiang 10 sweets, Cayden will have x + 5 - 10 sweets,\n    # and Jiaxiang will have x + 10 sweets.\n    # The difference in number of sweets they have now will be:\n    # |(x + 10) - (x - 5)| = |x + 10 - x + 5| = |15| = 15\n    return 15\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Iterate over all possible combinations of the first three digits (from 000 to 999)\n    # because the last digit changes the combination by 5877 when moved to the front.\n    # This implies that the first three digits contribute very little to the change.\n    for i in range(1000):\n        # Create the original number and the new number by switching the last digit\n        # to the first place.\n        original = i * 10  # Since the one's place is missing, it's considered as 0\n        new_number = (i % 10) * 1000 + i  # Place the one's digit at the front\n\n        # Check if the new number is exactly 5877 greater than the original\n        if new_number - original == 5877:\n            return original\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first = (50 // 11) + 1\n    last = 150 // 11\n    return last - first + 1\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Initialize a list to store possible results\n    results = []\n    \n    # Try all bracket combinations\n    results.append((15 + 5) * (5 + (15 - 6) + 7)) # (15+5)*(5+(15−6)+7)\n    results.append((15 + 5) * (5 + 15) - (6 + 7)) # (15+5)*(5+15)−(6+7)\n    results.append(((15 + 5) * 5 + 15) - 6 + 7)   # ((15+5)*5+15)−6+7\n    results.append(15 + 5 * (5 + (15 - 6) + 7))   # 15+5*(5+(15−6)+7)\n    results.append(15 + (5 * 5 + 15) - 6 + 7)     # 15+(5*5+15)−6+7\n    results.append(15 + 5 * (5 + 15) - (6 + 7))   # 15+5*(5+15)−(6+7)\n    \n    # Return smallest result\n    return min(results)\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # average score of 5 pupils\n    average_initial = 72\n    # total score of 5 pupils\n    total_initial = average_initial * 5\n    \n    # new average score including Mary\n    average_final = 75\n    # total score including Mary\n    total_final = average_final * 6\n    \n    # Mary's score is the difference between the new total and the initial total\n    marys_score = total_final - total_initial\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # length of the train\n    bridge_length = 220  # length of the bridge\n    speed = 60  # speed of the train in m/s\n\n    # The total distance the train has to travel to cross the bridge is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n    \n    # The time taken to cross the bridge is the total distance divided by the speed of the train\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    ans = None\n    for number in range(999, 99, -2):  # start from the highest 3-digit odd number and decrease by 2\n        if number % 9 == 0:  # check if divisible by 9\n            tens_digit = (number // 10) % 10  # get the tens digit\n            if tens_digit % 4 == 0:  # check if the tens digit is divisible by 4\n                ans = number\n                break\n    return ans\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n\n    return int(time)\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # To guarantee each color we must consider the worst case scenario\n    # We need to consider the case where Jane picks all marbles of a single color first\n    # Since the highest quantity is green ones (7), she could, in the worst case, pick all 7 green marbles\n    # Then, she needs to pick 3 more of the different colors to have at least one of each color\n    # Thus, 7 (greens) + 3 (one red, one blue, one orange) = 10 marbles required\n\n    # 4 (to guarantee one red) + 7 (to guarantee one green) + \n    # 6 (to guarantee one blue) = 17 - 3 (because we're guaranteed one of each after 17) = 14\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Total marbles drawn before being sure to have all 4 colors\n    marbles_to_draw = green + blue + orange - 1  # Subtracting 1 as the last one drawn will ensure the fourth color\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg  # Honey produced by one hive\n    hives_needed_for_90kg = 90 / honey_per_hive  # Hives needed to produce 90kg\n    additional_hives_needed = hives_needed_for_90kg - hives_for_50kg  # Extra hives needed\n\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # The possible coins in pence are 5, 10, 20, 50, 100, 200 (1 pound and 2 pounds coins)\n    # Angela received 5 different coins, which means she received one of each except one coin\n    # She did not receive the 200 pence coin because her change must be less than 500 pence\n    # Therefore, the possible coins she received are 5, 10, 20, 50, and 100 pence\n    \n    # Calculate total value of the 5 coins\n    total_coins_value = 5 + 10 + 20 + 50 + 100  # in pence\n    \n    # Convert total value of coins to pounds\n    total_coins_value_pounds = total_coins_value / 100  # convert to pounds\n    \n    # Calculate how much she spent\n    amount_spent = 5 - total_coins_value_pounds  # in pounds\n    \n    # The answer should be in pence, so convert it back from pounds\n    return amount_spent * 100  # convert to pence\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for number of notes\n    twos, tens = symbols('twos tens')\n    \n    # Define the equations based on the problem statement\n    total_notes_eq = Eq(twos + tens, 38)  # total number of notes is 38\n    spent_tens_eq = Eq(tens - 0.8 * tens, 3 * (twos - 0.75 * twos))  # David is left with thrice as many $10 notes as $2 notes\n    \n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((total_notes_eq, spent_tens_eq), (twos, tens))\n    \n    # Calculate the cost of the fan by summing 80% of $10 notes and 75% of $2 notes\n    cost_fan = 0.8 * solutions[tens] * 10 + 0.75 * solutions[twos] * 2\n    \n    return cost_fan\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of erasers Ali and Kumar initially have\n    Ali, Kumar = symbols('Ali Kumar')\n    \n    # Equation representing the initial ratio of erasers\n    initial_ratio_eq = Eq(Ali / Kumar, 7/5)\n    \n    # Equation representing the new ratio after Ali gives Kumar 10 erasers\n    new_ratio_eq = Eq((Ali - 10) / (Kumar + 10), 1/5)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (Ali, Kumar))\n    \n    # Add up the total number of erasers Ali and Kumar have after sharing\n    total_erasers = solutions[Ali] + solutions[Kumar]\n    \n    return total_erasers\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n\n    # Calculate the east-west distance\n    east_west_distance = 15 - 9  # She went 15 km east and 9 km back west\n\n    # Calculate the total north distance\n    north_distance = 3 + 5  # She went 3 km north then 5 km more north\n\n    # Calculate the shortest distance using Pythagoras theorem\n    shortest_distance = sqrt(east_west_distance ** 2 + north_distance ** 2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for banana and pear prices\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase equation: 1 banana + 3 pears = 84p\n    equation1 = Eq(banana + 3 * pear, 84)\n    \n    # Emily's purchase equation: 1 banana + 1 pear = 48p\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (banana, pear))\n\n    return solution[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = 8 * 60 + 20  # Convert hours to minutes\n    activity_and_break = 45 + 20  # Time of each activity and the following break\n    last_activity = 45  # Time of the last activity without the following break\n\n    # Deduct the last activity time to deal with the break after the last activity\n    time_excluding_last_activity = total_time_minutes - last_activity\n\n    # Number of activities is the time excluding last activities divided by the time of activity and break\n    number_of_activities = time_excluding_last_activity // activity_and_break\n\n    # Including the last activity\n    number_of_activities += 1 \n\n    return number_of_activities\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    for p in permutations(cards, 4):\n        if p[0] != '0' and int(''.join(p)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weight of Adam, Ben, and Carl respectively.\n    # We have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n\n    # Adding all these equations gives us:\n    # (a + b) + (b + c) + (a + c) = 2 * (a + b + c)\n    # 2 * (a + b + c) = 102 + 97 + 92\n    total_double_weight = 102 + 97 + 92\n    total_weight = total_double_weight / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b_days = symbols('b_days')\n    a_days = b_days - 5\n\n    a_efficiency = 2\n    b_efficiency = 1\n\n    # Work done is considered 1 (whole job), thus time * efficiency = work done\n    equation = Eq(a_efficiency * a_days, b_efficiency * b_days)\n\n    days_b = solve(equation, b_days)[0]\n    \n    return days_b\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    remaining_length_m = 78 / 100  # Remaining length converted to meters (from centimeters)\n    \n    melted_length_m = initial_length_m - remaining_length_m  # Length melted in meters\n\n    return melted_length_m\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # The divisibility rule for 11 is that the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions must be 0 or divisible by 11.\n    odd_sum = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 == 0)\n    even_sum = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 != 0)\n    remainder = (odd_sum - even_sum) % 11\n    \n    # if the remainder is 0, then it is divisible by 11\n    is_divisible = remainder == 0\n    return (is_divisible, remainder) if not is_divisible else (is_divisible, 0)\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Define base cases\n    ways = [0] * 10  # since we have 9 steps, we need an array of size 10\n    ways[0] = 1  # 0 ways to climb 0 steps\n    ways[1] = 1  # 1 way to climb 1 step (1 step)\n    ways[4] = 1  # 1 way to climb 4 steps (4 steps)\n\n    # Use dynamic programming to fill in the ways array\n    for i in range(2, 10):\n        if i < 4:\n            ways[i] = ways[i - 1]  # can only reach i steps by taking 1 step from i-1\n        else:\n            ways[i] = ways[i - 1] + ways[i - 4]  # can reach i steps by taking 1 step from i-1 or 4 steps from i-4\n\n    return ways[9]\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5 * initial_passengers) + 7\n    after_second_stop = after_first_stop - (1/4 * after_first_stop) + 13\n    \n    return int(after_second_stop)\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    # The least amount his shopping bill could actually be is £2.5 less than the estimate.\n    actual_least_price = estimated_price - 2.5\n    return actual_least_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    difference_in_sum = future_sum_ages - current_sum_ages\n    return difference_in_sum\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for first_school in range(98, 103):\n        for second_school in range(98, 103):\n            third_school = 300 - first_school - second_school\n            if 98 <= third_school <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    def sum_of_cubes(n):\n        return (n * (n + 1) // 2) ** 2\n\n    start = 0.5\n    end = 10\n    step = 0.5\n    count = int((end - start) / step) + 1\n\n    # Generate a list of terms in the sequence to raise to the power of 3\n    sequence = [start + i * step for i in range(count)]\n    # Convert the sequence to integers where 0.5 -> 1, 1.5 -> 3, etc.\n    integer_sequence = [int(2 * term) for term in sequence]\n\n    # Calculate the sum of the cubes for the integer sequence scaled down\n    integer_sum_of_cubes = sum_of_cubes(max(integer_sequence) // 2)\n\n    # Adjust the sum of cubes because the series was scaled up by a factor of 8\n    ans = integer_sum_of_cubes / 8\n\n    return ans\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_from_rabbit_to_elephant = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_from_rabbit_to_elephant\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return result\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3 # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    total = mean * (len(numbers) + 1)\n    sum_of_known = sum(numbers)\n    a = total - sum_of_known\n    return a\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy can complete 1/6 of the book in one day\n    # Together, Nancy and Tim can complete 1/4 of the book in one day\n    # Let x be the time it takes for Tim to complete the book by himself\n    # In one day, Tim can complete 1/x of the book\n    # Therefore: 1/6 + 1/x = 1/4\n    # Rearrange to find x: 1/x = 1/4 - 1/6 = 1/12\n    # So Tim can complete the book in 12 days\n    x = 1 / (1/4 - 1/6)\n    return x\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert kg to g because the mass of the packets is given in grams\n    total_mass_g = 172000  # 1 kg = 1000 g\n    \n    # Calculate the total number of parts.\n    total_parts = 7 + 3 + 2\n    \n    # Calculate the mass per part.\n    mass_per_part = total_mass_g / total_parts\n    \n    # Calculate the number of packets for each ingredient.\n    packets_P = (mass_per_part * 7) / 300\n    packets_Q = (mass_per_part * 3) / 400\n    packets_R = (mass_per_part * 2) / 500\n    \n    # Sum the packets of each ingredient to get the total.\n    total_packets = packets_P + packets_Q + packets_R\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    total_time = 10 + 15 + 5 + 15\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    pink_ribbon_in_cm = 2.5 * 100  # Convert pink ribbon length to centimeters\n    blue_ribbon_in_cm = 220\n    orange_ribbon_in_cm = 30.5\n\n    # Find the longest ribbon\n    longest_ribbon_length = max(pink_ribbon_in_cm, blue_ribbon_in_cm, orange_ribbon_in_cm)\n    \n    # Determine which ribbon is the longest by comparing lengths\n    if longest_ribbon_length == pink_ribbon_in_cm:\n        return 'pink'\n    elif longest_ribbon_length == blue_ribbon_in_cm:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_red_car_capacity = 3 * 10\n    total_blue_car_capacity = 12 * 15\n    total_green_car_capacity = 15 * 20\n    total_cars = 3 + 12 + 15\n    total_capacity = total_red_car_capacity + total_blue_car_capacity + total_green_car_capacity\n    average_capacity = total_capacity / total_cars\n    return average_capacity\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Traffic light times in seconds\n    t1 = 60  # 1 minute\n    t2 = 90  # 1.5 minutes\n\n    # Calculate the least common multiple of the first two traffic lights\n    lcm_t1_t2 = lcm(t1, t2)\n\n    # Traffic lights turn green every 9 minutes (540 seconds)\n    target_time = 540\n\n    # Check if lcm of t1 and t2 is the same as target time\n    if lcm_t1_t2 == target_time:\n        return int(lcm_t1_t2 / 60)  # Return the time in minutes\n\n    # If lcm of t1 and t2 is less than target time, \n    # find the smallest multiple of lcm(t1, t2) that is greater than or equal to target time \n    t3 = lcm_t1_t2\n    while t3 < target_time:\n        t3 += lcm_t1_t2\n\n    # Convert the smallest multiple to time required for third traffic light, ensuring it's at least 30 seconds\n    t3_time = t3 if t3 >= 30 else 30\n\n    return t3_time\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    total = 0\n    for i in range(1, 4):\n        total += int(\"4\" * i)\n    return total\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    number_of_boys = 5\n\n    percent_boys = (number_of_boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given values\n    rachel_speed = 84  # Rachel's speed in km/h\n    rachel_time_after_eleanor = 1.5  # Time after Eleanor has reached City G, in hours\n    remaining_distance_for_rachel = 39  # Distance remaining for Rachel to reach City F, in km\n    eleanor_total_time = 4  # Eleanor's total time to travel from City F to City G, in hours\n\n    # Calculate the distance Rachel covered until Eleanor reached City G\n    rachel_distance_covered = rachel_speed * (eleanor_total_time - rachel_time_after_eleanor)\n\n    # Total distance between City F and City G\n    total_distance = rachel_distance_covered + remaining_distance_for_rachel\n\n    return total_distance\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    exchange_rate = 1.25\n    book_cost_cad = 64\n\n    book_cost_usd = book_cost_cad / exchange_rate\n\n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # it means there are 7 shelves before it and 9 shelves after it.\n    total_shelves = 7 + 1 + 9  # +1 for the shelf the book is on\n    return total_shelves\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    min_possible_score = None\n    max_total_score = 5 * 90  # total score needed for an average of 90 points for 5 students\n\n    for lowest_score in range(1, max_total_score - 4):  # ensuring different whole numbers for each student\n        # Introducing a sum constraint for the possible highest score ensuring uniqueness\n        # Since they all have different scores we can assume that their scores will be consecutive\n        # so the total sum would be: lowest_score + (lowest_score + 1) + ... + (lowest_score + 4)\n        # which is equivalent to the sum of an arithmetic sequence from lowest_score to (lowest_score + 4)\n        if lowest_score + (lowest_score + 1) + (lowest_score + 2) + (lowest_score + 3) + (lowest_score + 4) == max_total_score:\n            min_possible_score = lowest_score\n            break\n\n    return min_possible_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    a, b, c = symbols('a b c')\n\n    # Writing the equations based on the question\n    eq1 = Eq(a, 3 * b)         # Rope A is 3 times as long as Rope B\n    eq2 = Eq(c, b + 56)        # Rope C is 56 cm longer than Rope B\n    eq3 = Eq(a, c + 130)       # Rope A is 130 cm longer than Rope C\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n\n    # Getting the total length\n    total_length = solutions[a] + solutions[b] + solutions[c]\n\n    return total_length\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_letters = 5\n    string_length = 3\n    favorable_cases = factorial(total_letters - 2)\n\n    total_cases = factorial(total_letters) / factorial(total_letters - string_length)\n\n    probability = favorable_cases / total_cases\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    male_students_percentage = 16\n    female_students_percentage = 10\n    \n    male_students = (male_members * male_students_percentage) / 100\n    female_students = (female_members * female_students_percentage) / 100\n    \n    total_students = male_students + female_students\n    total_members = male_members + female_members\n    \n    students_percentage = (total_students / total_members) * 100\n    \n    return students_percentage\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratios x:48 and 3:4\n    # We can setup the proportion x/48 = 3/4 \n    # Cross multiply to get 4x = 48*3\n    x = (48 * 3) / 4\n\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200  # 200 liters from the first punch bowl\n    concentration1 = 35  # 35% fruit juice in the first punch bowl\n\n    volume2 = 300  # 300 liters from the second punch bowl\n    concentration2 = 50  # 50% fruit juice in the second punch bowl\n\n    # Calculate the total volume of the mixture\n    total_volume = volume1 + volume2\n\n    # Calculate the total amount of fruit juice\n    total_fruit_juice = (volume1 * (concentration1 / 100)) + (volume2 * (concentration2 / 100))\n\n    # Calculate the percentage concentration of the mixture\n    new_concentration = (total_fruit_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy has to give to John\n    # After giving x apples, Amy will have 37 - x apples\n    # And John will have 15 + x apples\n    # We want to find x such that Amy has exactly 4 more apples than John\n    # Therefore, we have the equation: (37 - x) = (15 + x) + 4\n    # Solving for x\n    x = (amy - john - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    bags_packed = markers_left // 5\n\n    return bags_packed\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    common_difference = 2\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    total_pies = 40 + 20 + 30\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    chicken_more_vegetable = (chicken_pies - vegetable_pies) / total_pies\n    vegetable_less_fruit = (fruit_pies - vegetable_pies) / total_pies\n\n    return (chicken_more_vegetable, vegetable_less_fruit)\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 because it would then not be a two-digit number.\n        for b in range(0, 10):  # 'b' can be 0 to 9.\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let the total number of papers be x\n    # Initial rate r papers per hour\n    # New rate after one hour is r + 6 papers per hour\n    # Even faster rate to finish an hour early is r + 10 papers per hour\n\n    # x = r * 5 (initial plan to finish all papers in 5 hours)\n    # x = (r + 6) * 4 (after working for one hour with increased rate)\n    # x = (r + 10) * 3 (working at the fastest rate and finishing an hour early)\n    # Using the two equations: r * 5 = (r + 6) * 4 and (r + 6) * 4 = (r + 10) * 3\n    # We can find r first and then x\n\n    from sympy import symbols, Eq, solve\n\n    r, x = symbols('r x')\n    equation1 = Eq(r * 5, (r + 6) * 4)\n    equation2 = Eq((r + 6) * 4, (r + 10) * 3)\n\n    solutions = solve((equation1, equation2), (r, x))\n\n    # Since we are interested in the total number of papers x, we use the\n    # initial equation x = r * 5 with the solved value for r\n    total_papers = solutions[r] * 5\n\n    return total_papers\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    jug, cup = symbols('jug cup')\n    \n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n    \n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    max_1_digit_even = 8  # Because 8 is the greatest 1-digit even number\n    min_2_digit_odd = 11  # Because 11 is the smallest 2-digit odd number\n    sum_of_numbers = max_1_digit_even + min_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_done = 3/4\n    total_designs = made_designs / fraction_done\n    return total_designs\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Hundreds place cannot be zero for a three-digit number\n        for j in range(10):  # Tens place\n            for k in range(10):  # Ones place\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n    cap_price = symbols('cap_price')\n    wristband_price = symbols('wristband_price')\n    additional_caps = symbols('additional_caps')\n    \n    # Spending equations based on total money\n    eq_spent_initial = Eq((2/5) * total_money, 4 * cap_price + 6 * wristband_price)\n    eq_remaining_money = Eq((1/3) * (total_money - (2/5) * total_money), additional_caps * cap_price)\n    \n    # Relationship between cap and wristband prices\n    eq_price_relation = Eq(cap_price, 3 * wristband_price)\n\n    # Solve the system of equations\n    solutions = solve((eq_spent_initial, eq_remaining_money, eq_price_relation), (total_money, cap_price, wristband_price, additional_caps))\n    \n    # Calculate the total number of caps (initially 4 + additional caps)\n    total_caps = 4 + solutions[additional_caps]\n    \n    return total_caps\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations([0, 2, 4, 5, 6, 8, 9]):\n        B, D, E, F, H, I, J = perm\n        if all([\n            (300 + 10*B + 1) % 3 == 0,       # ABC divisible by 3\n            (1000 + 300 + 10*B + D) % 4 == 0, # ABCD divisible by 4\n            (E + B + D + 1 + 3) % 3 == 0,     # Sum of A+E+C+(B+D+F) divisible by 3 so ABCDE divisible by 5\n            (100000 + 30000 + 1000 + 10*B + D) % 4 == 0, # ABCDEF divisible by 8 as last 3 digits divisible by 8\n            (1000000 + 300000 + 10000 + 10*B + 1000 + D + 100*E + F) % 7 == 0, # ABCDEFG divisible by 7\n            (7000000 + 1000000 + 300000 + 10000 + 10*B + 1000 + D + 100*E + 10*F + G) % 8 == 0, # ABCDEFGH divisible by 8\n            (E + G + I) % 3 == 0 and I % 2 == 0, # ABCDEFGHI divisible by 9 and by 2 since I is even\n            J == 0 # ABCDEFGHIJ divisible by 10\n        ]):\n            return {'A': 3, 'B': B, 'C': 1, 'D': D, 'E': E, 'F': F, 'G': 7, 'H': H, 'I': I, 'J': 0}\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Initial variables and constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h_initial = 3000  # initial height in meters\n    h_final = 2000  # final height in meters\n\n    # v_f^2 = v_i^2 + 2 * g * (h_final - h_initial)\n    # Since initial velocity (v_i) is 0 (starting from rest):\n    # v_f^2 = 2 * g * (h_initial - h_final)\n\n    v_f_squared = 2 * g * (h_initial - h_final)\n    \n    # Solving for final velocity (v_f). We consider only the positive root since velocity is directional and we assume downwards is positive.\n    v_f = v_f_squared**0.5\n\n    return v_f\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since there are 13 numbers, dividing them into intervals of 4 will give us intervals of 10, \n    # since the last one will include 10, 11, 12, and 13.\n    # Using the Pigeonhole Principle, we must pick at least one card from each interval,\n    # because if we only take 3 then they can't be consecutive by definition.\n    # Therefore, we need to draw at least 1 card from each of the 10 intervals.\n    # Since there are four patterns (suits) and we want to ensure we have consecutive numbers,\n    # drawing one from each suit won't ensure this, but drawing all from the same suit does.\n    # Hence, we need to draw at least 4 cards from one of these intervals.\n    # To ensure that we definitely have 4 consecutive numbers, we may have to draw \n    # all the 3 cards from the other 9 intervals (since we don't know which suit they will be in).\n    # So for the worst case we have: 9 intervals * 3 cards + 1 interval * 4 cards\n    num_cards = (9 * 3) + 4\n\n    return num_cards\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    difference_in_age = 2\n    brother_age = (ashley_age - 3) - difference_in_age\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    page_number = 1\n    printed_page = 1\n    while printed_page < 89:\n        printed_page += 1\n        page_number += 2 if printed_page % 3 == 0 else 1\n    return page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = 5 * adults + 3 * children\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Calculate how many multiples of 3 there are from 1 to 600\n    multiples_of_3 = 600 // 3 \n    # Calculate how many multiples of 5 there are from 1 to 600\n    multiples_of_5 = 600 // 5 \n    # Calculate how many multiples of both 3 and 5 (i.e., 15) there are from 1 to 600\n    multiples_of_15 = 600 // 15 \n\n    # Apply the inclusion-exclusion principle\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    # When Tom is 20, Grandma will be 60.\n    # The difference in age between Grandma and Tom will always remain constant.\n    age_difference = 60 - 20\n\n    # So, to find out Grandma's age now, we subtract the age difference from her age when Tom is 20.\n    grandma_age_now = 60 - age_difference\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in A, b be the number of students in B, and c be the total number of candies.\n    a, b, c = symbols('a b c')\n\n    # Equation for class A: 4a + 20 = c\n    equation1 = Eq(4 * a + 20, c)\n\n    # Equation for class B: 6b - 16 = c\n    equation2 = Eq(6 * b - 16, c)\n\n    # The number of students in class A is twice of class B: a = 2b\n    equation3 = Eq(a, 2 * b)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # The number of candies Miss Jenny has is the value of c\n    return solutions[c]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    # Loop over the number of ten-pence coins used\n    for ten_pence in range(6):\n        # Loop over the number of twenty-pence coins used\n        for twenty_pence in range(4):\n            # Calculate the total value in pence with the current combination\n            total = 10 * ten_pence + 20 * twenty_pence\n            # Check if we can use the fifty-pence coin or not\n            if total <= 20 and (70 - total) == 50:\n                # We can use one fifty-pence coin to reach 70 pence\n                ways += 1\n            elif total == 70:\n                # The total is already 70 pence, no fifty-pence coin needed\n                ways += 1\n            # No need for further calculations if the total exceeds 70 pence\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # To ensure we get 2 stickers of the same color, we must consider the worst case scenario using\n    # the pigeonhole principle. We take one sticker of each color until we are forced to take a sticker\n    # that will result in a pair of the same color.\n    \n    # Hence, taking worst case scenario:\n    # 1 red, 1 green, 1 red (At this point we still do not have 2 stickers of the same color)\n    # With the next sticker, we are guaranteed to get a pair of the same color.\n    # So we must take 4 stickers to be sure to have 2 of the same color.\n    return 4\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # In the worst case scenario, Sheila could pick all balls of the other two colors first.\n    # To ensure she gets 4 balls of the same colour, we do the following calculation.\n    # Let's say she picks:\n    # - all 4 orange balls\n    # - then all 2 yellow balls\n    # At this point, no matter what color of ball she picks next, she will have 4 of the same color.\n    # The total number of balls she has to pick to ensure 4 of the same color is:\n    # 4 (orange) + 2 (yellow) + 1 (any next ball, which will be blue in the worst case)\n\n    total_balls = 4 + 2 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # each duckling has 2 legs\n    geese_legs = 2 * 2  # each baby goose has 2 legs\n    total_legs = 36\n    remaining_legs = total_legs - (duck_legs + geese_legs)\n    lamb_legs = 4  # each lamb has 4 legs\n    num_lambs = remaining_legs // lamb_legs\n    \n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_sweets = 570\n    sweets_per_boy = 2\n    sweets_per_girl = 4\n\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(boys * sweets_per_boy + girls * sweets_per_girl, total_sweets)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(\"\".join(map(str, sorted(digits, reverse=True))))\n    smallest = int(\"\".join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    b = 1.2 + 1.23\n    ans = a * a - a * b\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    # Total good copies needed\n    total_good_copies = 600\n    # Fraction of good copies from A and B\n    fraction_A = 3/5\n    fraction_B = 2/5\n    # Good copies from A and B\n    good_copies_A = total_good_copies * fraction_A\n    good_copies_B = total_good_copies * fraction_B\n    # Ratio of good to bad copies for A and B\n    ratio_A = 4/1\n    ratio_B = 5/1\n    # Total copies from A and B including bad ones\n    total_copies_A = good_copies_A + (good_copies_A / ratio_A)\n    total_copies_B = good_copies_B + (good_copies_B / ratio_B)\n    # Total copies needed\n    total_copies_needed = total_copies_A + total_copies_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Each layer forms a square pyramid with L number of boxes on one side.\n    # The number of boxes N in a square pyramid is given by N = (L*(L+1)*(2*L+1)) / 6 for each layer\n    # Layer 1 (top) has L=1: (1*(1+1)*(2*1+1))/6 = 1 box\n    # Layer 2 has L=2: (2*(2+1)*(2*2+1))/6 = 5 boxes\n    # Layer 3 has L=3: (3*(3+1)*(2*3+1))/6 = 14 boxes\n    layer1 = (1*(1+1)*(2*1+1)) // 6\n    layer2 = (2*(2+1)*(2*2+1)) // 6\n    layer3 = (3*(3+1)*(2*3+1)) // 6\n    \n    total_boxes = layer1 + layer2 + layer3\n    return total_boxes\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    students = 40\n    side_length = math.sqrt(students)\n    return int(side_length)\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    # Let x be the total hours the son needs to harvest the crops by himself.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation based on the work done: 1/farmer_speed + 1/son_speed = 1/combined_speed.\n    # Farmer can do the work in 24 hours so his work rate is 1/24.\n    # Son can do the work in x hours so his work rate is 1/x.\n    # Together for 16 hours they can do the work at a rate of 1/16 per hour.\n    # The son works alone for 6 hours so his work rate is 6/x.\n    # Combined equation: 16/24 + 6/x = 1\n    equation = Eq(16/24 + 6/x, 1)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the solution for son's hours to harvest the crops on his own.\n    return solution[0]\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n    \n    # Dorothy has 3 less than 9 times as many stickers as Timmy\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    # Kevin has 45 more stickers than Timmy\n    equation2 = Eq(kevin, timmy + 45)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's sugar amount\n    annie_sugar = 300 * 0.15\n    \n    # Becky's sugar amount\n    becky_sugar = 400 * 0.25\n\n    # Carol's sugar amount\n    carol_sugar = 300 * 0.35\n    \n    # Total sugar amount\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    \n    # Total solution weight\n    total_solution = 300 + 400 + 300\n    \n    # Concentration of the resulting sugar solution\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Initial drop height\n    bounce_height = initial_height / 2  # Bounce back height is half of the previous\n    total_travel = initial_height + bounce_height * 2  # Distance covered after second bounce\n\n    return total_travel\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 36 == 0:\n            return number\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    lost_matches = 10\n    total_matches = lost_matches * (1 / (1 - (2/5) - (7/20)))\n    win_matches = (2/5) * total_matches\n    draw_matches = (7/20) * total_matches\n    points = (win_matches * 3) + (draw_matches * 1)\n    return points\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny should multiply 9 by 4 instead of 2, then add the remainder.\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n\n    # Check if Johnny's answer is correct\n    johnny_answer = 22\n    is_correct = (correct_answer == johnny_answer)\n\n    return (is_correct, correct_answer)\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "def solution():\n    from math import factorial\n\n    # total number of permutations for 5 children\n    total_perm = factorial(5)\n    \n    # number of permutations where Hugh is between Louise and Richard\n    # Here we treat Louise, Hugh, and Richard as one unit plus the other two children\n    # First we find permutations for Louise, Hugh and Richard considering Hugh can be either to the left or right of Louise or Richard (LHR or RLH),\n    # then we multiply it by permutations of 3 units (LHR unit, child 4, child 5).\n    perm_LHR = 2 * factorial(3) * factorial(3)\n    \n    # subtract the unwanted permutations from the total\n    happy_hugh_perm = total_perm - perm_LHR\n    \n    return happy_hugh_perm\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum([(-1)**(i+1) * (40 - (i*2)) for i in range(20)])\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost_chocolate = 4 * 75  # cost in pence\n    total_cost_pens = 3 * 95       # cost in pence\n    total_cost = total_cost_chocolate + total_cost_pens\n\n    note_value = 1000  # value of £10 note in pence\n\n    change = note_value - total_cost  # change in pence\n    return change / 100               # change in pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    after_first_discount = initial_price * (1 - 0.10)\n    final_price = after_first_discount * (1 - 0.20)\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # total sum of the 8 numbers\n    total_sum = 8 * 555\n    \n    # mean of last 5 numbers\n    mean_last_5 = symbols('mean_last_5')\n    \n    # sum of first 3 numbers\n    sum_first_3 = mean_last_5 * 5 - 296 * 3\n    \n    # equation for the sum of all 8 numbers\n    equation = Eq(sum_first_3 + mean_last_5 * 5, total_sum)\n    \n    # solve the equation\n    mean_last_5_solution = solve(equation, mean_last_5)\n    \n    return mean_last_5_solution[0]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start_number = 2\n    end_number = 100\n    step = 2\n    multiples_of_two = list(range(start_number, end_number + 1, step))\n    ans = len(multiples_of_two)\n    return ans\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # Let x be the number of additional people needed.\n    # 5 people can build a bridge in 15 days, so they do 1/15 of the work per day.\n    # In 5 days, they would complete 5/15 = 1/3 of the work.\n    # We need 3 times more people to complete the work in 5 days.\n    # If 5 people do 1/3 of the work in 5 days, we need 3 * 5 people to do the full work in 5 days.\n\n    base_people = 5\n    base_days = 15\n    target_days = 5\n\n    # Calculate how many times more people are needed by taking the ratio of days.\n    multiplier = base_days / target_days\n\n    # The total number of people required is the multiplier times the base number of people.\n    total_people_needed = base_people * multiplier\n\n    # The number of additional people needed is the total minus the original number of people.\n    additional_people_needed = total_people_needed - base_people\n\n    return additional_people_needed\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n    \n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between_pip_and_bud = 5\n    bud_position_from_front = pip_position + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_spent = rasidah * (3/5)\n\n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = chai_seng * (6/7)\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    chai_seng_left = chai_seng - chai_seng_spent\n    rasidah_left = rasidah - rasidah_spent\n    equation2 = Eq(chai_seng_left, rasidah_left / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    # Define the equation based on: One third of mother's age back then equals Isaac's age back then\n    equation = Eq((mother_current_age - years_ago) / 3, isaac_current_age - years_ago)\n\n    # Solve for the unknown years_ago\n    years_ago_solution = solve(equation, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # The {} in the docstring were causing syntax errors, fixed by doubling them\n    \"\"\"\n    The solve_congruence function in sympy.ntheory.modular is used to solve systems of \n    congruences (linear diophantine equations) of the form:\n    \n    x ≡ a_1 (mod m_1)\n    x ≡ a_2 (mod m_2)\n    ...\n    x ≡ a_n (mod m_n)\n    \n    It returns the least non-negative solution (x, m) of the system of congruences, where\n    x is the solution modulo m (the lcm of m_1, m_2, ..., m_n).\n    \"\"\"\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kilogram_approx = 2.2\n    kg = pounds / kilogram_approx\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        sum_ab = sum(range(a, b)) - b\n        return sum_ab\n    \n    value = custom_op(5, 10) - custom_op(4, 9)\n    \n    return value\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    digits = '123'\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8          # Elena's speed in m/s\n    cat_speed = 3            # Cat's speed in m/s\n    distance_apart = 500     # Initial distance between Elena and her cat in meters\n    \n    # Relative speed at which Elena approaches the cat\n    relative_speed = elena_speed - cat_speed\n    \n    # Time it takes for Elena to catch up with the cat\n    catch_up_time = distance_apart / relative_speed\n    \n    return catch_up_time\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(2, 21):  # prime numbers within 20\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial as fact\n\n    # For a five-digit number to be even, the last digit has to be even.\n    # There are 2 even numbers in the given digits (2 and 4)\n    # For each of those even digits, there are 4! ways to arrange the remaining digits\n    even_last_digit_count = 2 * fact(4)\n\n    return even_last_digit_count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    # The smallest two-digit number is 10 and the largest is 99.\n    # We'll iterate from the smallest to largest to find the smallest number\n    # whose digit sum equals 15.\n    for num in range(10, 100):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum == 15:\n            # Return the first number that matches the condition.\n            return num\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # The pattern can be seen as a sequence where the difference \n    # between consecutive terms is decreasing by 1 each time.\n    # 8, 20, 31, 41, 50,... \n    # Differences are: 12, 11, 10, 9,...\n    \n    # We can continue this pattern to find the next difference.\n    next_diff = 9 - 1  # Subtracting 1 from the last difference\n    \n    # Adding the next difference to the last term of the sequence\n    # to get the next term in the sequence.\n    next_term = 50 + next_diff\n    \n    return next_term\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    count = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    # Initial total weight of 8 apples\n    initial_total_weight = 8 * 50  # mean weight 50g\n\n    # New total weight after adding the extra apple\n    new_mean_weight = 52  # mean weight\n    new_total_weight = 9 * new_mean_weight  # 9 apples now\n\n    # Weight of the extra apple\n    weight_extra_apple = new_total_weight - initial_total_weight\n\n    return weight_extra_apple\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    numbers = [99, 98, 97, 96]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    faster_time = pages / (50 + 20)\n    time_diff = original_time - faster_time\n\n    equation = Eq(time_diff, 2)\n\n    ans = solve(equation, pages)[0]\n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    remainder = 7\n    quotient = 8\n    for divisor in range(1, remainder):\n        dividend = quotient * divisor + remainder\n        if dividend % divisor == remainder:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"2013-01-28\", '%Y-%m-%d')\n    one_day = timedelta(days=1)\n    target_weekday = start_date.weekday()  # 0 is Monday\n\n    year = 2013\n    while True:\n        year += 1\n        next_date = start_date.replace(year=year)\n        if next_date.weekday() == target_weekday:\n            return year\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time in hours from 6:30 AM to 7:30 AM\n    jogging_time = 1\n    # Walking time in hours from 7:30 AM to 9:30 AM\n    walking_time = 2\n\n    # Jogging speed in miles per hour\n    jogging_speed = 6\n    # Walking speed in miles per hour\n    walking_speed = 5\n\n    # Distance covered during jogging\n    jogging_distance = jogging_time * jogging_speed\n    # Distance covered during walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    savings_duration = 7  # one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = daily_savings * savings_duration\n    amount_left = initial_amount + total_saved - lent_to_brother - spent_on_snacks\n    \n    return amount_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n    \n    meters_per_day_per_company = (total_meters / companies) / days\n    \n    return meters_per_day_per_company\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n    \n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    initial_charge = 80  # The charge for any call up to 15 minutes in cents\n    additional_minute_charge = 5  # Cost per additional minute in cents\n    total_charge = 140  # Total cost of the call in cents\n\n    # If the total charge is 80 cents, the call lasted for exactly 15 minutes\n    if total_charge == initial_charge:\n        return 15\n\n    # If the total charge is more than 80 cents\n    # Calculate the number of additional minutes\n    additional_minutes = (total_charge - initial_charge) / additional_minute_charge\n\n    # The total duration of the call is 15 minutes plus the additional minutes\n    total_minutes = 15 + additional_minutes\n    return int(total_minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(4 * x - 13, 55)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define the custom operator function\n    def custom_operator(a, b):\n        return (a % 3) + (b % 4)\n\n    # Calculate the result for 9 ◈ 20\n    ans = custom_operator(9, 20)\n\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    final_result = 37\n    added_eleven = final_result - 11\n    multiplied_by_two = added_eleven * 2\n    original_number = multiplied_by_two + 4\n    return original_number\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n    \n    last_multiple = (120 // 5) * 5\n    if last_multiple > 120:\n        last_multiple -= 5\n\n    count_of_multiples = ((last_multiple - first_multiple) // 5) + 1\n    return count_of_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return int(\"10034\")\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_halves = 2 * 2 + 1  # 2 and a half equals 5 halves\n    quarters_in_half = 2  # There are 2 quarters in a half\n    num_quarters = total_halves * quarters_in_half\n    return num_quarters\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position_from_front = 5\n    eddie_position_from_back = 9\n\n    people_between_lucy_and_eddie = 2\n\n    total_people = lucy_position_from_front + people_between_lucy_and_eddie + eddie_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when James was 20 years old\n    # Since Gina was 50 on May 10, 2005, we subtract 8 years to know her age on 1997\n    gina_age_when_james_20 = 50 - (2005 - 1997)\n\n    # Age difference between Gina and James\n    age_difference = gina_age_when_james_20 - 20\n\n    # James' age when Gina was 35\n    james_age_when_gina_35 = 35 - age_difference\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    # Loop through all possible values of B (from 0 to 9)\n    for B in range(10):\n        # Form the number replacing B\n        number = int(f\"26{B}789\")\n        # Check if the number is divisible by 13\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # List of some prime numbers\n    for i in range(3 * 5 * 7 * 8):  # Loop through the least common multiple of 3, 5, 7, and 8\n        remainders = {i % 3, i % 5, i % 7, i % 8}\n        if len(remainders) == 4 and all(rem in primes for rem in remainders):\n            return i\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    cut_length_cm = 5 * 100 + 8  # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_length_cm // 9\n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities we need to find\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # given ratio of the number of orchids to the number of tulips\n    equation1 = Eq(orchids * 5, tulips * 3)\n\n    # total number of flowers before sales\n    equation2 = Eq(orchids + tulips + roses, 3616)\n\n    # After sales, the remaining flowers\n    equation3 = Eq((orchids - 0.4 * orchids) + (tulips - 0.2 * tulips) + (roses - 0.25 * roses), 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # The smallest number of right-handed girls would be when all right-handed non-girls (boys) are counted first.\n    # Any remaining right-handed individuals must be girls.\n    right_handed_boys_max = total_pupils - girls  # Maximum possible right-handed boys if none of the girls were right-handed.\n    right_handed_girls_min = max(0, right_handed - right_handed_boys_max)  # Minimum right-handed girls.\n    return right_handed_girls_min\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5*B + 4)\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, files = symbols('books files')\n    \n    # Total amount spent on books and files\n    total_cost = Eq(12 * books + 9 * files, 336)\n    # Number of books is 14 more than number of files\n    book_file_relation = Eq(books, files + 14)\n    \n    # Solve the system of equations\n    solutions = solve((total_cost, book_file_relation), (books, files))\n    \n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):  # chickens can only be from 0 to 10\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Define a function to calculate the last digit of a base raised to the exponent\n    def last_digit(base, exponent):\n        # Last digits repeats every 4 numbers for bases 2-9, 1 and 0 are always the same\n        if base == 0 or base == 1:\n            return base\n        elif base == 5:\n            return 5 # Last digit of powers of 5 is always 5\n        elif base == 6:\n            return 6 # Last digit of powers of 6 is always 6\n        \n        repeat_cycle = [base, (base*base) % 10, (base*base*base) % 10, (base*base*base*base) % 10]\n        return repeat_cycle[(exponent % 4) - 1]\n\n    # Calculate the last digit of each term and sum them up\n    total_last_digit = sum(last_digit(i, 2013) for i in range(1, 10))\n\n    # Compute the last digit of the total\n    ans = total_last_digit % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    # We will utilize the Chinese Remainder Theorem\n    # Grandma's age when divided by 6 leaves a remainder of 2\n    # and when divided by 7 leaves a remainder of 5.\n    # We will search for a number between 30 and 120 that satisfies these conditions\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Since there are 3 colors, if Peter takes one of each color, he will have 3 socks.\n    # However, to be sure to get a pair of the same color, he must take one more sock.\n    return 3 + 1\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime.strptime('2 July, 20:00', '%d %B, %H:%M')\n    arrival = datetime.strptime('3 July, 01:00', '%d %B, %H:%M')\n    time_difference = timedelta(hours=7)\n    \n    adjusted_arrival = arrival + time_difference\n    flight_duration = adjusted_arrival - departure\n    \n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    diamond_plus_square = solutions[square] + solutions[diamond]\n\n    return diamond_plus_square\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    pages = 131\n    digits = 0\n\n    # Count the number of digits for each number of pages\n    for i in range(1, pages + 1):\n        digits += len(str(i))\n\n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    attempted_questions = total_questions - 3\n    score_per_correct = 4\n    penalty_per_wrong = 1\n    total_score = 168\n\n    for correct_answers in range(attempted_questions + 1):\n        wrong_answers = attempted_questions - correct_answers\n        score = (correct_answers * score_per_correct) - (wrong_answers * penalty_per_wrong)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')   # Let x and y be the two numbers\n\n    equation1 = Eq(x + y, 71)  # Sum of two numbers is 71\n    equation2 = Eq(x - y, 9)   # Difference of the two numbers is 9\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]  # Return the larger number\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 3 choices (0, 1, 2) for each digit, but we cannot use 0 as the first digit\n    first_digit_choices = 2  # (1, 2)\n    second_digit_choices = 3  # (0, 1, 2)\n\n    # Number of 2-digit numbers = choices for first digit * choices for second digit\n    total_numbers = first_digit_choices * second_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Set up the two equations given\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solution[necklace] + solution[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, sid = symbols('eugene sid')\n    \n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n    \n    # After Eugene used 71 coins and Sid used 16 coins, they had 51 coins left altogether\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (eugene, sid))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the middle number in the sequence of five consecutive even numbers be x.\n    # Then, the numbers are (x-4), (x-2), x, (x+2), (x+4)\n    # Their sum is: (x-4) + (x-2) + x + (x+2) + (x+4) = 5x\n    # According to the problem, this sum is 200: 5x = 200\n    # Solving for x gives us the middle number in the sequence.\n    x = 200 / 5\n    \n    # Since we are looking for the smallest number in the sequence,\n    # we take the middle number and subtract 4 (because the numbers are even and consecutive).\n    smallest_number = x - 4\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume of sugar solution in grams transferred\n    x = symbols('x')\n    \n    # Initial sugar amounts in A and B\n    sugar_A = 50 * 0.10\n    sugar_B = 30 * 0.20\n    \n    # Sugar amount after transfer\n    sugar_A_after = sugar_A - 0.10 * x + 0.20 * x\n    sugar_B_after = sugar_B + 0.10 * x - 0.20 * x\n    \n    # Final volume after transfer\n    volume_A = 50 - x + x  # same x subtracted and added\n    volume_B = 30 - x + x  # same x subtracted and added\n    \n    # Concentration equations after transfer\n    equation = Eq(sugar_A_after / volume_A, sugar_B_after / volume_B)\n    \n    # Solve for x\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = sum(100 / 97 * (99 / 96) ** i for i in range(98))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # If it takes 8 minutes to cut a piece of wood into 5 sections,\n    # it means Katie makes 4 cuts in 8 minutes because first section doesn't require a cut.\n    cuts_for_five_sections = 4\n    time_for_five_sections = 8  # minutes\n\n    # Each cut hence takes 8 / 4 = 2 minutes\n    time_per_cut = time_for_five_sections / cuts_for_five_sections\n\n    # To cut the piece of wood 6 times, Katie will need 6 cuts\n    cuts_needed_for_six_sections = 6\n    # Calculate the total time needed for 6 cuts\n    time_needed_for_six_sections = cuts_needed_for_six_sections * time_per_cut\n\n    return time_needed_for_six_sections\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n\n    # Votes remaining to be cast\n    remaining_votes = total_votes - (22 + 27 + 35) \n\n    # Maximum votes the other candidates could still possibly get\n    max_votes_for_others = (remaining_votes // 2) + 1\n\n    # Votes Peter needs to guarantee a win\n    votes_needed_for_peter = max_votes_for_others - votes_for_peter\n\n    return votes_needed_for_peter\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Comparing the units value of 31 and 32\n    # Extracting the units digit from both numbers\n    units_31 = 31 % 10\n    units_32 = 32 % 10\n\n    # Comparing the units\n    if units_31 > units_32:\n        ans = 31\n    else:\n        ans = 32\n\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # Total amount in pence\n    # Let the number of each type of coin be x\n    # Total value from 5p coins + 10p coins + 20p coins is 490p\n    # 5x + 10x + 20x = 490\n    # 35x = 490\n    # x = 490 / 35\n    x = total_amount // 35\n    # Total number of coins is 3 times x (since there are 3 types of coins)\n    return 3 * x\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28\n    gift_cost = 20\n    remaining_amount = initial_amount - gift_cost\n    return remaining_amount * 100  # Converting dollars to cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate_of_interest = 0.06\n    time_in_years = 5\n\n    balance = principal * (1 + rate_of_interest) ** time_in_years\n\n    return balance\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_cost = 0.10 * initial_amount\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = 0.20 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n    \n    # Calculate digits for 1-9\n    digits += 9\n    \n    # Calculate digits for 10-99\n    digits += (99 - 10 + 1) * 2\n    \n    # Calculate digits for 100-185\n    digits += (pages - 99) * 3\n\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_raise_percentage = 0.10\n    \n    new_annual_salary = annual_salary * (1 + pay_raise_percentage)\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_days = 9\n    total_sweets = 135\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n - 1)d)\n    # We know that n/2 * (2a + (n - 1)d) = total_sweets. We also know d = 3 (difference)\n    # So we can solve for the first term a\n    d = 3\n    # n/2 * (2a + (n - 1) * d) = total_sweets\n    # Rearrange: 2a = (2 * total_sweets / n) - (n - 1) * d\n    a = (2 * total_sweets / total_days - (total_days - 1) * d) / 2\n    \n    # The last day sweets would be calculated by first day sweets + (n-1)*d\n    last_day_sweets = a + (total_days - 1) * d\n    \n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Define the possible ranges for month and day\n    for month in range(1, 13): # Since there are 12 months\n        for day in range(1, 32): # Assume maximum days in a month is 31\n            if month * 31 + day * 12 == 376:\n                # Format the date as \"ddmm\"\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    total = 4.08 * 20\n    known_part = 1.08 * 20\n    missing_part = (total - known_part) / 20\n    return missing_part\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    add = True\n    for i in range(119, 98, -2):\n        if add:\n            sum += i\n        else:\n            sum -= i\n        add = not add\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    total_numbers = 2022\n    numbers_divisible_by_7 = total_numbers // 7\n    numbers_divisible_by_17 = total_numbers // 17\n    numbers_divisible_by_both = total_numbers // (7 * 17)\n    \n    ans = total_numbers - (numbers_divisible_by_7 + numbers_divisible_by_17 - numbers_divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    milk_to_use = (milk_needed * tom_flour) / flour_needed\n\n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    total_sweets = sweets_left + sweets_taken\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_elephant_age_now = 18\n    older_elephant_age_future = 62\n    \n    # Since both elephants age at the same rate, the difference in their ages will remain constant\n    age_difference = older_elephant_age_future - younger_elephant_age_now\n\n    # Therefore, the current age of the older elephant is the younger elephant's age plus the age difference\n    older_elephant_age_now = younger_elephant_age_now + age_difference\n\n    return older_elephant_age_now\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 0.30  # in pounds, since 30p is 0.30 pounds\n\n    # Discounts\n    calculator_discount = 0.25  # 25% off\n    protractor_discount = 0.50  # 50% off\n\n    # Sale prices after discounts\n    sale_calculator_price = calculator_price * (1 - calculator_discount)\n    sale_protractor_price = protractor_price * (1 - protractor_discount)\n\n    # David's purchase\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total amount paid\n    total_cost = (calculators_bought * sale_calculator_price) + (protractors_bought * sale_protractor_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_tonnes = (2 / 3) * tonnes\n    kilograms = two_thirds_tonnes * 1000\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen rides a bike for 1 hour from 7:30 am to 8:30 am at 10 miles per hour\n    bike_distance = 1 * 10\n\n    # Ellen takes a train for 2 hours from 8:30 am to 10:30 am at 50 miles per hour\n    train_distance = 2 * 50\n\n    # The total distance Ellen travels every Saturday\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # If 27 oxen can finish eating the grass in 6 weeks,\n    # then 1 ox will take 27 times longer to eat the grass.\n    # Therefore, 1 ox can finish eating the grass in 27 * 6 weeks.\n    oxen_27_time = 27 * 6\n\n    # Similarly, if 23 oxen can finish eating the grass in 9 weeks,\n    # then 1 ox will take 23 times longer to eat the grass.\n    # Therefore, 1 ox can finish eating the grass in 23 * 9 weeks.\n    oxen_23_time = 23 * 9\n\n    # Since the grass is growing at a constant rate, we can assume \n    # that the total amount of grass to be eaten (workload) is constant.\n    # Hence, if W is the workload, R is the rate at which one ox eats the grass and T\n    # is the time taken, then W = R * T. We can say that:\n    # W = R * (27 * 6) = R * (23 * 9)\n    # Therefore, the rate at which one ox eats the grass can be calculated by either:\n    # R = W / (27 * 6) = W / (23 * 9)\n    # Since W is constant, we can equate them and find that 27 * 6 = 23 * 9\n\n    # Now we need to find the time for 21 oxen to finish the same amount of grass.\n    # Using the same formula W = R * T, we find the time for 21 oxen:\n    # 21 * time_for_21_oxen = R * 27 * 6\n    # time_for_21_oxen = (R * 27 * 6) / 21\n\n    # We know that R * 27 * 6 = R * 23 * 9 (since W is constant), thus we substitute.\n    time_for_21_oxen = (oxen_23_time * 27) / (21 * 23)\n\n    return time_for_21_oxen\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    num_balls = 5\n    num_boxes = 3\n    # Using stars and bars theorem to distribute n identical objects into r different groups\n    # The formula is C(n + r - 1, r - 1)\n    from math import comb\n    return comb(num_balls + num_boxes - 1, num_boxes - 1)\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02)**2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, blue, green = symbols('red blue green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    numerator = factorial(len(word))\n    denominator = 1\n\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    return numerator // denominator\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from the front and 2nd from the back, so there are 3 + 2 - 1 rows\n    rows = 3 + 2 - 1\n\n    # Lucas is 4th from the left and 3rd from the right, so there are 4 + 3 - 1 columns\n    columns = 4 + 3 - 1\n\n    # Total number of students is the product of the number of rows and columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(keng_wee, ema + 360)\n    equation2 = Eq(ema - (ema / 4), keng_wee - (4 * keng_wee / 7))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    # Get Keng Wee's initial amount of money\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217  # Start with the least number greater than 216\n    while True:\n        if sum(map(int, str(num))) == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square = one_tenth_of_square * 10  # Multiply by 10 to get the value in the square\n    return square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # 3rd from front to back and 2nd from back to front means there are 4 in total vertically\n    vertical = 3 + 2 - 1\n\n    # 4th from left to right and 3rd from right to left means there are 6 in total horizontally\n    horizontal = 4 + 3 - 1\n\n    # Total number of students is the product of the number in each row and column\n    return vertical * horizontal\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the initial number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Initial condition: number of girls is 9/11 of number of boys\n    initial_condition = Eq(g, 9/11 * b)\n    \n    # After transferring: number of girls becomes 10/11 of number of boys\n    transferred_condition = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, transferred_condition), (g, b))\n\n    # Calculate the total number of students after transferring\n    total_students = solutions[g] + 2 + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    x, y = symbols('x y')\n    \n    # Define the equation\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    \n    # Solve the equation for y in terms of x\n    y_expr = solve(equation, y)[0]\n    \n    # Calculate the value of the terms within the brackets (2x - y)\n    bracket_value = 2*x - y_expr\n    \n    return bracket_value\n\n# Call the function and store the result\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_money = 500  # amount in pence (£5 = 500p)\n    milk_cost = 3 * 31  # cost of 3 litres of milk in pence\n    crisps_cost = 2 * 17  # cost of 2 packets of crisps in pence\n    bread_cost = 78  # cost of 1 large loaf of bread in pence\n    magazine_cost = 105  # cost of 1 magazine in pence (£1.05 = 105p)\n\n    total_cost = milk_cost + crisps_cost + bread_cost + magazine_cost\n    change = total_money - total_cost\n\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Let's denote the number of sweets Trevor has as t and Siobhan as s.\n    # From the problem statement, we have two equations:\n    # 1) Trevor has five times as many sweets as Siobhan: t = 5 * s\n    # 2) Siobhan has 24 sweets fewer than Trevor: s = t - 24\n\n    # We can substitute t from the second equation into the first one:\n    # s = (5 * s) - 24\n    # Now, let's solve for s:\n    s = 24 / 4\n\n    # Once we have the value for s, we can find the value for t:\n    t = 5 * s\n    return int(t)\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 0  # Initialize the answer\n\n    # Calculate the summation for each fraction from 1/1 to 1/10 and back\n    for i in range(1, 11):\n        ans += sum([j / i for j in range(1, i + 1)])   # Sum from 1/i to i/i\n        ans += sum([(i - j) / i for j in range(1, i)])  # Sum from (i-1)/i back to 1/i\n    \n    return ans\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Zehan's current age\n    zehan_current_age = symbols('zehan_current_age')\n\n    # Create the equation based on the information given\n    equation = Eq(zehan_current_age + 12, 3 * zehan_current_age)\n\n    # Solve the equation\n    solutions = solve(equation, zehan_current_age)\n\n    # Return Zehan's current age\n    return solutions[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Calculate the number of ways to choose 4 students from 12 (excluding A, B, and C)\n    ways_to_choose_4_from_12 = comb(12, 4)\n    # There are 3 ways to choose one of A, B, or C\n    total_ways = ways_to_choose_4_from_12 * 3\n    \n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    \n    cost_per_ticket = total_cost / number_of_tickets\n    \n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    value = 0.36\n    percent_value = value * 100\n    return percent_value\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's share is 6 parts of the total 5 + 6 = 11 parts\n    \n    # Calculate the number of sweets per part\n    sweets_per_part = 36 // 6\n    \n    # Calculate the total number of sweets\n    total_sweets = sweets_per_part * (5 + 6)\n    \n    return total_sweets\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the amount of lemon juice initially in the bottle\n    x = symbols('x')\n    \n    # Initial ratio: 2 parts lemon juice to 3 parts water\n    # Final ratio after adding 80ml: 6 parts lemon juice to 5 parts water\n    \n    # Express the amount of water in terms of the initial amount of lemon juice (x)\n    # using the initial ratio\n    water = (3/2) * x\n    \n    # After adding 80ml of lemon juice, the new total amount of lemon juice would be x + 80\n    # and the ratio of lemon juice to water would be 6/5.\n    # Therefore, we can set up the equation (x + 80) / water = 6/5\n    equation = Eq((x + 80) / water, 6/5)\n    \n    # Solve the equation to find the initial amount of lemon juice\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Let 'savings' be the total savings Kim initially had.\n    # Kim gave 1/3 of her savings to her mother.\n    mother_share = savings / 3\n\n    # Spent 177 on dresses and 129 on earrings.\n    spent_total = 177 + 129\n\n    # The amount left was 50% of what she gave her mother.\n    amount_left = mother_share / 2\n\n    # The amount left is also equal to savings - (mother_share + spent_total)\n    equation = Eq(savings - (mother_share + spent_total), amount_left)\n\n    # Solve for the savings\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Using the inclusion-exclusion principle:\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase in usual speed\n    delay_time = 9 / 60  # 9 minutes converted to hours\n\n    # Calculate the time it would take at the usual speed\n    time_usual = delay_time / 0.30\n\n    # Calculate the distance\n    distance = usual_speed * time_usual\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    quotient = 80\n    number = (quotient * 8 + 8) / 8 - 8\n    return number\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    red_length = 2\n    blue_length = 3\n    \n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if red_length * red_ropes + blue_length * blue_ropes == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = skipping_rope + long_jump - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    percentage = 30 / 100\n    part = 21\n    P = part / percentage\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_second_half = 6\n    months_year = 12\n\n    total_second_half = avg_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    avg_per_month = total_year / months_year\n\n    return avg_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7): # Since the LCM of 7 and 9 is 63, we don't need to check numbers larger than that\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n            \nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let d be the distance, s be the original speed, and t be the original time.\n    d, s, t = symbols('d s t')\n\n    # Original distance is s*t.\n    original_distance_eq = Eq(d, s * t)\n\n    # If speed increases 25%, time decreases by 20 minutes.\n    # New speed is s * 1.25, new time is t - 20.\n    increased_speed_eq = Eq(d, s * 1.25 * (t - 20/60))\n\n    # If speed decreases by 45 m/min, time increases by 75%.\n    # New speed is s - 45, new time is t * 1.75.\n    decreased_speed_eq = Eq(d, (s - 45) * (t * 1.75))\n\n    # Solve the system of equations.\n    solutions = solve((original_distance_eq, increased_speed_eq, decreased_speed_eq), (d, s, t))\n\n    # There may be multiple solutions, but we want the positive one.\n    for sol in solutions:\n        if all(val.is_real and val > 0 for val in sol):\n            distance = sol[0]\n            break\n\n    return distance\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    import sympy as sp\n\n    # Let's assume 'A' is a factorable number, then 1 is its smallest factor.\n    # Its greatest factor is 'A' itself. So, A - 1 = 41 => A = 42\n    # The 7th multiple of A is A multiplied by 7.\n    A = 42\n    seventh_multiple = A * 7\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    ratio_height = 3\n    ratio_width = 4\n    given_height = 21  # cm\n    # Calculate width using the ratio\n    width = (given_height * ratio_width) / ratio_height\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (given_height + width)\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    from fractions import Fraction\n\n    result = 1\n    for i in range(2, 12):\n        result *= Fraction(1 + 1/i)\n        \n    return result\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies_fraction = Fraction(1, 7)\n    cookies_fraction = Fraction(1, 14)\n    muffins_fraction = Fraction(1, 2)\n    \n    total_used = brownies_fraction + cookies_fraction + muffins_fraction\n    return total_used.simplify()\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, (3 / 5) * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz, jessie + 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # x - y = 36 (where x is the larger number and y is the smaller number)\n    # x + y = 98\n\n    # Solving the two equations:\n    # 2y = 98 - 36\n    # y = (98 - 36) / 2\n\n    smaller_number = (98 - 36) / 2\n    return int(smaller_number)\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = \"333\" * 4  # Each '3' written 4 times to form 12 digits\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each expression using exponentiation\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10\n    \n    # Multiply the last digits and then find the last digit of the result\n    final_last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return final_last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    marks_scored = 78\n    percent_correct = 70\n    correct_mark = 3\n    wrong_mark = -1\n\n    correct_questions = (total_questions * percent_correct) / 100\n    wrong_questions = total_questions - correct_questions\n\n    # total marks = marks from correct answers + marks deducted for wrong answers\n    # 78 = correct_questions * 3 + wrong_questions * (-1)\n    # We solve this equation to find the number of correct questions\n    \n    # Let x be the number of correct questions\n    x = correct_questions\n    # Let y be the number of wrong questions\n    y = wrong_questions - (correct_questions - x)\n\n    # Set up the equation based on the total marks scored\n    equation = x * correct_mark + y * wrong_mark\n\n    # We make the equation equal to the total marks\n    # And solve for the number of correct answers, which is x\n    while equation != marks_scored:\n        x -= 1\n        y = wrong_questions - (correct_questions - x)\n        equation = x * correct_mark + y * wrong_mark\n        \n    return x\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the cost of one file is f and the cost of one ruler is r.\n    f, r = symbols('f r')\n\n    # Given that 6 files and 10 rulers cost $40, we can form the following equation.\n    equation1 = Eq(6*f + 10*r, 40)\n\n    # We solve the equation to find the values of f and r.\n    solutions = solve((equation1), (f, r))\n\n    # With the values of f and r, we find the cost of 9 files and 15 rulers.\n    cost = 9 * solutions[f] + 15 * solutions[r]\n\n    return cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n\n    equation1 = Eq(john, (5/13) * jessie)\n    equation2 = Eq(john + 600, (1/2) * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 1\n\n    while count_1 < 15 or count_2 < 14:\n        for digit in str(N):\n            if digit == '1':\n                count_1 += 1\n            elif digit == '2':\n                count_2 += 1\n        if count_1 == 15 and count_2 == 14:\n            break\n        N += 1\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    time_in = datetime.strptime(\"10:30\", \"%H:%M\")\n    time_out = datetime.strptime(\"11:00\", \"%H:%M\")\n\n    time_diff = time_out - time_in\n    return time_diff.total_seconds() // 60  # converting to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    tshirts, caps = symbols('tshirts caps')\n    \n    # Ratio of the number of tshirts to caps\n    ratio_eq = Eq(tshirts / caps, 8/5)\n    \n    # Cost of sold items\n    total_sales_eq = Eq((1/4) * tshirts * 3 + (1/5) * caps * 5, 132)\n    \n    # Solve the system of equations\n    solution = solve((ratio_eq, total_sales_eq), (tshirts, caps))\n    \n    return solution[tshirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost_bananas = 3 * 12  # In pence\n    total_cost_apples = 5 * 11   # In pence\n    total_cost = total_cost_bananas + total_cost_apples  # Total cost in pence\n\n    payment = 200  # Payment in pence (£2 coin)\n    \n    change_in_pence = payment - total_cost\n    \n    # Convert pence to pounds and pence\n    pounds = change_in_pence // 100\n    pence = change_in_pence % 100\n    \n    # Final result combined as pounds and pence\n    return (pounds, pence)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    total_children = 7\n    age_difference = 2\n    \n    harvir_age = youngest_age + (total_children - 1) * age_difference\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    \n    total_spent = calendar_price + ball_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used_kg = (1/5) + (1/2)\n    flour_left_kg = 360 / 1000\n    total_flour_kg = flour_used_kg + flour_left_kg\n    \n    return total_flour_kg\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    import math\n    # Since sitting around a circular table, we consider one person as a fixed reference point.\n    # The remaining (4 - 1) people can be arranged in (3!) ways.\n    num_ways = math.factorial(3)\n    \n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original = symbols('original')\n\n    equation = Eq(original + 24, 3 * original)\n\n    solution = solve(equation, original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return (3 * a) + (2 * b)\n    \n    def star(a, b):\n        return (3 * a) - (2 * b)\n    \n    first_operation = delta(3, 4)\n    second_operation = star(first_operation, 5)\n    final_result = delta(second_operation, 6)\n    \n    return final_result\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n    \n    # 26p = 0.26 pounds, 30p = 0.30 pounds\n    # Equation based on the total cost\n    total_cost_eq = Eq(0.26 * oranges + 0.30 * lemons, 5)\n    \n    # Equation based on the count of oranges and lemons, which we also want to find\n    # We can't form such an equation with the given problem because the sum of items isn't known.\n    # Hence, we will iterate over the possible values of oranges and lemons until we find a sum that works.\n    \n    # Possible range for the number of oranges (0 to the total cost divided by the cost of one orange)\n    # We use int(...) to make sure to try all integer values.\n    possible_oranges = range(int(5 / 0.26) + 1)\n    \n    # Try each possibility until we find one that satisfies the total cost\n    for num_oranges in possible_oranges:\n        eq = total_cost_eq.subs(oranges, num_oranges)\n        num_lemons = solve(eq, lemons)\n        \n        # If the number of lemons is integer and non-negative, we have a solution\n        if len(num_lemons) == 1 and num_lemons[0].is_integer and num_lemons[0] >= 0:\n            total_items = num_oranges + num_lemons[0]\n            return total_items\n    \nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = -(-total_cookies // cookies_per_box)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo, jason + 220)\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # 3 biographies, 4 science fictions, 2 magazines, 2 schoolbooks\n    same_books = factorial(3) * factorial(4) * factorial(2) * factorial(2)\n\n    ways = factorial(total_books) // same_books\n    return ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        a, b, c, d, e = p\n        if a == 0 or c == 0:  # Ensure E and C are not zero as they are the first digits of the numbers\n            continue\n\n        abcd = a*1000 + b*100 + c*10 + d\n        effe = e*1000 + f*100 + f*10 + e\n        if abcd + effe == b*10000 + c*1000 + d*100 + b*10 + h:\n            return b*10000 + c*1000 + d*100 + b*10 + h\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n\n    total_robots = robots_per_day * days_in_week\n\n    return total_robots\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for male and female visitors on the first day\n    m, f = symbols('m f')\n\n    # Equation representing that the number of male visitors is 450 more than female visitors on the first day\n    equation1 = Eq(m, f + 450)\n\n    # Equations representing the number of visitors on the second day\n    # Female visitors increased by 15% on the second day\n    equation2 = Eq(f * 1.15, f + 0.15 * f)\n    # Male visitors decreased by 18% on the second day\n    equation3 = Eq(m * 0.82, m - 0.18 * m)\n    # The total number of visitors on the second day is 1354\n    equation4 = Eq((f + 0.15 * f) + (m - 0.18 * m), 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (m, f))\n    \n    # Calculate the number of visitors on the first day\n    total_visitors_first_day = solutions[f] + solutions[m]\n\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3000000  # mansion cost 3 million pounds\n    num_friends = 5  # five friends shared the cost\n\n    each_pay = total_cost / num_friends\n\n    return each_pay\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    decrement = 9\n    # Calculate the remainder when start number is divided by decrement\n    remainder = start_number % decrement\n    # The last positive number is the remainder subtracted from the start number if remainder is not 0\n    # If remainder is 0, the last positive number is the decrement itself\n    last_positive_number = start_number - remainder if remainder != 0 else decrement\n\n    return last_positive_number\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let x be the number of children who bought the shirt without their name\n    # Let y be the number of children who bought the shirt with their name\n    # We know that x + y = 50, since there are 50 children\n    # We also know that 10x + 15y = 555, because that's the total amount paid\n    \n    # Set up the two equations\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first, female_first = symbols('male_first female_first')\n    \n    # Males are 450 more than females on the first day\n    equation1 = Eq(male_first, female_first + 450)\n    \n    # On the second day, females increase by 15%, males decrease by 18%\n    females_second_day = female_first * 1.15\n    males_second_day = male_first * 0.82\n    \n    # Total visitors on second day is 1354\n    equation2 = Eq(females_second_day + males_second_day, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first, female_first))\n\n    return solutions[male_first]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in minutes David walks at the increased speed\n    x = symbols('x')\n\n    # Initial speed (in metres/minute)\n    initial_speed = 150\n    # Time at initial speed is 10 minutes\n    time_initial = 10\n    # Increased speed (in metres/minute)\n    increased_speed = initial_speed + 50\n\n    # Distance walked at initial speed\n    distance_initial = initial_speed * time_initial\n    # Distance walked at increased speed\n    distance_increased = increased_speed * x\n\n    # Total distance walked is 3700\n    total_distance = distance_initial + distance_increased\n\n    # Set up the equation and solve for x\n    equation = Eq(total_distance, 3700)\n    solution = solve(equation, x)\n    \n    # Total time walked is the time at initial speed plus the time at increased speed\n    total_time = time_initial + solution[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    hearts = 4\n    spades = 3\n    diamonds = 7\n    # Calculate the number of ways to arrange the cards\n    # This is the multinomial coefficient formula\n    ans = factorial(total_cards) // (factorial(hearts) * factorial(spades) * factorial(diamonds))\n    return ans\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Convert Singapore departure time to London time when the plane took off\n    singapore_departure = 5  # 05:00 in Singapore\n    london_departure = (singapore_departure - 7) % 24  # Adjusting for time difference and modulo 24 for day cycle\n\n    # Given that the plane landed at 11:00 in London\n    london_landing = 11  # 11:00 in London\n\n    # Calculate the flight duration\n    if london_landing > london_departure:\n        flight_duration = london_landing - london_departure\n    else:\n        # If the flight duration crosses midnight\n        flight_duration = (24 - london_departure) + london_landing\n\n    return flight_duration\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since we are dividing identical pencils into identical cases,\n    # we use the partition of an integer method, which is P(n, k)\n    # where n is the number of items to split (pencils) and k is the number\n    # of containers (cases). This gives us P(7, 3).\n\n    # Number of ways to partition n using k parts is given by\n    # the number of ways to partition n with no part larger than k,\n    # minus the number of ways to partition n with no parts larger than k-1.\n\n    # P(n, k) = P(n-k, k) + P(n-1, k-1)\n    \n    # For n = 7 and k = 3, we calculate it as follows:\n    # P(7, 3) = P(4, 3) + P(6, 2)\n    # P(4, 3) = P(1, 3) + P(3, 2) since 4 - 3 = 1 and 4 - 1 = 3\n    # P(6, 2) = P(4, 2) + P(5, 1) since 6 - 2 = 4 and 6 - 1 = 5\n    # Now we can calculate each of these parts based on the base conditions\n    # P(n, k) where n < k is always 1, because there's only one way to put less pencils than cases\n    # P(n, n) is also 1, because there's just one way to put the same number of pencils as cases\n\n    # P(4, 3) = P(1, 3) + P(3, 2) -> P(1, 3) = 1, P(3, 2) = P(1, 2) + P(2, 1) -> P(1, 2) = 1, P(2, 1) = 1\n    # So, P(3, 2) = 1 + 1 = 2\n    # P(4, 3) = 1 + 2 = 3\n\n    # P(4, 2) = P(2, 2) + P(3, 1) -> P(2, 2) = 1, P(3, 1) = 1\n    # P(4, 2) = 1 + 1 = 2\n    # P(5, 1) is 1 because there's only one pencil case\n    # P(6, 2) = P(4, 2) + P(5, 1) -> 2 + 1 = 3\n\n    # P(7, 3) = P(4, 3) + P(6, 2) = 3 + 3 = 6\n\n    # Thus, there are 6 ways Tania can split 7 identical pencils\n    # into 3 identical pencil cases.\n    return 6\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds = Fraction(4, 9)\n    cashews = Fraction(1, 3)\n    difference = almonds - cashews\n    return difference\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    result = sum([i if i % 4 in [0, 2] else -i for i in range(2, 55, 2)])\n    return result\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    daily_increase = 5\n    first_day_pages = 20\n    last_day_pages = 80\n\n    # Calculate the number of days before the last day\n    day = 1\n    while True:\n        total_pages = (day * (2 * first_day_pages + (day - 1) * daily_increase)) / 2\n        if total_pages + last_day_pages > total_pages + (first_day_pages + (day - 1) * daily_increase):\n            break\n        day += 1\n\n    # Calculate the total pages of the storybook\n    total_pages = (day * (2 * first_day_pages + (day - 1) * daily_increase)) / 2 + last_day_pages\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's method:\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's incorrect solution:\n    wrong_numerical_part = quotient * remainder  # This is the step that is incorrect.\n    wrong_answer = wrong_numerical_part + divisor\n\n    # Correct method:\n    # The whole number part of division is given by quotient times divisor\n    numerical_part = quotient * divisor\n    # The entire number Johnny is looking for is the numerical part plus the remainder\n    correct_answer = numerical_part + remainder\n    \n    # Return whether Johnny's answer is correct and the correct answer\n    is_correct = wrong_answer == correct_answer\n    return (is_correct, correct_answer)\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    boys, girls = symbols('boys girls')\n\n    # Each boy distributed 4 bags\n    boys_bags = 4 * boys\n    # Each girl distributed 3 bags\n    girls_bags = 3 * girls\n\n    # The boys distributed 62 more bags than the girls\n    equation1 = Eq(boys_bags - girls_bags, 62)\n\n    # Altogether, there are 40 boys and girls\n    equation2 = Eq(boys + girls, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # All the letters stand for different digits\n    S, A, M, O, G = symbols('S A M O G', integer=True)\n\n    # Condition to make each symbol a digit from 0 to 9\n    digits_conditions = (S >= 0, S <= 9, A >= 0, A <= 9, M >= 0, M <= 9, O >= 0, O <= 9, G >= 0, G <= 9)\n\n    # Each letter stands for a different digit\n    different_digits_condition = Eq(len(set([S, A, M, O, G])), 5)\n\n    # The equation given by the problem\n    equation = Eq(S*10000 + A*1000 + S*100 + M*10 + O, 4 * (O*10000 + G*1000 + A*100 + M*10 + S))\n\n    # Solve the system of equations\n    solutions = solve((equation, different_digits_condition) + digits_conditions)\n\n    # Extract the solution that satisfies S != 0 (since we want a 5-digit number)\n    for sol in solutions:\n        if sol[S] != 0:\n            return sol[S]*10000 + sol[A]*1000 + sol[S]*100 + sol[M]*10 + sol[O]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Creating the sequence until the first 11 appears\n    sequence = []\n    for i in range(1, 12):\n        sequence.extend([i] * i)\n\n    # Finding the median of the sequence\n    n = len(sequence)\n    sequence.sort()\n\n    if n % 2 == 1:\n        # If the length of the sequence is odd, the median is the middle number\n        median = sequence[n // 2]\n    else:\n        # If the length of the sequence is even, the median is the average of the two middle numbers\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6  # Each number from 1 to 6 has equal probability on a fair die\n\n    expected_times = total_rolls * probability_of_five\n\n    return expected_times\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of the part that has been cut from both ropes\n    x = symbols('x')\n    \n    # After cutting, Rope A will be 65 - x and Rope B will be 29 - x\n    # According to the problem statement, Rope A will be 3 times Rope B\n    equation = Eq(65 - x, 3 * (29 - x))\n    \n    # Solve for x\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_1 = 18\n    denominator_2 = 6\n    \n    # Cross multiply to find the value of the box (□)\n    box_value = (numerator * denominator_2) / denominator_1\n\n    return box_value\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(2 * B, 3 * A)\n    equation2 = Eq(6 * C, 5 * B)\n    equation3 = Eq((A + B + C) / 3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    cost_per_dress = solve(total_cost, x)\n    \n    return cost_per_dress[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    return count\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5\n    second_digit = 1 # The smallest odd number\n    third_digit = 9  # The largest odd single digit\n    fourth_digit = 0 # The smallest even number in nature\n    fifth_digit = 8  # The largest single digit that is a multiple of 2\n    sixth_digit = 3  # The smallest odd number greater than 1 in nature\n    seventh_digit = 0 # The digit has to be a multiple of 2 and 5, hence 0\n\n    return int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 0\n    for i in range(1, 2012):\n        k += (1 / i - 1 / (i + 1))\n\n    ans = k / (k + 2)\n    return int(ans * (ans + 2))\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    total_work = 1  # painting the house is considered as 1 unit of work\n    energetic_days = 12\n    energetic_rate = total_work / energetic_days\n    \n    # decorators rate is the sum of their individual rates\n    decorators_days = 8\n    decorators_rate = total_work / decorators_days\n    \n    # lazy rate is decorators rate minus energetic rate\n    lazy_rate = decorators_rate - energetic_rate\n    \n    # number of days for lazy is the total work divided by his rate\n    lazy_days = total_work / lazy_rate\n    \n    return lazy_days\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let x be the length and y be the width of the original rectangle\n    # After increasing the length by 12 cm, the new length becomes x+12\n    # We know the perimeter of the new rectangle is 38 cm\n    # Perimeter of a rectangle is given by P = 2(length + width)\n    # Hence, 38 = 2(x+12 + y)\n    # Simplifying: 19 = x+12 + y ---> equation1\n    # The perimeter of the original rectangle is P_original = 2(x + y)\n    # To find P_original, we need to express x or y from equation1\n    # Let's express y in terms of x: y = 19 - x - 12\n    # Substitute y in P_original: P_original = 2(x + 19 - x - 12)\n    # P_original = 2(7) = 14\n\n    P_original = 14\n    return P_original\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n    equation3 = Eq(mina - 12, mina - 12)  # mina after giving away 12 coins\n\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    \n    bag_size = 3/4\n    number_of_bags = remaining_after_tuesday / bag_size\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of stamps Natasha has and then Jamie-Anne has x + 18 stamps\n    x = symbols('x')\n    \n    # According to the ratio information, we have the equation: 5/3 = (x + 18)/x\n    equation = Eq((x + 18) / x, 5 / 3)\n    \n    # Solve for x\n    natasha_stamps = solve(equation, x)[0]\n    \n    # Calculate the total number of stamps they have\n    total_stamps = natasha_stamps + (natasha_stamps + 18)\n    \n    return int(total_stamps)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_amount_of_flour = flour_per_student * number_of_students\n    return total_amount_of_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n    \n    # Formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page_number in range(1, 121):\n        count += str(page_number).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    time_per_lamp_post = 50 / (11 - 1)  # Time for each lamp post interval is total time divided by the number of intervals (10 in this case)\n    num_lamp_posts_in_80_seconds = 80 / time_per_lamp_post + 1  # The number of lamp posts is 1 more than the number of intervals\n    return int(num_lamp_posts_in_80_seconds)\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence_in_pound = 100\n    value_in_pence = 15\n    total_value_in_pounds = 3.00\n    total_value_in_pence = total_value_in_pounds * pence_in_pound\n    percentage = (value_in_pence / total_value_in_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # There are 6 flowers on each side of the handkerchief, and one flower at each corner\n    # However, each corner flower is shared by two sides.\n    # So for each corner, we should count it only once instead of twice\n    # Therefore, we subtract the 4 corner flowers from the total counted for the 4 sides\n    flowers_per_side = 6\n    corner_flowers = 4\n    total_flowers = (flowers_per_side * 4) - corner_flowers\n    return total_flowers\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_items be the total number of items bought \n    total_items = symbols('total_items')\n\n    # We use the information given to set up an equation\n    # 2/3 of the items are apples, 1/9 of the items are bananas\n    # The rest, which is 1 - (2/3 + 1/9) of the items are lemons\n    # Rena bought 12 more apples than lemons\n    # Formulate the equation based on these facts\n    equation = Eq((2/3 - (1 - (2/3 + 1/9))) * total_items, 12)\n\n    # Use sympy's solve function to find the total number of items\n    total_items_solution = solve(equation, total_items)\n\n    # Calculate the number of lemons using the total number of items\n    lemons = (1 - (2/3 + 1/9)) * total_items_solution[0]\n\n    return lemons\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount_percentage = (original_price - 67.50) / original_price * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Digit in the ones place is the sum of the factors of 4. The factors of 4 are 1, 2, and 4.\n    ones_digit = sum([1, 2, 4])\n\n    # Digit in the hundreds place has a value of 800, which means it is 8.\n    hundreds_digit = 8\n\n    # Digit in the thousands place is 1 more than the digit in the hundreds place.\n    thousands_digit = hundreds_digit + 1\n\n    # Digit in the tens place is the difference between the digit in the hundreds\n    # place and the digit in the ones place.\n    tens_digit = hundreds_digit - ones_digit\n\n    # The 5-digit number is between 40000 and 50000, so the first digit is 4.\n    # Concatenate the digits to form the 5-digit number.\n    ans = int(f\"4{thousands_digit}{hundreds_digit}{tens_digit}{ones_digit}\")\n\n    return ans\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction = 5 / 6\n\n    total_two_days = first_day + second_day\n    total_amount = total_two_days / fraction\n\n    return int(total_amount)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    r, s = 1, 1  # Initialize r and s to 1\n    while True:\n        if 3/10 < r/s < 5/16:\n            return s\n        s += 1\n        r = int((3/10) * s)\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    total_minutes = 12\n    pancakes_per_minute = pancakes_per_3_minutes / 3\n    total_pancakes = pancakes_per_minute * total_minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Maximum capacity of the bus in terms of children\n    max_children_capacity = 40\n    # Number of children already on the bus\n    children_on_bus = 15\n    # Remaining capacity for children\n    remaining_children_capacity = max_children_capacity - children_on_bus\n    # Conversion factor from children to adults\n    conversion_factor = 24 / 40\n    # Maximum number of adults that can be on the bus\n    max_adults = remaining_children_capacity * conversion_factor\n    # Since we cannot have a fraction of an adult, we take the floor value\n    return int(max_adults)\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    inner_value = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner_value)\n    return ans\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Find the smallest number that can be multiplied by 28 to get a perfect square\n    # We need to make the prime factorization of 28 and ensure that all primes have an even power\n    # 28 = 2^2 * 7^1. For a perfect square, we need to multiply 28 by 7 to get 2^2 * 7^2,\n    # which is a perfect square (196 in this case).\n    \n    num = 28\n    factor = 28\n\n    # The greatest common divisor of the number and its factor should be 1 for it to be the smallest number.\n    while gcd(num, factor) != 1:\n        factor //= gcd(num, factor)\n\n    ans = factor\n    return ans\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell = symbols('russell')\n    equation = Eq(russell + 32, 4 * (russell - 16))\n    solution = solve(equation, russell)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from fractions import Fraction\n\n    # Let remaining_salary be the remaining salary after buying DVD\n    remaining_salary = 740 / (1 - Fraction(3, 4))\n\n    # total_salary is the total salary, which is the remaining_salary plus the cost of DVD\n    total_salary = remaining_salary + 740\n\n    # Since he had 1/5 of his salary left, we can equate and solve for total_salary\n    total_salary *= 5\n    \n    return total_salary\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 120 * 0.40\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    distance = abs(19 - 6)\n    half_people = distance - 1\n    total_people = half_people * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pips_number = int(f\"{A}{B}{C}{A}\")\n                buds_number = int(f\"{A}{C}{B}{A}\")\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, resulting in 2 pieces\n    # To make 5 pieces, we need 4 cuts\n    num_cuts = 5 - 1\n    minutes_per_cut = 2\n    total_minutes = num_cuts * minutes_per_cut\n\n    return total_minutes\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n    num_shelves = 15\n    \n    # Calculate the number of shelves that have spelling books\n    num_shelves_spelling = total_spelling_books // spelling_books_per_shelf\n    \n    # Calculate the number of shelves that have math books\n    num_shelves_math = num_shelves - num_shelves_spelling\n    \n    # Since each shelf with math books contains 4 math books\n    num_math_books = num_shelves_math * 4\n    \n    return num_math_books\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the initial number of students in 6A and 6B\n    students_6A_initial, students_6B_initial = symbols('students_6A_initial students_6B_initial')\n\n    # Equation representing the initial ratio of students\n    equation1 = Eq(students_6A_initial, 4/9 * students_6B_initial)\n\n    # Equation representing the new number of students after the reshuffle\n    equation2 = Eq(students_6A_initial - 3 + 18, students_6B_initial + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (students_6A_initial, students_6B_initial))\n\n    return solutions[students_6A_initial]\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    original_biscuits = 100\n    original_chocolate = 40\n    available_biscuits = 75\n    \n    required_chocolate = (available_biscuits * original_chocolate) / original_biscuits\n\n    return required_chocolate\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    num_days_in_week = 7\n    total_weekly_earnings = average_daily_earnings * num_days_in_week\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Floors covered by Jeffrey from the first to fourth floor\n    floors_covered_initially = 4 - 1 # 3 floors in total\n    time_taken_initially = 6  # Given 6 minutes to cover 3 floors\n    \n    # Now to find out the time to cover from first to tenth floor\n    floors_covered_later = 10 - 1 # 9 floors in total\n    # Calculate time taken proportionally\n    time_taken_later = (time_taken_initially / floors_covered_initially) * floors_covered_later\n    \n    return time_taken_later\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna = 15\n    harry = luna - 3\n    return harry\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if 32 / n == n / 2:\n            return n\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n    return combinations\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, the 8th student is directly opposite to the 16th student, so there are 16-8=8\n    # students between them, meaning the circle consists of 8*2=16 students in total.\n\n    first_game_students = 16\n\n    # In the second game, the 8th student is directly opposite to the 22nd student, so there are 22-8=14\n    # students between them, meaning the circle now consists of 14*2=28 students in total.\n\n    second_game_students = 28\n\n    # The number of new students who joined the second game is the difference between the total\n    # number of students in the second game and the first game.\n\n    new_students = second_game_students - first_game_students\n\n    return new_students\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    # Total students\n    total_students = 35\n    # Number of uniform sizes\n    num_sizes = 3\n    # Applying the Pigeonhole Principle\n    # At least one size must have at least ceil(total_students / num_sizes) students.\n    min_students_same_size = (total_students + num_sizes - 1) // num_sizes\n    return min_students_same_size\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance1 = 280  # meters\n    distance2 = 400  # meters\n    distance3 = 800 - (distance1 + distance2)  # meters\n\n    speed1 = 7  # meters per second\n    speed2 = 5  # meters per second\n    speed3 = 8  # meters per second\n\n    time1 = distance1 / speed1  # time for the first part\n    time2 = distance2 / speed2  # time for the middle part\n    time3 = distance3 / speed3  # time for the sprint stage\n\n    total_time = time1 + time2 + time3  # total time\n\n    return total_time\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy_initial, charlene = symbols('anna betsy_initial charlene')\n\n    betsy_final = betsy_initial + 15 - 8\n    anna_final = anna - 8\n    charlene_final = charlene - 15\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(anna_final + betsy_final + charlene_final, 168)  # total marbles\n    equation2 = Eq(anna_final, 2)  # ratio of Anna's marbles to x\n    equation3 = Eq(betsy_final, 5)  # ratio of Betsy's marbles to x\n    equation4 = Eq(charlene_final, 7)  # ratio of Charlene's marbles to x\n\n    # solve the system of equations for the initial amounts\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy_initial, charlene))\n\n    return solutions[betsy_initial]\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 269):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    total_cards = yellow_cards + red_cards + green_cards\n    \n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    \n    return ways\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    # gcd function from the math library to find the greatest common divisor.\n    from math import gcd\n    \n    # The dimensions of the paper\n    width = 136  # converted to a common unit, like centimeters\n    height = 80  # likewise converted to centimeters\n    \n    # Find the size of the largest possible square\n    square_side = gcd(width, height)\n    \n    # Calculate the number of such squares that can be cut from the paper\n    num_squares = (width // square_side) * (height // square_side)\n    \n    return num_squares\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    # Using the sympy library for solving the equations\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for lollipops and gum drops before adding 120 pieces of each\n    before_lollipops, before_gum_drops = symbols('before_lollipops before_gum_drops')\n    \n    # Equation 1: The initial ratio of lollipops to gum drops is 5 to 7\n    equation1 = Eq(before_lollipops / before_gum_drops, 5/7)\n    \n    # Equation 2: After adding 120 lollipops and gum drops, the ratio of lollipops to gum drops is 4 to 5\n    equation2 = Eq((before_lollipops + 120) / (before_gum_drops + 120), 4/5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (before_lollipops, before_gum_drops))\n    \n    # Calculate the total number of pieces of candy after adding 120 pieces of each kind\n    total_candy_now = solutions[before_lollipops] + 120 + solutions[before_gum_drops] + 120\n    \n    return total_candy_now\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    options = [4, 5, 7]  # allowed digits\n    count = 0\n    \n    # Generate all possible permutations of three digits\n    for i in options:  # 1st digit in the three-digit number\n        for j in options:  # 2nd digit in the three-digit number\n            for k in options:  # 3rd digit in the three-digit number\n                num = (i * 100) + (j * 10) + k  # Construct the number\n                if num % 2 != 0:  # Check if the number is odd\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    numbers_less_than = 201\n    divisible_by_5 = (numbers_less_than - 1) // 5\n    divisible_by_7 = (numbers_less_than - 1) // 7\n    divisible_by_5_and_7 = (numbers_less_than - 1) // (5 * 7)\n\n    # Using Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's purchases: 1 durian, 2 pineapples, 3 watermelons = $440\n    equation1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n\n    # Dylan's purchases: 4 durians, 6 pineapples, 9 watermelons = $1625\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    teams = symbols('teams')\n    # In a round-robin tournament, each team plays each other team twice\n    # Total matches = n * (n-1), where n is the number of teams\n    # Since each match is counted twice, once for each team, we divide it by 2\n    equation = Eq(teams * (teams - 1), 30 * 2)\n\n    solutions = solve(equation, teams)\n\n    # We need to find the positive solution since number of teams cannot be negative\n    ans = max(solutions)\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(100, 1000):\n        if i - int(str(i)[:-1]) == 135:\n            return i\n            \nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    expr = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    ans = expr\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    trips_one_way = (students // boat_capacity) + (1 if students % boat_capacity else 0)\n    trips_back = trips_one_way - 1  # The last trip doesn't require a return\n\n    ans = trips_one_way + trips_back\n    return ans\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    ans = hundreds * 100 + tens * 10 + ones\n\n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    both_subjects = 75\n    only_a = 0.8\n    only_b = 0.35\n    neither = 0.1\n    total_percentage = (only_a + only_b - neither)  # Percentage of students choosing both A and B but not neither\n    total_students = both_subjects / (only_a + only_b - total_percentage)  # Percentage includes both A & B, but subtract neither\n    return int(total_students)\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) / (factorial(99) + factorial(98))\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(frank - alex, alex - paul)\n    eq2 = Eq(frank + alex + paul, 99)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (frank, alex, paul))\n\n    # Return the age of Alex\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    permutations_list = list(permutations([1, 4, 6, 9]))\n    sum_of_numbers = sum(int(''.join(map(str, perm))) for perm in permutations_list)\n    average = sum_of_numbers / len(permutations_list)\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # At first there was an equal number of boys and girls\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, there were twice as many girls as boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom sympy import divisors\n\ndef solution():\n    total_numbers = set(range(1, 14))\n    all_combinations = list(combinations(total_numbers, 9))\n\n    for combination in all_combinations:\n        two_with_def_factors = [num for num in combination if len(divisors(num)) != 4]\n        if len(two_with_def_factors) == 2:\n            # Alice sees an odd number higher than the one with two definite factors\n            alice_options = [num for num in combination if num % 2 == 1 and num > max(two_with_def_factors)]\n            if alice_options:\n                for alice_number in alice_options:\n                    may_number = alice_number - 2\n                    if may_number in combination and may_number > min(two_with_def_factors):\n                        # Mark's number is one less than May's\n                        mark_number = may_number - 1\n                        if mark_number in combination and mark_number < may_number:\n                            # Get missing numbers and calculate product\n                            unused_numbers = total_numbers - set(combination)\n                            product = 1\n                            for num in unused_numbers:\n                                product *= num\n                            return product\n    return None\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit_tens in range(10):\n        for digit_ones in range(10):\n            if digit_tens != digit_ones and digit_tens + digit_ones == 15:\n                # The hundreds place is 9, which is the greatest 1-digit number\n                # And check if the number is even\n                if digit_ones % 2 == 0:\n                    # Construct the number\n                    return 900 + digit_tens * 10 + digit_ones\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = 5 # 4 hats plus the option of not wearing any\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    return hats * shirts * pants * skirt\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A speed\n    printer_a_speed = 300 / 12  # pages per minute\n    # Printer B speed\n    printer_b_speed = 300 / 10  # pages per minute\n\n    # Both printer speeds combined\n    combined_speed = printer_a_speed + printer_b_speed\n\n    # Half an hour in minutes\n    half_hour_in_minutes = 30  # minutes\n    \n    # Number of pages printed by both printers in half an hour\n    pages_printed = combined_speed * half_hour_in_minutes\n    \n    return int(pages_printed)\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    # Speed of the van (km/h)\n    speed_van = 80\n    # Speed of the car (km/h)\n    speed_car = 120\n    \n    # Time after which the car starts (hours)\n    car_delay = 3\n    \n    # Distance traveled by the van in 3 hours before the car starts.\n    distance_before_car_starts = speed_van * car_delay\n    \n    # Relative speed between the two vehicles (km/h)\n    relative_speed = speed_car - speed_van\n    \n    # Time taken for the car to catch up with the van (hours)\n    catch_up_time = distance_before_car_starts / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Convert recurring decimals to fractions\n    x = symbols('x')\n    eq = x - 0.01 - (0.01 / 100) - (0.01 / 10000) - (0.01 / 1000000)\n    equation = solve(eq, x)\n\n    # The recurring cycle of the fraction 1/99 * 1/99 will be the same as that of 1/99\n    numerator = 1\n    denominator = equation[0].as_numer_denom()[1]**2\n    \n    # The length of the repetend of a fraction 1/n is equal to the smallest k such that 10^k = 1 (mod n)\n    # If n is coprime to 10\n    k = 1\n    while (10**k - 1) % denominator != 0:\n        k += 1\n    \n    return k\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    equation1 = Eq((2 / 3) * total_items - ((1 - (2 / 3) - (1 / 9)) * total_items), 12)\n\n    solutions = solve(equation1, total_items)\n\n    lemons = (1 - (2 / 3) - (1 / 9)) * solutions[0]\n\n    return int(lemons)\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count_of_3 = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if day is valid for the month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n            date_str = f'{day:02d}/{month:02d}/2019'\n            count_of_3 += date_str.count('3')\n    return count_of_3\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # There will be only 8 small cubes with exactly three faces painted\n    # These cubes are the corner cubes of the cuboid.\n    # Since the cuboid is cut into equal-sized small cubes, and the lengths are\n    # multiples of the number of small cubes cut from each side, there will be only\n    # one small cube at each corner with three painted faces.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # Let the number of durian, chocolate, and strawberry puffs sold be\n    # d, c, and s respectively.\n    # According to the ratio given, we can write the following relations:\n    # d / 3 = c / 4 = s / 2\n    \n    # Let k be the common ratio factor\n    # d = 3k, c = 4k, s = 2k\n    \n    # The total amount collected can be expressed as follows:\n    # Total = 5 * d + 3 * c + 4 * s\n    # 560 = 5 * (3k) + 3 * (4k) + 4 * (2k)\n    # 560 = 15k + 12k + 8k\n    # 560 = 35k\n    # k = 560 / 35\n    \n    # Find the common ratio factor k\n    k = 560 / 35\n    \n    # The amount collected from the sale of durian puffs\n    # Amount_d = 5 * d = 5 * (3k)\n    amount_d = 5 * (3 * k)\n    \n    return amount_d\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the digits of the original number to be x (tens digit) and y (ones digit)\n    x, y = symbols('x y', integer=True)\n    \n    # Create the original number and the swapped number\n    original_number = 10*x + y\n    swapped_number = 10*y + x\n    \n    # Create the equation based on the given relationship\n    equation = Eq(swapped_number, original_number/3 + 3)\n    \n    # Since x and y are digits, they must be between 1 and 9 (inclusive)\n    solutions = solve((equation, (x > 0, x < 10), (y > 0, y < 10)), (x, y))\n    \n    # Return the original number using the solution for x and y\n    for sol in solutions:\n        if sol[0] > 0 and sol[0] < 10 and sol[1] > 0 and sol[1] < 10:\n            ans = 10 * sol[0] + sol[1]\n            return ans\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_three_years = 0.06\n    rate_last_two_years = 0.08\n\n    amount_after_three_years = principal * (1 + rate_first_three_years) ** 3\n    final_amount = amount_after_three_years * (1 + rate_last_two_years) ** 2\n\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n\n    # equation1: cost of donut and raisin_roll\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    # equation2: one raisin_roll costs three times a donut\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n    \n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n\n    # Find the Greatest Common Divisor (GCD) among the numbers of students\n    gcd_12 = gcd(students_school_1, students_school_2)\n    greatest_common_divisor = gcd(gcd_12, students_school_3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person and their levels\n    A, B, C, D = symbols('A B C D', integer=True, positive=True)\n    Zachary, Yvonne, Xavier, Waylon = symbols('Zachary Yvonne Xavier Waylon', integer=True, positive=True)\n\n    # Define the domain of the levels\n    domain = tuple(range(1, 19))\n\n    # Define the constraints\n    constraints = []\n    constraints.append(Eq(D, 5 * Yvonne))  # D is 5 times the level of Yvonne's (3rd point)\n    constraints.append(Eq(Zachary, Yvonne + Xavier))  # Zachary's level is the sum of Yvonne and Xavier's (5th point)\n    constraints.append(Eq(Zachary + 2 - Xavier, Zachary - Waylon))  # Zachary moving up two levels' condition (4th point)\n\n    # Iterate through all possible combinations\n    for zachary_level in domain:\n        for yvonne_level in domain:\n            for xavier_level in domain:\n                for waylon_level in domain:\n                    # Convert levels into A, B, C, D variables based on conditions\n                    a_level, b_level, c_level, d_level = sorted([zachary_level, yvonne_level, xavier_level, waylon_level])\n                    # Check if levels satisfy A, C, D conditions (1st point)\n                    if a_level > c_level and a_level < d_level:\n                        # B is lower than Xavier (2nd point)\n                        if b_level < xavier_level:\n                            # Solve the system of equations with additional constraints\n                            res = solve(constraints + [Eq(A, a_level), Eq(B, b_level), Eq(C, c_level), Eq(D, d_level), Eq(Zachary, zachary_level), Eq(Yvonne, yvonne_level), Eq(Xavier, xavier_level), Eq(Waylon, waylon_level)], (A, B, C, D, Zachary, Yvonne, Xavier, Waylon))\n                            if res:\n                                # Return the level where A stays\n                                return res[A]\n    return None\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # The sum of an arithmetic sequence can be given by the formula:\n    # Sum(n) = n/2 * (2a + (n - 1)d), where n is the number of terms, \n    # a is the first term, and d is the common difference.\n\n    from sympy import symbols, Eq, solve\n\n    # Let's denote a as the first term and d as the common difference.\n    a, d = symbols('a d')\n\n    # Write down the equations for the sums of the first 9 and 27 terms.\n    sum_9 = Eq(9/2 * (2*a + (9 - 1)*d), 99)\n    sum_27 = Eq(27/2 * (2*a + (27 - 1)*d), 540)\n\n    # Solve the system of equations to find a and d.\n    solutions = solve((sum_9, sum_27), (a, d))\n\n    # Use the values of a and d to calculate the sum of the first 16 terms.\n    sum_16 = 16/2 * (2*solutions[a] + (16 - 1)*solutions[d])\n\n    return sum_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # 100's digit cannot be 0\n        for tens in range(1, 10):  # 10's digit cannot be 0\n            for units in range(1, 10):  # Unit's digit cannot be 0\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # since the last number to be written is 12\n    half_total = total_numbers / 2\n\n    sum_of_numbers_upto_previous = 0\n    current_number_count = 0\n    for i in range(1, 13):\n        numbers_upto_current = sum_of_numbers_upto_previous + i * i\n        if numbers_upto_current >= half_total:\n            current_number_count = i\n            break\n        sum_of_numbers_upto_previous = numbers_upto_current\n\n    median = current_number_count\n    return median\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    total_teachers = 139\n    total_children = total_people - total_teachers\n\n    return total_children\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    # Create a list of the digits we will be using to form numbers\n    digits = ['4', '5', '8']\n    # Use permutations from itertools to find all possible combinations\n    # without repeating digits\n    permuts = list(permutations(digits))\n    # The number of different numbers formed is the length of the list of permutations\n    count = len(permuts)\n    return count\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for i in range(7, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.4 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    french_landscapes = 25\n    total_french = 40\n\n    non_french_still_lifes = still_lifes - (total_french - french_landscapes)\n\n    return non_french_still_lifes\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage: Each team in a group plays every other team one time.\n    # 4 teams in a group, C(4, 2) combination of matches for each group.\n    group_games_per_group = (4 * 3) // 2\n    \n    # There are 8 groups, so:\n    group_stage_games = 8 * group_games_per_group\n    \n    # Knockout stage: Round of 16, Quarter-finals, Semi-finals, Third place play-off, Final\n    round_of_16 = 8  # 8 matches, two teams each\n    quarter_finals = 4  # 4 matches\n    semi_finals = 2  # 2 matches\n    third_place_final = 1  # 1 match for third and fourth place\n    finals = 1  # 1 match for winner and runner-up\n    \n    # Total games in knockout stage\n    knockout_stage_games = round_of_16 + quarter_finals + semi_finals + third_place_final + finals\n    \n    # Total games throughout the World Cup\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number we are looking for.\n    # According to the problem, if we triple it and add 1, we get 22.\n    # So, the equation is: 3x + 1 = 22\n    # Now, we perform the inverse operations to solve for x.\n    \n    # Subtract 1 from both sides of the equation:\n    # 3x + 1 - 1 = 22 - 1\n    # 3x = 21\n    \n    # Divide both sides by 3:\n    # 3x / 3 = 21 / 3\n    # x = 7\n    \n    # The number is 7\n    return 7\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink\n    max_volume_per_glass = total_volume // 9  # Greatest volume that can be poured into each glass equally\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Red light flashes every 15 seconds (60 seconds / 4 flashes per minute)\n    red_flash_interval = 60 / 4\n    # Green light flashes every 10 seconds (60 seconds / 6 flashes per minute)\n    green_flash_interval = 60 / 6\n    \n    # Least common multiple (LCM) of both intervals to find the interval for simultaneous flashes\n    lcm = (red_flash_interval * green_flash_interval) / math.gcd(int(red_flash_interval), int(green_flash_interval))\n    \n    # Total seconds in an hour\n    total_seconds_in_hour = 60 * 60\n    \n    # Number of times they flash together in one hour\n    flashes_together = total_seconds_in_hour / lcm\n    \n    # Include the first and the last time\n    ans = int(flashes_together) + 1\n    return ans\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_s = 300\n    time_min = time_s / 60\n\n    distance_meters = speed_m_per_min * time_min\n\n    return distance_meters\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    \n    rice_in_first_mixture = 100 * 0.50\n    rice_in_second_mixture = 400 * 0.80\n    \n    total_rice = rice_in_first_mixture + rice_in_second_mixture\n    \n    concentration_of_rice = total_rice / total_weight\n    \n    return concentration_of_rice\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = total_sum % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        num_str = str(i)\n        new_num_str = num_str[1:] + num_str[0]\n        new_num = int(new_num_str)\n        if new_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n    years_later = (target_sum_age - (oliver_current_age + lin_current_age)) // 2\n    return years_later\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # number of horses originally\n    horses_initial = 12\n\n    # number of days the hay lasts for 12 horses\n    days_initial = 15\n\n    # number of horses to feed now\n    horses_now = 20\n\n    # Calculate the total amount of hay required for 12 horses for 15 days\n    total_hay = horses_initial * days_initial\n\n    # Using unitary method, calculate the number of days the same pile of hay\n    # would feed 20 horses\n    days_now = total_hay / horses_now\n\n    return days_now\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_in_ages_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_in_ages_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    n = symbols('n', integer=True)\n    eq = Eq(n * 35, int(str(n) + '35'))\n    possible_ns = solve(eq, n)\n    for possible_n in possible_ns:\n        if possible_n > 0 and sum(map(int, str(possible_n * 35))) == 35:\n            return possible_n * 35\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    regular_years = 99 - 25  # Since 1901-2000 is 99 years and every 4th year is a leap year\n    leap_years = 25   # From 1904 to 2000, thus 25 leap years (1904, 1908, ..., 2000)\n    days_regular_years = regular_years * 365\n    days_leap_years = leap_years * 366\n    total_days = days_regular_years + days_leap_years\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n\n    deposit_days = (days + 1) // 2\n    spend_days = days // 2\n\n    total_deposits = deposit_amount * deposit_days\n    total_spent = spend_amount * spend_days\n\n    final_amount = initial_amount + total_deposits - total_spent\n\n    return final_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3 * 7)\n\n    numbers_not_divisible = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n    \n    return numbers_not_divisible\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    \n    total_money = 8 * y\n    money_spent_on_watch = 4 * y\n    money_spent_on_bag = 20\n    money_per_child = y - 5\n    \n    equation = Eq(total_money, money_spent_on_watch + money_spent_on_bag + 2 * money_per_child)\n    \n    solution = solve(equation, y)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12  # number of terms (hours)\n    a1 = 1  # first term\n    an = n  # last term\n    s_n = n * (a1 + an) // 2  # sum of terms in the arithmetic sequence\n    return s_n\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    pence_per_coin = 10  # value of one ten-pence coin in pence\n\n    num_coins = total_value / pence_per_coin  # number of ten-pence coins\n    total_weight = weight_per_coin * num_coins  # total weight in grams\n\n    return total_weight\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruits\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let's denote the number of buttons James has as J and Nina has as N.\n    # According to the problem, we have two equations:\n    # J + N = 22          (1) (Total number of buttons)\n    # N - 4 = J + 4       (2) (After Nina gives James 4 buttons, they have the same amount)\n    \n    # We can rearrange equation (2) to find N in terms of J:\n    # N = J + 8\n    \n    # Now we substitute N from equation (2) into equation (1):\n    # J + (J + 8) = 22\n    # 2J + 8 = 22\n    # 2J = 22 - 8\n    # 2J = 14\n    # J = 7\n    \n    # Now we can find N using J = 7 and equation (2):\n    # N = J + 8 = 7 + 8\n    # N = 15\n    \n    # Nina originally has 15 buttons.\n    return 15\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    # Let x be the number of correct answers.\n    # Then (6 - x) will be the number of wrong answers.\n    # The total score is the sum of 5 times the correct answers\n    # minus 2 times the wrong answers (since 2 marks are deducted for each wrong answer).\n    # So, the total score is represented by the equation: 5x - 2(6 - x) = 23\n    \n    for x in range(7): # As there can't be more than 6 correct answers\n        if 5 * x - 2 * (6 - x) == 23:\n            return x\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    # Total number of people on the bus\n    total_people = 20\n    # Ratio of adults to children\n    adult_ratio = 1\n    child_ratio = 4\n    # Calculate the number of adults based on the ratio\n    adults = (total_people * adult_ratio) / (adult_ratio + child_ratio)\n    return int(adults)\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    \n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    start_seat = 3\n    num_children = 9\n\n    # The position of the last candy is determined by the remainder of\n    # (total_candies - 1) when dividing by num_children, because we start from seat 3,\n    # we need to adjust this position by adding the start_seat and then subtracting 1.\n    # If the seat number exceeds num_children, it wraps around, hence we take modulus with num_children again.\n    last_candy_seat = ((total_candies - 1) + start_seat - 1) % num_children + 1\n\n    return last_candy_seat\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_velocity = 10  # m/s (initial speed)\n    angle_degrees = 37     # degrees (angle of the incline)\n    g = 9.81               # m/s^2 (acceleration due to gravity)\n\n    # Convert angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Calculate the final height using conservation of energy (initial kinetic energy = potential energy at the top)\n    # Initial kinetic energy: (1/2) * m * v^2, Potential energy at the top: m * g * h \n    # m * g * h = (1/2) * m * v^2 => h = v^2 / (2 * g)\n    # But we need to consider only the component of gravity acting along the ramp,\n    # which is g * cos(angle). Therefore, we use g * cos(angle) instead of g.\n    height = (initial_velocity ** 2) * (math.sin(angle_radians) ** 2) / (2 * g)\n\n    # Calculate the distance along the ramp using the relationship between the height and the length of the ramp\n    # sin(angle) = height / distance => distance = height / sin(angle)\n    distance = height / math.sin(angle_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_in_match = 4\n    \n    matches = 0\n    while total_players > 1:\n        matches += total_players // players_in_match\n        total_players = total_players // players_in_match\n        \n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    result = 782 - 9 * 24 // 2\n    return result\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        shifted = original[1:] + original[0]\n        if int(shifted) - i == 4707:\n            return i\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n    # To get 2 groups of 4 balls of the same color, Sheila must take out all balls of two colors\n    # plus one more ball which will be the same color as one group of 4 balls she already has.\n\n    # If she takes all orange and yellow balls, she will have 4 + 2 = 6 balls.\n    # She then needs all blue balls and 1 more to get 2 groups of 4. \n    # So the total is 5 (all blue) + 6 (all orange and yellow) + 1 extra ball = 12.\n    return blue_balls + orange_balls + yellow_balls + 1  \n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of CDs Richard can buy in St Petersburg.\n    x = symbols('x')\n\n    # The cost of one CD in England.\n    cost_in_england = 14\n\n    # The amount spent by Richard is equal to the cost of x CDs.\n    # In St Petersburg, the cost could be different, but we are not provided the cost per CD there.\n    # So, we assume that the cost in St Petersburg is the same as in England for the purpose of this solution.\n\n    # The equation representing the amount spent by Richard.\n    # Since no conversion rates or additional costs are provided, we assume a direct 1:1 exchange.\n    equation = Eq(cost_in_england * x, cost_in_england)\n\n    # Solve the equation to find the number of CDs.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart needs to make sure he gets at least 2 different colors\n    # In the worst case, he takes all chips of one color first\n    # 1. Takes all 3 red chips\n    # If he takes 1 more, he is guaranteed to have a different color (yellow or brown)\n    # Therefore, he needs to take out 3 (all red) + 1 = 4 chips to be sure\n\n    return 4\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    # Check each option given in the question\n    options = [28, 39, 52, 84]\n    for age in options:\n        # \"3 years ago, my age was a square number.\"\n        age_minus_3 = (age - 3)\n        # Check if age_minus_3 is a perfect square\n        if int(age_minus_3**0.5)**2 == age_minus_3:\n            # \"Next year it will be a prime number.\"\n            age_plus_1 = age + 1\n            if isprime(age_plus_1):\n                # \"In 12 years' time, it will be a cube number.\"\n                age_plus_12 = age + 12\n                # Check if age_plus_12 is a perfect cube\n                if round(age_plus_12**(1/3))**3 == age_plus_12:\n                    return age\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Assuming all three start from level 1 simultaneously and they climb continuously.\n\n    # When Andrew is at level 5, Bernice is at level 3.\n    # The ratio of their speeds (Andrew:Bernice) is 5:3.\n    speed_ratio_andrew_bernice = 5 / 3\n\n    # When Bernice is at level 6, Cassandra is at level 10.\n    # The ratio of their speeds (Bernice:Cassandra) is 6:10 or 3:5.\n    speed_ratio_bernice_cassandra = 3 / 5\n\n    # Now, we need to find out the level Andrew is at when Cassandra reaches level 19.\n\n    # First, calculate the speed ratio of Andrew to Cassandra.\n    # Combine Andrew:Bernice and Bernice:Cassandra ratios to find Andrew:Cassandra ratio.\n    speed_ratio_andrew_cassandra = speed_ratio_andrew_bernice * speed_ratio_bernice_cassandra\n    # Andrew:Cassandra ratio is (5/3) * (3/5) = 5/5 = 1/1, meaning they climb at the same speed.\n\n    # Since Andrew and Cassandra climb at the same speed, when Cassandra is at level 19,\n    # Andrew will also be at level 19.\n    \n    return 19\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def vee_operation(a, b):\n        return a * b + a + b\n\n    # we know that 2 vee (x vee 4) equals 59\n    # Let's first express x vee 4\n    x = symbols('x')\n    expression = vee_operation(2, vee_operation(x, 4))\n    \n    # Now we solve the equation 2 vee (x vee 4) = 59\n    equation = Eq(expression, 59)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    length_of_pattern = len(pattern)\n    total_length = 43\n    complete_patterns = total_length // length_of_pattern\n    remaining_digits = total_length % length_of_pattern\n\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    sum_of_complete_patterns = sum_of_pattern * complete_patterns\n    sum_of_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_of_complete_patterns + sum_of_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    quizzes = 4\n    total_time_minutes = time_per_quiz * quizzes\n    total_time_hours = total_time_minutes / 60  # Convert minutes to hours\n    return total_time_hours\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Since the sum of the arithmetic sequence is Sn = n/2 * (a1 + an), \n    # where n is the number of terms, a1 is the first term, and an is the nth term,\n    # we can set up two equations based on the sum of the first 9 and first 23 terms:\n\n    # We know that S9 = 72 and S23 = 736\n    # Let's denote a as the first term and d as the common difference\n\n    # Equation for the sum of the first 9 terms: S9 = 9/2 * (2a + 8d) = 72\n    # Equation for the sum of the first 23 terms: S23 = 23/2 * (2a + 22d) = 736\n\n    # Now we have two equations with two variables, a and d\n    # 9/2 * (2a + 8d) = 72\n    # 23/2 * (2a + 22d) = 736\n\n    # Multiplying both sides of each equation by 2 to clear fractions:\n    # (1): 9 * (2a + 8d) = 144\n    # (2): 23 * (2a + 22d) = 1472\n\n    # Now solve for a and d\n\n    # From equation (1) we can express a in terms of d:\n    # 18a + 72d = 144\n    # 18a = 144 - 72d\n    # a = 8 - 4d\n\n    # Substitute a into equation (2) expressed in terms of d:\n    # 46a + 506d = 1472\n    # 46(8 - 4d) + 506d = 1472\n    # 368 - 184d + 506d = 1472\n    # 322d = 1104\n    # d = 1104 / 322\n\n    # Solve for a with the given value of d\n    d = 1104 / 322\n    a = 8 - 4 * d\n\n    # Finally, find the sum of the first 16 terms using the found values of a and d:\n    # S16 = 16/2 * (2a + 15d)\n    S16 = (16 / 2) * (2 * a + 15 * d)\n\n    return S16\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 100000  # 1 kilometer is 100000 centimeters\n    ans = 4.7 * km_to_cm\n    return ans\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n\n    years = 0\n    while sum(grandson_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n\n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for cost of chair and table\n    cost_chair, cost_table = symbols('cost_chair cost_table')\n\n    # Equation for the total cost\n    equation_total_cost = Eq(4 * cost_table + 9 * cost_chair, 504)\n\n    # Equation representing the cost relation between table and chair\n    equation_cost_relation = Eq(cost_table, 3 * cost_chair)\n\n    # Solving the system of equations\n    solutions = solve((equation_total_cost, equation_cost_relation), (cost_chair, cost_table))\n\n    return solutions[cost_chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    total_amount = 40\n    count = 0\n    for five_p_count in range(0, total_amount // 5 + 1):\n        for ten_p_count in range(0, total_amount // 10 + 1):\n            if 5 * five_p_count + 10 * ten_p_count == total_amount:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        digits_product = 1\n        for digit in str(i):\n            digits_product *= int(digit)\n        if 100 <= digits_product <= 999:\n            return i\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Speeds of Shafur and Samuel in km/hr\n    speed_shafur = 54\n    speed_samuel = 66\n    \n    # Time driven before Samuel turns back in hours (40 minutes is 2/3 of an hour)\n    time_before_turning_back = 40 / 60\n    \n    # Distance driven by both before Samuel turns back\n    distance_driven = speed_samuel * time_before_turning_back\n    \n    # Distance Samuel needs to catch up with Shafur after turning back\n    # Since they reach at the same time and Samuel drives faster, Samuel travels an additional\n    # distance equal to the distance driven before turning back to catch up with Shafur.\n    catch_up_distance = distance_driven\n    \n    # Time taken by Samuel to catch up (catch up distance = distance driven by Samuel - distance driven by Shafur)\n    time_to_catch_up = catch_up_distance / (speed_samuel - speed_shafur)\n    \n    # Total time taken by Samuel to reach Town Y\n    total_time_samuel = time_before_turning_back + time_to_catch_up\n    \n    # Calculate the distance between Town X and Town Y using Samuel's total time and speed\n    distance_X_Y = total_time_samuel * speed_samuel\n    \n    return distance_X_Y\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        term += difference\n        num_terms += 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    vases_needed = -(-flowers // vase_capacity)  # Ceiling division\n\n    return vases_needed\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Calculate each part of the expression step by step\n    part1 = (7 / -3.3333333333333333) / (-0.027 ** (1/3))\n    part2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    part3 = (0.1 / 0.142857) + (2 * 0.3)\n    \n    # Combine the parts to get the answer\n    ans = part1 + part2 - part3\n    \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3\n    last_multiple = 81 // 3 * 3\n    \n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Sum of the first sequence from 3 to 10\n    sum_first_half = sum(range(3, 11))\n    \n    # Sum of the second sequence from 10 to 3\n    sum_second_half = sum(range(3, 11))\n    \n    # Subtract the repeated number 10 since the second half should start from 9\n    sum_second_half -= 10\n    \n    # Calculate the total sum\n    total_sum = sum_first_half + sum_second_half\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    pip_left = pip - 0.8 * pip\n    bud_left = bud - 0.75 * bud\n\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq(pip_left / bud_left, 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones_after_feb = 78\n    remaining_phones_after_jan = (remaining_phones_after_feb - 13) * 2\n    initial_phones = (remaining_phones_after_jan + 22) * 2\n    \n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (base_number * 5) / 6\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    # Let x be the number of pencils\n    # Then x + 50 is the number of pens\n    # According to the problem, x + (x + 50) = 438\n    x = (438 - 50) / 2\n    return int(x)\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    apples_in_boxes = 5 * 9\n    apples_from_bud = 16\n    total_apples = apples_in_boxes + apples_from_bud\n    return total_apples\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player until a winner is determined.\n    # Since there are 5 people and only one winner, 4 people must be eliminated.\n    # One player is eliminated in each game, so the number of games is equal to the number of players eliminated.\n    # Therefore, 4 games will be played.\n    \n    num_players = 5\n    num_eliminated = num_players - 1\n    \n    return num_eliminated\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate the total spending for each period\n    jan_to_apr = 500 * 4  # because it's $500 per month for 4 months\n    may_to_jul = 300 * 3  # because it's $300 per month for 3 months\n    aug_to_sep = 400  # total for the two months\n    oct_to_dec = 300 * 3  # because it's $300 per month for 3 months\n\n    # Sum total spending for the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Calculate average spending per month\n    average_per_month = total_spent / 12  # there are 12 months in a year\n\n    return average_per_month\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, the number of games played is always one less than the number of players,\n    # because each game eliminates one player, and there should be exactly one player left in the end.\n    num_players = 5\n    num_games = num_players - 1\n\n    return num_games\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_amount_needed = 70 * 4  # She wanted to put $70 into each of the four red packets\n    short_by = 15  # Short of $15\n    amount_had = total_amount_needed - short_by  # Calculate how much she had initially\n\n    return amount_had\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z represent the final number of marbles Anna, Betsy, and Charlene have respectively\n    x, y, z = symbols('x y z')\n\n    # The final ratio of marbles is given as 2:5:7\n    equation1 = Eq(x/y, 2/5)\n    equation2 = Eq(y/z, 5/7)\n    \n    # The total number of marbles after redistribution should still be 168\n    equation3 = Eq(x + y + z, 168)\n\n    # Charlene gave 15 marbles to Betsy and Betsy gave 8 marbles to Anna\n    # We adjust their final amounts to reflect the initial amounts\n    equation4 = Eq(x - 8, y + 8 - 15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z))\n\n    # Betsy's initial number of marbles is her final count plus what Charlene gave her minus what she gave to Anna\n    initial_betsy = solutions[y] + 15 - 8\n\n    return initial_betsy\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front\n    # and the 10th shelf from the back, then there must\n    # be 7 shelves before it and 9 shelves after it.\n    # The total number of shelves is the number of shelves\n    # before the book, plus the book's shelf, plus the\n    # number of shelves after the book.\n    ans = 7 + 1 + 9\n    return ans\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris's position from the front and back gives the number of rows\n    rows = 7 + 4 - 1  # Subtracting 1 because Chris is counted in both positions\n    # Chris's position from the left and right gives the numbers of columns\n    columns = 3 + 7 - 1  # Subtracting 1 for the same reason\n    # Total students is rows multiplied by columns\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import divisors\n\ndef solution():\n    # Since 2016 = 2**5 * 3**2 * 7, we need to express it as a product of 4 numbers\n    # all of which must be less than 10, due to the children's age constraint.\n    factors = divisors(2016)\n    # Filter out factors greater than 9\n    valid_factors = [factor for factor in factors if factor < 10]\n    # Find combinations of 4 factors that multiply to 2016 without repetition \n    # and with all factors being different and under 10\n    for i in range(len(valid_factors)):\n        for j in range(i+1, len(valid_factors)):\n            for k in range(j+1, len(valid_factors)):\n                for l in range(k+1, len(valid_factors)):\n                    if valid_factors[i]*valid_factors[j]*valid_factors[k]*valid_factors[l] == 2016:\n                        # Sum the ages when correct combination is found\n                        return valid_factors[i]+valid_factors[j]+valid_factors[k]+valid_factors[l]\n    return None\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Age of the two dogs four years ago combined was 10 years\n    combined_age_4_years_ago = 10\n    \n    # Since four years have passed, we need to add 4 to each dog's age to get their current age,\n    # so we add 4 * 2 (for two dogs) to the total combined age\n    current_combined_age = combined_age_4_years_ago + 4 * 2\n    \n    # Now, we need to determine their combined age in 2 years\n    # We add 2 more years to each dog's current age\n    future_combined_age = current_combined_age + 2 * 2\n    return future_combined_age\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return int(common_difference)\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of 10p coins\n    x = symbols('x')\n\n    # Define the equation based on the problem statement\n    equation = Eq(5*(x/2) + 10*x + 20*(2*x), 1575)\n\n    # Solve the equation for x\n    num_10p_coins = solve(equation, x)\n\n    # Calculate the number of 20p coins, which is twice the number of 10p coins\n    num_20p_coins = 2 * num_10p_coins[0]\n\n    return num_20p_coins\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    remaining_grams = 60\n        \n    original_mass = remaining_grams / remaining_fraction\n\n    return original_mass\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    # each boy has as many sisters as brothers: girls = boys - 1\n    # each girl has half as many sisters as brothers: girls - 1 = 2 * (boys - girls)\n    equation1 = Eq(girls, boys - 1)\n    equation2 = Eq(girls - 1, 2 * (boys - girls))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the average speed during the first 30 minutes\n    x = symbols('x')\n\n    # distance = speed * time, and we convert minutes to hours by dividing by 60.\n    distance1 = x * (30/60)\n    distance2 = (x - 20) * (30/60)\n    distance3 = (x + 10) * (30/60)\n\n    # Create an equation where the sum of all distances equals 70 miles\n    equation = Eq(distance1 + distance2 + distance3, 70)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Given that x is a positive speed, we filter out non-positive solutions\n    solution = [s for s in solution if s > 0]\n\n    return solution[0]\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    number = 96\n    base = 6\n    new_number = ''\n    \n    while number > 0:\n        remainder = number % base\n        number = number // base\n        new_number = str(remainder) + new_number\n        \n    return int(new_number)\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6  # The pattern increases by 6 each time (11-5, 17-11, etc.)\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    total_bill = (total_cost_per_person * number_of_people)\n    total_tip = total_bill * tip_percentage\n    total_payment = total_bill + total_tip\n    note_given = 50\n\n    change_received = note_given - total_payment\n\n    return change_received\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # To ensure each child gets different numbers of apples and the one who gets the most receives the least possible,\n    # we need to distribute apples starting with the smallest amount, which is 1 apple to the first child,\n    # then increment by 1 to ensure uniqueness. We keep doing this until we have assigned apples to 4 children,\n    # and give all remaining apples to the last child and check if the distribution is still unique.\n    \n    # We start by giving 1 to the first kid, 2 to the second, and so on.\n    # the smallest number of apples we can start with are 1+2+3+4 to the first four kids respectively\n    apples_assigned = 1+2+3+4  # 10 apples assigned, smallest unique amounts\n    remaining_apples = 27 - apples_assigned\n    # now distribute remaining apples to the fifth child ensuring he gets more than the fourth child.\n    apples_for_fifth_child = remaining_apples\n\n    # The least amount the kid with the most apples (the fifth child) can get is the total assigned to them\n    least_amount_for_most_apples = apples_for_fifth_child\n    \n    return least_amount_for_most_apples\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    accumulated_distance = 0\n    day = 0\n\n    while accumulated_distance < depth:\n        day += 1\n        accumulated_distance += climb \n        if accumulated_distance >= depth:\n            break\n        accumulated_distance -= slide\n\n    return day\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6 / 7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    solutions = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            solutions.append(combo)\n    return solutions\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        # Calculate the sum of the arithmetic sequence\n        total = 5 * n * (n + 1) // 2\n        # Check for divisibility by 2013\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Strategy:\n    # To win, Jason must force Belinda to pick the 26th marble.\n    # To do that, he must ensure that after his turn, 25, 24, or 23 marbles are left.\n    # Thus, he has to leave Belinda with a number of marbles that is one more \n    # than a multiple of 4 (since the sum of two turns must be 4 marbles).\n    # Example: if there are 5 marbles, Belinda picks 1-3, and Jason can always\n    # take the rest, leaving Belinda with the last marble.\n    # If Jason wants to win, he needs to take an amount such that the remaining\n    # marble count is a multiple of 4 (4n + 1) after Belinda's turn.\n    # Te find the first move:\n    # 26 (initial marbles) - x (Jason's move) = 4n + 1 (Belinda's perfect situation)\n    # To avoid that, Jason should take enough marbles to leave 4n form after his turn.\n\n    marbles = 26\n    \n    # Jason's first move should aim to leave 24 marbles (which is a multiple of 4),\n    # so he should take 2 marbles.\n    jasons_first_move = marbles % 4\n    if jasons_first_move == 0:\n        jasons_first_move = 3  # Take 3 if the modulus is 0, to leave a multiple of 4.\n    # The answer is the number of marbles Jason should take in his first turn.\n    return jasons_first_move\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    \n    return five_sixths\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    equation1 = Eq(volunteers * 4 + 5, trees)\n    equation2 = Eq(trees - (volunteers - 1) * 7, 0)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions[volunteers], solutions[trees]\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # There is only one bar where the alcoholic could be, given he's not at the other two.\n    # The probability that the alcoholic is at any given bar is the complement of the probability\n    # that he's not at the two other bars.\n    \n    # Since the person goes to three bars at random, the probability of not being at two bars is irrelevant\n    # as this would be true for any two bars that are checked. So the probability of being at the third is certain.\n    \n    # The individual probabilities do not matter as there is only one bar left unchecked,\n    # where the alcoholic must be. Thus, the probability is 100% or in fractional form, 1.\n    \n    probability = 1  # Probability is certain that he is at the third bar\n    \n    return probability\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let G be the amount of grass growing each week.\n    # 120 cows eat 120G grass in 12 weeks.\n    # 150 cows eat 150G grass in 8 weeks.\n    # Grass consumed is proportional to the number of cows and the number of weeks.\n    # Therefore, 120*12=G*(120*12+12^2*C) and 150*8=G*(150*8+8^2*C) for some constant C.\n    # Solving the two equations to find C and G.\n    from sympy import symbols, Eq, solve\n\n    G, C = symbols('G C')\n    eq1 = Eq(120*12, G*(120*12 + 12**2 * C))\n    eq2 = Eq(150*8, G*(150*8 + 8**2 * C))\n\n    # Solve the system of equations for G and C\n    solution = solve((eq1, eq2), (G, C))\n\n    # Number of cows sustained for 6 weeks is when all the grass grown is eaten.\n    # That is when G*(number_of_cows*6 + 6^2*C) = number_of_cows*6.\n    # We solve for number_of_cows using the value of C we found.\n    number_of_cows = symbols('number_of_cows')\n    eq3 = Eq(G*(number_of_cows*6 + 6**2 * solution[C]), number_of_cows*6)\n\n    # Solve for the number of cows\n    number_of_cows_solution = solve(eq3, number_of_cows)\n\n    # Return the number of cows that can be sustained for 6 weeks\n    return number_of_cows_solution[0]\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    num_diff = 55  # difference between number of boys and girls\n    total_students = None  # initialize the total number of students\n\n    layer = 1  # start with the first layer\n    while True:\n        boys = (layer * 2 + 1) ** 2  # total number of students when outer layer is boys\n        girls = boys - num_diff  # total number of students when outer layer is girls\n        # Check if girls form a perfect square, when subtracting the number of differences\n        if (int(girls ** 0.5)) ** 2 == girls:\n            total_students = boys  # if girls make a perfect square, set total students\n            break\n        layer += 1  # increment the layer and check again\n\n    return total_students\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    total_stickers = 270\n    moved_stickers = 56\n    \n    # Equation to represent the total sticker count before moving stickers\n    equation1 = Eq(a + b, total_stickers)\n    \n    # Equation to represent the ratio after stickers are moved\n    equation2 = Eq((b + moved_stickers) / (a - moved_stickers), 3/2)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Using cross multiplication to solve the proportion: \n    # a/b = c/d where a is the missing number, b is 10, c is 14 and d is 21\n\n    b = 10\n    c = 14\n    d = 21\n\n    # Cross multiplication gives us: a * d = b * c\n    # Therefore, a = (b * c) / d\n\n    a = (b * c) // d  # Using integer division since we are dealing with whole numbers\n\n    return a\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    first_term = 5\n    common_difference = 6\n    # The sequence is increasing by the common_difference each time.\n    # If we count the terms from the sequence given, we can find the next term.\n\n    # Counting the terms given in the sequence:\n    terms_provided = [5, 11, 17, 23, 29, 35, 41]\n    number_of_terms = len(terms_provided)  # Counting how many terms are provided\n\n    # To find the next term, we calculate it based on the number of terms\n    next_term = first_term + common_difference * number_of_terms  # n-th term formula: a + (n - 1)d\n\n    return next_term\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    percentage = 5\n    total_amount = 180\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sum = 0\n    for i in range(15, 0, -2):\n        sum = sum + i - (i - 2)\n    return sum\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n    \n    # Calculate the first term using the formula: first_term = last_term - (n - 1) * d\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = (total_cakes + cakes_per_box - 1) // cakes_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_divisors(n):\n        sum_divs = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum_divs += i\n        return sum_divs\n\n    n = 2  # Starting from the smallest positive integer greater than 1\n    while True:\n        if sum_of_divisors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    \n    eq1 = Eq(lovelle + makayla, 3998)\n    eq2 = Eq(lovelle - 462, makayla - (2 / 5) * makayla)\n\n    solutions = solve((eq1, eq2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # To maximize the number of different positive integers that add up to 30,\n    # we should use a sequence of consecutive positive integers starting from 1.\n    # We will use the formula for the sum of the first n natural numbers: n*(n+1)/2\n    n = 1\n    while n * (n + 1) // 2 <= 30:\n        n += 1\n    # Since we overshoot the target sum when the while loop exits,\n    # we need to subtract 1 to get the last valid value of n\n    return n - 1\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n    # Since the row starts and ends with a daffodil, there are 7 gaps between 8 daffodils\n    num_gaps = num_daffodils - 1\n    row_length = num_gaps * gap_between_daffodils\n    return row_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # If the dealer selects 9 of each of the 3 colours with the fewest cards, they will have 9 * 3 = 27 cards\n    # The remaining colour has 16 cards, selecting any more than 9 from the last colour will guarantee 10 cards of the same colour\n    # So we need to select one more from the last pile to ensure we have 10 of the same colour\n    return 27 + 1\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Irene had\n    x = symbols('x')\n\n    # Create an equation based on the problem statement\n    equation = Eq((1/4) * x + (2/7) * x, 225)\n\n    # Solve the equation to find the initial amount of money\n    initial_money = solve(equation, x)[0]\n\n    return initial_money\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Jane drinks x ml, then Alex drinks 1.5x ml\n    # x + 1.5x = total_juice\n    # 2.5x = total_juice\n    alex_drink = (1.5 / 2.5) * total_juice\n    \n    return alex_drink\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n\n    return correct_time\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # box 2 must have more stickers than box 1\n            x3 = 9 - (x1 + x2)        # remaining stickers go to box 3\n            if x1 < x2 and x2 < x3:   # box 3 must have more stickers than box 2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    ans = (1/2) * (16 / (1/4))\n    return ans\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n    total_ways = 0\n\n    # Calculate the number of ways to form a group with at least 1 boy\n    # Iterate through the number of boys in the group (from 1 to 4)\n    for boys_count in range(1, group_size + 1):\n        girls_count = group_size - boys_count\n        if girls_count <= total_girls:\n            total_ways += comb(total_boys, boys_count) * comb(total_girls, girls_count)\n\n    return total_ways\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    friends = 6\n    \n    pears_per_friend = total_pears // friends\n    strawberries_per_friend = total_strawberries // friends\n    chocolates_per_friend = total_chocolates // friends\n    \n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n    return fruits_per_friend\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    product = x * y\n    return product\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let x be the amount of money Bud had at first.\n    # Then she spent (1/4) * x on a book, so she has (3/4) * x left.\n    # She then spent (2/5) of the remaining money on a bag, which costs £60.\n    # Therefore, (2/5) * (3/4) * x = £60.\n    # We can solve for x to find out how much money she had at first.\n    \n    x = 60 / (2/5) / (3/4)\n    \n    return x\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits_per_page = lambda page: len(str(page))\n    \n    pages = 0\n    used_digits = 0\n    while used_digits < total_digits:\n        pages += 1\n        used_digits += digits_per_page(pages)\n    if used_digits > total_digits: \n        pages -= 1  # Subtract the last page that overshot the digit limit\n        \n    return pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate through odd numbers\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 // 7) - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    distance_between_trees = 3\n    distance_between_lamps = 8\n    num_trees = 41\n    \n    # Calculate the total length of the road using the trees\n    total_length = (num_trees - 1) * distance_between_trees\n    \n    # Calculate the number of lamp posts\n    num_lamps = (total_length // distance_between_lamps) + 1\n    \n    return num_lamps\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            total_price = int(str(x) + '679' + str(y))\n            if total_price % 72 == 0:\n                unit_price = int(total_price / 72)\n                return unit_price\n                \nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in m/s\n\n    time_to_pass_pole = train_length / speed  # time = distance / speed\n\n    return time_to_pass_pole\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    \n    # Check all 2-digit numbers (from 10 to 99)\n    for number in range(10, 100):\n        digits_sum = sum(map(int, str(number)))\n        # If the sum of digits is a multiple of 5\n        if digits_sum % 5 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's say the number of students in class B is b,\n    # and the number of candies Miss Jenny has is c.\n    b, c = symbols('b c')\n\n    # From the problem, we have two equations:\n    # If each student in class A (which is 2b students) gets 4 candies,\n    # Miss Jenny needs 20 more candies: 4 * (2b) = c - 20\n    equation1 = Eq(4 * (2 * b), c - 20)\n\n    # If each student in class B gets 6 candies,\n    # there will be 16 candies left: 6b = c - 16\n    equation2 = Eq(6 * b, c - 16)\n\n    # Solve the equations for b and c\n    solutions = solve((equation1, equation2), (b, c))\n\n    # We want to find out how many candies Miss Jenny has, which is c\n    return solutions[c]\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_cost = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n    \n    return remaining_after_book\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_first_mile = 1 / 60  # time to travel 1 mile at 60 mph\n    time_second_mile = 1 / 30  # time to travel 1 mile at 30 mph\n    \n    total_time = time_first_mile + time_second_mile  # total time to travel 2 miles\n    total_distance = 2  # total miles traveled\n\n    average_speed = total_distance / total_time  # average speed formula\n\n    return average_speed\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    years = 3\n    \n    for _ in range(years):\n        # Each year, the number of rabbits triples\n        rabbits *= 3\n        # Then the wolves eat half of the rabbits\n        rabbits /= 2\n\n    return int(rabbits)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    total_amount_needed = 12\n    number_of_washes = total_amount_needed / amount_per_wash\n\n    # Since she needs to make MORE than £12, we use ceil\n    from math import ceil\n    return ceil(number_of_washes)\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day_candies = 2\n    multiplier = 2\n    days_passed = 4 - 1  # because she starts counting from the first day\n    \n    fourth_day_candies = first_day_candies * (multiplier ** days_passed)\n    \n    return fourth_day_candies\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earning = 70\n    number_of_days = 6  # From Monday to Saturday\n\n    total_earning = average_daily_earning * number_of_days\n\n    return total_earning\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the natural number we are looking for\n    x = symbols('x')\n\n    # Construct the system of equations based on the remainder information\n    equation1 = Eq(290 % x, a)\n    equation2 = Eq(235 % x, a + 2)\n    equation3 = Eq(200 % x, a + 5)\n\n    # Solve for 'a' first\n    solutions_a = solve((equation1, equation2, equation3), (a, x))\n\n    # Simplify to find the value for 'x' by comparing the difference of pairs, 290-200=90 and 235-200=35\n    # Use the greatest common divisor (gcd) to find the number\n    from math import gcd\n    x_value = gcd(90, 35)\n\n    return x_value\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two unknown angles\n    angle_x, angle_y = symbols('angle_x angle_y')\n\n    # Since one angle is twice the size of the other: angle_y = 2 * angle_x\n    equation1 = Eq(angle_y, 2 * angle_x)\n\n    # The sum of angles in a triangle is 180 degrees and we have a right angle (90 degrees)\n    equation2 = Eq(angle_x + angle_y + 90, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angle_x, angle_y))\n\n    # The largest angle is angle_y\n    return solutions[angle_y]\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if 4 * (10 * I + S) == (10 * P + I) and len({P, I, S}) == 3:\n                    return 10 * P + I\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x.\n    # Then the sequence would be x, x+1, x+2, ..., x+8\n    # Since there are 9 terms (elderly members), the middle term would be the 5th term, which is x+4.\n    # The sum of an arithmetic sequence is (n/2)*(first term + last term) = (9/2)*(x + (x+8)) = 765\n    # From this equation, we can find the value of x.\n\n    total_ages = 765\n    number_of_elderly = 9\n    # Calculate the first term using the sum of arithmetic sequence formula\n    x = (2 * total_ages / number_of_elderly - 8) / 2\n    # Calculate the age of the middle elderly member\n    middle_age = x + 4\n    return int(middle_age)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n    \n    # Equation for the total cost of 9 necklaces and 5 earrings\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    \n    # Equation for the total cost of 3 necklaces and 1 earring\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    # Find the total cost of 1 necklace and 1 earring\n    total_cost_one_each = solutions[necklace] + solutions[earring]\n    \n    return total_cost_one_each\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    total_sunshine_for_sunday = 10\n    total_sunshine_for_week = total_sunshine_for_six_days + total_sunshine_for_sunday\n    average_sunshine_for_week = total_sunshine_for_week / 7\n\n    return average_sunshine_for_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n    walking_time_to_school = 24  # min\n    total_distance_to_school = walking_speed * walking_time_to_school  # m\n    \n    half_distance = total_distance_to_school / 2  # m\n    walking_time_for_half_distance = half_distance / walking_speed  # min\n    running_time_for_half_distance = half_distance / running_speed  # min\n\n    total_time_half_walk_run = walking_time_for_half_distance + running_time_for_half_distance  # min\n\n    return total_time_half_walk_run\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # The interval would be total distance divided by the number of gaps between trees\n    # When there are total_trees trees, there will be (total_trees + 1) gaps\n    distance_between_trees = total_distance / (total_trees + 1)\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return total_saw_movie\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    each_length = 15\n    leftover = total_length % each_length\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be Kim's total savings\n    s = symbols('s')\n    \n    # Amount given to mother\n    amount_given_to_mother = s / 3\n\n    # Amount Kim spent on dresses and earrings\n    amount_spent = 177 + 129\n\n    # Amount left after spending\n    amount_left = amount_given_to_mother / 2\n\n    # Equation based on the information provided\n    equation = Eq(s - amount_given_to_mother - amount_spent, amount_left)\n\n    # Solve for 's' using SymPy's solve function to get Kim's savings\n    savings = solve(equation, s)[0]\n\n    return savings\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # using the stars and bars concept for distributing n identical items into r distinct boxes\n    # formula: (n + r - 1) choose (r - 1)\n    # here, n = 6 (apples), r = 3 (baskets)\n    n = 6\n    r = 3\n    ans = math.comb(n + r - 1, r - 1)\n    return ans\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N += N\n    return sum_of_N\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n\n    for day in range(1, 10):\n        total_skirts += day * skirts_per_day\n    \n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    total_heads = 8\n    total_legs = 26\n\n    # Since each chicken has 2 legs and each cow has 4 legs,\n    # let's denote the number of chickens by 'c' and the number\n    # of cows by 'total_heads - c'\n\n    # Then we can write the equation for the legs as:\n    # 2 * c + 4 * (total_heads - c) = total_legs\n\n    # Now, we solve for 'c', the number of chickens\n    c = (total_legs - 4 * total_heads) / (2 - 4)\n\n    return int(c)\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    num_str = ''\n    n = 1\n    while len(num_str) < 2023:\n        num_str += str(n)\n        n += 1\n\n    ans = int(num_str[2022])\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_possible_students = total_sweets // min_sweets_per_student\n    return max_possible_students\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # Given first term and common difference\n    first_term = 11\n    common_difference = 3\n\n    # Empty list to store valid terms between 30 and 60\n    valid_terms = []\n\n    # Iterate through the given range\n    for number in range(30, 61):  # 61 is exclusive, so it checks up to 60\n        if (number - first_term) % common_difference == 0:\n            valid_terms.append(number)  # Append number if it fits the sequence\n\n    return valid_terms\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # set up the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas using the solved price of one banana\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    first_50k_tax = 0.08 * 50000\n    remaining_income_tax = 0.08 + T / 100\n    total_tax = first_50k_tax + remaining_income_tax * (income - 50000) \n\n    equation = Eq(total_tax, 15000)\n    \n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    unanswered_questions = 1\n    total_score = 66\n\n    # Let x be the number of correct answers Woody had\n    # Then, he had (total_questions - unanswered_questions - x) incorrect answers\n    # The equation for total score would be:\n    # x * score_correct + (total_questions - unanswered_questions - x) * score_incorrect = total_score\n    # Solving for x gives us the number of correct answers\n\n    for x in range(total_questions - unanswered_questions + 1):\n        if (x * score_correct + (total_questions - unanswered_questions - x) * score_incorrect == total_score):\n            return x\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) * 3, (alice - 8))\n\n    total_candy = solve((equation1, equation2), (rachel, alice))\n    return total_candy[rachel] + total_candy[alice]\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    total_cars = 31\n    spacing_length = 5\n\n    # Calculate the total length of all cars except the first one\n    total_length_other_cars = other_cars_length * (total_cars - 1)\n\n    # Add the length of the first car\n    total_length_cars = total_length_other_cars + first_car_length\n\n    # Calculate the number of spaces between cars\n    num_spaces = total_cars - 1\n\n    # Calculate the total length of the spaces\n    total_length_spaces = num_spaces * spacing_length\n\n    # Sum the length of the cars and the lengths of the spaces\n    total_length = total_length_cars + total_length_spaces\n\n    return total_length\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "网络故障，请重试"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # There are three positions to fill: hundreds, tens, and ones.\n    # The hundreds place can be either 2 or 3 (2 possibilities)\n    # The tens place and ones place can be 0, 2, or 3.\n    # Since it's a three-digit number, the hundreds place cannot be 0. \n    # After choosing the hundreds digit, there are 2 remaining choices for the tens place,\n    # and only 1 choice left for the ones place since repetition is not allowed.\n    \n    # Calculate the number of possible combinations\n    num_hundreds = 2\n    num_tens_and_ones = 2\n\n    # The total number of different three-digit numbers\n    total_numbers = num_hundreds * num_tens_and_ones * num_tens_and_ones\n\n    return total_numbers\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        A_index = perm.index('A')\n        B_index = perm.index('B')\n        C_index = perm.index('C')\n        D_index = perm.index('D')\n        E_index = perm.index('E')\n        \n        # Check A is in the middle of B and C\n        if not (min(B_index, C_index) < A_index < max(B_index, C_index)):\n            continue\n        \n        # Check D and E are next to each other\n        if abs(D_index - E_index) != 1:\n            continue\n            \n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    # Calculate the common difference of the sequence\n    common_difference = term_8 - term_7\n\n    # Calculate the first term using the 7th term and its position\n    first_term = term_7 - (common_difference * (7 - 1))\n\n    # Calculate the 100th term\n    term_100 = first_term + (common_difference * (100 - 1))\n\n    return term_100\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_factor = 1/5\n    original_length = current_length / (1 + growth_factor)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    # Cost of one packet of biscuits in pounds\n    cost_biscuits_per_packet = 73 / 100\n    # Cost of all biscuits\n    cost_biscuits = 7 * cost_biscuits_per_packet\n\n    # Cost of one large cake in pounds\n    cost_cake_per_large = 1.13\n    # Cost of all cakes\n    cost_cakes = 9 * cost_cake_per_large\n\n    # Total cost in pounds\n    total_cost = cost_biscuits + cost_cakes\n\n    # Malcolm's note value in pounds\n    note_value = 20\n\n    # Change in pounds\n    change = note_value - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n\n    return total_apples\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Given Sarah received 12 sweets and the ratio of Sarah's sweets is 3\n    sarah_ratio = 3\n    sarah_sweets = 12\n    \n    # Calculate the total ratio\n    total_ratio = sarah_ratio + 2 + 5  # Ratio of Sue:Sara:Ian = 2:3:5\n    \n    # Calculate the number of sweets per ratio unit\n    sweets_per_ratio = sarah_sweets / sarah_ratio  # Since Sarah's part is 3 ratio units\n    \n    # Calculate the total sweets\n    total_sweets = sweets_per_ratio * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Lunch finished at 2:50 PM\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n\n    # Total time Benson spent after reaching home\n    total_time_spent = timedelta(minutes=(10 + 20 + 20))\n\n    # Benson reached home at this time\n    home_arrival_time = lunch_end_time - total_time_spent\n\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the initial number of stickers Peter had\n    p = symbols('p')\n    \n    # Based on the problem statement, we can create equations as follows:\n    # Sam had 40 more stickers than Peter initially: s = p + 40\n    # Sam gives 20% (1/5) of his stickers to Peter: p + (p + 40)/5\n    # Peter gives 25% (1/4) of his stickers [after receiving from Sam] to Sam: p + (p + 40)/5 - (p + (p + 40)/5)/4\n    # In the end, Sam had 96 stickers more than Peter\n    # s_final = p_final + 96\n    # → p + 40 - (p + (p + 40)/5)/4 = p + (p + 40)/5 - (p + (p + 40)/5)/4 + 96\n    # Solving the above equation for p gives us the initial number of Peter's stickers\n    \n    equation = Eq(p + 40 - (p + (p + 40)/5)/4, p + (p + 40)/5 - (p + (p + 40)/5)/4 + 96)\n    solution = solve(equation, p)\n    peter_initial_stickers = solution[0]\n    \n    return peter_initial_stickers\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "def solution():\n    from itertools import permutations\n\n    # Find all 3-digit permutations\n    three_digit_permutations = list(permutations('2017', 3))\n    # Remove permutations that start with '0' since they are not valid 3-digit numbers\n    three_digit_numbers = [perm for perm in three_digit_permutations if perm[0] != '0']\n\n    # Find all 4-digit permutations\n    four_digit_permutations = list(permutations('2017', 4))\n    # All permutations are valid 4-digit numbers\n    four_digit_numbers = four_digit_permutations\n\n    # Combine the counts\n    total_numbers = len(three_digit_numbers) + len(four_digit_numbers)\n\n    return total_numbers\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * difference\n\n    sum_of_terms = (first_term + last_term) * num_terms // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def count_nines(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 9:\n            count += 1\n        n //= 10\n    return count\n\ndef solution():\n    total_nines = 0\n    pages = 0\n    while total_nines < 181:\n        pages += 1\n        total_nines += count_nines(pages)\n    return pages if total_nines == 181 else pages - 1 \n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Define the equation based on the problem description.\n    equation = Eq(initial_crystals / 2 + 10 + 20 - 14, 35 + initial_crystals / 2)\n\n    # Solve the equation\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbit_pattern = 2\n    total_grey_rabbits = 14\n    pattern_length = 1 + 2 + 2  # black + white + grey\n\n    full_patterns = total_grey_rabbits // grey_rabbit_pattern\n    remaining_grey_rabbits = total_grey_rabbits % grey_rabbit_pattern\n\n    if remaining_grey_rabbits > 0:\n        full_patterns += 1\n\n    total_rabbits = full_patterns * pattern_length\n\n    return total_rabbits\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # Greatest common divisor (GCD) of all three classes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from sympy import divisors\n\n    factors_of_180 = divisors(180)\n    count = sum(1 for factor in factors_of_180 if factor % 9 == 0)\n\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    # Create a list of the given digits\n    digits = ['0', '1', '5', '8']\n    # Generate all possible three-digit permutations using the digits\n    perm = permutations(digits, 3)\n    # Initialize variables to store the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n    # Loop through the permutations\n    for p in list(perm):\n        # Skip if the permutation starts with '0' as it wouldn't be a three-digit number\n        if p[0] == '0':\n            continue\n        # Create the number by joining the digits together\n        num = int(''.join(p))\n        # Update smallest and largest if necessary\n        smallest = min(smallest, num)\n        largest = max(largest, num)\n    # Find the difference between the largest and smallest\n    difference = largest - smallest\n\n    return difference\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "def solution():\n    total_ways = 0\n    \n    # Choose the last digit for the password (even number)\n    for last_digit in [2, 4]:\n        # Choose the remaining positions from the available digits\n        for first_digit in [digit for digit in [1, 2, 3, 4] if digit != last_digit]:\n            for second_digit in [digit for digit in [1, 2, 3, 4] if digit != last_digit and digit != first_digit]:\n                for third_digit in [digit for digit in [1, 2, 3, 4] if digit != last_digit and digit != first_digit and digit != second_digit]:\n                    total_ways += 1\n                    \n    return total_ways\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    total_stickers = 100\n    ratio = 4  # Yi-yen's stickers are 4 times Kyra's\n\n    # Let x be the number of stickers Kyra has, so Yi-yen would have 4x stickers\n    # x + 4x = total_stickers => 5x = total_stickers => x = total_stickers / 5\n    kyra_stickers = total_stickers / 5\n    yi_yen_stickers = 4 * kyra_stickers\n\n    return yi_yen_stickers\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # £2 is equivalent to 200 pence\n    single_price = 12\n    triple_price = 30\n\n    # Calculate max number of singles that can be bought\n    max_singles = total_pence // single_price\n\n    # Calculate max number of triples that can be bought and the leftover pence\n    max_triples = total_pence // triple_price\n    leftover_pence = total_pence % triple_price\n\n    # Calculate additional singles that can be bought with the leftover pence\n    additional_singles = leftover_pence // single_price\n\n    # The total number of sweets is the maximum of the two calculations\n    total_sweets = max(max_singles, (max_triples * 3) + additional_singles)\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the age of Kenny's younger brother now.\n    # Then Kenny is currently x + 2 years old.\n    may_age_now, x = symbols('may_age_now x')\n\n    # In 3 years (when May is 10), the sum of Kenny and his brother's ages will be:\n    # (x + 3) + (x + 2 + 3)\n    # The problem states this sum is 3 times May's age at that point (10 years old).\n    equation = Eq((x + 3) + (x + 2 + 3), 3 * 10)\n\n    # Solve for x to find the age of Kenny's younger brother now\n    x_solution = solve(equation, x)[0]\n\n    # Kenny's age is x + 2, so calculate it\n    kenny_age_now = x_solution + 2\n\n    # Now, we find the difference between Kenny's age and May's current age (7 years old)\n    age_difference = kenny_age_now - may_age_now.subs(may_age_now, 7)\n\n    return age_difference\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    x = symbols('x')\n\n    # 5-litre pail overflows by 4 litres\n    equation1 = Eq(5 - x, 4)\n\n    # 3-litre pail needs 4 more pails to fill\n    equation2 = Eq(3 * (x + 4), 5 - 4)\n\n    # Solve the two equations simultaneously\n    result = solve((equation1, equation2), (x))\n\n    # The amount of water needed is 5 litres (the pail size) minus the excess, 4 litres\n    tank_capacity = result[x] + 4\n\n    return tank_capacity\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since there are 10 identical balls and 7 different boxes, with at least 1 ball in each box,\n    # we can use the Stars and Bars theorem to calculate the number of ways. We first place 1 ball\n    # in each box, leaving us with 10 - 7 = 3 balls to distribute.\n    remaining_balls = 10 - 7\n    \n    # We now need to distribute these 3 balls among the 7 boxes. According to the Stars and Bars theorem,\n    # the number of ways to put n identical objects into k different boxes is comb(n + k - 1, k - 1).\n    # In this case, n is the remaining balls and k is the number of boxes.\n    num_ways = comb(remaining_balls + 7 - 1, 7 - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes)\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8*9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # If Felix wants to ensure victory, he should go second.\n    # The strategy is to always eat candies in a way that the remaining candies are a multiple of 3.\n    # Whoever faces a multiple of 3 candies to eat will lose if the other player plays optimally.\n    # There are 10 candies, and 10 is not a multiple of 3, so the first player (Felix if he goes first) loses.\n    # Felix should go second and follow the strategy to always leave a multiple of 3 candies.\n\n    # First, let's illustrate why the player who leaves a multiple of 3 candies loses.\n    # Assume there are 3n candies:\n    # - If the player eats 1 candy, the opponent can eat 2 candies, leaving 3n-3 candies, another multiple of 3.\n    # - If the player eats 2 candies, the opponent can eat 1 candy, again leaving 3n-3 candies.\n    # In both cases, the opponent can maintain the situation where the player is left with a multiple of 3 candies\n\n    # Now let's consider our specific case with 10 candies:\n    # If Felix goes first, no matter if he eats 1 or 2 candies,\n    # John will then eat 2 or 1 candies (respectively), leaving 7 candies.\n    # From here, John can follow the winning strategy to always leave a multiple of 3 candies (next step 6, then 3).\n\n    # Answer:\n    # Go second and ensure that after your turn, the number of candies left is a multiple of 3.\n    turn_to_ensure_victory = \"second\"\n    return turn_to_ensure_victory\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages = 0\n    count = 0\n    while True:\n        pages += 1\n        count += str(pages).count('3')\n        if count == 28:\n            break\n    return pages\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        is_red = i % 2 == 0      # Multiple of 2\n        is_blue = i % 3 == 0     # Multiple of 3\n        is_green = i % 4 == 0    # Multiple of 4\n        \n        # Count numbers underlined exactly twice\n        if sum([is_red, is_blue, is_green]) == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    original_amount = 50 + 20 + 10 + 5\n    brother_amount = original_amount / 2\n\n    # Checking each coin to see which one she could have lost\n    if original_amount - 50 == brother_amount * 2:\n        lost_coin = 50\n    elif original_amount - 20 == brother_amount * 2:\n        lost_coin = 20\n    elif original_amount - 10 == brother_amount * 2:\n        lost_coin = 10\n    elif original_amount - 5 == brother_amount * 2:\n        lost_coin = 5\n    else:\n        lost_coin = None  # In case none of the conditions are met\n    \n    return lost_coin\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    # Time when the first bus leaves\n    first_bus_time = 15 * 60 + 55   # convert 15:55 to minutes\n\n    # If you're 4 minutes late for the first bus\n    time_arrival = first_bus_time + 4\n\n    # Time when the second bus leaves\n    second_bus_time = 16 * 60 + 35  # convert 16:35 to minutes\n\n    # Calculate how long you have to wait for the second bus\n    wait_time = second_bus_time - time_arrival\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    tree_distance = 5\n    \n    # Number of trees is equal to number of intervals plus one\n    num_trees = (road_length // tree_distance) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Calculate the sum of the 4 numbers for each average given\n    sum_36 = 4 * 36\n    sum_38 = 4 * 38\n    sum_39 = 4 * 39\n    sum_45 = 4 * 45\n    sum_49 = 4 * 49\n\n    # Calculate the sum of all 5 numbers\n    sum_all_five = sum([sum_36, sum_38, sum_39, sum_45, sum_49]) / 4\n\n    # Find the largest sum of 4 numbers\n    largest_sum_of_four = max(sum_36, sum_38, sum_39, sum_45, sum_49)\n\n    # The largest number is the sum of all five minus the largest sum of four\n    largest_number = sum_all_five - largest_sum_of_four\n\n    return largest_number\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let x be the original number of boys\n    # Let y be the original number of girls\n    # We know that x + y = 152\n    # Removing 1/11 of the boys and 5 girls gives us the equation:\n    # x - (1/11)x = y - 5\n    # This can be rewritten as:\n    # (10/11)x = y - 5\n    # Then we can also rewrite the total students equation as:\n    # x = 152 - y\n    # Substituting x in the second equation we have:\n    # (10/11)(152 - y) = y - 5\n    # Now we solve for y\n    y = (10/11 * 152 + 5) / (1 + 10/11)\n    # Now we substitute y back into x = 152 - y to find x\n    x = 152 - y\n    return int(x)\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    total_people = solutions[women] + solutions[men]\n\n    return total_people\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n\n    num_lorries = (workers + lorry_capacity - 1) // lorry_capacity\n    return num_lorries\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    answer = solve_congruence(*congruences)\n\n    # The answer might include solutions >=200, filtering them\n    possible_values = [val for val in range(answer[0], 200, answer[1]) if val < 200]\n\n    # Since the question asks for a positive three-digit number, the solution has to be >=100\n    ans = next(val for val in possible_values if val >= 100)\n\n    return ans\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # start with a reasonable assumption for the number of students\n    students = 0\n    while True:\n        if (students % 4 == 6) and ((students + 5) % 5 == 0):\n            return students\n        students += 1\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandson_ages = [6, 12, 18]\n    \n    while True:\n        bill_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n        if bill_age == sum(grandson_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_original = 7 * 9    # The total sum of the original seven numbers\n    total_sum_new = 6 * 10        # The total sum of the remaining six numbers after removing one number\n    removed_number = total_sum_original - total_sum_new\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = 1/3 * total_people\n    people_still_at_party = total_people - people_left\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    aytown_interval = 15\n    beeville_interval = 12\n    ceeford_interval = 8\n\n    lcm_interval = lcm(aytown_interval, beeville_interval, ceeford_interval)\n    \n    hours, minutes = divmod(lcm_interval, 60)\n    next_time_hour = 10 + hours\n    next_time_minute = minutes\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution_x = solve(equation, x)\n    return solution_x[0]\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_deduction = 2\n    total_marks = 79\n\n    # number of questions answered correctly (x)\n    # number of questions answered incorrectly or left unanswered (20 - x)\n    # 5x - 2(20 - x) = 79, solve for x\n    x = (total_marks + incorrect_deduction*total_questions) / (correct_mark + incorrect_deduction)\n\n    return int(x)\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Using common factor\n    common_factor = 3999 * 2014\n    # Calculate the expression\n    ans = (common_factor * 2014.2014 + (3999.3999 * common_factor) ) / 12.0012\n\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # time taken to pass the tree in seconds\n    length_of_train = 360   # length of the train in meters\n\n    # Speed is distance divided by time\n    speed_of_train = length_of_train / time_to_pass_tree  # in meters per second\n\n    return speed_of_train\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Using Inclusion-Exclusion Principle for three sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    \n    # As we want the least number of students who play all three sports,\n    # we can assume that every student is either a swimmer, cyclist, or table tennis player (or a combination of these).\n    # Hence, |A ∪ B ∪ C| = total_students\n    \n    # We need to find |A ∩ B ∩ C| which is the number of students who play all three sports.\n    # Start with maximum possible overlaps of 2 groups and subtract from the sum of individual groups,\n    # then add the total students because we are considering the full set of students.\n    # The result will be twice the number of students in |A ∩ B ∩ C|.\n    # Lastly, divide by 2 to get |A ∩ B ∩ C| alone.\n    \n    all_three = (swimmers + cyclists + table_tennis_players - total_students) // 2\n\n    return all_three\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    distance_climbed_per_day = 3\n    slide_down_per_night = 1\n    net_distance_climbed = distance_climbed_per_day - slide_down_per_night\n    total_distance = 11\n    days_taken = 0\n\n    while total_distance > 0:\n        days_taken += 1\n        total_distance -= distance_climbed_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_down_per_night\n\n    return days_taken\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Assuming we have the worst-case scenario and we want to ensure we have 4 different colours.\n    # In the worst-case scenario, we would pick all marbles of one colour first, then all of another, and so on.\n    \n    # Since there are fewer yellow and red marbles, we will pick them last to ensure the other colours are picked first.\n    # First, pick all red marbles (12), blue (9), and then one yellow to make sure we have 3 different colours.\n    # To then ensure a fourth colour, we need to draw just 1 more marble.\n    \n    # Total marbles drawn would be:\n    marbles_drawn = 12 + 9 + 1 + 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    num = 2\n    while True:\n        # For each number num, calculate the position of numbers 10 and 24\n        # Their positions will be (10 / 2) - 1 and (24 / 2) - 1, respectively\n        # since the sequence starts with 2, so 10 is the 5th person, 24 is the 12th person\n        # If they are opposite in the circle, the difference in their positions should be half of the total people\n        if ((12 - 5) * 2) % num == 0 and ((12 - 5) * 2) // num == num // 2:\n            return num\n        \n        num += 2\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percentage = 0.20\n    savings_less_food = 6\n\n    books_stationery_expense = pocket_money * books_stationery_percentage\n\n    # Let the money spent on transport be 't'\n    # Food expenditure is 3 times transport, so it's '3t'\n    # Savings is '3t - 6' (as it is 6 less than food expenditure)\n    # Books + Stationery + Transport + Food + Savings = Total Pocket Money\n    # books_stationery_expense + t + 3t + (3t - 6) = pocket_money\n\n    # Simplify the equation to find 't'\n    t = (pocket_money - books_stationery_expense + 6) / 7  # 7t = pocket_money - books_stationery_expense + 6\n    food_expense = 3 * t\n    savings = food_expense - savings_less_food\n\n    # Calculate the percentage of the pocket money that goes to savings\n    savings_percentage = (savings / pocket_money) * 100\n    return round(savings_percentage, 2)  # rounding to two decimal places for percentage representation\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):\n        if 75 % i == 0 and i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_result = 50\n    correct_subtrahend = 14\n\n    # The original number before subtraction\n    original_number = incorrect_result + incorrect_subtrahend\n    correct_difference = original_number - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    # First, we have to find the numbers with different lengths:\n    # 4-digit numbers, 3-digit numbers, and 2-digit numbers.\n\n    total_numbers = 0\n\n    # 4-digit numbers (starting with 3 and 4)\n    for first_digit in [3, 4]:\n        for second_digit in [1, 2, 3, 4, 5, 6]:\n            if second_digit != first_digit:\n                for third_digit in [1, 2, 3, 4, 5, 6]:\n                    if third_digit != first_digit and third_digit != second_digit:\n                        for fourth_digit in [1, 2, 3, 4, 5, 6]:\n                            if fourth_digit != first_digit and fourth_digit != second_digit and fourth_digit != third_digit:\n                                total_numbers += 1\n\n    # 4-digit numbers (starting with 5)\n    for second_digit in [1, 2, 3, 4, 6]:  # 5 cannot be used since it exceeds the limit\n        for third_digit in [1, 2, 3, 4, 6]:\n            if third_digit != second_digit:\n                for fourth_digit in [1, 2, 3, 4, 6]:\n                    if fourth_digit != second_digit and fourth_digit != third_digit:\n                        total_numbers += 1\n\n    # 3-digit numbers, they can all be formed since 3-digit numbers are less than 3267 by default\n    for first_digit in [1, 2, 3, 4, 5, 6]:\n        for second_digit in [1, 2, 3, 4, 5, 6]:\n            if second_digit != first_digit:\n                for third_digit in [1, 2, 3, 4, 5, 6]:\n                    if third_digit != first_digit and third_digit != second_digit:\n                        total_numbers += 1\n\n    # 2-digit numbers are all valid since they are less than 3267 by default\n    for first_digit in [1, 2, 3, 4, 5, 6]:\n        for second_digit in [1, 2, 3, 4, 5, 6]:\n            if second_digit != first_digit:\n                total_numbers += 1\n\n    return total_numbers\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    apples_justin_ate = 4\n    apples_sisters_ate_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples = apples_justin_ate + (apples_sisters_ate_each * number_of_sisters) + apples_left\n    \n    return total_apples\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    total_amount = 7320.5\n    years = 4\n\n    interest_rate = (total_amount/principal) ** (1/years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # Given that (3 / box) * 56 = 21\n    # Therefore, box = (3 * 56) / 21\n    box = (3 * 56) / 21\n    return box\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n\n    ans = a * b - c * d\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_to_paint_one_picture = 10\n    total_minutes_available = 1 * 60 + 20  # converting hours and minutes to minutes\n\n    pictures_painted = total_minutes_available // minutes_to_paint_one_picture\n    \n    return pictures_painted\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let's assume the original number of soldiers in one side of the square array is 'n'.\n    # The total would be n^2.\n    # After adding 31 soldiers and one row and one column, the new array is (n+1)^2.\n    # The difference between the new and the original number of soldiers is 31.\n    # So we have the equation: (n+1)^2 - n^2 = 31\n    # This simplifies to: n^2 + 2n + 1 - n^2 = 31\n    # Which further simplifies to: 2n + 1 = 31\n    # Solve for n: 2n = 31 - 1 => n = 30 / 2 => n = 15\n    # The original array was 15 x 15. So the original total of soldiers was 15^2.\n    # The new total is (n+1)^2 => 16^2.\n    original_side = (31 - 1) // 2\n    total_soldiers = (original_side + 1) ** 2\n    return total_soldiers\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n\n    # Assuming that only one age satisfies the condition\n    if possible_ages:\n        return possible_ages[0]\n    else:\n        return \"No valid age found.\"\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    result = 7.3 - 2.64\n    return result\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples\n    total_apples = 30\n    # Number of other children\n    other_children = 5\n    # Each of the other children gets at least one apple\n    min_apples_for_others = other_children * 1\n    # Maximum possible number of apples Ann can get\n    max_apples_for_ann = total_apples - min_apples_for_others\n    \n    return max_apples_for_ann\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Pairing a blouse with any pair of pants, then shoes\n    blouse_pants_shoes_combinations = shirts * pants * shoes\n\n    # Wearing a dress, then choose either shoes or heels\n    dress_shoes_combinations = dresses * (shoes + heels)\n\n    # Total number of combinations\n    ans = blouse_pants_shoes_combinations + dress_shoes_combinations\n\n    return ans\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_num = int(''.join(perm[0:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:]))\n        \n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let the number of buttons James originally has be J\n    # Let the number of buttons Nina originally has be N\n    # From the problem statement, we have two equations:\n    # J + N = 22 (1)\n    # N - 4 = J + 4 (2), which simplifies to N - J = 8 (3)\n    # We can use simultaneous equations to solve for N and J\n    # Adding equation (3) to equation (1) we have:\n    # 2N = 30\n    # So, N = 15\n    \n    # Thus, Nina originally has 15 buttons\n    return 15\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    # Convert everything to grams for easier calculation\n    total_mass_grams = 9*1000 + 5  # 9kg 5g -> grams\n    soil_mass_grams = 4*1000 + 50  # 4kg 50g -> grams\n    \n    # Mass of the pack of sand in grams\n    sand_mass_grams = total_mass_grams - soil_mass_grams\n\n    # Difference between the mass of soil and sand\n    difference_grams = abs(soil_mass_grams - sand_mass_grams)\n    \n    # Convert the difference back to kg and g\n    difference_kg = difference_grams // 1000  # Get kg part\n    difference_g = difference_grams % 1000  # Get remaining grams part\n    \n    return difference_kg, difference_g\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for j in range(1, 101) for i in range(1, j+1))\n    return ans\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    kites = total_paper // paper_per_kite\n\n    return int(kites)\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_score = 29\n    correct_points = 4\n    incorrect_points = -2\n\n    # Hypothetical case: all answers are correct\n    hypothetical_max_score = total_questions * correct_points\n\n    # Difference needed to be adjusted by introducing incorrect answers\n    score_diff = hypothetical_max_score - total_score\n\n    # Calculate the number of incorrect answers required to adjust the score\n    incorrect_count = score_diff // (correct_points - abs(incorrect_points))\n\n    # Calculate the number of correct answers\n    correct_count = total_questions - incorrect_count\n\n    return correct_count\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    basic_pattern = [1, 2, 3, 4, 5]\n    num_repetitions = 52 // len(basic_pattern)\n    remaining_digits = 52 % len(basic_pattern)\n\n    sum_of_full_patterns = sum(basic_pattern) * num_repetitions\n    sum_of_remaining_digits = sum(basic_pattern[:remaining_digits])\n\n    return sum_of_full_patterns + sum_of_remaining_digits\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n\n    # Since HCF of M and N is 75, both M and N must be multiples of 75.\n    # 75 = 3*5*5\n    # The rest of the factors of M and N can only be 3's and 5's.\n    # To have 12 factors, M = 75 * 3^n * 5^m and similar for N.\n    # The number of factors of a number is (a+1)(b+1)... for prime factorization 2^a * 3^b ...\n    # So to find M and N, we need to find combinations of powers of 3 and 5 that give us 12-1 and 10-1 factors.\n    # This is because 75 already provides 2 primes: 3^1 * 5^2,\n    # and we need to find the number of factors from additional prime factors (excluding the ones from 75).\n    # So, the total number should be `(number of factors from additional primes) * (number of factors from 75's primes)`.\n\n    # We find all such combinations for M and N.\n    possible_factors_m = []\n    possible_factors_n = []\n\n    # We subtract 1 from 12 and 10 to account for the number of factors contributed by 75 itself.\n    target_factors_m = 12 - 1\n    target_factors_n = 10 - 1\n\n    # Since 75 already contains 3^1 and 5^2, we look for additional factors.\n    # The exponent of 3 or 5 can go from 0 to the target number of factors because 0 means the prime is not included.\n    for i in range(target_factors_m + 1):\n        for j in range(target_factors_m + 1):\n            if (i + 1) * (j + 1) == target_factors_m:\n                possible_factors_m.append((i, j))\n\n    for i in range(target_factors_n + 1):\n        for j in range(target_factors_n + 1):\n            if (i + 1) * (j + 1) == target_factors_n:\n                possible_factors_n.append((i, j))\n\n    # Now we find the actual numbers M and N by multiplying with 75 (3^1 * 5^2).\n    # We need to find values of M and N such that the prime factors are only 3's and 5's.\n    \n    valid_m_n = []\n    for factors_m in possible_factors_m:\n        for factors_n in possible_factors_n:\n            m = 75 * (3 ** factors_m[0]) * (5 ** factors_m[1])\n            n = 75 * (3 ** factors_n[0]) * (5 ** factors_n[1])\n            if set(divisors(m)) & set(divisors(n)) == set(divisors(75)):\n                valid_m_n.append((m, n))\n\n    # Sum the valid pairs of M and N.\n    ans = sum(set(sum(pair) for pair in valid_m_n))\n    return ans\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    # Total number of gaps between the trees is one less than the number of trees\n    total_gaps = 79 - 1\n\n    # The total length of the road is the sum of all the gaps\n    total_length = 320\n\n    # Distance between each tree is the road length divided by the number of gaps\n    distance_between_trees = total_length / total_gaps\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    num_short_rods = total_length / short_rod_length\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_quantity = 30\n    required_quantity = 20\n    \n    normal_cost_for_required_quantity = single_laptop_cost * required_quantity\n    cost_per_laptop_on_deal = deal_cost / deal_quantity\n    deal_cost_for_required_quantity = cost_per_laptop_on_deal * required_quantity\n    \n    savings = normal_cost_for_required_quantity - deal_cost_for_required_quantity\n    \n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange 6 singing performances (S)\n    sing_perms = factorial(6)\n    \n    # There are 5 gaps between the singing performances where we can fit the dancing performances (D),\n    # plus the beginning and the end, which gives us 7 possible positions\n    # We must choose 4 of these positions to place the 4 dancing performances\n    dance_positions = factorial(7) // (factorial(4) * factorial(7 - 4))\n    \n    # The total number of ways to arrange the performances is the product of the two possibilities\n    total_ways = sing_perms * dance_positions\n    \n    return total_ways\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits, so the ratio of fish to rabbits is 10 : 4, which simplifies to 5 : 2.\n    fish_to_rabbits_ratio = 5 / 2\n    \n    # Oscar trades 5 rabbits for 6 packs of wheat, so the ratio of rabbits to wheat packs is 5 : 6.\n    rabbits_to_wheat_ratio = 5 / 6\n    \n    # Combining the two ratios to find out how many fish are needed for 1 pack of wheat:\n    # (fish_to_rabbits_ratio) * (rabbits_to_wheat_ratio) = fish_to_wheat_ratio\n    fish_to_wheat_ratio = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n    \n    # To find out how many fish are needed for 12 packs of wheat:\n    fish_for_12_wheat = fish_to_wheat_ratio * 12\n    \n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    fish_per_penguin_if_3 = 3\n    fish_per_penguin_if_4 = 4\n    fish_left_if_3 = 5\n    fish_needed_if_4 = 15\n    \n    # Let x be the number of penguins\n    # Total fish when giving out 3 fish each: 3x + 5\n    # Total fish when giving out 4 fish each: 4x - 15\n    \n    # Since the total amount of fish is fixed, both expressions should equal the same amount:\n    # 3x + 5 = 4x - 15\n    \n    # Solving for x\n    x = (fish_needed_if_4 + fish_left_if_3) // (fish_per_penguin_if_4 - fish_per_penguin_if_3)\n    \n    return x\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    earnings = hourly_wage * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    wrong_result = -14\n    subtracted_instead_of_adding = 26\n    correct_result = wrong_result + (2 * subtracted_instead_of_adding)\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    \n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 0.35 * 80\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = original_cards * fraction_lost\n    return cards_lost\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):     # a cannot be 0 as it is the first digit\n        for b in range(10):    # b can be 0 to 9\n            if 110*a + 2*b + b == 1000*a + 10*a + b:   # Check the equation\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Full time scores possibilities 3-2, so during half time,\n    # both teams must have scored fewer or equal goals than at full time\n    for home_ht in range(0, 4):\n        for away_ht in range(0, 3):\n            # Ensuring that half-time scores aren't more than full-time scores\n            if home_ht <= 3 and away_ht <= 2:\n                # Ensuring there cannot be more goals at half-time than full-time\n                if home_ht <= away_ht and home_ht == 3:\n                    continue\n                if away_ht <= home_ht and away_ht == 2:\n                    continue\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    return comb(6, 2)\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation = Eq(clara, 5 * emma)\n    total_cookies = Eq(clara + emma, 1002)\n\n    solutions = solve((equation, total_cookies), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n\n    empty_basket_weight = full_weight - mangoes_half_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # To find the total number of students, we need to find two factors of the total number\n    # that differ by 1 (since Mike is 2nd in line from any direction).\n    # We start at 3 (the smallest possible factor greater than 2) and check each pair of consecutive integers.\n    for i in range(3, 100):  # Assuming the number of students is reasonable for a class\n        num_students = i * (i - 1)\n        # The total number of students is i multiplied by i-1, since i and i-1 differ by 1 and\n        # Mike's position satisfies the condition for both factors.\n        # Now we need to ensure Mike can be 2nd in line in all four directions.\n        # It's not specified explicitly, but typically a class would have more than 2 rows or columns, so we skip i=2\n        if i > 2 and (i - 1) > 2:\n            return num_students\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    result = 0.85 * 400\n    return result\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls in the class, b be the number of boys\n    g, b = symbols('g b', positive=True, integer=True)\n    \n    # Let x be the number of boys who cannot swim (which is the same as the number of girls who cannot swim)\n    # According to the question 20 pupils cannot swim and there is an equal number of boys and girls\n    # Thus 20 = 2*x => x = 10\n    \n    # Equation based on the fraction of girls who can swim\n    girls_cannot_swim = g - (3/8)*g\n    boys_cannot_swim = b - (3/5)*b\n    \n    # Two equations based on the problem statement\n    equation1 = Eq(girls_cannot_swim, 10)\n    equation2 = Eq(boys_cannot_swim, 10)\n\n    # Solve the equation\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Number of pupils in the class is the sum of boys and girls\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let x be the total number of sweets in the box.\n    # Pip ate 3/5 of them, so there are 2/5 left for Bud.\n    # According to the problem, 2/5 of the total is 16 sweets.\n    # We can find the total number by dividing 16 by 2/5.\n    \n    sweets_left_for_bud = 16\n    proportion_left_for_bud = 2/5\n    \n    total_sweets = sweets_left_for_bud / proportion_left_for_bud\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    percentage = (result / 40) * 100\n    return int(percentage)\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_for_3_cups = 30\n    number_of_cups_bought_initially = 3\n    number_of_cups_wanted = 5\n\n    cost_per_cup = cost_for_3_cups / number_of_cups_bought_initially\n    total_cost_for_5_cups = cost_per_cup * number_of_cups_wanted\n\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    \n    big_mushroom_capacity = 4\n    total_big_mushroom_capacity = big_mushroom_houses * big_mushroom_capacity\n    remaining_rabbits = total_rabbits - total_big_mushroom_capacity\n    small_mushroom_capacity = remaining_rabbits / small_mushroom_houses\n\n    return small_mushroom_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n    total_earnings = average_earnings_per_day * days_in_a_week\n    \n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(8, 0, -1):\n        ans += (-1)**(i + 1) * i**2\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizza_per_month = 15\n    num_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizza_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def climb_ways(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        return climb_ways(n - 1) + climb_ways(n - 2) + climb_ways(n - 3)\n\n    ans = climb_ways(6)\n    return ans\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    ans = sum_of_numbers // (2 * 3)\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_ship - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    # The given problem is based on the Chinese Remainder Theorem (CRT)\n    # which provides a solution for finding a number that has given remainders \n    # when divided by different divisors.\n\n    # For this given problem, we need a number x that satisfies:\n    # x % 3 = 2, x % 4 = 3, and x % 5 = 4.\n\n    # We can use a brute force method to find the smallest such x by checking\n    # each number starting from the largest remainder given until we find a number\n    # that satisfies all conditions and is less than 100.\n\n    for x in range(4, 100):  # Starting from 4 because it's the largest remainder\n        if x % 3 == 2 and x % 4 == 3 and x % 5 == 4:\n            return x\n    return None\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n    \n    # Abigail is three times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n    # In 6 years, Abigail will be 42\n    equation2 = Eq(abigail + 6, 42)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    # Find Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for a drink and a box of popcorn\n    drink, popcorn = symbols('drink popcorn')\n    \n    # The first equation: a drink + a box of popcorn = 90p\n    equation1 = Eq(drink + popcorn, 90)\n    \n    # The second equation: two drinks + a box of popcorn = 1.45 pounds, need to convert to pence\n    equation2 = Eq(2 * drink + popcorn, 145)\n    \n    # Solving the system of equations for both variables\n    solutions = solve((equation1, equation2), (drink, popcorn))\n    \n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = -(-56 // 4) * 4  # Ceiling division to find the first multiple of 4 >= 56\n    last_multiple = 92 // 4 * 4  # Floor division to find the last multiple of 4 <= 92\n\n    count_multiples = (last_multiple - first_multiple) // 4 + 1\n    return count_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    first_number = 3.5\n    second_number = 6.9\n    middle_number = (first_number + second_number) / 2\n    return middle_number\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1)**(i//4) * n for i, n in enumerate(range(60, 0, -1)))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    exponent = 99\n    ones_digit = pow(base, exponent, 10)\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Claire's current age\n    claire_current_age = symbols('claire_current_age')\n    \n    # The equation describing the situation in 6 years\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n    \n    # Solve the equation for Claire's current age\n    claire_current_age_solution = solve(equation, claire_current_age)\n\n    # Calculate Claire's age two years from now\n    claire_age_in_two_years = claire_current_age_solution[0] + 2\n    \n    return claire_age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    actual_time, scheduled_time = symbols('actual_time scheduled_time')\n\n    # The train is 5 minutes late\n    late_time = 5\n    \n    # The train left 15 minutes late\n    left_late_time = 15\n\n    # The journey took 11/12 of the scheduled time and arrived 5 minutes late despite leaving 15 minutes late\n    equation = Eq(actual_time, (11/12) * scheduled_time - left_late_time + late_time)\n\n    # Solve for the scheduled time\n    scheduled_time_solution = solve(equation, scheduled_time)\n\n    return scheduled_time_solution[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    current_year = 2022\n    next_interesting_year = current_year + 1\n\n    while '0' not in str(next_interesting_year) or '1' in str(next_interesting_year) or '3' in str(next_interesting_year) or '4' in str(next_interesting_year) or '5' in str(next_interesting_year) or '6' in str(next_interesting_year) or '7' in str(next_interesting_year) or '8' in str(next_interesting_year) or '9' in str(next_interesting_year):\n        next_interesting_year += 1\n\n    return next_interesting_year - current_year\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    unknown_product = total_product - known_product\n    missing_number = unknown_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coins_values = [200, 100, 50, 20, 10, 5, 2, 1]  # Coin values in pence\n    bus_fare = 44\n    given_amount = min([coin for coin in coins_values if coin > bus_fare])  # Smallest coin larger than fare\n    \n    change = given_amount - bus_fare\n    num_coins = 1  # Susan hands over one coin\n    \n    for value in coins_values:\n        num_coins += change // value\n        change %= value\n        \n        if change == 0:\n            break\n            \n    return num_coins\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    ans = 18 - 12\n    return ans\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Worst case scenario to draw at least one of each color\n    # means Jane could draw all but one color completely before\n    # getting the first marble of the last color.\n    # Therefore, she must draw all of one color, all but one of another color,\n    # all but one of another color, and then one from the last color.\n\n    # 4 red, 7 green, 6 blue, 2 orange\n\n    # Drawing all reds, all but one green, all but one blue, and one orange.\n    # Since we need worst case for 4 colors, we can ignore one of the colors with the most marbles\n    # After taking all from smallest color, we need to ensure we have taken \n    # 3 more marbles from remaining colors because that's the worst case before we get 1 marble of the last color.\n    # So we subtract 1 from each count and add 3.\n\n    # Draw 4 reds, 6 greens, 5 blues, and 2 oranges.\n    # This represents the worst case of drawing all marbles before getting the last color.\n    marbles_needed = 4 + 6 + 5 + 1\n    return marbles_needed\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    advance = 3\n    slide_back = 1\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < total_distance:\n        day += 1\n        total_climbed += advance\n        if total_climbed >= total_distance:\n            break\n        total_climbed -= slide_back\n\n    return day\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # This problem is an example of distributing n identical items into r distinct groups with each group getting at least one item.\n    # This is equivalent to placing n-1 identical dividers between the n items, which creates n-(r-1) items to be distributed into r groups.\n    # The number of ways this can be done is given by the combination formula C(n-(r-1)-1, r-1).\n    n = 19  # Total number of books\n    r = 4   # Total number of kids\n    ans = factorial(n - 1) // (factorial(r - 1) * factorial(n - r))\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, and each van has 4 wheels.\n    # The problem gives us the following constraints:\n    # 1. 2*m + 4*v = 3*t + 35 (35 more motorbike and van wheels than tricycle wheels)\n    # 2. 3*t + 4*v = 2*m + 13 (13 more tricycle and van wheels than motorbike wheels)\n    # 3. 2*m + 3*t + 4*v = 101 (Total number of wheels)\n    # We will solve this system of equations to find the values of m, t, and v.\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for motorbikes (m), tricycles (t), and vans (v)\n    m, t, v = symbols('m t v')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(2*m + 4*v, 3*t + 35)\n    equation2 = Eq(3*t + 4*v, 2*m + 13)\n    equation3 = Eq(2*m + 3*t + 4*v, 101)\n\n    # Use sympy's solve function to find the solutions for m, t, and v\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Calculate the number of more motorbikes than vans\n    more_motorbikes_than_vans = solutions[m] - solutions[v]\n\n    return more_motorbikes_than_vans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4*i+2)**2 - (4*i)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty and the pens are identical,\n    # we are essentially looking for the number of solutions to the equation:\n    # x1 + x2 + x3 = 6, where x1, x2, x3 >= 1, given that x1, x2, x3 correspond to the number of pens in each case.\n    # This can be solved by the method of stars and bars.\n    \n    # We subtract 1 pen from each case to ensure that they are not empty.\n    # Now we can redistribute the remaining 6 - 3 = 3 pens into 3 cases,\n    # which can have 0 pens as well now.\n    remaining_pens = 6 - 3\n    \n    # Now we use the formula for combinations with repetition:\n    # (n + k - 1) choose (k - 1), where n is remaining_pens and k is the number of cases.\n    # In this case, it becomes C(3+3-1, 3-1), which is C(5, 2).\n    \n    from math import comb\n    ans = comb(remaining_pens + 3 - 1, 3 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    desired_cups = 30\n    gallons_needed = desired_cups / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_plus_bud = 1 + 1  # Pip and Bud themselves\n\n    total_people = people_in_front_of_pip + people_behind_bud + pip_plus_bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Loop over all the months and days\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the current day is valid for the current month\n            if (month in [1, 3, 5, 7, 8, 10, 12] and day <= 31) or \\\n               (month == 2 and day <= 28) or \\\n               (month in [4, 6, 9, 11] and day <= 30):\n                # Construct the date in the required format\n                date = f\"2014{month:02d}{day:02d}\"\n                # Count the occurrences of 0, 1, and 2 in the date\n                zero_count = date.count('0')\n                one_count = date.count('1')\n                two_count = date.count('2')\n                # Check if there are equal numbers of 0, 1, and 2\n                if zero_count == one_count == two_count:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of water in each tank\n    tank_A, tank_B, tank_C, tank_D = symbols('tank_A tank_B tank_C tank_D')\n    \n    # Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(tank_A, 5 * tank_B)\n    \n    # Tank B contains 5 more liters of water than Tank C\n    equation2 = Eq(tank_B, tank_C + 5)\n    \n    # The total amount of water in Tank C and Tank D is equal to the total in Tank A\n    equation3 = Eq(tank_C + tank_D, tank_A)\n    \n    # Tank D contains 41 L of water\n    equation4 = Eq(tank_D, 41)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (tank_A, tank_B, tank_C, tank_D))\n    \n    return solutions[tank_B]\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given average of 8 numbers is 6, calculate the total sum\n    total_sum = 8 * 6\n    # Calculate the sum of given numbers\n    given_numbers_sum = sum([4, 5, 6, 9, 3, 9])\n    # Remaining sum for p and q\n    remaining_sum = total_sum - given_numbers_sum\n    # The difference between the highest and lowest is 6\n    # Since we need lowest possible value of q, we set p as lowest\n    # The lowest number in the given set is 3, therefore p can be at least 3\n    # To maximize the difference, we set p to 3\n    # q - p = 6 and p = 3, so q = 3 + 6\n    p = 3\n    q = p + 6\n    # Make sure the total sum is accurate\n    if p + q == remaining_sum:\n        return q\n    else:\n        # In case p is not 3, find the correct values for p and q\n        for p in range(3, remaining_sum // 2 + 1):\n            q = remaining_sum - p\n            if q - p == 6:\n                return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    common_difference = 3\n\n    term_number = ((last_term - first_term) // common_difference) + 1\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n    football = 3 * both\n    basketball = 4 * both\n    total_students = 36\n\n    equation = Eq(football + basketball - both, total_students)\n\n    sol = solve(equation, both)\n\n    return sol[both]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # Since 7, 11 and 13 are coprime, we can use the Chinese Remainder Theorem\n\n    # Calculate LCM of the divisors as our modulus since they're coprime\n    modulus = 7 * 11 * 13\n\n    # Now we need to find an 'x' such that:\n    # x % 7 = 3\n    # x % 11 = 7\n    # x % 13 = 9\n\n    # To find such 'x', we can iterate from the minimum possible value that\n    # satisfies the biggest remainder condition (9) and step by the total modulus,\n    # which is the simplest brute force way to solve this.\n    x = 9  # Starting point, must satisfy x % 13 = 9\n    while True:\n        if (x % 7 == 3) and (x % 11 == 7) and (x % 13 == 9):\n            break\n        x += modulus  # Step by modulus (product of primes)\n\n    # Now 'x' is the smallest number that satisfies all conditions including being a 5-digit number. \n    # Since the modulus is a 5-digit number, we can simply return x.\n    return x\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    result = custom_operation(result, 5)\n    return int(result)\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed is 60 km/h\n    adam_speed = 60\n    # Jacob's speed is 80 km/h\n    jacob_speed = 80\n    # Jacob reached home after 3 hours\n    jacob_time = 3\n    # Adam still had another 30 minutes before reaching, means Adam travels for 3.5 hours\n    adam_time = 3.5\n\n    # Distance Adam traveled when Jacob reached home\n    adam_distance_at_jacob_home = adam_speed * jacob_time\n    # Distance Jacob traveled when he reached home\n    jacob_distance = jacob_speed * jacob_time\n    # Distance Adam traveled in total when he reached home\n    adam_total_distance = adam_speed * adam_time\n\n    # Total distance between their homes is the sum of the distance each traveled\n    total_distance = adam_total_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Pigeonhole principle: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than ⌊n/m⌋ items.\n    max_cakes_in_one_layer = (total_cakes + layers - 1) // layers\n    \n    return max_cakes_in_one_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    total_paid = 0.91\n\n    cost_before_gst = total_paid / gst_rate\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Decompose 252 into prime factors\n    factor_36 = [2, 2, 3, 3]  # 36 = 2^2 * 3^2\n    factor_7 = [7]            # 7 is already a prime number\n    all_factors = factor_36 + factor_7  # Combine the factors\n    \n    # Count the occurrence of each unique prime factor\n    unique_factors = set(all_factors)\n    factor_counts = {factor: all_factors.count(factor) for factor in unique_factors}\n    \n    # The number of factors is the product of (exponent + 1) for each prime factor\n    num_factors = 1\n    for exponent in factor_counts.values():\n        num_factors *= (exponent + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # According to the Pigeonhole principle, if Lucy picks 3 marbles,\n    # she might end up with 2 blue and 1 yellow, or 2 yellow and 1 blue.\n    # To guarantee 2 marbles of the same color, she needs to pick one more marble.\n    # So, Lucy has to take at least 4 marbles.\n\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g_1 = 2.49 * 1000\n    g_2 = 670\n    kg_to_g_3 = 3 * 1000 + 80\n\n    total_grams = kg_to_g_1 + g_2 + kg_to_g_3\n\n    return total_grams\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    least_common_multiple = lcm(ashley_time, ben_time, charlie_time)\n\n    # Convert total seconds to hours, minutes, and seconds\n    total_seconds = least_common_multiple\n    hours = total_seconds // 3600\n    minutes = (total_seconds % 3600) // 60\n    seconds = total_seconds % 60\n\n    # Starting time is 10:00 AM\n    start_hour = 10\n\n    # Calculate the end time\n    end_hour = (start_hour + hours) % 24\n    end_time = f\"{end_hour:02d}:{minutes:02d}:{seconds:02d} AM\" if end_hour < 12 else f\"{(end_hour - 12):02d}:{minutes:02d}:{seconds:02d} PM\"\n\n    # Adjust for 12-hour time format if necessary\n    if end_hour == 0:\n        end_time = f\"12:{minutes:02d}:{seconds:02d} AM\"\n    elif end_hour == 12:\n        end_time = f\"12:{minutes:02d}:{seconds:02d} PM\"\n\n    return end_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # total time in minutes\n    cycling_fraction = 1 / 3\n    jogging_time_minutes = total_time_minutes * (1 - cycling_fraction)\n    return int(jogging_time_minutes)\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_current_age = symbols('justin_current_age')\n\n    # Defines the equation based on provided information\n    equation = Eq(justin_current_age + 18, 4 * (justin_current_age - 6))\n\n    # Solves the equation for Justin's current age\n    solution = solve(equation, justin_current_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 18 - 22   # The difference between consecutive terms\n    last_term = 2                 # The last term before n in the sequence\n    next_term = last_term + common_difference  # The next term in the sequence\n    \n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # There are 6 children, and each of them gets a different number of apples.\n    # Let's start with the child who gets the most apples.\n    # If the first child gets X apples, the second can get at most X-1, the third X-2, and so on.\n    # Since each child has to get at least one apple, we have:\n    # X + (X-1) + (X-2) + (X-3) + (X-4) + 1 = 30\n    # Simplifying the above, we get:\n    # 6X - (1+2+3+4) = 30\n    # 6X - 10 = 30\n    # 6X = 40\n    # X = 40 / 6\n    # Since we're dealing with whole apples, we'll take the floor of this division.\n    X = 40 // 6\n    \n    # But this only gives us an average scenario. We need to find the maximum for the first child, the one\n    # which gets the most apples. So, let's assign the minimum number of apples to the other children,\n    # that is 1 apple each, so the first child can get the maximum.\n    # We then distribute the remaining apples after giving 1 to each of the other 5 children.\n    remaining_apples = 30 - 5\n\n    return remaining_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Eco-friendly car details\n    distance = 273\n    eco_friendly_miles_per_gallon = 72.8\n\n    # Calculate gallons used by eco-friendly car\n    gallons_used_eco = distance / eco_friendly_miles_per_gallon\n    \n    # Gas-guzzler details\n    additional_gallons = 6 + 3/4\n    \n    # Calculate total gallons used by gas-guzzler\n    gallons_used_guzzler = gallons_used_eco + additional_gallons\n    \n    # Calculate average rate of consumption for the gas-guzzler\n    gas_guzzler_miles_per_gallon = distance / gallons_used_guzzler\n    \n    return gas_guzzler_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart needs to pick at least one candy of each color to ensure he has two of different colors.\n    # Pick 3 red M&M's: worst case, all same color.\n    # After picking all red M&M's, pick 1 yellow M&M: guarantees at least one yellow.\n    # Total M&M's picked = 3 (red) + 1 (yellow) = 4\n    # Next pick guarantees either a yellow or a brown, so it definitely leads to two different colors.\n    return 4 + 1  # The smallest number needed is the total picked red and the one necessary yellow or brown.\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    # Calculate the sum of squares of odd numbers from 1 to 19\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    # Since each shirt can be matched with each skirt, we use the multiplication principle\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The pattern seems to be each number is tripled to get the next number.\n    # So, if we have 1, then 1 * 3 = 3, and the next unknown number 'x' should be 3 * 3.\n\n    x = 3 * 3  # Triple the second number to get the third number in the sequence\n    return x\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    first_term = 105 - (7 - 1) * 15  # 7th term is 105, thus calculate the first term\n    nth_term = 100  # We are looking for the 100th term\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # an = a1 + (n - 1)d\n    # where an is the nth term, a1 is the first term, and d is the common difference\n    common_difference = 120 - 105  # The common difference is the difference between consecutive terms\n\n    # Now calculate the 100th term using the formula\n    hundredth_term = first_term + (nth_term - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert numbers from base 7 to base 10, perform the addition, then convert back to base 7\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n    sum_base10 = num1_base10 + num2_base10\n    \n    # Convert the result back to base 7\n    if sum_base10 == 0:\n        return '0'\n\n    digits = []\n    while sum_base10:\n        digits.append(int(sum_base10 % 7))\n        sum_base10 //= 7\n    digits.reverse()\n\n    # Convert the list of digits back to a single string number\n    ans = ''.join(str(digit) for digit in digits)\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101): # Include page 100 as well\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    # Calculate the total number of restaurant choices\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    number_of_rabbits = 8\n    number_of_days = 5\n\n    total_carrots = carrots_per_rabbit_per_day * number_of_rabbits * number_of_days\n\n    return total_carrots\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5/8) * 160\n    return result\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio of oranges to lemons is 3:5\n    original_ratio = Eq(3 * lemons, 5 * oranges)\n\n    # After selling 48 oranges, the new ratio of oranges to lemons is 1:2\n    new_ratio = Eq(lemons, 2 * (oranges - 48))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2  # horse can eat one bale in 2 days, so rate is 1/2 bale per day\n    cow_rate = 1 / 3    # cow can eat one bale in 3 days, so rate is 1/3 bale per day\n    sheep_rate = 1 / 12 # sheep can eat one bale in 12 days, so rate is 1/12 bale per day\n\n    # Combined rate of eating the bales per day\n    combined_rate = horse_rate + cow_rate + sheep_rate\n\n    # Total number of days the bales will last\n    days = 22 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "网络故障，请重试"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let d_age be the daughter's current age and m_age be the mother's current age\n    # When the daughter is as old as the mother currently is, the mother will be 75 years old\n    # When the mother was the daughter's current age, the daughter was 3 years old\n    # Therefore, we have\n    # m_age - d_age = 75 - d_age\n    # m_age - d_age = d_age - 3\n    # By combining these two equations, we get\n    # m_age = d_age + (d_age - 3)\n    # Since m_age = 75, we have\n    # 75 = d_age + (d_age - 3)\n    # which simplifies to\n    # 75 = 2 * d_age - 3\n    # Finally solving for d_age gives us\n    d_age = (75 + 3) / 2\n    # Plug in d_age to find m_age\n    m_age = d_age + (d_age - 3)\n\n    return m_age\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    spent = 6400\n    discount_percentage = 0.80\n    saved = spent * discount_percentage / (1 - discount_percentage)\n    return saved\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    year = '2014'\n    valid_dates = 0\n    # Generate all possible combinations of '00', '11', '22' to be used as month and day\n    for date_perm in permutations('001122', 6):\n        month = ''.join(date_perm[:2])\n        day = ''.join(date_perm[2:])\n        # Check if the month is valid (01 to 12)\n        if month > '00' and month < '13':\n            # Check the days according to the month and leap year specifics\n            if (month == '02' and day > '00' and day < '29') \\\n                or (month in ['04', '06', '09', '11'] and day > '00' and day < '31') \\\n                or (day > '00' and day < '32'):\n                # Only count the days if they are made up solely of 0, 1, and 2, and each appears twice\n                if sorted(year + month + day) == ['0','0','1','1','2','2','2','4']:\n                    valid_dates += 1\n    return valid_dates\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    # Total pupils\n    total_pupils = 30\n    # Right-handed pupils\n    right_handed = 21\n    # Girls in the class\n    girls = 16\n\n    # The smallest number of girls who are right-handed happens when\n    # all the non-right-handed pupils are girls.\n    # First calculate the number of non-right-handed pupils\n    non_right_handed = total_pupils - right_handed\n\n    # Then calculate the minimum number of right-handed girls\n    # It's the total number of girls minus the non-right-handed ones\n    min_right_handed_girls = girls - non_right_handed\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n    minibuses = -(-children // capacity)  # Ceiling division\n\n    return minibuses\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, gb = symbols('g gb')  # g for girls who can swim, gb for girls who can't swim\n    b, bb = symbols('b bb')  # b for boys who can swim, bb for boys who can't swim\n\n    eq1 = Eq(g + gb + b + bb, 1690)  # Total pupils\n    eq2 = Eq(gb, 49/31*g)           # Ratio of girls who can swim to who can't\n    eq3 = Eq(b, bb - 120)           # Difference in number of boys who can and can't swim\n    eq4 = Eq(b + bb, g + gb + 90)   # There are 90 more boys than girls\n\n    # Systems of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (g, gb, b, bb))\n\n    # Number of pupils who can not swim\n    num_cannot_swim = solutions[gb] + solutions[bb]\n\n    return int(num_cannot_swim)\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    zeros = 28\n    count_fives = 0\n    n = 1\n    \n    while count_fives < zeros:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_fives += 1\n            temp //= 5\n    \n    return n\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane wants to ensure she has all four different colours \n    # she has to account for the worst-case scenario, which is picking all marbles of\n    # the same colour until she gets at least one of each.\n    # We will use the principle that if she takes all but one of all other colours\n    # and then one of the final colour, she will have 4 different coloured marbles.\n    \n    # The maximum number of marbles she might have to draw before she gets \n    # one of each colour\n    max_red = 4\n    max_green = 7\n    max_blue = 6\n    max_orange = 2\n\n    # She can draw all but one of the three most plentiful marbles without getting 4 different colours\n    must_draw = (max_red - 1) + (max_green - 1) + (max_blue - 1) \n    \n    # And one more to guarantee the fourth colour.\n    must_draw += 1\n\n    return must_draw\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament, each team plays every other team once.\n    # There are 6 teams, so each team plays 6 - 1 = 5 games.\n    # There are a total of (6 * 5) / 2 = 15 games played in the tournament.\n\n    # For each game, there are 3 possible outcomes:\n    # 1. Team A wins, gets 2 points; Team B loses, gets 0 points.\n    # 2. Team B wins, gets 2 points; Team A loses, gets 0 points.\n    # 3. Teams A and B tie, each gets 1 point.\n\n    # As the tournament is 'fair', all outcomes are equally likely and the total points awarded do not depend on the outcome.\n    # Therefore, each game contributes a total of 2 points to the overall point total (either 2 + 0 or 1 + 1).\n\n    total_games = 15\n    points_per_game = 2\n\n    overall_points = total_games * points_per_game\n\n    return overall_points\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 42))  # Generate all prime numbers less than 41\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Price per piece for the first option\n    price_per_piece_1 = 7 / 4\n\n    # Price per piece for the second option\n    price_per_piece_2 = 8.5 / 6\n\n    # Determine the better buy by comparing the price per piece\n    better_buy = \"4pc for $7\" if price_per_piece_1 < price_per_piece_2 else \"6pc for $8.5\"\n\n    return better_buy\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    remaining_after_phone = 1 - (740 / (1 - 0.75))\n    salary = 740 / remaining_after_phone\n    return salary\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # There are 6 x 6 = 36 possible outcomes when two dice are thrown\n    total_outcomes = 6 * 6\n    \n    # The ways to get a sum greater than 10 are: (5,6), (6,5), (6,6)\n    favorable_outcomes = 3\n    \n    # Probability of getting a sum greater than 10\n    probability = favorable_outcomes / total_outcomes\n    \n    # Expected payout per game\n    expected_payout = probability * 10 + (1 - probability) * -1\n    \n    # Expected loss per game (negative of payout because it's a loss)\n    expected_loss_per_game = -expected_payout\n    \n    # Total expected loss over 60 games\n    total_expected_loss = expected_loss_per_game * 60\n    \n    return total_expected_loss\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_basket = total_weight_with_apples - weight_with_two_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    numbers = [2, 3, 4]\n    perm = permutations(numbers)\n    \n    count = len(list(perm))  # Count possible permutations\n    \n    return count\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    equation = Eq((original_amount / 2) - 100, 150)\n\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Starting time 02:31\n    hours = 2\n    minutes = 31\n\n    # use a while loop to keep adding one minute until the condition is met\n    count_minutes = 0\n    while True:\n        # Add one minute\n        minutes += 1\n        count_minutes += 1\n        \n        # if minutes exceed 59, increment hour by one and reset minutes to 0\n        if minutes > 59:\n            minutes = 0\n            hours += 1\n        \n        # if hours exceed 23, reset hours to 0\n        if hours > 23:\n            hours = 0\n\n        # Convert hours and minutes into a string to check the digits\n        time_str = f'{hours:02d}{minutes:02d}'  # format time as HHMM\n\n        # Check if all digits are present\n        if all(digit in time_str for digit in '0123'):\n            break\n\n    return count_minutes\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60 / 100\n    tickets_unsold = 28\n\n    total_tickets = tickets_unsold / (1 - percent_sold)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount of money Lynn and Mary originally had\n    lynn, mary = symbols('lynn mary')\n\n    # Set up the equation based on the problem statement\n    # Since they started with the same amount of money lynn = mary\n    # After spending, Mary has thrice as much as Lynn\n    # mary - 58 = 3 * (lynn - 160)\n    equation = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Since Lynn and Mary originally had the same amount of money, we substitute mary with lynn\n    solutions = solve((equation, Eq(lynn, mary)), (lynn, mary))\n\n    # Calculate how much money Lynn had left after spending $160\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3 / 7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3 / 8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    \n    bag_weight = 3 / 4\n    number_of_bags = remaining_after_tuesday / bag_weight\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # The smallest divisor that would yield a remainder of 9 is 9 + 1.\n    dividend = quotient * divisor + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deivi_age, jerry_age = symbols('deivi_age jerry_age')\n    equation1 = Eq(deivi_age, jerry_age + 8)\n    equation2 = Eq((deivi_age + 4)/(jerry_age + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deivi_age, jerry_age))\n    return solutions[jerry_age]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Iterate over possible 2-digit numbers\n    for minuend in range(10, 100):\n        for subtrahend in range(10, 100):\n            # Calculate mistaken subtrahend\n            mistaken_subtrahend = (subtrahend // 10 - 3 + 5) * 10 + (subtrahend % 10 - 2 + 3)\n            # Check if the mistaken difference is 36\n            if minuend - mistaken_subtrahend == 36:\n                # If so, calculate the correct difference\n                correct_difference = minuend - subtrahend\n                return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_apple_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n    num_jugs = -(-total_apple_juice_ml // jug_capacity_ml)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    total = 0\n    numerator_product = 1\n    denominator_product = 1\n    for i in range(100, 3, -1):\n        numerator_product *= i\n        denominator_product *= (i - 3)\n        total += numerator_product / denominator_product\n    return total\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # initial total including red and blue balls\n    target_percentage = 0.90  # target percentage for red balls\n\n    for red_balls_removed in range(50):\n        red_balls_left = 49 - red_balls_removed\n        percentage_red = red_balls_left / (total_balls - red_balls_removed)\n        if percentage_red == target_percentage:\n            return red_balls_removed\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    num = 96\n    factors = set()\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors)\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45  # Total weight of the box with matches (in grams)\n    empty_box_weight = 12  # Weight of the empty box (in grams)\n    num_matches = 220  # Number of matches in the box\n\n    matches_weight = total_weight_with_matches - empty_box_weight  # Weight of all the matches\n    weight_per_match = matches_weight / num_matches  # Weight of one match\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cows, birds = symbols('cows birds')\n    \n    # Each cow has 4 legs, each bird has 2 legs\n    legs_equation = Eq(4 * cows + 2 * birds, 3440)\n    # There are 1300 cows and birds in total\n    total_equation = Eq(cows + birds, 1300)\n    \n    solutions = solve((legs_equation, total_equation), (cows, birds))\n    \n    return solutions[cows]\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    # Grouping and alternating the signs for the given whole numbers\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    for num in range(999, 100, -1):\n        if num % 9 == 0 and num % 2 != 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n    ben_pens = jenny_pens - pens_given_to_ben - (jenny_pens - pens_given_to_ben)\n    return ben_pens\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_distance = (21 - 1) * 2  # Since trees are at both ends, use 21 - 1\n    number_of_lamp_posts = (total_distance // 10) + 1  # Integer division to find intervals, add 1 for both ends\n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Mass of vehicle 1\n    m1 = 500  # in kilograms\n\n    # Velocity of vehicle 1\n    v1 = symbols('v1')\n    # Velocity of vehicle 1 - given as 20 m/s due North, thus it's in the 'y' direction\n    north_velocity = 20  # m/s in y direction\n\n    # Mass of vehicle 2\n    m2 = 500  # in kilograms\n\n    # Velocity of vehicle 2\n    v2 = symbols('v2')\n    # Velocity of vehicle 2 - given as 30 m/s due West, thus it's in the '-x' direction\n    west_velocity = -30  # m/s in -x direction\n\n    # Conservation of momentum in both directions since they stick together after collision\n    # In the x direction (west/east)\n    equation_x = Eq(m1 * 0 + m2 * west_velocity, (m1 + m2) * v2)\n    # In the y direction (north/south)\n    equation_y = Eq(m1 * north_velocity + m2 * 0, (m1 + m2) * v1)\n\n    # Solve for the unknown velocities v1 (y direction) and v2 (x direction)\n    solutions = solve((equation_x, equation_y), (v1, v2))\n\n    # The final velocity vector is given by its components v1 and v2\n    final_velocity = (solutions[v2], solutions[v1])\n\n    return final_velocity\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colours = 5  # black, white, red, yellow, purple\n    return sizes * colours\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one laptop and one DVD player.\n    laptop_cost, dvd_cost = symbols('laptop_cost dvd_cost')\n    \n    # Equation for the total cost paid.\n    total_cost_eq = Eq(5 * laptop_cost + 4 * dvd_cost, 14438)\n    \n    # Equation for the combined cost of one laptop and one DVD player.\n    combined_cost_eq = Eq(laptop_cost + dvd_cost, 2960)\n    \n    # Solve both equations simultaneously.\n    solutions = solve((total_cost_eq, combined_cost_eq), (laptop_cost, dvd_cost))\n    \n    return solutions[dvd_cost]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        if p[0] != 0:\n            triangle, square, circle = p\n            if 10 * triangle + square - 2 * (10 * circle + triangle) == square:\n                return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial average weight and n be the initial number of people\n    x, n = symbols('x n')\n\n    # Equation when Aaron joins the group\n    equation1 = Eq((n * x + 45) / (n + 1), 61)\n\n    # Equation when Ben joins the group\n    equation2 = Eq((n * x + 45 + 71) / (n + 2), 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # The solution for the initial average\n    return solutions[x]\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_paid - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    pattern_sum = sum(range(1, pattern_length + 1))\n    full_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n\n    total_sum = full_patterns * pattern_sum + sum(range(1, remaining_digits + 1))\n    return total_sum\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario calculations using the pigeonhole principle\n    # She could take all balls of two other colors first\n    # So we calculate the sum of the maximum possible number of balls from the remaining two colors\n    # She needs to take one more ball to ensure she has 4 of the same color.\n    \n    # In the worst case, she takes all orange (4) and all yellow (2) balls.\n    # To guarantee the 4th blue ball, She would need to take just one more ball.\n    \n    return 4 + 2 + 1\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n    \n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return int(ans)\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_elements = len(numbers) + 1  # including the unknown 'a'\n\n    # Calculate the sum of the numbers using the mean formula\n    total_sum = mean_value * total_elements\n\n    # Subtract the sum of known numbers to find 'a'\n    a = total_sum - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction = original_price - reduced_price\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Total work is considered as 1 (completion of the job)\n    # A's work rate per day\n    rate_a = 1 / 15\n    # B's work rate per day\n    rate_b = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_in_4_days = 4 * (rate_a + rate_b)\n\n    # Remaining work\n    remaining_work = 1 - work_done_in_4_days\n\n    # B's time to finish the remaining work\n    days_for_b_to_finish = remaining_work / rate_b\n\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 1 to 13\n    sum_increasing = sum(range(1, 14))\n\n    # Calculate the sum of the decreasing sequence from 13 down to 1\n    sum_decreasing = sum(range(1, 14))\n\n    # Add both sums together\n    total_sum = sum_increasing + sum_decreasing\n\n    # Subtract the repeated middle term\n    ans = total_sum - 13\n\n    return ans\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while True:\n        if (number % 5 == 1) and (number % 6 == 1) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    num_bottles = 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    return num_test_tubes\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    n = 0  # This is the size of the square (n x n)\n    total_boys = 0\n    total_girls = 0\n\n    while total_boys - total_girls != 52:\n        n += 1\n        layers = (n + 1) // 2  # Each \"layer\" alternates boys and girls, starting with boys\n        \n        if n % 2 == 0:\n            # Even dimensions: Boys occupy the outer layer and one less inner layer than girls\n            total_boys = 4 * (layers - 1) * n\n            total_girls = n*n - total_boys\n        else:\n            # Odd dimensions: Boys occupy the first and all other alternate layers \n            total_boys = 4 * layers * (layers - 1) + n\n            total_girls = n*n - total_boys\n\n    total_students = total_boys + total_girls\n    return total_students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres (1 litre = 1000 millilitres)\n    return n\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    ducklings_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    lamb_legs = 4  # each lamb has 4 legs\n\n    total_legs = 36\n    total_bird_legs = ducklings_legs + baby_geese_legs\n\n    lamb_count = (total_legs - total_bird_legs) / lamb_legs\n\n    return lamb_count\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_day4 = remaining_sweets * (4/3)\n    remaining_after_day3 = remaining_after_day4 * (5/4)\n    remaining_after_day2 = remaining_after_day3 * (6/5)\n    initial_sweets = remaining_after_day2 * (7/6)\n    return initial_sweets\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Charlene keeps 1/2 * x + 8\n    # Emerald gets 1/2 * x - 8\n    # Emerald eats 1/3 * (1/2 * x - 8) + 4\n    # Hebe gets 2/3 * (1/2 * x - 8) - 4\n    # Hebe eats 1/4 * (2/3 * (1/2 * x - 8) - 4)\n    # Hebe has 42 cookies left which is 3/4 of what she got from Emerald\n    # 3/4 * (2/3 * (1/2 * x - 8) - 4) = 42\n\n    equation = Eq(3/4 * (2/3 * (1/2 * x - 8) - 4), 42)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Let n be the number of teams, and using the formula for a round-robin tournament\n    # where each team plays each other twice, the number of matches is n*(n-1).\n    # For 30 matches, we need to solve the equation n*(n-1) = 30*2 (since each match is played twice).\n\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(n*(n-1), 30 * 2)\n    solutions = solve(equation, n)\n\n    # We want the positive integer solution\n    for sol in solutions:\n        if sol.is_positive:\n            return sol\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Number of ways to reach the ith step\n    def ways_to_step(i):\n        if i == 0 or i == 1:\n            return 1\n        return ways_to_step(i-1) + ways_to_step(i-2)\n\n    # Number of ways to reach the 5th step\n    ways_to_fifth = ways_to_step(5)\n    \n    # Number of ways to reach the 10th step from the 5th\n    ways_from_fifth_to_tenth = ways_to_step(10-5)\n\n    # Total number of ways\n    total_ways = ways_to_fifth * ways_from_fifth_to_tenth\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be represented by the symbol \"b\"\n    b = symbols('b')\n\n    # Create the equation as per the problem statement\n    # The number of girls (45) is 21 less than three times the number of boys\n    equation = Eq(3 * b - 21, 45)\n\n    # Solve the equation for the number of boys (b)\n    num_boys = solve(equation, b)[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "import math\n\ndef solution():\n    for i in range(int(math.sqrt(40)), int(math.sqrt(50)) + 1):\n        n = i ** 2\n        if n > 40 and n < 50:\n            return n\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    jug = 150\n    cup = 40\n    water_used = 3 * cup\n    water_left = jug - water_used\n    return water_left\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # Prime factorization of the numbers to count the number of 2s and 5s\n    primes_2 = [2, 2, 2, 8]  # 2^1 * 2^1 * 2^1 * 2^3\n    primes_5 = [5, 5, 25]    # 5^1 * 5^1 * 5^2\n    \n    # Count the powers of 2 and 5\n    count_2 = sum([number.bit_length() - 1 for number in primes_2])  # Count 2s (bit_length - 1 gives us the power of 2 for powers of 2)\n    count_5 = sum([(number.bit_length() - 1) * 2 for number in primes_5 if number == 25] + [number.bit_length() - 1 for number in primes_5 if number != 25])  # Count 5s (since 25 is 5^2, we double the count)\n\n    # The number of 0s at the end is determined by the minimum of count_2 and count_5\n    num_zeros = min(count_2, count_5)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    halfway = (0.7 + 5.1) / 2\n    return halfway\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n', integer=True)\n    eq = Eq(n*(n+1)*(n+2)*(n+3), 3024)\n    solutions = solve(eq, n)\n\n    # Finding the positive solution since we are looking for natural numbers\n    positive_solution = max(solutions)\n\n    # The largest number is n+3\n    return positive_solution + 3\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Bob's amount of Match Dfex cards as b and Alan's as a.\n    b, a = symbols('b a')\n\n    # Equation 1: Bob has 15 more cards than Alan\n    equation1 = Eq(b, a + 15)\n\n    # Equation 2: After Colin gives Bob 25 cards, Bob has 3 times as many as Alan\n    equation2 = Eq(b + 25, 3 * a)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from sympy import lcm\n\ndef solution():\n    # Calculate the LCM of the marker pack sizes to find the common multiple of markers that can be bought\n    packs_lcm = lcm(6, 8, 9, 15)\n\n    # Since he needs at least 1000 markers, divide 1000 by the LCM to find the least number of packs he needs to buy\n    least_packs_needed = -(-1000 // packs_lcm)  # Ceiling division to ensure we get at least 1000 markers\n\n    return least_packs_needed\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    # Let n be the cost of a notebook, p be the cost of a pencil case, and e be the cost of an eraser.\n    # According to the problem we have three equations:\n    # 3n + 4p + 5e = 50  (Equation 1: total cost)\n    # n + p = 6          (Equation 2: cost of a notebook and a pencil case)\n    # p + e = 8          (Equation 3: cost of a pencil case and an eraser)\n    \n    # We can solve the system of equations using sympy's solve method\n    from sympy import symbols, Eq, solve\n    \n    n, p, e = symbols('n p e')\n    equation1 = Eq(3*n + 4*p + 5*e, 50)\n    equation2 = Eq(n + p, 6)\n    equation3 = Eq(p + e, 8)\n    \n    solutions = solve((equation1, equation2, equation3), (n, p, e))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    n_students = 10\n    total_handshakes = n_students * (n_students - 1) / 2\n    return int(total_handshakes)\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    uniforms_made_in_5_days = 720\n    days_for_720_uniforms = 5\n\n    # Calculate the rate of making uniforms per day\n    rate_per_day = uniforms_made_in_5_days / days_for_720_uniforms\n\n    # Calculate total days needed to make 3600 uniforms\n    total_days_needed = total_uniforms / rate_per_day\n\n    return int(total_days_needed)\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    number_to_compare = 6789\n    options = [678, 6798, 6879, 9876, 6987]\n    closest = min(options, key=lambda x: abs(x - number_to_compare))\n    return closest\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Anne's and Maria's apples\n    anne, maria = symbols('anne maria')\n\n    # Maria has $20 apples more than Anne\n    equation1 = Eq(maria, anne + 20)\n    # Altogether they have $44 apples\n    equation2 = Eq(anne + maria, 44)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (anne, maria))\n\n    return solution[anne]\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs((20 / 100) * 90 - (90 / 100) * 20)\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals into fractions\n    # For the number 0.1_1_99251_7_, where _ indicates recurring parts\n    # The fraction can be written as: x = 0.1 + 0.001_1_ + 0.00000099251_7_\n    # x = 1/10 + 1/900 + 99251/90000000\n    \n    # For the second number 0.2_3_456_7_\n    # The fraction can be written as: y = 0.2 + 0.03_3_ + 0.000456_7_\n    # y = 2/10 + 1/30 + 456/1000000\n\n    # Calculating x and y using their fractional form\n    x = Fraction(1, 10) + Fraction(1, 900) + Fraction(99251, 90000000)\n    y = Fraction(2, 10) + Fraction(1, 30) + Fraction(456, 1000000)\n    \n    # Calculate the difference between the two numbers\n    diff = abs(x - y)\n    \n    # We are looking for when the first digit of the difference is non-zero after the decimal\n    # Start checking each decimal place until we find a non-zero digit\n    n = 1\n    while True:\n        if int(diff * 10**n) % 10 != 0:\n            return n\n        n += 1\n\n# Import the Fraction class\nfrom fractions import Fraction\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the number of days Jason took to read the book\n    n = symbols('n')\n    \n    # The arithmetic sequence starts at 30 pages, ends at 70 pages, and has n terms\n    # The sum of an arithmetic sequence: S = n/2 * (first_term + last_term)\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    sum_pages_eq = Eq(n / 2 * (first_day_pages + last_day_pages), total_pages)\n    \n    # Solve the equation for n to find the number of days\n    days_solution = solve(sum_pages_eq, n)\n    \n    # The difference between terms d in an arithmetic sequence can be calculated\n    # by (last_term - first_term) / (n - 1)\n    for days in days_solution:\n        if days.is_integer and days > 0:\n            days = days.evalf()\n            d = (last_day_pages - first_day_pages) / (days - 1)\n            return d\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n\n    current_sum = sum(scores)\n    required_sum = required_average * (len(scores) + 1)\n\n    final_judge_score = required_sum - current_sum\n\n    return final_judge_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Assuming the blank to be filled is the dividend\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    # Correct approach to find the dividend\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    # Let r be the interest rate per year.\n    # The interest formula for two years: A = P(1 + r)^t\n    # Where A is the amount after t years, P is the principal amount, and r is the rate.\n    # We know that A = P + interest = 10000 + 816 = 10816\n    # t = 2 (years)\n    # P = 10000\n\n    P = 10000\n    A = 10816\n    t = 2\n    \n    # Now we need to find r such that P(1 + r)^t = A\n    # (1 + r)^2 = A / P\n    # 1 + r = ((A / P) ** 0.5)\n    # r = ((A / P) ** 0.5) - 1\n    from sympy import symbols, Eq, solve\n\n    r = symbols('r')\n    equation = Eq((1 + r)**t, A / P)\n    \n    # When we solve for r, we get the annual interest rate as a decimal\n    r_decimal = solve(equation, r)[0]\n    \n    # Convert the decimal to a percentage by multiplying by 100\n    r_percent = r_decimal * 100\n    \n    return round(r_percent, 2)\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(2 * number + 7, 43)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Hannah as h and speed of Peter as p\n    h = symbols('h')\n\n    # We know the speed of Peter is 15 cm/s faster than the speed of Hannah\n    p = h + 15\n\n    # We are also given the ratio of time taken by Peter to Hannah which is 3:4\n    # Since time = distance / speed, their speeds are inversely proportional to the time taken\n    # So, the speed ratio of Hannah to Peter is 4:3, and we can write it as:\n    # h / p = 4 / 3\n\n    # Now let's form the equation and solve it\n    equation = Eq(h / p, 4 / 3)\n\n    # Solution for the speed of Hannah\n    solution = solve((equation), (h))\n\n    return solution[h]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for the fruits\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(mango + pear, 3.4)\n    equation2 = Eq(mango + apple, 3.8)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent = 23 + 35\n    time_left = total_time - time_spent\n    return time_left\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original total number of coins Owen had\n    # y be the original number of one-dollar coins\n    x, y = symbols('x y')\n    \n    # Initial conditions\n    initial_fifty_cents = (2/7) * x  # 2/7 of original coins are fifty-cents coins\n    initial_one_dollars = x - initial_fifty_cents  # the rest are one-dollar coins\n    \n    # Mother gives 10 one-dollar coins and 5 dollars' worth of fifty-cent coins (which is 10 fifty-cent coins)\n    final_one_dollars = initial_one_dollars + 10  # now he has 10 more one-dollar coins\n    final_fifty_cents = initial_fifty_cents + 10  # he gains 10 more fifty-cent coins\n    \n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    equation = Eq(final_one_dollars, 2 * final_fifty_cents)\n    \n    # Solve the equation\n    solution = solve((equation, Eq(initial_one_dollars, x - initial_fifty_cents)), (x, y))\n\n    # Return the original total number of coins Owen had\n    return solution[x]\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed_per_sec = 30\n    travel_time_in_sec = 45\n    train_length = 850\n\n    tunnel_length = train_speed_per_sec * travel_time_in_sec - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n\n    # The maximum number of parts created by n circles can be calculated by\n    # the recursive relation: parts(n) = parts(n-1) + n\n    # And parts(1) = 2 since one circle divides a plane into 2 parts.\n    def max_parts_by_circles(n):\n        parts = 0\n        for i in range(1, n+1):\n            parts += i\n        return parts + 1 # we add 1 to account for the original, undivided plane\n    \n    # Each circle adds that number to the previous total\n    max_parts_circles = max_parts_by_circles(circles)\n    \n    # A line can intersect each circle twice and every other line once.\n    # So each line can create 'existing parts' + 'number of circles' * 2 new parts\n    # where existing parts starts from 1\n    max_parts_with_line = max_parts_circles + circles * 2 + line\n\n    return max_parts_with_line\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n    \n    # Let the money spent on transportation be x; then money spent on food is 2x.\n    # So x + 2x = spent_money\n    x = spent_money / 3\n    money_on_food = 2 * x\n    \n    return money_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    total_money = 109\n    fixed_fee = 4\n    first_tier_fee = 3 * 4  # Cost for first 3 tons\n    additional_rate = 3\n\n    money_for_additional_tons = total_money - fixed_fee - first_tier_fee\n    additional_tons = money_for_additional_tons // additional_rate\n\n    total_tons = 3 + additional_tons  # First 3 tons plus additional tons\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from itertools import permutations\n    \n    # Calculate the number of permutations for 3 people entering through 4 entrances\n    total_permutations = len(list(permutations(range(4), 3)))\n    \n    # Calculate the number of permutations where Joe and Mike enter through the same entrance\n    same_entrance_permutations = 4 * 3\n    \n    # Subtract the not allowed permutations from the total permutations\n    # Joe and Mike cannot join the same entrance\n    valid_permutations = total_permutations - same_entrance_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor is 1 greater than the remainder \n    # to satisfy the condition that the remainder is less than the divisor.\n    smallest_divisor = remainder + 1\n    # The dividend can be calculated with the formula: dividend = divisor * quotient + remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    number_of_girls = 3\n\n    candies_per_girl = total_candy // number_of_girls\n\n    return candies_per_girl\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for the lazy gardener to mow the lawn alone\n    x = symbols('x')\n    \n    # The rate of work done by the quick gardener is 1/12 lawn per hour\n    # The rate of work done by the lazy gardener is 1/x lawn per hour\n    # The combined rate of work when both gardeners work together is 1/8 lawn per hour\n    \n    # The equation for the combined rate of work is: 1/12 + 1/x = 1/8\n    equation = Eq(1/12 + 1/x, 1/8)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # The solution will be a list, we take the first element which is the answer\n    return solution[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Number of oranges was 32 more than apples originally\n    equation1 = Eq(oranges, apples + 32)\n\n    # After giving away 1/3 of apples and 1/2 of oranges, he had 100 fruits left\n    equation2 = Eq(apples - apples/3 + oranges - oranges/2, 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculate the total number of fruits originally\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n\n    # Bala had 320 more cookies than Daniel\n    equation1 = Eq(bala, daniel + 320)\n    # Bala had 1/2 as many cookies as Amelia, Carl and Daniel\n    equation2 = Eq(bala, 0.5 * (amelia + carl + daniel))\n    # Carl had 3/4 as many cookies as Amelia, Bala and Daniel\n    equation3 = Eq(carl, 0.75 * (amelia + bala + daniel))\n    # They had 6230 cookies in total\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n    matthew_tomatoes_initial = belinda_tomatoes - given_tomatoes\n    matthew_tomatoes_final = matthew_tomatoes_initial - given_tomatoes\n\n    return matthew_tomatoes_final\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_amount = 5 * x\n\n    equation = Eq(initial_amount - dress_cost * x - skirt_cost * x, remaining_amount)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # minutes\n    red_line_interval = 6    # minutes\n\n    # Find least common multiple (LCM) of both intervals\n    from math import lcm\n    minutes_until_sync = lcm(green_line_interval, red_line_interval)\n\n    # Calculate the hour and minute when trains set out again at the same time\n    hours_passed, minutes_passed = divmod(minutes_until_sync, 60)\n    \n    # Starting hour is 5 am\n    next_hour = 5 + hours_passed\n    while next_hour >= 24:  # Adjust for 24-hour format\n        next_hour -= 24\n        \n    ans = f\"{next_hour:02d}:{minutes_passed:02d}\"\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2  # initialize with the first term of the sequence\n    term = 3\n    while term < 15:\n        product = 1\n        for i in range(term, term * 2, 2):\n            product *= i\n        ans += product\n        term += 2\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in mL\n    half_jug = jug_capacity / 2\n    capacity_per_cup = half_jug / 3  # since 3 cups make it half-full\n    return capacity_per_cup\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_first_to_101th_tree = 100 * 3  # Since there is a tree every 3 meters\n    time_in_minutes = 3\n    speed = distance_first_to_101th_tree / time_in_minutes  # meters per minute\n    total_distance = 4000\n    time_to_school = total_distance / speed  # time in minutes\n\n    return time_to_school\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    position_from_back = total_cars - position_from_front + 1\n    return position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    price_per_100g = 80\n    weight_needed = 250\n    cost = (price_per_100g / 100) * weight_needed\n    return cost\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    sum_of_squares = sum([(4 * i) ** 2 for i in range(1, int(124 / 4) + 1)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for apple and banana\n    apple, banana = symbols('apple banana')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the price of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # The cost to buy 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_marks = 23\n    marks_per_correct = 5\n    marks_deducted_per_wrong = -2\n    total_questions = 6\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * marks_per_correct + wrong_answers * marks_deducted_per_wrong\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen trades 5 fish for 2 rabbits\n    # Oscar trades 4 rabbits for 7 packs of wheat\n    # We want to find the rate for Owen's fish to Dennis's packs of wheat\n\n    # First, find the rate for rabbits to packs of wheat: 4 rabbits for 7 packs of wheat\n    rabbits_to_wheat = 7 / 4\n\n    # Then find the rate for fish to rabbits: 5 fish for 2 rabbits\n    fish_to_rabbits = 2 / 5\n\n    # Now, find the rate for fish to packs of wheat\n    # We multiply the two rates together to get fish to packs of wheat\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Calculate the number of fish Owen should give for 14 packs of wheat\n    # We invert the fish_to_wheat rate to find out how many fish equals 1 pack of wheat\n    # Then multiply by 14 packs\n    fish_for_14_wheat = (1 / fish_to_wheat) * 14\n\n    return int(fish_for_14_wheat)\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c as the initial count of cows and g as the initial count of goats\n    c, g = symbols('c g')\n\n    # 65% animals were cows initially\n    # ∴ The equation for the initial condition is c = 0.65 * (c + g)\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, the percentage of cows became 65% + 20% = 85%\n    # The number of goats doubled\n    # ∴ The new count of goats is 2 * g and the equation is (c + 240) = 0.85 * (c + g + 240)\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Now, we solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_for_one_drawing = 124\n    number_of_drawings = 111\n    total_time = time_for_one_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    age = solve(equation, justin)\n    \n    return age[0]\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways to distribute 4 people among 3 entrances\n    # when each entrance must have at least 1 person.\n    \n    # First, treat the people as distinguishable and entrances as distinguishable.\n    \n    # Case 1: All 4 go to different entrances (impossible since there are only 3 entrances)\n    \n    # Case 2: 3 go to one entrance, and 1 goes to another (3 ways for entrances, 4 ways for people)\n    case2 = 3 * factorial(4) // (factorial(3) * factorial(1))\n    \n    # Case 3: 2 go to one entrance, and 2 go to another (3 ways to choose which entrance gets 1 person,\n    # 1 ways to choose which gets 2)\n    # And there are 6 ways to split the 4 people into pairs.\n    case3 = 3 * (factorial(4) // (factorial(2) * factorial(2))) \n    \n    # Case 4: 2 go to one entrance, and 1 to each of the others (3 ways to choose which entrance gets 2 people,\n    # Then there are 6 ways to choose which 2 people go into the chosen entrance)\n    case4 = 3 * (factorial(4) // (factorial(2) * factorial(1) * factorial(1))) \n    \n    # The total number of ways is the sum of each case\n    total_ways = case2 + case3 + case4\n    return total_ways\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n        \n    final_payment = total_cost - discount\n    \n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books = books_per_case * 6\n    return total_books\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 3 (mod 6)\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # Using sympy's solve_congruence function to solve the system of congruences\n    x, mod = solve_congruence(*congruences)\n\n    # Filter all solutions less than 100\n    ans = [i for i in range(x, 100, mod) if i < 100]\n    return ans[0]\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as fact\n\n    # There are 2 boys and 3 girls. Arrange 2 boys (at the ends): 2! ways.\n    # Arrange 3 girls (in the middle): 3! ways.\n    arrangements = fact(2) * fact(3)\n\n    return arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    ages.sort()\n    jason_age, adam_age, tom_age = ages\n    if tom_age % 3 == 0 and jason_age < tom_age:\n        return adam_age\n    else:\n        return \"Conditions do not match siblings' ages.\"\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    while True:\n        num = int(number * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # To guarantee 3 different colored balls, we pick the worst-case scenario.\n    # We can draw all 5 balls of one color, and all 5 balls of another color,\n    # which would still not guarantee 3 different colors.\n    # Thus, we need at least 1 more ball to guarantee the third color.\n    # So, we need 5 (first color) + 5 (second color) + 1 (to guarantee third color) = 11\n    return 11\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n    \n    cost_of_laptop = total_money * fraction_spent\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(square, 2 * triangle)\n    equation2 = Eq(circle, square + triangle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed is 2 meters/second\n    ratio = 3 / 2  # Joyce's speed to Lori's speed is 3:2\n\n    joyce_speed = lori_speed * ratio  # Calculate Joyce's speed\n    \n    distance_joyce_runs = joyce_speed * 10  # Calculate distance Joyce runs in 10 seconds\n\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    total_numbers = 3\n\n    sum_first_two = original_average * 2\n    sum_three_numbers = new_average * total_numbers\n\n    new_number = sum_three_numbers - sum_first_two\n\n    return new_number\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # The requirement is to distribute 28 apples to Avril and five other children\n    # such that no two of them get the same number of apples and each gets at least one apple.\n    \n    # To give Avril the maximum number of apples, we should give the other children the least number possible\n    # Since they cannot get the same amount and must get at least one, the numbers of apples would start at 1.\n    \n    # Let's allocate apples to the other five children starting with the smallest numbers: 1, 2, 3, 4, and 5.\n    # The total apples given to five children would be 1 + 2 + 3 + 4 + 5 = 15\n    other_children_apples = sum(range(1, 6))\n    \n    # Now subtract the number of apples given to the other children from the total to find maximum for Avril\n    avril_apples = 28 - other_children_apples\n    \n    return avril_apples\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    school_to_bus_stop_time = datetime.strptime(\"16:01\", \"%H:%M\") - datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    bus_dropoff_to_home_time = datetime.strptime(\"16:35\", \"%H:%M\") - (datetime.strptime(\"16:01\", \"%H:%M\") + bus_trip_duration)\n    \n    total_walking_time = school_to_bus_stop_time + bus_dropoff_to_home_time\n    ans = total_walking_time.seconds // 60  # Convert time to minutes\n    return ans\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    last_term = 79\n    difference = second_term - first_term\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    boys_percentage = (boys / total_children) * 100\n    \n    return boys_percentage\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    # Let's denote the initial amount of money Ken and Lisa have as K and L\n    # According to the problem: \n    # Ken had initially $15 more than Lisa, hence K = L + 15\n    # After giving some amount of money x to Lisa, Ken has $21 less than Lisa, hence K - x = L + x - 21\n    # Combining both equations we get: \n    # L + 15 - x = L + x - 21\n    # 15 - x = x - 21\n    # 2x = 15 + 21\n    # 2x = 36\n    # x = 36 / 2\n    # x = 18\n    # Therefore, Ken gave $18 to Lisa\n    x = 36 // 2\n    return x\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    numbers = []\n    for i in range(1, 9):\n        numbers.extend([i] * (i + 1))\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 1:  # odd\n        median = numbers[n // 2]\n    else:  # even\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    return median\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies he ate on the first day\n    x = symbols('x')\n    # The sum of the arithmetic sequence for 5 days is 100\n    # The common difference is 6\n    # The sum of an arithmetic sequence is n/2 * (2a + (n-1)d), where n is the number of terms, a is the first term, and d is the common difference\n    # Here n = 5, d = 6, a = x, and the sum is 100\n    equation = Eq(5 / 2 * (2 * x + (5 - 1) * 6), 100)\n\n    first_day_cookies = solve(equation, x)[0]\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    min_number = int(''.join(map(str, sorted(digits))))\n    \n    return max_number - min_number\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # There are 18 blue and 8 orange marbles, totalling to 26.\n    # To ensure getting 2 red marbles, one must take out all 26 non-red marbles first.\n    # Then take out 2 more marbles which will be the red ones for sure.\n    total_non_red = 18 + 8\n    \n    # Now we take out 2 more to be sure to get the 2 red marbles.\n    total_marbles_to_take_out = total_non_red + 2\n    \n    return total_marbles_to_take_out\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt\n\n    x = solve(Eq(sqrt(x) + sqrt(36), sqrt(81)), x)\n\n    return x[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    # Formula for sum of n terms of AP: n/2 * (2a + (n-1)d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference) + 1\n    sum_series = num_terms * (first_term + last_term) / 2\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # Check if the number is multiple of 2 or 3 (or both)\n        if i % 2 == 0:\n            facing_teacher -= 1\n        if i % 3 == 0:\n            facing_teacher -= 1\n        if i % 2 == 0 and i % 3 == 0:\n            facing_teacher += 1  # If it's multiple of both, reverse the previous actions\n        \n        # Since the student starts facing the teacher, we need to add 1\n        facing_teacher += 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 2\n    while True:\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # The problem is the well-known Monty Hall problem.\n    # It is always better to switch to the other door because the probabilities change after the host opens a door with a goat.\n    # Initially, the probability of the car being behind any door is 1/3.\n    # After the host opens a door with a goat (he will always be able to do this), the probability of the car being behind the initially chosen door (gate 1) remains 1/3.\n    # However, the probability of the car being behind the other unopened door (gate 2) becomes 2/3, because if the car was not behind the initially chosen door, it must be behind one of the other two doors.\n    # Since the host opened one of them, and it was not the car, the car must be behind the remaining closed door (gate 2).\n    \n    # Therefore, it is better to switch to gate 2, so the answer should reflect this choice.\n    should_switch = True  # Represents that the player should switch to gate 2 for a better chance of winning\n    return should_switch  # The function will return True to indicate that the player should switch to gate 2\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # Let x be the algebraic symbol representing the dollars spent each time\n    total_spent = 6 * x  # Total spent is 6 times the amount spent per visit\n    return total_spent  # Return the algebraic expression\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n    \n    # Equation based on the given problem\n    equation = Eq(original_sum - 75 + (original_sum - 75) / 4, original_sum / 3)\n    \n    # Solving the equation\n    solution = solve(equation, original_sum)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # There are 7 books and we want to choose 1 book for each of the 3 students.\n    # This is a permutation problem where order does matter, since the books and the students are distinct.\n    \n    # Total number of ways to distribute the 7 books to the 3 students\n    num_ways = factorial(7) // factorial(7-3)\n        \n    return num_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    people = 13\n    minutes_each = 142\n    total_time = people * minutes_each\n    return total_time\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Number of Pokemon a single trainer can catch in 7 minutes is 1\n    # Therefore, the rate at which each trainer catches Pokemon is constant\n    # Since catching 49 Pokemon in 49 minutes is just 7 times the initial situation (7 Pokemon in 7 minutes),\n    # Same number of trainers (7) can catch 49 Pokemon in 49 minutes because each trainer catches at the same rate over the same time.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    circle_plus = symbols('circle_plus')\n    \n    # Create the equation according to the problem\n    equation = Eq(circle_plus * 9 + 47 - circle_plus, 84 + 27)\n    \n    # Solve the equation for the unknown symbol\n    solutions = solve(equation, circle_plus)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target_number = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let's denote the three numbers as x, y, and z, where x <= y <= z\n    x, y, z = symbols('x y z')\n\n    # The sum of the three numbers is 56\n    equation1 = Eq(x + y + z, 56)\n\n    # The average of the smallest two numbers is 14\n    equation2 = Eq((x + y) / 2, 14)\n\n    # The average of the largest two numbers is 22\n    equation3 = Eq((y + z) / 2, 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The median number is y\n    return solutions[y]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    people_incorrect = 1500\n\n    percentage_incorrect = (people_incorrect / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The given number is a repetition of '928', which has a length of 3 digits.\n    # We need to find the total number of '928' in the 99-digit number.\n    repetitions = 99 // 3  # integer division to get the count of full '928' repeats\n    remaining_digits = 99 % 3  # remainder to check if there are digits left after full repetitions\n\n    # '928' % 9 == 2, as 9 + 2 + 8 = 19 and 19 % 9 == 1 (we can drop any multiple of 9 when calculating remainder)\n    # Thus, the remainder of each '928' segment when divided by 9 is 1.\n    segment_remainder = 1\n    \n    # The total remainder is the remainder of the repetition of segment remainder.\n    # Since the segment remainder is 1, the total remainder would seem to be simply the repetition count,\n    # but since any multiple of 9 will give a remainder of 0 when divided by 9, we need to consider this.\n    total_remainder = (segment_remainder * repetitions) % 9\n    \n    # Finally, we need to include any remaining digits. Since there are no remaining digits (99 is divisible by 3),\n    # we don't have to add anything to the remainder.\n    # If there were remaining digits, we would have to calculate their value and include their contribution to the remainder.\n    # But in this case, it is not required.\n    \n    return total_remainder\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5, 8]  # given digits\n    even_permutations = [perm for perm in permutations(digits) if perm[-1] % 2 == 0]\n    smallest_even_number = min(even_permutations)\n    ans = int(\"\".join(map(str, smallest_even_number)))\n    return ans\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    for bars in range(1, 100):  # Assuming a reasonable number of bars bought\n        cost_sour_sweets = 12 * bars\n        cost_chocolate_drops = 17 * bars\n        \n        change_sour_sweets = (3 * 100) - cost_sour_sweets\n        change_chocolate_drops = (4 * 100) - cost_chocolate_drops\n        \n        if change_sour_sweets == change_chocolate_drops:\n            return bars\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n    \n    number_of_containers = total_volume / per_container_volume\n    \n    return int(number_of_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for Jackson and Chloe's current ages\n    jackson, chloe = symbols('jackson chloe')\n\n    # Setting up the equations based on the given problem\n    equation1 = Eq(jackson + chloe, 54)                       # Sum of their current ages\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))              # Jackson will be 5 times Chloe's age in 3 years\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Accessing Jackson's age after 3 years\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\n# Call the function and store the answer\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_rate = 2.5\n    additional_rate = 1.2\n    total_cost = 8.5\n    \n    additional_cost = total_cost - base_rate\n    additional_km = additional_cost / additional_rate\n    total_km = 1.8 + additional_km\n    \n    return total_km\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n    \n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # If at least one student gets at least 3 apples\n    # We can subtract 3 apples from the total first to ensure this condition\n    remaining_apples = 80 - 3\n\n    # Now we know that at least one student has 3 apples,\n    # the rest of the apples (77) can be distributed one per student\n    # So the total number of students is the number of apples left plus the one student\n    num_students = remaining_apples + 1\n\n    return num_students\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    original_bars = bars_received * 2    \n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    \n    big_cars_needed = boys_in_big_cars / 4\n    small_cars_needed = girls_in_small_cars / 2\n    \n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return int(total_cars_needed)\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_age_now = julia_age + mother_age + father_age\n    age_sum_target = 100\n    years = (age_sum_target - total_age_now) / 3\n\n    return int(years)\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1/16\n    kg_per_pound = 1/2.2\n    \n    pounds = ounces * pounds_per_ounce\n    kg = pounds * kg_per_pound\n    \n    return round(kg, 1)  # Best approximation to the nearest 0.5kg increment.\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate sum of the series 5 to 80\n    series_sum_to_80 = sum(range(5, 81))\n    \n    # Since 5 to 80 is inclusive and forms the first half of the series,\n    # the second half (80 to 5) will have the same sum, minus the 80 that's not repeated.\n    total_sum = series_sum_to_80 * 2 - 80\n    \n    return total_sum\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    people = ['A', 'B', 'C', 'D', 'E']\n    count = 0\n\n    for p in permutations(people):\n        if p.index('A') < p.index('B') and p.index('B') < p.index('C'):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = 0\n    for i in range(3, 2013, 7):\n        ans += 2019 / (i * (i + 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        abc = a * 100 + b * 10 + c\n        bcd = b * 100 + c * 10 + d\n        cde = c * 100 + d * 10 + e\n        defg = d * 100 + e * 10 + f\n        efg = e * 100 + f * 10 + g\n        fgh = f * 100 + g * 10 + h\n        ghi = g * 100 + h * 10 + i\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Given the pattern:\n    # 10 * 10 = 1\n    # 11 * 11 = 4\n    # We can see that the answer seems to be the difference between the squares\n    # of the digits of the initial numbers\n    # Following that pattern for 55 * 55:\n    number = \"55\"\n    digit1 = int(number[0])\n    digit2 = int(number[1])\n\n    ans = (digit1 - digit2) ** 2\n\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "def solution():\n    from itertools import permutations\n\n    digits = '012345'\n    all_six_digit_numbers = sorted([''.join(p) for p in permutations(digits, 6) if p[0] != '0'])\n    return all_six_digit_numbers[504]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be x\n    # Then the number of boys will be total_students - x\n    # We set up the equation based on the given information\n    # total_students * total_average = girls_average * x + boys_average * (total_students - x)\n    # Solve this equation for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(total_students * total_average, girls_average * x + boys_average * (total_students - x))\n\n    number_of_girls = solve(equation, x)[0]\n\n    return number_of_girls\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate is 1/40 job per day.\n    alice_rate = 1 / 40\n    # Bob's work rate is 1/60 job per day.\n    bob_rate = 1 / 60\n    # Combined work rate when both are working is the sum of individual rates.\n    combined_rate = alice_rate + bob_rate\n    # They finish the job on the 27th day.\n    total_days = 27\n    # Total work done is 1 job.\n    total_work = 1\n    # Let x be the number of days Alice takes off.\n    # The combined work for the days when both are working is (total_days - x) * combined_rate.\n    # Bob works alone for x days, so his work is x * bob_rate.\n    # This total must equal the total work: 1 job.\n    # Equation: (total_days - x) * combined_rate + x * bob_rate = total_work\n\n    # Solve for x:\n    x = (total_work - total_days * combined_rate) / (bob_rate - combined_rate)\n\n    return x\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    \n    # Equations based on the given ratios\n    equation1 = Eq(red / white, 1/2)\n    equation2 = Eq(white / black, 3/4)\n    \n    # Total number of balls\n    equation3 = Eq(red + white + black, 136)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # There are 3 choices for the first digit (2, 3, and 0 if we consider that the number starting with 0 is not a three-digit number)\n    # After choosing the first digit, there are 2 choices left for the second digit\n    # And there is only 1 choice left for the third digit\n    # However, we must exclude the combination where 0 is the first digit because it wouldn't form a three-digit number.\n    \n    # Total combinations without restriction\n    total = 3 * 2 * 1\n    # Combinations where 0 is the first digit (not valid for three-digit number)\n    invalid = 1 * 2 * 1\n    # Valid combinations for three-digit number\n    valid = total - invalid\n\n    return valid\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    n = 100  # We want to find the 100th term\n    a7 = 105  # 7th term\n    d = 120 - 105  # common difference\n\n    # Using arithmetic sequence nth term formula: an = a1 + (n-1)*d\n    # We need to find a1 first, so we use a7 (which is the 7th term)\n    a1 = a7 - (7-1)*d  # a1 is the first term\n    \n    # Now we can find the 100th term\n    a100 = a1 + (n-1)*d\n    return a100\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) // 2\n    return n\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # By the pigeonhole principle, we can assume the worst-case scenario.\n    # The worst-case scenario is picking socks of alternating colors.\n    # After picking the first red sock, we could pick a blue sock.\n    # This pattern can continue until we are sure to have a matching pair.\n    # We need to add one more sock to either color to ensure we have a matching pair.\n    \n    num_red_socks = 4\n    num_blue_socks = 4\n\n    # Maximum number of socks to pick without guaranteeing a pair is one less than the sum of both colors\n    max_without_pair = num_red_socks + num_blue_socks - 1\n\n    # To ensure we have at least one matching pair, we need to take out just one more sock\n    min_with_pair = max_without_pair + 1\n\n    return min_with_pair\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    # Since 4 years ago the combined age was 24, we need to consider that each year,\n    # each dog gets 1 year older. So in 4 years, each of the 3 dogs will be 4 years older.\n    combined_age_now = combined_age_4_years_ago + (3 * 4)\n    \n    # We want to find their combined age in 2 years' time, so we add 2 more years for each dog.\n    combined_age_in_2_years = combined_age_now + (3 * 2)\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Calculate the angles moved by hour and minute hands\n    # since 12 o'clock\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    minute_angle = minute * 6\n\n    # Calculate the difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n\n    # The angle should be the smallest angle between the hands, \n    # hence we need to subtract from 360 if it's larger than 180\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # Four sisters ate 5 apples each\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    wash_up = 13\n    breakfast = 23\n    pack_bag = 8\n    commute = 27\n    arrive_time = datetime.strptime('07:45', '%H:%M')\n\n    total_time_needed = wash_up + breakfast + pack_bag + commute\n    wake_up_time = arrive_time - timedelta(minutes=total_time_needed)\n\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1)**((i-1)//4) * i for i in range(60, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the Initial number of marbles Ryan had\n    # Let a be the Initial number of marbles Audrey had\n    r, a = symbols('r a')\n\n    # Given initial ratio of Ryan to Audrey\n    initial_ratio = Eq(r/a, 2/7)\n\n    # After Ryan bought 20 more marbles and Audrey gave away 80, new ratio is given\n    new_ratio = Eq((r + 20) / (a - 80), 1/3)\n\n    # Solve the system of equations to find the values of r and a\n    solutions = solve((initial_ratio, new_ratio), (r, a))\n\n    # Since we need Audrey's initial number of marbles\n    return solutions[a]\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red beads per repeat\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n\n    black_beads_in_full_pattern = 3 * full_patterns\n\n    # Now, calculate the black beads in the remaining part\n    if remaining_beads > 3:\n        black_beads_in_remaining = 3\n    else:\n        black_beads_in_remaining = remaining_beads\n\n    total_black_beads = black_beads_in_full_pattern + black_beads_in_remaining\n\n    return total_black_beads\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    return 4.2 + 7.8 + 7.5 - 2.5\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_volume = 750\n    rebekah_drunk = initial_volume / 5\n    abigail_drunk = 200\n    anna_drunk = 120\n\n    juice_left = initial_volume - (rebekah_drunk + abigail_drunk + anna_drunk)\n\n    return juice_left\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from math import factorial\n\ndef solution():\n    # There are 4 ways for Joe to enter.\n    # For each way Joe enters, Mike has 3 options (since he cannot join the same entrance as Joe).\n    # For each way Joe and Mike enter, Tina has 3 options left (since 2 entrances are already taken by Joe and Mike).\n    # The order in which they enter is important, so for each set of entrances, there are 3! ways they can enter.\n    # Therefore, for each set of entrances, there are 3! (factorial(3)) permutations of entry order.\n\n    # Joe enters (4 ways) -> Mike enters (3 ways) -> Tina enters (3 ways) -> They enter in a particular sequence (3! ways)\n    ways_to_enter = 4 * 3 * 3 * factorial(3)\n    \n    return ways_to_enter\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n\n    # Let's denote the number of chickens (and ducks) as c\n    # and the number of cows as cow.\n    # Since each chicken (and duck) has 2 legs and each cow has 4 legs,\n    # we can write the following equations:\n    # Head equation: c + cow = total_heads\n    # Leg equation: 2c + 4cow = total_legs\n\n    # We know that c = total_heads - cow, so we substitute this in the second equation:\n    # 2(total_heads - cow) + 4cow = total_legs\n    # 2*total_heads + 2cow = total_legs\n\n    # Now solve for cow:\n    cow = (total_legs - 2 * total_heads) // 2\n    # Since the number of chickens is equal to the number of ducks, and they are collectively called c:\n    c = total_heads - cow\n\n    return c\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    ans = (percentage / 100) * quantity\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # Define the coins\n    coins = [1, 2, 5]\n\n    # Create a set to store unique totals\n    unique_totals = set()\n\n    # Iterate through all possible combinations of 3 coins\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                total = c1 + c2 + c3\n                # Add the total to the set of unique totals\n                unique_totals.add(total)\n\n    # The number of unique totals is the answer\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance_nm = 3000\n    time_days = 13\n    time_hours = 22\n    \n    total_time_hours = (time_days * 24) + time_hours  # Convert days to hours and add the additional hours\n    average_speed_nm_per_hour = total_distance_nm / total_time_hours  # Calculate average speed\n\n    return round(average_speed_nm_per_hour)\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first fruit punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in the first punch\n    volume2 = 3  # volume of second fruit punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in the second punch\n\n    # total volume of the mixed fruit punch\n    total_volume = volume1 + volume2\n\n    # total amount of fruit juice from both punches\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    # concentration of the new mixture\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    given_to_sister = 339\n    bought_stamps = 455\n    given_away = 777\n\n    final_stamps = initial_stamps - given_to_sister + bought_stamps - given_away\n\n    return final_stamps\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n        \n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    bella_and_albert = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + bella_and_albert\n\n    return total_people\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    # After the first bus left, the relation between the number of women and men became 3/5\n    equation1 = Eq(women - 36, 3/5 * (men))\n\n    # After the second bus left, the number of men became equal to the number of women\n    equation2 = Eq(men - 48, women - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_men = solutions[men]\n    total_women = solutions[women] + 36  # Add back the 36 women who left to get the initial number\n\n    # Calculate the total number of people at the bus stop initially\n    total_people = total_men + total_women\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(20, 30))\n    ans = primes[0]\n    return ans\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n\n    for x in range(1, 14):\n        for y in range(x+1, 14):\n            z = 14 - x - y\n            if z > y and z <= 14:\n                ways.append((x, y, z))\n    \n    return len(ways), ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    tallest = 132\n    shortest = 124\n    num_heights = tallest - shortest + 1\n    class_size = 3 * num_heights + 1\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50  # Jennifer bought three pens at 50p each\n    change = 5 - total_spent  # The change she gets from £5\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    return more_english_books\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    desired_time = datetime.strptime('19:15', '%H:%M')\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = desired_time - cooking_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n\n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    all_three = 5\n\n    # Apply Inclusion-Exclusion Principle for three sets\n    ans = (go + checkers + chess) - (go_and_checkers + go_and_chess + checkers_and_chess) + all_three\n\n    return ans\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n\n    years_later = symbols('years_later')\n    equation = Eq((oliver_age_now + years_later) + (lin_age_now + years_later), 48)\n\n    ans = solve(equation, (years_later))\n\n    return ans[years_later]\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    return 16 * 112\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    poles = 40\n    distance_between_poles = 3  # meters\n    \n    # There will be one less interval than the number of poles\n    num_intervals = poles - 1\n    \n    total_distance = num_intervals * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    while True:\n        if (245 * p) ** (1/3) == int((245 * p) ** (1/3)):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Since Fred goes first, he needs to make sure that after his turn,\n    # there is a multiple of 4 oranges left (since 1,2,3 are increments to 4)\n    # so that George is forced into a losing position \n    # (when Fred leaves 4 oranges, no matter if George takes 1, 2, or 3, \n    # Fred can take the remainder and win)\n    # Thus, Fred needs to take `15 mod 4` oranges to ensure he wins.\n    \n    oranges_to_take = 15 % 4\n    \n    # If 'oranges_to_take' is zero, it means Fred can't win in the first move\n    # and he should just take 1 orange, because no matter the moves, losing is inevitable.\n    # Let's write the logic in a way that tries to take maximum oranges if winning move is possible:\n    \n    if oranges_to_take == 0:\n        oranges_to_take = 1  # Just a strategy since Fred can't win directly\n    \n    return oranges_to_take\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_to_m = 100\n    cm_value = 736\n    m_value = cm_value / cm_to_m\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(64 - i * 2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    last_year_min_production = 36000 / 4\n    last_year_production = last_year_min_production + 1\n    return int(last_year_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # One on sick leave and one on personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100  # in percentage\n    \n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return 8 * (15 / 5)\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n    # Define the equation given by the problem\n    equation = Eq((E*1000 + S*100 + S*10 + E) + 2018, (S*10000 + A*1000 + S*100 + M*10 + O))\n\n    # Each letter represents a unique digit, so we need a distinctness condition\n    distinct_digits = (E, S, A, M, O)\n\n    # Define the range for the digits (0 to 9)\n    digits_range = (0, 9)\n\n    # Find the solution using solve with the distinctiveness and digits range constraints\n    solutions = solve([equation] +\n                      [E != S, E != A, E != M, E != O, S != A, S != M, S != O, A != M, A != O, M != O] +\n                      [digit >= digits_range[0] for digit in distinct_digits] +\n                      [digit <= digits_range[1] for digit in distinct_digits])\n\n    # Check if solutions are available\n    if not solutions:\n        return None\n\n    # Extract the solution (The first one is enough since all letters are different digits)\n    solution = solutions[0]\n    \n    # Calculate the sum S+A+S+M+O by substituting the solution values\n    sum_sasmo = solution[S] + solution[A] + solution[S] + solution[M] + solution[O]\n\n    # Return the value of S+A+S+M+O\n    return sum_sasmo\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        for j in range(1, i):\n            total_sum += j / i\n\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    front_to_back = 4\n    back_to_front = 3\n    left_to_right = 1\n    right_to_left = 4\n\n    total_rows = front_to_back + back_to_front - 1\n    total_columns = left_to_right + right_to_left - 1\n\n    ans = total_rows * total_columns\n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples/oranges, 3/8)\n    equation2 = Eq((apples - 1)/oranges, 1/3)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x - 100))\n    return closest_number\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_saving = 2.40\n    total_amount_needed = 150\n    \n    days_to_save = total_amount_needed / daily_saving\n    weeks_to_save = math.ceil(days_to_save / 7)\n    \n    return weeks_to_save\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    # Convert mixed fraction to improper fraction (6*2 + 1)/2\n    numerator = 6 * 2 + 1\n    denominator = 2\n\n    # Convert the division of fractions to multiplication by inverting second fraction\n    # So, (13/2) ÷ (1/4) becomes (13/2) * (4/1)\n    ans = (numerator / denominator) * (4 / 1)\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_of_14 = sum(range(1, 15))\n    new_sum = sum_of_14 + 2019\n    for i in range(1, new_sum):\n        if sum(range(i, i+8)) == new_sum:\n            return i\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    letters = \"STATISTICS\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    total_permutations = factorial(len(letters))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let's denote r as the weight of one rabbit, c as the weight of one chicken, and k as the weight of one kangaroo.\n    \n    # Given 2r = 6c, we can find that r = 3c\n    # Given 3k = 4r, substitute r with 3c, we get 3k = 4 * 3c\n    # So, k = 4c, which means one kangaroo weighs the same as 4 chickens.\n    \n    # Return the equivalent number of chickens for one kangaroo\n    return 4\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    multiplier_sum = 836 + 162 + 2\n\n    ans = common_factor * multiplier_sum\n\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # We can split the tasks into dependent and independent ones.\n    # The order of independent tasks doesn't matter, so we choose the longest duration among them.\n    # Dependent tasks must follow a certain order, and their durations will be added together.\n\n    # Independent tasks (can be done concurrently):\n    dry_wood = 5\n    prepare_food = 1\n\n    # Dependent tasks (must be done in sequence):\n    cut_wood = 3\n    weave_rope = 1  # This depends on the wet grass, which needs 1 day to mow and 1 day to soak\n    mow_grass = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # Calculate the duration of the dependent tasks\n    dependent_duration = cut_wood + weave_rope + mow_grass + soak_grass + choose_wood\n\n    # Calculate the total duration\n    total_duration = max(dependent_duration, dry_wood, prepare_food)\n\n    return total_duration\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    age_difference = 2\n    brother_age = (ashley_age - 3) - age_difference\n    return brother_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is in the exact middle,\n    # there are 6 people in front of her and 6 people behind her.\n    # Thus, the total number of dwarves is 6 (in front) + 6 (behind) = 12 dwarves\n    num_dwarves = 6 + 6\n\n    # Don't forget to include Snow White in the count\n    return num_dwarves + 1  # Add 1 for Snow White herself\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # Assume each of the maximum number of schools has 3 participants - just below the requirement for the most.\n    # Use the Pigeonhole Principle to find the maximum number of schools.\n    schools = participants // 3\n\n    # If the division is exact, we need to add one more school to ensure at least one school has 4 participants.\n    if participants % 3 == 0:\n        schools += 1\n        \n    return schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fractional = 0\n    for i in range(1, 2019):\n        fraction = (2018 + i) / 5\n        fractional_part = fraction - int(fraction)\n        sum_fractional += fractional_part\n    ans = sum_fractional\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i % 6 == 0) and ((i // 6) ** 0.5).is_integer():\n            product = i * 6\n            if round(product ** (1/3)) ** 3 == product:\n                return i\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    relative_speed = 48 + 36  # The sum of both trains' speeds when moving towards each other.\n    time = 70 / (48 - 36)     # The time it takes for the faster train to travel 70 km more than the slower.\n\n    distance_between_stations = relative_speed * time  # Total distance between the two stations.\n\n    return distance_between_stations\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    sum_fraction = Fraction(3, 1) + Fraction(5, 9) + Fraction(6, 1) + Fraction(4, 9)\n    ans = sum_fraction\n    return ans\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Calculate the number of rows and columns based on Tim's position\n    rows = 4 + 3 - 1  # Tim is 4th from front, 3rd from back, he is counted twice\n    columns = 4 + 7 - 1  # Tim is 4th from left, 7th from right, he is counted twice\n\n    # Multiply rows and columns to get the total number of band members\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_amount = sum(coins)\n    for coin in coins:\n        if 2 * (total_amount - coin) == total_amount:\n            ans = coin\n            break\n    return ans\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize counter for pairs\n    count = 0\n\n    # Iterate through all unique pairs of numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            # Check if the pair sum is a multiple of 5\n            if (i + j) % 5 == 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_chocolates, friends = symbols('total_chocolates friends')\n    equation1 = Eq(total_chocolates - 18*friends, 41)\n    equation2 = Eq(23*friends - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    chocolates_left = solutions[total_chocolates] - 20*solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Assume a reasonable upper limit for the number of boats\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            students = (boats + 1) * 6\n            break\n    return students\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(0, thousands):\n            tens = thousands + hundreds\n            if tens >= 10:\n                continue\n            ones = thousands + hundreds + tens\n            if ones >= 10:\n                continue\n            if thousands + hundreds + tens + ones == 16:\n                return ones\n                \nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    # First digit can't be 0 for two-digit numbers\n    first_digit_options = digits[1:] # ['2', '4']\n    # Second digit can be any of the three digits\n    second_digit_options = digits # ['0', '2', '4']\n\n    # Calculate number of different two-digit numbers\n    count = len(first_digit_options) * len(second_digit_options)\n\n    return count\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let r be the amount of money Rasidah had at first\n    r = Symbol('r')\n\n    # According to the question, we can set up the equation\n    # Chai Seng's initial amount is (r + 48)\n    # Chai Seng spent (6/7) of his money, so he has (1/7) * (r + 48) left\n    # Rasidah spent (3/5) of her money, so she has (2/5) * r left\n    # Chai Seng's remaining money is (1/2) of Rasidah's remaining money\n    # Equation: (1/7) * (r + 48) = (1/2) * (2/5) * r\n\n    equation = (1/7) * (r + 48) - (1/2) * (2/5) * r\n\n    # Solve the equation for r\n    rasidah_money_at_first = solve(equation, r)[0]\n\n    return rasidah_money_at_first\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    # Inverse operation to find the number that, when divided by 7, gives 54\n    # This can also be interpreted as 54 * 7 = ans\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_num = 0\n    # Generate all permutations of the given digits\n    for perm in permutations(['2', '4', '6', '8']):\n        # Join the tuple to form a number\n        num = int(''.join(perm))\n        # Check if it is a 4-digit number and is a multiple of 4\n        if num > 999 and num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Amy's speed going uphill\n    uphill_speed = 5  # miles/hour\n    # Time taken to go uphill\n    uphill_time = 3  # hours\n    \n    # Amy's speed going downhill\n    downhill_speed = 10  # miles/hour\n    # Time taken to go downhill\n    downhill_time = 2  # hours\n    \n    # Distance traveled uphill\n    uphill_distance = uphill_speed * uphill_time\n    \n    # Distance traveled downhill\n    downhill_distance = downhill_speed * downhill_time\n    \n    # Total distance traveled\n    total_distance = uphill_distance + downhill_distance\n    \n    # Total time taken\n    total_time = uphill_time + downhill_time\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed values given in the problem\n    initial_rate = 2  # dollars per kilowatt-hour for the first 5 kilowatt-hours\n    additional_rate = 1  # dollars for each additional kilowatt-hour\n    service_fee = 3  # dollars fixed service fee\n    total_amount = 63  # dollars total amount available for usage\n\n    # Cost for the first 5 kilowatt-hours\n    initial_cost = 5 * initial_rate\n\n    # Remaining amount after the first 5 kilowatt-hours cost and service fee\n    remaining_amount = total_amount - (initial_cost + service_fee)\n\n    # Total kilowatt-hours including the first 5 and additional usage\n    total_kilowatt_hours = 5 + (remaining_amount / additional_rate)\n\n    return total_kilowatt_hours\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0, as it would not be a two-digit number\n        for y in range(10):  # y can be 0\n            A = 10 * x + y\n            B = 40 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    \n    num_small_boxes = (total_cookies + small_box_capacity - 1) // small_box_capacity\n    \n    return num_small_boxes\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-8 - (-19))\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factors_4320 = {2: 5, 3: 3, 5: 1}  # Prime factorization of 4320 = 2^5 * 3^3 * 5\n    factor_3_over_2 = {2: -1, 3: 1}           # Prime factorization of 3/2 = 2^-1 * 3^1\n\n    max_n = prime_factors_4320[3]  # Maximum power of n is determined by the smallest power of 3 in 4320\n\n    # For each n, we multiply the fraction (3/2)^n with 4320\n    # The product is an integer if the resulted power of 2 is non-negative\n    # Because the power of 3 in (3/2)^n just adds to the existing power of 3 in 4320\n    count = 0\n    for n in range(max_n + 1):\n        if prime_factors_4320[2] + factor_3_over_2[2] * n >= 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_punch_weight = 20 + 30\n    total_fruit_juice = (20 * 0.35) + (30 * 0.60)\n    concentration_percentage = (total_fruit_juice / total_punch_weight) * 100\n    return concentration_percentage\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    # Let the original amount of grain in warehouse B be x.\n    # According to the problem, the equation modelling the situation is:\n    # 50 + 12 = 2 * (x - 16)\n    # Solving for x gives us the original amount of grain in warehouse B.\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(50 + 12, 2 * (x - 16))\n    \n    original_amount_B = solve(equation, x)[0]\n    return original_amount_B\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_passed = 43\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Using the Inclusion-Exclusion Principle to find the maximum number of students who could have \n    # passed all three tests.\n    # total_passed = passed_math + passed_science + passed_english - (at least two tests) - 2*(all three tests)\n    # Since we need to maximize the number of students passing all three tests,\n    # we minimize the number of students passing at least two tests, which can be 0 in the extreme case.\n\n    at_least_two_tests = 0  # Minimize this to maximize all three tests passed\n    \n    # Calculate the maximum number of pupils who passed all three tests\n    all_three_tests = (passed_math + passed_science + passed_english - total_passed - 2 * at_least_two_tests) // 2\n    \n    return all_three_tests\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]  # The missing prime between 31 and 41 is 37\n    return primes[2]  # Return the third element which is the missing number\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    freq = {letter: word.count(letter) for letter in set(word)}\n    ans = factorial(len(word))\n    for k in freq.values():\n        ans //= factorial(k)\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.5 * 0.2 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen gives 3 fishes for 1 rabbit to Oscar\n    fishes_per_rabbit = 3\n\n    # Oscar gives 2 rabbits for 3 packs of wheat to Dennis\n    rabbits_per_pack_wheat = 2 / 3\n\n    # For a pack of wheat from Dennis, how many fishes should Owen give?\n    # Multiply ratios to find fishes per pack of wheat\n    fishes_per_pack_wheat = fishes_per_rabbit * rabbits_per_pack_wheat\n\n    return fishes_per_pack_wheat\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n    \n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n    \n    return int(hours_hired)\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let the number of people be x\n    # Let the number of benches be y\n    # If 3 people are sitting on one bench, there will be 7 people with no seat\n    # Hence, total people will be 3 * y + 7 = x\n    # If 7 people are sitting on one bench, there will be 3 extra benches left\n    # Hence, total benches will be x//7 + 3 = y\n    for y in range(1, 1000):  # Reasonable upper limit to avoid infinite loop\n        if (3 * y + 7) % 7 == 0:\n            x = 3 * y + 7\n            if x // 7 + 3 == y:\n                return x\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    pencils, _ = solve_congruence(*congruences)\n\n    # Find the smallest number in the given range\n    while pencils < 400:\n        pencils += 4 * 5 * 7\n    \n    ans = pencils\n    return ans\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    # Including 0 means we have to include it in our range hence we go from 0 to 9.\n    for x1 in range(0, 10):\n        for x2 in range(0, 10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0 and x3 <= 9:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Lisa's favourite number\n    x = symbols('x')\n\n    # Equation based on the given condition\n    equation = Eq(2 * x - 3, 19)\n\n    # Solve the equation\n    favourite_number = solve(equation, x)\n\n    return favourite_number[0]\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits_used = 0\n    pages = 0\n    while digits_used < 1101:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle_mass, juice_mass = symbols('bottle_mass juice_mass')\n\n    # Equation for when 5/6 of the bottle is filled with juice\n    equation1 = Eq((5/6) * juice_mass + bottle_mass, 4.6)\n\n    # Equation for when 2/3 of the bottle is filled with juice\n    equation2 = Eq((2/3) * juice_mass + bottle_mass, 4.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bottle_mass, juice_mass))\n\n    # Answer in grams\n    return solutions[bottle_mass] * 1000\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 12345679 * 63\n    return ans\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Generate all possible combinations of three digits where each digit can be 0-9\n    for digits in product(range(10), repeat=3):\n        # The first digit cannot be 0 (it should be a 3-digit number)\n        if digits[0] == 0:\n            continue\n        # The number has to be odd, hence the last digit has to be odd\n        if digits[2] % 2 == 0:\n            continue\n        # If the sum is 5, increase the counter\n        if sum(digits) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (20 - i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 2\n    while n**2 + n + 1 < 100:\n        n += 1\n    ans = (n - 1)**2 + (n - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_amount = 23\n    price_book = 3.4\n    price_magazine = 1.6\n\n    for num_books in range(total_amount):\n        num_magazines = (total_amount - num_books * price_book) / price_magazine\n        \n        if num_magazines.is_integer() and num_magazines >= 0:\n            return int(num_magazines)\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks_initial = andy_notebooks - andy_gives * 2\n\n    return sister_notebooks_initial\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # Sum of all individual weights (Adam + Ben + Carl) is half the sum of equation1, equation2, and equation3\n    total_weight = (solve((equation1, equation2, equation3), (adam, ben, carl))[adam] \n                  + solve((equation1, equation2, equation3), (adam, ben, carl))[ben] \n                  + solve((equation1, equation2, equation3), (adam, ben, carl))[carl])\n    \n    return total_weight\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):\n        base10_age_with_zero = int(str(age) + '0')\n        base3_age = int(str(age), base=3)\n        if base10_age_with_zero == base3_age:\n            return age\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "from fractions import Fraction\n\ndef solution():\n    expression = (Fraction(5, 8) + Fraction(1, 17)) * 8 + Fraction(9, 17)\n    ans = expression\n    return ans\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = 3616\n    flowers_left = 2644\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(orchids / tulips, 3 / 5)\n    equation2 = Eq(orchids + tulips + roses, total_flowers)\n    equation3 = Eq(orchids * 0.6 + tulips * 4 / 5 + roses * 0.75, flowers_left)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    for i in range(10, 100):\n        if 7007 % i == 0:\n            j = 7007 // i\n            if j >= 10 and j < 100 and i % 7 == 0 and j % 7 == 0:\n                return i + j\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # Since the table can be rotated, fix one person's position\n    # and count the permutations of the remaining 6.\n    ans = factorial(6)  # 6! for the remaining people\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 55 // 2 + 1):\n        prime2 = 55 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # To divide n identical items into k distinct piles,\n    # we can use the 'stars and bars' method which is a common combinatorial argument.\n    # We have n+k-1 positions in total and we need to choose k-1 positions to place the 'bars' which split objects into k piles.\n    # Hence, the number of ways to do so is choosing k-1 positions from n+k-1.\n    \n    from math import comb\n    n = 10  # number of identical items (pins)\n    k = 3  # number of piles\n    \n    ans = comb(n + k - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_price = 9\n    cheesecake_to_cookie_ratio = 5 / 3\n    chocolate_to_cheesecake_ratio = 3 / 2\n\n    cheesecake_price = cookie_price * cheesecake_to_cookie_ratio\n    chocolate_cake_price = cheesecake_price * chocolate_to_cheesecake_ratio\n\n    return chocolate_cake_price\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each letter\n    A, B, C = symbols('A B C')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Since each letter represents a distinct number, take the first valid solution for B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    equation1 = Eq(mike - valeria, 6 - 22)\n    equation2 = Eq(mike + valeria, 36)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            if M == A or M == 2 or M == 0 or M == 1 or M == 9:\n                continue\n            for C in range(10):\n                if C in [A, M, 2, 0, 1, 9]:\n                    continue\n                number = int(f\"20{A}{M}C19\")\n                if number % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n    equation1 = Eq(mother, melissa + 24)  # When Melissa was 8, her mother was 32 (24 years older)\n    equation2 = Eq(mother, 3 * melissa) # Now, mother is three times as old as Melissa\n\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining = 4\n    # Calculate the number of plants before Joel removed his share\n    before_joel = (remaining + 2) * 2\n    # Calculate the number of plants before Valerie removed her share\n    before_valerie = (before_joel + 3) * 2\n    # Calculate the number of plants before Ethan removed his share\n    before_ethan = (before_valerie + 1) * 2\n\n    return before_ethan\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The recurring decimal 857142 repeats every 6 digits\n    recurring_block = \"857142\"\n    block_sum = sum(int(digit) for digit in recurring_block)\n    \n    # Find the number of complete blocks and the remainder\n    complete_blocks, remainder = divmod(58, len(recurring_block))\n    \n    # Calculate the sum of the digits in the complete blocks\n    sum_complete_blocks = complete_blocks * block_sum\n    \n    # Calculate the sum of the remaining digits after the complete blocks\n    sum_remainder = sum(int(recurring_block[i]) for i in range(remainder))\n    \n    # The final answer is the sum of the digits in the complete blocks and the remainder\n    ans = sum_complete_blocks + sum_remainder\n    return ans\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52 \n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 9  # Set precision high enough to compare decimals properly\n\n    recurring_decimal = Decimal('4.73').quantize(Decimal('1.000')) + Decimal('4.73') / 99\n    non_recurring_decimal = Decimal('4.73')\n    large_recurring_decimal = Decimal('4.77')\n    slightly_larger_recurring_decimal = Decimal('4.737')\n\n    decimals = [recurring_decimal, non_recurring_decimal, large_recurring_decimal, slightly_larger_recurring_decimal]\n\n    smallest_decimal = min(decimals)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    original_price = final_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # For each toss, there are two outcomes: heads or tails.\n    number_of_tosses = 2   # The coin is tossed two times.\n\n    # The total number of possible outcomes is the number of outcomes per toss raised to the power of the number of tosses.\n    total_outcomes = outcomes_per_toss ** number_of_tosses\n\n    return total_outcomes\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the side length of the cube\n    x = symbols('x')\n\n    # Use the Pythagorean theorem in three dimensions for each given segment\n    equation_PB = (x/2)**2 + (x/2)**2 + x**2 - (60 * (10)**0.5)**2\n    equation_PC = x**2 + (x/2)**2 + (x/2)**2 - (60 * (5)**0.5)**2\n    equation_PD = (x/2)**2 + x**2 + x**2 - (120 * (2)**0.5)**2\n    equation_PG = 3*x**2 - (36 * (7)**0.5)**2\n\n    # Find x that satisfy one of the equations\n    # We use equation_PG because it's the simplest\n    solution = solve(equation_PG, x)\n\n    # There are two solutions, but since x represents a length, we pick the positive solution\n    x_value = [s.evalf() for s in solution if s > 0][0]\n\n    # Now we find PA which is the body diagonal of the cube √3 * side\n    PA = (3**0.5) * x_value\n\n    return PA\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    # Let x be the initial number of eggs\n    # Equation representing the problem:\n    # x - ((1/2) * x + 16) - ((1/2) * (x - ((1/2) * x + 16)) - 7) = 18\n    \n    # Simplify the equation step by step\n    # Sold after the first sale: (1/2) * x + 16\n    # Remaining after the first sale: x - ((1/2) * x + 16)\n    # Sold after the second sale: (1/2) * (x - ((1/2) * x + 16)) - 7\n    # Remaining after the second sale: x - ((1/2) * x + 16) - ((1/2) * (x - ((1/2) * x + 16)) - 7)\n\n    # Now substitute back into the equation\n    # x - ((1/2) * x + 16) - ((1/2) * (x - ((1/2) * x + 16)) - 7) = 18\n    # x - (x/2 + 16) - ((1/2) * (x/2 - 16) - 7) = 18\n    # x - x/2 - 16 - (x/4 - 8 - 7) = 18\n    # x/2 - x/4 = 18 + 16 + 8 + 7\n    # x/4 = 49 - 18\n    # x = 4 * 31\n\n    # Solve for x\n    x = 4 * (49 - remaining_eggs)\n\n    return x\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for P1 (x) and P6 (y) students\n    x, y = symbols('x y')\n    \n    # Equation 1: the total number of P1 and P6 students is 120\n    equation1 = Eq(x + y, 120)\n    \n    # Equation 2: each P6 student carried 2 buckets, and it takes two P1 students to carry 1 bucket\n    # So the number of buckets carried by P6 students is 2y, and for P1 students it is x/2\n    equation2 = Eq(2*y + x/2, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's solution\n    quotient = 9\n    remainder = 2\n    \n    # Correcting Johnny's solution\n    # The multiplication step should be between the quotient and the divisor\n    # The addition step should be adding the remainder to the above multiplication\n    divisor = 4\n    correct_answer = (quotient * divisor) + remainder\n    \n    return correct_answer\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = [(i, 8-i) for i in range(1, 7) if 0 < 8-i <= 6]\n    ans = len(ways)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit\n    # Oscar trades 2 rabbits for 3 packs of wheat\n    \n    # Find out how many fish Owen needs to give for 3 packs of wheat\n    # Since 1 rabbit is equivalent to 3 fish, 2 rabbits are equivalent to 6 fish\n    fish_for_3_packs_of_wheat = 6\n    \n    # To find out how many fish are needed for 1 pack of wheat\n    fish_per_pack_of_wheat = fish_for_3_packs_of_wheat / 3\n    \n    return fish_per_pack_of_wheat\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    unique_primes = set()\n\n    # Using each digit once to form 3-digit numbers\n    for perm in permutations(digits, 3):\n        number = int(''.join(perm))\n        if isprime(number):\n            unique_primes.add(number)\n\n    # Using each digit to form 2-digit numbers\n    for perm in permutations(digits, 2):\n        number = int(''.join(perm))\n        if isprime(number):\n            unique_primes.add(number)\n\n    # Using each digit to form 1-digit numbers\n    for digit in digits:\n        number = int(digit)\n        if isprime(number):\n            unique_primes.add(number)\n\n    return len(unique_primes)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variables\n    # x -> original total number of students in the canteen\n    # y -> original number of girls in the canteen\n    x = symbols('x')\n    \n    # Equation 1: Boys were 40% of the original number of students\n    equation1 = Eq(0.4 * x, (2 / 15) * (x - 16 + 16))\n    \n    # Solve the equation\n    students = solve(equation1, x)[0]\n    \n    # Since boys were 40% originally, girls were 60%\n    original_girls = 0.6 * students\n    \n    # Now, 16 boys left and 16 girls entered\n    current_girls = original_girls + 16\n\n    return int(current_girls)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    import fractions\n    \n    # Calculate the numerator of the large fraction\n    numerator = 3 * (fractions.Fraction(1, 3) * 1.9) + 19.5 / fractions.Fraction(9, 2)\n    \n    # Calculate the denominator of the large fraction\n    denominator = fractions.Fraction(62, 75) - 0.16\n    \n    # Calculate the numerator of the small fraction to be divided with\n    small_fraction_numerator = 3.5 + 4 + fractions.Fraction(2, 3) + 2 + fractions.Fraction(2, 15)\n    \n    # Calculate the denominator of the small fraction to be divided with\n    small_fraction_denominator = 0.5 * (1 + fractions.Fraction(1, 20) + 4.1)\n    \n    # Now calculate the answer by dividing the numerators and then dividing the result with the denominators\n    ans = (numerator / denominator) / (small_fraction_numerator / small_fraction_denominator)\n    \n    # Return the float value of the answer\n    return float(ans)\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the cost of one banana and p represent the cost of one pear.\n    b, p = symbols('b p')\n    \n    # Max buys 1 banana and 2 pears for 94p.\n    equation1 = Eq(b + 2 * p, 94)\n    \n    # Emily buys 1 banana and 1 pear for 62p.\n    equation2 = Eq(b + p, 62)\n    \n    # Solve the system of equations for b (cost of one banana) and p (cost of one pear).\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # We want to find the cost of one banana.\n    return solutions[b]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both = swimming + jogging - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    rate_a = 1 / 15\n    # B's work rate per day\n    rate_b = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * (rate_a + rate_b)\n\n    # Remaining work to be done by B alone\n    remaining_work = 1 - work_done_4_days\n\n    # Time for B to finish the remaining work\n    time_for_b = remaining_work / rate_b\n\n    return time_for_b\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    num_trees = (road_length / distance_between_trees) + 1\n    return int(num_trees)\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda can do 1 problem every 5 minutes\n    # Cici can do 1 problem every 6 minutes\n    # Together, the rate of doing problems per minute is their individual rates combined\n    linda_rate = 1 / 5\n    cici_rate = 1 / 6\n\n    # Total rate of working together\n    total_rate = linda_rate + cici_rate\n\n    # Total time in minutes is 2 hours, which is 120 minutes\n    total_time = 2 * 60\n\n    # Total number of problems they can do together is the total rate multiplied by the total time\n    total_problems = total_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    x = symbols('x')\n\n    # Amy gives x apples to John. She will have 37-x apples and John will have 15+x apples.\n    # Amy should have exactly 4 more apples than John after giving x apples.\n    equation = Eq(amy - x, john + x + 4)\n\n    result = solve(equation)\n\n    return result[x]  # This is the number of apples Amy gives to John.\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    \n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n   \n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    return 15\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    time_late = 18\n    bus_frequency = 45\n    wait_time = bus_frequency - (time_late % bus_frequency)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_value = 37\n    total_count = 10\n    total_sum = mean_value * total_count\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    number_of_books_nine = 9\n    number_of_books_seven = 7\n\n    # Find the cost per book using unit rate\n    cost_per_book = total_cost_nine_books / number_of_books_nine\n\n    # Find the total cost for seven books\n    total_cost_seven_books = cost_per_book * number_of_books_seven\n\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let x be the total amount of grass available\n    # From the problem, we know:\n    # The total grass can feed 14 goats for 15 days, so 1 goat can be fed for 14 * 15 days.\n    # 1 goat = 4 rabbits in terms of eating, so 1 rabbit can be fed for 14 * 15 / 4 days.\n    # Hence, 70 rabbits for 8 days implies 1 rabbit can be fed for 70 * 8 days.\n    # Since these two should be equal, we have:\n    # 14 * 15 = 70 * 8 / 4\n    # From this we can calculate the amount of grass one goat (or 4 rabbits) eat per day.\n\n    # Calculating the number of days that the pasture can feed 17 goats and 20 rabbits\n    # Total consumption of goats per day = 17 * the amount of grass one goat eats per day\n    # Total consumption of rabbits per day = 20 * the amount of grass one rabbit eats per day\n    # Total consumption per day by all animals = consumption by goats + consumption by rabbits\n    # Total number of days = Total grass / Total consumption per day\n\n    grass_per_goat_per_day = 14 * 15\n    grass_per_rabbit_per_day = grass_per_goat_per_day // 4\n\n    goats_consumption_per_day = 17 * grass_per_goat_per_day\n    rabbits_consumption_per_day = 20 * grass_per_rabbit_per_day\n\n    total_consumption_per_day = goats_consumption_per_day + rabbits_consumption_per_day\n\n    # Since 1 goat days = 4 rabbit days, we convert all to rabbit days for ease of calculation\n    total_grass_in_rabbit_days = 70 * 8\n    \n    number_of_days = total_grass_in_rabbit_days / (17 * 4 + 20)\n    \n    return int(number_of_days)\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for Sandra, Tasha, and Riley\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    # Given equations\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3/5) * sandra)\n    equation3 = Eq(tasha - riley, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4 - toh / 3, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climbed = 0\n    day = 0\n    slide = 1\n\n    while climbed < height:\n        day += 1  # Each iteration represents a new day\n        climbed += 10  # Snail climbs 10 meters during the day\n\n        if climbed >= height:\n            break  # Snail reaches the top of the tower, no need to slide down\n\n        climbed -= slide  # Snail slides down at night\n        slide += 1  # The slide distance increases each night\n    \n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    # Solve the equation\n    solutions = solve(equation, x)\n    \n    # Return the solution for x\n    return solutions[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    term = 4\n    repeats = 3\n    value = sum(int(str(term) * i) for i in range(1, repeats + 1))\n    return value\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_saving = sum(savings) / len(savings)\n    return mean_saving\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "from itertools import permutations\n\ndef solution():\n    # Define the original password and the attempted password\n    original_password = \"0141705021\"\n    try_password = \"4005220912\"\n    \n    # Generate all unique permutations for \"Angel\"\n    original_permutations = set([''.join(p) for p in permutations(original_password)])\n    \n    # Check if the new password attempt is among these permutations\n    if try_password in original_permutations:\n        # Andy can unlock the treasure chest\n        return True\n    else:\n        # Andy cannot unlock it and should use the correct password\n        # Assuming Michelle creates the password with a new pattern but the same digits\n        correct_password = ''.join(sorted(original_password))  # Sorted digits\n        return correct_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # Initialize count to 0\n    count = 0\n    # Loop through all possible splits of 6 into two or more parts\n    # The minimum number we can have is 1, and the maximum is 6 - 1 = 5\n    # because we need at least two numbers to make a sum.\n    for x1 in range(1, 6):\n        for x2 in range(1, 6 - x1 + 1):\n            count += 1  # Every (x1, x2) tuple is a unique way to split 6\n            # Check if there's room for a third number\n            if 6 - x1 - x2 > 0:\n                for x3 in range(1, 6 - x1 - x2 + 1):\n                    count += 1  # Every (x1, x2, x3) tuple is a unique way to split 6\n                    # Check if there's room for a fourth number\n                    if 6 - x1 - x2 - x3 > 0:\n                        for x4 in range(1, 6 - x1 - x2 - x3 + 1):\n                            count += 1  # Every (x1, x2, x3, x4) tuple is a unique way to split 6\n                            # Check if there's room for a fifth number\n                            if 6 - x1 - x2 - x3 - x4 > 0:\n                                for x5 in range(1, 6 - x1 - x2 - x3 - x4 + 1):\n                                    count += 1  # Every (x1, x2, x3, x4, x5) tuple is a unique way to split 6\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert each recurring decimal to its fraction representation and sum them\n\n    # To convert a recurring decimal to a fraction:\n    # For 0.0(1), the fraction is 1/90 (since 0.01 repeating is 1/99 and there's one zero after the decimal point which adds a factor of 10 in the denominator).\n    # For 0.1(2), the fraction is 12/90 (since 0.12 repeating is 12/99 and there's one zero after the decimal point which adds a factor of 10 in the denominator).\n    # For 0.2(3), the fraction is 23/90 ... and so on.\n\n    # Sum as fractions (numerator) divided by 90\n    total_numerator = 1 + 12 + 23 + 34 + 45 + 54 + 78\n    total_denominator = 90\n\n    # The final fraction\n    final_fraction = total_numerator / total_denominator\n\n    return final_fraction\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    ans = 0\n    for x in range(2017, 2036):\n        for y in range(x + 1, 2036):\n            for z in range(y + 1, 2036):\n                if (x + y + z) % 4 == 0:\n                    ans += 1\n    return ans\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n    max_sheep_in_pen = (sheep + pens - 1) // pens\n    return max_sheep_in_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', real=True, positive=True)\n    x = sqrt(a) - 2 / sqrt(a)\n    expression = sqrt(x**2 + 8 * x)\n\n    # Substitute x value in terms of a into expression\n    result = expression.subs(sqrt(x), sqrt(a) - 2 / sqrt(a))\n\n    # Simplify to find the final result in terms of 'a'\n    ans = simplify(result)\n    \n    return ans\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total_members = boys + girls\n\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = boys * mean_age_boys\n    total_age_girls = girls * mean_age_girls\n\n    total_age = total_age_boys + total_age_girls\n    mean_age = total_age / total_members\n\n    return mean_age\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 6), (8, 13)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 200 or num > 300:\n        num += 6 * 13\n\n    return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    return lcm(6, 12, 16)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # In the worst case, she could take out 4 green balls and 4 yellow balls\n    # without getting 5 balls of the same color.\n    # After that, no matter what she picks next, she will have 5 of the same color,\n    # because she can only take a green or yellow ball, making 5 of that color.\n    # The red balls do not matter in this case because we are looking for 5 of the same color.\n    \n    worst_case = 4 + 4 + 1  # +1 for the next ball she picks\n\n    return worst_case\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Mapping of characters to the numbers according to \"Angel\" -> 0141705021 mapping\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n\n    # We invert the mapping to get number to character so we can translate \"Devil\" code\n    number_to_angel = {value: key for key, value in angel_to_number.items()}\n    \n    # We now need to represent \"Devil\" using the mapping\n    devil_to_number = {'D': '0', 'e': '4', 'v': '2', 'i': '9', 'l': '5'}\n    \n    # Check if Andy's input matches the \"Devil\" code using the new mapping\n    andy_input = '4005220912'\n    devil_code = ''.join(devil_to_number[char] for char in 'Devil')\n\n    # Andy can unlock if the input matches the devil code\n    can_unlock = (andy_input == devil_code)\n\n    # If Andy can't unlock, provide the correct password\n    if not can_unlock:\n        # Convert the input Andy used to the correct characters using the \"Angel\" to number mapping\n        correct_password_characters = [number_to_angel.get(digit, '') for digit in andy_input]\n        correct_password = ''.join(correct_password_characters)\n    else:\n        correct_password = ''\n\n    return can_unlock, correct_password\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the mass of a table and a chair\n    table, chair = symbols('table chair')\n    \n    # Equation 1: Total mass of 3 tables equals total mass of 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    \n    # Equation 2: A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Split the numbers into their digits\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    \n    # Apply the operation as per the given rule\n    result = a * b + c * d\n    \n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25  # The difference between the consecutive terms\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Total distance swam by both is their relative speed times time\n    # since they are swimming towards each other\n    relative_speed = 1 + 0.6  # in m/s\n    time_swam = 10 * 60  # 10 minutes in seconds\n    total_distance_swam = relative_speed * time_swam\n\n    # Each lap is 30m forward and 30m back, so 60m in total\n    lap_distance = 30 * 2\n\n    # The number of meetings is the number of laps (or parts of laps) divided by two\n    # since they meet twice for every lap (once at each end of the pool)\n    meetings = total_distance_swam // lap_distance\n\n    return int(meetings)\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_and_cindy_average = 120\n    doris_height = 126\n    total_height_for_bob_and_cindy = bob_and_cindy_average * 2\n    \n    total_height_for_all_three = total_height_for_bob_and_cindy + doris_height\n    average_height_for_all_three = total_height_for_all_three / 3\n    \n    return average_height_for_all_three\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    destin_age = solutions[destin]\n    nephew_age = solutions[nephew]\n\n    sum_of_ages_in_10_years = (destin_age + 10) + (nephew_age + 10)\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq((20 * boys + 60 * girls) / 40, 35)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume both had x pies initially\n    x = symbols('x')\n\n    # Mrs Tan now has x + 12 pies\n    # Mrs Lim now has x - 4 pies\n    # According to the condition:\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation\n    initial_pies = solve(equation, x)\n\n    return initial_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = 6 * 60 + 35  # Convert departure time to minutes past midnight\n    arrival_time = 10 * 60 + 22   # Convert arrival time to minutes past midnight\n    travel_time = arrival_time - departure_time  # Calculate the travel time in minutes\n    \n    return travel_time\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    length_of_pattern = len(pattern)\n    num_repetitions = 50 // length_of_pattern\n    remaining_digits = 50 % length_of_pattern\n\n    sum_repetitions = num_repetitions * sum(int(digit) for digit in pattern)\n    sum_remaining = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    total_sum = sum_repetitions + sum_remaining\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    result = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return result\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    sweets_first_group = 6 * (3/5) * total_sweets / 6\n    remaining_sweets = total_sweets - sweets_first_group\n    students_first_group = sweets_first_group / 6\n    students_second_group = (1/4) * remaining_sweets / 4\n    sweets_second_group = 4 * students_second_group\n    remaining_sweets_after_second_group = remaining_sweets - sweets_second_group\n    students_third_group = remaining_sweets_after_second_group / 5\n    \n    total_students = students_first_group + students_second_group + students_third_group\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    products = {card: set() for card in cards}\n\n    # Calculate the prime factorization for each card and associate them with the products dictionary\n    for card in cards:\n        product = 1\n        for other_card in cards:\n            if other_card != card:\n                product *= other_card\n            products[card].add(product)\n    \n    # Look for matching products between any two products set to determine unused card.\n    for card_a in products:\n        for card_b in products:\n            if card_a != card_b and products[card_a].intersection(products[card_b]):\n                return card_a\n\n    return -1  # Default return, should not be reached if there is a valid solution\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    # Packets for the two types of tablets\n    packet_one = 25\n    packet_two = 20\n\n    # Least common multiple of the two packet sizes\n    days_until_resync = lcm(packet_one, packet_two)\n\n    # March 1st is considered as day 1, hence subtract 1 to calculate next start date\n    return days_until_resync - 1\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    for odd in range(999, 0, -2): # Starting from 999, since it's the largest 3-digit odd number\n        can_split = False\n        for i in range(2, odd // 2 + 1): # No need to go beyond half of 'odd'\n            if is_composite(i) and is_composite(odd - i - 1) and is_composite(1):\n                can_split = True\n                break\n        if not can_split:\n            return odd\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Converting the mixed fractions into improper fractions\n    first_fraction_numerator = (3 * 4) + 1  # for 3 1/4\n    second_fraction_numerator = (1 * 4) + 3  # for 1 3/4\n\n    # The denominators for both fractions are the same, i.e., 4\n    denominator = 4\n    \n    # Difference of the two improper fractions\n    difference_in_fractions = (first_fraction_numerator - second_fraction_numerator) / denominator\n\n    return difference_in_fractions\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    last_term = 99\n    common_difference = 4\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    for equal_side in range(1, perimeter // 2):\n        for base in range(1, perimeter):\n            if 2 * equal_side + base == perimeter and equal_side > base / 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    # The sum of the current ages of the two brothers\n    equation1 = Eq(elder + younger, 42)\n\n    # A few years ago, when the elder brother was at the current age of the younger brother, \n    # the younger brother was exactly half the elder brother’s current age\n    # Let's introduce 'diff' to be the difference in ages a few years ago\n    diff = elder - younger\n    equation2 = Eq(younger - diff, elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using the Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n    \n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    A = 8\n    B = 12\n    C = 20\n\n    # Find the greatest common divisor of the three numbers\n    gcd_ab = gcd(A, B)\n    greatest_common_divisor = gcd(gcd_ab, C)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n    \n    passed_second_exam = total_students - failed_second_exam\n    passed_only_first_exam = passed_first_exam - (passed_second_exam - passed_second_failed_first)\n    \n    return passed_only_first_exam\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    # Let x be the number of girls, then the number of boys will be 3x.\n    # Each girl received $5, so total money received by girls is 5x.\n    # Each boy received $8, so total money received by boys is 3x * 8 = 24x.\n    # Together, they received $580, so the equation will be: 5x + 24x = 580\n    # This simplifies to 29x = 580\n\n    # Solve for x to find the number of girls\n    x = 580 // 29\n\n    # The number of boys\n    num_boys = 3 * x\n\n    return num_boys\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # direct routes from A to D\n    direct_routes_AD = 6\n    \n    # routes from A to B to D (A -> B -> D)\n    routes_ABD = 7 * 5 * 2\n    \n    # routes from A to C to D (A -> C -> D)\n    routes_ACD = 4 * 2\n    \n    # Total routes is the sum of all possibilities\n    total_routes = direct_routes_AD + routes_ABD + routes_ACD\n    \n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let the number of chocolate cupcakes be c and cheese cupcakes be h\n    # Total cupcakes = chocolate + cheese = 255\n    # After selling 40% of chocolate and 75% of cheese, he is left with equal numbers\n    # That means he is left with 60% of chocolate and 25% of cheese\n    # So, 0.6c = 0.25h\n    # Also, c + h = 255\n    # We can solve these equations to find the values of c and h\n\n    from sympy import symbols, Eq, solve\n\n    c, h = symbols('c h')\n    equation1 = Eq(c + h, 255)\n    equation2 = Eq(0.6 * c, 0.25 * h)\n\n    solutions = solve((equation1, equation2), (c, h))\n\n    # Cupcakes left after selling\n    chocolate_left = 0.6 * solutions[c]\n    cheese_left = 0.25 * solutions[h]\n\n    return chocolate_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pencil_price = 2\n    total_cost = 20\n    total_pencil_cost = 3 * pencil_price\n\n    pen_price = (total_cost - total_pencil_cost) / 2\n    return pen_price\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # kilograms of hay\n    cattle = 5       # number of cattle\n    days = 10        # number of days\n\n    hay_per_day_per_cattle = total_hay / (cattle * days)\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    # Initialize the answer variable\n    ans = None\n    # Iterate through all possibilities for the children's ages\n    for x in range(1, 10):\n        for y in range(x+1, 10):  # y > x\n            for z in range(y+1, 10):  # z > y\n                if x * y * z == 210:\n                    ans = x  # The youngest child's age is the smallest factor\n                    break\n            if ans is not None:\n                break\n        if ans is not None:\n            break\n    return ans\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls', integer=True)\n\n    # Equation based on the given condition\n    equation = Eq((1/4) * boys, (2/5) * girls)\n\n    # The total number of students is the sum of boys and girls\n    total_students_eq = Eq(boys + girls, 39)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_students_eq), (boys, girls))\n\n    # Calculate the difference between the number of boys and girls\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_weight = 960\n    box_capacity = 8\n    num_boxes = total_weight // box_capacity\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    killed_seedlings = total_seedlings * fraction_killed\n    surviving_seedlings = total_seedlings - killed_seedlings\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n\n    days_lasted = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - (days_lasted * daily_consumption)\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    # Let the initial number of stickers Don had be 2x\n    # Let the initial number of stickers Ben had be 3x\n    # After Don bought another 10 stickers and Ben lost 5 stickers, the numbers are:\n    # Don: 2x + 10, Ben: 3x - 5\n    # The new ratio is 6 : 7, therefore:\n    # (2x + 10) / (3x - 5) = 6 / 7\n\n    # Solving for x, we will use algebraic manipulation:\n    # 7 * (2x + 10) = 6 * (3x - 5)\n    # 14x + 70 = 18x - 30\n    # 4x = 100\n    # x = 25\n\n    # Now we can find the initial number of stickers Don had:\n    # Don had initially 2x stickers, which means 2 * 25:\n    initial_don_stickers = 2 * 25\n\n    return initial_don_stickers\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of $5 and $10 notes as symbols\n    fives, tens = symbols('fives tens')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(fives + tens, 116)  # Total number of notes\n    equation2 = Eq((1 - 0.60) * tens, (4/7) * (1 - 0.25) * fives)  # Ratio after spending\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (fives, tens))\n\n    # How much money he had initially\n    total_money = solutions[fives]*5 + solutions[tens]*10\n\n    # How much he spent\n    spent_money = 0.60 * solutions[tens]*10 + 0.25 * solutions[fives]*5\n\n    # Cost of the bag is the amount spent on it\n    bag_cost = spent_money\n\n    return bag_cost\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    number_to_subtract = remainder if remainder == 0 else 25 - remainder\n    return number_to_subtract\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # This is a series where positive and negative numbers alternate\n    # With positive numbers being even and negative numbers being odd\n    # The series alternates between adding an even number and subtracting the subsequent odd number\n    # Starting from 2 and ending at 2016, so the last number is 2016 which is positive\n    # The sum of an arithmetic series is given by the formula:\n    # sum = n/2 * (first_term + last_term)\n    # Here, 2, 4, 6,...,2016 form an arithmetic sequence with a common difference of 2\n    # The number of even terms from 2 to 2016 is given by (2016 - 2)/2 + 1\n    \n    even_terms = (2016 - 2) // 2 + 1\n    sum_even_terms = even_terms / 2 * (2 + 2016)\n    \n    # The sum of an arithmetic sequence with the odd number of terms is:\n    # sum = n/2 * (first_term + last_term)\n    # Here, 3, 5, 7,...,2015 form an arithmetic sequence with a common difference of 2\n    # The number of odd terms from 3 to 2015 is (2015 - 3)/2 + 1\n    \n    odd_terms = (2015 - 3) // 2 + 1\n    sum_odd_terms = odd_terms / 2 * (3 + 2015)\n\n    # The final answer is the difference between the sum of even terms and the sum of odd terms\n    ans = sum_even_terms - sum_odd_terms\n\n    return int(ans)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # Maximum product is achieved when the numbers are close to each other\n    # Start with the middle value for a and find corresponding b and c\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        total_sum += (2 * i - 1) * (2 * i + 1)\n        \n    ans = total_sum // 2\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n    number_of_trees = (road_length // tree_interval) + 1  # plus 1 for the tree at the starting point\n\n    return number_of_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    desired_cups = 30\n    gallons_needed = desired_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    # Total factorial for the unique people\n    total_arrangements = factorial(5)\n\n    # Ways to arrange the triplet sisters themselves\n    sisters_arrangements = factorial(3)\n\n    # Ways to arrange the whole group treating triplet sisters as one unit\n    combined_arrangements = total_arrangements * sisters_arrangements\n\n    # Now we calculate the arrangements where the twin brothers are NOT together\n    # Start by arranging everyone including twins being together\n    twins_together_arrangements = factorial(4) * sisters_arrangements\n\n    # Number of positions the twins can occupy (next to each other)\n    twins_positions = 4\n\n    # Total arrangements where twins are together\n    twins_together_arrangements *= twins_positions\n\n    # Final result is all valid arrangements subtracting the invalid ones (twins together)\n    ans = combined_arrangements - twins_together_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    # The number of students\n    students = 320\n    # The number of weeks in a year\n    weeks = 52\n    \n    # Using the Pigeonhole Principle to find the least number of students\n    # in the week with the most students, we divide the total number of students\n    # by the number of weeks and take the ceiling of that number.\n    # However, since we are looking for the worst case, it means one week could have\n    # one more student than the others (when the total number of students is not\n    # perfectly divisible by the number of weeks).\n    \n    min_students_in_most_populated_week = (students // weeks) + (students % weeks > 0)\n    \n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # A week has 7 days, so we will divide 55 by 7\n    weeks = 55 // 7\n    remaining_days = 55 % 7\n    # The maximum possible Fridays (7 weeks worth of Fridays)\n    max_fridays = weeks\n    \n    # When summer vacation starts, it can begin on any day of the week.\n    # If it starts on a Saturday, then the 55th day will be a Friday,\n    # Which would give one more Friday, if the leftover days are enough.\n    # Let's determine if this additional Friday is possible.\n    \n    # Check how many days are before Friday if the vacation started on Saturday (6 days before Friday)\n    days_before_friday = 6\n    \n    if remaining_days >= days_before_friday:\n        # If there are 6 or more remaining days in the vacation, an extra Friday is possible.\n        max_fridays += 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    # Calculate how many pencils Owen needs to give to match the cost of one pen\n    pencils_for_one_pen = pen_cost / pencil_cost\n    \n    return int(pencils_for_one_pen)\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "from sympy import lcm\n\ndef solution():\n    # Calculate least common multiple of the given divisors\n    divisors = [2, 3, 4, 5, 6, 8, 9]\n    lcm_value = lcm(divisors)\n    \n    # Find the smallest number N that satisfies the condition\n    # N % 7 = 5, so we start testing from N = lcm_value + 5\n    N = lcm_value + 5\n    \n    while True:\n        if N % 7 == 5:\n            return N\n        else:\n            N += lcm_value\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Calculate the cost per single mug and single pen\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n\n    # Calculate total cost for 7 mugs and 5 pens\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    \n    # Calculate change from £10\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_going = total_pupils - pupils_away\n    return int(pupils_going)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    minutes_per_child = 3\n    songs_per_child = 2\n    number_of_children = 50\n    \n    total_time = minutes_per_child * songs_per_child * number_of_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_5_apples = 580\n    remaining_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_5_apples - remaining_weight_with_2_apples\n    weight_of_basket = remaining_weight_with_2_apples - (2 * (weight_of_3_apples / 3))\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    if 0.25 > 0.3:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since this problem only requests to solve for the value of 1,\n    # which is already a numerical constant, the solution is trivial.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5%\n\n    # Calculate the number of years using formula A = P(1 + rt)\n    # where A is the final amount, P is the principal, r is the interest rate, and t is the time in years\n    years = (final_amount / principal - 1) / interest_rate\n\n    # Check if Bella's statement is correct\n    if round(years) == 5:\n        return True, 5\n    else:\n        return False, round(years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    number_of_boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * number_of_boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # The least common multiple of 3 and 7\n    ans = 0\n    i = 1\n    while True:\n        num = lcm * i\n        if str(num)[-1] == '2':\n            ans = num\n            break\n        i += 1\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # equation for the initial ratio\n    equation1 = Eq(cookies, 3 * cakes)\n\n    # equation after selling\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # solve the system\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # calculate the cookies left\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_one_week = 7\n    number_of_weeks = 2\n    days_in_two_weeks = days_in_one_week * number_of_weeks\n    return days_in_two_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_1st_3 = 3 * 10**2  # The 3 in the hundreds place\n    value_2nd_3 = 3 * 10**5  # The 3 in the hundred thousands place\n    ans = value_2nd_3 - value_1st_3\n    return ans\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be John's time to build the wall alone\n    x = symbols('x')\n\n    # John, Jonah, and Angus rate\n    jjaj_rate = 1 / 27\n\n    # Jonah and Angus rate\n    ja_rate = 1 / 36\n\n    # John's rate (since Jonah and Angus rate is John, Jonah and Angus rate subtracted from Jonah and Angus rate)\n    john_rate = jjaj_rate - ja_rate\n\n    # Time for John to build the wall on his own is the inverse of his rate\n    john_time = 1 / john_rate\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2**17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Using Frobenius Coin Problem solution to find the largest amount that cannot be paid\n    # formula for the largest unpayable amount with two coin denominations a and b is (a*b) - a - b\n    a = 4  # $4z coin\n    b = 5  # $5z coin\n\n    largest_unpayable = (a * b) - a - b\n    return largest_unpayable\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # The sum of the 10 positive integers is 1001\n    sum_of_numbers = 1001\n    # To find the maximum possible value of 'd', the GCD of the numbers,\n    # all the numbers must be divisible by 'd'\n    # Hence, 'd' can be at most the total sum divided by 10 (number of integers)\n    d = sum_of_numbers // 10\n    \n    # The largest 'd' that is possible while maintaining the sum of 1001\n    # is the largest divisor of 1001 that is less than or equal to 100.\n    while sum_of_numbers % d != 0:\n        d -= 1\n\n    return d\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for ab in range(100):\n        number = int(f\"1082{ab:02}\")\n        if number % 12 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    import math\n    length_1 = 45\n    length_2 = 30\n    longest_piece_length = math.gcd(length_1, length_2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be the current combined age of Claire and Daniel.\n    # Five years ago, their combined age was (x - 5*2) because each was 5 years younger.\n    # According to the problem, this value was 14.\n    # x - 10 = 14\n    # Solving for x gives us the current combined age:\n    x = 14 + 10\n\n    # To find the combined age in 3 years, we add 3 years to each of their current ages.\n    # Since there are two people, we add 3*2 to the combined age\n    combined_age_in_3_years = x + 3*2\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3*apple + 4*pear, 1.81)\n    equation2 = Eq(5*apple + 2*pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears.evalf()\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let b be the original number of boys and g be the original number of girls\n    students_total = 152\n    # If we remove 1/11 of the boys and 5 girls, then b - b/11 and g - 5 should be equal.\n    # Therefore, we can set up the following equation: b - b/11 = g - 5\n\n    # Since the total number of students is 152, we have b + g = 152.\n    # We can express g in terms of b from the first equation: g = b - b/11 + 5\n    # Substituting g in the second equation:\n    # b + (b - b/11 + 5) = 152\n    # b + b - b/11 + 5 = 152\n    # 11b + 11b - b + 55 = 11 * 152\n    # 21b + 55 = 11 * 152\n    # 21b = 11 * 152 - 55\n    \n    # Solving for b gives us the original number of boys\n    b = (11 * students_total - 55) // 21\n\n    return b\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    num_boxes = total_pencils // pencils_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Amanda, Bernie, and Cathy\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    # Since Amanda received twice as many stickers as Bernie\n    equation1 = Eq(amanda, 2 * bernie)\n    \n    # Cathy received 3 times as many stickers as Amanda\n    equation2 = Eq(cathy, 3 * amanda)\n    \n    # Together, they received a total of 378 stickers\n    equation3 = Eq(amanda + bernie + cathy, 378)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    # Calculate the number of stickers Amanda and Cathy received altogether\n    stickers_amanda_cathy = solutions[amanda] + solutions[cathy]\n    \n    return stickers_amanda_cathy\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (7 * 3) + (24 % 3)\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle\n    total = french + japanese + italian\n    total -= french_japanese + french_italian + japanese_italian\n    total += all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    litres_of_water = total_orange_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Ermintrude lays 50 eggs a day\n    eggs_per_day = 50\n\n    # Eggs become adults in 30 days\n    maturation_period = 30\n\n    # The total number of days we are considering\n    total_days = 40\n\n    # For the first 30 days, all the eggs laid will become adults\n    # From day 31 and onward, we won't count new eggs since they won't\n    # be adults by day 40\n    if total_days <= maturation_period:\n        new_adults = eggs_per_day * total_days\n    else:\n        new_adults = eggs_per_day * maturation_period\n\n    return new_adults\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    number_of_rows = 22\n\n    # Using Arithmetic progression sum formula: Sn = n/2 (2a + (n-1)d)\n    total_students = (number_of_rows / 2) * (2 * first_term + (number_of_rows - 1) * difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int('5' + str(abcd))\n        N = int(str(abcd) + '5')\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(21*286 + 21, 286)\n    num2 = Fraction(6*2530 + 647, 2530)\n    num3 = Fraction(1*2829 + 1370, 2829)\n    \n    ans = num1 / num2 * num3\n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 0.30 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_amount = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n    \n    remaining_amount = total_amount - (pencil_cost + ruler_cost)\n    return remaining_amount\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)  # Maria has 20 apples more than Anne.\n    equation2 = Eq(anne + maria, 44)  # Together they have 44 apples.\n\n    solutions = solve((equation1, equation2), (anne, maria))\n    \n    return solutions[anne]\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the cuboid\n    length = 6\n    width = 10\n    height = 12\n\n    # Find the size of each small cube\n    num_cubes = 720\n    volume_small_cube = (length * width * height) / num_cubes\n    \n    # Since all small cubes are the same size, they must form a perfect cube\n    # Therefore, we find the side length of a small cube\n    side_length_small_cube = volume_small_cube ** (1/3)\n\n    # Calculate the number of small cubes along each dimension\n    num_cubes_length = int(length / side_length_small_cube)\n    num_cubes_width = int(width / side_length_small_cube)\n    num_cubes_height = int(height / side_length_small_cube)\n\n    # Calculate the number of cubes with exactly one face painted along each dimension\n    # For each face, we need to exclude the cubes at the edges\n    cubes_with_one_painted_face = 0\n\n    # Top and bottom faces\n    cubes_with_one_painted_face += 2 * (num_cubes_length - 2) * (num_cubes_width - 2)\n\n    # Front and back faces\n    cubes_with_one_painted_face += 2 * (num_cubes_length - 2) * (num_cubes_height - 2)\n\n    # Left and right faces\n    cubes_with_one_painted_face += 2 * (num_cubes_width - 2) * (num_cubes_height - 2)\n\n    return cubes_with_one_painted_face\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # For the first classroom, there are 20 possible keys.\n    # For the second classroom, once the first key has been found, there are 19 keys left to try.\n    # For the third classroom, there are 18 keys left to try, and so on.\n    # Summing these attempts gives the number of tries in the worst case.\n    \n    max_tries = sum(range(1, 21))\n\n    return max_tries\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # Calculate total number of ways to equally distribute 140 candies\n    # to piles where the size of each pile is an odd number.\n    # First, we perform prime factorization of 140 which is 2^2 * 5 * 7\n    # Since the number of pieces in each pile is odd, we ignore the powers of 2,\n    # and only consider the odd prime factors, which are 5 and 7.\n\n    # We add 1 to the powers of the remaining primes and multiply them\n    # This gives us the number of divisors of 140 that are odd\n    # Which corresponds to the number of ways to distribute the candies into\n    # piles of odd numbers.\n\n    # The number of odd divisors is (1+1) * (1+1) - 1 = 3 * 2 - 1 = 5\n    # We subtract 1 to exclude the case where all candies are in one pile\n    # since the number of piles must be greater than 1.\n    odd_divisors = [d for d in divisors(140) if d % 2 != 0]\n    ans = len(odd_divisors) - 1\n\n    return ans\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_of_girls = 3 / 7\n\n    num_of_girls = total_students * fraction_of_girls\n\n    return int(num_of_girls)\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B\n    stack_a = 20\n    stack_b = 16\n\n    # To ensure a win, Jerry must create a situation where both stacks have the same number of stones,\n    # because no matter how many stones Tom takes from one stack, Jerry can always take the same number \n    # from the other stack, ensuring that he gets the last stone.\n    # Since Stack B has less stones, Jerry should take stones from Stack A.\n    stones_to_take = stack_a - stack_b\n\n    # Jerry takes (20 - 16) stones from Stack A\n    return stones_to_take, \"A\"\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    # This sequence is simply adding and subtracting the same number except for 100.\n    # Thus every pair of +n, -n cancel each other out except for 100.\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    total_pages = 0\n    page = 1\n\n    while digits > 0:\n        page_length = len(str(page))\n        digits -= page_length\n        total_pages += 1\n        page += 1\n\n    return total_pages - 1 if digits < 0 else total_pages\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 92):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time to minutes\n    end_time = (11 * 60) + 6    # Convert end time to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial count of each pen color in Box A\n    blue_A = red_A = black_A = green_A = 10\n\n    # Move 20 pens from Box A to Box B (from each color)\n    # We don't need the count in Box B as we are interested in returning to Box A\n    blue_A -= 20\n    red_A -= 20\n    black_A -= 20\n    green_A -= 20\n    \n    # Now we need to return pens to Box A to ensure there are at least 15 of each color\n    # Since all counts are the same, we can calculate for one and multiply by 4\n    pens_to_return_per_color = max(0, 15 - blue_A)  # Max to account for the negative count\n    total_pens_to_return = 4 * pens_to_return_per_color\n\n    return total_pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Since the newspaper is folded, each sheet consists of 4 page numbers.\n    # Removing the third sheet effectively means removing pages 9 to 12.\n    # Need to calculate the sum of these four page numbers.\n    \n    third_sheet_pages = [9, 10, 11, 12]\n    sum_of_pages = sum(third_sheet_pages)\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # The divisor is the (sum of dividend and divisor minus the remainder) divided by (quotient plus 1)\n    divisor = (sum_dividend_divisor - remainder) / (quotient + 1)\n    # The dividend is the product of the quotient and divisor plus the remainder\n    dividend = quotient * divisor + remainder\n\n    # The difference is the dividend minus the divisor\n    difference = dividend - divisor\n\n    return int(difference)\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    first_number = 120\n    second_number = 300\n    halfway_point = (first_number + second_number) / 2\n    return halfway_point\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Initialize the total number of students and extra boys.\n    total_students = 0\n    extra_boys = 32\n    \n    # Iterate over the possible sizes of the square array (side length must be at least 3 to have both boys and girls)\n    for side_length in range(3, 1000, 2):  # Side length increments by 2 to maintain alternating layers\n        # Calculate the number of boys (all four sides of the outer layer, minus the overlapping corners)\n        boys = 4 * side_length - 4\n        # Calculate the number of girls (all four sides of the next inner layer, minus the overlapping corners)\n        girls = 4 * (side_length - 2) - 4\n        \n        # Calculate the remaining students as the difference between boys and girls\n        remaining_students = extra_boys - (boys - girls)\n        \n        # The remaining students should form a square\n        if remaining_students > 0 and (remaining_students ** 0.5).is_integer():\n            # Calculate the total students\n            total_students = boys + girls + remaining_students\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Since there are 12 milk chocolates and 16 have soft centres, it is guaranteed that all milk chocolates have soft centres.\n    # Therefore, the remaining soft centre chocolates must be plain.\n    soft_centre_plain_chocolates = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n\n    return soft_centre_plain_chocolates\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_playing_violin = 12.5\n    number_of_violin_players = 11\n\n    total_pupils = (number_of_violin_players * 100) / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the total number of stickers, y is the number of pupils\n\n    equation1 = Eq(x - 13*y, 190)\n    equation2 = Eq(x - 17*y, 50)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    equation1 = Eq(apples + pears, 105)\n    equation2 = Eq((apples - apples/3) / (pears - 2*pears/5), 5/6)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins_1p, coins_2p, coins_5p, coins_10p = symbols('coins_1p coins_2p coins_5p coins_10p')\n\n    # Each type of coin has equal number, so they are equal to a common variable coins\n    coins = coins_1p\n\n    # Equations based on the coin values and total sum\n    equation1 = Eq(coins_1p * 1 + coins_2p * 2 + coins_5p * 5 + coins_10p * 10, 90)\n    equation2 = Eq(coins_2p, coins)\n    equation3 = Eq(coins_5p, coins)\n    equation4 = Eq(coins_10p, coins)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (coins_1p, coins_2p, coins_5p, coins_10p))\n\n    # Calculate total number of coins\n    total_coins = solutions[coins] * 4  # since coins_1p, coins_2p, coins_5p, coins_10p are all same\n\n    return total_coins\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_matches = 6 * (6 - 1) // 2  # total matches played\n    total_points = total_matches * 2  # total points distributed\n    given_points = 7 + 6 + 5 + 4 + 3  # points of five students\n    remaining_points = total_points - given_points  # points of the remaining student\n\n    return remaining_points\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_eq = Eq(4 * B, 5 * A) & Eq(5 * C, 6 * B)\n    difference_eq = Eq(C - A, 10)\n\n    solutions = solve((ratio_eq, difference_eq), (A, B, C))\n    A_val = solutions[A]\n    B_val = solutions[B]\n    C_val = solutions[C]\n\n    return A_val + B_val + C_val\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    unit_rate = number_of_boys / boys_to_girls_ratio\n    number_of_girls = unit_rate * 5\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n    \n    n = 2 * total_players // (first_line + last_line)  # Total number of terms in the arithmetic sequence\n    \n    # The arithmetic sequence formula for the nth term is: first_line + (n - 1) * difference\n    # Hence, we solve for the difference:\n    difference = (last_line - first_line) // (n - 1)\n\n    return difference\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "import math\n\ndef solution():\n    # Treat A, B, C, D as one unit since they have to be next to each other\n    other_students = 12 - 4  # 8 other students\n    # There are 8! ways to arrange the 8 other students\n    arrangements_of_others = math.factorial(other_students)\n    \n    # There are 4! ways to arrange A, B, C and D among themselves\n    arrangements_of_ABCD = math.factorial(4)\n    \n    # Plus 1 additional unit makes it 9 units (ABCD + the other 8 students) \n    # that can be arranged in 9! ways, but since we've already calculated the \n    # arrangements of the other 8, we'll just multiply by 9 since it represents \n    # the arrangements of the ABCD unit among the 8 other students.\n    total_arrangements = arrangements_of_others * arrangements_of_ABCD * 9\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    num = 48 * 925 * 38 * 435\n    str_num = str(num)\n    \n    # Count the number of trailing zeros by reversing the number and counting the zeros until the first non-zero character\n    count_zeros = len(str_num) - len(str_num.rstrip('0'))\n    \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Dog barks 3 times every week\n    # There are 7 days in a week, so calculate total number of barks in 1000 days\n    total_barks = 3 * (1000 // 7)\n\n    # Probability of the dog barking when a thief is around is 0.9\n    # Hence, the number of times the dog barked during a theft would be\n    barks_during_theft = 2 * 0.9 \n\n    # Probability of the dog barking during the occurrence of the theft\n    probability = Rational(barks_during_theft, total_barks)\n\n    return probability\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    equation1 = Eq(apple, orange + 7)  # 7 more apple candies than orange candies\n    equation2 = Eq(apple, grape + 3)   # 3 more apple candies than grape candies\n    equation3 = Eq(pineapple, orange + 2)  # 2 more pineapple candies than orange candies\n    equation4 = Eq(orange + apple + grape + pineapple, 25)  # Total candies bought\n\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls = total_children * girls_ratio\n    boys = total_children - girls\n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n    \n    # Solve the system of equations for 'stickers'\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Since we need the smallest difference, we will assign the smallest possible digit to the\n    # highest place value for one number and the largest possible digit to the same place value for the other number.\n    \n    # The smallest nine-digit number using digits 1-9 is 123456789\n    # The largest nine-digit number using digits 1-9 is 987654321\n    \n    # To minimize the difference, we can arrange the remaining digits in ascending order for the largest number\n    # and in descending order for the smallest number. However, since the first and the last digits are already in place,\n    # swapping the second with the second last, third with the third last, and so on, won't change the difference.\n    \n    # Hence, the smallest possible difference will be given by changing the 1st place only:\n    # It will be: 912345678 - 812345679 = 99999999\n    \n    smallest_difference = 912345678 - 812345679\n\n    return smallest_difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_condition = Eq(boys, girls - 65)\n    after_recess_condition = Eq((2/5) * boys, (3/7) * girls)\n\n    solutions = solve((initial_condition, after_recess_condition), (boys, girls))\n\n    boys_left = (3/5) * solutions[boys]\n    girls_left = (4/7) * solutions[girls]\n\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9, 2412 % 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let total_bricks be the total number of bricks at first\n    # Let half_bricks be half the number of bricks moved on the first trip\n\n    total_bricks = symbols('total_bricks')\n    half_bricks = total_bricks / 2\n\n    # First trip: moved half_bricks - 26\n    first_trip = half_bricks - 26\n    \n    # Remaining bricks after first trip: total_bricks - first_trip\n    remaining_after_first = total_bricks - first_trip\n    \n    # Second trip: moved (remaining_after_first / 2) + 11\n    second_trip = (remaining_after_first / 2) + 11\n    \n    # Remaining bricks after second trip: total_bricks - first_trip - second_trip\n    remaining_after_second = total_bricks - first_trip - second_trip\n    \n    # Third trip: moved 68 bricks\n    # After third trip, 25 bricks are still unmoved\n    # Therefore, the equation is: total_bricks - first_trip - second_trip - 68 = 25\n\n    equation = Eq(total_bricks - first_trip - second_trip - 68, 25)\n\n    # Solve the equation\n    solution = solve(equation, total_bricks)\n\n    return solution[0]\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    total_pupils = Eq(girls + boys, 1690)\n    more_boys_than_girls = Eq(boys - girls, 90)\n    girls_swimming_ratio = Eq(girls_swim, 31 * (girls / 80))\n    girls_not_swimming_ratio = Eq(girls_not_swim, 49 * (girls / 80))\n    boys_swimming_difference = Eq(boys_not_swim, boys_swim + 120)\n\n    # Solve the equations\n    solutions = solve((total_pupils, more_boys_than_girls,\n                       girls_swimming_ratio, girls_not_swimming_ratio,\n                       boys_swimming_difference), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of A as 'a' and the weight of B as 'b'\n    a, b = symbols('a b')\n\n    # Given the original ratio of weights 5:3\n    equation1 = Eq(a / b, 5 / 3)\n\n    # If 10 grams are taken from A and added to B, the new weights are a - 10 and b + 10\n    # Given the new ratio of weights 7:5\n    equation2 = Eq((a - 10) / (b + 10), 7 / 5)\n\n    # Now, let's solve the two equations simultaneously to find the weights of A and B\n    solutions = solve((equation1, equation2), (a, b))\n\n    # The total weight of both bags is a + b\n    total_weight = solutions[a] + solutions[b]\n\n    return total_weight\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    total_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(total_passengers)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Mike's position is 2nd in line no matter how you count,\n    # which means there should be a square array (n x n), where n > 1\n    # and Mike's position is one away from the corner.\n\n    # Start from 3x3 (as 2x2 would not allow for Mike to be 2nd in line from all sides)\n    # and find the next perfect square that satisfies this condition\n    n = 3\n    while True:\n        if (n-1)**2 < 2 and 2 <= n**2:\n            ans = n**2\n            break\n        n += 1\n    return ans\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    final_sum_ages = 40\n    difference_in_years = final_sum_ages - current_sum_ages\n\n    return difference_in_years\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    ans = 0\n    for i in range(1, 21):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        new_number = int(original[3] + original[1:4])\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # The smallest possible non-zero positive integer divisor\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    def ways_to_climb(n):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        return ways_to_climb(n - 2) + ways_to_climb(n - 3)\n\n    ans = ways_to_climb(10)\n    return ans\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = \"1998\"\n    n = len(number)\n    while int(number) % 33 != 0:\n        number += \"1998\"\n        n += len(\"1998\")\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group = 5\n    a = group\n    b = group ** 2\n    c = group ** 3\n    \n    sum_of_numbers = a + b + c\n    return sum_of_numbers\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    num_rounds = total_distance / distance_per_round\n    return int(num_rounds)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    ratio = boys_in_line / girls_in_line\n    total_girls = total_boys / ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Proportion equation: 10/x = 14/21\n    # Cross multiply to find x\n    x = 10 * 21 / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # two-digit numbers ending in \"0\"\n        if num % 6 == 0 and num % 9 == 0:  # check if multiple of 6 and 9\n            return num\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27\n    ans = 0\n    for i in range(1, n):\n        if n * (n + 1) // 2 - i * (i + 1) // 2 < n:\n            break\n        ans = i\n    return ans\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # convert 3 m to cm\n    lengths_cm = [147, 32.5, 67]\n    used_length_cm = sum(lengths_cm)\n\n    fourth_length_cm = total_length_cm - used_length_cm\n    \n    return fourth_length_cm\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n    correct_answer = original_number + tens_more\n    johnny_answer = 5839\n\n    return correct_answer if johnny_answer != correct_answer else johnny_answer\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = pieces_of_paper // interval\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    a, b, c, d = 101, 234, 567, 89\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # starting with the first term which is 1\n    for i in range(2, 11):  # from 2 to 10\n        ans += (i - 1) * (1/i)  # i-1 times 1/i\n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    from itertools import product\n\n    probabilities = {'A': 0.5, 'B': 0.4, 'C': 0.2}\n    pass_fail = [1, 0]  # 1 for pass, 0 for fail\n\n    # Generate all possible combinations of pass/fail for A, B, C\n    scenarios = list(product(pass_fail, repeat=3))\n\n    # Count passing students for each scenario and multiply by respective probabilities\n    counts = {0: 0, 1: 0, 2: 0, 3: 0}\n    for scenario in scenarios:\n        count_pass = sum(scenario)\n        scenario_prob = 1\n        for i, result in enumerate(scenario):\n            if result == 1:\n                scenario_prob *= list(probabilities.values())[i]\n            else:\n                scenario_prob *= 1 - list(probabilities.values())[i]\n        counts[count_pass] += scenario_prob\n\n    # Find the number of pass students with the highest probability\n    most_likely_pass = max(counts, key=counts.get)\n    \n    return most_likely_pass\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time to ride from the 1st to the 6th house is 30 minutes\n    # This covers 5 intervals between these houses\n    # We need to find the time to cover 9 intervals between 10 houses\n    \n    time_for_5_intervals = 30\n    total_intervals_needed = 9\n    time_per_interval = time_for_5_intervals / 5\n    total_time = time_per_interval * total_intervals_needed\n    \n    return total_time\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    watches_to_caps_initial = 8/11\n    watches_to_caps_final = 12/11\n    caps_sold = 88\n\n    # Let the initial number of watches be 8x and the initial number of caps be 11x.\n    # After selling 88 caps, the ratio of watches to caps is 12/11.\n    # So, the final number of caps is 11x - 88.\n    # According to the final ratio, the final number of watches must be 12/11 * (11x - 88).\n    # But the number of watches did not change, so we have:\n    # 8x = 12/11 * (11x - 88)\n    # Solving for x to find the number of watches, which is 8x.\n\n    # Multiplying both sides by 11 to clear the fraction\n    # 88x = 12 * (11x - 88)\n    # 88x = 132x - 12 * 88\n    # 44x = 12 * 88\n    # x = 12 * 88 / 44\n    x = 12 * 88 / 44\n\n    # Number of watches is 8x\n    num_watches = 8 * x\n\n    return int(num_watches)\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    # Total length of the ribbon in cm\n    total_length_cm = 1.05 * 100\n    \n    # Let the shorter piece's length be x cm\n    # Then the longer piece's length is 2x cm\n    # The sum of the lengths is the total length: x + 2x = total_length_cm\n    # Solve for x: 3x = total_length_cm\n    x = total_length_cm / 3\n\n    # The length of the longer piece is twice the length of the shorter piece\n    longer_piece_length = 2 * x\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (D / 4):\n                for B in range(0, 10):\n                    if B == A - 1:\n                        for C in range(0, 10):\n                            ABCD = 1000 * A + 100 * B + 10 * C + D\n                            DCBA = 1000 * D + 100 * C + 10 * B + A\n                            if ABCD * 4 == DCBA:\n                                return ABCD\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Total coins\n    total_coins = 2015\n    \n    # Maximum coins a player can pick\n    max_pick = 11\n    \n    # Since picking the last coin is losing, we aim to leave a multiple of (max_pick + 1) coins \n    # for Ken after Jack's first pick. This way, no matter how many Ken picks (1 to max_pick), \n    # Jack can always pick a number that maintains the multiple of (max_pick + 1) until Ken is \n    # forced to pick the last one.\n    \n    # Calculate the remainder when total_coins is divided by (max_pick + 1)\n    remainder = total_coins % (max_pick + 1)\n    \n    # If the remainder is zero, Jack can pick any number (except max_pick as it leads to Ken\n    # picking max_pick at the end), and the game resumes as if he started in Ken's place.\n    # However, if there is a remainder, Jack must pick exactly the remainder of coins in his \n    # first turn to ensure Ken is left with a multiple of (max_pick + 1) coins.\n    \n    # Jack's first pick to guarantee a win\n    first_pick = remainder if remainder != 0 else 1\n    \n    return first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin, we know b = 0.\n    # We need to find the slope m using the point (4, 8).\n    # Using the slope formula m = (y2 - y1) / (x2 - x1)\n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # The given point\n\n    m = (y2 - y1) / (x2 - x1)\n\n    # Linear equation is y = mx + b, since b = 0, we have y = mx\n    # Based on the calculation m = 2, the equation becomes y = 2x\n    return \"y=2x\"\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_ones(num):\n        return str(num).count('1')\n\n    ans = count_ones(2015)\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # We can discern the pattern ●○●○○ repeats every 5 balls, with 2 white balls.\n    pattern_length = 5\n    white_balls_in_pattern = 2\n\n    # Number of white balls known\n    total_white_balls = 92\n\n    # Calculate the number of times the pattern repeats\n    pattern_repeats = total_white_balls // white_balls_in_pattern\n\n    # Calculate the total number of white balls that fully fit into the pattern\n    full_pattern_white_balls = pattern_repeats * white_balls_in_pattern\n\n    # Check if there are additional white balls not fitting the full pattern\n    additional_white_balls = total_white_balls - full_pattern_white_balls\n\n    # Calculate the total number of balls based on the number of times the pattern is fully repeated\n    total_balls = pattern_repeats * pattern_length\n\n    # If there are additional white balls not fitting the full pattern\n    # they can either be in the 2nd or 4th position of the pattern, hence we add 2 or 4 more balls\n    if additional_white_balls == 1:\n        # One additional white ball indicates the next ●○ part of the pattern\n        total_balls += 2\n    elif additional_white_balls == 2:\n        # Two additional white balls indicates a full pattern ●○●○○\n        total_balls += 5\n\n    return total_balls\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "import math\n\ndef solution():\n    return math.gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # The ages of the youngest three dwarfs form an arithmetic sequence\n    # with a common difference of 1 year between consecutive dwarfs.\n    # If the youngest dwarf is x years old, then the next two are\n    # x+1 and x+2 years old respectively.\n\n    # We also know that their ages add up to 42.\n    # Therefore, x + (x+1) + (x+2) = 42.\n\n    # Solving for x:\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13\n\n    youngest_dwarf_age = 42 / 3\n\n    # The age difference between the youngest and the oldest dwarf is 6 years (since there are 7 dwarfs),\n    # so we add 6 to the youngest dwarf's age to get the oldest dwarf's age.\n    oldest_dwarf_age = youngest_dwarf_age + 6\n\n    return int(oldest_dwarf_age)\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let x be the number of passengers at the start\n    remaining_after_first_stop = 3 / 5  # As two fifths got off, three fifths remain\n    remaining_after_second_stop = 2 / 3  # As one third got off, two thirds remain\n\n    # Let's denote the number of people left after both stops as p\n    p = 22\n\n    # We know that (3/5)x * (2/3) = p\n    # Therefore, x = p / ((3/5) * (2/3))\n    x = p / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return int(x)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n    shortened_length_cm = shortened_length_mm / 10\n\n    new_length = original_length_cm - shortened_length_cm\n    return new_length\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    target_average = 95\n\n    additional_tests = 0\n    while True:\n        additional_total_score = additional_tests * 100\n        new_average = (current_total_score + additional_total_score) / (4 + additional_tests)\n        if new_average >= target_average:\n            break\n        additional_tests += 1\n    return additional_tests\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let the initial number of stickers Sam had be 7x and Peter had be 5x\n    # Let the initial number of stickers John had be y\n    sam, peter, john = symbols('sam peter john')\n    \n    # Equations based on the problem statement:\n    # Sam gives away 20% of his stickers: sam - 0.2 * sam = sam_remaining = sam * 0.8\n    # Peter gives away 20% of his stickers: peter - 0.2 * peter = peter_remaining = peter * 0.8\n    # John receives 20% of Sam's and Peter's stickers and increases by 80%: \n    # john + 0.2 * sam + 0.2 * peter = john * 1.8\n    # Sam has 20 stickers more than John in the end: sam_remaining - john = 20\n    equation1 = Eq(john + 0.2 * sam + 0.2 * peter, john * 1.8)\n    equation2 = Eq(sam * 0.8 - john, 20)\n    \n    # Ratios of Sam and Peter's stickers: Sam's to Peter's ratio 7:5\n    equation3 = Eq(sam, peter * (7/5))\n    \n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n    \n    # Since we want to find out how many stickers Peter had initially, return solution[peter]\n    return solutions[peter]\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n    \n    # Equation representing the total number of notes\n    equation1 = Eq(ten_notes + two_notes, 72)\n    \n    # Equation representing the number of notes David is left with\n    equation2 = Eq(0.10 * ten_notes, 2 * (0.25 * two_notes))\n    \n    # Solve the systems of equations to find the number of $10 and $2 notes\n    solutions = solve((equation1, equation2), (ten_notes, two_notes))\n    \n    # Calculate the total value of the notes\n    total_ten_notes_value = solutions[ten_notes] * 10\n    total_two_notes_value = solutions[two_notes] * 2\n    \n    # Calculate how much was spent on the gift (100% - amount left)\n    spent_ten_notes = total_ten_notes_value * 0.90\n    spent_two_notes = total_two_notes_value * 0.75\n    \n    gift_cost = spent_ten_notes + spent_two_notes\n    \n    return gift_cost\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds for each stage in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters for each stage\n    distance1 = 420\n    distance2 = 620\n    # The last distance can be calculated as the total minus the sum of the first two stages\n    total_distance = 1200\n    distance3 = total_distance - (distance1 + distance2)\n    \n    # Time = Distance / Speed for each stage\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time is the sum of the time for each stage\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rate_a, rate_b, rate_c = symbols('rate_a rate_b rate_c')\n    \n    # Equation representing work done by A and B in 9 hours\n    equation1 = Eq(rate_a + rate_b, 1/9)\n    # Equation representing work done by A and C in 12 hours\n    equation2 = Eq(rate_a + rate_c, 1/12)\n    # Equation representing work done by B and C in 18 hours\n    equation3 = Eq(rate_b + rate_c, 1/18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rate_a, rate_b, rate_c))\n\n    # The total rate when all three hoses are turned on\n    total_rate = solutions[rate_a] + solutions[rate_b] + solutions[rate_c]\n    # Time required to fill the pool with all three hoses\n    time_with_all_hoses = 1 / total_rate\n\n    return time_with_all_hoses.evalf()\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_value = 164\n    total_notes = 58\n    for five_notes in range(total_notes + 1):\n        two_notes = total_notes - five_notes\n        if (five_notes * 5 + two_notes * 2) == total_value:\n            return five_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Given terms and their positions in the sequence\n    term7 = 105\n    term8 = 120\n    term9 = 135\n\n    # Calculate the common difference of the arithmetic sequence\n    difference = term8 - term7\n\n    # Calculate the first term based on 7th term (term7) and its position (7)\n    first_term = term7 - (7 - 1) * difference\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence\n    term100 = first_term + (100 - 1) * difference\n\n    return term100\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Worst case scenario:\n    # Taking 1 marker from each color still doesn't guarantee 2 of the same color.\n    markers_per_color = 3 # number of colors\n    # Take 1 from each and then 1 more to be sure to have at least 2 of the same color.\n    fewest_number = markers_per_color + 1\n    return fewest_number\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_cupcakes_cost = 187.50\n    one_sixth_spent_on_more_cupcakes = total_cupcakes_cost / (36 / 6)\n\n    total_money = one_sixth_spent_on_more_cupcakes * 6\n    five_ninths_spent = total_money * (5/9)\n    one_third_spent_on_muffins = five_ninths_spent / 4\n\n    cost_of_muffins = one_third_spent_on_muffins\n\n    return cost_of_muffins\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Initialize a list to store the number of marbles in each box. \n    # Starting with the smallest even numbers with at least two marbles.\n    marbles = [2, 4, 6, 8, 10, 12, 14, 16, 18, 18]  # Total 10 boxes, last two are the same\n\n    # Sum the number of marbles to get the smallest number of marbles Celeste can have\n    return sum(marbles)\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    # The numbers from 1 to 9 are in an increasing sequence\n    # The numbers from 8 to 4 are in a decreasing sequence\n    # Calculate the total individually and then sum them up\n    total_increasing = sum(range(1, 10))  # Sum from 1 to 9\n    total_decreasing = sum(range(4, 9))   # Sum from 4 to 8 (since 8 is added twice)\n    ans = total_increasing + total_decreasing\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    # Using Pigeonhole Principle to determine the minimum number of pigeons\n    # in the cage with the most pigeons:\n    # If each cage would have the same number of pigeons, it would be a division\n    # of the total number of pigeons by the number of cages. But since we are\n    # looking for the 'at least' number, we add 1 to the result of the division\n    # (in case the division is not an integer) to ensure that at least one cage\n    # has more pigeons than this equal number.\n    min_pigeons_in_max_cage = (total_pigeons // total_cages) + (total_pigeons % total_cages > 0)\n\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    # Since a sprinkler must be installed in the middle of each two parterres,\n    # the number of sprinklers needed is one less than the number of parterres.\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    average = (first_number + second_number) / 2\n    return average\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4  # mass of the papaya\n    jackfruit_mass = 3 * papaya_mass  # mass of the jackfruit is 3 times the mass of the papaya\n    total_mass = papaya_mass + jackfruit_mass  # total mass of papaya and jackfruit\n\n    # To identify the error in James's working, we check if his multiplying by 4 is correct\n    james_working = (2 + 1/4) * 4\n    james_error_corrected = False if james_working != 3 else True\n\n    return (james_error_corrected, total_mass)\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5/9\n    given_away = 440\n    original_collection = given_away / (1 - remaining_fraction)\n    return original_collection\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    first_day = 8\n    second_day = total_length / 6 + 4\n\n    equation = Eq(first_day + second_day, total_length * 5/12)\n\n    solved_length = solve(equation, total_length)\n\n    return solved_length[0]\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of stickers Alexis had at first\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Mary had 7/5 as many stickers as Alexis, so\n    equation1 = Eq(mary, (7/5) * alexis)\n    \n    # They both gave 20% of their stickers to Charlotte\n    # So the remaining stickers for Mary and Alexis are\n    # 80% or 4/5 of the original number\n    \n    equation2 = Eq(mary - (1/5)*mary, charlotte + 20)\n    equation3 = Eq(alexis - (1/5)*alexis, charlotte)\n\n    # Charlotte's stickers increased by 80%, which means\n    # if she had originally y stickers, now she has y + 0.8y = 1.8*y\n    # So charlotte has 5/9 of the stickers she has after getting stickers from Mary and Alexis\n    equation4 = Eq(charlotte, (5/9)*(mary - (1/5)*mary + alexis - (1/5)*alexis))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    total_height = sum(heights)\n    number_of_students = len(heights)\n    average_height = total_height / number_of_students\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # The total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Since there is a wheat at every corner, we subtract the 4 corner wheats\n    wheat_count_along_sides = 116 - 4\n\n    # The distance between every 2 wheat is the perimeter divided by the number of intervals,\n    # which is one less than the number of wheats along the sides\n    distance_between_wheat = perimeter / wheat_count_along_sides\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_correct = 10\n    second_correct = 15\n\n    only_one_correct = (first_correct - both_correct) + (second_correct - both_correct)\n    \n    return only_one_correct\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Number of people in the tournament\n    players = 4\n    \n    # Since it's a knockout tournament, each game eliminates one player.\n    # Therefore, we need one less game than the number of players to find out the winner.\n    ans = players - 1\n\n    return ans\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4-Apr-2023', '%d-%b-%Y')\n    end_date = datetime.strptime('18-May-2023', '%d-%b-%Y')\n    \n    days_off = (end_date - start_date).days + 1\n\n    return days_off\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_pine_nuts = 112\n    sunny_day_pine_nuts = 20\n    rainy_day_pine_nuts = 12\n\n    # Let the number of rainy days be x\n    # then, the number of sunny days would be (total_days - x)\n    # The total number of pine nuts collected would be:\n    # sunny_day_pine_nuts * (total_days - x) + rainy_day_pine_nuts * x\n    # We can set up the equation as follows:\n    # sunny_day_pine_nuts * (total_days - x) + rainy_day_pine_nuts * x = total_pine_nuts\n\n    # Now, we will solve this equation for x (the number of rainy days)\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(sunny_day_pine_nuts * (total_days - x) + rainy_day_pine_nuts * x, total_pine_nuts)\n    rainy_days = solve(equation, x)\n\n    return rainy_days[0]\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed in m/s\n    time = 5    # time in seconds\n\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has, and a be the number of candies Alice has.\n    r, a = symbols('r a')\n\n    # Equation based on the condition that after giving 10 candies, both have equal amounts.\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation based on the condition that after eating 8 candies each, Rachel has 3 times what Alice has.\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Return the total number of candies they originally had.\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        '(285+15)/5-2',\n        '285+(15/5)-2',\n        '(285+15)/(5-2)',\n        '285+15/(5-2)',\n        '(285+15/5)-2',\n        '285+((15/5)-2)',\n        '285+(15/(5-2))'\n    ]\n    \n    results = set()\n    \n    for expr in expressions:\n        results.add(eval(expr))\n        \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x for first hour, y for second hour\n    equation1 = Eq(x + y, 40)  # total mushrooms gathered in two hours\n    equation2 = Eq(x + 26, y)  # if 26 more mushrooms in the first hour, equal to the second hour\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for number_of_brushes in range(1, 10 // 3):\n        spent_on_brushes = 3 * number_of_brushes\n        if (59 - spent_on_brushes) % 10 == 0:\n            return number_of_brushes\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction('0.49').limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    # The resulting number after Verity's operations\n    resulting_number = 71\n    \n    # Reverse the operation: Subtract 8 and then divide by 7\n    original_number = (resulting_number - 8) / 7\n\n    return original_number\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Total number of teddy bears made\n    total_teddy_bears = 35\n    # Number of days\n    days = 5\n    # Since each day she made 2 more teddy bears than the day before, it's an arithmetic sequence\n    # Let's denote the number of teddy bears made on the first day as a\n    # Accordingly, on the second day, she made a + 2, on the third a + 4, and so on\n    # The sum of an arithmetic sequence is given by: total_teddy_bears = (days/2) * (2a + (days - 1) * d)\n    # where d is the common difference, which in this case is 2\n\n    # Rearrange the above formula to solve for a (number of teddy bears on the first day)\n    # 35 = (5/2) * (2a + (5 - 1) * 2)\n    # 35 = (5/2) * (2a + 8)\n    # 35 = 5a + 20\n    # a = (35 - 20) / 5\n    a = (total_teddy_bears - (days - 1) * 2) // days\n\n    # Now calculate the number of teddy bears made on the fifth day which is: a + (days - 1) * d\n    fifth_day_teddy_bears = a + ((days - 1) * 2)\n\n    return fifth_day_teddy_bears\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # For the first digit, we can choose between 1 or 8 (2 options) since 0 cannot be the first digit of a three-digit number\n    # For the second digit, we can choose any of the remaining 2 numbers\n    # For the third digit, we are left with only 1 number\n\n    # Calculating the number of ways\n    ways = 2 * 2 * 1\n    \n    return ways\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    # We need to draw all the pink and grey marbles because only then we can be sure that the next marble is blue.\n    marbles_to_draw = pink + grey + 1  # 1 more to draw the first blue one\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for Rick's and Morty's test scores\n    r, m = symbols('r m')\n\n    # The first condition tells us that if Rick gives Morty 70 of his score,\n    # Rick's score would still be 20 higher than Morty's.\n    equation1 = Eq(r - 70, m + 70 + 20)\n\n    # The second condition tells us that Rick's current score is 9 times Morty's score.\n    equation2 = Eq(r, 9 * m)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, m))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    \n    percentage = (part / whole) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i + 1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # We want to find the minimum cost for 17 bottles\n    # We create variables for each pack and its cost\n    single_bottle_cost = 15  # cost for 1 bottle: 15p\n    double_bottle_cost = 28  # cost for 2 bottles: 28p\n    five_bottle_cost = 60    # cost for 5 bottles: 60p\n    \n    # Initialize the minimum cost to a high value\n    min_cost = float('inf') \n    \n    # We can use a maximum of 3 packs of 5 bottles to get close to 17\n    # Iterate through possible combinations of packs to find the minimum cost\n    for pack_of_five in range(4):\n        for pack_of_two in range(9):\n            for single_pack in range(17):\n                total_bottles = (5 * pack_of_five) + (2 * pack_of_two) + single_pack\n                if total_bottles == 17:\n                    cost = (five_bottle_cost * pack_of_five) + \\\n                           (double_bottle_cost * pack_of_two) + \\\n                           (single_bottle_cost * single_pack)\n                    min_cost = min(min_cost, cost)\n                    \n    # Convert the minimum cost from pence to pounds\n    min_cost_in_pounds = min_cost / 100\n    \n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n\n    equation1 = Eq(frogs_before - dragonflies_before, 9)\n    equation2 = Eq(frogs_before - 11, dragonflies_before - 10)\n\n    solutions = solve((equation1, equation2), (frogs_before, dragonflies_before))\n\n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # boys = girls - 30\n    equation1 = Eq(boys, girls - 30)\n    \n    # After 3/5 of the boys and 5/8 of the girls left, equal numbers remained\n    # boys - (3/5)*boys = girls - (5/8)*girls\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(24):\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Initialize a set to capture unique results\n    results = set()\n    \n    # Using eval to compute the value by inserting brackets at various positions\n    # Using two pairs of bracket\n    results.add(eval('(285+15)/5-2'))\n    results.add(eval('285+(15/5)-2'))\n    results.add(eval('(285+15)/(5-2)'))\n    \n    # Using one pair of brackets\n    results.add(eval('285+(15/5-2)'))\n    results.add(eval('285+15/(5-2)'))\n    results.add(eval('(285+15)/5-2'))\n    \n    results.add(eval('285+15/(5-2)'))\n    results.add(eval('285/5+15-2'))\n    results.add(eval('285/(5+15)-2'))\n    \n    results.add(eval('(285+15)/5-2'))\n    results.add(eval('(285+15)/(5-2)'))\n\n    # Number of unique results is the number of different ways to insert brackets\n    return len(results)\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Work rates: A = 1/a, B = 1/b, C = 1/c\n    # (A+B) = 1/3, (B+C) = 1/4, (A+C) = 1/8\n    # A + B = 1/3, B + C = 1/4, A + C = 1/8\n    # Solving the equations to find the individual work rates\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 1/3)\n    equation2 = Eq(B + C, 1/4)\n    equation3 = Eq(A + C, 1/8)\n    \n    # Solving for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Finding the combined work rate of A, B, and C\n    combined_rate = solutions[A] + solutions[B] + solutions[C]\n    \n    # If they work together, time taken is the inverse of the combined work rate\n    time_taken = 1 / combined_rate\n\n    return float(time_taken)\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    equation1 = Eq(johnson + vicky, 48)  # Total coins\n    equation2 = Eq(vicky + 8, johnson - 2 - 8)  # After Johnson gives Vicky 8 coins\n\n    solution = solve((equation1, equation2), (johnson, vicky))\n\n    return solution[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    equation1 = Eq(candies - (kids * 18), -12)\n    equation2 = Eq(candies - ((kids + 2) * 15), 0)\n    \n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation based on the concentration of sugar in the mixture\n    equation = Eq((2 * 0.45) + (x * 0.15), (2 + x) * 0.25)\n\n    # Solve the equation for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    sum_s = 0\n    for i in range(1, 2018):\n        sum_s += int('2' * i)\n    last_five_digits = str(sum_s)[-5:]\n    ans = sum(int(digit) for digit in last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = 77\n    initial_addition = 6\n    multiplication_factor = 7\n\n    thought_number = (result / multiplication_factor) - initial_addition\n    \n    return int(thought_number)\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    number_of_boys = 42\n    \n    # Calculate the number of girls using the ratio\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 2\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick_rate = 24 / 6\n    total_pick_over_8_days = daily_pick_rate * 8\n    return total_pick_over_8_days\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    \n    # After Sam ate 1/4 of her cookies she has 3/4 left\n    sam_eat = sam / 4\n    sam_left = sam - sam_eat\n    \n    # Tim bought 1/5 more cookies\n    tim_more = tim / 5\n    tim_total = tim + tim_more\n    \n    # Equation based on the condition given in the problem\n    equation = Eq(tim_total - sam_left, 663)\n    \n    # Total cookies equation\n    total_cookies_equation = Eq(sam + tim, 1170)\n    \n    # Solve the system of equations\n    solutions = solve((equation, total_cookies_equation), (sam, tim))\n    \n    # Sam ate 1/4 of her initial cookies\n    cookies_eaten_by_sam = solutions[sam] / 4\n\n    return cookies_eaten_by_sam\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for i in range(200, 301):\n        if all(i % j == 1 for j in [2, 3, 4, 6]) and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the time at each speed\n    t1, t2 = symbols('t1 t2')\n\n    # Define two equations based on the distance covered at each speed\n    # First part of the walk: 150 metres/minute for t1 minutes\n    # Second part of the walk: 200 metres/minute for t2 minutes\n    # David starts the second part of the walk 10 minutes after the first part, so t1 = t2 + 10\n    equation1 = Eq(150 * t1 + 200 * (t2), 3700)\n    equation2 = Eq(t1 - 10, t2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t1, t2))\n\n    # Total time spent walking in the park is the time at 150 m/min plus the time at 200 m/min\n    total_time = solutions[t1] + 10\n\n    return total_time\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # Let x be the number of stamps Sally gave to Ting.\n    # Then after giving, Sally would have 40 - x stamps.\n    # Ting would have 32 + x stamps.\n    # The ratio of Sally's stamps to Ting's stamps would be 1:2.\n    # Which gives us the equation (40 - x) / (32 + x) = 1/2.\n    \n    # Now we solve for x:\n    # 2 * (40 - x) = (32 + x)\n    # 80 - 2*x = 32 + x\n    # 3*x = 80 - 32\n    x = (80 - 32) // 3\n\n    # Now, find the number of stamps Ting has in the end:\n    ting_stamps_end = ting_stamps + x\n\n    return ting_stamps_end\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    money = 20\n    packet_price = 4\n    sweets_per_packet = 8\n\n    packets_bought = money // packet_price\n    free_sweets = (packets_bought // 2)\n\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    original_pink = 5\n    total_counters = 5 + 7 + 8  # original total counters\n    desired_pink_probability = (original_pink / total_counters) * 2\n\n    extra_pink = 0\n    while True:\n        new_total_counters = total_counters + extra_pink\n        current_pink_probability = (original_pink + extra_pink) / new_total_counters\n        if current_pink_probability >= desired_pink_probability:\n            break\n        extra_pink += 1\n\n    return extra_pink\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Let's assume that each child gets a different amount of candy starting from 1\n    # The smallest distribution will start with 1, 2, 3, ..., which is an arithmetic sequence\n    # We will calculate the smallest sum first and then distribute the remaining candy to the child\n    # with the most pieces.\n\n    # Calculate the sum of the smallest possible distribution\n    # which is the sum of the first 7 numbers of the natural numbers (since one is left for the child with the most)\n    sum_first_seven = sum(range(1, 8))\n\n    # Calculate the remaining candies after the smallest distribution\n    remaining_candies = 88 - sum_first_seven\n\n    # The child with the most pieces will get the remaining candies plus one\n    most_pieces = remaining_candies + 1\n\n    return most_pieces\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    def find_trailing_zeros(n):\n        # Count factors of 5\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    num_zeros = find_trailing_zeros(16)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    b, g = symbols('b g')  # b for boys, g for girls\n    \n    # b = g + 40% of g\n    equation1 = Eq(b, g + 0.4 * g)\n    \n    # After 24 boys and girls left\n    # b - 24 = (g - 24) + 50% of (g - 24)\n    equation2 = Eq(b - 24, (g - 24) + 0.5 * (g - 24))\n    \n    # Solve the system of equations for b and g\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of cupcakes and muffins\n    x = symbols('x')\n    \n    # After selling, we have the equation: x - 60 cupcakes left, x - 12 muffins left\n    # We are told that the remaining muffins is twice the remaining cupcakes: 2(x - 60) = x - 12\n    equation = Eq(2 * (x - 60), x - 12)\n    \n    # Solve for x\n    original_number = solve(equation, x)\n    \n    # Total number of cupcakes and muffins at first is 2 * x since cupcakes = muffins\n    total = 2 * original_number[0]\n    \n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    time_shanghai_to_LA = 12.25  # Hours from Shanghai to Los Angeles\n    extra_time_LA_to_shanghai = 90 / 60  # 90 minutes converted to hours\n    time_LA_to_shanghai = time_shanghai_to_LA + extra_time_LA_to_shanghai  # Hours from Los Angeles to Shanghai\n\n    # Total round-trip time is the sum of both trips\n    round_trip_time = time_shanghai_to_LA + time_LA_to_shanghai\n\n    return round_trip_time\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # George receives $3 more pocket money than Helen every day\n    equation1 = Eq(george_daily, helen_daily + 3)\n\n    # Each of them spends $5 a day and saves the rest. Helen saves $60.\n    # Number of days it takes for Helen to save $60 at her saving rate:\n    days = 60 / (helen_daily - 5)\n\n    # George would have saved $90 more than Helen after the same number of days.\n    # Helen's savings are $60 when George's savings are $60 + $90\n    equation2 = Eq(days * (george_daily - 5), 60 + 90)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # To ensure she gets 2 pairs of the same color, she must consider the worst-case scenario.\n    # Worst-case scenario: she picks socks in such a way that she ends up with pairs of different colors.\n    \n    # She could pick 3 socks and they could all be of different colors (1 black, 1 grey, 1 red).\n    # Then the next 3 could again be one of each color (1 black, 1 grey, 1 red).\n    # So far she has 2 socks of each color but no pair.\n    \n    # Now no matter which color of sock she picks next, it will form a pair.\n    # This means she needs 3 socks (for the first round of colors) + 3 socks (second round) + 1 more sock = 7 socks\n    # But since she needs at least 2 pairs of the same color, she must pick 1 more sock to ensure the second pair.\n    # So the total number of socks she needs to pick is 8.\n    \n    return 8\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    eq1 = Eq(eddi / wiya, 3/2)\n    eq2 = Eq((eddi + 4) / wiya, 8/5)\n\n    solutions = solve((eq1, eq2), (eddi, wiya))\n    return solutions[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    return sum(range(1, 31)) + sum(range(1, 30))\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    eq1 = Eq(a + 8 * d, a + 14 * d + 18)\n    eq2 = Eq(a + 19 * d + a + 11 * d, 88)\n\n    result = solve((eq1, eq2), (a, d))\n    a_val = result[a]\n    d_val = result[d]\n\n    term_32 = a_val + 31 * d_val\n\n    return term_32\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit = 9 * 10 * 10  # Numbers from 100 to 999\n    no_sevens = 8 * 9 * 9  # No '7' in any digit\n\n    # At least two sevens, so subtract the numbers with no '7' from total.\n    at_least_two_sevens = total_three_digit - no_sevens \n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value_8 = (number // 10000) % 10  # Extract the digit in the ten thousands place\n    return place_value_8 * 10000  # Actual value of 8 in the given number\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Calculate the distance traveled in the first part of the trip.\n    speed_first_part = 40  # km/h\n    time_first_part = 2    # hours\n    distance_first_part = speed_first_part * time_first_part  # km\n\n    # Given the distance of the remaining part of the trip.\n    distance_remaining = 280  # km\n\n    # Calculate the time it takes for the remaining part of the trip.\n    speed_remaining = 70   # km/h\n    time_remaining = distance_remaining / speed_remaining  # hours\n\n    # Calculate total time and total distance.\n    total_distance = distance_first_part + distance_remaining  # km\n    total_time = time_first_part + time_remaining  # hours\n\n    # Calculate the average speed.\n    average_speed = total_distance / total_time  # km/h\n\n    return average_speed\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n\n    # Assuming Oni writes 3-page letters to all penpals\n    all_3_page = total_penpals * pages_3\n\n    # If Oni writes more than that, that means she writes a 4-page letter to one of them\n    penpals_3_page = total_penpals\n    while all_3_page < total_pages:\n        all_3_page += (pages_4 - pages_3)  # The difference swapped when switching from 3 pages to 4 pages\n        penpals_3_page -= 1  # Every time we switch to a 4-page letter, we have one less penpal receiving a 3-page letter.\n\n    return penpals_3_page\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n    \n    # Calculate the least common multiple of the packet sizes\n    cycle_days = lcm(25, 20)\n    \n    # Since March has 31 days\n    day = cycle_days % 31\n    month_increment = cycle_days // 31\n    \n    # Start date is March 1st\n    start_month = 3\n    \n    # Calculate the next month with the same date for starting new packets\n    next_month = (start_month + month_increment) % 12\n    \n    # Adjust the next_month and day if there is an overflow into the next year\n    if next_month == 0:\n        next_month = 12\n    if start_month + month_increment > 12:\n        day += 31  # Adding the 31 days of March as we move to the next year\n    \n    # Return the date\n    return (next_month, day)\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from sympy import Rational\n\ndef solution():\n    A = 1\n    a1 = A - Rational(1, 2)\n    a2 = A - Rational(2, 3)\n    a3 = A - Rational(7, 8)\n    a4 = A - Rational(29, 30)\n    a5 = A - Rational(139, 144)\n    a6 = A - Rational(839, 840)\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    m = a0.numerator\n    n = a0.denominator\n    return m + n\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial as fact\n\n    # We consider the case where we place the dancing performances first with gaps in-between for the singing.\n    # D_S_D_S_D_S_D represents our initial placement of dancing (D) with spaces for singing (S)\n    # This leaves us with 3 more singing performances to place in the 5 available slots between/around dancing.\n    # We will find this using stars and bars (binomial coefficients) which is C(n+k-1,k-1)\n\n    def combinations(n, k):\n        return fact(n) // (fact(k) * fact(n - k))\n\n    # Calculate the number of ways to arrange 3 singing performances in 5 available slots\n    singing_ways = combinations(3 + 5 - 1, 5 - 1)\n\n    # We then need to multiply that with the number of ways to arrange the initial 4 dances and 3 singings, which is simply 7!\n    total_ways = singing_ways * fact(7)\n\n    return total_ways\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the original number\n    x = symbols('x')\n    \n    # Aiden's mistaken operation: (x / 4) - 25 = 2021 -> x / 4 = 2021 + 25\n    mistaken_eq = Eq((x / 4) - 25, 2021)\n    mistaken_solution = solve(mistaken_eq, x)\n    \n    # Get the value of the original number from the solution of the mistaken operation\n    original_number = mistaken_solution[0]\n    \n    # Correct operation: (original_number * 4) + 25\n    correct_answer = (original_number * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna = symbols('donna')\n    equation = Eq(4 * donna, donna + 816)\n    solution = solve(equation, donna)\n    return solution[0]\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    prime_factors_2_count = 0\n    prime_factors_5_count = 0\n\n    for factor in factors:\n        while factor % 2 == 0:\n            prime_factors_2_count += 1\n            factor //= 2\n\n        while factor % 5 == 0:\n            prime_factors_5_count += 1\n            factor //= 5\n\n    ans = min(prime_factors_2_count, prime_factors_5_count)\n\n    return ans\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    return (3 * 8) - 4\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_digits = set(range(10)) - set([5, 4, 3, 0])\n    \n    for digit1 in possible_digits:\n        for digit2 in possible_digits:\n            if digit2 != digit1:\n                for digit3 in possible_digits:\n                    if digit3 != digit1 and digit3 != digit2:\n                        for digit4 in possible_digits:\n                            if digit4 != digit1 and digit4 != digit2 and digit4 != digit3:\n                                number = f\"{digit1}{digit2}{digit3}{digit4}\"\n                                \n                                # Check against the first guess\n                                guess1_matches = sum(1 for d, g in zip(number, \"8765\") if d == g)\n                                guess1_digit_matches = sum(1 for d in \"8765\" if d in number)\n                                \n                                # Check against the second guess\n                                guess2_matches = sum(1 for d, g in zip(number, \"1023\") if d == g)\n                                guess2_digit_matches = sum(1 for d in \"1023\" if d in number)\n                                \n                                # Check against the third guess\n                                guess3_matches = sum(1 for d, g in zip(number, \"8642\") if d == g)\n                                guess3_digit_matches = sum(1 for d in \"8642\" if d in number)\n                                \n                                # If the conditions match, return the number\n                                if (guess1_matches == 0 and guess1_digit_matches == 2 and\n                                    guess2_matches == 0 and guess2_digit_matches == 2 and\n                                    guess3_matches == 2 and guess3_digit_matches == 2):\n                                    return number\n    return None\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            b = (193 - 3*a) / 11\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # The ones digit of 999\n    exponent = 99\n    ones_digit = pow(base, exponent, 10)  # The last parameter 10 ensures we only get the last digit\n    return ones_digit\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):       # a must be from 1 to 9 since it is the tens digit\n        for b in range(10):      # b can be from 0 to 9 since it is the units digit\n            ab = 10 * a + b      # Construct the number ab\n            if 7 * ab == 100 * a + b:\n                return ab        # Return ab when the condition is met\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys, children, adults = symbols('girls boys children adults')\n\n    # Equations based on the problem statement\n    equation1 = Eq(adults, 3 * children)  # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)       # twice as many boys as girls\n    equation3 = Eq(children, boys + girls) # children is the sum of boys and girls\n    equation4 = Eq(adults - girls, 176)   # 176 more adults than girls\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (girls, boys, children, adults))\n\n    # Calculate the total number of people at the concert\n    total_people = solutions[girls] + solutions[boys] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Creating congruences: (remainder, modulus)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    # Solve the congruences using Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(gcd(12, 15), 60)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    ages = [(bob, bob - 10, rex) for bob in range(11, 29) for rex in range(1, 28)\n             if bob > rex > bob - 10 and bob + rex + (bob - 10) == 28]\n    products = [bob * rex * (bob - 10) for bob, rex, _ in ages]\n    return min(products)\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n\n    equation = Eq(children, men + 20)\n\n    solutions = solve((equation, ), (total_people, ))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_ball, total_money = symbols('cost_per_ball total_money')\n\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n\n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # height after the second bounce is 9cm\n    # let's denote the initial height as h\n    # after the first bounce, the ball reaches h/3 height\n    # after the second bounce, it reaches (h/3)/3 height which is equal to 9cm\n    # therefore, (h/3)/3 = 9cm => h/9 = 9cm => h = 9 * 9\n    \n    initial_height = 9 * 9  # Calculate the initial height\n    return initial_height  # Return the initial height\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # Start with the largest possible 3-digit number with 75 as a factor, i.e., 975.\n    max_possible = 999\n    # 75 is the highest common factor of A and B, so both A and B need to be multiples of 75.\n    # We will iterate downwards from 975 using step of 75 to find valid A and B.\n    for A in range(max_possible, 75, -75):\n        # A has two equal digits, check if that's the case.\n        A_str = str(A)\n        if ((A_str[0] == A_str[1]) or (A_str[0] == A_str[2]) or (A_str[1] == A_str[2])):\n            # Now, iterate over possible values of B which also must be a multiple of 75 and less than A.\n            for B in range(A - 75, 75, -75):\n                B_str = str(B)\n                # B also has two equal digits.\n                if ((B_str[0] == B_str[1]) or (B_str[0] == B_str[2]) or (B_str[1] == B_str[2])):\n                    # Check if A and B are distinct and have two equal digits (can be in different positions).\n                    equal_digits = sum(a == b for a, b in zip(sorted(A_str), sorted(B_str))) == 2\n                    if equal_digits:\n                        return A + B\n    return None\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = 2/25\n    # Calculate the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = 8/3\n    # Calculate the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Calculate the final answer by adding the two complex fractions\n    ans = complex_fraction1 + complex_fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate the number of houses one worker can build in one day\n    houses_per_worker_per_day = houses_initial / (workers_initial * days_initial)\n    \n    # Now calculate how many houses can be built by 9 workers in 2 days\n    houses_final = houses_per_worker_per_day * workers_final * days_final\n\n    return int(houses_final)\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's purchase equation: 1.50 = 2*banana + 3*apple\n    eq1 = Eq(1.50, 2*banana + 3*apple)\n    # Beth's purchase equation: 1.45 = 3*banana + 2*apple\n    eq2 = Eq(1.45, 3*banana + 2*apple)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (banana, apple))\n\n    # Calculate Annabella's payment: 1*banana + 1*apple\n    payment = solutions[banana] + solutions[apple]\n\n    return payment\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let l represent the portion of the job Lee does in 1 hour\n    # Let n represent the portion of the job Nancy does in 1 hour\n    l, n = symbols('l n')\n    \n    # Together they finish in 10 hours, so together they do 1/10 of the job in an hour\n    equation1 = Eq(l + n, 1 / 10)\n    \n    # Lee does 6*l portion of the job and Nancy does 20*n portion of the job\n    equation2 = Eq(6 * l + 20 * n, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n    \n    # The time it takes for Nancy to finish the job by herself is the reciprocal of her rate\n    # so if she does n portion in an hour, it will take her 1/n hours to finish\n    nancy_time = 1 / solutions[n]\n\n    return nancy_time\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):\n        for twenty_pences in range(4):\n            for fifty_pences in range(2):\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate each fraction in the denominator separately then take their sum\n    denominator_sum = (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n    \n    # Invert the sum to find the value of the complex fraction\n    ans = 1 / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - (-2) + 7 - (-4) + 2\n    return ans\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average_score = 90\n\n    # Total marks for all pupils\n    total_marks = total_pupils * total_average_score\n\n    # Let the average score of class A be 'x'\n    # Then the average score of class B will be 'x + 7'\n    # Using the aggregated average to calculate total marks for each class,\n    # we get the equations:\n    # 40*x + 30*(x + 7) = total_marks\n    # Solve for 'x'\n\n    class_A_pupils = 40\n    class_B_pupils = 30\n    class_B_average_advantage = 7\n\n    # total_marks = class_A_pupils * x + class_B_pupils * (x + class_B_average_advantage)\n    # By substituting total_marks, we can find the average of class B (x + class_B_average_advantage)\n    \n    x = (total_marks - class_B_pupils * class_B_average_advantage) / (class_A_pupils + class_B_pupils)\n    class_B_average = x + class_B_average_advantage\n    \n    return class_B_average\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249*250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n    \n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f\"125{J}6\") % 4 == 0:\n            return J\n            \nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_result = 66\n    added_number = 7\n    multiplied_by = 6\n\n    original_number = (final_result / multiplied_by) - added_number\n    \n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    ans = sum(i * (i+1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    total_cost = 720\n    extra_cost_per_table = 25\n\n    # Cost equation\n    equation1 = Eq(5 * table + 12 * chair, total_cost)\n    # Extra cost per table equation\n    equation2 = Eq(table, chair + extra_cost_per_table)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (table, chair))\n\n    return solution[table]\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    \n    # Solve the equation a ⊙ x = 33 for x\n    # 5a - 2x = 33\n    # 5*9 - 2x = 33\n    # 45 - 33 = 2x\n    # 12 = 2x\n    # x = 12 / 2\n    x = (result - 5 * a) / (-2)\n\n    return x\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17, 476 % 17\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each // 2\n\n    return total_cards\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\nfrom datetime import datetime, timedelta\n\ndef solution():\n    # Calculate the LCM of the two packet sizes to find how many days\n    # until she starts new packets of both types.\n    days_until_new_packets = lcm(25, 20)\n\n    # Starting date is March 1st\n    starting_date = datetime(year=2023, month=3, day=1)\n\n    # Find the new date after the LCM number of days\n    next_start_date = starting_date + timedelta(days=days_until_new_packets)\n\n    # Return the new date in the format 'day month'\n    return next_start_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent\n    total_time = 360  # minutes\n\n    # Ratios for time spent going up to going down\n    ratio_up = 5\n    ratio_down = 4\n\n    # Find time spent going up and down\n    time_up = (ratio_up / (ratio_up + ratio_down)) * total_time\n    time_down = (ratio_down / (ratio_up + ratio_down)) * total_time\n\n    # Speed relation\n    speed_down = 10 + 10  # The speed going up is 10m/min slower\n\n    # Distance = Speed * Time\n    distance_up = (speed_down - 10) * time_up\n    distance_down = speed_down * time_down\n\n    # Total distance\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Yun's cars\n    cars = 4\n    fruits_for_cars = 24.2\n    per_car = fruits_for_cars / cars\n\n    # Yang's trucks\n    trucks = 50\n    fruits_for_trucks = 410\n    per_truck = fruits_for_trucks / trucks\n\n    # Difference between what a truck carries and what a car carries\n    difference = per_truck - per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    arrival_time = 9 * 60 + 22  # Convert 9:22 AM to minutes\n    bus_interval = 35           # The bus leaves every 35 minutes\n    first_bus_time = 9 * 60 + 15  # Convert 9:15 AM to minutes\n\n    # Find how many intervals have passed since the first bus\n    intervals_since_first_bus = (arrival_time - first_bus_time) // bus_interval\n\n    # Calculate time of the next bus\n    next_bus_time = first_bus_time + (intervals_since_first_bus + 1) * bus_interval\n\n    # Calculate the waiting time\n    wait_time = next_bus_time - arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom, jerry = symbols('tom jerry')\n    \n    # Equation 1: \"Tom will be twice his age in 4 years from now.\"\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # Equation 2: \"Three years ago, the sum of Tom's and Jerry's ages was 10.\"\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the system of equations for Tom's and Jerry's ages\n    ages_solution = solve((equation1, equation2), (tom, jerry))\n    \n    # Tom's current age\n    tom_age = ages_solution[tom]\n    \n    # Jerry will be double his current age, thus the years required will be his current age.\n    jerry_age_in_years = ages_solution[jerry]\n    \n    return jerry_age_in_years\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    number_of_weeks = days_until_birthday // days_in_a_week\n    return number_of_weeks\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    # Let x be the number days after which there are 3 times as many pineapples left as watermelons\n    # Initial quantity of watermelons and pineapples\n    watermelons = 94\n    pineapples = 138\n    \n    # Daily consumption of watermelons and pineapples\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    \n    # After x days the quantity of fruits left\n    # watermelons_left = watermelons - (watermelons_per_day * x)\n    # Pineapples_left = pineapples - (pineapples_per_day * x)\n    \n    # The condition given is that pineapples_left = 3 * watermelons_left\n    # So, pineapples - (pineapples_per_day * x) = 3 * (watermelons - (watermelons_per_day * x))\n    \n    # Now, we need to solve for x\n    # 138 - 9x = 3 * (94 - 9x)\n    \n    # Simplify the equation\n    # 138 - 9x = 282 - 27x\n    # 18x = 282 - 138\n    # 18x = 144\n    # x = 144 / 18\n    # x = 8\n    \n    # After 8 days, the number of pineapples will be 3 times the number of watermelons left\n    x = (pineapples - 3 * watermelons) / (3 * watermelons_per_day - pineapples_per_day)\n\n    return int(x)\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in metres per minute\n    brother_speed = 70  # Eddie's brother speed in metres per minute\n    meeting_time = 5  # time after which they meet in minutes\n\n    # The distance Eddie covers in 5 minutes\n    distance_eddie = eddie_speed * meeting_time\n\n    # The distance Eddie's brother covers in 5 minutes\n    distance_brother = brother_speed * meeting_time\n    \n    # The total distance from home to the mall\n    total_distance = distance_eddie + distance_brother\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    price_after_discount = original_price * (1 - discount_rate)\n    final_price = price_after_discount * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((3 + 2*i) ** 2 if i % 2 == 0 else - (4 + 2*i) ** 2 for i in range(25))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n    \n    # Initial ages of the family members\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n\n    # Find the next year when all ages will be prime again\n    while True:\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n        if isprime(my_age) and isprime(brother_age) and isprime(mother_age) and isprime(father_age):\n            return father_age\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n + (n * (n - 1) // 2) + (n * (n - 1) * (n - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_left = total_books - books_given_away\n    return books_left\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    # Let lora's age be x\n    # Her mother's age will then be 3x\n    # The sum of their ages is 44, which gives us the equation:\n    # x + 3x = 44\n    \n    # Solve for x\n    lora_age = 44 / 4\n    \n    return int(lora_age)\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # Total number of flowers\n    total_flowers = 30\n    # Flowers planted between each pair of lamp posts\n    flowers_between_lamps = 3\n\n    # The total number of gaps between the lamp posts is given by the total flowers\n    # divided by the flowers planted between each pair of lamp posts\n    # Since these flowers cover the entire road except for the first and last lamp post\n    # we need to add one more gap for the total number of gaps (like fencepost problem)\n    num_gaps = (total_flowers // flowers_between_lamps) + 1\n\n    # The total length of the road is 50m, so to find the distance between each pair of lamp posts\n    # we divide the total length by the number of gaps\n    distance_between_lamps = 50 / num_gaps\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    power_cycle = [4, 6, 4, 6]  # The units digits repeat every 4 powers for base 4\n\n    # Since 2008 is a multiple of 4, it'll be the first element of the cycle\n    unit_digit_index = (2008 % 4) - 1\n    ans = power_cycle[unit_digit_index]\n\n    return ans\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    \n    num_male_adults = total_adults * fraction_male\n\n    return int(num_male_adults)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the shops\n    paths_home_audio = 6\n    paths_home_book = 4\n    paths_home_chapel = 5\n    \n    # Number of paths from shops to school\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n    \n    # Total paths from home to school\n    total_paths = (paths_home_audio * paths_audio_school +\n                   paths_home_book * paths_book_school +\n                   paths_home_chapel * paths_chapel_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # The sum of pairs of weights (Adam + Ben, Ben + Carl, Adam + Carl)\n    sum_adam_ben = 102\n    sum_ben_carl = 97\n    sum_adam_carl = 93\n\n    # Total sum of all three weights (counting all persons twice)\n    total_twice = sum_adam_ben + sum_ben_carl + sum_adam_carl\n\n    # Since all persons are counted twice, we divide by 2 to get the real total weight\n    total_weight = total_twice // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    # Given values\n    total_coins = 495\n    one_pound_coins = total_coins // 3  # Number of £1 coins\n    fifty_pence_coins = 124  # Number of 50p coins\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins  # Number of 20p coins\n\n    # Calculating total value\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n\n    total_money = Eq(benson + clive, 705)\n    same_money_left = Eq(benson - 34, clive - 63)\n\n    solutions = solve((total_money, same_money_left), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n    road_length = (num_lamp_posts - 1) * distance_between\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks = 49\n    belle_sticks_after = belle_sticks + 11\n    eddie_sticks = symbols('eddie_sticks')\n\n    equation = Eq(belle_sticks_after, eddie_sticks)\n\n    eddie_initial_sticks = solve(equation, eddie_sticks)\n\n    return eddie_initial_sticks[0]\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    return (5/11 + 2/27) * 11 + 5/27\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    num_boxes = 6\n    weight_per_box = 1.3\n    total_weight = num_boxes * weight_per_box\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    total_coins_equation = Eq(john + kofi, 25)\n    coins_after_transaction_equation = Eq(kofi + 4, john - 3)\n\n    solutions = solve((total_coins_equation, coins_after_transaction_equation), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea / 2\n    tea_to_give = tea_each - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '4', '6']\n    all_combinations = set(permutations(digits, r=1)) | set(permutations(digits, r=2)) | set(permutations(digits, r=3))\n    return len(all_combinations)\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    result = 18 + 2 + 16\n    return result\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    # One normal rabbit has 1 head and 4 feet, special rabbit has 3 heads and 2 feet\n    # Total heads and feet are 53 and 102 respectively\n    equation1 = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n\n    return solutions\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost  # Convert £10 to pence for calculation\n    return change\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    remainder = 10  # start with the dividend (10) to find the first decimal place of 1/70\n    # use a loop to find the remainder after each division which corresponds to each decimal place\n    for i in range(1, 500):\n        remainder = (remainder % 70) * 10  # simulate long division to get the next digit\n\n    # after getting the 500th digit's remainder, perform final division\n    digit = remainder // 70\n    return digit\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / ((20 - i) * (i + 1)) for i in range(11, 16))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one\n    neelesh_had_before_eating = 4 + 1\n    \n    # If Neelsh had 5, this represents 1/6 of the total that Ayesha had initially\n    total_initially = neelesh_had_before_eating * 6\n\n    # Ayesha gave 1/6 of the total to Neelesh, so Ayesha has 5/6 left\n    ayesha_left = total_initially * (5/6)\n\n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c, i = symbols('c i')  # c for copper ball weight, i for iron ball weight\n    \n    # Equation representing the weight of 8 copper balls and 9 iron balls\n    equation1 = Eq(8*c + 9*i, 135)\n    \n    # Equation representing the weight of 6 copper balls and 3 iron balls\n    equation2 = Eq(6*c + 3*i, 75)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, i))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_a = 80\n    box_c = symbols('box_c')\n    box_b = 2 * box_c\n    total_marbles = 560\n\n    equation = Eq(box_a + box_b + box_c, total_marbles)\n    solutions = solve((equation), (box_c))\n\n    return solutions[box_c]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gummy_bears, lollipops = symbols('gummy_bears lollipops')\n    \n    # Original ratio\n    equation1 = Eq(gummy_bears, 5/7 * lollipops)\n    \n    # Ratio after adding 120 pieces to each pile\n    equation2 = Eq(gummy_bears + 120, 4/5 * (lollipops + 120))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (gummy_bears, lollipops))\n    \n    gummy_bears_solution = solutions[gummy_bears]\n    lollipops_solution = solutions[lollipops]\n    \n    # Calculate the total number of candies now\n    total_candies = gummy_bears_solution + lollipops_solution + 2 * 120\n    \n    return total_candies\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term = 10\n    last_term_value = 31\n    difference = 3\n    first_term = last_term_value - (term - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    repetition = 3\n    total_sum = sum(numbers) * repetition\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert from base 3 to base 10, perform the subtraction and convert back to base 3\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n    \n    result_base10 = num1_base10 - num2_base10\n    \n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 = result_base10 // 3\n    \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return (50/100) * (50/100) * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize a list to represent the first 20 positive integers\n    numbers = [i for i in range(1, 21)]\n    \n    # Initialize the largest value of n\n    n = 0\n    \n    # Initialize a list to hold our chosen numbers\n    chosen_numbers = []\n    \n    # Loop through the list of numbers\n    for number in numbers:\n        # If no number in the chosen_numbers list differs by 5 with the current number,\n        # then that number can be added to our list\n        if all(abs(number - chosen_number) != 5 for chosen_number in chosen_numbers):\n            chosen_numbers.append(number)\n            n += 1\n    \n    # Return the largest value of n\n    return n\n\n# Call the function and store the result in ans\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_questions = correct_answers + wrong_answers\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert the mixed numbers to improper fractions\n    numerator_part1 = (2017 * 8 + 7) / 8 * (3 * 3 + 2) / 3\n    numerator_part2 = 2016.875 * 11 / 3\n    denominator_part1 = ((2017 * 3 + 1) / 3 - 2016.875) * 17\n    multiplier = (3 * 32 + 23) / 32\n\n    # Compute the complex fraction\n    numerator = numerator_part1 - numerator_part2\n    denominator = denominator_part1\n    result = (numerator / denominator) * multiplier\n\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for _1 in range(10):\n            total_pencils = int(f\"{B}{_1}\")\n            if total_pencils % 44 == 0:\n                return total_pencils // 44\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define j as John's current age and m as his mother's current age\n    j, m = symbols('j m')\n\n    # John's age in 8 years is m - 20 (mother's age 20 years ago)\n    eq1 = Eq(j + 8, m - 20)\n\n    # Now, at some point John's age is j', and his mother's age is m'\n    # John's age when his mother was 5 times his age is j'\n    # Mother's age at that time is 5*j' (which is m')\n    # We know that their age difference will always be the same\n    # Therefore, m - j is the age difference\n\n    # m' = 5*j' and m' - j' = m - j (age difference stays constant)\n    # m = 5*j' + (m - j)\n    \n    # Age difference is constant and is equal to m - j\n    # Therefore we can replace m in eq1 with 5*j' + (m - j)\n    # This translates to j + 8 = (5*j' + (m - j)) - 20\n\n    # Solving these equations to get the value of j' which is John's age when his mother was 5 times his age\n    solutions = solve((eq1,), (j, m))\n\n    # Use the result to find John's age when his mother is 5 times his age\n    # Since m' is 5*j', then we know m' - j' = m - j is the age difference between mother and John\n    # So, we take the difference in the above equation and then divide by 4 to get j' (because m' = 5j' equals j' + 4j')\n    age_diff = solutions[m] - solutions[j]\n    john_age_when = age_diff / 4\n\n    return john_age_when\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = (24 * 8) // math.gcd(24, 8)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 2520  # Start with the least common multiple of the numbers 2 through 10\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(0 < r < i for r, i in zip(remainders, range(2, 11))):\n            return M\n        M += 2520  # Increase M by the LCM to maintain divisibility conditions\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    # Calculate the least number of containers needed\n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return containers_needed\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve((equation,), (reema,))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n    # To make a perfect square, every prime factor's exponent must be even.\n    # Hence, we multiply 28 by any of its prime factors raised to a power\n    # that makes the factor's total exponent even.\n\n    result = 1\n    for prime in factors:\n        exponent = factors[prime]\n        # We need to multiply by prime one more time if exponent is odd\n        if exponent % 2 != 0:\n            result *= prime\n\n    return result\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    \n    # Number of intervals equals the number of posts minus 1\n    num_intervals = field_length // post_interval\n    # Number of posts would be 1 more than number of intervals\n    num_posts = num_intervals + 1\n    \n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10): # a can't be 0 since it's a two-digit number\n        for b in range(10): # b can be from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 / 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positives = 10 + 20 + 30 + 50 + 60 + 70\n    negatives = 6 + 16 + 26 + 46 + 56 + 66\n    result = positives - negatives\n    return result\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Considering A and B as a single entity, we have 5 entities to arrange\n    num_ways_without_AB_constraint = factorial(5)\n\n    # A and B can arrange themselves in 2! ways\n    num_ways_AB_together = factorial(2)\n\n    # Total combinations\n    total_combinations = num_ways_without_AB_constraint * num_ways_AB_together\n\n    return total_combinations\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n\n    for _ in range(years):\n        initial_rabbits = 5 * initial_rabbits / 2\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y, x = symbols('y x')\n    cost_per_mile = 6\n\n    equation = Eq(y, cost_per_mile * x)\n\n    return equation\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Benson finished lunch at 2.50 pm (which can be represented as 14:50 in 24hr format)\n    lunch_finish_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Total time spent before lunch is 10 minutes playing and 20 minutes watching television\n    # and also 20 minutes having lunch.\n    total_minutes_before_lunch = 10 + 20 + 20\n    \n    # Subtract the total minutes from the lunch finish time to find when Benson reached home\n    home_arrival_time = lunch_finish_time - timedelta(minutes=total_minutes_before_lunch)\n    \n    # Format the arrival time to a 12-hour format with am/pm\n    arrival_time_formatted = home_arrival_time.strftime(\"%I:%M %p\")\n    \n    return arrival_time_formatted\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from the largest 2-digit number and go down\n        if (num % 4 == 3) and (num % 5 == 3):  # Check the remainder condition\n            return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    sweets = 138\n    for class_size in range(1, sweets):\n        if sweets % class_size == 0 and (sweets // class_size) >= 5:\n            return class_size\n    return -1\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Given 246 * 135 = 33210, we can calculate 248 * 135 by adding two times 135 to the result.\n    base_result = 33210\n    increment = 135 * 2\n    ans = base_result + increment\n    return ans\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the number of steps on the escalator be s.\n    # If Peter takes 1 step per second, the escalator moves s - 10 steps in 10 seconds.\n    # If Peter takes 2 steps per second, the escalator moves s - 16 steps in 8 seconds (since he reaches the top in 16 steps).\n    # Therefore, the rate of the escalator in steps per second is (s - 10) / 10 and it is also (s - 16) / 8.\n    # We can write the following equation:\n    # (s - 10) / 10 = (s - 16) / 8\n    # Solving for s:\n    s = symbols('s')\n    equation = Eq((s - 10) / 10, (s - 16) / 8)\n    solution = solve(equation, s)\n    return solution[0]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    r, g, p = symbols('r g p')  # r: red balloon, g: green balloon, p: purple balloon\n    \n    equation1 = Eq(r, g / 4)  # red balloons are 1/4 as many as green balloons\n    equation2 = Eq(r, (3 / 5) * p)  # red balloons are 3/5 as many as purple balloons\n    equation3 = Eq(4 * r + 5 * g + 7 * p, 642)  # total mass of the balloons\n    \n    solutions = solve((equation1, equation2, equation3), (r, g, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    num_trees = (road_length // interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_numbers = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    result = 0.25 * 1200\n    return result\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    height_difference = 30  # James is 30 cm shorter than Mark\n\n    mark_height = james_height + height_difference  # Calculate Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks / 4\n    blocks_left = total_blocks - blocks_given\n\n    return int(blocks_left)\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5): # since it's even and less than tens digit\n        for tens in range(hundreds + 1, 10, 2): # even, bigger than hundreds digit\n            ones = hundreds * 2\n            if ones > 8 or tens % 2 != 0: # ones is even and cannot exceed 8\n                continue\n\n            number = int(f\"{hundreds}{tens}{ones}\")\n            if number % 2 == 0 and number % 9 == 0:\n                return number\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent Sally's chocolates and k represent Ken's chocolates\n    s, k = symbols('s k')\n\n    # Initial ratio equation: s/k = 5/7\n    equation1 = Eq(s / k, 5 / 7)\n\n    # After Ken gives 24 chocolates to Sally: s + 24 = 2*(k - 24)\n    equation2 = Eq(s + 24, 2 * (k - 24))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, k))\n\n    # Return the value of Ken's chocolates after giving 24 to Sally\n    return solutions[k] - 24\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    # Two equations based on the problem statement\n    eq1 = Eq(5 * pencil + 6 * notebook, 17)\n    eq2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    # Solve for the price of one pencil and one notebook\n    solution = solve((eq1, eq2), (pencil, notebook))\n\n    # Calculate the total cost of 1 pencil and 1 notebook\n    total_cost = solution[pencil] + solution[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    paid_hours = 0\n    extra_cost = bill\n\n    # Calculate the hours in the $5 bracket\n    if extra_cost > 0 and extra_cost <= 50:\n        paid_hours += extra_cost // 5\n        extra_cost %= 5\n    elif extra_cost > 50:\n        paid_hours += 10\n        extra_cost -= 50  # $5 * 10 hours = $50\n\n    # Calculate the hours in the $8 bracket\n    if extra_cost > 0 and extra_cost <= 80:\n        paid_hours += extra_cost // 8\n        extra_cost %= 8\n    elif extra_cost > 80:\n        paid_hours += 10\n        extra_cost -= 80  # $8 * 10 hours = $80\n\n    # Calculate the hours in the $15 bracket\n    if extra_cost > 0:\n        paid_hours += extra_cost // 15\n\n    total_hours = free_hours + paid_hours\n\n    return total_hours\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    square_sides = 4\n    triangle_sides = 3\n    ans = (square_sides * 2) - triangle_sides\n    return ans\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n\n    new_pay = original_pay + (original_pay * increase_percentage)\n\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total = audrey + jane\n    return total\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 1014\n    digits_so_far = 0\n    page = 0\n\n    while total_digits > digits_so_far:\n        page += 1\n        digits_so_far += len(str(page))\n\n    return page\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n    \n    joanna_total = joanna_weekly * weeks\n    amy_savings = amy_weekly * weeks - amy_spent_weekly * weeks\n    \n    diff = joanna_total - amy_savings\n    \n    return diff\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n    \n    equation = Eq(first_number, 4 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(2, 1) * comb(13, 4) # Total ways to choose 1 teacher and 4 students\n    ways_no_female = comb(2, 1) * comb(7, 4) # Ways to choose 1 teacher and 4 male students, i.e., no female in the committee\n    ways_at_least_one_female = total_ways - ways_no_female # Subtract the ways with no female from total ways\n    \n    return ways_at_least_one_female\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number\n    x = symbols('x')\n    \n    # Create the equation: 3 * x + 6 = x + 16\n    equation = Eq(3 * x + 6, x + 16)\n\n    # Solve the equation for x\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = (10 - 6) + (20 - 16) + (30 - 26) + (40 - 36) + (50 - 46) + (60 - 56) + (70 - 66) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    # Find the common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Calculate the 12th term using the common difference and the 10th term\n    twelfth_term = tenth_term + (12 - 10) * common_difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_of_x = 3\n    degree_of_y_with_n = 2 * n  # since y is raised to the power of 2n\n    total_degree = degree_of_x + degree_of_y_with_n\n    # We need to solve for n where total_degree is 5\n    n = (5 - degree_of_x) / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    total_cups = 45\n\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n\n    total_liquid = total_milk + total_tea\n\n    return total_liquid\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    book_price = symbols('book_price')\n\n    # Since a pencil cost is given, we can use it in our equation\n    pencil_cost = 0.40  # 40p = £0.40\n\n    # Create equations based on the problem statement\n    # Sarah's cost: 8 books + 3 pencils, Rebecca's cost: 3 books + 8 pencils\n    # The difference in cost is £1.00\n    equation = Eq(8 * book_price + 3 * pencil_cost, 3 * book_price + 8 * pencil_cost + 1)\n\n    # Solve the equation for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    # Get the book price from the solution\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Angela buys two more gummy bears than Bernice\n    equation1 = Eq(angela, bernice + 2)\n    # Bernice buys eight more gummy bears than Candice\n    equation2 = Eq(bernice, candice + 8)\n    # The cost of each gummy bear is 6 pence. Total cost is 3.42 pounds, which is 342 pence\n    # Together the three girls spend 342 pence\n    equation3 = Eq(6 * (angela + bernice + candice), 342)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the number of elements in the list is even (10), the median is the\n    # average of the 5th and 6th terms when the list is sorted.\n    # Given that the median value is 20, we can write the equation:\n    # (n+7 + n+8) / 2 = 20\n    # Solving for n gives us n = 12.5\n\n    # To find the mean, we need to sum all the terms and divide by the number of terms.\n    n = 12.5\n    terms = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(terms) / len(terms)\n    \n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    consecutive_sum = 60\n    n = consecutive_sum // 3\n    largest_number = n + 1  # The largest number is one more than the middle number\n\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n\n    num_containers = total_volume / per_container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the three apples weights be a, b, and c where a < b < c\n    a, b, c = symbols('a b c')\n\n    # The mean weight of the remaining two apples if the largest is eaten (a + b) / 2 = 70\n    eq1 = Eq((a + b) / 2, 70)\n\n    # The mean weight of the remaining two apples if the lightest is eaten (b + c) / 2 = 105\n    eq2 = Eq((b + c) / 2, 105)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b, c))\n\n    # We have two sets of potential solutions; we need to find the single solution where a < b < c\n    correct_solution = [s for s in solutions if s[a] < s[b] < s[c]][0]\n\n    # Calculate the weight difference between the heaviest and lightest apple\n    weight_difference = correct_solution[c] - correct_solution[a]\n\n    return weight_difference\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Start from 9, because A should be the largest single digit number,\n    # subtract 1 to get the second largest, and so on.\n    for A in range(9, 0, -1):\n        if A - 1 + A - 2 == A:\n            return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):\n        new_num = int(f\"{num}0\")\n        if new_num - num == 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    # Total number of members\n    total_members = 17\n    # Number of members who didn't shake hands with three others\n    no_handshake_members = 4\n    # Number of members who shook hands normally\n    normal_handshake_members = total_members - no_handshake_members\n\n    # Calculate handshakes among normal handshake members\n    normal_handshakes = normal_handshake_members * (normal_handshake_members - 1) // 2\n\n    # Calculate handshakes between no-handshake members and normal members\n    handshakes_between_groups = no_handshake_members * normal_handshake_members\n\n    # Total handshakes are the sum of the two above\n    total_handshakes = normal_handshakes + handshakes_between_groups\n    \n    return total_handshakes\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Being the 3rd when counting from any direction implies that there are\n    # exactly 2 animals in each direction from Bob.\n    # Thus, in terms of rows and columns of a rectangular array:\n    # - There must be 2 rows in front of Bob and 2 rows behind him,\n    # - and there must be 2 columns to the left of Bob and 2 columns to his right.\n\n    # Therefore, the total number of rows = 2 (front) + 1 (Bob's row) + 2 (back)\n    total_rows = 2 + 1 + 2\n\n    # And the total number of columns = 2 (left) + 1 (Bob's column) + 2 (right)\n    total_columns = 2 + 1 + 2\n\n    # Therefore, the total number of animals in the array is\n    # the number of rows multiplied by the number of columns.\n    total_animals = total_rows * total_columns\n\n    return total_animals\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total distance covered by plum trees.\n    total_distance = (41 - 1) * 4\n    # Number of pine trees.\n    num_pine_trees = (total_distance // 5) + 1\n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_sum = 4000 * 12\n    correct_sum = incorrect_sum - 2800 + 3040\n    correct_average = correct_sum / 12\n\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(one_cent / 6, two_cent / 5)  # Heights of stacks with one-cent and two-cent coins\n    equation2 = Eq(one_cent / 4, five_cent / 3) # Heights of stacks with one-cent and five-cent coins\n    equation3 = Eq(one_cent + two_cent + five_cent, 124)  # Total number of coins\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (one_cent, two_cent, five_cent))\n\n    # Calculating the total value of all these coins in cents\n    total_value = solutions[one_cent] * 1 + solutions[two_cent] * 2 + solutions[five_cent] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_initial, B_initial = symbols('A_initial B_initial')\n\n    equation1 = Eq(A_initial, B_initial + 350)\n    equation2 = Eq(B_initial, 2 * (A_initial - 500))\n\n    solutions = solve((equation1, equation2), (A_initial, B_initial))\n\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2 * green_pens) / 5\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if blue_pens.is_integer() and red_pens.is_integer() and total_pens < 100:\n            max_red_pens = max(max_red_pens, red_pens)\n\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    spent_on_books = initial_amount * 0.25\n    remaining_after_books = initial_amount - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Start with the largest 6-digit palindrome.\n    for i in range(999999, 100000, -1):\n        # Check if the number is a palindrome.\n        if str(i) == str(i)[::-1]:\n            # Check if it's divisible by 6.\n            if i % 6 == 0:\n                return i\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys = 216\n    girls = 153\n    new_children = 37\n\n    total_children = boys + girls + new_children\n\n    return total_children\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    required_length = 1.83  # meters\n    short_by = 10 / 100  # 10 cm converted to meters\n    garage_piece_length = required_length - short_by  # meters\n    return garage_piece_length\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Initial number of pins and needles\n    total_pins_needles = 2540\n    sold_pins = 1820\n    \n    # Sold needles is 4/5 of total needles, so remaining is 1/5 of total needles\n    # remaining_pins = remaining_needles\n    # total_pins = total_pins_needles - total_needles\n    # total_pins - sold_pins = 1/5 * total_needles\n    \n    # Let total_needles be represented by 'n'\n    # Hence, (total_pins_needles - n) - sold_pins = 1/5 * n\n    # => 2540 - n - 1820 = 1/5 * n\n    # => 720 - n = 1/5 * n\n    # => 720 = 6/5 * n\n    # => n = 720 * 5/6\n    \n    total_needles = (720 * 5) // 6\n    remaining_needles = total_needles // 5  # Since 1/5 of the needles are left\n    \n    # Checking Paul's solution\n    pauls_solution_correct = False if remaining_needles != 455 else True\n\n    return remaining_needles, pauls_solution_correct\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    \n    total_sum = 0\n    for i in range(41):\n        total_sum += pattern[i % pattern_length]\n    \n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return int((2/7) * 315)\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_marbles = symbols('initial_marbles')\n    \n    # After giving 3/8 of his marbles to friends, he has 5/8 left\n    after_friends = initial_marbles * (5/8)\n    \n    # He gives 5/7 of the remaining to his brother, so he has 2/7 of what remained after friends\n    after_brother = after_friends * (2/7)\n    \n    # His cousin gives him 408 marbles\n    final_marbles = after_brother + 408\n    \n    # Final number of marbles is twice the initial number\n    equation = Eq(final_marbles, 2 * initial_marbles)\n    \n    # Solve for initial number of marbles\n    solution = solve(equation, initial_marbles)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_pence in range(0, 24):\n        remaining = 47 - 2 * two_pence\n        if remaining % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11)\n    denominator = (1/8 - 1/9 + 1/10 - 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variable\n    x = symbols('x')\n    # Set up the equation\n    equation = Eq(52 - (4*x - 3), 47)\n    # Solve for x\n    solution = solve(equation, x)\n    # Extract the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    # Because we are dividing into 3 piles, we use 3 nested loops\n    for x1 in range(1, 11):  # Start with 1 because we cannot have a pile with 0 apples\n        for x2 in range(1, 11 - x1):  # Ensure that the total does not exceed 11\n            # The third pile is determined by subtracting the other two piles from 11\n            x3 = 11 - x1 - x2\n            if x3 > 0: # Ensure the third pile has at least 1 apple\n                count += 1  # Each valid combination is a way to divide the apples\n    return count\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # At age 14, Brian's father was 41 which is the reverse of 14 (Brian's age).\n    # Let's denote Brian's age as x and his father's age as y when their ages\n    # are the reverse of each other for the next time.\n    # Since their age difference will always be 41 - 14 = 27,\n    # we can set up the equation: y - x = 27\n    # We also know that y is the reverse of x in terms of digits.\n    # Therefore, y = 10 * (x % 10) + (x // 10), where % is the modulo operator\n    # and // is the integer division operator. We search for x > 14 since Brian\n    # is currently 14 and we are interested in the next occurrence.\n\n    for x in range(15, 100):  # Brian's age can be at max 99\n        y = 10 * (x % 10) + (x // 10)\n        if y - x == 27:\n            return x\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    ways = 0\n    for i in range(1, 8):\n        ways += 1\n    return ways - 1  # We subtract 1 because we don't count the partition of 8 itself (8 = 8).\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_train_meters = 480\n    \n    speed_m_per_s = length_train_meters / time_seconds\n    speed_km_per_h = (speed_m_per_s * 3600) / 1000\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    # Rounding the numbers to nearest hundred\n    first_number_rounded = round(654876, -2)\n    second_number_rounded = round(279745, -2)\n\n    # Calculating the estimated difference\n    estimated_difference = first_number_rounded - second_number_rounded\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    result = (2/5) * 30\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between = 8\n    # Subtracting one because if there are n poles, there are n-1 intervals between them\n    road_length = (num_lampposts - 1) * distance_between\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    percentage_failed = (failed_pupils / total_pupils) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n    \n    poppers_needed = total_guests % bag_size\n    poppers_left = bag_size - poppers_needed\n    \n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    return pow(7, 2023, 10)\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # In the worst case scenario, the warden tries each key for each classroom.\n    # For the first classroom, he may have to try all 10 keys.\n    # For the second classroom, he may have to try the remaining 9 keys.\n    # This pattern continues until the last classroom, where only 1 key is left to try.\n\n    # The number of tries is the sum of the numbers from 1 to 10.\n    # This is equivalent to the sum of an arithmetic series. \n\n    total_keys = 10\n    \n    # Sum of the first n natural numbers formula:\n    # n(n + 1) / 2\n    num_tries = total_keys * (total_keys + 1) // 2\n    \n    return num_tries\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root, Rational\n\n    getcontext().prec = 6  # Set precision for Decimal calculations\n\n    numerator = root(Decimal(-40) / Decimal(3), 3) * (Decimal(4) + Decimal(1) / Decimal(99))**2\n\n    denominator = Decimal('59.24') - root(Decimal(10) + Decimal(1) / Decimal(9), 2)\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number[46:] # Remove first 46 digits to get the smallest number\n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number % 5 == 3) and (number % 6 == 2) and (number % 7 == 1):\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number (10001)\n    least_5_digit_palindrome = int('10001')\n    \n    # The greatest 6-digit palindrome number (999999)\n    greatest_6_digit_palindrome = int('999999')\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_chosen = 2\n\n    return comb(total_children, children_chosen)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    fraction_boys = 1/4\n    total_members = boys / fraction_boys\n    girls = total_members - boys\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_current_age = 8\n    lucy_current_age = 36\n    target_age_sum = 60\n    years_later = (target_age_sum - (sara_current_age + lucy_current_age)) / 2\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_person_benches = 6\n    three_person_benches = 9\n    capacity = (two_person_benches * 2) + (three_person_benches * 3)\n    return capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    coin_value = 1\n    paid_amount = int(book_cost) + 1  # pay with whole number of 1 pound coins\n\n    change = paid_amount - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    for i in range(99, 120, 2):\n        if i % 4 == 3:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    mixed_number = 201 + 1/7\n    result = mixed_number / 8\n    A = result - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    footballs, basketballs = symbols('footballs basketballs', integer=True)\n    # Original ratio of footballs to basketballs\n    equation1 = Eq(footballs, 2/5 * basketballs)\n    # After selling 16 basketballs, ratio becomes 2/3\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n    # Total number of footballs and basketballs originally\n    total = solutions[footballs] + solutions[basketballs]\n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure she gets a pair, Rona must take out all gloves of 4 colors completely\n    # and one from the fifth color. So for each color she needs to take out one glove\n    # she will end up with 4 different colors plus one glove to make a pair.\n    \n    # Therefore, the answer is 4 colors with 1 glove each plus 1 glove for the pair.\n    num_gloves_to_ensure_pair = 4 * 1 + 1\n    \n    return num_gloves_to_ensure_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the younger and older brother.\n    younger_current, older_current = symbols('younger_current older_current')\n\n    # The difference in age between the older and younger brother will always be the same.\n    age_difference = older_current - younger_current\n\n    # When the older brother was the age of the younger brother's current age, the younger one was 12.\n    # This means (older_current - age_difference) years ago, the younger brother was 12.\n    # So, we can setup an equation for the younger brother: younger_current - age_difference = 12\n    equation1 = Eq(younger_current - age_difference, 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27.\n    # This means in 'age_difference' years in the future, the older brother would be 27.\n    # So, we can setup the second equation for the older brother: older_current + age_difference = 27\n    equation2 = Eq(older_current + age_difference, 27)\n\n    # Now we can solve the two equations to find the current ages of the brothers.\n    solutions = solve((equation1, equation2), (younger_current, older_current))\n\n    # Return the age of the older brother this year.\n    return solutions[older_current]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    junctions = lines * (lines - 1) // 2\n    return junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10/100)\n    final_price = increased_price * (1 - 10/100)\n    return final_price\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    peter, sam = symbols('peter sam')\n    \n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_gives = sam * 0.20\n    peter_receives = peter + sam_gives\n    \n    # Peter gave 25% of his new amount of stickers to Sam\n    peter_gives = peter_receives * 0.25\n    sam_receives = sam - sam_gives + peter_gives\n    \n    # In the end, Sam had 96 stickers more than the new amount of Peter.\n    equation2 = Eq(sam_receives, peter_receives - peter_gives + 96)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert total time from minutes to hours\n    total_time = 7.2 / 60\n    \n    # Define the speeds\n    speed_students = 8\n    speed_teacher = 12\n    \n    # The distance covered by the teacher is the same for both going to the head of the line and coming back\n    # Let the length of the line be x (the distance the teacher runs one way)\n    # The time for the teacher to go to the head of the line and return is the same (7.2 minutes)\n    # When the teacher is running to the front, the students are also walking forward, so the teacher covers more distance relative to the ground\n    # Distance = Speed * Time, Two-way distance for teacher = time_going * (speed_teacher + speed_students) + time_returning * (speed_teacher - speed_students)\n    # total_time is the sum of time_going and time_returning\n    # As the total time and speeds are fixed, we can form the following equation for x(distance):\n    # 2*x = total_time * (speed_teacher + speed_students) + total_time * (speed_teacher - speed_students)\n    # Then, we solve for x\n    \n    x = total_time * speed_students / 2\n    \n    return x\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Each group plays a single round-robin tournament with 4 members.\n    # In a round-robin tournament with n members, each member plays with every other member once.\n    # Therefore, for 4 members, each member plays 3 games, making it 3*4/2 games in one group.\n    games_per_group = (4 * (4 - 1)) // 2\n\n    # Since there are 4 groups, multiply the number of games in one group by 4.\n    group_stage_games = games_per_group * 4\n\n    # Knockout stage games:\n    # Since there are 8 contestants, there will be 4 games in the first round of knockouts.\n    # After the first round, 4 winners will play 2 games in the semi-finals.\n    # Finally, there will be 1 game for the championship and 1 game for third place.\n    knockout_stage_games = 4 + 2 + 1 + 1\n\n    # Total number of games is the sum of group stage games and knockout stage games.\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = None\n    for number in range(31, 40):\n        if number % 4 == 0 and number % 6 == 0:\n            sweets = number\n            break\n    return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora is currently 5 years old.\n    flora_age_now = 5\n    \n    # Flora's age two years ago would have been 5 - 2 = 3 years old.\n    flora_age_then = flora_age_now - 2\n    \n    # Two years ago, her father's age was 9 times Flora's age then.\n    fathers_age_then = 9 * flora_age_then\n    \n    # To get her father's age now, we need to add 2 to his age two years ago.\n    fathers_age_now = fathers_age_then + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    \n    # Count the occurrence of the digit '3' for each number\n    for num in range(8, 86):\n        count += str(num).count('3')\n    \n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Conversion from minutes to hours\n    late_time_hours = 20 / 60\n    early_time_hours = -10 / 60\n\n    # Setting up the equation for the distance traveled:\n    # distance = speed * time; since the distance is the same for both speeds:\n    # 4 * (time + late_time_hours) = 6 * (time + early_time_hours)\n    \n    # Solving for time\n    time = (4 * late_time_hours - 6 * early_time_hours) / (6 - 4)\n    \n    # Now calculate distance\n    distance = 4 * (time + late_time_hours)  # Speed at 4 km/h\n    \n    return distance\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for number in range(2, 51, 2):  # Even numbers from 2 up to the 25th even number (50)\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1 * 125\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen = 8\n    pineapple_juice = ramen - 5\n    roasted_duck = 6 * ramen\n    total = ramen + pineapple_juice + roasted_duck\n    return total\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Ken took 1 less than half of the remaining pieces of candy.\n    ken_took = (remaining * 2) + 1\n    remaining += ken_took\n    # Nini took 3 more than half of the remaining pieces.\n    nini_took = (remaining * 2) - 3\n    remaining += nini_took\n    # Ivy took 2 less than half of the pieces left in the bowl.\n    ivy_took = (remaining * 2) + 2\n    remaining += ivy_took\n    # Eddie took 1 more than half of the pieces of candy.\n    eddie_took = (remaining * 2) - 1\n    remaining += eddie_took\n    return remaining\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climb = 7 * 5 + 3  # climbs for the first 5 days and the sixth day\n    remaining_distance = 18 - total_climb  # distance left after the sixth day\n    slide_down = 7 - remaining_distance  # slide down is the daily climb minus what is left to climb after sixth day\n    return slide_down\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    distinct_permutations = set(permutations('CYZZ'))\n    return len(distinct_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24*25*31\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # We are given that g = 3 * b and the total number of paintbrushes is 99\n    # Each girl takes 2 paintbrushes and each boy takes 3 paintbrushes\n    # So, we have the equation 2*g + 3*b = 99\n    # Replacing g with 3*b, we get 2*(3*b) + 3*b = 99\n    \n    b = 1\n    while (2 * (3 * b) + 3 * b) != 99:\n        b += 1\n    g = 3 * b\n    return g\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 16\n    C_students = 20\n    \n    # Find the GCD of the three numbers\n    ans = gcd(gcd(A_students, B_students), C_students)\n    \n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to centimeters\n    height_in_meters = 5 * 100  # 5 meters to centimeters\n    height_in_cm = 120          # already in centimeters\n    height_in_mm = 50 / 10      # 50 millimeters to centimeters\n    height_in_feet = 8 * 30.48  # 8 feet to centimeters (approximate conversion)\n    \n    # Typical range of human heights in centimeters (approximate)\n    min_height_cm = 50  # Minimum plausible height, very small child\n    max_height_cm = 250  # Maximum plausible height, exceptionally tall person\n    \n    # Compare each converted height to the range\n    correct_estimates = []\n    for height in [height_in_meters, height_in_cm, height_in_mm, height_in_feet]:\n        if min_height_cm <= height <= max_height_cm:\n            correct_estimates.append(height)\n\n    # Since only one estimate can be correct\n    if len(correct_estimates) == 1:\n        ans = correct_estimates[0]\n    else:\n        ans = None  # If there is not exactly one correct estimate\n\n    return ans\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124  # or -(124 - 121)\n    n = 15\n    \n    # The formula to find the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    # Let avg_boys be the average score of boys\n    avg_boys = 74\n    # Let avg_all be the average score of all participants\n    avg_all = 82\n    # Let n_boys be the number of boys\n    n_boys = 18\n    # Let n_girls be the number of girls\n    n_girls = 12\n    # Let avg_girls be the average score of girls (unknown)\n\n    # Using the formula Total_Score = Average * Number_of_Participants\n    total_score_boys = avg_boys * n_boys\n    total_score_all = avg_all * (n_boys + n_girls)\n\n    # The total score of girls is the difference between total scores of all participants and boys\n    total_score_girls = total_score_all - total_score_boys\n\n    # Calculating the average score of girls\n    avg_girls = total_score_girls / n_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # The proportion of marked fish in the second catch should be roughly equal \n    # to the proportion of all marked fish in the pond.\n    # Let N be the total number of fish in the pond.\n    # If 100/N = 25/200, we can find N.\n    # Thus, N = (100*200)/25\n    N = (100*200) / 25\n    return N\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    # Number of rabbits initially\n    initial_rabbits = 12\n    # Number of days the food will last for initial_rabbits\n    days_for_initial = 15\n    \n    # Number of rabbits to feed now\n    new_rabbits = 20\n\n    # Total amount of food is equal to initial_rabbits * days_for_initial\n    total_food = initial_rabbits * days_for_initial\n\n    # Now, we want to find out for how many days the total food can feed new_rabbits\n    days_for_new = total_food / new_rabbits \n\n    return days_for_new\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = boys + 12\n    total_trees = Eq(boys + girls, 100)\n\n    num_boys_trees = solve(total_trees, boys)\n\n    return num_boys_trees[0]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_has = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_has + mother_gave\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    start_breakfast = wake_up_time + timedelta(minutes=25)\n    finish_breakfast = start_breakfast + timedelta(minutes=10)\n    leave_for_school = finish_breakfast\n    arrival_time = leave_for_school + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    max_2g_weights = 77 // 2\n    ways_count = 0\n    for num_2g_weights in range(0, max_2g_weights + 1):\n        remaining_weight = 77 - num_2g_weights * 2\n        if remaining_weight % 3 == 0:\n            ways_count += 1\n    return ways_count\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Define the function to compute the sum of cubes from 1 to n\n    def sum_of_cubes(n):\n        return (n * (n + 1) // 2) ** 2\n    \n    # Calculate the sum of cubes from 1 to 20\n    sum_1_to_20 = sum_of_cubes(20)\n    # Calculate the sum of cubes from 1 to 9\n    sum_1_to_9 = sum_of_cubes(9)\n    \n    # The required sum is the difference between the sum from 1 to 20 and the sum from 1 to 9\n    answer = sum_1_to_20 - sum_1_to_9\n    return answer\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount_in_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n    total_quarters = total_amount_in_dollars * quarters_in_one_dollar\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_average = 90 * 5\n    score_of_first_four_assignments = 96 + 85 + 89 + 92\n    score_on_fifth_assignment = total_score_for_average - score_of_first_four_assignments\n\n    return score_on_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    cards_count = solve_congruence(*congruences)\n\n    return cards_count[0]\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of girls, and b represent the number of boys\n    g, b = symbols('g b')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(b - g, 90)  # There are 90 more boys than girls\n    equation2 = Eq(g + b, 1690) # There are 1690 pupils in total\n    \n    # Solve for g and b\n    pupils = solve((equation1, equation2), (g, b))\n    \n    girls = pupils[g]\n    boys = pupils[b]\n    \n    # Now let gs represent girls who can swim and gn those who can't\n    gs, gn = symbols('gs gn')\n    \n    equation3 = Eq(gs/gn, 31/49) # Ratio of girls who can swim to those who can't\n    equation4 = Eq(gs + gn, girls) # Total number of girls\n    \n    # Solve for gs and gn\n    girls_swim = solve((equation3, equation4), (gs, gn))\n    \n    # Now with the boys, let bs represent boys who can swim and bn those who can't\n    bs, bn = symbols('bs bn')\n    \n    equation5 = Eq(bs + 120, bn) # The number of boys who can swim is 120 less than those who can't\n    equation6 = Eq(bs + bn, boys) # Total number of boys\n    \n    # Solve for bs and bn\n    boys_swim = solve((equation5, equation6), (bs, bn))\n    \n    # The number of pupils who cannot swim is the sum of girls who can't swim and boys who can't swim\n    cannot_swim = girls_swim[gn] + boys_swim[bn]\n    \n    return cannot_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure at least 5 different colours with at least 10 pencils for each,\n    # we can draw the maximum amount possible (74) from 4 colours without satisfying the condition.\n    # Then, regardless of the result, we draw one more pencil which will guarantee the 5th colour.\n\n    # 74 pencils from each of the 4 colours\n    max_draw_4_colours = 74 * 4\n    \n    # 1 more pencil to guarantee the 5th colour\n    min_draw_5th_colour = 10\n\n    # Total minimum number of pencils to draw\n    total_min_draw = max_draw_4_colours + min_draw_5th_colour\n\n    return total_min_draw\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    coach_capacity = 34\n\n    num_coaches = (total_pupils + coach_capacity - 1) // coach_capacity\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of sweets Pip has\n    x = symbols('x')\n    # Since Pip and Bud shared sweets in the ratio 4:7, Bud has (7/4)*x sweets\n    # After Santa gave Bud five sweets, the ratio of sweets between Pip and Bud was 8:15, thus:\n    # (x)/(7/4*x + 5) = 8/15\n    \n    equation = Eq(x/(7*x/4 + 5), 8/15)\n    solution = solve(equation, x)\n    \n    return solution[0]  # Pip's number of sweets\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5\n    last_digit_7_power_30 = pow(7, 30, 10)\n    \n    ans = (last_digit_5 * last_digit_7_power_30) % 10\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    primes = [p for p in range(2, 46) if all(p % d != 0 for d in range(2, int(p ** 0.5) + 1))]\n\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:\n                    if not (a + b == c or a + c == b or b + c == a):\n                        if b - 1 == 7 or a - 1 == 7 or c - 1 == 7:\n                            if 2 * c + a == b or 2 * c + b == a or a + b == 2 * c:\n                                return a + b + c\n    return None\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd  # gcd is used to find the greatest common divisor\n\n    cloth1_length = 39\n    cloth2_length = 52\n\n    ans = gcd(cloth1_length, cloth2_length)  # The longest possible length is the gcd of the two lengths\n\n    return ans\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Given dimensions of the rectangular field\n    length = 144\n    width = 204\n    # Total number of wheats\n    total_wheats = 116\n    # Wheats at the corners (4 corners, each with 1 wheat)\n    corner_wheats = 4\n    # Supplementary wheats on sides (excluding corners)\n    side_wheats = total_wheats - corner_wheats\n\n    # Since the field is a rectangle, wheats are planted along the perimeter\n    # Calculate the number of wheats along length and width (excluding corners)\n    wheat_along_length = (side_wheats // 2) // 2  # halve it once for length & width, halve again for two lengths\n    wheat_along_width = (side_wheats // 2) // 2   # the same division for widths\n\n    # Exclude the corner wheats for both length and width, add 1 for the initial wheat\n    distance_between_wheats_length = (length - 2) / (wheat_along_length - 1)\n    distance_between_wheats_width = (width - 2) / (wheat_along_width - 1)\n    \n    # The answer must be the same for both length and width since the wheats are planted evenly\n    # We can return one of them as the answer\n    ans = distance_between_wheats_length\n\n    return ans\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    # Assuming Joe shares the chocolate bar equally with one friend\n    squares_per_person = total_squares // 2\n\n    return squares_per_person\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A and B represent the number of points per A and B grades, respectively.\n    A, B = symbols('A B')\n\n    # Simon's equation: 4A + 4B = 36\n    simon_eq = Eq(4 * A + 4 * B, 36)\n\n    # Peter's equation: 2A + 3B = 22\n    peter_eq = Eq(2 * A + 3 * B, 22)\n\n    # Solve the system of equations for A and B\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    # Calculate the score for someone with 3 As and 5 Bs using the solved values for A and B\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Define the individual digits based on the given clues:\n    A = 2  # A is the smallest prime number\n    B = 4  # B is the smallest composite number\n    C = 1  # C is neither prime number nor composite number, 1 is the only choice (0 is also not allowed if we consider a phone number)\n    D = A - 2  # D is 2 less than the smallest prime number, which is 0 (but typically not valid for phone numbers, but no other option fits)\n    E = 9  # E is the largest composite number up to 10\n    F = 5  # F only has factors 1 and 5, hence it must be 5\n    G = 4  # G is the greatest factor of 8 (apart from 8 itself), which is 4\n    H = 6  # H is the lowest multiple of 6, which is 6 itself\n\n    # Combine digits to form the phone number:\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60 # 24 hours * 60 minutes * 60 seconds\n    ans = seconds_in_a_day * (1/4) * (1/6) * (1/8) # quarter of a sixth of an eighth of a day\n    return int(ans)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Marry, Alexis, and Charlotte have initially\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Given that Marry and Alexis gave 20% of their stickers to Charlotte\n    # Also, Charlotte's stickers increased by 80%, and the ratio of Marry to Alexis initially is 7:5\n    # Marry has 20 stickers more than Charlotte after giving away the stickers.\n\n    # Set up the equations based on the problem statement\n    marry_transfer = marry - 0.20 * marry\n    alexis_transfer = alexis - 0.20 * alexis\n    charlotte_transfer = charlotte + 0.20 * marry + 0.20 * alexis\n    charlotte_final = 1.80 * charlotte  # Charlotte's stickers increased by 80%\n\n    # Create equations\n    equation1 = Eq(marry_transfer + alexis_transfer, marry + alexis - 0.20 * (marry + alexis))  # Total stickers after transfer\n    equation2 = Eq(marry_transfer, charlotte_final + 20)  # Marry has 20 more stickers than Charlotte\n    equation3 = Eq(charlotte_transfer, charlotte_final)  # Charlotte's sticker increase by 80%\n    equation4 = Eq(marry, 7 * alexis / 5)  # Ratio of Marry to Alexis stickers\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte))\n\n    # Return the number of Alexis's initial stickers\n    return solutions[alexis]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n    # The family can be considered as one unit plus other members\n    # Since this unit can be arranged internally in 3! ways (Eddie and his mom and dad),\n    # and externally with the remaining members, the combination will be as follows:\n    # Assuming there are n members in the family including Eddie and his parents, and they,\n    # as a unit, can be placed in any position among the n-member arrangement.\n    # Therefore, the total arrangements are:\n    \n    family_unity = math.factorial(3)  # Internal arrangements of Eddie and his parents\n    other_members = 3  # If there is no other family member except Eddie and his parents, consider only their arrangements\n\n    # Total different ways for the family to line up, unity as one member * arrangements of other members\n    total_ways = family_unity * other_members\n    \n    return total_ways\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):         # The thousands and units digit (cannot be 0)\n        for b in range(0, 10):     # The hundreds digit\n            for c in range(0, 10): # The tens digit\n                pip_number = int(f\"{a}{b}{c}{a}\")\n                bud_number = int(f\"{a}{c}{b}{a}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_25_cows_10_days = 25 * 10\n    grass_for_15_cows_20_days = 15 * 20\n\n    # Total amount of grass is the same; we can equate the two expressions\n    total_grass = grass_for_25_cows_10_days  # or grass_for_15_cows_20_days\n\n    # Now we want to find out how many cows can be fed for 50 days with the same amount of grass\n    # Let's denote the number of cows as x\n    # We have the equation total_grass = x * 50 (since we want to feed the cows for 50 days)\n    # Solving for x:\n    x = total_grass / 50\n\n    return x\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    pages = 95\n    max_days = 0\n    while (max_days * (max_days + 1)) // 2 <= pages:\n        max_days += 1\n    max_days -= 1  # Subtract 1 because we stop once we exceed the pages count\n    return max_days\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5 # total number of digits we have\n    digit_2_count = 3 # number of 2s we have\n    digit_3_count = 2 # number of 3s we have\n    \n    # Total permutations of digits = factorial(total_digits)\n    total_permutations = factorial(total_digits)\n    \n    # We need to divide by the repetitions of 2s and 3s\n    permutations_2 = factorial(digit_2_count)\n    permutations_3 = factorial(digit_3_count)\n    \n    # The final number of permutations is then\n    # divided by the duplicate permutations of 2s and 3s\n    different_numbers = total_permutations // (permutations_2 * permutations_3)\n    \n    # However, this includes numbers that start with zero which is not a valid four digit number\n    # Since we cannot start with zero, we need to adjust the count by subtracting permutations\n    # that would have a leading zero (for this case, leading 3 is not possible).\n    # We treat one of the 2's as a leading digit and permute the remaining digits\n    permutations_with_leading_2 = factorial(total_digits - 1) // (factorial(digit_2_count - 1) * factorial(digit_3_count))\n    \n    # Subtract the invalid permutations (starting with 2) from the total to get the valid four digit numbers\n    valid_four_digit_numbers = different_numbers - permutations_with_leading_2\n    \n    return valid_four_digit_numbers\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    equation1 = (oranges / lemons) - (3/5)\n    equation2 = ((oranges - 48) / lemons) - (1/2)\n\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first day is 1/3 of second day\n    third_day = (5 / 3) * second_day  # Since third day is 5/3 of second day\n\n    total_watermelons = first_day + second_day + third_day\n    return total_watermelons\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Calculate separate permutations for math books, English books, and other books\n    perm_math = factorial(3)\n    perm_english = factorial(2)\n    \n    # Consider the entire block of math books as one unit, the entire block of English books as one unit\n    # And 3 other books are individual units. So we have 5 units in total to arrange\n    perm_total_blocks = factorial(5)\n    \n    # Multiply the permutations of the individual blocks with the permutations of the total blocks\n    ans = perm_math * perm_english * perm_total_blocks\n    \n    return ans\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    additional_discount = 100\n    sales_tax_rate = 0.10\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price_before_tax = discounted_price - additional_discount\n    final_price_with_tax = final_price_before_tax * (1 + sales_tax_rate)\n\n    return final_price_with_tax\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1  # considering Judy herself\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    num_cakes = 250 / flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol for the number of days Kevin takes off\n    kevin_off = symbols('kevin_off')\n\n    # Calculate the work rate of Ivy and Kevin\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n\n    # Equation based on the fact they finish the job in 12 days and Kevin takes some days off\n    equation = Eq(ivy_rate * 12 + kevin_rate * (12 - kevin_off), 1)\n\n    # Solve the equation for the number of days Kevin takes off\n    solutions = solve(equation, kevin_off)\n\n    # Return the number of days Kevin takes off\n    return solutions[0]\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n    \n    both_competitions = (maths_competition + art_competition) - total_students\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    ans = 379 % 6\n    return ans\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count(\"1\")\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy must take out 5 socks to ensure she has at least one pair of the same colour.\n    # Worst case scenario: she gets 4 different socks (2 red, 2 black) and with the fifth sock,\n    # she is guaranteed to have a pair of one colour.\n    return 5\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n    # Calculate permutations\n    ans = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    initial_price = 10  # in pence\n    final_price = 100  # in pence (£1.00 = 100p)\n\n    increase = final_price - initial_price\n    percentage_increase = (increase / initial_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08  # 8%\n\n    final_cost = bracelet_cost * (1 + gst_rate)\n\n    return final_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # The total number of tricycles and bicycles is 300\n    equation1 = Eq(b + t, 300)\n\n    # Each bicycle has 2 wheels and each tricycle has 3 wheels.\n    # The total number of tricycle wheels is 180 more than the total number of bicycle wheels.\n    equation2 = Eq(3 * t, 2 * b + 180)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # Minimum possible divisor is quotient + 1 as remainder is non-zero\n    \n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_ratio = 2\n    total_ratio = 1 + 2 + 2  # black + white + grey\n\n    # Given there are 14 grey rabbits, we can find the total number of patterns (BWWGG)\n    patterns = 14 / grey_ratio\n\n    # Max total rabbits is when we have complete patterns of BWWGG\n    max_rabbits = patterns * total_ratio\n\n    return int(max_rabbits)\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    # difference of two squares a^2 - b^2 = (a + b)(a - b)\n    a = 2015\n    b = 1\n    ans = (a - b) * (a + b) - a * b\n    return ans\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    \n    return rounded_number if rounded_number != 9764.0 else \"Tongtong is correct.\"\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_no_foil = 9\n\n    not_foil = total_biscuits - foil_wrappers\n    not_chocolate = not_foil - not_chocolate_no_foil\n\n    chocolate_biscuits = foil_wrappers - chocolate_with_foil - not_chocolate\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 * (1/4)\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of crystals Jason had\n    x = symbols('x')\n\n    # First transaction - sold (1/2 * x + 10) to Yvonne\n    first_transaction = x / 2 + 10\n\n    # Second transaction - mined 20 more crystals in Singapore\n    second_transaction = 20\n\n    # Third transaction - sold 14 crystals to Cherlyn\n    third_transaction = 14\n\n    # Final number of crystals Jason has\n    final_crystals = 35\n\n    # Equation representing the series of transactions\n    equation = Eq(x - first_transaction + second_transaction - third_transaction, final_crystals)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    zeros_from_2 = 10  # The exponent of 2 in A's prime factorization is 10\n    zeros_from_5 = 15  # The exponent of 5 in A's prime factorization is 15\n\n    # The number of trailing zeros in the product is determined by the lesser of the exponents of 2 and 5\n    ans = min(zeros_from_2, zeros_from_5)\n    \n    return ans\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define our symbols\n    olaf, anna = symbols('olaf anna')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(olaf, 3 * anna)                 # Olaf had thrice as many carrots as Anna\n    equation2 = Eq(anna, 2 * (olaf - 335))         # Anna had twice as many carrots as Olaf after he gave away 335\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed and t be the original time\n    d, v, t = symbols('d v t')\n\n    # When speed increases by 25%, time decreases by 20 minutes\n    # new_speed = v + 25% * v = 1.25 * v\n    # new_time = t - 20 minutes\n    equation1 = Eq(d, 1.25 * v * (t - 20/60))\n    \n    # Distance remains same for speed increase scenario\n    equation2 = Eq(d, v * t)\n\n    # When speed decreases by 45 m/min, time increases by 75%\n    # new_speed = v - 45\n    # new_time = t + 75% * t = 1.75 * t\n    equation3 = Eq(d, (v - 45) * 1.75 * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # Return the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_Bala = 1  # Bala is directly behind Ali, so they count as one together\n\n    total_people = people_in_front_of_Ali + Ali_Bala + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '5', '6', '8']\n    decimal_permutations = []\n\n    # Calculate all permutations of the 4 digits\n    for perm in permutations(digits):\n        # Insert the decimal point in all the possible positions between digits\n        for i in range(1, len(perm)):\n            decimal_permutations.append(perm[:i] + ('.',) + perm[i:])\n\n    # Each permutation in decimal_permutations is a unique number with the decimal point\n    return len(decimal_permutations)\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    \n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    total_pence = 30 * 100  # Convert pounds to pence\n    cost_per_plant = 85\n    max_plants = total_pence // cost_per_plant\n    \n    return max_plants\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Since all cars are black or blue, the ones that aren't blue must be black.\n    black_cars = total_cars - blue_cars\n    \n    # Since there are 25 black Dodges and the rest of the black cars must therefore be Fords,\n    # we can find the number of black Fords by subtracting the number of black Dodges from the total number of black cars.\n    black_fords = black_cars - black_dodges\n    \n    # The total number of Fords is the sum of black Fords and blue Fords.\n    # We can find the number of blue Fords by subtracting the black Fords from the total Fords.\n    blue_fords = fords - black_fords\n    \n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n    return smaller_number\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # Since 1, 2, and 3 are not composite, we start at 4.\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Composite numbers have more than two factors.\n        # Check if each of the consecutive numbers is composite.\n        if len({i for i in range(1, A+1) if A % i == 0}) > 2 and \\\n           len({i for i in range(1, B+1) if B % i == 0}) > 2 and \\\n           len({i for i in range(1, C+1) if C % i == 0}) > 2 and \\\n           len({i for i in range(1, D+1) if D % i == 0}) > 2:\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Minimum picks needed will be one more than the total number of balls excluding one colour\n    # because after that number of picks, we are guaranteed to have at least one of each colour. \n    # This is an application of the Pigeonhole Principle.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # We pick all balls of two colours and one extra to ensure we have all three colours\n    min_picks = blue_balls + red_balls + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_earnings_per_day = 120\n    number_of_working_days = 5\n    total_earnings = average_earnings_per_day * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_marks = 3\n    wrong_deduction = 2\n    total_score = 125\n\n    # Let x be the number of questions answered correctly\n    for x in range(total_questions + 1):\n        # The number of questions answered incorrectly would be total_questions - x\n        incorrect = total_questions - x\n        # Total score is calculated\n        score = x * correct_marks - incorrect * wrong_deduction\n        # Check if the calculated score matches Andrew's actual score\n        if score == total_score:\n            return x\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(60, 72), 84)\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "from math import ceil\n\ndef solution():\n    total_apples = 50\n    children = 8\n    \n    # By the Pigeonhole Principle, if we want to minimize the maximum number anyone gets, \n    # we should first distribute the apples as evenly as possible\n    apples_each = total_apples // children\n    \n    # After evenly distributing, we check how many extra apples are there.\n    extra_apples = total_apples - apples_each * children\n    \n    # If there are extra apples, they will be distributed one by one to each child, \n    # so the child who gets the most will have at least one more than the average.\n    if extra_apples > 0:\n        min_max_apples = apples_each + 1\n    else:\n        min_max_apples = apples_each\n    \n    # If min_max_apples is not the actual maximum (since the child who gets max could still have \n    # at least one more apple than the second max due to the extra apples), \n    # we find the actual maximum by children remaining after giving each one apple\n    actual_max = min_max_apples + ceil(extra_apples / children)\n\n    return actual_max\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    stopping_clock_number = 10\n\n    start_clock_number = (stopping_clock_number - (total_counts % 12)) % 12\n    return start_clock_number or 12\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    # Find the full number from two-thirds\n    full_number = (24 / (2/3))\n    # Find three-quarters of the found full number\n    three_quarters = (3/4) * full_number\n    return three_quarters\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]\n    for n in range(2, 2011):\n        next_number = (seq[n-1] + seq[n-2]) % 10\n        seq.append(next_number)\n    ans = seq[2010]\n    return ans\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31  # Start from 31 as k > 30\n    sum_of_series = 0\n    # Calculate the sum of the series starting from 23 up to the 2k-1 term\n    while True:\n        sum_of_series += (2 * k - 1)\n        # Check if the sum is a perfect square\n        m = int(sum_of_series**0.5)\n        if m**2 == sum_of_series:\n            return m\n        k += 1\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    final_amount = initial_amount + (daily_saving * days_saved) - lent_to_brother - spent_on_snacks\n\n    return final_amount\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Given values\n    initial_speed = 40  # km/h\n    final_speed = 70    # km/h\n    initial_hours = 2   # hours\n    remaining_distance = 280  # km\n    \n    # Calculate initial distance traveled\n    initial_distance = initial_speed * initial_hours\n    # Time taken to travel the remaining distance\n    remaining_hours = remaining_distance / final_speed\n    \n    # Total distance and total time\n    total_distance = initial_distance + remaining_distance\n    total_time = initial_hours + remaining_hours\n    \n    # Calculating average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Let x be the number of cards Alan has.\n    # Bob has 15 more than Alan => bob = alan + 15\n    # After Colin gives Bob 25 cards, Bob has => bob + 25\n    # After Colin gives Bob 25 cards, Bob has 3 times as many as Alan => bob + 25 = 3 * alan\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_day_per_cow = 1\n    \n    total_parts = cows * days * parts_per_day_per_cow\n    \n    return total_parts\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation that represents the problem after selling x kg of oil\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    # Solve the equation for x\n    oil_sold = solve(equation, x)\n\n    return oil_sold[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_train_to_work_late = 0.7\n    prob_train_home_late = 0.4\n\n    # Probability that both trains are not late\n    prob_both_not_late = (1 - prob_train_to_work_late) * (1 - prob_train_home_late)\n\n    # Probability that at least one train is late is 1 minus the probability that both are not late\n    prob_at_least_one_late = 1 - prob_both_not_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    # Ellie's purchase equation\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n    \n    # Beth's purchase equation\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n\n    # Solve for the price of one banana and one apple\n    solutions = solve((eq1, eq2), (banana, apple))\n\n    # Annabella's purchase\n    annabella_cost = solutions[banana] * 10 + solutions[apple] * 10\n\n    return annabella_cost\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let the total number of visitors be x.\n    x = symbols('x')\n\n    # 37% of the visitors were men\n    men = 0.37 * x\n\n    # The rest, which is 63%, were women and children\n    women_children = 0.63 * x\n\n    # Women and children are in the ratio 4 : 5\n    # Let's say 4k women and 5k children, where k is a constant\n    women = 4 * symbols('k')\n    children = 5 * symbols('k')\n\n    # The equation becomes:\n    # 4k + 5k = 0.63 * x\n    equation1 = Eq(women + children, women_children)\n\n    # There are 12 more men than children\n    # men = children + 12\n    equation2 = Eq(men, children + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), x, symbols('k'))\n\n    # Now, calculate the number of women based on the solution above\n    women_number = solutions[symbols('k')] * 4\n\n    return int(women_number)\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_2_digits = 90  # 2-digits numbers range from 10 to 99\n    without_six = (8 * 8)  # Exclude '6' as a digit, so 8 options for each digit\n\n    # Number of 2-digit numbers with at least one '6' is total minus those without '6'\n    at_least_one_six = total_2_digits - without_six\n\n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_had_finally = 100\n\n    strawberries_received = lena_had_finally - (lena_had_initially - lena_gave_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    \n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    total = 2022\n    divisible_by_7 = total // 7\n    divisible_by_17 = total // 17\n    divisible_by_both = total // (7 * 17)\n\n    ans = total - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360  # The distance between the two cars initially\n    speed_a = 48    # Speed of car A\n    speed_b = 72    # Speed of car B\n    combined_speed = speed_a + speed_b  # The combined speed of both cars towards each other\n    \n    time_to_meet = distance / combined_speed  # Time taken for the two cars to meet\n    \n    return time_to_meet\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # Number of ways to choose 2 lines out of 13 to intersect\n    from math import comb\n    ans = comb(13, 2)\n    return ans\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, orange, pear = symbols('mango orange pear')\n    \n    # Equations based on the problem statements\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    \n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # The last digit of a number only depends on the last digit of the multiplied digits\n    # Last digit of 5 raised to any positive integer power is 5\n    last_digit_of_5_power_20 = 5\n    # Last digit of 7 raised to any positive integer power cycles through 7, 9, 3, and 1 every four powers\n    # Since 20 is a multiple of 4, we end up with the cycle's first element\n    last_digit_of_7_power_20 = 7\n    # Therefore, the last digit of the whole expression is the last digit of 5 multiplied by 7\n    last_digit = (last_digit_of_5_power_20 * last_digit_of_7_power_20) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    AB = CD = 14  # Given sides of the quadrants and semicircles\n    pi = 22 / 7   # Given value of pi\n\n    # The perimeter of the figure consists of 2 semicircles and 2 quadrants.\n    # The quadrant is a quarter of a circle and its perimeter is 1/4 of the circumference of a full circle with radius AB/2.\n    # The semicircle is half of a circle and its perimeter is 1/2 of the circumference of a full circle with radius CD.\n\n    # Perimeter of a quadrant with radius r\n    perimeter_quadrant = (pi * AB) / 2  # Quadrant is a quarter of a circle with dia as AB\n    # Perimeter of a semicircle with radius r\n    perimeter_semicircle = (pi * CD) / 2  # Semicircle is half a circle with dia as CD\n\n    # Total perimeter is sum of 2 quadrants and 2 semicircles\n    total_perimeter = (2 * perimeter_quadrant) + (2 * perimeter_semicircle)\n\n    return total_perimeter\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    choose_cup_noodles = 6\n    ways = comb(total_cup_noodles, choose_cup_noodles)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10, 100):\n        number = int('6' + str(i))\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cost_per_cake = 46\n    total_cakes = 195\n    total_cost = cost_per_cake * total_cakes\n    return total_cost\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price = 95  # pence per packet\n    total_cents = 1170  # total amount spent in pence\n    pasta_packets = 6\n    rice_packets = 5\n\n    rice_price = symbols('rice_price')  # price of rice per packet in pence\n\n    total_pasta_price = pasta_packets * pasta_price\n    equation = Eq(total_pasta_price + rice_packets * rice_price, total_cents)\n\n    rice_price_per_packet = solve(equation, rice_price)[0]\n\n    return rice_price_per_packet\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # total work = work rate of energetic * time taken by energetic working alone\n    total_work = 1 * 20 # We can assume the work to be 1 house.\n\n    # work rate of the team = total work / time taken by team\n    work_rate_team = total_work / 12\n\n    # work rate of energetic = total work / time taken by energetic working alone\n    work_rate_energetic = total_work / 20\n\n    # work rate of lazy = work rate of team - work rate of energetic\n    work_rate_lazy = work_rate_team - work_rate_energetic\n\n    # time taken by lazy working alone = total work / work rate of lazy\n    time_lazy = total_work / work_rate_lazy\n\n    return time_lazy\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    average = 1650 // 15\n    smallest = average - 7 \n    largest = average + 7 \n    return smallest + largest\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for a, b, c\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Setting up equation based on the given complex fraction\n    fraction_expr = 1 + 1/(a + 1/(b + 1/c))\n\n    # We need to equate our expression to the given fraction 13/10\n    equation = Eq(fraction_expr, 13/10)\n\n    # Solving the equation for a, b, and c\n    solutions = solve(equation, (a, b, c))\n\n    # Filtering to find only whole number solutions\n    whole_number_solutions = [s for s in solutions if all(x.is_integer and x > 0 for x in s)]\n\n    # Since we have more than one solution, we need to verify which satisfies the condition\n    for s in whole_number_solutions:\n        value = s[0] + 2 * s[1] + 3 * s[2]\n        if (1 + 1/(s[0] + 1/(s[1] + 1/s[2]))).evalf() == 13/10:\n            return value\n    return None\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    i = 1\n    while True:\n        if i % 4 == 0 and i % 6 == 0:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    # Ratio boys:girls is 3:2\n    ratio_boys = 3\n    ratio_girls = 2\n    # Calculate total number of lines with boys\n    lines = boys // ratio_boys\n    # Calculate the number of girls using the ratio\n    girls = lines * ratio_girls\n    return girls\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # The remainders are essentially a modular operation.\n    # Given a % 8 = 6 and b % 8 = 7, we want to find (a + b) % 8\n\n    # Since the remainders are less than 8, we can directly add them\n    remainder_a = 6\n    remainder_b = 7\n    combined_remainder = (remainder_a + remainder_b) % 8\n\n    return combined_remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    used_cloth_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - used_cloth_for_skirts\n    cloth_per_blouse = remaining_cloth / num_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return sum(range(1, 12))\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n\n    # Iterate through all numbers until the total digit count is reached\n    while digit_count < 2019:\n        # Convert the current number to a string to find out how many digits it has\n        current_number_str = str(current_number)\n        digit_count += len(current_number_str)\n\n        # If we've reached or exceeded the desired position, return the correct digit\n        if digit_count >= 2019:\n            # The index in the current number string\n            index_in_current_number = len(current_number_str) - (digit_count - 2019) - 1\n            return int(current_number_str[index_in_current_number])\n\n        # Move on to the next number\n        current_number += 1\n\n# Call the solution function and store the returned result in ans\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 500 / 1000  # converting grams to kilograms\n    kitten_mass_kg = 0.6\n    \n    num_kittens = 4\n    total_kittens_mass_kg = num_kittens * kitten_mass_kg\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    mary = 1\n    brothers = 3\n    sisters = 4\n    total_family_members = mary + brothers + sisters\n    eggs_bought_by_each = total_family_members - 1  # since they don't buy for themselves\n    total_eggs = eggs_bought_by_each * total_family_members\n    return total_eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime\n\ndef solution():\n    format = '%H:%M'\n    leave_time = datetime.strptime('7:50', format)\n    arrive_time = datetime.strptime('8:40', format)\n    journey_duration = arrive_time - leave_time\n    return journey_duration.seconds // 60  # converting the time difference to minutes\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    def nth_term(n):\n        return (n * (n + 1)) // 2\n\n    missing_number = nth_term(5)\n\n    return missing_number\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a for apple, b for banana\n\n    equation1 = Eq(3 * a + b, 32)  # Three apples and a banana cost 32p\n    equation2 = Eq(6 * a + b, 53)  # Six apples and a banana cost 53p\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    x = symbols('x')\n    \n    remaining_after_DVD = (5/6)*x - 5\n    remaining_after_magazines = (3/5)*remaining_after_DVD - 12\n    equation = remaining_after_magazines - 24\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)  # Calculate money left after buying the dress\n    original_amount = remaining_after_bag / (1 - 1/5)  # Calculate the original amount\n    return original_amount\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    removed_volume = 5\n    num_tanks = 6\n    \n    remaining_volume = total_volume - removed_volume\n    volume_per_tank = remaining_volume / num_tanks\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # let the number of years needed for the condition to be met be x\n    grandpa_current_age = 72\n    johnny_current_age = 8\n\n    # Equation for the future ages:\n    # grandpa_current_age + x = 5 * (johnny_current_age + x)\n\n    x = symbols('x')\n    equation = Eq(grandpa_current_age + x, 5 * (johnny_current_age + x))\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position + children_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for Alan's and Bob's cards\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob $25 cards, and then Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Returning the number of cards Alan has\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of odd numbers from 1 to 50\n    sum_odds = sum(range(1, 51, 2))\n    \n    # Sum of even numbers from 1 to 50\n    sum_evens = sum(range(2, 51, 2))\n    \n    # Difference between the sums\n    difference = sum_evens - sum_odds\n    \n    return difference\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    initial_amount = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    # Compound Interest Formula: A = P * (1 + r/n)^(nt)\n    # Since interest is compounded annually, n = 1\n    # A = final_amount, P = initial_amount, t = years, r = interest rate\n    # We have to find r, the formula rearranges to: r = (A/P)^(1/t) - 1\n    \n    interest_rate = ((final_amount / initial_amount) ** (1 / years)) - 1\n    \n    # Converting interest rate to percentage and rounding to the nearest tenth of a percent\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # m ~ Δ ~ n = 5m + 3n\n    # Given x ~ Δ ~ 9 = 37, replace m with x, n with 9 and solve for x\n    equation = Eq(5*x + 3*9, 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    soil_removed_fraction = 1 / 5\n    weight_after_removal = 27\n\n    soil_removed = full_weight * soil_removed_fraction\n    empty_weight = full_weight - soil_removed - soil_removed_fraction * soil_removed\n\n    return empty_weight\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Suppose she takes out blue, orange and yellow balls in the worst case\n    # For her not to have 4 balls of the same color, she can take at most:\n    # 3 blue balls + 3 orange balls + 2 yellow balls = 8 (3*3 = 9)\n    # To make sure she has 4 of the same, she must take out at least one more ball\n    return 3 + 3 + 2 + 1\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    # Equation representing the relation between cookies of Tim and Tyler\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n\n    # Tim had 9 times the amount of cookies that Tyler had after Tyler sold 96 cookies\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    # Solving the equations for tim and tyler\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    # Calculating the total number of cookies at first\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    \n    marks_missed = total_marks - scored_marks\n    \n    return marks_missed\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Let x be the number of elderly\n    # Let y be the total number of oranges Janice has\n\n    # If Janice gave 20 oranges to each elderly, there will be 10 elderly without oranges.\n    # So, she can give to x - 10 elderly\n    # 20 * (x - 10) = y\n\n    # If Janice gave 16 oranges to each elderly, she would have enough oranges to pack\n    # 25 boxes, with each box containing 2 dozen (24) oranges.\n    # 25 boxes * 24 oranges/box = 600 oranges\n    # 16 * x = y + 600\n\n    # From the two equations above, we deduce that:\n    # 20 * (x - 10) = 16 * x + 600\n    # 20x - 200 = 16x + 600\n    # 4x = 800\n    # x = 200\n\n    # Total number of oranges y can be obtained from 16 * x = y + 600\n    # y = (16 * 200) - 600\n\n    x = 200\n    y = 16 * x - 600\n\n    # Now we need to find the number of oranges to give to each elderly so that all oranges are\n    # given out and each elderly receives the same amount. This means we need to find a divisor of y\n    # that is less than or equal to 16 (since 16 oranges per elderly is possible), and find the\n    # largest such divisor because we want to give out the oranges to all elderly.\n\n    # Starting from 16 and going down to 1, find the largest divisor of y\n    for i in range(16, 0, -1):\n        if y % i == 0:\n            return i\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    water_poured = 24  # gallons\n    \n    full_tank = water_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of vanilla cupcakes be v\n    v = symbols('v')\n    \n    # Define the number of each type of cupcakes based on v\n    chocolate_cupcakes = v + 72\n    vanilla_cupcakes = v\n    blueberry_cupcakes = v - 36\n    \n    # Define the cupcakes left after selling\n    chocolate_left = chocolate_cupcakes - chocolate_cupcakes / 6\n    vanilla_left = vanilla_cupcakes - 2 * vanilla_cupcakes / 3\n    blueberry_left = blueberry_cupcakes - 7 * blueberry_cupcakes / 9\n    \n    # Total cupcakes left\n    total_left = chocolate_left + vanilla_left + blueberry_left\n    \n    # Equation based on the total cupcakes left\n    equation = Eq(total_left, 427)\n    \n    # Solve for the number of vanilla cupcakes\n    v_solution = solve(equation, v)\n    \n    # Find the number of chocolate cupcakes originally and the amount sold\n    chocolate_cupcakes_number = chocolate_cupcakes.subs(v, v_solution[0])\n    chocolate_sold = chocolate_cupcakes_number - chocolate_left.subs(v, v_solution[0])\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    # LCM of 24 and 30 will give the time interval in minutes\n    # after which trains leave both platforms at the same time\n    time_interval = lcm(24, 30)\n    \n    # Convert time interval into hours and minutes\n    hours = time_interval // 60\n    minutes = time_interval % 60\n    \n    # Initial departure time is 9 AM, we need to add the interval to this time\n    next_departure_hour = 9 + hours\n    next_departure_minute = 0 + minutes\n    \n    # Adjust for next_departure_minute if it's 60 or more\n    if next_departure_minute >= 60:\n        next_departure_hour += next_departure_minute // 60\n        next_departure_minute = next_departure_minute % 60\n        \n    # Convert the 24-hour time format to 12-hour if needed\n    next_departure_hour = next_departure_hour % 24\n    \n    # Format the time for AM/PM\n    period = \"AM\" if next_departure_hour < 12 else \"PM\"\n    next_departure_hour = next_departure_hour % 12\n    if next_departure_hour == 0:\n        next_departure_hour = 12\n    \n    # Format the time string\n    time_str = f\"{next_departure_hour}:{str(next_departure_minute).zfill(2)} {period}\"\n    \n    return time_str\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Since a ≡ 6 (mod 8) and b ≡ 7 (mod 8), we use the properties of congruences:\n    # (a + b) ≡ (6 + 7) (mod 8)\n    remainder = (6 + 7) % 8\n\n    return remainder\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for each child's age\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(Dave, Chris + 5)\n    equation2 = Eq(Dave, Benu + 3)\n    equation3 = Eq(Anu, Chris - 3)\n    equation4 = Eq(Anu + Benu + Chris + Dave, 20)\n    \n    # Solve the system of equations for the ages of the children\n    solutions = solve((equation1, equation2, equation3, equation4), (Anu, Benu, Chris, Dave))\n    \n    return solutions[Anu]\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n    \n    return solutions[mark]\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    # Number of desks behind Judy\n    desks_behind_judy = 7\n    # Since Jessica sits in front of Judy, there will be 1 desk which is Jessica's\n    # desk between the desks in front of Jessica and the desks behind Judy\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 1 + 1\n\n    return total_desks\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of red and white marbles as r and w respectively\n    r, w, p, b = symbols('r w p b', integer=True)\n\n    # Ratio of initial red to white marbles: r/w = 3/2 --> 2r = 3w\n    equation1 = Eq(2 * r, 3 * w)\n\n    # After Pip adds red marbles, ratio becomes 5/3: (r+p)/w = 5/3 --> 3(r+p) = 5w\n    equation2 = Eq(3*(r+p), 5*w)\n\n    # After Bud adds white marbles, ratio becomes 5/4: (r+p)/(w+b) = 5/4 --> 4(r+p) = 5(w+b)\n    equation3 = Eq(4*(r+p), 5*(w+b))\n\n    # Bud adds 100 more white marbles than the red marbles added by Pip: b = p + 100\n    equation4 = Eq(b, p + 100)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n\n    # Returning the number of white marbles initially in the box\n    return solutions[w]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    \n    return yellow_balloons\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total weight of the original group\n    # let n be the number of people in the original group\n    x, n = symbols('x n')\n\n    # Equation 1: The average weight of the group before Aaron joined\n    equation1 = Eq(x / n, x / n)\n\n    # Equation 2: When Aaron joins, the average weight is 61 kg\n    equation2 = Eq((x + 45) / (n + 1), 61)\n\n    # Equation 3: When Ben joins as well, the average weight is 62 kg\n    equation3 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation2, equation3), (x, n))\n\n    # Extract the original average weight (x / n)\n    original_average = solutions[x] / solutions[n]\n\n    return original_average\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 5):\n        a, b, c, d, e = perm\n        num1 = int(a + b)\n        num2 = int(c + d + e)\n        \n        product = num1 * num2\n        if len(str(product)) == 5 and all(x in perm for x in str(product)):\n            return product\n    \nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    first_num = 1\n    last_num = 40\n    total_nums = last_num\n    \n    # Sum of the first N whole numbers formula: (N * (N + 1)) / 2\n    ans = (total_nums * (total_nums + 1)) // 2\n\n    return ans\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_balls_taken = 2989\n\n    while total_balls_taken > 0:\n        if white_balls > 0 and black_balls > 0:\n            # Ming takes one white and one black ball\n            white_balls -= 1\n            black_balls -= 1\n            # Then puts one white ball back in\n            white_balls += 1\n        elif white_balls > 0:\n            # If only white balls are left, two are taken and one is put back\n            white_balls -= 1\n        else:\n            # If only black balls are left, two are taken and one black is put back\n            black_balls -= 1\n        \n        total_balls_taken -= 2\n\n    return white_balls, 'white' if white_balls > 0 else black_balls, 'black'\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people = 6\n    original_hours = 15\n    target_hours = 2\n\n    # The amount of work done is the same, so we can set up a proportion\n    # (people * original_hours) = (x * target_hours)\n    # Solving for x (number of people needed for target_hours)\n    required_people = (people * original_hours) / target_hours\n    \n    return int(required_people)\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Since there are 100 centimetres in a metre\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    total_spent = sweets + magazine + stickers + pizza + orange_juice\n    change = initial_amount - total_spent\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_han, daughter = symbols('mr_han daughter')\n    equation1 = Eq(mr_han, 3 * daughter)\n    equation2 = Eq(mr_han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 80/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    # Initialize counter\n    count = 0\n    # Loop over the first number in the sum\n    for i in range(1, 5):\n        # Loop over the second number in the sum\n        for j in range(1, 5):\n            # Since we only care about two or more non-zero natural numbers,\n            # there can only be two numbers for sum 5 (as 1+1+3 is the same as 1+3+1 which is same as 3+1+1)\n            # Thus, we only need to find unique pairs where the sum is 5\n            if (i + j == 5) and i != j:\n                count += 1\n    # Divide by 2 to correct for over-counting pairs twice (i+j is the same as j+i)\n    return count // 2\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit cannot be zero\n        for units in range(1, 10):  # Units digit must be 2 more than hundreds\n            if units == hundreds + 2:\n                count += 1  # Tens digit can be anything from 0 to 9\n    return count * 10  # Multiple by 10 for each possible tens digit\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for page_number in range(1, 131):\n        count += str(page_number).count('1')\n    return count\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To have more votes than anyone else, Samantha must have at least one more vote than half of the total votes.\n    total_votes = 25\n    votes_needed = total_votes // 2 + 1\n    return votes_needed\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    # List of coins\n    coins = [1, 2, 5]\n    # Set to hold different totals\n    totals = set()\n    \n    # Loop through each type of coin\n    for i in range(len(coins)):\n        for j in range(len(coins)):\n            for k in range(len(coins)):\n                # Sum for the current combination of three coins\n                sum_coins = coins[i] + coins[j] + coins[k]\n                # Add this sum to the set of totals\n                totals.add(sum_coins)\n    \n    # The number of different totals is the size of the set\n    return len(totals)\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages_counted = 0\n    digits_used = 0\n    while True:\n        pages_counted += 1\n        digits_in_page = len(str(pages_counted))\n        digits_used += digits_in_page\n        if digits_used == 291:\n            break\n    return pages_counted\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_amount = 1500\n    amount_on_chairs = 360\n    percent_spent_on_chairs = (amount_on_chairs / total_amount) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # The annual interest rate\n    principal = 6000  # Initial investment\n    future_value = 8029.35  # Value at the end of 5 years\n    years = 5  # Number of years\n\n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # A = future value, P = principal, r = annual interest rate,\n    # n = number of times the interest is compounded per year (assumed to be 1),\n    # t = number of years.\n    \n    # Here, we need to find the annual interest rate (x), with n = 1, A = 8029.35, P = 6000, t = 5\n    # So, 8029.35 = 6000 * (1 + x/100)^5\n    \n    equation = Eq(principal * (1 + x/100)**years, future_value)\n    \n    # Solve the equation for x\n    interest_rate = solve(equation, x)\n    \n    return interest_rate[0]\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # r for the pages read, t for the total number of pages\n    r, t = symbols('r t')\n\n    # Initial ratio of pages read to pages not read: r : (t - r) == 1 : 5\n    equation1 = Eq(r/(t - r), 1/5)\n\n    # After reading 80 more pages, pages read become 70% of total:\n    # (r + 80) / t == 70/100\n    equation2 = Eq((r + 80) / t, 70/100)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, t))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    for cc_correct in range(11):  # CC can answer 0 to 10 questions correctly\n        cc_points = 10 * cc_correct - 5 * (10 - cc_correct)\n        vivi_points = cc_points + 15\n        if cc_points + vivi_points == 95:\n            return cc_correct\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    girls_rooms = girls // girls_per_room + (1 if girls % girls_per_room > 0 else 0)\n    teachers_rooms = teachers // teachers_per_room\n    \n    total_rooms = girls_rooms + teachers_rooms\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_for_18_people = flour_per_person * 18\n    return flour_for_18_people\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' represent the cost of one book, and 'm' represent the cost of one magazine\n    b, m = symbols('b m')\n\n    # Mr. Toh bought 2 books and 3 magazines for $24.90\n    equation1 = Eq(2*b + 3*m, 24.90)\n\n    # 1 book and 1 magazine cost a total of $10\n    equation2 = Eq(b + m, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, m))\n\n    # We need to find the cost of one magazine\n    return solutions[m]\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    adults = 2\n    children = 3\n\n    total_cost = (adults * adult_ticket_price) + (children * child_ticket_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    number = '2581953752'\n    min_sum = None\n    for split in combinations(range(1, len(number)), 2):\n        parts = (number[:split[0]], number[split[0]:split[1]], number[split[1]:])\n        parts_sum = sum(map(int, parts))\n        if min_sum is None or parts_sum < min_sum:\n            min_sum = parts_sum\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    for i in range(1163):\n        n1 = i / 100\n        n2 = 11.63 - n1\n        if n1 / 10 + n2 == 5.87:\n            return int(100 * abs(n1 - n2))\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion = 1000\n    distance_in_m = 7000000 / mm_to_m_conversion\n    return distance_in_m\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor_minimum = 1\n    dividend_minimum = divisor_minimum * quotient + remainder\n    return dividend_minimum\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Total members\n    total_members = 99\n    \n    # Science to Literature ratio\n    science_lit_ratio = 9 / 10\n    # Literature to Math ratio\n    lit_math_ratio = 5 / 7\n    \n    # Let x be the common ratio multiplier for the literature club\n    # science = 9x, literature = 10x, math = 14x (because 5x*(7/5) = 14x)\n    # 9x + 10x + 14x = 99\n    # 33x = 99\n    x = total_members / 33\n\n    # Now find the number of members in each club\n    science_members = 9 * x\n    literature_members = 10 * x\n    math_members = 14 * x\n\n    # Calculate the difference between math club and literature club\n    member_difference = math_members - literature_members\n    \n    return int(member_difference)\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but we need to subtract the 4 corner flowers\n    # because they are counted twice (once for each side that meets at the corner)\n    flowers_per_side = 6\n    total_flowers = 4 * flowers_per_side - 4\n    return total_flowers\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # We need to consider the worst-case scenario.\n    # Let's look at the possible combinations of taking 2 marbles of each color first.\n    # 2 blue + 2 yellow + 2 red = 6 marbles.\n    # If we have taken 6 marbles in total, in the worst-case scenario,\n    # we have 2 of each color, but not 3 of the same color.\n    \n    # Hence, we need to take one more marble to be sure we have 3 of the same color.\n    # The next marble we take, no matter the color, will result in 3 of one color.\n    return 6 + 1\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    number = 48\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    even_factors_count = len([f for f in factors if f % 2 == 0])\n    return even_factors_count\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    equation1 = Eq(mother_now, 3 * melissa_now)\n    equation2 = Eq((mother_now - melissa_now), (32 - 8))\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n    \n    pieces = [piece1, piece2, piece3]\n    longest = max(pieces)\n    shortest = min(pieces)\n    \n    difference = longest - shortest\n    \n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 1/2\n    total_cost = 132\n\n    # Calculate the cost of the book\n    book_cost = total_cost / (book_fraction + bag_fraction * (1 - book_fraction))\n    \n    # Calculate the original amount of money\n    original_money = book_cost / book_fraction\n\n    return original_money\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)  # Total cost equation\n    equation2 = Eq(basketball, volleyball + 10)           # Price relationship equation\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    length_of_pattern = len(pattern)\n    \n    full_repeats = 47 // length_of_pattern\n    remaining_digits = 47 % length_of_pattern\n    \n    sum_of_full_patterns = sum(int(digit) for digit in pattern) * full_repeats\n    sum_of_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_of_full_patterns + sum_of_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pencils = 35 * 40\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(20 * boys + 60 * girls, total_pencils)\n    equation2 = Eq(boys + girls, 40)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28 + 57 / 100\n    return total_pounds\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Define the cost function for the cupcakes\n    def cost(cupcakes):\n        if cupcakes <= 20:\n            return 4.50 * cupcakes + 12\n        else:\n            return 4.50 * 20 + (cupcakes - 20) * 4.50 * 0.8 + 12\n\n    # Find the number of cupcakes ordered\n    for cupcakes in range(1, 100):  # Assuming a realistic maximum of 100 cupcakes\n        if cost(cupcakes) == 120:  # The cost matches Kate's bill\n            return cupcakes\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of pigs and goats\n    pigs, goats = symbols('pigs goats')\n\n    # Define the two equations based on the given information\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pigs, goats))\n    \n    # Calculate the cost for 5 pigs and 5 goats using the solutions found\n    cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return cost\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    # Total people = people in front of Rose + Rose herself + people behind Rose\n    total_people = people_in_front + 1 + position_from_back - 1  # Subtract 1 since Rose is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    # Let's denote the number of problems Jack answered correctly as j_correct,\n    # the number he answered incorrectly as j_incorrect, and the number he didn't answer as j_unanswered.\n    # Similarly, Johnson answered k_correct correctly, k_incorrect incorrectly.\n\n    # Since they both got 61 points, we have the following equations:\n    # 4 * j_correct - j_incorrect = 61 (Eq 1: Points equation for Jack)\n    # 4 * k_correct - k_incorrect = 61 (Eq 2: Points equation for Johnson)\n    # j_correct + j_incorrect + j_unanswered = 25 (Eq 3: Total problems for Jack)\n    # k_correct + k_incorrect = 25 - j_unanswered (Eq 4: Total problems for Johnson)\n    # Note: j_unanswered = 25 - (j_correct + j_incorrect) since he didn't answer those\n\n    # Jack answered more questions correctly than Johnson (j_correct > k_correct),\n    # and each answered a total of 25 questions.\n    \n    # We'll iterate over possible values for j_correct and try to find a solution\n    # for j_unanswered that satisfies all conditions.\n    for j_correct in range(1, 25):  # Jack must answer at least one question correctly\n        # Calculate points from correct answers\n        points_from_correct = j_correct * 4\n        \n        # Calculate the number of problems Jack answered incorrectly based on the points he got\n        j_incorrect = points_from_correct - 61  # From Eq 1\n\n        # Calculate the number of problems Jack did not answer\n        j_unanswered = 25 - j_correct - j_incorrect\n\n        # Now, check if Johnson's conditions are satisfied\n        # The main condition is that Johnson scored the same points with fewer correct answers\n        for k_correct in range(j_correct):  # Johnson must answer fewer questions correctly than Jack\n            k_incorrect = 25 - k_correct  # Johnson answers all remaining questions incorrectly\n            # Calculate Johnson's score\n            johnson_score = k_correct * 4 - k_incorrect\n\n            # If Johnson's score also matches 61, we have a possible solution.\n            # We need to find the minimum j_correct for which this condition holds true.\n            if johnson_score == 61 and j_unanswered >= 0 and j_incorrect >= 0 and k_correct > 0:\n                return j_unanswered\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_ahead = 2\n\n    john_future_age = john_current_age + years_ahead\n    grandmother_future_age = john_current_age + grandmother_age_difference + years_ahead\n    total_future_age = john_future_age + grandmother_future_age\n\n    return total_future_age\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    total_time_together = 6\n    time_energetic_alone = 10\n\n    # Calculate the work rate of the energetic one\n    work_rate_energetic = 1 / time_energetic_alone\n\n    # Calculate the total work rate together\n    work_rate_together = 1 / total_time_together\n\n    # Calculate the work rate of the lazy one\n    work_rate_lazy = work_rate_together - work_rate_energetic\n\n    # Calculate the total time it would take for the lazy one to paint the house on his own\n    time_lazy_alone = 1 / work_rate_lazy\n\n    return time_lazy_alone\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_ = n * (n + 1) // 2\n    return sum_\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    book_fraction = 1/5\n    total_pages = pages_first_day / book_fraction\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n    # In the worst case, we draw all but one color completely, which means we can draw\n    # all red, blue, and yellow marbles without getting 4 different colors. \n    # After that, the next draw guarantees the fourth color.\n    marbles_drawn = red + blue + yellow + 1  # +1 for the guaranteed green\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    prefix = '5' * 19\n    suffix = '9' * 19\n    for digit in range(10):\n        num_str = prefix + str(digit) + suffix\n        num = int(num_str)\n        if num % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    # We know there are 10 books and each brother\n    # must have at least 2 books, so we set aside\n    # 6 books (2 books for each brother)\n    remaining_books = 10 - 6  # 4 books remain\n\n    # Now, we count all possible distributions\n    # of the 4 remaining books to the 3 brothers\n    count = 0\n    for brother1_books in range(0, remaining_books + 1):\n        for brother2_books in range(0, remaining_books - brother1_books + 1):\n            brother3_books = remaining_books - brother1_books - brother2_books\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    tom_position = 10\n    last_child_height = 131\n    # Since children are in increasing height and no two children have the same height,\n    # Tom can stand in 10th position and still have the 10th tallest height overall.\n    # Because all the children behind Tom are taller, we just subtract those children from the last child's height.\n    max_tom_height = last_child_height - (31 - tom_position)\n    \n    return max_tom_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # The smallest two-digit number with unit digit 6 is 16\n    # The largest two-digit number with unit digit 6 is 96\n    # As it's a simple incremental pattern (16, 26, 36, ..., 96), we can just count by tens.\n    \n    count = 0\n    for number in range(16, 97, 10):\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    increase_from_last_time = 14.4\n    last_purchase = current_purchase - increase_from_last_time\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2022 - 2):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    # Create the equations based on the problem statement\n    eq1 = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    # Solve the equation\n    solution = solve(eq1, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote the number of books Anthea has initially as A.\n    # If Jason gives 4 books to Anthea, they will have the same number of books.\n    # So, Jason has 30 books and after giving away 4, he is left with 30 - 4 = 26 books.\n    # This means Anthea also has 26 books after receiving 4.\n    # Since Anthea had A books and received 4, we have A + 4 = 26.\n    # Solving for A gives us A = 26 - 4 = 22 books.\n    # Finally, the difference between Jason and Anthea at first is 30 (Jason's books) - 22 (Anthea's books).\n\n    jason_books_after_giving = 30 - 4\n    anthea_books_after_receiving = jason_books_after_giving  # Both have the same amount after the exchange.\n    anthea_books_initially = anthea_books_after_receiving - 4\n    difference = 30 - anthea_books_initially\n\n    return difference\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    factors = 0\n    \n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let the number of students be x.\n    # According to the problem statement:\n    # 5x + 3 (if each receives 5 there are 3 left)\n    # 4x + 9 (if each receives 4 there are 9 left)\n    # So we need to find an x such that when divided by 5 leaves a remainder 3 \n    # and when divided by 4 leaves a remainder 9.\n    \n    remainder_when_divided_by_5 = 3\n    remainder_when_divided_by_4 = 9\n\n    for x in range(1, 100):  # Assumption: An upper limit to avoid an infinite loop; you can adjust if needed\n        if (x * 5 + remainder_when_divided_by_5) % 4 == remainder_when_divided_by_4:\n            return x\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan, chloe + 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    bar_of_chocolate_with_hazelnut = 1.83\n    total_cost = box_of_chocolates + 2 * bar_of_chocolate_with_hazelnut\n    amount_paid = 20\n    change = amount_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n    # Lily is already at the left end and her mother at the right end,\n    # so we need to arrange the remaining three family members.\n    ways_to_arrange = factorial(3)\n    return ways_to_arrange\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    # Start with the smallest two-digit number that is divisible by 5 and 7\n    # and add 4 to reach the condition of having a remainder of 4 when divided by both.\n    num = 10\n    while not(num % 5 == 4 and num % 7 == 4):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # All possible 2-digit numbers from 1 to 8 with no repetition\n    all_numbers = [''.join(p) for p in permutations('12345678', 2)]\n    \n    # Filters according to the given hints\n    smallest = [num for num in all_numbers if int(num[1]) == 2 * int(num[0])]\n    largest = [num for num in all_numbers if int(num[0]) + int(num[1]) == 9]\n    second_largest = [num for num in all_numbers if int(num[0]) - int(num[1]) == 5]\n    odds = [num for num in all_numbers if int(num) % 2 != 0]\n\n    # Remove the numbers that are already in the identified groups\n    remaining_numbers = [num for num in all_numbers \n                         if num not in smallest \n                         and num not in largest \n                         and num not in second_largest \n                         and num not in odds]\n    \n    # Find the second smallest out of the four\n    remaining_numbers.sort()\n    ans = remaining_numbers[0]\n    \n    return ans\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    # Use the formula for the nth term of an arithmetic series to find the number of rows: nth_term = a + (n - 1) * d\n    # Here, nth_term is 99 (the last row), a is the first_term (7), and d is the difference (4)\n    # Solving for n gives us the total number of rows in the theater\n    n = ((99 - first_term) / difference) + 1\n\n    # Use the formula for the sum of an arithmetic series to find the total number of seats: sum = n/2 * (first_term + last_term)\n    sum_seats = n/2 * (first_term + 99)\n\n    return int(sum_seats)\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_new = 150\n\n    sum_initial = average_initial * 3\n    sum_new = average_new * 4\n\n    fourth_number = sum_new - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    # Given formula for the sum of squares is 1/6 * n * (n + 1) * (2n + 1)\n    # Compute the sum of squares for 1^2 to 15^2\n    n = 15\n    sum_15 = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Compute the sum of squares for 1^2 to 4^2 (since we want from 5^2)\n    m = 4\n    sum_4 = (m * (m + 1) * (2 * m + 1)) // 6\n\n    # Subtract the sum of 1^2 to 4^2 from the sum of 1^2 to 15^2\n    answer = sum_15 - sum_4\n\n    # Check if Kimmy's answer is correct\n    is_correct = (answer == 1240)\n    return answer, is_correct\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    children_fraction = 3/5\n    men_fraction_of_remaining = 1/2\n    children_more_than_men = 140\n\n    # Let the total number of visitors be x\n    # 3/5 of the visitors were children so 2/5 are not children\n    # Among the non-children visitors, 1/2 were men\n    # The number of children minus the number of men is 140\n    # We form an equation: (3/5)x - (1/2)*(2/5)x = 140\n\n    total_visitors = 140 / (children_fraction - men_fraction_of_remaining * (1 - children_fraction))\n\n    return int(total_visitors)\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter: sam = peter + 40\n    initial_relation = Eq(sam, peter + 40)\n    # Sam gave 20% of his stickers to Peter: \n    # New Sam's sticker count: sam - 0.2 * sam\n    # New Peter's sticker count: peter + 0.2 * sam\n    after_sam_gives = sam - 0.2 * sam\n    after_peter_receives = peter + 0.2 * sam\n    # Peter gave 25% of his new sticker count to Sam: \n    # New Peter's sticker count: after_peter_receives - 0.25 * after_peter_receives\n    # New Sam's sticker count: after_sam_gives + 0.25 * after_peter_receives\n    final_peter_stickers = after_peter_receives - 0.25 * after_peter_receives\n    final_sam_stickers = after_sam_gives + 0.25 * after_peter_receives\n    # Sam ends up with 96 stickers more than Peter\n    final_relation = Eq(final_sam_stickers, final_peter_stickers + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_relation, final_relation), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let's denote the number of questions Olivia answered correctly as c,\n    # and the number of questions she answered wrongly as w.\n\n    # From the problem, we have two equations:\n    # c + w = 20 (since the total number of questions is 20)\n    # 5c - 2w = 51 (5 points for every correct answer, -2 points for every wrong answer)\n\n    # We can start by solving these two equations for c and w.\n\n    for c in range(21):\n        w = 20 - c\n        if 5 * c - 2 * w == 51:\n            return c\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Amy had\n    x = symbols('x')\n\n    # Money left after buying highlighters\n    remaining_after_highlighters = (6/11) * x + 5\n\n    # Money left after buying fountain pens\n    remaining_after_pens = (3/10) * (x - remaining_after_highlighters) + 12\n\n    # Equation based on the condition that she has $30 left\n    equation = Eq(x - remaining_after_highlighters - remaining_after_pens, 30)\n\n    # Solve for x\n    initial_amount = solve(equation, x)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    \n    original_ratio = Eq(sally/gillian, 2/7)\n    future_ratio = Eq((sally+15)/(gillian+15), 1/2)\n\n    solutions = solve((original_ratio, future_ratio), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    actual_subtrahend = 75\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    # Find the original minuend before the mistake\n    original_minuend = mistaken_result + mistaken_subtrahend\n\n    # Then subtract the correct subtrahend to get the right result\n    correct_result = original_minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = (3 * 4) // math.gcd(3, 4)  # Find the least common multiple of 3 and 4\n    count = 40 // lcm  # Divide the total number of customers by the lcm to find how many received both\n\n    return count\n\nimport math\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    total_apples_kg = 8\n    apples_per_kg = 9\n    apples_per_cake = 4\n    \n    total_apples = total_apples_kg * apples_per_kg\n    number_of_cakes = total_apples // apples_per_cake\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Let's denote the unknown number as x.\n    # According to the problem statement, we have:\n    # (x/9) * 45 = 35\n    # Solve for x:\n    x = (35 * 9) / 45\n    \n    return int(x)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n\n    # The total distance covered by all seeds is actually the circumference\n    circumference = distance_between_seeds * total_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    fraction = 3/8\n    number = 32\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for i in range(11):\n        if (10 - i) + (i * 3) == 16:\n            return i\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    return 198 + 67 - 25\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 1000):  # Assuming the number of students won't be more than 1000 for practicality\n        if (n**2 + 9 + (2*n) + 1) == n**2 + 16:\n            return n**2 + 9\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    avg_boys = 10\n    avg_all = 14\n\n    total_score_all = (total_boys + total_girls) * avg_all\n    total_score_boys = total_boys * avg_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    avg_girls = total_score_girls / total_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Possible coin values in GBP \n    coin_values = [1, 2, 5, 10, 20, 50, 100, 200]  # 100 pence = 1 pound\n\n    # Since we know there are pairs of coins and 250 pence in total,\n    # we will iterate through the coin values to find which one is the smallest \n    # coin that can be paired to sum up to 250 pence.\n    for coin in coin_values:\n        if (250 % (coin * 2)) == 0:\n            return coin / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initial division of postcards by Lily\n    initial_envelopes = 5\n    initial_postcards = 50\n    \n    # Number of postcards in each initial envelope\n    postcards_per_envelope = initial_postcards / initial_envelopes\n    \n    # Further division of postcards after Lily receives more\n    additional_envelopes = 2\n    total_envelopes = initial_envelopes + additional_envelopes\n    \n    # Since each envelope has the same number of postcards\n    # The total number of postcards is now\n    total_postcards = postcards_per_envelope * total_envelopes\n    \n    return total_postcards\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.8  # 80p is 0.8 pounds\n    weight = 250\n    cost = (cost_per_100g / 100) * weight  # calculate the cost for 250 grams\n    return cost\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of cookies Jolie baked at first\n    x = symbols('x')\n    \n    # Number of cookies thrown away (burnt) is 3/5 of total: 3/5 * x\n    # Number of cookies remaining is 2/5 of total: 2/5 * x\n    # Number of cookies sold is 75% of the remaining cookies: 75/100 * (2/5 * x)\n    \n    # Formulate the equation based on the given statement\n    # (3/5 * x) - (75/100 * (2/5 * x)) = 42\n    \n    equation = Eq((3/5) * x - (75/100) * (2/5) * x, 42)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the number of cookies Jolie baked at first\n    return solution[0]\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    capacity = 4\n    containers = (apples + capacity - 1) // capacity\n    return containers\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2)-(0.2)**2)/(-1.8)-((41.08-(-2/5)**2)/(3+(-2)**3))\n    return ans\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):  # Limit for practical reasons; Python can handle more\n            original_number = j * 10 + 9\n            modified_number = int(str(9) + str(j))\n            if modified_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    # A number is divisible by 6 if it is divisible by both 2 and 3.\n    # A number is divisible by 2 if its last digit is even.\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    \n    # Since we know that the last digit is Y, for the number to be divisible by 2, Y must be even.\n    # Now, we try all possible even values for Y (0, 2, 4, 6, 8) and check if the sum of the digits is divisible by 3.\n    \n    for Y in range(0, 10, 2):  # Only even values for Y\n        if (1 + 0 + 7 + Y) % 3 == 0:  # Check divisibility by 3\n            ans = Y  # We found the value of Y\n            return ans\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):  # Loop through all 2-digit numbers\n        if num % 4 == 1 and num % 7 == 1:  # Check the remainder conditions\n            return num  # Return the first number that satisfies both conditions\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front: 1 way to place Laura\n    # Other five students can be arranged in any order: factorial(5) ways\n    # Rita cannot stand at the end, so she has 5-1=4 possible places (as Laura is at the front)\n    ways_for_others = factorial(5)\n    ways_for_rita = 4 \n\n    # Total ways for arranging the line\n    total_ways = ways_for_others * ways_for_rita \n\n    return total_ways\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    result = (a + b) * a\n    return result\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_sold = 4/7\n    total_apples_brought = apples_sold / fraction_sold\n\n    return int(total_apples_brought)\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount_price = regular_price * 0.5  # 50% discount off the regular price\n    additional_discount_price = discount_price * 0.8  # Extra 20% discount on the discounted price\n    final_price = additional_discount_price\n    return final_price\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Jerry travels 3/7 of the road when they meet\n    # Jerry's speed is the length of the road times 2/5 per hour\n    # Kevin's speed is 80 mph\n    # Let the length of the road be x miles\n    # Jerry's speed will be (2/5) * x miles/hour \n    # They meet after traveling for the same amount of time, so their speeds are proportional to the distances they cover\n    # The ratio of the distances they cover is 3:4 (since Jerry covers 3/7 and Kevin covers 4/7 of the road)\n    # Therefore, the ratio of their speeds should also be 3:4\n    # jerry_speed/kevin_speed = 3/4\n    # (2/5 * x) / 80 = 3/4\n    # Solve for x\n    x = (80 * 4 * 5) / (2 * 3)\n    return x\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "网络故障，请重试"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time formats\n    time_format = \"%H:%M %d-%m-%Y\"\n    \n    # Define the departure and arrival times\n    departure_time_singapore_str = \"05:00 24-08-2023\"\n    arrival_time_london_str = \"11:00 24-08-2023\"\n\n    # Convert string into datetime objects\n    departure_time_singapore = datetime.strptime(departure_time_singapore_str, time_format)\n    arrival_time_london = datetime.strptime(arrival_time_london_str, time_format)\n\n    # Adjust for time zone difference\n    adjusted_departure_time_singapore = departure_time_singapore - timedelta(hours=7)\n\n    # Calculate flight duration\n    flight_duration = arrival_time_london - adjusted_departure_time_singapore\n    \n    # Return flight duration in hours\n    return flight_duration.total_seconds() / 3600\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob\n\n    # Probability that Sally wins the first game and doesn’t win the second\n    prob_win_first_lose_second = win_prob * (lose_prob + draw_prob)\n\n    # Probability that Sally doesn’t win the first game but wins the second\n    prob_lose_first_win_second = (lose_prob + draw_prob) * win_prob\n\n    # Total probability of winning exactly one game\n    total_prob = prob_win_first_lose_second + prob_lose_first_win_second\n\n    return total_prob\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal_part = \"076923\"  # The cycle of decimal places in 1/13 when repeating\n    cycle_length = len(decimal_part)\n    decimal_index = (2012 - 1) % cycle_length  # Subtract 1 because it's 1-indexed\n    digit = decimal_part[decimal_index]\n\n    return int(digit)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # If we put 4 lollipops in each box and 32 are left over,\n    # the total number of lollipops can be expressed as 4n + 32 for some integer n\n\n    # When we put 7 lollipops in each box, the last box has 3 lollipops,\n    # which means the total is also 7m + 3 for some integer m\n\n    # We need to find the smallest common number that satisfies both conditions\n\n    n = 0  # We can start with the first possible value of n\n    while True:\n        total_lollipops = 4 * n + 32\n        if (total_lollipops - 3) % 7 == 0:  # Check if the total satisfies the second condition\n            break  # We found the number of lollipops\n        n += 1  # Try the next value of n\n\n    return total_lollipops\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # Check if the sum of the digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Calculating the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n    \n    # Finding the greatest common divisor of the differences\n    from math import gcd\n    gcd1 = gcd(diff1, diff2)\n    gcd_final = gcd(gcd1, diff3)\n    \n    # Largest possible value of D is the GCD of the differences\n    D = gcd_final\n    \n    # The remainder R is the same when each number is divided by D\n    # Since we need to maximize D + R, we find R for the smallest number\n    R = 2010 % D\n    \n    # Return the sum of the largest possible D and the remainder R\n    return D + R\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    # Given number of blue marbles\n    blue_marbles = 72\n    \n    # Given ratio of red to blue marbles\n    red_to_blue_ratio = 5 / 6\n    \n    # Calculating the number of red marbles using the ratio\n    red_marbles = red_to_blue_ratio * blue_marbles\n    \n    # Given that the number of red marbles is twice that of green marbles\n    green_marbles = red_marbles / 2\n    \n    # Calculating the total number of marbles Max has altogether\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    \n    return total_marbles\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # let's denote the cards of Eddi as 8x and Wiya as 7x before the exchange\n    # After giving away 4 cards, Eddi has 8x - 4 cards and Wiya has 7x + 4 cards\n    # The new ratio after exchange is 18:17, so (8x - 4)/ (7x + 4) = 18/17\n    # Cross multiply to solve for x\n    x = symbols('x')\n    equation = Eq((8 * x - 4) * 17, (7 * x + 4) * 18)\n    solution = solve(equation, x)\n\n    # Now we can calculate Eddi's initial amount of cards, which is 8 * x\n    eddi_initial_cards = 8 * solution[0]\n    return eddi_initial_cards\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    a = 2017 + Fraction(7, 8)\n    b = 3 + Fraction(2, 3)\n    c = 2016 + Fraction(7, 8)\n    d = Fraction(11, 3)\n    e = 2017 + Fraction(1, 3)\n    f = 17\n    g = 3 + Fraction(23, 32)\n\n    # Calculate numerator and denominator separately\n    numerator = (a * b) - (c * d)\n    denominator = (e - c) * f\n\n    # Divide the numerator by the denominator and then multiply by g\n    result = (numerator / denominator) * g\n\n    # Convert the result to a mixed number (or leave as improper fraction if desired)\n    mixed_number = result.numerator // result.denominator\n    fraction_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    # Combine the whole number part and the fraction part\n    ans = mixed_number + fraction_part\n\n    return ans\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let the initial number of students in Class B be x.\n    # Then the number of students in Class A is x + 47.\n    # After moving y students from Class A to Class B,\n    # Class A will have (x + 47 - y) students,\n    # and Class B will have (x + y) students.\n    \n    # According to the question, after the move,\n    # Class A will have 9 more students than Class B.\n    # So the equation is: (x + 47 - y) = (x + y) + 9\n    \n    # Now, solve for y:\n    # Rearrange the equation to find y:\n    # 47 - 9 = 2y\n    # 38 = 2y\n    # y = 38 / 2\n    # y = 19\n    \n    # 19 students need to be moved from Class A to Class B.\n    y = 19\n    \n    return y\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = solutions[y]\n\n    return smaller_number\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # The hundreds place can be any odd digit from 1 to 9\n        for j in range(10):    # The tens place can be any digit from 0 to 9\n            for k in range(10):  # The ones place can be any digit from 0 to 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330\n    turtle_speed = 30\n    race_distance = 6990\n    rabbit_sleep_time = 215\n\n    # Rabbit runs for 10 minutes before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * 10\n    # Turtle continues to run while rabbit sleeps (225 minutes total for turtle by now)\n    turtle_distance_after_rabbit_sleeps = turtle_speed * (10 + rabbit_sleep_time)\n\n    # If turtle has finished the race, rabbit cannot win:\n    if turtle_distance_after_rabbit_sleeps >= race_distance:\n        winner = \"turtle\"\n        distance_between = 0  # Turtle has finished, so there is no gap after finish line\n\n    # Otherwise, calculate the remaining distance for the rabbit and turtle\n    else:\n        rabbit_time_to_finish = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n        turtle_time_to_finish = (race_distance - turtle_distance_after_rabbit_sleeps) / turtle_speed\n\n        if rabbit_time_to_finish < turtle_time_to_finish:\n            winner = \"rabbit\"\n            turtle_total_time = 10 + rabbit_sleep_time + rabbit_time_to_finish\n            turtle_distance_when_rabbit_finishes = turtle_speed * turtle_total_time\n            distance_between = race_distance - turtle_distance_when_rabbit_finishes\n        else:\n            winner = \"turtle\"\n            rabbit_total_time = 10 + rabbit_sleep_time + turtle_time_to_finish\n            rabbit_distance_when_turtle_finishes = rabbit_speed * 10 + rabbit_speed * (rabbit_total_time - rabbit_sleep_time - 10)\n            distance_between = rabbit_distance_when_turtle_finishes - race_distance\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # Since there are 2 avocados in a pair\n    cost_per_avocado_pence = (total_cost_pounds * 100) / total_avocados  # Convert pounds to pence\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Roll the two dice\n    possible_rolls = [i+j for i in range(1, 7) for j in range(1, 7)]\n\n    # Count the frequency of each total score\n    frequency = Counter(possible_rolls)\n    \n    # Find the total score(s) with the highest frequency\n    most_likely_score = max(frequency, key=frequency.get)\n\n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of girls and boys\n    girls, boys = symbols('girls boys')\n\n    # Total number of students\n    total_students = 36\n    #Overall average score\n    class_average = 89\n    #Average score for girls\n    girls_average = 88\n    #Average score for boys\n    boys_average = 91\n\n    # Equation 1: Total number of students is the sum of boys and girls\n    equation1 = Eq(girls + boys, total_students)\n\n    # Equation 2: Overall average is the weighted average of girls' and boys' averages\n    equation2 = Eq((girls * girls_average + boys * boys_average) / total_students, class_average)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rhinos, deer, ostriches = symbols('rhinos deer ostriches')\n    \n    # rhinos have 1 head and 4 legs, deer have 1 head and 4 legs, ostriches have 1 head and 2 legs\n    # number of rhinos is equal to the number of deer\n    equation1 = Eq(rhinos, deer)\n    equation2 = Eq(rhinos + deer + ostriches, 28)  # total heads\n    equation3 = Eq(4*rhinos + 4*deer + 2*ostriches, 88)  # total legs\n    \n    solutions = solve((equation1, equation2, equation3), (rhinos, deer, ostriches))\n    \n    return solutions[rhinos]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(andrew, (boris + jeffery + xavier)/3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n    jeffery_boris = solutions[boris] + solutions[jeffery]\n\n    return jeffery_boris\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_per_page = 1\n    current_page = 1\n    digit_count = 0\n\n    while digit_count < total_digits:\n        digit_count += digits_per_page * len(str(current_page))\n        current_page += 1\n        digits_per_page = len(str(current_page))\n\n    return current_page - 1\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table can have a person at each side, which is 4 people.\n    # When square tables are put in a row, each shared side no longer contributes additional seating.\n    # Initially, we have 12 people per square table, 8 tables, which gives us 96.\n    # However, since they are in a row, we lose 2 people per shared side.\n    # There are 7 shared sides.\n\n    # Total number of people if the tables were not connected\n    total_people_unconnected = 12 * 8\n\n    # Total number of people we lose due to sharing sides\n    people_lost_from_sharing = 2 * 7\n\n    # Maximum number of people that can sit around the long table\n    max_people = total_people_unconnected - people_lost_from_sharing\n\n    return max_people\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32 = pow(32, 33, 10)\n    last_digit_22 = pow(22, 29, 10)\n    ans = (last_digit_32 - last_digit_22) % 10\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    num_people = 0\n    students_over_teachers = 52\n    side_length = 1\n    while True:\n        # Outer layer of students\n        if side_length == 1:\n            student_count = 1\n        else:\n            student_coun"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original relationship\n    equation1 = Eq(apples, 5/7 * oranges)\n    \n    # After buying 12 more oranges\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    # Solve the equations to find the number of apples\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    ans = (80 * 100) / (8)\n    return int(ans)\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    # A number has 15 factors only if it is in the form of p^14 or p^4*q^1 or p^1*q^1*r^1\n    # where p, q, r are prime numbers.\n    # Since the number must be multiple of 15 which is 3*5, we will look for numbers of the form:\n    # (3*5)^14, (3*5)^4*q, 3*5*p*q where p, q are prime numbers\n    # Since we just need the count, and we noted that for each prime q the number 3*5*q is a valid number\n    # We will count the primes less than N/15 since any larger prime would make the number exceed N.\n    from sympy import primerange, isprime\n\n    # Number of the form (3*5)^14 will be counted as one automatically because there's only one such number\n    count = 1\n    \n    # Count numbers of the form (3*5)^4*q, We need to count the number of primes q for which\n    # (3*5)^4*q is less than or equal to N. Since the number should be a multiple of 15,\n    # we find the N (maximum value) by (3*5)^4 and check for primes less than N/15.\n    N = (3*5)**4\n    for q in primerange(1, N//15 + 1):\n        if q not in (3, 5):\n            count += 1\n    \n    # Count numbers of the form 3*5*p*q, but since the number needs to have exactly 15 factors\n    # p and q need to be distinct primes other than 3 and 5.\n    # We then count the primes pairs where p < q.\n    primes = list(primerange(1, N//15 + 1))\n    for i in range(len(primes)):\n        if primes[i] in (3, 5):\n            continue\n        for j in range(i + 1, len(primes)):\n            if primes[j] in (3, 5):\n                continue\n            if (3*5*primes[i]*primes[j] <= N):\n                count += 1\n            \n    return count\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z', integer=True)\n\n    # Set up the equation according to the given fraction form\n    equation = Eq(2014/37 - 54, 1/(x + 1/(y + 1/z)))\n\n    # Solve for x, y, z\n    solutions = solve(equation, (x, y, z))\n\n    # Since x, y, z are distinct integers, find the valid solution\n    for sol in solutions:\n        if len(set(sol)) == 3:\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    # The clock has 12 numbers, so the counting is modulo 12\n    modulo_base = 12\n\n    # Eddie stops at number 10 after counting to 30\n    stop_number = 30 \n    clock_position = 10\n\n    # Find the starting number using the modulo operation\n    # Since he stops at 10 after counting to 30, we subtract 30 from 10\n    # And take modulo 12 to get the start position on the clock\n    start_number = (clock_position - stop_number) % modulo_base\n\n    # If the result is 0, it means he started at 12\n    # We need to adjust it to reflect the numbering on the clock\n    if start_number == 0:\n        start_number = modulo_base\n\n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the amount of oil sold from each bucket\n    big_bucket = 89 - x  # big bucket after selling x kilograms\n    small_bucket = 45 - x  # small bucket after selling x kilograms\n\n    # Setting up the equation: big bucket is 12 times small bucket\n    equation = Eq(big_bucket, 12 * small_bucket)\n\n    # Solving the equation\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    price_shoes = 78\n    price_socks = 12\n    number_of_aliens = 6  # Himself and 5 brothers\n    legs_each_alien = 5\n\n    total_legs = number_of_aliens * legs_each_alien\n    sets_of_shoes = total_legs // 5\n    sets_of_socks = total_legs // 2\n\n    total_cost = sets_of_shoes * price_shoes + sets_of_socks * price_socks\n    return total_cost\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n    \n    # Construct the equations based on the given information\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - (31 - a)\n\n    # Check if they are all prime\n    if isprime(a) and isprime(b) and isprime(c):\n        ans = a * b * c\n    else:\n        ans = \"Not all are primes\"\n\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for distance\n    distance = symbols('distance')\n\n    # Time taken to jog from home to the park\n    time_to_park = distance / 5\n\n    # Time taken to jog back from the park to home\n    time_to_home = distance / 4\n    \n    # Total time taken in hours (54 minutes converted to hours)\n    total_time = 54 / 60\n    \n    # Setting up the equation: time_to_park + time_to_home = total_time\n    equation = Eq(time_to_park + time_to_home, total_time)\n    \n    # Solve the equation for distance\n    solution = solve(equation, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie, joleen = symbols('rennie joleen')\n    equation = Eq((3/4) * rennie, (2/3) * joleen)\n    equation2 = Eq(joleen, rennie + 5)\n\n    solutions = solve((equation, equation2), (rennie, joleen))\n\n    total_pies = solutions[rennie] + solutions[joleen]\n\n    return total_pies\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5*x - x, 35)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    used_for_pie_kg = 550 / 1000\n    used_for_juice_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (used_for_pie_kg + used_for_juice_kg)\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls is x + 8\n    # Their total is 26, so x + (x + 8) = 26\n    # This simplifies to 2x + 8 = 26\n    # Solving for x gives us x = (26 - 8) / 2\n    number_of_boys = (26 - 8) / 2\n    # The number of girls is 8 more than the number of boys\n    number_of_girls = number_of_boys + 8\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the time Nancy takes to finish the job by herself\n    n = symbols('n')\n\n    # Equation based on combined work\n    equation1 = Eq((1/n + 1/6), 1/10)\n\n    # Equation based on Nancy working 20 hours and Lee 6 hours to complete the job\n    equation2 = Eq(20/n + 6/6, 1)\n\n    # Solve the system of equations for n\n    solution = solve((equation1, equation2), (n))\n\n    # Since we expect a positive real solution and solve returns a dict,\n    # we get the value of n and ensure it's positive.\n    ans = abs(solution[n])\n\n    return ans\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A\n    return None  # If no solution is found, which shouldn't happen in this case.\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    num_days = 5\n\n    total_chairs = num_days * (2 * first_day_chairs + (num_days - 1) * common_difference) // 2\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for number in range(1, 416):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pound = 100\n    total_pence = 3 * pence_in_pound\n    portion_pence = 15\n\n    percentage = (portion_pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choosing any two items means we have three combinations to consider:\n    # pencil + ruler, pencil + pen, and ruler + pen\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    # Total combinations is the sum of each possible two-item combination\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Worst case scenario for not getting three marbles of the same color:\n    # considering 2 marbles of each color at most\n    # Taking 2 blue, 2 yellow, and 1 red (max), still doesn't guarantee 3 of the same color\n    # So take one more to ensure 3 of any color.\n    max_blue_yellow = 2 + 2  \n    max_red = 1\n    # Need to take one more to guarantee 3 of the same color\n    marbles_to_take = max_blue_yellow + max_red + 1  \n    return marbles_to_take\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n    total_spent = book_price + tshirt_price + pen_price\n    return total_spent\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Children are grouped into 4 but 3 had to sit out => number of children mod 4 is 3\n    congruence_1 = (3, 4)\n    # Children are grouped into 13 but 1 had to sit out => number of children mod 13 is 12\n    congruence_2 = (12, 13)\n\n    # Solve the system of congruences\n    children_number, _ = solve_congruence(congruence_1, congruence_2)\n\n    # Check if the solution is between 100 and 190, and add multiples of lcm(4, 13) if needed\n    while children_number < 100:\n        children_number += 4 * 13\n\n    return children_number\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # current sum of Mary and her son's age is 45\n    current_sum = 45\n    # in 5 years, each will be 5 years older, so there are two people aging 5 years.\n    increment = 2 * 5\n    # new sum of their ages is the current sum plus the increment\n    future_sum = current_sum + increment\n    return future_sum\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # total cost in pence\n    pounds_paid = 100    # amount paid in pence (£1 = 100p)\n    change = pounds_paid - total_cost  # change received in pence\n    \n    return change\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    sofa_price = sales_tax_paid / sales_tax_rate\n\n    return sofa_price\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sebastian and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n    \n    # Equation representing the difference in ages\n    equation1 = Eq(garrett - sebastian, 24)\n    \n    # Equation representing the ages in 10 years\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n    \n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for number of boys(g) and number of girls(b)\n    b, g = symbols('b g')\n\n    # g = b - 65 (65 fewer boys than girls)\n    # (3/7)g - (2/5)b = 0 (equal number of boys and girls after leaving)\n    equation1 = Eq(g, b - 65)\n    equation2 = Eq((3/7)*g, (2/5)*b)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Total students = boys + girls\n    boys_left = solutions[g] - (2/5) * solutions[g]\n    girls_left = solutions[b] - (3/7) * solutions[b]\n    total_students_left = boys_left + girls_left\n\n    return int(total_students_left)\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    total_days = 7\n    spending_money_per_person = 250\n    number_of_people = 4\n    \n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * total_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n    \n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n    \n    return total_cost\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    \n    apples = oranges + 150\n    bananas = oranges + 50\n    total_fruits = oranges + apples + bananas\n\n    equation = Eq(total_fruits, 1400)\n\n    solutions = solve(equation, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    num = 70_017_007\n    return num\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n\n    height_kilometers = height_meters / meters_to_kilometers\n\n    return height_kilometers\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Consider each group of books as a single item to be arranged:\n    num_groups = 4 # 1 group of math books, 1 group of chemistry, 1 group of physics, 1 single biology book\n    \n    # Calculate arrangements of the 4 groups:\n    group_arrangements = factorial(num_groups)\n    \n    # Calculate arrangements within each group: Math, Chemistry, Physics\n    math_arrangements = factorial(4)\n    chemistry_arrangements = factorial(3)\n    physics_arrangements = factorial(2)\n\n    # Multiply the arrangements of groups with the arrangements within each group\n    total_arrangements = group_arrangements * math_arrangements * chemistry_arrangements * physics_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef count_vowel_permutations(vowel_count, consonant_count):\n    # If all vowels are to be together, we can treat them as a single entity.\n    # So we have consonant_count entities (consonants) + 1 entity (vowels)\n    total_entities = consonant_count + 1\n    \n    # We can arrange these entities in factorial(total_entities) ways.\n    entity_permutations = factorial(total_entities)\n    \n    # However, we can also rearrange the vowels themselves in vowel_count! ways.\n    vowel_permutations = factorial(vowel_count)\n    \n    # Total permutations where vowels are always together:\n    together_permutations = entity_permutations * vowel_permutations\n    \n    return together_permutations\n\ndef solution():\n    total_letters = factorial(len('ORANGES'))  # All possible permutations\n    vowels_count = 3  # A, E, O\n    consonants_count = len('ORANGES') - vowels_count  # R, N, G, S\n    \n    # Permutations where vowels are together\n    together_permutations = count_vowel_permutations(vowels_count, consonants_count)\n    \n    # Permutations where vowels are NOT all together\n    not_together_permutations = total_letters - together_permutations\n    \n    return not_together_permutations\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    ways_category_1 = 30\n    ways_category_2 = 40\n    ways_category_3 = 45\n\n    total_ways = ways_category_1 * ways_category_2 * ways_category_3\n\n    return total_ways\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e, m, d be the final number of stickers Eugene, Melvin, and David have\n    # and let e0, m0, d0 be the initial number of stickers they had\n    e0, m0, d0 = symbols('e0 m0 d0')\n\n    # At the end, the ratio of Eugene's to Melvin's to David's stickers was 46:12:7\n    e, m, d = 46, 12, 7\n\n    # Stating the equations based on the problem description\n    equation1 = Eq(e, 2 * (e0 - (2 * m0)) + d0)\n    equation2 = Eq(m, 2 * m0 - d0)\n    equation3 = Eq(d, 2 * d0)\n    equation4 = Eq(e0 + m0 + d0, 260)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (e0, m0, d0))\n\n    return solutions[e0]\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for side in range(1, 12 // 2 + 1):\n        for base in range(1, 12 - 2 * side + 1):\n            if side > base:  # This condition is necessary due to the triangle inequality theorem\n                continue\n            if side + side + base == 12:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import isprime\n\n    # Let's find the value for a, b, and c using the given equations\n    # 31 + a = 26 + b --> a - b = -5\n    # 26 + b = 20 + c --> b - c = 6\n    \n    for a in range(2, 100): # reasonable range to check for prime a\n        if isprime(a):\n            b = a - 5\n            c = b - 6\n            if isprime(b) and isprime(c):\n                # verifying the conditions\n                if 31 + a == 26 + b and 26 + b == 20 + c:\n                    return a * b * c\n                \nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # For a circular table, fix one person and arrange the remaining (n-1)!\n    # Here n is the number of people and there are 2 empty seats.\n    n = 6\n    ans = factorial(n - 1)\n    return ans\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # In a subtraction game like this, the winning strategy is typically related to a balanced\n    # configuration where the xor of the number of matches in all piles equals zero.\n    # This ensures that no matter what move the second player makes, the first player can always\n    # return to a state where the xor is zero.\n\n    # The number of matches in the two piles.\n    pile_A = 35\n    pile_B = 24\n\n    # Calculate the xor of the two piles.\n    xor_value = pile_A ^ pile_B\n\n    # If the xor value is not zero, Eddie has a winning strategy.\n    if xor_value != 0:\n        # Eddie can make the piles balanced in terms of xor by taking matches from the larger pile\n        # until the xor of the pile sizes is zero.\n        # Calculate the number of matches Eddie should take from pile A.\n        # This is the number where (pile_A - matches) ^ pile_B = 0.\n        # The number to take is therefore pile_A - (pile_A ^ pile_B ^ pile_B).\n        matches_to_take = pile_A - (xor_value ^ pile_B)\n        return (True, matches_to_take)\n    else:\n        # If the xor value was zero, then Eddie cannot force a win, and Wei'er has the winning strategy.\n        # But since pile A has more matches than pile B, the xor can never be zero at the start.\n        # So this case is not possible with the given initial pile sizes.\n        # Still including the structure for completeness.\n        return (False, 0)\n    \nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term + 1)\n    sum_terms = (first_term + last_term) * num_terms // 2\n    return sum_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    add = True\n    for num in range(80, 55, -2):\n        if add:\n            sum += num\n        else:\n            sum -= num\n        add = not add\n    return sum\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let's denote b as the number of boys and g as the number of girls at first.\n    # Since there was an equal number of boys and girls at first, we have b = g.\n    # After 12 boys came and 8 girls left, we have b + 12 boys and g - 8 girls.\n    # It is given that now there are twice as many boys as girls, so we have:\n    # b + 12 = 2 * (g - 8)\n    # Since b = g, we can replace g with b in the equation:\n    # b + 12 = 2 * (b - 8)\n    \n    # Solving the equation for b:\n    from sympy import symbols, Eq, solve\n    \n    b = symbols('b')\n    equation = Eq(b + 12, 2 * (b - 8))\n    number_of_boys = solve(equation, b)[0]\n    number_of_girls = number_of_boys  # since b=g\n\n    # Total number of students at first\n    total_students = number_of_boys + number_of_girls\n    \n    return total_students\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculate the time for each section\n    time_first = 280 / 7\n    time_middle = 400 / 5\n    time_last = (800 - 280 - 400) / 8  # Total distance minus first and middle distances\n\n    # Sum the times\n    total_time = time_first + time_middle + time_last\n\n    return total_time\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for i in primes:\n        if (25 - i) in primes:\n            return i * (25 - i)\n    \nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    ribbon1 = 15\n    ribbon2 = 45\n    largest_length = gcd(ribbon1, ribbon2)\n    return largest_length\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = 6 * 60 + 52  # convert start time 6:52pm to minutes\n    end_time = 8 * 60 + 24    # convert end time 8:24pm to minutes\n    duration = end_time - start_time  # calculate the duration in minutes\n    return duration\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    road_length = (num_lamp_posts - 1) * distance_between_lamp_posts\n    return road_length\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    num1 = 18\n    num2 = 52\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    students = 6\n    # By Pigeonhole Principle, we can find the minimum number of peaches\n    # the student with the most peaches could get.\n    min_peaches_max_student = (total_peaches + students - 1) // students\n    \n    return min_peaches_max_student\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for different types of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)      # Chocolate cupcakes are 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)      # Blueberry cupcakes are 36 less than vanilla\n    # Remaining cupcakes after selling\n    equation3 = Eq(chocolate - chocolate / 6 + vanilla - 2 * vanilla / 3 + blueberry - 7 * blueberry / 9, 427)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculating the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2 / 9) * 36\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed, thus there are 3 seats to arrange for Chantel, Tony, and Cale.\n    # Without any restrictions, there would be 3! ways to arrange them.\n    total_arrangements = 3 * 2 * 1\n    \n    # However, Tony can't sit face to face with Claire, which leaves 2 options for Tony.\n    # With Tony's seat fixed, there are 2! ways to arrange Chantel and Cale.\n    restricted_arrangements = 2 * 1\n    \n    # Subtract the restricted arrangements from the total to get the number of valid arrangements\n    valid_arrangements = total_arrangements - restricted_arrangements\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The children groups can be represented by the following congruences:\n    # x ≡ 3 (mod 4)\n    # x ≡ 6 (mod 7)\n    # x ≡ 6 (mod 9)\n    \n    congruences = [(3, 4), (6, 7), (6, 9)]\n    \n    # Least number of children that satisfy all three congruences\n    least_number = solve_congruence(*congruences)[0]\n    \n    return least_number\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_price_pence = 45\n    stamp_price_pence = 27\n    number_of_post_cards = 10\n    number_of_stamps = 10\n    note_value_pounds = 10\n\n    total_cost_pence = (post_card_price_pence * number_of_post_cards) + (stamp_price_pence * number_of_stamps)\n    total_cost_pounds = total_cost_pence / 100\n    change_pounds = note_value_pounds - total_cost_pounds\n\n    ans = round(change_pounds, 2)\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # The sum of the seven consecutive numbers can be represented as:\n    # (x) + (x + 1) + (x + 2) + (x + 3) + (x + 4) + (x + 5) + (x + 6) = 140\n    # Where x is the smallest number we are trying to find.\n    # Simplifying the equation we get:\n    # 7x + (1+2+3+4+5+6) = 140\n    # 7x + 21 = 140\n    # 7x = 140 - 21\n    # 7x = 119\n    # x = 119 / 7\n    x = 119 // 7  # Using integer division as we know x is a whole number\n    return x\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate = 180 / 10\n    \n    # Ryan's rate of making tables per day\n    ryan_rate = 180 / 15\n\n    # Difference in tables made by Frank and Ryan in 1 day\n    difference = frank_rate - ryan_rate\n    \n    return int(difference)\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    return round(7.35, 1)\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * marks_correct + wrong_answers * marks_wrong\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let x be the total number of questions to mark.\n    # If she marks 4 questions in a minute, she would take x / 4 minutes.\n    # If she marks 6 questions in a minute, she would take x / 6 minutes.\n    # According to the given problem statement,\n    # (x / 4) - 5 = (x / 6) + 5\n    # Solving for x gives us the total number of questions.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((x / 4) - 5, (x / 6) + 5)\n\n    num_questions = solve(equation, x)[0]\n\n    return num_questions\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_pence = 165 * 100  # convert pounds to pence\n    cake_price_pence = 75\n    num_cakes = total_money_pence // cake_price_pence\n    return num_cakes\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Since they are consecutive 2-digit numbers, we can represent them as:\n    # x, x+1, x+2, x+3, x+4 for some integer x where 10 <= x <= 95\n    # We loop over possible values for x to find the set that fits the criteria\n    for x in range(10, 96):\n        if (x + (x + 1) + (x + 2)) % 37 == 0 and (x + 1 + (x + 2) + (x + 3)) % 60 == 0:\n            return x + 4  # The largest number in the sequence\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    initial_amount = 1440\n    spent_at_restaurant = (3 / 7) * initial_amount\n    remaining_after_restaurant = initial_amount - spent_at_restaurant\n    spent_on_fees = (2 / 9) * remaining_after_restaurant\n    remaining_after_fees = remaining_after_restaurant - spent_on_fees\n    return remaining_after_fees\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    candies_to_give = (amy_candies - emma_candies) // 2\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = (5 * x) + (1 * y)\n    return cost\n\nans = solution('x', 'y')"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # 6 seconds for 2 intervals (as first chime has no interval before it)\n    interval_time = 6 / 2\n    # 6 times chime has 5 intervals\n    total_time = interval_time * (6 - 1)\n    \n    return total_time\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert everything to centimetres for easier calculation\n    meters_to_centimeters = 3.2 * 100  # 3.2 meters to centimeters\n    difference_in_centimeters = meters_to_centimeters - 30  # subtracting 30 centimeters from the result\n    \n    return difference_in_centimeters\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    q_days = 8\n    q_hours_per_day = 10\n\n    # Total work as per P's rate\n    total_work = p_days * p_hours_per_day\n\n    # P's work done in one hour\n    p_work_per_hour = 1 / total_work\n\n    # Q's total work is same\n    # Q's work done in one hour\n    q_work_per_hour = 1 / (q_days * q_hours_per_day)\n\n    # Both P and Q's work done in one hour together\n    work_per_hour_together = p_work_per_hour + q_work_per_hour\n\n    # Time taken by P and Q together to complete the job when working 8 hours a day\n    hours_needed_together = 1 / work_per_hour_together\n    days_needed_together = hours_needed_together / 8\n\n    # Since we are looking for whole days, we will take the ceiling of the number.\n    whole_days_needed = -(-days_needed_together // 1)\n\n    return int(whole_days_needed)\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Sum of squares of first n natural numbers formula: n(n+1)(2n+1)/6\n    n = 10\n    result = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return result\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    factors_count = 1\n    prime_factors_with_multiplicity = factorint(120)\n\n    for multiplicity in prime_factors_with_multiplicity.values():\n        factors_count *= (multiplicity + 1)\n    \n    return factors_count\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    factors_pairs = [(i, 180//i) for i in range(1, int(180**0.5)+1) if 180 % i == 0]\n    min_difference = min(abs(pair[0] - pair[1]) for pair in factors_pairs)\n    return min_difference\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kilogram = 56 / 100  # converting pence to pounds\n    cost_for_five_kilograms = 5 * cost_per_kilogram\n    amount_paid = 10\n    change = amount_paid - cost_for_five_kilograms\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    # The multiples of 3 between 5 and 15 are 6, 9, and 12\n    # Check which of these are also factors of 27\n    for i in [6, 9, 12]:\n        if 27 % i == 0:\n            return i\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # let x be the time it takes Max to cover the distance\n    # let d be the distance\n    # Speed of Max = d / x\n    # Speed of Luca = (2/3) * Speed of Max = 2d / (3x)\n    # Time taken by Luca to cover distance d at his usual speed = d / (2d / (3x)) = 3x / 2\n    # Given that Time taken by Luca - Time taken by Max = 10 minutes\n    # => 3x/2 - x = 10\n    # => (3x - 2x)/2 = 10\n    # => x/2 = 10\n    # => x = 20 minutes (Time taken by Max)\n    \n    # Time taken by Luca at double his usual speed:\n    # Speed of Luca at double speed = 2 * (2d / (3x)) = 4d / (3x)\n    # Time taken by Luca at double speed = d / (4d / (3x)) = 3x / 4\n    # Since x is 20 minutes, then time taken by Luca at double speed = 20 * 3 / 4 = 15 minutes\n    \n    time_taken_by_max = 20\n    time_taken_by_luca_double_speed = time_taken_by_max * 3 / 4\n    return int(time_taken_by_luca_double_speed)\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruit_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n\n    average_weight = total_fruit_weight / total_fruits\n    \n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    total_marks = 71\n\n    # Assume Tom answered x questions correctly and y questions incorrectly.\n    # Then the number of correct answers plus incorrect answers should be 40 (the total number of questions)\n    # and the score should be 71 based on the marking scheme.\n    # Therefore, we have two equations:\n    # 2x - y = 71 (because each correct answer gives 2 marks and each wrong answer deducts 1 mark)\n    # x + y = 40 (because the sum of correct and incorrect answers is the total number of questions)\n    # We solve this system of equations to find the actual numbers of correct and incorrect answers.\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if 2 * correct_answers - incorrect_answers == total_marks:\n            return incorrect_answers\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the distance Star jogs from 6:30 A.M. to 7:30 A.M.\n    jogging_time = 1 # Star jogs for 1 hour\n    jogging_speed = 6.5 # Star's jogging speed is 6.5 miles per hour\n    jogging_distance = jogging_time * jogging_speed # distance = speed * time\n\n    # Calculate the distance Star walks from 7:30 A.M. to 9:30 A.M.\n    walking_time = 2 # Star walks for 2 hours\n    walking_speed = 4.5 # Star's walking speed is 4.5 miles per hour\n    walking_distance = walking_time * walking_speed # distance = speed * time\n    \n    # Calculate the total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    num_cards = 52\n    num_patterns = 13\n    cards_per_pattern = num_cards // num_patterns\n    \n    # If we draw one card from each pattern except 'A', we will have 3 * (cards_per_pattern - 1)\n    # To ensure we get an 'A', we need to draw one more card.\n    ans = 3 * (cards_per_pattern - 1) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time_to_travel_downstream = distance / speed_downstream\n\n    return time_to_travel_downstream\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let the number of pens and pencils Mrs Rajoo originally bought be x.\n    # After giving away 5 pencils, she had x - 5 pencils left.\n    # She had twice as many pens as pencils left, so she had 2 * (x - 5) pens.\n    # Then she bought another 18 pens, so she had 2 * (x - 5) + 18 pens in the end.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Create an equation based on the information given:\n    # She originally had the same number of pens (x) as pencils (x).\n    # After giving away 5 pencils, she had twice as many pens as pencils left,\n    # which means 2 * (x - 5) = x.\n    equation = Eq(2 * (x - 5), x)\n\n    # Solve the equation to find the value of x.\n    original_count = solve(equation, x)[0]\n\n    # Calculate the total number of pens she had in the end.\n    final_count_of_pens = 2 * (original_count - 5) + 18\n\n    return final_count_of_pens\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    \n    books_per_pile = total_books // piles\n    \n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    length_cut = 45 * 2\n    remaining_length = total_length - length_cut\n    wire_length = 40\n    number_of_cuts = remaining_length // wire_length\n    return number_of_cuts\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    butter_needed = 100 / cookies_per_gram\n    return butter_needed\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count = 0\n    number = 0\n    \n    while count < 100:\n        number += 1\n        count += str(number).count('0')\n\n    return number\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35 AM\", \"%I:%M %p\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n\n    return arrival_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = 3  # A three-digit number has 3 places to fill\n    options_per_digit = 3  # Digits 6, 7, and 8 - three options for each place\n\n    # Each digit can be used more than once, so the total combinations:\n    total_combinations = options_per_digit ** digits\n    \n    return total_combinations\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_who_play_tennis = 1 / 10\n    fraction_of_girls_who_are_left_handed = 0.25\n\n    # Calculate the total number of left-handed students\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_who_play_tennis\n\n    # Calculate the total number of students\n    total_students = total_left_handed / fraction_of_girls_who_are_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Bud, Pip, and Tom's sweets\n    bud, pip, tom = symbols('bud pip tom')\n\n    # Equation Bud has three times as many sweets as Pip\n    equation1 = Eq(bud, 3 * pip)\n\n    # Equation Tom has twice as many sweets as Bud\n    equation2 = Eq(tom, 2 * bud)\n\n    # Sum of the sweets is 50\n    equation3 = Eq(bud + pip + tom, 50)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_initial = 180  # speed in meters per minute\n    time_initial = 6     # time in minutes\n    speed_tired = 120    # speed when tired in meters per minute\n    time_tired = 8       # time in minutes when tired\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # The sum of an arithmetic sequence is given by:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms.\n    # For eight consecutive whole numbers:\n    n = 8\n    # Sum = 2012\n    # We need to solve for the last term which is the largest number.\n    # Let the first term be x, then the last term would be x + 7 (since\n    # all terms are consecutive whole numbers).\n    # So, we have the equation\n    # 2012 = n/2 * (x + x + 7)\n    # Simplify and solve for x:\n    x = (2012 * 2 / n - 7) / 2\n    # The largest number is x + 7:\n    largest_number = x + 7\n    return int(largest_number)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias himself\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    return (14 - 8) / 3\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of students in classes A and B\n    A, B = symbols('A B', positive=True, integer=True)\n\n    # Given relations:\n    # A = (5/7) * B\n    # (A + 3) = (4/5) * (B - 3)\n    equation1 = Eq(A, 5/7 * B)\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Since we want the number of students in class A right now, we return A from solutions\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # As the boys form a perfect square, let's assume there are n^2 boys\n    # When the 17 girls line up outside the square array, they form a new square with n^2 boys, which is a perfect square too\n    # The new square has (n+1)^2 total members\n    # Thus the equation n^2 + 17 = (n+1)^2 can be used to find the value of n\n    # Expanding the equation gives us n^2 + 17 = n^2 + 2n + 1 => 17 = 2n + 1 => n = (17 - 1) / 2\n    \n    n = (17 - 1) // 2\n    num_boys = n ** 2\n\n    return num_boys\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # let x be the number of bottles Faye has at first\n\n    # we know that exchanging 3 bottles gives us 1 new bottle\n    # so if Faye swaps 5 times (3 * 5 = 15), she would normally get 5 bottles\n    # but she got 4 bottles, which means she got 1 more bottle than expected\n    # since each swap uses 3 bottles, she must have started with 2 bottles (3 - 1)\n    # so for 5 swaps, this means she has 2 * 5 = 10 bottles at first\n    \n    # let's subtract the unexpected bottle, so we get the actual count of bottles Faye would have needed to perform the exchanges without the unexpected bottle\n    # she got 4 bottles, so without the extra one, she would've gotten 3 bottles\n    # for each bottle, she needs 3 empty bottles, so for 3 bottles, she would need 3 * 3 = 9 empty bottles\n\n    # now let's add up: the 4 bottles she got from exchanging, and the 1 extra unexpected bottle, giving us 4 + 1\n    # Faye ends with 5 bottles after all exchanges, so we subtract them from the bottles she started with\n\n    # Equation: x = 9 + 5 (bottles she needs to exchange for 3 bottles plus bottles remaining after all exchanges)\n    x = 9 + 5\n    return x\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_ml_per_second = 125\n    total_ml = total_litres * 1000\n    time_seconds = total_ml / flow_rate_ml_per_second\n    return time_seconds\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let x be the distance between Ivy's home and destination\n    # Let s be the original speed (in km/h)\n    # The original time taken is 6 hours (from 1 pm to 7 pm)\n    # Time taken to travel at original speed: distance/speed = time => x/s = 6\n    \n    # If she travels 2 km/h faster, the new speed is s+2 and time taken is 5 hours\n    # Time taken to travel at new speed: distance/new speed = new time => x/(s+2) = 5\n    \n    # Set up the equations:\n    # x = 6s (1)\n    # x = 5(s+2) (2)\n    \n    # Now we'll solve the system of equations for x and s\n    # Equate (1) and (2)\n    # 6s = 5s + 10\n    # 6s - 5s = 10\n    # s = 10\n    \n    # Substitute s into equation (1) to find the distance x\n    # x = 6 * s = 6 * 10\n    x = 6 * 10\n    \n    return x\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    pages = 0\n    digits = 0\n\n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Time taken to cut the rope into 4 equal parts\n    time_for_4_cuts = 12  # minutes\n    \n    # Since he cuts the rope into 4 parts, he makes 3 cuts in 12 minutes\n    # Therefore, the time taken for each cut is 12 minutes / 3 cuts\n    time_per_cut = time_for_4_cuts / 3  # minutes per cut\n    \n    # To cut the rope into 12 pieces, he needs to make 11 cuts\n    # So the total time is the time per cut multiplied by the number of cuts needed\n    time_for_12_cuts = time_per_cut * 11  # minutes\n\n    return time_for_12_cuts\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Incorrect recording\n    incorrect_day_saving = 1268\n    # Correct recording\n    correct_day_saving = 1082\n    # Difference between the correct recording and incorrect recording \n    saving_difference = incorrect_day_saving - correct_day_saving\n    # The difference in average savings due to incorrect recording \n    average_difference = 1468 - 1462\n    # Calculate number of days \n    num_days = saving_difference / average_difference\n\n    return int(num_days)\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_tree = current_year - birth_year\n    return age_of_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    last_term = 31\n    term_position = 10\n    difference = 28 - 25\n\n    first_term = last_term - (term_position - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, solve\n\n    l, m, c = symbols('l m c')\n    equation1 = 4 * l * m * c - 2240\n    equation2 = c - m - 2\n    equation3 = m - l - 1\n\n    solutions = solve((equation1, equation2, equation3), (l, m, c))\n    \n    # Extract Carol's age from the solutions\n    # There may be multiple solutions, but we want the one with positive integers\n    for solution in solutions:\n        if all(age.is_integer and age > 0 for age in solution):\n            return solution[c]\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    # Let the first term be 'a' and the common difference be 'd'\n    # In the sequence a, a+d, a+2d, ... the nth term is given by a + (n-1)d\n    # From the first condition 9th term is 18 larger than 15th term:\n    # a + 8d = (a + 14d) + 18\n    # From the second condition sum of 20th and 12th terms is 88:\n    # (a + 19d) + (a + 11d) = 88\n    # We have two equations:\n    # 8d + 18 = 14d  -> (1)\n    # 2a + 19d + 11d = 88 -> (2)\n    # Simplifying both equations:\n    # 6d = 18 -> (1)\n    # 2a + 30d = 88 -> (2)\n    # Solving for d from equation (1):\n    d = 18 / 6\n    # Solving for a from equation (2) using the value of d:\n    a = (88 - 30 * d) / 2\n\n    # Now to find the 32nd term, use the nth term formula:\n    # nth term = a + (n-1)d\n    # 32nd term = a + 31d\n    term_32 = a + 31 * d\n\n    return term_32\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3*(6 - 2*x), 8 + 10*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n\n    return red_flowers, purple_flowers\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Chewy's incorrect working (8x + 8)/2 - 3(x + 6) = 4x + 4 - 3x - 18\n    correct_working = Eq((8 * x + 8) / 2 - 3 * (x + 6), x + 22)\n\n    # Solving for the correct simplified equation\n    correct_equation = Eq((8 * x + 8) / 2 - 3 * (x + 6), 0)\n    correct_answer = solve(correct_equation, x)\n\n    return correct_answer[0]\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    return remainder if remainder == 0 else 9 - remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # With 10 identical marbles and splitting into 2 piles\n    # we can think of placing a divider in between the marbles\n    # There is always 1 way to have all in pile one or pile two:\n    # (10, 0) or (0, 10)\n    # The remaining possible splits are (1, 9), (2, 8), ..., (9, 1)\n    # In total there are 10 possible splits + 1 (all in one pile) = 11\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # 1 liter is approximately 1.05669 quarts\n    liters_to_quarts = 2.5 * 1.05669\n    # The capacity of her cup is 0.5 quarts\n    cups_capacity = 0.5\n    # The number of cups she can drink\n    num_cups = liters_to_quarts / cups_capacity\n    # Round to the nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Worst case scenario:\n    # Picking all of one color and then all of another color\n    # without getting 3 of the same color. The next pick\n    # must then be the third of the same color.\n    red = 5\n    blue = 9\n    white = 4\n    # Pick 2 reds, and 2 blues, and 2 whites. So far, no color has 3 cars\n    # The next car picked, regardless of color, will be the third of its color\n    cars_picked = 2 * red + 2 * blue + 2 * white + 1\n\n    return cars_picked\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85  # length in centimeters\n    length_m = 2  # length in meters\n    length_cm_2 = 147  # length in centimeters\n\n    # Convert all lengths to meters and add them\n    total_length_m = length_cm / 100 + length_m + length_cm_2 / 100\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    max_ants = 0\n\n    for spiders in range(total_legs // 8 + 1):\n        ants = (total_legs - spiders * 8) // 6\n        if 8 * spiders + 6 * ants == total_legs:\n            max_ants = max(max_ants, ants)\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_used = 2\n    stamps_given = 14\n    \n    # Calculate stamps initially using reverse operations\n    initial_stamps = stamps_left + stamps_used + stamps_given - stamps_bought\n    \n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's denote the initial height as h.\n    # After the first bounce, the height will be 3h.\n    # After the second bounce, the height will be 3(3h) = 9h.\n    # According to the condition, after each subsequent bounce, the height is halved.\n    # After the third bounce, the height will be 9h / 2.\n    # After the fourth bounce, the height will be (9h / 2) / 2 = 9h / 4.\n\n    # We are given that the height after the fourth bounce is 36 m.\n    # Therefore, we can write the equation as 9h / 4 = 36\n    # We need to find the initial height h.\n\n    # Solving the equation for h.\n    h = (36 * 4) / 9\n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    # Let's denote the two original numbers as x and y.\n    # We have two equations based on the problem statement:\n    # x + y = 11.63  (1)\n    # x + y/10 = 5.87  (2)  because Oliver shifted the decimal point of y to the left\n    \n    # From (1), we can express y = 11.63 - x\n    # Now we can replace y in (2) with the expression we got from (1):\n    # x + (11.63 - x)/10 = 5.87\n\n    # Let's solve for x:\n    x = symbols('x')\n    equation = Eq(x + (11.63 - x)/10, 5.87)\n    solution_x = solve(equation, x)\n    x_value = solution_x[0]\n\n    # y = 11.63 - x\n    y_value = 11.63 - x_value\n\n    # The difference between the two numbers is |y - x|\n    difference = abs(y_value - x_value)\n\n    # The problem asks for one hundred times the difference between the two numbers:\n    result = 100 * difference\n\n    return result\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence\n    \n    total_individual_cost = 12 * cost_per_song\n    savings = total_individual_cost - cost_whole_cd\n    \n    return savings / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as all digits must be unique and '8' is already used.\n        for b in range(0, 10):\n            if b == a or b == 8: continue\n            for c in range(0, 10):\n                if c in [a, b, 8]: continue\n                for d in range(0, 10, 2):  # 'd' must be even for the number to be divisible by 4.\n                    if d in [a, b, c, 8]: continue\n                    for e in range(0, 10, 5):  # 'e' must be 0 or 5 for the number to be divisible by 5.\n                        if e in [a, b, c, d, 8]: continue\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if number % 3 == 0:\n                            return number  # First number that satisfies all conditions is the smallest.\n    return None\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    total_trays = 40\n    total_eggs = eggs_per_tray * total_trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = str(i)\n        reverse = original[::-1]\n        diff = abs(i - int(reverse))\n        results.add(diff)\n    return results\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return change\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # To get the smallest possible difference, we arrange the numbers as ascending in one number\n    # and descending in the other number, with the smallest digit (0) placed in the second position\n    # of the larger number to avoid leading zero.\n    # e.g., the smallest number would be 10234 and the largest would be 98760\n    # The difference would be 98760 - 10234\n\n    smallest = int(''.join(map(str, sorted(range(1, 10)) + [0])))\n    largest = int(''.join(map(str, sorted(range(10), reverse=True))))\n    diff = largest - smallest\n\n    return diff\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10*N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length_of_train = 450  # length in meters\n\n    # Speed = Distance / Time\n    speed = length_of_train / time  # speed in meters per second\n\n    # Convert meters per second to kilometers per hour\n    speed_kmph = speed * 3.6\n\n    return speed_kmph\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam Sam had 40 stickers more than Peter\n    original_stickers_sam = peter + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_gives = 0.20 * original_stickers_sam\n    sam_after_giving = original_stickers_sam - sam_gives\n    \n    # Peter gave 25% of his stickers to Sam after receiving from Sam\n    peter_after_receiving = peter + sam_gives\n    peter_gives = 0.25 * peter_after_receiving\n    peter_final = peter_after_receiving - peter_gives\n    \n    # Sam received stickers from Peter\n    sam_final = sam_after_giving + peter_gives\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Find the solution\n    solution = solve((equation, Eq(sam, original_stickers_sam)), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial_10 = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return factorial_10\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) // 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    concentration = (salt_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n    return pencils_per_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_Bala = 2\n\n    total_people = people_in_front_of_Ali + Ali_Bala + people_behind_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_one_friend = friends - 1  # Each friend sends a card to all other friends\n    total_cards_sent = friends * cards_sent_by_one_friend\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):  # Iterate from 1 to 828\n        count += str(i).count('9')  # Convert number to string and count '9's\n    return count\n\n# Call the function and store the answer\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    num = 1\n    while not (num % 1 == 0 and num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    \n    # Alan and Bilal's collections are given\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    \n    # Chloe collects twice as much as David\n    equation3 = Eq(chloe, 2 * david)\n    \n    # David raises three times as much as Emily\n    equation4 = Eq(david, 3 * emily)\n    \n    # The total amount raised by the five friends\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_3_days = 9 * 3\n    cookies_next_2_days = 15 * 2\n    cookies_last_2_days = 10 * 2\n    total_days = 3 + 2 + 2\n    total_cookies = cookies_first_3_days + cookies_next_2_days + cookies_last_2_days\n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    candy_rate = 1/20\n    david_rate = 1/25\n    combined_rate = candy_rate + david_rate\n    work_done_in_12_days = 12 * candy_rate\n\n    for days_off in range(13):\n        if work_done_in_12_days + days_off * david_rate >= 1:\n            break\n\n    return days_off\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # Assuming that the book is at rest and considering Newton's third law (action and reaction),\n    # the magnitude of the force exerted by the table on the book (normal force) is equal to the weight of the book.\n    # Thus, the force exerted by the table is directly opposite to the gravitational force (weight)\n    # acting on the book, which has a magnitude of 20N.\n    \n    force_by_table = 20 # The force by the table in Newtons\n\n    return force_by_table\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    tax_1 = 0.05 * 50000\n    tax_2 = 0.08 * (income - 50000) + T / 100 * (income - 50000)\n    total_tax = tax_1 + tax_2\n\n    equation = Eq(total_tax, 15100)\n    solution = solve(equation, T)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Constants\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    h = 5.0   # Height of the table (m)\n\n    # Using the equation of motion: v^2 = u^2 + 2*g*h\n    # Initial velocity (u) = 0 (the ball is gently pushed, so no initial speed)\n    # Final velocity (v) is what we need to find\n    # v^2 = 2*g*h => v = sqrt(2*g*h)\n\n    v = sqrt(2 * g * h)\n    return v\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Since Lily is blindfolded, consider the worst case scenario:\n    # Lily takes all the basketballs and volleyballs before getting six footballs.\n    # That would be 9 basketballs + 3 volleyballs.\n    # To make sure she has 6 balls of the same type, she needs one more ball.\n    # So add one more to the total.\n    \n    # Total balls taken to guarantee 6 balls of the same type:\n    balls_taken = 9 + 3 + 1\n    \n    return balls_taken\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_per_cake = 36 / 6\n    total_time_for_10_cakes = time_per_cake * 10\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # Acceleration due to gravity in m/s^2\n    h = 30     # Initial height in meters\n    v0 = 5    # Initial velocity in m/s\n    angle = 45 # Angle in degrees\n    \n    # Decompose initial velocity into horizontal and vertical components\n    v0x = v0 * math.cos(math.radians(angle))\n    v0y = v0 * math.sin(math.radians(angle))\n    \n    # Time taken to reach the ground, considering vertical motion\n    # Using the quadratic formula: v0y*t + 0.5*g*t^2 = h\n    # We need to solve for t\n    a = 0.5 * g\n    b = -v0y\n    c = -h\n    \n    # Quadratic formula: (-b + sqrt(b^2 - 4ac)) / (2a)\n    # We only consider the positive square root as time cannot be negative\n    t = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    \n    # Final velocity in the vertical direction\n    # vf = v0 + a*t\n    vf_y = v0y + g * t\n    \n    # Final speed is the magnitude of the final velocity vector\n    vf = math.sqrt(v0x**2 + vf_y**2)\n    \n    return vf\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total number of fruits\n    total_fruits = symbols('total_fruits')\n\n    # Given that 4/5 of the fruits were apples,\n    # we calculate the number of apples.\n    apples = 4/5 * total_fruits\n    \n    # After 3/4 of the fruits were removed, there were:\n    # 1/8 of the apples and 30 pears left.\n    # We calculate the number of apples and pears left after removal.\n    apples_left_after_removal = 1/8 * apples\n    pears_left_after_removal = 30\n    \n    # The remaining fruits are the sum of apples and pears left.\n    fruits_left_after_removal = apples_left_after_removal + pears_left_after_removal\n    \n    # Since 3/4 of the fruits were removed, 1/4 is left.\n    fruits_left = 1/4 * total_fruits\n    \n    # We set the equation fruits_left to equal fruits_left_after_removal.\n    equation = Eq(fruits_left, fruits_left_after_removal)\n    \n    # We solve the equation to find the total number of fruits.\n    solution = solve(equation, total_fruits)\n    \n    # There is a single solution which gives the total number of fruits.\n    return solution[0]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for num in range(10**10):  # Arbitrary large number loop\n        if sum(int(digit) for digit in str(num)) == 20:\n            if num % 11 == 0:\n                return num\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2       # sandwiches, burgers\n    drink_options = 3      # coffee, milk, tea\n    dessert_options = 4    # cake, pudding, ice-cream, pie\n\n    # Principle of Multiplication\n    total_options = food_options * drink_options * dessert_options\n\n    return total_options\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or O == 0:\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # We have 13 oranges and 3 kids. We need to give at least one orange to each kid\n    # Let's first give 1 orange to each kid, then we will have 13 - 3 = 10 oranges left to distribute\n    \n    # Now the problem is equivalent to the number of ways to distribute 10 identical items (oranges) into 3 distinct groups (kids)\n    # This is a problem of distributing n identical items to r distinct groups, which can be solved using Stars and Bars theorem\n    # The number count ways to partition n items among r groups is comb(n + r - 1, r - 1) \n    # Therefore, we need to calculate comb(10 + 3 - 1, 3 - 1)\n    \n    remaining_oranges = 10\n    kids = 3\n    ways_to_divide = comb(remaining_oranges + kids - 1, kids - 1)\n    \n    return ways_to_divide\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    # Initial volume of water in containers A and B\n    A_volume = 48\n    B_volume = 28\n    \n    # Total volume of water in both containers\n    total_volume = A_volume + B_volume\n    \n    # Equal volume in each container after transfer\n    equal_volume = total_volume / 2\n    \n    # Volume of water to be transferred from A to B\n    transfer_volume = A_volume - equal_volume\n    \n    return transfer_volume\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the variables\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n    \n    # Write equations according to the problem\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the equations for each animal weight\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n    \n    # Calculate the weight of 8 elephants in terms of pigs\n    weight_of_8_elephants_in_pigs = 8 * solutions[elephant] / solutions[pig]\n    \n    return weight_of_8_elephants_in_pigs\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.5)\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n    \n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n    \n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n    \n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 60 / 100 * (2 / 5) * 75\n    return result\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    principal = 2000  # initial amount borrowed\n    amount = 2519.42  # amount after 3 years\n    years = 3\n    \n    # Define the symbol for interest rate\n    r = symbols('r')\n    \n    # Equation representing the compound interest\n    equation = Eq(principal * (1 + r) ** years, amount)\n    \n    # Solve for the interest rate\n    interest_rate = solve(equation, r)\n    \n    # Since there could be multiple solutions, we filter out only the positive real solution\n    # and consider only the numeric part (evaluating it as a float)\n    rate = [sol.evalf() for sol in interest_rate if sol.is_real and sol > 0]\n\n    return rate[0]\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange all singing performances is factorial(6).\n    ways_to_arrange_singing = factorial(6)\n    \n    # A dummy \"singing\" performance is placed between the dancing performances.\n    # D S D S D S D is the maximum arrangement of dancing performances with at least\n    # one singing performance between them, creating 5 spaces (including the ends)\n    # between dancing performances to place the remaining singing performances.\n    \n    # The number of ways to choose spaces for the 4 dancing performances out of the 5 possible\n    # spaces. We use binomial coefficient C(5, 4) for that.\n    ways_to_choose_spaces_for_dancing = factorial(5) // (factorial(4) * factorial(5 - 4))\n    \n    # The number of ways to arrange all dancing performances is factorial(4).\n    ways_to_arrange_dancing = factorial(4)\n    \n    # The total number of ways is found by multiplying these together.\n    total_ways = ways_to_arrange_singing * ways_to_choose_spaces_for_dancing * ways_to_arrange_dancing\n    \n    return total_ways\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    total_weight_3_boxes = (total_weight_5_boxes / 5) * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n\n    # Treat the comics and fictions each as a single group initially\n    # Since we have 2 groups, there are 2! ways to arrange these groups\n    group_arrangements = factorial(2)\n\n    # There are 4! ways to arrange the comics within their group\n    comic_arrangements = factorial(4)\n\n    # There are 6! ways to arrange the fictions within their group\n    fiction_arrangements = factorial(6)\n\n    # Total arrangements: arrange groups * arrange comics * arrange fictions\n    total_arrangements = group_arrangements * comic_arrangements * fiction_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    \n    total_ratio = coffee_ratio + milk_ratio\n    litres_per_ratio = coffee_litres / coffee_ratio\n    \n    total_litres = litres_per_ratio * total_ratio\n    \n    return total_litres\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Define the total number of questions each\n    total_questions = 10\n\n    for dora_correct in range(total_questions + 1):\n        # Points for Dora: 10 points for each correct, -5 for each incorrect\n        dora_points = 10 * dora_correct - 5 * (total_questions - dora_correct)\n        # Justin's points are Dora's points plus 15\n        justin_points = dora_points + 15\n        # Total points they got together\n        total_points = dora_points + justin_points\n        \n        # Check if the total points match the given number (155)\n        if total_points == 155:\n            return dora_correct\n    \nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the time Nancy takes to finish the typing job by herself\n    n = symbols('n')\n    \n    # Equation based on the combined work\n    eq1 = Eq(1/10, 1/n + 1/(n + 14))\n\n    # Solve the equation to find the time Nancy takes to finish the job alone\n    time_nancy = solve(eq1, n)\n\n    return time_nancy[0]\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_pieces = 10\n\n    remaining_string_length = total_string_length - used_string_length\n    length_of_each_piece = remaining_string_length / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the total number of candies sold by the groups in Class B\n    # Let y be the number of groups in Class B (which is given as 4)\n    \n    # Average for Class A:\n    # (3 groups * 12 candies) / 3 groups = 12 candies/group\n    \n    # Average for Class A and B together:\n    # (3*12 + x) / (3 + 4) = 8 candies/group\n    \n    # By solving the equation for x:\n    x = 8 * 7 - 3 * 12  # x is the total candies sold by Class B\n    \n    # To find the average of Class B per group:\n    average_B = x / 4\n    \n    return average_B\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    ans = 45 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    num_flavours = 7\n    num_combinations = comb(num_flavours, 2)\n\n    return num_combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n    ans = gcd(gcd(6, 9), 18)\n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    # Each handshake involves 2 people, so we calculate the combination of 10 people taken 2 at a time.\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_to_milk_to_dark = Eq(white/milk, 3/7) & Eq(milk/dark, 7/5) & Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_to_milk_to_dark), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students = symbols('students', integer=True)\n\n    badminton = students / 4 + 3\n    remaining = students - badminton\n    table_tennis = remaining / 3 - 3\n    football = 25\n\n    equation = Eq(students, badminton + table_tennis + football)\n\n    total_students = solve(equation, students)\n\n    return total_students[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5\n    green_balls = 10\n\n    while True:\n        total_balls = red_balls + green_balls\n        probability = green_balls / total_balls\n        if probability == 1/3:\n            return red_balls - 5\n        red_balls += 1\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction = 1/4\n    total_money = spent / fraction\n    return total_money\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    num_small_squares_per_row = large_square_side // small_square_side\n    num_small_squares_total = num_small_squares_per_row ** 2\n    return num_small_squares_total\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    max_pages = 1\n    while True:\n        if count_sixes(max_pages) == 18:\n            break\n        max_pages += 1\n\n    return max_pages\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial number of stickers Peter has as 'p'.\n    p = symbols('p')\n\n    # Sam had 40 stickers more than Peter initially.\n    s = p + 40 \n\n    # Sam gave 20% of his stickers to Peter.\n    stickers_given_by_sam = s * 0.20\n    s -= stickers_given_by_sam\n    p += stickers_given_by_sam\n\n    # In return, Peter gave 25% of his stickers to Sam.\n    stickers_given_by_peter = p * 0.25\n    s += stickers_given_by_peter\n    p -= stickers_given_by_peter\n\n    # In the end, Sam had 96 stickers more than Peter.\n    equation = Eq(s - p, 96)\n\n    # Solve the equation.\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Ones digit pattern for the base 32 repeats every 4 powers: [2, 4, 8, 6]\n    # We calculate 33 mod 4 to find the ones digit of 32^33\n    ones_digit_32 = [2, 4, 8, 6][33 % 4 - 1]\n    \n    # Ones digit pattern for the base 22 repeats every 4 powers: [2, 4, 8, 6]\n    # We calculate 29 mod 4 to find the ones digit of 22^29\n    ones_digit_22 = [2, 4, 8, 6][29 % 4 - 1]\n    \n    # Ones digit of the subtraction is simply the subtraction of the ones digits\n    ans = (ones_digit_32 - ones_digit_22) % 10  # modulo 10 to handle negative results\n\n    return ans\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Taking the ratio 4:9 and equating it to x:81\n    # where x is the missing number in the box.\n    # The proportion is x / 81 = 4 / 9\n    \n    # Solving for x using cross multiplication\n    x = 4 * 81 / 9\n    \n    return int(x)\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((i ** 3) / (i * (i + 1) * (i + 2)) for i in range(2, 2013)) + 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    difference = 21 - 15  # Calculate the common difference of the sequence\n    last_term = 39        # The last term in the given sequence\n    next_term = last_term + difference  # Calculate the next term in the sequence\n    return next_term\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height_to_climb = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n    \n    # Calculate net distance climbed in each period (2 jumps)\n    net_distance_per_period = jumps_per_period * jump_up - slide_down\n    \n    # Calculate the number of full periods (2 jumps) needed to get within one jump of the top\n    periods_needed = (height_to_climb - jump_up) // net_distance_per_period\n    \n    # Calculate the total number of jumps within those periods\n    total_jumps = periods_needed * jumps_per_period\n\n    # Add final jump to reach or surpass the top\n    final_height = periods_needed * net_distance_per_period + jump_up\n    if final_height < height_to_climb: \n        total_jumps += 1\n\n    return total_jumps\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Since we need to share 16 sausages among 24 people,\n    # each person should get 16/24 = 2/3 of a sausage.\n    # We can give one whole sausage to each set of three people\n    # and divide another sausage into three equal parts and give\n    # one part to each person in the set.\n\n    # So for every three people, we need to make 1 cut on one sausage.\n    # We can keep doing this process for all people.\n\n    # Total sets of three people are 24 / 3 = 8\n    # Thus, total cuts required are 8 (one for each set).\n\n    return 8\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    # Total permutations of the word RAINBOW\n    total_permutations = factorial(7)\n\n    # Permutations when vowels (A, I, O) are together\n    # Consider AIO as a single unit; now we have 5 units to arrange (R, N, B, W, AIO)\n    vowels_together = factorial(5)\n    \n    # Permutations of AIO among themselves\n    vowels_permutations = factorial(3)\n\n    # Total permutations when vowels are together\n    total_vowels_together = vowels_together * vowels_permutations\n\n    # Subtract these from the total permutations to get permutations where vowels are not together\n    ans = total_permutations - total_vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    score_per_correct = 4\n    score_per_incorrect = -2\n\n    # Let x be the number of correct answers\n    # The number of wrong/unanswered questions would be (total_questions - x)\n\n    # The total score can be calculated by:\n    # (number of correct answers * score per correct answer) + \n    # (number of wrong/unanswered answers * score per wrong/unanswered answer) = total score\n\n    # So the equation will be:\n    # x * score_per_correct + (total_questions - x) * score_per_incorrect = Jay's total score\n\n    # We can then form the equation and solve for x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(x * score_per_correct + (total_questions - x) * score_per_incorrect, 152)\n\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define x as the initial amount of water in container A \n    x = symbols('x')\n\n    # Set the equation according to the given problem conditions\n    equation = Eq(x - 500, 2 * (x - 350 - 500))\n\n    # Solve the equation for x\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    a = 51 - 39\n    b = 147 - 51\n    c = 147 - 39\n\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Wendy and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2*vivien)\n\n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10)/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Calculate Wendy's age in 5 years' time\n    wendy_future_age = solutions[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    \n    # Numbers 1-9 have one digit\n    digits += 9 * 1\n\n    # Numbers 10-99 have two digits\n    digits += (99 - 10 + 1) * 2\n\n    # Numbers 100-325 have three digits\n    digits += (325 - 100 + 1) * 3\n\n    return digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Calculate the total number of permutations without any restrictions\n    total_permutations = factorial(len(\"STATISTIC\")) // (factorial(3) * factorial(3) * factorial(2))\n    \n    # Calculate the number of invalid permutations where the Ts are together\n    # This is done by treating the three Ts as one item\n    invalid_permutations = factorial(len(\"SATISTIC\") + 1) // (factorial(3) * factorial(2))\n    \n    # Subtract the number of invalid permutations from the total permutations to get the answer\n    count = total_permutations - invalid_permutations\n    return count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Each of the 6 team members including Lovelle said 3 sentences to each other,\n    # which means every pair of the 6 members had a conversation.\n    # We calculate the total number of pairs in 6 members.\n    total_conversations_in_group = (6 * (6 - 1)) // 2\n    \n    # 12 members did not speak to Lovelle, but they did speak to each other.\n    # Each of these members had a conversation with the 5 other members except Lovelle,\n    # and since there are 12 of them, we calculate the number of pairs in this group too.\n    total_conversations_outside_group = (12 * (12 - 1)) // 2\n\n    # Now each of the 12 members also must have talked 3 sentences each to the 5 members\n    # that talked to Lovelle, excluding Lovelle herself.\n    conversations_with_lovelle_group = 12 * 5\n    \n    # The total conversations is the sum of conversations in both groups and across groups.\n    total_conversations = total_conversations_in_group + total_conversations_outside_group + conversations_with_lovelle_group\n\n    # Since each member said 3 sentences *to* each other, we divide by 3 to get the total number of members who spoke.\n    total_members_who_spoke = total_conversations // 3\n\n    # The total team members include Lovelle, the 5 team members who spoke to her, and the 12 who did not.\n    total_team_members = 1 + 5 + 12\n\n    return total_team_members\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Let x be the number of fruit gums eaten in each of the next four lessons.\n    # Total number of fruit gums in the packet should be divisible by 3 and 4.\n\n    for x in range(1, 1000): # Arbitrarily choosing 1000 as an upper limit to search for a solution.\n        total_gums = x * 4       # Total eaten in the last four lessons.\n        total_gums += 2          # Plus the 2 eaten secretly.\n        total_gums_with_third = total_gums * 3/2 # Plus the shared one third.\n        \n        if total_gums_with_third.is_integer() and total_gums_with_third % 3 == 0:\n            return int(total_gums_with_third)\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    time_needed = total_pieces / pieces_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number_to_round = 418\n    rounded_number = round(number_to_round, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) / 8\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sarah's and Mark's original number of Pokemon cards\n    sarah, mark = symbols('sarah mark')\n\n    # Sarah had $20 more than Mark initially\n    equation1 = Eq(sarah - mark, 20)\n\n    # After buying 16 more Pokemon cards, Sarah had 3 times more than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    # Return the number of Pokemon cards Sarah had initially\n    return solutions[sarah]\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern = [2945, 3445, 3245, 3745, 4045, 3845]\n    differences = [pattern[i] - pattern[i - 1] for i in range(1, len(pattern))]\n    for i in range(1, len(differences)):\n        if differences[i] != differences[i - 1]:\n            missing_difference = differences[1] if i == 1 else differences[0]\n            return pattern[i - 1] + missing_difference\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The first chest can be opened with any of the 9 keys.\n    # After opening the first chest, there are 8 keys left for the second chest.\n    # Then 7 keys left for the third chest, and finally 6 keys for the last chest.\n    \n    # Maximum attempts for each chest are equal to the number of keys left to try out.\n    # Since for each chest we have no information on which key opens it, we have to try all keys.\n    attempts_first_chest = 9   # All keys for the first chest.\n    attempts_second_chest = 8  # One key less for the second chest.\n    attempts_third_chest = 7   # Two keys less for the third chest.\n    attempts_fourth_chest = 6  # Three keys less for the final chest.\n    \n    # Adding up all attempts gives the maximum number of attempts needed.\n    max_attempts = (attempts_first_chest + attempts_second_chest +\n                    attempts_third_chest + attempts_fourth_chest)\n    return max_attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    # The sum of the squares of the first n odd numbers is n^2 * (2n^2 - 1)/3\n    # In our case, the last term is 25 which means there are (25 + 1) / 2 = 13 terms\n    n = (25 + 1) // 2\n    ans = n**2 * (2*n**2 - 1) // 3\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    h = symbols('h')\n    \n    # Define the equation\n    equation = Eq(2 * h, 25 + h)\n    \n    # Solve the equation\n    solution = solve(equation, h)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85\n    number_of_coins = 11\n    total_length = coin_diameter * (number_of_coins - 1) + coin_diameter\n    return total_length\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    more_first_hour = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, more_first_hour), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    difference = second_term - first_term\n    num_terms = 14\n\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sum_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for women (w) and men (m)\n    w, m = symbols('w m')\n\n    # Equation representing 4 times as many women as men\n    equation1 = Eq(w, 4 * m)\n\n    # Equation representing the total cupcakes eaten by women and men\n    # Each woman ate 2 cupcakes, each man ate 5 cupcakes, and 182 cupcakes were eaten in total\n    equation2 = Eq(2 * w + 5 * m, 182)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Since we need the number of women, we return the solution for w\n    return solutions[w]\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    # For a circular arrangement, one person can be considered fixed at a point,\n    # and the remaining 7 can be permuted in 7! ways.\n    num_ways = factorial(7)  # 7! since the table is circular and one place is fixed\n    return num_ways\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    difference = night_temp - morning_temp\n    return difference\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age = 8\n    mother_age = 8 + 33\n    difference_2_years_ago = (mother_age - 2) - (sandra_age - 2)\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of ants\n    x = symbols('x')\n    \n    # Write the equation based on the problem description\n    equation = Eq((x - 3*x/4) - 2*(x - 3*x/4)/5 + 185, 2*x)\n\n    # Solve the equation for x\n    ants_at_first = solve(equation, x)\n\n    return ants_at_first[0]\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Since we are only interested in the last digit of the expression,\n    # we will consider only the last digits of the powers of 2 and 3.\n\n    # The last digit of powers of 2 repeats in a cycle of 4: 2, 4, 8, 6\n    last_digit_2 = 2 ** (2017 % 4)\n\n    # The last digit of powers of 3 repeats in a cycle of 4: 3, 9, 7, 1\n    last_digit_3 = 3 ** (2017 % 4)\n\n    # The last digit of the product will be the product of the last digits of the two numbers\n    ans = (last_digit_2 * last_digit_3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    cost_per_book = 13\n    books_first_day = 89\n    books_second_day = 11\n    \n    total_cost = (books_first_day + books_second_day) * cost_per_book\n    \n    return total_cost\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    current_term = 8  # The last number given in the sequence is 49 which is 7^2, so the current term is 8\n    next_number = current_term ** 2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def nguyen_process(n):\n        # Double the number and add 4\n        result = 2 * n + 4\n        # Exclude the hundreds digit if the number is greater than 100\n        if result >= 100:\n            result = result % 100\n        return result\n\n    # Initialize the first number that Nguyen writes down\n    current_number = 1\n    # Loop to get the 2022nd number\n    for i in range(1, 2022):\n        current_number = nguyen_process(current_number)\n    \n    # Return the 2022nd number\n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Frequency of red light flashes per minute\n    red_flashes_per_minute = 4\n    # Frequency of green light flashes per minute\n    green_flashes_per_minute = 6\n\n    # Find the least common multiple of the two frequencies\n    lcm = red_flashes_per_minute * green_flashes_per_minute // \\\n          math.gcd(red_flashes_per_minute, green_flashes_per_minute)\n\n    # Find how many times they flash together per minute\n    flashes_together_per_minute = lcm // red_flashes_per_minute\n\n    # Since there are 60 minutes in an hour, calculate the total number of times\n    # the lights flash together in one hour\n    total_flashes_together_in_one_hour = flashes_together_per_minute * 60\n\n    return total_flashes_together_in_one_hour\n\nimport math\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41): # 41 is the upper bound for a and b, as they are primes contributing to 41.\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    \n    solutions = solve(equation, n)\n    \n    return solutions\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the first term of the arithmetic progression as 'a'\n    # and the common difference as 'd'.\n    a, d = symbols('a d')\n    \n    # The sum of an arithmetic progression can be found using the formula:\n    # S = n/2 * (2a + (n - 1)d), where n is the number of terms.\n    # We have to find the sum of the first four terms (S1) and\n    # the sum of the last four terms (S2).\n    \n    # The sum of the first four terms S1 = 4/2 * (2a + (4-1)d)\n    S1 = 4/2 * (2*a + 3*d)\n    \n    # The sum of the last four terms S2 can be expressed in terms of the first term\n    # of the last four terms which is the fifth term of the sequence.\n    # The fifth term A5 = a + 4d\n    # So, S2 = 4/2 * (2*(a + 4d) + (4-1)*d)\n    S2 = 4/2 * (2*(a + 4*d) + 3*d)\n    \n    # According to the given condition:\n    # The sum of the first four terms is 32 less than the sum of the last four terms:\n    # S1 + 32 = S2\n    equation = Eq(S1 + 32, S2)\n\n    # Solve the equation to find the common difference 'd'\n    solution = solve(equation, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # converting kilograms to grams\n    return n\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (1 - 3/5)\n    water_volume_per_bottle = total_volume_per_bottle - 120\n    water_needed_for_6_bottles = water_volume_per_bottle * 6\n    return water_needed_for_6_bottles\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "def solution():\n    from math import factorial\n\n    total_letters = len(\"EARTH\")  # Total number of letters in the word EARTH\n    ans = factorial(total_letters)  # The total number of ways to arrange the letters\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150  # feet per minute walking away\n    friend_speed = 200  # feet per minute walking away\n    \n    walking_time = 10  # minutes\n    \n    # Simon's distance from school after walking for 10 minutes\n    simon_distance = simon_speed * walking_time\n    \n    # Simon's friend's distance from school after walking for 10 minutes\n    friend_distance = friend_speed * walking_time\n    \n    # Simon's speed when running back to school\n    simon_run_speed = 2 * simon_speed\n    \n    # Since Simon runs back to the school at twice his original speed,\n    # It will take him half the time to return to school\n    time_to_return = walking_time / 2\n    \n    # Simon's friend continues to walk away during the time Simon runs back\n    friend_walks_further = friend_speed * time_to_return\n    \n    # Simon's total distance from his friend when he reaches the school\n    total_distance_from_friend = friend_distance + friend_walks_further\n\n    return total_distance_from_friend\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r = perm\n        # Ensure that the leading digits are not zero\n        if m == 0 or s == 0:\n            continue\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_objects = 7  # two bells, two stars, two red balls, and one green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    # The number of ways to arrange n objects, where there are groups of identical objects, \n    # is n! divided by the product of the factorials of the sizes of each of the groups of identical objects:\n    ans = factorial(total_objects) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n\n    return ans\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # 5 litres in the water dispenser\n    container_ratio = 0.25\n    cup_volume_ml = 150  # volume of one cup in millilitres\n    num_cups = 14\n\n    # Volume taken by the container\n    container_volume = initial_volume * container_ratio\n\n    # Volume taken by all cups (convert ml to litres by dividing by 1000)\n    cups_volume = cup_volume_ml * num_cups / 1000\n\n    # Total volume taken from the dispenser\n    total_volume_taken = container_volume + cups_volume\n\n    # Volume left in the water dispenser\n    water_left = initial_volume - total_volume_taken\n\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    ans = count_derangements(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            number = int(f\"2{x}{y}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # The key is that the quickest person (Eddie in this case) always come back with the flashlight.\n    times = [1, 2, 5, 10]  # individual times for Eddie, Jack, Rose, and Mary\n    times.sort()  # Ensure the list is sorted\n    total_time = 0\n\n    while len(times) > 3:\n        # Case 1: The two fastest go together, the fastest returns, then the two slowest\n        # go together, and the second fastest returns.\n        option1 = times[1] + times[0] + times[3] + times[1]\n        \n        # Case 2: The fastest and the slowest go together, the fastest returns, then\n        # the two next fastest go together, and again the fastest returns.\n        option2 = times[2] + times[0] + times[3] + times[0]\n        \n        # We choose the faster option\n        total_time += min(option1, option2)\n        \n        # The two slowest are now across the bridge and removed from the list\n        times = times[:2]\n        \n    # Finally, the two (or three) remaining people cross as quickly as possible.\n    # If there are two people left, they just cross it together.\n    if len(times) == 2:\n        total_time += times[1]  # The second person's time since it's the slower one\n    else:\n        # If there are three people left, then the two fastest cross, the fastest returns,\n        # and the two remaining people cross together.\n        total_time += times[0] + times[1] + times[2]\n    \n    return total_time\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    profit_amount = profit_percentage / 100 * selling_price\n    \n    cost_price = selling_price - profit_amount\n    new_profit = 5000\n    new_profit_percentage = (new_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let the original number of pages Anny writes per day be x.\n    # Therefore, if she writes 2 more pages per day, she will write x + 2 pages per day.\n    # The total number of pages is the same in both cases.\n    # In the first case, it takes her 8 days, so the total number of pages is 8 * x.\n    # In the second case, it takes her 8 - 2 = 6 days, so the total is 6 * (x + 2).\n    # Setting up the equation: 8 * x = 6 * (x + 2)\n\n    # Solving for x gives us the original number of pages she writes each day.\n    # The total number of pages will then be 8 * x.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8 * x, 6 * (x + 2))\n    original_pages_per_day = solve(equation, x)[0]\n    \n    total_pages = 8 * original_pages_per_day\n    \n    return total_pages\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking is 5 loaves per 20 minutes\n    # Bud's rate of baking is 3 loaves per 15 minutes\n    \n    # Convert their rates to loaves per minute\n    pip_rate = 5 / 20\n    bud_rate = 3 / 15\n    \n    # Total time in minutes\n    total_time = 40\n    \n    # Calculate loaves baked by each in 40 minutes\n    loaves_by_pip = pip_rate * total_time\n    loaves_by_bud = bud_rate * total_time\n    \n    # Add up the loaves baked by both\n    total_loaves = loaves_by_pip + loaves_by_bud\n    \n    return int(total_loaves)\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To guarantee that Yohan gets a pair of white socks,\n    # he should take into consideration the worst-case scenario:\n    # picking all the red socks and black socks before getting any white sock\n    \n    # Red socks\n    max_red_socks = 10   \n    # Black socks\n    max_black_socks = 10  \n    # One white sock to finally get a pair of white socks\n    white_socks_needed = 1  \n\n    # Total number of socks Yohan must take\n    total_socks = max_red_socks + max_black_socks + white_socks_needed\n\n    return total_socks\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Value increase by 10% so last year's value was £11,000\n    # Let x be the original price, so:\n    # x * 1.10 = 11000\n    last_year_value = 11000\n    original_price = last_year_value / 1.10\n\n    # This year the value decreases by 10% so the new value is 90% of last year\n    # new_value = x * (1 - 0.10)\n    this_year_value = original_price * 0.90\n\n    # Comparing with the original price, calculate the amount of profit or loss\n    # profit_or_loss = new_value - original_price\n    profit_or_loss = this_year_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simp_expr = simplify(expr)\n    return simp_expr\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12 * a) / 4 + (2 * a) * 5\n    simplified_expr = simplify(expression)\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    # Create equation based on the problem statement\n    equation = Eq((3/8 + 1/6) * cookies + 33, cookies)\n\n    # Solve the equation\n    solution = solve(equation, cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Jemma's number\n    x = symbols('x')\n    # Equation based on Jemma's statement\n    equation = Eq((x + 3) * 5, 35)\n    # Solve for x\n    result = solve(equation, x)\n    \n    # Take the only solution from the result\n    jemmas_number = result[0]\n    return jemmas_number\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Using the year 2020 as a placeholder; any non-leap year works\n    end_date = datetime(2020, 6, 7)  # The year doesn't affect the calculation as May 5th to June 7th is consistent yearly\n    current_date = start_date\n    sunday_count = 0\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    num_buckets = total_litres // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # To find the median before the first 10 appears, we will need to construct the sequence up to that point\n    # and then find the median.\n\n    sequence = []\n    # The loop runs from 1 to 9 because the first 10 is not included\n    for num in range(1, 10):\n        # We append the number \"num\" a number of times equal to \"num + 2\" as per the given pattern\n        sequence.extend([num] * (num + 2))\n    \n    # Now sequence holds the entire list of numbers up to (but not including) the first 10\n    \n    # The position of the median in the sequence will be at half the length of the sequence to the left\n    num_elements = len(sequence)\n    middle = num_elements // 2\n    \n    # If the sequence has an odd number of elements, the median is the middle element\n    # Since Python is zero-indexed, we do not need to add or subtract 1 from middle to get the index\n    # Python's // operator takes care of the floor division\n    if num_elements % 2 == 1:\n        median = sequence[middle]\n    else:\n        # If the sequence has an even number of elements, \n        # the median is the average of the two middle elements\n        median = (sequence[middle - 1] + sequence[middle]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    packets = 25\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red_initial, white_initial = symbols('red_initial white_initial')\n    red_pip = symbols('red_pip')\n    white_bud = red_pip + 100\n    \n    # Initial ratio\n    equation1 = Eq(red_initial / white_initial, 3/2)\n    # After Pip adds red balls\n    equation2 = Eq((red_initial + red_pip) / white_initial, 5/3)\n    # After Bud adds white balls\n    equation3 = Eq((red_initial + red_pip) / (white_initial + white_bud), 5/4)\n    \n    # Solve the equations\n    solution = solve((equation1, equation2, equation3), (red_initial, white_initial, red_pip))\n    # Extract the number of white balls at first\n    white_at_first = solution[white_initial]\n    \n    return white_at_first\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n\n    # Initial ratio of cookies to brownies is 4:3\n    equation1 = Eq(4 * brownies, 3 * cookies)\n\n    # After giving away 6 brownies, the ratio changed to 12:7\n    equation2 = Eq(12 * (brownies - 6), 7 * cookies)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    # Calculating the sum of cookies and brownies\n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate the work done by one company in one day\n    work_one_company_one_day = 900 / (4 * 5)\n    \n    # Total work to be done for 5400m expressway\n    total_work = 5400\n    \n    # Rate of work when 6 companies are building\n    work_six_companies_one_day = work_one_company_one_day * 6\n    \n    # Number of days required for 6 companies to build 5400m expressway\n    num_days = total_work / work_six_companies_one_day\n    \n    return num_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Buy first time at $10, sell at $20\n    first_profit = 20 - 10\n    \n    # Buy back at $30, sell at $40\n    second_profit = 40 - 30\n    \n    # Add both profits\n    total_profit = first_profit + second_profit\n    \n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_tickets = 6\n    adam_spends = 93\n    claire_spends = 124\n    price_per_ticket = adam_spends / adam_tickets\n    claire_tickets = claire_spends / price_per_ticket\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25\n    common_difference = 28 - 25  # Difference between consecutive terms\n    n = 10  # The 10th term in the sequence\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # We need to isolate and find a_1 (the first term):\n    # a_1 = a_n - (n - 1) * d\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_pairs = 9\n    shoes_per_pair = 2\n    cobblers = 2\n    time_per_shoe = 2\n    \n    total_shoes = total_pairs * shoes_per_pair\n    total_time = (total_shoes / cobblers) * time_per_shoe\n    \n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # The total sum of all 8 cards numbered 1 through 8\n    total_sum = sum(range(1, 9))\n    \n    # The sum of Player One's cards\n    player_one_sum = 23\n    \n    # The sum of Player Two's cards\n    player_two_sum = total_sum - player_one_sum\n    \n    # To maximize Player Two's highest single card, we must minimize the sum of their other cards\n    # Let's sort the numbers and start assigning the lowest available cards to Player Two\n    cards = sorted(range(1, 9), reverse=True)\n    \n    # Keep track of Player Two's cards\n    player_two_cards = []\n    \n    # Distribute the cards to Player Two\n    for card in cards:\n        # If adding the card does not exceed the sum for Player Two, add it\n        if sum(player_two_cards) + card <= player_two_sum:\n            player_two_cards.append(card)\n        \n        # If we have reached 4 cards, stop\n        if len(player_two_cards) == 3:\n            break\n\n    # The highest card Player Two could have is the next available highest card\n    remaining_cards = [card for card in cards if card not in player_two_cards]\n    highest_card = max(remaining_cards)\n    \n    return highest_card\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n\n    n_players = 6\n    handshakes = comb(n_players, 2)\n\n    return handshakes\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    # Notice that the denominator is equal to (2019 + 1)(2019 - 1) which equals 2019^2 - 1\n    # Then the numerator can be simplified as 2019 + 2018 * 2020 = 2019 + 2019 * 2020 - 2020 = 2019 * (2020 + 1) - 2020\n    # Hence, the fraction can be written as (2019*(2020 + 1) - 2020) / (2019^2 - 1)\n\n    ans = (2019 * (2020 + 1) - 2020) / (2019 ** 2 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    total_dumplings = 17 + 11\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = 17 - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    \n    return three_quarters_of_number\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    correct_points = 4\n    wrong_points = -1\n    non_attempted = 3\n    total_score = 168\n\n    attempted_questions = total_questions - non_attempted\n\n    # Suppose all attempted questions are correct, then deduct the wrong points accordingly\n    # Let x be the number of questions answered incorrectly\n    # Then (attempted_questions - x) questions are answered correctly\n    # Therefore, (attempted_questions - x) * correct_points - x * wrong_points should be equal to total_score\n\n    # (attempted_questions - x) * correct_points - x * wrong_points = total_score\n    # (attempted_questions * correct_points) - (correct_points + wrong_points) * x = total_score\n    # x = ((attempted_questions * correct_points) - total_score) / (correct_points + wrong_points)\n    x = ((attempted_questions * correct_points) - total_score) / (correct_points - wrong_points)\n    \n    # correct answers = attempted_questions - x\n    correct_answers = attempted_questions - x\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of markers\n    min_markers = pack_lcm\n    while min_markers < 1000:\n        min_markers += pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Calculate the factorial of total letters (excluding the grouped vowels)\n    total_letters = factorial(8)  # CHLLNG + (AE)\n\n    # Calculate the permutations of the vowels AE\n    vowels_permutations = factorial(3) / factorial(2)  # AEE has a repeated vowel 'E'\n    \n    # The group of vowels can be treated as a single letter, but they can also\n    # be arranged amongst themselves in vowels_permutations ways\n    \n    # Final result is permutations of all letters times the permutations of the vowels\n    ans = total_letters * vowels_permutations\n    return int(ans)\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    B, C, D, E = symbols('B C D E', integer=True)\n\n    # Defining the conditions as equations\n    equation = Eq(B*1000 + C*100 + B*10 + D + C*1000 + D*100 + B*10 + C, B*1000 + D*100 + E*10 + C)\n\n    # Setting the range for the digits from 0 to 9 and B cannot be 0 as it is the first digit of a 4-digit number\n    res = solve(equation, (B, C, D, E), dict=True)\n    valid_solutions = [sol for sol in res if all(0 <= digit <= 9 for digit in sol.values()) and sol[B] != 0]\n\n    # Since all the letters are different digits, find a solution which satisfies this condition\n    for sol in valid_solutions:\n        if len(set(sol.values())) == 4:\n            B_val, D_val, E_val, C_val = sol[B], sol[D], sol[E], sol[C]\n            return B_val * 1000 + D_val * 100 + E_val * 10 + C_val\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_sales / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total spent from January to March\n    jan_to_mar = 450 * 3\n    # Calculate total spent from April to July\n    apr_to_jul = 350 * 4\n    # Total spent from August to October given\n    aug_to_oct = 1250\n    # Calculate total spent from November to December\n    nov_to_dec = 400 * 2\n    # Calculate total spent for the whole year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Calculate average spent per month from January to December\n    average_per_month = total_spent / 12\n    return average_per_month\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    divisor = 1\n    \n    while True:\n        dividend = divisor * divisor + remainder\n        if dividend % divisor == remainder:\n            return dividend\n        divisor += 1\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n\n    # Calculate the value after the first year\n    value_after_first_year = initial_value * (1 - depreciation_rate)\n\n    # Calculate the value after the second year\n    value_after_second_year = value_after_first_year * (1 - depreciation_rate)\n\n    return value_after_second_year\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + 1/4 * lorries)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('N', integer=True)) # Total number is even\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n    # Filter solutions to satisfy the less than 100 requirement\n    valid_solutions = [sol for sol in solutions if sol[cars] + sol[bikes] + sol[lorries] < 100]\n\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    average_pages_per_day = 20\n    \n    num_days = total_pages / average_pages_per_day\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_per_entrance = 25\n\n    # For one entrance:\n    time_one_entrance = 16\n\n    # Calculate how many visitors have joined the line in 16 minutes.\n    total_visitors = visitors_per_minute * time_one_entrance\n\n    # For two entrances, the rate of checking in doubles.\n    check_in_rate_two_entrances = check_in_rate_per_entrance * 2\n\n    # Calculate the time it would take for two entrances to check in all the visitors.\n    time_two_entrances = total_visitors / check_in_rate_two_entrances\n\n    return time_two_entrances\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    from sympy import isprime, primefactors\n\n    # Find the prime factors of 245\n    prime_factors = primefactors(245)\n    # Count the power of each prime factor in the factorization of 245\n    factor_powers = {pf: 0 for pf in prime_factors}\n    n = 245\n    for pf in prime_factors:\n        while n % pf == 0:\n            factor_powers[pf] += 1\n            n //= pf\n\n    # To make 245p a cube, each prime factor's power when multiplied by p must be a multiple of 3\n    # If we already have a factor power of x in 245, we need (3 - x % 3) more to make it a multiple of 3\n    p = 1\n    for pf, power in factor_powers.items():\n        remainder = power % 3\n        if remainder != 0:\n            p *= pf ** (3 - remainder)\n\n    return p\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    \n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    daytime_climb = 5\n    nighttime_slide = 3\n    net_gain = daytime_climb - nighttime_slide\n    \n    distance_after_previous_day = 0\n    days = 0\n\n    while distance_after_previous_day + daytime_climb < total_distance:\n        days += 1\n        distance_after_previous_day += net_gain\n\n    days += 1  # for the final climb out of the burrow\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    return int(original_number)\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    number_of_games = len(scores)\n    \n    mean_score = total_goals / number_of_games\n    \n    return mean_score\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknowns\n    oranges, lemons = symbols('oranges lemons')\n\n    # Define the equations based on the given ratios\n    equation1 = Eq(oranges/lemons, 3/5)\n    equation2 = Eq((oranges - 48)/lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits: apples, pears, cherries.\n    # Students can choose in the following ways:\n    # 1 type: 3 possibilities (A, P, C)\n    # 2 types: 3C2 = 3 possibilities (AP, AC, PC)\n    # 3 types: 1 possibility (APC)\n    # Adding these up, we have 3 + 3 + 1 = 7 different combinations to choose fruits.\n    # By the Pigeonhole Principle, to ensure at least two students choose the same combination,\n    # we need one more student than the number of different combinations, i.e., 7 + 1.\n    return 8\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n    initial_money = spent / fraction_spent\n    return initial_money\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 45\n    class_B = 75\n    class_C = 210\n\n    # Calculate the greatest common divisor (gcd) of class sizes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Given leg counts\n    duck_legs = 3 * 2  # Ducks have 2 legs each\n    parrot_legs = 2 * 2  # Parrots have 2 legs each\n    rabbit_legs = 1 * 4  # Rabbits have 4 legs each\n    \n    # Calculate the sum of legs without the cats\n    legs_without_cats = duck_legs + parrot_legs + rabbit_legs\n    \n    # Calculate the total legs of cats\n    cat_legs = 32 - legs_without_cats\n    \n    # Since cats have 4 legs each, divide the number of cat legs by 4 to get the number of cats\n    num_cats = cat_legs // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(x-1), 9-2*(x+1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    def lcm(a, b):\n        from math import gcd\n        return a * b // gcd(a, b)\n\n    lcm_6_8 = lcm(6, 8)\n    lcm_9_15 = lcm(9, 15)\n    lcm_all = lcm(lcm_6_8, lcm_9_15)\n\n    min_markers = (1000 // lcm_all) * lcm_all\n    if min_markers < 1000:\n        min_markers += lcm_all\n\n    return min_markers\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be the current age of the younger brother, and o be the current age of the older brother\n    y, o = symbols('y o')\n\n    # When the older brother was the age of the younger brother now, the younger brother was 12\n    equation1 = Eq(o - y, 12)\n\n    # When the younger brother reaches the current age of the older brother, the older brother will be 27\n    equation2 = Eq(o + (o - y), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # If there are 4 people in each room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms + 40, 6 * rooms - 24)\n    \n    # Solve the equation to find the number of rooms\n    solutions = solve(equation1, rooms)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let j represent Judy's current age, and f be her father's current age.\n    j, f = symbols('j f')\n    \n    # Create equations based on the problem statement\n    # Judy’s father is 33 years older than her\n    equation1 = Eq(f, j + 33)\n    # This year, the sum of their ages is 63 years old\n    equation2 = Eq(j + f, 63)\n    \n    # Solve the system of equations for both Judy's and her father's ages\n    ages = solve((equation1, equation2), (j, f))\n    \n    # Now we need to find how many years ago her father's age was four times her age\n    # If x is the number of years ago we are looking for:\n    # Father's age x years ago: f - x\n    # Judy's age x years ago: j - x\n    # f - x = 4 * (j - x)\n    \n    # We already know j and f, so we just need to solve for x\n    x = symbols('x')\n    equation3 = Eq(ages[f] - x, 4 * (ages[j] - x))\n    \n    # Solve for x\n    solution = solve(equation3, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    term_difference = fifteenth_term - tenth_term\n\n    common_difference = term_difference / position_difference\n\n    first_term = tenth_term - common_difference * (10 - 1)\n    \n    nth_term = first_term + common_difference * (102 - 1)\n\n    return nth_term\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten_fraction = 3 / 5\n    sweets_eaten = 18\n\n    total_sweets = sweets_eaten / sweets_eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_future_age = 15\n    age_difference = jane_current_age - john_current_age\n    john_future_age = jane_future_age - age_difference\n    return john_future_age\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = (7 + 3) * 11 - (7 + (3 * 11))\n    return result\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost price and the selling price\n    cp, sp = symbols('cp sp')\n    \n    # Equation for selling price which is 20% more than the cost price\n    equation1 = Eq(sp, cp * 1.20)\n    \n    # Equation for loss, which is selling the product at 80% of the selling price\n    # and then subtracting the cost price (cp) and equating this to the loss $40\n    equation2 = Eq(sp * 0.80 - cp, -40)\n    \n    # Solve the two equations for cp and sp\n    solutions = solve((equation1, equation2), (cp, sp))\n    \n    # We are interested in the cost price\n    return solutions[cp]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    likes_apples = 20\n    likes_strawberries = 30\n    likes_both = 10\n    likes_neither = 5\n\n    total_students = (likes_apples + likes_strawberries - likes_both) + likes_neither\n\n    return total_students\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percent = 12\n    discount_amount = usual_price * (discount_percent / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the numbers of markers for Xuanrui and Yaokuan\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    # Create the equation representing the total markers they had originally\n    equation1 = Eq(xuanrui + yaokuan, 708)\n\n    # Create the equation representing the condition after Xuanrui gave away markers and Yaokuan sold markers\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7)*yaokuan)\n\n    # Solve the equations for Xuanrui and Yaokuan\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # The tank filling rate when both taps are open\n    rate_xy = 1 / 6\n    \n    # The filling rate of Tap X alone\n    rate_x = 1 / 10\n    \n    # The filling rate of Tap Y alone, using the inclusion-exclusion principle\n    rate_y = rate_xy - rate_x\n    \n    # Compute the time it takes for Tap Y alone to fill the tank\n    time_y = 1 / rate_y\n    \n    return time_y\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    sum_of_factorials = sum(math.factorial(i) for i in range(1, 9))\n    last_two_digits = sum_of_factorials % 100\n    return last_two_digits\n\nimport math\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    total_volume = 300 + 300\n    sugar_a = 300 * 0.20\n    sugar_b = 300 * 0.30\n    \n    total_sugar = sugar_a + sugar_b\n    sugar_concentration = (total_sugar / total_volume) * 100\n    \n    return sugar_concentration\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    \n    total_marbles = 1442\n    ratio = 6\n    \n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, ryan * ratio)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    # Calculate the marbles Ahmad must give to Ryan\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollar_value = 2.50\n    pounds_value = 1\n    dollars_to_convert = 1000\n\n    pounds_worth = dollars_to_convert / dollar_value * pounds_value\n\n    return pounds_worth\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $10 notes originally.\n    # We have two equations based on the information given:\n    # x + y = 95 (total number of notes)\n    # 5y + x = 175 (total number of $2 notes after exchanging)\n\n    # Importing solve function from sympy to solve the system of equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 95)\n    equation2 = Eq(5*y + x, 175)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap = 1\n\n    # Subtract the head length and add one gap because the gap is not needed after the last carriage\n    remaining_length = total_length - head_length + gap\n\n    # Each carriage with a gap use up (carriage_length + gap) meters\n    carriage_plus_gap = carriage_length + gap\n\n    # Calculate the number of carriages\n    number_of_carriages = remaining_length // carriage_plus_gap\n\n    # Don't forget to add the head of the train\n    return number_of_carriages + 1\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Counting occurrences of 8 in ones place\n    ones_count = sum([1 for i in range(1, 289) if i % 10 == 8])\n    \n    # Counting occurrences of 8 in tens place\n    tens_count = sum([1 for i in range(1, 289) if (i % 100) // 10 == 8])\n    \n    # Counting occurrences of 8 in hundreds place\n    hundreds_count = sum([1 for i in range(1, 289) if i // 100 == 8])\n    \n    # Adding the number of occurrences in ones, tens, and hundreds place\n    total_count = ones_count + tens_count + hundreds_count\n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    total_cost = 2.90\n\n    # Equation 1: pen + pencil = 2.90\n    equation1 = Eq(pen + pencil, total_cost)\n\n    # Equation 2: pen = pencil + 0.60\n    equation2 = Eq(pen, pencil + 0.60)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (pen, pencil))\n\n    return solution[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    ans = solutions[diamond] / solutions[triangle]\n\n    return ans\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        # Check if for the current x there exists a whole number y\n        if (24*x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_score = 2\n    incorrect_score = -1\n    total_score = 82\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_score + incorrect * incorrect_score == total_score:\n            return correct\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv_sum = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inv_sum\n    return int(S)\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    cost_per_kg_small = 5 / 2.5\n    cost_per_kg_large = 7.70 / 4\n\n    if cost_per_kg_small < cost_per_kg_large:\n        ans = \"2.5 kg bag\"\n    else:\n        ans = \"4 kg bag\"\n\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n    \n    # Let x be the number of correct answers and y be the number of incorrect answers.\n    # x + y = total_questions (1)\n    # points_correct * x + points_incorrect * y = total_points (2)\n    \n    # We need to solve these two equations simultaneously.\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if points_correct * x + points_incorrect * y == total_points:\n            return x\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n\n    total_pages = monday_pages + tuesday_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = mass_three_quarters_full - mass_quarter_full\n\n    # The difference in mass between quarter full and three quarters full is due to half the jar's capacity.\n    # So the mass of half the content of the jar is the same as the difference calculated.\n    # Therefore, the mass for the full content of the jar is twice the mass of half the content.\n    mass_full_content = mass_half_full * 2\n\n    # The mass of the empty jar can be found by subtracting the mass of the full content from the mass when the jar is three quarters full.\n    empty_jar_mass = mass_three_quarters_full - (mass_full_content * (3/4))\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Since there are trees at both ends, subtract one interval length to account for the first tree\n    trees_per_side = (road_length // interval) + 1\n    \n    # Trees will be planted on both sides of the road\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    wrong_calculation = Eq(x/4 - 25, 2021)\n    x_value = solve(wrong_calculation, x)[0]\n    correct_answer = 4 * x_value + 25\n    return correct_answer\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    num_buses = 7\n    \n    total_length = (bus_length * num_buses) + (distance_between_buses * (num_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    total_height_28_blocks = 182\n    number_of_blocks_28 = 28\n\n    # Calculate the height of one block\n    height_of_one_block = total_height_28_blocks / number_of_blocks_28\n\n    number_of_blocks_42 = 42\n    # Calculate the height of 42 blocks\n    total_height_42_blocks = height_of_one_block * number_of_blocks_42\n\n    return total_height_42_blocks\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    number_of_terms = (last_term - first_term) // 1 + 1\n    ans = (first_term + last_term) * number_of_terms // 2\n    return ans\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        total_students = (m**2) + 5\n        n = int((total_students + 18)**0.5)\n        if n**2 == total_students + 18:\n            return total_students\n        m += 1\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n\n    # Selling at 50% above cost\n    selling_price_before_discount = cost_price * 1.5\n\n    # Applying a 10% Christmas discount on the increased price\n    selling_price_after_discount = selling_price_before_discount * 0.9\n\n    # Calculating the profit after the discount\n    profit = selling_price_after_discount - cost_price\n\n    # John's calculation is incorrect\n    is_john_correct = False\n\n    return is_john_correct, profit\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    x, y = symbols('x y')\n    equation = Eq(x / 5, y / 3)\n    solutions = solve((equation), (y))\n\n    # Returning the relationship and the value of y when x=5\n    relationship = \"directly\"\n    y_value_when_x_is_5 = solutions[0].subs(x, 5)\n\n    return relationship, y_value_when_x_is_5\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Declare an array to store the sequence, with enough space for at least 7 numbers\n    sequence = [0] * 7\n    \n    # We know the 4th and 6th numbers\n    sequence[3] = 6\n    sequence[5] = 15\n    \n    # Calculate the 5th number by subtracting the 3rd number from the 6th number\n    # This is because each number after the first two is the sum of the previous two numbers\n    sequence[4] = sequence[5] - sequence[3]\n    \n    # Back-calculate the 3rd and 2nd numbers using the known 4th and 5th numbers\n    sequence[2] = sequence[3] - sequence[4]\n    sequence[1] = sequence[4] - sequence[2]\n    \n    # Now calculate the 7th number using the 5th and 6th numbers\n    sequence[6] = sequence[4] + sequence[5]\n    \n    # The answer is the 7th number in the sequence\n    return sequence[6]\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average of the 3 numbers\n    initial_average = 25\n    # Initial total sum of the 3 numbers\n    initial_sum = initial_average * 3\n    \n    # New average after changing one number to 16\n    new_average = 22\n    # New total sum of the 3 numbers\n    new_sum = new_average * 3\n    \n    # Calculate the change in sum\n    change_in_sum = initial_sum - new_sum\n    \n    # The number was changed to 16, so we add back the difference to find the original number\n    original_number = 16 + change_in_sum\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    correct_points = 4\n    incorrect_points = -2\n    unattempted_questions = 1\n    total_points = 66\n    \n    # Let x be the number of correct answers\n    # Total answered questions is (total_questions - unattempted_questions)\n    # Incorrect answers is (total_questions - unattempted_questions - x)\n    \n    for x in range(total_questions - unattempted_questions + 1):\n        # Calculate the score for guessed x\n        score = (x * correct_points) + ((total_questions - unattempted_questions - x) * incorrect_points)\n        if score == total_points:\n            return x\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution\n    david_sugar = 800 * 0.05\n    # Eugene's solution\n    eugene_sugar = 200 * 0.30\n    # Felix's solution\n    felix_sugar = 300 * 0.10\n\n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution\n    total_solution = 800 + 200 + 300\n\n    # Concentration of resulting solution\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # 8 vertices on a cube, labeled 0 to 7\n    vertices = list(range(8))\n\n    # All possible ways to connect three vertices without considering order\n    for triplet in product(vertices, repeat=3):\n        if len(set(triplet)) == 3:  # Ensure all three vertices are distinct\n            # Check if triplet form a right triangle at vertex 0\n            # Translation of the three points can make vertex 0 to be any of the vertices of right triangle\n            # The combination of vertices (0, 1, 2) will always satisfy the condition from the origin\n            # point because they constitute a vertex and its adjacent vertices along axis-aligned edges\n            # The vertices can be (0, 2, 4) or (0, 4, 1) for example, which are also axis-aligned\n            # Other combinations inside the cube starting from the origin such as (0, 1, 4) or (0, 2, 5) work\n            if ((0 in triplet) and  # Check if one vertex is origin to satisfy axis-alignment\n               (sum(triplet) - triplet[0] in {3, 5, 6})):  # Check for combinations of vertices along axis-aligned edges\n                count += 1\n\n    # Since the cube has 8 vertices, and every combination of right triangle vertices can be translated\n    # inside the cube to any starting vertex, and considering symmetry, we divide total count by 8\n    return count // 8\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n\n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill, andrew + 18)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    return comb(4, 2)\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    # Calculate the amount of fruit juice in each type\n    juice_in_first = 20 * 0.35\n    juice_in_second = 30 * 0.60\n\n    # Calculate the total amount of fruit juice and total volume of the mixture\n    total_juice = juice_in_first + juice_in_second\n    total_volume = 20 + 30\n\n    # Calculate the percent concentration of the new mixture\n    concentration = (total_juice / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of badges made\n    x = symbols('x')\n\n    # After selling 5/7 on the first day, the remaining is 2/7\n    # After selling 1/3 of the remaining on the second day, the remaining is 2/7 * 2/3 = 4/21\n    # So she is left with 4/21 of the badges plus the additional 354 badges made\n    # In the end, she had 3 times the initial amount she made: 3 * x = (4/21 * x) + 354\n\n    equation = Eq(3 * x, (4/21) * x + 354)\n\n    # Solve for x, the initial number of badges made\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_number = \"0141705021\"\n    angel_dict = {letter: str(index) for index, letter in enumerate(\"Angel\")}\n    devil_number = \"\".join([angel_dict.get(letter, '') for letter in \"Devil\" if letter in angel_dict])\n    return devil_number == \"4005220912\", devil_number\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, every game played eliminates one player.\n    # Since there are 4 players and we need to determine a single winner,\n    # we need to eliminate 3 players. For each player eliminated, one game is played.\n    # Hence, the minimum number of games that need to be played is equal to the number\n    # of players minus one.\n\n    num_players = 4\n    ans = num_players - 1  # Subtract 1 to find the number of games.\n\n    return ans\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Since the difference between any two digits is 4 or less, and we include digit 7,\n    # the other two digits have to be from the set {3, 4, 5, 6, 7, 8, 9, 10, 11}\n    # where 3 is the smallest number that is within the 4 difference limit from 7\n    # But since it's a three-digit number, the smallest other number we should consider is actually 0.\n    # We are looking for the smallest 3-digit number which means the leftmost digit should be the smallest possible.\n    # Starting from the smallest possible digit which is '0' and we will exclude '7' since '7' should be one of the digits.\n    for x in range(0, 10):\n        if x == 7:\n            continue  # Skip 7 as it's already one of the digits\n        for y in range(0, 10):\n            if y == 7:\n                continue  # Skip 7 as it's already one of the digits\n            if 0 <= abs(x - 7) <= 4 and 0 <= abs(y - 7) <= 4 and 0 <= abs(x - y) <= 4:\n                # Construct a number with x as the smallest digit on the left, y in the middle, and 7 as one of the digits.\n                return 100*x + 10*min(y, 7) + max(y, 7)  # 7 should be on the rightmost side if y is smaller, otherwise in the middle\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    only_A_or_B = total_exhibits - (not_produced_by_A + not_produced_by_B)\n\n    produced_by_both = total_exhibits - only_A_or_B\n    return produced_by_both\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 300):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Worst case scenario picking balls of one color only:\n    max_single_color = max(8, 10, 13) # This would be picking all balls of the most populous color\n    # To ensure that we have at least one of each color, we consider picking all balls of one color plus one more ball for each of the two remaining colors.\n    ans = max_single_color + 2  # Add one for each of the other two colors\n    return ans\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a skirt and a blouse\n    skirt, blouse = symbols('skirt blouse')\n\n    # Equation representing the total cost of 3 skirts and 2 blouses\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n\n    # Equation representing that each skirt costs $14 more than a blouse\n    equation2 = Eq(skirt, blouse + 14)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    # The cost of a blouse is what we are asked to find\n    return solutions[blouse]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    slump_percentage = 10\n    this_year_value = last_year_value * (1 - slump_percentage / 100)\n    \n    original_price = last_year_value / 1.1\n    profit_or_loss = this_year_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    pupils_room_a = 235\n    pupils_room_b = 567\n    \n    total_pupils = pupils_room_a + pupils_room_b\n    pupils_each_room = total_pupils // 2\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # As B is a prime number and 8A - 3B is a multiple of 3, then B cannot be 3, as that would make 8A a multiple of 3.\n    # B must be a prime other than 3. Thus, if we take B = 2 (smallest prime), \n    # making 8A - 6, we can find the smallest A that satisfies the condition.\n    # Since A and B are both primes, we start checking from A = 2 and B must be different from A, so we start from B = 3\n    # We want to check when 8A - 3B is a multiple of 3. Seeing that 8 is 2 modulo 3, we can simplify our condition to:\n    # 2A - 0 (because any prime B except 3 is either 1 or 2 modulo 3 and 3B will be 0 modulo 3) is a multiple of 3.\n    # This simplifies to 2A is a multiple of 3, which means A is a multiple of 3/2.\n    # The smallest prime that fulfills this without A being a composite number is 3.\n    A = 3\n    return A\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the 3 groups of different flowers\n    group_arrangements = factorial(3)  \n    \n    # Number of ways to arrange flowers within their groups\n    roses_arrangements = factorial(3)\n    jasmines_arrangements = factorial(4)\n    daisy_arrangements = factorial(1)  # Only one arrangement for daisy, as there's only 1 daisy\n    \n    # Multiply the number of arrangements within the groups by the arrangements of the groups\n    total_arrangements = group_arrangements * roses_arrangements * jasmines_arrangements * daisy_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum = 60\n    count = 1\n    while sum > count:\n        sum -= count\n        count += 1\n    return count\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n\n    multiple = factorial(6)\n    factor_of = factorial(8)\n\n    def count_divisors(n):\n        div_count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                div_count += 1\n        return div_count\n\n    ans = count_divisors(factor_of // multiple)\n    return ans\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):  # assume a reasonable upper bound for the number of pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 20 / 100\n    reduced_price = original_price * (1 - discount)\n    \n    return reduced_price\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    boxes_needed = total_cookies // cookies_per_box\n    if total_cookies % cookies_per_box != 0:\n        boxes_needed += 1\n    return boxes_needed\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20 # ml/min\n    minutes_in_one_hour = 60 # minutes\n    ml_to_litres_conversion = 1000 # 1000 ml = 1 litre\n\n    leaked_amount_ml = leak_rate_per_minute * minutes_in_one_hour\n    leaked_amount_litres = leaked_amount_ml / ml_to_litres_conversion\n\n    return leaked_amount_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        s, e, d = p\n        see = int(s + e + e)\n        dee = int(e + s + s)\n        if s != '0' and e != '0' and see - dee == 110:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if (age % 2 == 1) and (age % 3 == 1) and (age % 4 == 1) and (age % 6 == 1) and (age % 7 == 0):\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 different colors, so to be certain to get a pair of the same color,\n    # Cindy must take at least one of each color and then one more to guarantee a pair.\n    num_colors = 3\n    socks_to_guarantee_pair = num_colors + 1  # One more than the number of colors\n\n    return socks_to_guarantee_pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    total_original_papers = 10\n    total_final_papers = 16\n    # Since cutting one piece into three parts results in two additional pieces\n    additional_pieces_per_cut = 2\n\n    # Number of cuts made is equal to the difference between final and original papers\n    total_cuts = total_final_papers - total_original_papers\n    \n    # The number of papers that were cut is equal to the total cuts\n    # divided by the additional pieces per cut\n    papers_cut = total_cuts // additional_pieces_per_cut\n\n    return papers_cut\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case: First take one red, then one green apple,\n    # continuing to alternate between red and green apples.\n    # After taking one of each color, we are guaranteed that the next apple\n    # will result in having two apples of the same color.\n\n    apples_to_take = 1 + 1 + 1  # One red, one green, one more to ensure a pair\n    \n    return apples_to_take\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    volume_per_pail = 4\n    num_pails = 4\n    water_left = 7\n\n    original_volume = (num_pails * volume_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation = Eq(x**20 * y**15 * z**5, 243)\n\n    # 243 can be written as 3^5 therefore each variable's power divided by 5 will be the original expression in terms of 3\n    \n    solutions = solve(equation, (x, y, z))\n\n    x_val = solutions[x]\n    y_val = solutions[y]\n    z_val = solutions[z]\n\n    ans = x_val**8 * y_val**6 * z_val**2\n\n    return ans\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return int(total_age)\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:  # Remove trailing zeros\n            product //= 10\n        product %= 100000  # Prevents integer overflow, keeps last 5 digits\n    \n    return product % 10  # Get the last non-zero digit\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    book, pencil_box = symbols('book pencil_box')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    # Solution for the cost of each pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    sorted_sequence = sorted(sequence)\n    length = len(sorted_sequence)\n    median_pos = length // 2\n    \n    if length % 2 == 0:\n        ans = (sorted_sequence[median_pos - 1] + sorted_sequence[median_pos]) / 2\n    else:\n        ans = sorted_sequence[median_pos]\n\n    return ans\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n    \n    x = 42\n    y_factors = factorint(42**2)\n    \n    y = 1\n    for base, exp in y_factors.items():\n        if exp > 1:\n            y *= base\n    \n    return x + y\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # average height of the team\n    team_average = 150\n\n    # average height of the four players is 2 cm lower than team average\n    four_players_average = team_average - 2\n\n    # total height of six players\n    total_height_six = team_average * 6\n\n    # total height of the four players\n    total_height_four = four_players_average * 4\n\n    # total height of the other two players\n    total_height_other_two = total_height_six - total_height_four\n\n    # average height of the other two players\n    average_height_other_two = total_height_other_two / 2\n\n    return average_height_other_two\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_pave_length = 50\n\n    num_days = total_length / daily_pave_length\n\n    return int(num_days)\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens, it follows that 1 dog = 8 * 2 chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    kg_per_cattle_per_day = 10\n    num_cattles = 8\n    num_days = 4\n\n    total_fodder = kg_per_cattle_per_day * num_cattles * num_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the solution in grams\n    concentration = 0.22  # Concentration of sugar in the solution\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for num in range(1, 100):\n        for digit in str(num):\n            total += int(digit)\n    return total\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let's denote the original number of marbles that Larry had as x.\n    # According to the problem, (5/12) of his marbles went to Mark, 30 went to Nate\n    # and 26 went to Ollie, leaving him with 35 marbles.\n    \n    # Therefore, we can set up the equation: x - (5/12)x - 30 - 26 = 35\n    # Simplifying the equation: (7/12)x = 35 + 30 + 26\n    \n    remaining_marbles = 35\n    marbles_to_nate = 30\n    marbles_to_ollie = 26\n    fraction_given_to_mark = 5 / 12\n\n    # Calculate the total number of marbles Larry had at first\n    x = (remaining_marbles + marbles_to_nate + marbles_to_ollie) / (1 - fraction_given_to_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess (J) and Jill (K) have before and after sharing.\n    J, K = symbols('J K')\n\n    # Set up equations based on the initial ratio and the ratio after Jill gives Jess 8 sweets.\n    # Equation 1: Jill has six sweets for every five sweets Jess has initially -> K = 6/5 * J\n    # Equation 2: Jill gives eight sweets to Jess, then Jill has four sweets for every seven sweets Jess has -> K - 8 = 4/7 * (J + 8)\n    equation1 = Eq(K, 6/5 * J)\n    equation2 = Eq(K - 8, 4/7 * (J + 8))\n\n    # Solve the system of equations for J and K\n    solutions = solve((equation1, equation2), (J, K))\n\n    # The total number of sweets is the sum of J and K.\n    total_sweets = solutions[J] + solutions[K]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    fraction_given = 1 / 4\n\n    money_given = total_money * fraction_given\n\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    birthdate = current_date - timedelta(days=(38 * 365.25 + 6 * 30.4375))\n    return birthdate.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    total_money = 1848\n    ratio_money_pies_cakes = (15, 7)\n    ratio_pies_cakes = (4, 1)\n    cake_more_than_pie = 13\n\n    # Calculate total parts for money ratio \n    total_parts_money = sum(ratio_money_pies_cakes)\n\n    # Money collected from pies\n    money_pies = (ratio_money_pies_cakes[0] / total_parts_money) * total_money\n\n    # Money collected from cakes\n    money_cakes = (ratio_money_pies_cakes[1] / total_parts_money) * total_money\n\n    # Calculate total parts for pies to cakes ratio \n    total_parts_pies_cakes = sum(ratio_pies_cakes)\n\n    # Price of one pie (since price of cake = price of pie + cake_more_than_pie)\n    price_pie = (money_pies / ratio_pies_cakes[0]) - cake_more_than_pie\n\n    # Price of one cake\n    price_cake = price_pie + cake_more_than_pie\n\n    # Number of cakes sold\n    num_cakes = money_cakes / price_cake\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            return beads\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the original amount of money Hanson had.\n    m = symbols('m')\n\n    # After spending 1/4 of his money and an additional $3, the remaining money is (3/4)*m - 3\n    remaining_after_cds = (3/4) * m - 3\n\n    # Then he spends 3/5 of the remaining money and an additional $6\n    # So the final amount is (2/5)*(3/4)*m - 3 - 6\n    remaining_after_batteries = (2/5) * remaining_after_cds - 6\n\n    # Given that he was left with $24, we set up the equation\n    equation = Eq(remaining_after_batteries, 24)\n    \n    # Solve the equation\n    solution_m = solve(equation, m)\n\n    return solution_m[0] # Take the first (and only) solution\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    # The six available digits.\n    digits = [0, 1, 3, 6, 8, 9]\n\n    # We need to find the number of 4-digit even numbers. An even number ends with either 0, 6, or 8.\n    # First, we choose the last digit (an even number). There are 3 possibilities: 0, 6, or 8.\n    even_choices = 3\n    \n    # If the last digit is 0, we have 5 choices for the first digit (can't be 0), \n    # and then 4 choices for the second digit, and 3 choices for the third digit.\n    if_0_last = 5 * 4 * 3\n\n    # If the last digit is 6 or 8, we have 4 choices for the first digit (can't be 0 or the chosen even digit),\n    # then 4 choices for the second digit and 3 choices for the third digit.\n    if_6_or_8_last = 4 * 4 * 3\n\n    # Total calculation\n    count = if_0_last + (even_choices - 1) * if_6_or_8_last\n\n    return count\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # 9^1 has a units digit of 9.\n    # 9^2 has a units digit of 1, since 9 * 9 = 81.\n    # 9^3 will again have a units digit of 9, as 9 * 1 = 9.\n    # 9^4 will again have a units digit of 1, since 9 * 9 = 81.\n    # This pattern repeats every 2 powers. Thus, 9 raised to any odd power has a units digit of 9,\n    # and to any even power has a units digit of 1.\n\n    # Since 2015 is odd, 9^2015 has a units digit of 9.\n    # Since 2016 is even, 9^2016 has a units digit of 1.\n\n    # Therefore, the units digit of the sum 9^2015 + 9^2016 is:\n    units_digit = (9 + 1) % 10\n\n    return units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways to arrange 5 men alone\n    men_arrangements = factorial(5)\n\n    # There are 6 possible positions for the women to be arranged (before and after each man and at the ends)\n    # This gives us positions like: _ M _ M _ M _ M _ M _ with 6 possible spots for the 3 women\n    positions_for_women = 6\n\n    # Calculate the number of ways to arrange 3 women in these 6 positions\n    women_arrangements = factorial(positions_for_women) // factorial(positions_for_women - 3)\n\n    # Total arrangements are the product of the men's arrangements and the women's arrangements\n    total_arrangements = men_arrangements * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Qiqi's speed in m/min\n    qiqi_speed = 60\n    # Weiling's speed in m/min\n    weiling_speed = 72\n    # Weiling starts 2 minutes later and arrives 4 minutes earlier\n    time_difference = 2 + 4\n\n    # Weiling's travel time\n    weiling_time = time_difference  \n    # Given that Weiling's time to arrive is time_difference less than Qiqi's,\n    # we can express Qiqi's travel time as weiling_time + time_difference\n    qiqi_time = weiling_time + time_difference\n\n    # Now we can set up an equation for the distance that both have traveled:\n    # distance = Qiqi's speed * Qiqi's time = Weiling's speed * Weiling's time\n    distance = qiqi_speed * qiqi_time  # same as: weiling_speed * weiling_time\n\n    return distance\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    \n    length1 = 45\n    length2 = 30\n    longest_piece_length = gcd(length1, length2)\n    candy_guess = 180\n\n    is_candy_correct = longest_piece_length == candy_guess\n\n    return longest_piece_length, is_candy_correct\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marcs_time_str = \"11:50 AM\"\n    marcs_time = datetime.strptime(marcs_time_str, \"%I:%M %p\")\n    marcs_time_corrected = marcs_time + timedelta(minutes=15)  # Correcting Marc's watch\n    georges_time = marcs_time_corrected + timedelta(minutes=7)  # Adjusting for George's watch\n    half_hour_later = georges_time + timedelta(minutes=30)  # After half an hour\n    ans = half_hour_later.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    # Tax for first 30000\n    tax_for_first_30000 = Eq(30000*T/100)\n\n    # Tax for amount above 30000\n    tax_for_above_30000 = Eq((income - 30000)*(T + 3)/100)\n\n    # Total tax paid\n    total_tax = tax_for_first_30000.rhs + tax_for_above_30000.rhs\n\n    # Tax paid is (T+1)% of his income\n    tax_is_percentage_of_income = Eq((T + 1)*income/100, total_tax)\n\n    # Solve the system\n    solutions = solve((tax_is_percentage_of_income, income >= 30000), (T, income))\n\n    # Return Ryan's income\n    return solutions[income]\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n    together_rate = A_rate + B_rate\n    \n    time_together = 1 / together_rate\n    return time_together\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n    \n    # Since it falls down after every 3 jumps, we need to subtract the fall after the last jump\n    height_after_last_fall = total_height - (jump_up - fall_down)\n    jumps_needed = (height_after_last_fall - 1) // effective_jump * 3 + 1  # -1 to handle the last set of jumps\n    \n    # Adding the last set of 3 jumps, if any are needed\n    if (height_after_last_fall - 1) % effective_jump > 0:\n        jumps_needed += 3\n\n    return jumps_needed\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    score_for_correct = 5\n    score_for_incorrect = -1\n    total_score = 90\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * score_for_correct) + (incorrect_answers * score_for_incorrect)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # You can draw 3 red marbles and still not have 4 different colors.\n    # You can draw 3 red marbles + 3 blue marbles and still not have 4 different colors.\n    # You can draw 3 red marbles + 3 blue marbles + 3 yellow marbles and still not have 4 different colors.\n    # At this stage, you have 3 marbles of each of the three colors. \n    # So, the next draw (the 10th marble) will ensure that you have 4 marbles of different colors (since there are only 4 colors).\n    return 3 + 3 + 3 + 1\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_birth_year = 2002 - 45\n    jenny_birth_year = 1995 - 22\n    age_difference = gigi_birth_year - jenny_birth_year\n    jenny_age_when_gigi_22 = 22 - age_difference\n    \n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    missing_value = 9 - (digits_sum % 9)\n    if missing_value == 9:\n        missing_value = 0\n    return missing_value\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for i in range(10):\n        code = int(f\"451{i}\")\n        if code % 3 == 0 and code % 5 != 0 and code % 9 != 0:\n            return i\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1, 1000):  # set reasonable upper limit to find the number \n        number = i * 24  # Lowest common multiple of 3 and 8 is 24\n        if str(number).endswith('2'):\n            return number\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n\n    # To find the number of positive terms, the last term must be greater than 0.\n    # a_n = a_1 + (n-1)d\n    # 0 < a_1 + (n-1)d\n    # -a_1 < (n-1)d\n    # -(a_1)/d < n-1\n    # -(a_1)/d + 1 < n\n    # To find the maximum integer n we apply the floor function.\n    n = (-(first_term)/common_difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    # Since there must be at least 1 apple in each group and the groups must have different numbers of apples,\n    # we can just decide how many apples to put in the smaller group and the rest go in the larger group.\n    # For example, if the smaller group has 1 apple, the other group will have 11, and so on.\n    # The smallest group can have at most total_apples // 2 apples for them to be different.\n    ways_to_divide = total_apples // 2\n\n    return ways_to_divide\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_still_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    \n    sale_price = original_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct, wrong = symbols('correct wrong')\n\n    equation1 = Eq(5 * correct - 2 * wrong, 51)\n    equation2 = Eq(correct + wrong, 20)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    num_cupcakes = 3\n    num_cans = 2\n\n    total_cupcake_cost = cost_per_cupcake * num_cupcakes\n    cost_of_cans = total_cost - total_cupcake_cost\n    cost_per_can = cost_of_cans / num_cans\n\n    return cost_per_can\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Time intervals for each traffic light in seconds\n    first_light_interval = 30  # half a minute\n    second_light_interval = 45  # 0.75 minutes\n\n    # Since 3 lights turn green at the same time every 9 minutes (540 seconds), find the LCM\n    lcm_two_lights = lcm(first_light_interval, second_light_interval)\n\n    third_light_interval = lcm(lcm_two_lights, 540) // lcm_two_lights\n\n    return third_light_interval\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_price = 0.99 * 5\n    cards_price = 1.98 * 2\n    total_cost = bracelets_price + cards_price\n    return total_cost\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean = 5\n    total_numbers = 8\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20-8, 31-20, 41-31, 50-41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # A can pass the ball to 3 different people for the first pass.\n    first_pass_options = 3\n    # After the first pass, the second person can pass the ball to 2 different people\n    # (not back to A or themselves).\n    second_pass_options = 2\n    # After the second pass, the third person has no choice but to pass it back to A to complete the condition.\n    third_pass_options = 1\n\n    # The number of different methods is the product of the options at each step.\n    num_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return num_methods\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let x be the number of pictures taken by members of group A with members of group B\n    # Total pictures will be divisible by 36 with a remainder of x\n    # 36 passengers in a bus, so bus 36 = group A + group B - 11 (because 11 from group A were with Group B in another bus)\n    # Also, bus 36 * pictures = group A * group B which is the total number of pictures\n    # Since each roll can take 36 pictures, we can say that the remainder x when dividing pictures by 36\n    # Will give us the answer for the number of additional pictures the last roll can take\n    # Let's use sympy to solve this\n    from sympy import symbols, solve\n\n    A, B = symbols('A B', integer=True)\n    # Equation: A * B mod 36 = (A + 11) * B mod 36\n    equations = ((A - 11) * B) % 36\n    \n    # Start with the least possible number for group B (1 bus) and keep increasing until the equation is satisfied\n    for b in range(1, 1000):  # assuming we won't be needing more than 999 buses for group B\n        # Since we have no actual upper limit for b, we'll just loop through a large range\n        # and break when we either find a solution or exceed a reasonable number of iterations (added for practicality)\n        solutions = solve(equations.subs(B, b))\n        for a in solutions:\n            if (a > 11) and (a * b) % 36 == 0:  # Additional check to ensure conditions are met\n                # Once the above condition is true, we break both the inner and outer loops\n                ans = 36 - (a * b) % 36  # How many more pictures the last roll of film can take\n                return ans\n    return \"No solution found\"\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper = 25  # in grams\n    number_of_girls = 250\n    total_weight_grams = weight_per_paper * number_of_girls\n    grams_per_kilogram = 1000\n    total_weight_kilograms = total_weight_grams / grams_per_kilogram\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    \n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for Daniel and Ming's present age\n    daniel, ming = symbols('daniel ming')\n\n    # Equation 1: Daniel's age is four times Ming's age\n    eq1 = Eq(daniel, 4 * ming)\n\n    # Equation 2: Six years later, their sum of ages is 62\n    eq2 = Eq(daniel + 6 + ming + 6, 62)\n\n    # Solving the system of equations\n    age_solution = solve((eq1, eq2), (daniel, ming))\n\n    return age_solution[daniel]\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    sum_squares = 0\n    sign = 1\n    for i in range(1000, 1, -4):\n        sum_squares += sign * (i**2 - (i-2)**2)\n        sign *= -1\n    return sum_squares\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let x be the length of the second bridge\n    # Given that the line takes 8 seconds to cross the first bridge and 10 seconds to cross the second bridge\n    # The speed of the line is the same across both bridges\n\n    # Speed = Distance / Time\n    # Time taken to cross the first bridge is 8 seconds and the length is 9 meters\n    # Speed = 9 / 8 meters per second\n\n    # Time taken to cross the second bridge is 10 seconds\n    # Since the speed is the same across both bridges,\n    # the length of the second bridge is Speed * Time\n    # Length (second bridge) = Speed * Time = (9 / 8) * 10\n\n    # The actual length of the second bridge is the calculated length + the length of the line (3 meters)\n    # because the time starts when the line starts crossing and ends when it completely crosses the bridge\n\n    length_second_bridge = ((9 / 8) * 10) + 3\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_people = 11\n    right_people = 7\n    # Crystal herself is not counted in left_people or right_people\n    crystal = 1\n    # The class is standing in 2 rows, so we need to count Crystal in both rows\n    total_people = (left_people + crystal + right_people) * 2\n    return total_people\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n\n    # Calculate the cube root of the product to get an approximation of the middle number\n    middle_number_approx = int(math.pow(2688, 1/3))\n\n    # Since we're dealing with even numbers, the approximation must be even.\n    if middle_number_approx % 2 != 0:\n        middle_number_approx += 1\n\n    # Check the product of the three consecutive even numbers around the approximation\n    for i in range(middle_number_approx - 3, middle_number_approx + 3, 2):\n        if i * (i + 2) * (i + 4) == 2688:\n            # If the condition is satisfied, the largest number is i + 4\n            return i + 4\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:  # divisible by both 3 and 11\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:  # subtract one, divisible by both 2 and 7\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 != group2:\n            ways += 1\n    return ways // 2  # Divide by 2 to avoid double counting pairs\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    i = 1\n    factors = 0\n    while i <= n:\n        if n % i == 0:\n            factors += 1\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # Hundreds digit must be non-zero\n        for b in range(0, 10):  # Tens digit can be any digit\n            for c in range(0, 10):  # Ones digit can be any digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    # using the gcd function to find the greatest common divisor\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('08:30', '%H:%M')\n    lesson_duration = 45\n    moving_period = 5\n    num_lessons = 3\n    \n    total_time = start_time + timedelta(minutes=(lesson_duration + moving_period) * (num_lessons - 1) + lesson_duration)\n\n    return total_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    troy, adam = symbols('troy adam')\n    \n    # Original relationship\n    equation1 = Eq(troy, 5 * adam)\n    \n    # Relationship after Adam took 24 more coins\n    equation2 = Eq(adam + 24, troy / 3)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n    \n    # Calculating the total number of coins they had at first\n    total_coins = solutions[troy] + solutions[adam]\n    \n    return total_coins\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands - cards, 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fives, tens = symbols('fives tens')\n\n    # total notes equation\n    total_notes_eq = Eq(fives + tens, 57)\n\n    # amount spent equations\n    spent_tens_eq = Eq(tens * 0.6, 0.6 * tens)\n    spent_fives_eq = Eq(fives * 0.25, 0.25 * fives)\n\n    # notes left equations\n    left_tens_eq = Eq(tens - spent_tens_eq.rhs, 2 * (fives - spent_fives_eq.rhs))\n\n    # solve the system of equations\n    solutions = solve((total_notes_eq, left_tens_eq), (fives, tens))\n\n    # calculate the cost of the bag\n    cost_bag = solutions[tens] * 10 * 0.6 + solutions[fives] * 5 * 0.25\n\n    return cost_bag\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Hanson had initially\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3 on CDs\n    money_after_cds = x - x / 4 - 3\n\n    # Then he spent 3/5 of the remaining money and an additional $6 on batteries\n    remaining_after_batteries = money_after_cds - 3 / 5 * money_after_cds - 6\n\n    # He was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation to find the initial amount of money Hanson had\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        digits = [int(d) for d in str(num)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for x in range(1, 8): # Hundreds digit cannot be 0 and cannot exceed the sum\n        for y in range(1, 8): # Tens digit must leave space for units digit\n            for z in range(0, 9, 2): # Units digit must be even\n                if x != y and x != z and y != z and x + y + z == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    blue = 5\n    white = 6\n    green_needed = 5\n    max_other_colors = blue + white\n\n    # Darrell can pick all blue and white beads without getting 5 green ones\n    not_enough_green = max_other_colors\n\n    # Darrell needs to pick one more to be sure to have 5 green beads\n    at_least_five_green = not_enough_green + green_needed\n\n    return at_least_five_green\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # Convert 11.55 am to minutes\n    end_time = (13 * 60) + 40    # Convert 1.40 pm to minutes (13 because it's after noon)\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    missing_number = (1/4 * 16) / (1/2)\n    return int(missing_number)\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    # Loop through multiples of 5 between 6 and 54\n    for n in range(10, 55, 5): # The range starts at 10 since it's the first multiple of 5 after 6\n        if (n + 1) % 7 == 0:  # Check if one more than the multiple of 5 is a multiple of 7\n            return n\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 5 == 1) and (number % 6 == 1) and (number % 11 == 0):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    ans = permutations(9, 4)\n    return ans\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of contestants in each group\n    contestants_per_group = 16 // 4\n\n    # Number of games in each group stage using single round-robin formula: n(n-1)/2\n    group_stage_games = contestants_per_group * (contestants_per_group - 1) // 2\n\n    # Total number of games in the group stage for all groups\n    total_group_games = group_stage_games * 4\n\n    # Number of games in the knockout round (8 contestants remaining, each game eliminates 1 player)\n    knockout_games = 8 - 1\n\n    # Total number of games played throughout the contest\n    total_games = total_group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    a, b = symbols('a b')  # rates of work for A and B respectively\n    days_together = symbols('days_together')\n\n    # A is twice as good a workman as B; rate is work per day so we have a = 2b\n    rate_relation = Eq(a, 2 * b)\n\n    # A finishes in 12 days less than B: 1 work unit / a = 1 work unit / b - 12\n    time_relation = Eq(1 / a, 1 / b - 12)\n\n    # When working together: (1/a + 1/b) * days_together = 1 work unit\n    work_together = Eq((1 / a + 1 / b) * days_together, 1)\n\n    # Solve the system of equations\n    solutions = solve((rate_relation, time_relation, work_together), (a, b, days_together))\n\n    return solutions[days_together]\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n    \n    stickers_start = stickers_end - stickers_bought + stickers_given\n    \n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Apply the inclusion-exclusion principle:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    return 520 + (180 - 320)\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    \n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    # Let m be the number of tomatoes Matthew had at first\n    # After Belinda gives Matthew 7 tomatoes, they have the same number:\n    # Belinda's tomatoes: 36 - 7\n    # Matthew's tomatoes at the beginning (m) + 7 tomatoes received = 36 - 7\n    # So we set up the equation: m + 7 = 36 - 7\n    # And solve for m\n    m = (36 - 7) - 7\n    \n    return m\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = 0.50\n    new_rate = original_rate + (original_rate * efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('013456789'):\n        if (int('8' + ''.join(p[0:2])) % 3 == 0 and\n            int('8' + ''.join(p[0:3])) % 4 == 0 and\n            int('8' + ''.join(p[0:4])) % 5 == 0 and\n            int('8' + ''.join(p[0:5])) % 6 == 0 and\n            int('8' + ''.join(p[0:6])) % 7 == 0 and\n            int('8' + ''.join(p[0:7])) % 8 == 0 and\n            int('8' + ''.join(p[0:8])) % 9 == 0 and\n            int('8' + ''.join(p[0:9])) % 10 == 0):\n                ans = int('8' + ''.join(p))\n                break\n    return ans\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4) + (ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    import math\n\n    # Given factors\n    factor1 = 15\n    factor2 = 21\n\n    # Since 15 and 21 are factors, their LCM is the number we are looking for.\n    lcm = factor1 * factor2 // math.gcd(factor1, factor2)\n\n    # Find all the factors of the LCM\n    factors = set()\n    for i in range(1, int(math.sqrt(lcm)) + 1):\n        if lcm % i == 0:\n            factors.add(i)\n            factors.add(lcm // i)\n\n    # Check that the number has exactly 8 factors\n    if len(factors) != 8:\n        return 0  # Return 0 if the conditions are not satisfied\n\n    # Return the sum of all the factors\n    return sum(factors)\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Find the difference between the two numbers\n    diff = abs(2012 - 1274)\n    # Initialize the maximum value for D - R\n    max_value = 0\n\n    # Loop from 1 to the difference\n    for i in range(1, diff + 1):\n        # Check if 'i' is a divisor of the difference\n        if diff % i == 0:\n            # Check if 'i' is odd, since D is supposed to be odd\n            if i % 2 != 0:\n                # Since the same remainder R when dividing both numbers\n                # D must also be a divisor of (number - remainder), where\n                # number can be either 2012 or 1274\n                # Therefore, we can compute the maximum value of D-R as the divisor\n                value = i - (2012 % i)\n                if value > max_value:\n                    max_value = value\n\n    return max_value\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences given in the problem: x ≡ 1 (mod 5), x ≡ 1 (mod 6), and x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using sympy's solve_congruence function to solve the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remaining_after_grace = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_juice = remaining_after_grace - given_to_evelyn\n    \n    return remaining_juice\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # 1, 3, 4 and 6 can be combined to form any number not in {2, 5, 7, 10, 11, 14}\n    # Winning positions for the game are multiples of 5 or 11 since they are unreachable with given moves\n    # If Betty wants to win, she needs to force Abby into a losing position.\n\n    # To figure out losing positions, let's simulate moves from 1 to 51 (excluding 52, the winning move)\n    # and check which moves leads to a winning position.\n    losing_positions = []\n    for i in range(1, 52):\n        if all(i - move in losing_positions or i - move < 1 for move in (1, 3, 4, 6)):\n            losing_positions.append(i)\n            \n    if 52 in losing_positions:\n        return \"Betty should go second and bring Abby to the next losing position.\"\n    else:\n        return \"Betty should go first and aim for the losing positions.\"\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of 4^2009\n    last_digit_4_power = 4 ** (2009 % 4)  # 4 has a pattern in the last digit: 4, 6, 4, 6...\n    last_digit_4 = last_digit_4_power % 10\n\n    # Calculate the last digit of 6^2010\n    last_digit_6_power = 6 ** (2010 % 4)  # 6 raised to any power has last digit 6\n    last_digit_6 = last_digit_6_power % 10\n\n    # Sum of the last digits\n    total_last_digit = (last_digit_4 + last_digit_6) % 10\n    \n    return total_last_digit\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    total_grams = 63\n    ways = 0\n    for two_grams in range(total_grams//2 + 1):\n        for five_grams in range(total_grams//5 + 1):\n            if 2 * two_grams + 5 * five_grams == total_grams:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Given average heights\n    team_average_height = 150\n    partial_team_average_height = team_average_height - 2\n\n    # Total height of the team and the four players\n    total_team_height = 6 * team_average_height\n    total_partial_height = 4 * partial_team_average_height\n\n    # Total height of the other two players\n    remaining_height = total_team_height - total_partial_height\n\n    # Average height of the other two players\n    average_remaining_height = remaining_height / 2\n    \n    return average_remaining_height\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    not_attempted = total_questions - 1\n    target_score = 66\n\n    for correct in range(not_attempted + 1):\n        incorrect = not_attempted - correct\n        score = (correct * points_for_correct) + (incorrect * points_for_incorrect)\n        if score == target_score:\n            return correct\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum from 1 to 20\n    sum_to_20 = sum(range(1, 21))\n    # Since the sequence is symmetric around 20, the sum of the entire sequence is twice the sum from 1 to 20 minus 20 itself\n    total_sum = 2 * sum_to_20 - 20\n    return total_sum\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, pool = symbols('a b c pool')\n    \n    # A and C together fill the pool and 18 tons are from A\n    # B and C together fill the pool and 27 tons are from B\n    # The flow rate of B is twice that of A: b = 2a\n    \n    equation1 = Eq(a + c, pool)\n    equation2 = Eq(b + c, pool)\n    equation3 = Eq(b, 2 * a)\n    equation4 = Eq(a, 18)\n    equation5 = Eq(b, 27)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, pool))\n    \n    return solutions[pool]\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # We have 4 letters and 5 colors,\n    # and since the color of each letter must be different,\n    # we are looking for permutations of 5 colors taken 4 at a time.\n    \n    from math import factorial\n    \n    # Calculate the number of permutations\n    ans = factorial(5) // factorial(5 - 4)\n    \n    return ans\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let the first term be a and the common difference be d\n    # The sum of the first n terms of an arithmetic sequence is given by: S_n = n/2 * (2*a + (n-1)*d)\n    # S_8 = 8/2 * (2*a + 7*d) = 32\n    # S_22 = 22/2 * (2*a + 21*d) = 44\n    \n    # From the first equation: 4*(2*a + 7*d) = 32 => a + 7/2*d = 8\n    # From the second equation: 11*(2*a + 21*d) = 44 => a + 21/2*d = 4\n    \n    # Now we can solve these two equations to find a and d\n    a, d = symbols('a d')\n    equation1 = Eq(a + 7/2*d, 8)\n    equation2 = Eq(a + 21/2*d, 4)\n    \n    solutions = solve((equation1, equation2), (a, d))\n    \n    a = solutions[a]\n    d = solutions[d]\n    \n    # Now we have the first term a and the common difference d\n    # We can find the sum of the first 15 terms\n    # S_15 = 15/2 * (2*a + 14*d)\n    S_15 = 15/2 * (2*a + 14*d)\n    \n    return S_15\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100): # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_first = 20\n    meatballs_left_second = 10\n    meatballs_difference = meatballs_left_first - meatballs_left_second\n\n    student_gets = meatballs_difference  # Since one more student gets the same amount of meatballs\n\n    return student_gets\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    increase_fraction = 1/10\n    increased_amount = initial_amount + (initial_amount * increase_fraction)\n    \n    return increased_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day_3 = 23\n    remaining_after_day_2 = (remaining_after_day_3 * 2) + 5\n    total_questions = (remaining_after_day_2 * 2) - 7\n\n    return total_questions\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    ans = \"4/25\" if fraction_value > decimal_value else \"0.17\"\n    return ans\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # 1 litre = 1000 ml\n    cup_volume = 200  # each cup contains 200 ml\n    cups_filled = 3\n    water_used = cup_volume * cups_filled\n    water_left = initial_volume - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference / (15 - 10)\n    \n    twelfth_term = tenth_term + 2 * common_difference\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of roses originally in the park\n    # Let d be the number of daisies originally in the park\n    # Let m be the number of months after which there will be 280 roses and 180 daisies\n    # Let x be the number of roses and daisies planted each month (assumed to be the same)\n    r, d, m, x = symbols('r d m x')\n\n    # Initial condition: total flowers is 300\n    initial_condition = Eq(r + d, 300)\n\n    # After m months, the number of roses and daisies\n    roses_after_m_months = Eq(r + m*x, 280)\n    daisies_after_m_months = Eq(d + m*x, 180)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, roses_after_m_months, daisies_after_m_months), (r, d, m, x))\n\n    # Return the number of roses originally in the park\n    return solutions[r]\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # Only perfect squares will be toggled an odd number of times and therefore be on at the end\n    # This is because they have an odd number of divisors (including repeatedly toggled by the square root)\n    \n    lamps_on = 0\n    for i in range(1, 251):\n        if (i ** 0.5).is_integer():\n            lamps_on += 1\n            \n    return lamps_on\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Calculate the area of one 6 decimeter side square brick\n    side_length_dm = 6 # in decimeters\n    area_per_brick_dm2 = side_length_dm ** 2  # Area in decimeter^2\n\n    # Convert 64 cm^2 to decimeter^2 (1 decimeter = 10 centimeters)\n    area_per_brick_cm2 = 64  # in centimeter^2\n    area_per_brick_dm2_small = area_per_brick_cm2 / 100  # Convert cm^2 to dm^2\n\n    # Calculate the total area to be covered\n    total_area_dm2 = 80 * area_per_brick_dm2\n\n    # Calculate the number of small bricks needed\n    number_of_bricks = total_area_dm2 / area_per_brick_dm2_small\n\n    return int(number_of_bricks)\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_questions = 10 + 20 + 30\n    total_correct = (10 * 0.2) + (20 * 0.8) + (30 * 0.9)\n    overall_percentage = (total_correct / total_questions) * 100\n\n    return overall_percentage\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    water, fruit = symbols('water fruit') # Declare symbols for the cost of the water and the fruit\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(2 * water + 3 * fruit, 2.55) # 2 bottles of water and 3 bags of fruit cost £2.55\n    equation2 = Eq(water, fruit + 0.15) # bottle of water costs 15p more than a bag of fruit\n    \n    # Solve the system of equations\n    solved = solve((equation1, equation2), (water, fruit))\n    \n    # Return the cost of a bag of fruit\n    return solved[fruit]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    greatest_num = 0\n    digits = [1, 3, 4, 5, 7, 8]\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            greatest_num = max(greatest_num, num)\n    return greatest_num\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False  # 91 is not a prime number if it's divisible by i\n    return True  # If no divisors are found, it's a prime number\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let the number of boys be b and the number of girls be b + 30\n    # b + (b + 30) = 500\n    # 2b + 30 = 500\n    # 2b = 470\n    # b = 235\n    # Thus, the number of girls is b + 30\n    \n    boys = (total_pupils - 30) / 2\n    girls = boys + 30\n    \n    return int(girls)\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_a = 10\n    length_b = 5 * length_a\n    total_length = length_a + length_b\n    return total_length\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "from math import log10\n\ndef solution():\n    # Calculate the exponent of 4 (4^2018) and 25 (25^2018)\n    exp_4 = 2018\n    exp_25 = 2018\n    \n    # Calculate logarithm base 10 of A (number of digits is the floor of log10(A) plus 1)\n    # log10(A) = log10(4^exp_4 * 25^exp_25) = exp_4 * log10(4) + exp_25 * log10(25)\n    logA = exp_4 * log10(4) + exp_25 * log10(25)\n    \n    # Calculate the number of digits (floor of log10(A) + 1)\n    num_digits = int(logA) + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Start from the first odd square difference between boys(b) and girls(g)\n    b_minus_g = 31\n    layer = 0  # number of complete layers\n    total_students = 0  # total number of students\n\n    while True:\n        boys = (layer*2 + 1)**2\n        girls = layer**2\n        # layer starts from 0, so we need to compensate by adding 1 to the difference\n        diff = boys - girls\n\n        if diff == b_minus_g:\n            total_students = boys + girls\n            break  # found the correct layer, exit the loop\n\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price_original_profit = 6500\n    original_profit_percent = 30\n    original_cost = selling_price_original_profit / (1 + original_profit_percent / 100)\n\n    new_profit = 5000\n    new_selling_price = original_cost + new_profit\n    new_profit_percent = (new_profit / original_cost) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            if x1 != x2:\n                x3 = 10 - x1 - x2\n                if x3 > 0 and x3 not in (x1, x2):\n                    count += 1\n    return count // 6  # Divide by 6 because each combination is counted 6 times (3!)\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # x2 must be greater than x1\n            x3 = 14 - (x1 + x2)\n            if x2 < x3:  # x3 must be greater than x2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n    \n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_of_each_piece = total_length / number_of_pieces\n    return length_of_each_piece\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the total number of apples Mr. Aziz had initially\n    total_apples = symbols('total_apples', real=True, positive=True)\n\n    # Create equations based on the problem\n    # He sold 1/5 of the apples on Monday, so he left with 4/5\n    # He sold 80 apples on Tuesday, so he left with 4/5 * total_apples - 80\n    # In the end, he had 30% of the apples he had at first, which equals to 0.3 * total_apples\n    equation = Eq(4/5 * total_apples - 80, 0.3 * total_apples)\n\n    # Solve the equation for the total number of apples\n    solution_eq = solve(equation, total_apples)\n\n    # Calculate how many apples he had in the end (30% of total)\n    apples_in_the_end = 0.3 * solution_eq[0]\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    meters_per_km = 1000    \n    meters = km * meters_per_km\n    return meters\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be 'x', the terms are x, x+2, x+4, ..., x+12\n    x = symbols('x')\n    fourth_number = x + 6  # 4th term\n    first_number = x       # 1st term\n    seventh_number = x + 12  # 7th term\n\n    # Equation based on the condition given\n    equation = Eq(fourth_number, (first_number + seventh_number) / 3 + 6)\n\n    # Solve the equation to find the value of x (first term)\n    first_term_value = solve(equation, x)[0]\n\n    # Calculate the sum of the seven consecutive even numbers\n    sum_seven_numbers = sum(first_term_value + 2*i for i in range(7))\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total = red + blue + green\n    return total\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    # Calculate the total sum of the 9 numbers using the average\n    average_nine_numbers = 140\n    sum_nine_numbers = average_nine_numbers * 9\n\n    # Subtract the one known number from the sum to find the sum of the other 8 numbers\n    one_number = 180\n    sum_eight_numbers = sum_nine_numbers - one_number\n\n    # Calculate the average of the other 8 numbers\n    average_eight_numbers = sum_eight_numbers / 8\n    \n    # Verify Fred's answer was incorrect by checking our computed average against Fred's claim\n    fred_claim = 40\n    is_fred_correct = average_eight_numbers == fred_claim\n\n    # Return the correct average if Fred was incorrect, else confirm his claim\n    if is_fred_correct:\n        return fred_claim\n    else:\n        return average_eight_numbers\n\n# Call the function and store the result in `ans`\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    tree_spacing = 9\n\n    num_trees_per_side = (highway_length // tree_spacing) + 1\n    total_trees = num_trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    difference = 2\n    term_index = 20\n\n    nth_odd_number = first_odd_number + (term_index - 1) * difference\n    return nth_odd_number\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of each color orchids\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(purple, 2 * yellow)  # Ben has twice as many purple orchids as yellow\n    equation2 = Eq(yellow, 3 * white)   # 3 times as many yellow orchids as white\n    equation3 = Eq(red + white, 38)     # There are 38 red and white orchids combined\n    equation4 = Eq(red, 28)             # 28 orchids are red\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Total number of orchids is the sum of purple, yellow, white, and red orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # it means there must have been 6 cars ahead of him originally.\n    # Therefore, including the Ferrari driver, the total number of cars is 7.\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    \n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    \n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    interior_angle = ((sides - 2) * 180) / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += int('5' * i)\n    ans = total % 10000  # Get the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_ratio = 0.25\n    women_ratio = 1 / 5\n\n    men = total_people * men_ratio\n    women = total_people * women_ratio\n\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    number_of_walls_per_man = 1 / (2 * 3)\n    time_for_x_walls_per_man = x / number_of_walls_per_man\n    time_for_x_walls_by_y_men = time_for_x_walls_per_man / y\n    return time_for_x_walls_by_y_men\n\nx = 1  # Replace with the desired number of walls\ny = 1  # Replace with the desired number of men\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, checked_shirts = symbols('white_shirts checked_shirts')\n\n    # Equation based on the problem statement\n    equation1 = Eq(white_shirts, 7 * checked_shirts)\n    equation2 = Eq(white_shirts + checked_shirts, 72)\n\n    solutions = solve((equation1, equation2), (white_shirts, checked_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    numbers = [72, 60, 48, 36, 24, 12]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    max_number = 0\n    for number in range(100, 1000):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                max_number = max(max_number, number)\n    return max_number\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the actual picture it's impossible to provide a solution.\n    # As there is no description of what \"(insert pic)\" is, we cannot implement a solution in Python.\n    # We would need information about the pattern or the sequence to proceed further.\n    # Thus, \"ans\" would be undefined in this case.\n    ans = \"undefined_pattern\"\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # According to the Pigeonhole Principle, we distribute balls into groups by their color.\n    # We draw one more ball than the number of color groups, which ensures that we will have at least two balls with the same color.\n    number_of_color_groups = 3  # white, red, and green\n    draws_needed = number_of_color_groups + 1\n\n    return draws_needed\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq((1/3) * girls, (1/2) * boys)\n    equation2 = Eq(girls + boys, 390)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    number = (24 * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 4 * 300\n    may_to_jul = 3 * 250\n    aug_to_sep = 750\n    oct_to_dec = 3 * 300\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # Since there is 2% less water each hour, k is 98% of the previous hour, or 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    depart_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n    \n    arrival_time = depart_time + journey_duration + walk_duration\n    \n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    \n    # Let's find out how many years it will take for Tom to reach father's age\n    years_until_father_is_70 = father_future_age - tom_age\n    \n    # Now we calculate father's current age\n    father_current_age = father_future_age - years_until_father_is_70\n    \n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    fraction_men = 9/20\n    percent_women = 30/100\n\n    men_passengers = total_passengers * fraction_men\n    women_passengers = total_passengers * percent_women\n\n    children_passengers = total_passengers - men_passengers - women_passengers\n\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily, total_votes = symbols('jordan evie emily total_votes')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    evie_votes = solutions[evie].subs(total_votes, 400)\n\n    return evie_votes\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(1, 200):\n        if sum(int(digit) for digit in format(N, 'b4')) == 5:\n            if sum(int(digit) for digit in format(N, 'b6')) == 8:\n                if sum(int(digit) for digit in format(N, 'b8')) == 9:\n                    possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    possibilities_first_digit = 2  # can be either 2 or 3\n    possibilities_other_digits = 3  # can be 0, 2, or 3\n    \n    return possibilities_first_digit * possibilities_other_digits * possibilities_other_digits\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_for_six = 1.10\n    cost_for_twelve = cost_for_six * 2\n    return cost_for_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # price in pence\n    total_money = 200  # total money in pence (£2)\n\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    \n    # This problem is a permutation of a multiset\n    # Number of permutations is total! / (fiction_books! * comic_books!)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ans\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let x be the number of acorns Chip had at first\n    # After giving away 14 acorns, Chip has x - 14\n    # Dale has the same number after receiving 14, so Dale has x - 14\n    # We know that Chip had 14 more acorns than Dale before giving away, so Chip had x and Dale had x - 28 (since Chip gave 14 to make them equal)\n    # The equation is then: x + (x - 28) = 124\n    # Solving for x gives us the number of acorns Chip had originally\n    x = (total_acorns + 28) / 2\n    return x\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0:\n            if (num ** 0.5) % 1 == 0:\n                return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    primes.reverse()  # Start with the largest prime number to minimize the quantity\n    total_sum = 51\n    count = 0\n    \n    for prime in primes:\n        while total_sum >= prime:\n            total_sum -= prime\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    cost_per_cd = 'x'  # Assuming 'x' is a symbolic representation of cost in pounds\n    number_of_cds = 8\n    total_cost = cost_per_cd + ' * ' + str(number_of_cds)  # Expression for total cost\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution_x = solve(equation, x)\n    return solution_x[0]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    num_eggs_per_tray = 26\n    num_trays = 4\n\n    total_eggs = num_eggs_per_tray * num_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    # Initialize the sum to 0\n    ans = 0\n    # Loop through the numbers adding and subtracting alternately\n    for i in range(1, 41):\n        if i % 2 == 0:\n            ans += i  # Add even numbers\n        else:\n            ans -= i  # Subtract odd numbers\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    result = 24 * 36\n    return result\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    penpals = 11\n    total_pages = 38\n    for three_page_letters in range(penpals + 1):\n        four_page_letters = penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    used_apples_kg = (750 + 1025) / 1000\n\n    remaining_apples_kg = total_apples_kg - used_apples_kg\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    total_people = people_in_front_of_amy + amy_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    number_of_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / number_of_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # In the worst case, you might pick all balls of one color, then all of another color\n    # until you are sure to have 3 different colored balls.\n    # Therefore, you need to add one more ball to the total of the two full colors to ensure the third color.\n    balls_per_color = 5\n    number_of_colors = 3\n    # Worst case for two colors: 5 reds + 5 whites, one more to be sure of a different color\n    ans = (balls_per_color * (number_of_colors - 1)) + 1\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    # Let x be the length of the shorter piece\n    # Then the longer piece is 2x\n    # According to the problem, x + 2x = 12.75\n    # Solving for x we get 3x = 12.75, hence x = 12.75 / 3\n    x = 12.75 / 3\n\n    # The length of the longer piece is twice that of the shorter piece\n    longer_piece_length = 2 * x\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    prime_cards = list(primerange(1, 21))\n    total_cards = 20\n    non_prime_cards = total_cards - len(prime_cards)\n    return non_prime_cards\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # Represents the volume of the original box\n    new_volume = original_volume * (1/2)**3  # Each dimension is halved so the new volume is (1/2)^3 times the original\n    original_mass = 1200  # Original mass in grams\n    new_mass = original_mass * new_volume  # Mass is directly proportional to volume\n    return new_mass\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi_initial, lily_initial = 120, 24\n    gigi_final, lily_final = symbols('gigi_final lily_final')\n\n    equation1 = Eq(gigi_final, lily_final * 3)\n    equation2 = Eq(gigi_initial + lily_final, gigi_final)\n    equation3 = Eq(lily_initial + lily_final, lily_final)\n\n    solutions = solve((equation1, equation2, equation3), (gigi_final, lily_final))\n\n    return solutions[lily_final]\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    difference = father_age - brian_age\n\n    while True:\n        brian_age += 1\n        father_age += 1\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # The hundreds digit, odd\n        for j in range(0, 10):  # The tens digit\n            for k in range(0, 10):  # The ones digit, keeping the number as a 3-digit number\n                if i + j + k == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # We know Linda's favorite book is the 14th from the left\n    # and there are 6 books to the right of her favorite book.\n    # Therefore, if we add the number of books to the left of her favorite book\n    # (which is 14 - 1 because the 14th book itself should not be counted)\n    # and the 6 books to the right, we get the total number of books.\n\n    # Books to the left of her favorite book.\n    left_books = 14 - 1\n    # Books to the right of her favorite book.\n    right_books = 6\n    # Total books on the shelf.\n    total_books = left_books + right_books + 1  # Adding 1 for the favorite book itself.\n\n    return total_books\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Assuming only one egg can be boiled at a time\n    time_to_boil_one_egg = 5\n    number_of_eggs = 3\n    \n    # Total time is the time to boil one egg multiplied by the number of eggs\n    total_time = time_to_boil_one_egg * number_of_eggs\n    \n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = (students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11.16  # in kg\n    cookie_dough = 45 / 1000  # converting grams to kg\n    brownie_dough = 150 / 1000  # converting grams to kg\n\n    total_dough_used = (240 * cookie_dough) + (2 * brownie_dough)\n    dough_left = total_dough - total_dough_used\n\n    return dough_left\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    day_before_final = (remaining_biscuits + 2) * 2\n    original_biscuits = (day_before_final + 4) * 2\n    \n    return original_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    pocket_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:\n            pocket_money += 5\n        else:\n            pocket_money -= 8  \n    return pocket_money\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # Dan took in 1000 calories yesterday. Today he wants to take in less.\n    # This can be represented by an inequality c < 1000\n    # where c is the number of calories Dan can take in today.\n    \n    # Since we only need to represent the inequality in a form of expression or return it,\n    # we don't actually need to solve the inequality.\n    # Therefore, the Python function does not need to compute anything.\n    # Just dummy return to satisfy function structure\n    return \"c < 1000\"\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums // number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    # Let's assume the problem to solve with whole numbers addition and subtraction\n    # is provided here, but since it's not specified, we add two arbitrary whole numbers.\n    # Example: Compute the sum of 123 and 456.\n    ans = 123 + 456\n    return ans\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n, d = symbols('n d', integer=True)    # The number of terms and common difference\n    a1, a2 = symbols('a1 a2')              # The first term and last term of the sequence\n    \n    # Equations based on the sum of an arithmetic sequence formula: sum = n/2 * (first_term + last_term)\n    equation1 = Eq(4 / 2 * (2*a1 + 3*d), 124)  # sum of the first 4 numbers\n    equation2 = Eq(4 / 2 * (2*a2 - 3*d), 156)  # sum of the last 4 numbers\n    \n    # The sum of all the terms in the arithmetic sequence\n    equation3 = Eq(n / 2 * (a1 + a2), 210)\n    \n    # Equation a2 = a1 + (n-1)d because in an arithmetic sequence, each term is the first term plus an integer\n    # multiple of the common difference\n    equation4 = Eq(a2, a1 + (n - 1) * d)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (a1, a2, n, d))\n    \n    # Filtering out the positive integer solutions for the number of terms\n    ans = [sol[n] for sol in solutions if sol[n] > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friends, chocolates = symbols('friends chocolates')\n    \n    equation1 = Eq(friends * 18 + 41, chocolates)\n    equation2 = Eq(friends * 23, chocolates + 34)\n    \n    solutions = solve((equation1, equation2), (friends, chocolates))\n    \n    remaining = solutions[chocolates] - solutions[friends] * 20\n    \n    return remaining\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    spent_on_book = 0.15 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = 0.30 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Check all 3-digit numbers\n    for number in range(100, 1000):\n        # Statement checks\n        checks = [False] * 5\n        checks[0] = number % 27 == 0  # A: multiple of 27\n        checks[1] = number % 7 == 0   # B: multiple of 7\n        checks[2] = sum(int(digit) for digit in str(number)) == 17  # C: sum of digits is 17\n        checks[3] = int(number**0.5) == number**0.5  # D: perfect square\n        checks[4] = 89100 % number == 0  # E: factor of 89100\n\n        # Count the number of statements that are true\n        if checks.count(True) == 3:\n            return number\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    initial_balloons = 40\n    blown_up = 22\n    burst = 3\n    remaining = initial_balloons - (blown_up - burst)\n    \n    return remaining\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Since Mulan can beat even the best boy soldier, the number of push-ups\n    # she can do is more than 50. Hence the inequality is x > 50, where x\n    # is the number of push-ups Mulan can do.\n\n    # Since this is a representation, we do not need to solve the inequality.\n    # We only need to return the inequality in string format.\n    return \"x > 50\"\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    from itertools import combinations\n\n    teams = 32\n    games_played = 30\n\n    total_games = len(list(combinations(range(teams), 2)))\n    games_remaining = total_games - games_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # to give each child a unique amount and minimize the maximum, we must distribute candies\n    # so that each child gets one more than the previous. We start with the minimum number of candies\n    # that we can give to each child, which is 1.\n\n    remaining_candies = 88 - sum(range(1, 9)) # Initial distribution of 1,2,3,...,8 candies to children\n    max_child_candies = 8 + remaining_candies  # We add all remaining candies to the child who gets the most\n\n    return max_child_candies\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B, so now A = 20, B = 16\n\n    # To win the game, Jerry needs to equalize the number of stones in both stacks.\n    # That way, no matter how many stones Tom takes in any subsequent turn,\n    # Jerry can always take the same amount from the other stack, ensuring he takes the last stone.\n\n    # Since Stack B has 4 less stones than Stack A, Jerry must take 4 stones from Stack A\n    # After Jerry's turn, both stacks A and B will have 16 stones.\n\n    stack_to_take_from = 'A'\n    stones_to_take = 4  # Jerry equalizes the stacks by taking 4 stones from Stack A\n\n    return f'Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.'\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    volume_per_pail = 4\n    remaining_water = 7\n\n    original_volume = (pails_filled * volume_per_pail) + remaining_water\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and the number of boys be 9x\n    # According to the problem, there are 16 more boys than girls:\n    # 9x - 7x = 16\n    # Solving for x gives us the value of each part in the ratio\n    x = 16 / (9 - 7)\n\n    # The total number of pupils is the sum of the number of girls and boys\n    total_pupils = 7 * x + 9 * x\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(range(1, 37 * 3, 3))\n    mistake = correct_sum - 2011\n    person = mistake // 6\n    return person + 1  # Because there's an offset by 1 in the count\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundred in range(1, 10):\n        for one in range(10):\n            M = hundred * 100 + one\n            S = hundred + one\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    length_in_cm = 200 # 2 meters == 200 cm\n    piece_length = 6 # 6 cm pieces\n    num_pieces = length_in_cm // piece_length\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    num_balls_total = 10\n    num_balls_chosen = 7\n    return comb(num_balls_total, num_balls_chosen)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Define the first term (smallest number of balls) of the arithmetic sequence\n    first_term = symbols('first_term')\n    \n    # Since there are 5 students, the number of balls the student with the most balls has is first_term + 4\n    # The sum of an arithmetic sequence is (n/2)*(first_term + last_term)\n    # Here, n=5 because there are 5 students, and last_term = first_term + 4 for consecutive numbers\n    sum_of_balls = Eq((5/2) * (2*first_term + 4), 160)\n    \n    # Solve for the first term\n    first_term_solution = solve(sum_of_balls, first_term)\n    \n    # Since we want the student with the most balls, we return first_term + 4\n    return first_term_solution[0] + 4\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    a, b, c = 0, 0, 0\n    # express 13/10 as 1+3/10\n    a = 3\n    # express 10/3 as 3+1/3\n    b = 1\n    # c is just 3 as 3/1 is just 3\n    c = 3\n\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    score_correct = 5\n    score_incorrect = -3\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * score_correct + incorrect_answers * score_incorrect == 52:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    peaches_remaining = 100\n    peaches_eaten = 1  # Start with 1 peach on the first day\n\n    while peaches_remaining >= peaches_eaten:\n        days += 1\n        peaches_remaining -= peaches_eaten\n        peaches_eaten += 1\n\n    return days + (1 if peaches_remaining > 0 else 0)  # Add an extra day if there are any peaches left\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n\n    # Ones digit follows a pattern for the powers of 8: 8, 4, 2, 6 and then repeats\n    # Thus, we can find the ones digit by taking the exponent modulo 4\n    pattern = [8, 4, 2, 6]\n    ones_digit = pattern[(exponent % 4) - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_expression = 0.3 * 100\n    right_expression = 150\n    ans = right_expression / left_expression\n    return ans\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = sum(number for number in range(1, 21) if number % 6 == 1)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # total weight of the solution in grams\n    sugar_concentration = 0.48  # sugar concentration in the solution (48%)\n\n    # Calculate the weight of the sugar\n    sugar_weight = total_weight * sugar_concentration\n\n    # Calculate the weight of the water\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    return 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    total_trees = 100\n    difference = 12\n    # Let's assume the number of trees planted by boys is x. Then, girls planted x + 12 trees.\n    # Therefore, the total number of trees planted by boys and girls is x + (x + 12) = 100\n    # Solving for x gives us the number of trees planted by boys.\n    # 2x + 12 = 100\n    # 2x = 100 - 12\n    # x = (100 - 12) / 2\n    boys_trees = (total_trees - difference) / 2\n    return int(boys_trees)\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let x be the age of the fourth dwarf (middle term)\n    # Then the ages of the youngest three are (x-3), (x-2), and (x-1)\n    # Their sum is given as 42, then we have: (x-3) + (x-2) + (x-1) = 42\n    # Simplifying the equation: 3x - 6 = 42 => 3x = 48 => x = 16\n    # This is the age of the fourth dwarf, and the other three will be: (x+1), (x+2), (x+3)\n    \n    # Now calculate the sum of the ages of the oldest three\n    fourth_age = 16\n    sum_oldest_three = (fourth_age + 1) + (fourth_age + 2) + (fourth_age + 3)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    \n    mean_score = sum(scores) / len(scores)\n    \n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    total = 0\n    for i in range(5):\n        total += (19 * 10**i + 4/5)\n    return total\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d', integer=True)\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n    \n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation)\n    \n    for solution in solutions:\n        if 0 <= solution[a] <= 9 and 0 <= solution[b] <= 9 and \\\n           0 <= solution[c] <= 9 and 0 <= solution[d] <= 9:\n            ans = 1000*solution[a] + 100*solution[b] + 10*solution[c] + solution[d]\n            return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction_to_find = 5 / 8\n    ans = total_pence * fraction_to_find\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n\n    current_total_age = janice_age + sister_age\n    target_total_age = 35\n\n    years_until_target = (target_total_age - current_total_age)\n\n    return years_until_target\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    # Initialize the result to 0.\n    ans = 0\n    # Outer loop for the denominator from 1 to 8.\n    for denominator in range(1, 9):\n        # First sequence: increasing numerator from 1 to denominator.\n        for numerator in range(1, denominator + 1):\n            ans += numerator / denominator\n        # Second sequence: decreasing numerator from denominator - 1 to 1.\n        for numerator in range(denominator - 1, 0, -1):\n            ans += numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    \n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for our variables\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    # Given that 6 fruit drops is 2/7 of milk chocolates\n    fruit_drops = 6\n    equation1 = Eq(milk_chocolates, (7/2) * fruit_drops)\n\n    # Given that the number of milk chocolates is 3/4 of total sweets\n    equation2 = Eq(milk_chocolates, (3/4) * total_sweets)\n\n    # Solving the equations for total_sweets and milk_chocolates\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    # Returning the total number of sweets\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # let x be the cost of one football and y be the cost of one volleyball\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    # Teacher Apple can use $60 to buy 1 football and 2 volleyballs\n    equation1 = Eq(x + 2*y, 60)\n    # If she buys 2 footballs, the cashier will return her $16, so 60 - 16 = 44 is the cost for 2 footballs\n    equation2 = Eq(2*x, 60 - 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Volleyball price is y\n    return solutions[y]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Assume a list of ages sorted in ascending order\n    # We know the mode is 7, so at least two members are 7 years old\n    # The mean is 9 and median is 8, with a range of 6\n    ages = [7, 7, 8, 'x', 'y']  # 'x' and 'y' are unknowns\n    \n    # To satisfy the mean of 9 with total of 5 members: sum(ages) = 9 * 5\n    total_age = 9 * 5\n    \n    # Known sum part\n    known_sum = sum(ages[:3])  # 7+7+8\n    \n    # Rest of the sum for two unknowns (x and y)\n    unknown_sum = total_age - known_sum\n    \n    # Range of ages is 6, therefore, if the youngest age is 7, the oldest is 7+6 = 13\n    # We'll use this to figure out possible values for 'x' and 'y'\n    max_age = 7 + 6\n    \n    # Since 'y' is the older one (2nd oldest member), we iterate through possible values for 'x' (3rd oldest)\n    # starting from age of the median (8) and go up to just before the max_age - 1 (as 'y' must be older than 'x')\n    for second_oldest in range(8, max_age):\n        oldest = unknown_sum - second_oldest\n        if oldest > second_oldest and oldest <= max_age:\n            return second_oldest\n\n    return \"No valid solution found\"\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    return factorial(3)\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n\n    return math.ceil(math.log2(16))\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From the first clue, we know that two digits from 1703 are correct and in the right position\n    # From the second clue, we know that two digits from 2745 are correct but in the wrong position\n    # From the third clue, we know that four digits from 3541 are correct but all in the wrong position\n    \n    # Possible digits for John's number\n    possible_digits = [str(i) for i in range(10)]\n    \n    # Candidates for the solution based on the first clue\n    candidates = []\n    for digit1 in possible_digits:\n        for digit2 in possible_digits:\n            for digit3 in possible_digits:\n                for digit4 in possible_digits:\n                    # Ensure all digits are different\n                    if len({digit1, digit2, digit3, digit4}) == 4:\n                        guess = digit1 + digit2 + digit3 + digit4\n\n                        # Check against clue 1 (1703)\n                        count_correct_position = sum(1 for i, digit in enumerate(guess) if digit == \"1703\"[i])\n                        if count_correct_position != 2:\n                            continue\n\n                        # Check against clue 2 (2745)\n                        count_correct_digit_wrong_position = sum(1 for i, digit in enumerate(\"2745\") if digit in guess and guess[i] != digit)\n                        if count_correct_digit_wrong_position != 2:\n                            continue\n\n                        # Check against clue 3 (3541)\n                        count_correct_digit = sum(1 for digit in \"3541\" if digit in guess)\n                        count_wrong_position = sum(1 for i, digit in enumerate(guess) if digit == \"3541\"[i])\n                        if count_correct_digit == 4 and count_wrong_position == 0:\n                            candidates.append(guess)\n\n    # John's number is the one candidate that matches all clues\n    ans = candidates[0] if candidates else \"No solution found\"\n    \n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # Number of positions for A: 3 (can't be first or last in a line of 5)\n    positions_for_A = 3\n    # Number of positions left for B, C, D, and E after A is placed: 4\n    # And these can be in any order, so we calculate the permutations for these 4 people.\n    permutations_for_others = 4 * 3 * 2 * 1\n    \n    # The total number of ways to line up is\n    total_ways = positions_for_A * permutations_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Number of pink flowers\n    pink = 3\n\n    # Number of yellow flowers\n    yellow = pink + 7\n\n    # Number of red flowers\n    red = 3 * yellow\n\n    # Total number of red and yellow flowers\n    total_red_yellow = red + yellow\n\n    return total_red_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Ratio before removing one apple\n    ratio_before = Eq(apples / oranges, 3 / 8)\n    # Ratio after removing one apple\n    ratio_after = Eq((apples - 1) / oranges, 1 / 3)\n\n    # Solve the system of equations to find the number of apples and oranges\n    solutions = solve((ratio_before, ratio_after), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be from 1 to 9\n        for tens in range(0, 10):  # Tens digit must be from 0 to 9\n            for ones in range(0, 10):  # Ones digit must be from 0 to 9\n                if tens < hundreds and tens < ones and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initialize symbols for number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Given that the number of boys was 50% more than the number of girls in the morning\n    # So, boys = girls + 50% of girls\n    morning_equation = Eq(boys, 1.5 * girls)\n\n    # After 12 boys and 12 girls joined, the ratio became 19:14\n    # So, (boys + 12) / (girls + 12) = 19/14\n    afternoon_equation = Eq((boys + 12) / (girls + 12), 19/14)\n\n    # Solve the simultaneous equations\n    solutions = solve((morning_equation, afternoon_equation), (boys, girls))\n\n    # Find the total number of children in the gardens that afternoon\n    total_children = solutions[boys] + solutions[girls] + 12 + 12\n\n    return total_children\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    scheduled_time = 17 * 60 + 30  # Convert 5:30 pm to minutes (17 hours and 30 minutes after midnight)\n    delay = 30  # Delay in minutes\n    arrival_time_minutes = scheduled_time + delay  # Calculate new arrival time in minutes after midnight\n\n    arrival_hour = arrival_time_minutes // 60\n    arrival_minute = arrival_time_minutes % 60\n\n    return f\"{arrival_hour}:{str(arrival_minute).zfill(2)} pm\"\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n    \n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for table and chair\n    table, chair = symbols('table chair')\n    \n    # Given equations\n    eq1 = Eq(table, 2 * chair)  # table costs two times as much as a chair\n    eq2 = Eq(2 * table + 3 * chair, 280)  # 2 tables and 3 chairs cost $280\n    \n    # Solve the system of equations\n    sol = solve((eq1, eq2), (table, chair))\n    \n    return sol[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    pencils = 0\n    while (48 - pencils * 9) >= 0:\n        if (48 - pencils * 9) % 3 == 0:\n            notebooks = (48 - pencils * 9) // 3\n            if notebooks + pencils == 10:\n                return pencils\n        pencils += 1\n    return \"Not possible\"\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n\n    first_floor_seating = first_floor_rows * seats_per_row\n    second_floor_seating = total_students - first_floor_seating\n\n    return second_floor_seating\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n    next_term = previous_term * common_ratio\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    total = 0\n    add = True\n    for n in range(1, 32):\n        if add:\n            total += n\n        else:\n            total -= n\n        add = not add\n    return total\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for number in range(3, 48):\n        count += str(number).count('7')\n    return count\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    n = 6  # number of terms\n    total_sum = 510\n    mean = total_sum / n\n\n    # Let x be the first term in the sequence.\n    # Since these are consecutive even numbers, they will form an arithmetic sequence.\n    # The terms will be x, x+2, x+4, x+6, x+8, x+10\n    # Their sum is 6x + (2+4+6+8+10) = 510. Hence, 6x = 510 - (2+4+6+8+10)\n\n    sum_of_differences = sum(range(2, 2 * n, 2))\n    x = (total_sum - sum_of_differences) / n\n\n    # The median of an even number of terms is the average of the two middle terms.\n    median = (x + 2 * (n//2 - 1) + x + 2 * (n//2)) / 2\n\n    # Difference between mean and median\n    difference = abs(mean - median)\n    \n    return difference\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    # Let x represent the number of cards exchanged\n    # After several rounds, Helen has 10 more cards than Oliver.\n    # So the equation is: helen_original + x = oliver_original - x + 10\n    # Solve for x\n    x = (helen_original - oliver_original + 10) / 2\n    # The number of cards Helen has now is her original amount plus x\n    helen_now = helen_original + x\n    return helen_now\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_mass = 250\n    sugar_concentration = 0.65\n    sugar_mass = total_mass * sugar_concentration\n    return sugar_mass\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = 31\n    second_climb = 17\n\n    final_height = initial_height + first_climb - first_descent + second_climb\n\n    return final_height\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the mass of strawberries\n    s = symbols('s')\n    \n    # According to the problem \n    # The mass of mangoes is s + 448 at first\n    # After giving away 900g, the mass of mangoes becomes s + 448 - 900\n    # The mass of strawberries is 2 times the mass of remaining mangoes\n    equation = Eq(s, 2 * (s + 448 - 900))\n    \n    # Solve the equation\n    mass_of_strawberries = solve(equation, s)\n\n    return mass_of_strawberries[0]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # Then the consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is 5x + (1+2+3+4) = 5x + 10\n    # According to the problem, this sum is 40\n    # Thus, 5x + 10 = 40\n    # Solving for x gives x = (40 - 10) / 5\n    x = (40 - 10) // 5\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    total_prime_numbers = 25\n    composite_numbers = total_numbers - total_prime_numbers - 1  # Subtract the prime numbers and 1 for the number '1' which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    n = 12 - 4\n    difference = (twelfth_term - fourth_term) / n\n    first_term = fourth_term - (3 * difference)\n    return first_term\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Create all 5-digit numbers using the given digits without repetition\n    digits = '0134689'\n    numbers = [''.join(p) for p in permutations(digits) if p[0] != '0']  # Exclude numbers starting with 0\n\n    # Filter numbers that are multiples of 9\n    multiples_of_9 = [int(n) for n in numbers if int(n) % 9 == 0]\n\n    # Find the largest and smallest multiples of 9\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n\n    # Calculate the result\n    result = (M - N) // 9\n\n    return result\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']  # list of the available digits\n    max_number = int(''.join(sorted(digits, reverse=True)))  # create the largest number by sorting digits in descending order\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000404\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(1, 51):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    actual_addend = 450\n\n    correct_sum = incorrect_sum - (incorrect_addend - actual_addend)\n    return correct_sum\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    v_johnson = 600  # Johnson's speed in m/min\n    v_vicky = 250    # Vicky's speed in m/min\n    distance = 3000  # Total distance in metres\n\n    # Time taken for Johnson to finish the race\n    t_johnson = distance / v_johnson\n    \n    # Time taken for Vicky to finish the race\n    t_vicky = distance / v_vicky\n    \n    # Difference in time\n    time_difference = t_vicky - t_johnson\n\n    return time_difference\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.3 + 20 * 0.2  # Total grams of salt from both solutions\n    target_concentration = 0.1  # Target concentration of the solution\n\n    # Let x be the grams of water to add\n    # The final weight of the solution will be (30 + 20 + x)\n    # The equation for the concentration after adding x grams of water is:\n    # total_salt / (30 + 20 + x) = target_concentration\n    # Solving for x gives us the amount of water needed to add to reach the target concentration\n\n    x = total_salt - target_concentration * (30 + 20)\n    x /= target_concentration\n\n    return x\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "网络故障，请重试"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # You must draw one card of each number to ensure that you have at least one card of each number\n    # So, you'll draw 13 cards to have one of each number\n    # Then you must draw two more cards which could have the same number as any of the previous cards\n    # However, for the worst-case scenario to ensure at least three cards of the same number,\n    # you draw one more card after making pairs of the previous 13\n    # This ensures that the next card will definitely be the third card of some number\n   \n    num_draws = 13 + 1 * 2 + 1  # 13 numbers, one pair of any number, and one more card to ensure three of a kind\n\n    return num_draws\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n    \n    prime_count = 0\n    for num in range(1, 21):\n        if isprime(num):\n            prime_count += 1\n    \n    total_cards = 20\n    proportion = prime_count / total_cards\n    \n    return proportion\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Number of balls we need to pick for worst case by pigeonhole principle\n    # To ensure 29 balls of one color, we must consider picking all but 28 of the other two colors\n    needed_blue = 80 - 28\n    needed_red = 40 - 28\n    needed_white = 30 - 28\n\n    # Now we add one more to ensure we get 29 of at least one color\n    # plus another ball to ensure we get 28 of another color\n    # The last color will have at least 10 balls because it is the minimum number available\n    total_needed = needed_blue + needed_red + needed_white + 1 + 1\n\n    return total_needed\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n\n    sum_of_numbers = mean_value * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the amount of solution transferred from A to B and from B to A\n    x = symbols('x')\n\n    # Initial amount of lime in each bottle\n    lime_in_A_before = 0.10 * 5\n    lime_in_B_before = 0.20 * 3\n\n    # Amount of lime after transfer\n    lime_in_A_after = lime_in_A_before - 0.10*x + 0.20*x\n    lime_in_B_after = lime_in_B_before - 0.20*x + 0.10*x\n\n    # Final volume in each bottle\n    vol_in_A_after = 5 - x + x\n    vol_in_B_after = 3 - x + x\n\n    # Concentration of lime after transfer, which should be equal\n    conc_in_A_after = lime_in_A_after / vol_in_A_after\n    conc_in_B_after = lime_in_B_after / vol_in_B_after\n    \n    # Equation to solve\n    equation = Eq(conc_in_A_after, conc_in_B_after)\n\n    # Solve the equation\n    solution_volume = solve(equation, x)\n\n    return solution_volume[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_from_1_to_50 = 1275\n    substract_first_term = sum_from_1_to_50 - 1\n    add_last_term = substract_first_term + 51\n    return add_last_term\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    for perm in permutations(students):\n        if perm.index('C') in range(perm.index('A')+1, perm.index('B')) or perm.index('C') in range(perm.index('B')+1, perm.index('A')):\n            if abs(perm.index('D') - perm.index('E')) == 1 and abs(perm.index('F') - perm.index('G')) == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    unique_combinations = set()\n\n    for notebook in notebook_prices:\n        for calendar in calendar_prices:\n            unique_combinations.add(notebook + calendar)\n\n    return len(unique_combinations)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    num_rows = -(-students // tables_per_row)  # Ceiling division\n    return num_rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    digit_sum = 0\n    for i in range(1, 124):\n        digit_sum += int(\"123\" * i)\n\n    # Extract the hundreds digit from the digit_sum\n    hundreds_digit = (digit_sum // 100) % 10\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total = sum(coins)\n    half_total = total // 2\n\n    for coin in coins:\n        if total - coin == 2 * (half_total - coin):\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using Inclusion-Exclusion Principle\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # |A ∩ B| = |A| + |B| - |A ∪ B|\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan finished the race\n    kane_distance = jaan_distance - 12.5  # Kane was 12.5m behind\n    jaan_speed = 8  # Jaan's speed was 8m/s\n\n    # Time taken for Jaan to finish the race\n    jaan_time = jaan_distance / jaan_speed\n\n    # Kane's speed (distance divided by the same time because they started at the same time)\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "from math import floor\n\ndef solution():\n    # Given ratio of the painting's length to breadth is 5:2\n    ratio_length = 5\n    ratio_breadth = 2\n\n    # Given length of the painting\n    original_length = 90  # in cm\n\n    # Determine the breadth of the original painting using the ratio\n    original_breadth = (original_length / ratio_length) * ratio_breadth\n\n    # Given that the length of the lego has to be 70.5 cm smaller\n    lego_length_smaller = 70.5  # in cm\n    lego_length = original_length - lego_length_smaller  # new length of the lego\n\n    # To maintain the same proportion of the lego to the painting\n    # the ratio of lego's length to breadth should also be 5:2\n    lego_breadth = (lego_length / ratio_length) * ratio_breadth\n    \n    # But the breadth of the lego has to be an integer as it's a count of lego pieces\n    # So we take the floor of the lego_breadth to get the maximum size\n    max_breadth = floor(lego_breadth)\n    \n    return max_breadth\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p is £1.10\n\n    total_price = cake_price + milk_price\n    actual_pay = total_price - voucher\n\n    return actual_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35\n    total = 60\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1 + 1/4\n    normal_hours = 8\n    total_hours_worked = 10\n    overtime_hours = total_hours_worked - normal_hours\n    \n    overtime_rate = normal_rate * overtime_multiplier\n    normal_pay = normal_hours * normal_rate\n    overtime_pay = overtime_hours * overtime_rate\n    \n    total_pay = normal_pay + overtime_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n    equation1 = Eq(elder + younger, 42)  # The sum of their ages is 42.\n    equation2 = Eq(younger - (elder - younger), elder / 2)  # Few years ago relationship.\n    \n    solutions = solve((equation1, equation2), (elder, younger))\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the rates\n    john_rate, raj_rate, pete_rate = symbols('john_rate raj_rate pete_rate')\n\n    # Equations based on the problem\n    # They can finish the job in 1 hour means total rate is 1 job/hour\n    eq1 = Eq(john_rate + raj_rate + pete_rate, 1)\n\n    # John and Raj can finish the job in 1 hour 12 minutes (1.2 hours),\n    # so their combined rate is 1 job/1.2 hours\n    eq2 = Eq(john_rate + raj_rate, 1 / (1 + 12/60))\n\n    # Raj and Peter can finish in 1 hour 30 minutes (1.5 hours),\n    # so their combined rate is 1 job/1.5 hours\n    eq3 = Eq(raj_rate + pete_rate, 1 / (1 + 30/60))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (john_rate, raj_rate, pete_rate))\n\n    # Find the time Raj takes, which is 1 divided by Raj's rate, converted to minutes\n    raj_time_hours = 1 / solutions[raj_rate]\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure we get at least 3 of the same colour, we must consider the worst-case scenario:\n    # We keep drawing balls of different colours until we are forced to pick 3 of the same colour.\n    # Take 2 white (2), then take 2 more balls for each remaining colors (because taking 3 would already satisfy our condition)\n    # So: 2 white, 2 blue, 2 green (and we can ignore the orange balls because we just need 3 of any color)\n    # Then, the next ball we draw must be the third of some colour.\n    \n    # The maximum number taken before we have three of the same colour:\n    # 2 (white) + 2 (blue) + 2 (green) + 1 (any) = 7\n    num_balls = 2 + 2 + 2 + 1\n\n    return num_balls\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number that satisfies the following system of congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for original_number in range(10, 100):\n        tens = original_number // 10\n        units = original_number % 10\n        new_number = units * 10 + tens\n        if new_number == (original_number // 3) + 3:\n            return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kilograms = 66.5\n    kilograms_per_box = 14 / boxes_for_14kg\n\n    total_boxes_needed = total_kilograms / kilograms_per_box\n\n    return int(total_boxes_needed)\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from math import sqrt\n\n    # Since each team plays each other team twice, the total number of games\n    # is n*(n-1), where n is the number of teams.\n    # The equation to solve is n*(n-1) = 2*total_matches\n    # Simplifying the equation: n^2 - n - 2*total_matches = 0\n    total_matches = 30  # Given number of matches\n\n    # Calculate discriminant\n    discriminant = 1 + 8 * total_matches\n    # Calculate number of teams using positive root of quadratic equation\n    n = (1 + sqrt(discriminant)) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years after which their sum of ages will be 40.\n    # Their current sum of ages is 34, so after x years, each will be x years older.\n    # Therefore, the sum of their ages after x years will be 34 + 2x = 40.\n    \n    # Solving the equation for x.\n    x = (40 - 34) // 2  # Integer division is used as age should be whole number\n    \n    return x\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    min_participants_same_country = 5\n    max_participants_without_same_country = (min_participants_same_country - 1) * countries\n    min_participants_to_ensure_same_country = max_participants_without_same_country + 1\n    \n    return min_participants_to_ensure_same_country\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    \n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the rope\n    x = symbols('x')\n    \n    # Equation for 10 turns: 10x - 3 = total length of the rope\n    # Equation for 12 turns: 12x + 3 = total length of the rope\n\n    equation1 = Eq(10*x - 3, 12*x + 3)\n    \n    # Solve for the length of the rope\n    total_length = solve(equation1)[0]\n\n    # Calculate the length left after 8 turns\n    length_left_8_turns = total_length - 8*x\n\n    return length_left_8_turns.subs(x, total_length / 10)\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0:  # leading digit shouldn't be zero\n            if 10*A + B + 10*C + D == 10*B + A + 10*D + C:\n                return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_four_digit_numbers = 1999 - 1000 + 1\n    numbers_greater_than_1499 = 1999 - 1499\n    probability = numbers_greater_than_1499 / total_four_digit_numbers\n    return probability\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    original_number = (final_number - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    spent_on_bag = total_money * 3 / 7\n    remaining_money = total_money - spent_on_bag\n    \n    equation = Eq(spent_on_bag - remaining_money, 12)\n    \n    solved_total_money = solve(equation, total_money)\n    \n    return float(spent_on_bag.subs(total_money, solved_total_money[0]))\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The number is composed of the sequence 928 repeated, so each segment (928) sums to 19\n    digit_sum_segment = 9 + 2 + 8\n\n    # Since the number has 99 digits, there are 99 / 3 = 33 segments of '928'\n    total_digits = 99\n    segment_length = 3\n    num_segments = total_digits // segment_length\n    \n    # Calculate the total sum of the digits\n    total_digit_sum = digit_sum_segment * num_segments\n    \n    # The remainder when the sum of the digits of a number is divided by 9 is the same\n    # as the remainder when the number itself is divided by 9 (by divisibility rules)\n    remainder = total_digit_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    base = 111\n    dot_value = 7\n    ans = base - sum(range(1, dot_value))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    sum_squares = lambda n: (n * (n + 1) * (2 * n + 1)) // 6\n\n    ans = sum_squares(100 // 5) - sum_squares(0)\n    \n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers_total, pupils = symbols('stickers_total pupils')\n\n    equation1 = Eq(13*pupils + 190, stickers_total)\n    equation2 = Eq(17*pupils + 50, stickers_total)\n\n    solutions = solve((equation1, equation2), (stickers_total, pupils))\n\n    return solutions[stickers_total]\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x.\n    # The ages are then x, x+1, x+2, ..., x+6 being the oldest\n    # The sum of the ages of the youngest three dwarfs is 3x + 3 (from x + (x+1) + (x+2) = 3x + 3)\n    # According to the problem, 3x + 3 = 42.\n    # We can solve for x.\n    x = (42 - 3) // 3\n\n    # Now we find the sum of the ages of the oldest three dwarfs.\n    # Their ages are (x+4), (x+5), and (x+6).\n    oldest_three_sum = (x + 4) + (x + 5) + (x + 6)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoins = 5.04\n\n    months_needed = debt_in_bitcoins / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 500)\n    equation2 = Eq(girls, boys + 30)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # Create equations based on the provided information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations for the costs\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    # Find the total cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_mean\n    new_total_sausages = total_initial_sausages + additional_sausages\n    new_total_trays = initial_trays + 1\n    new_mean = new_total_sausages / new_total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = (3 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit ranges from 1 to 9\n        for tens in range(0, 10):  # Tens digit ranges from 0 to 9\n            for units in range(1, 10):  # Units digit ranges from 1 to 9\n                # Tens digit should be less than hundreds and units digit\n                if tens < hundreds and tens < units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    equal_amount = (rani + brenda) / 2\n    amount_to_give = brenda - equal_amount\n\n    return amount_to_give\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for blue and red balls\n    blue, red = symbols('blue red')\n    \n    # Equation based on the description\n    equation1 = Eq((2/5) * blue, (3/5) * red)\n    equation2 = Eq(blue + red, 125)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (blue, red))\n    \n    # Calculate how many more blue balls than red balls\n    more_blue_balls = solutions[blue] - solutions[red]\n    \n    return more_blue_balls\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Let x be the length of the second bridge.\n    # For the first bridge scenario, the total distance covered by the train\n    # is the length of the train plus the length of the bridge.\n    distance_first_bridge = 137 + 263\n    \n    # It takes the train 20 seconds to cover this distance.\n    # Thus the speed of the train can be calculated as:\n    speed = distance_first_bridge / 20  # speed = (length of train + length of first bridge) / time\n    \n    # Now, for the second bridge, it takes 27 seconds for the train to cross.\n    # The same speed is assumed, so we can express the total distance\n    # covered while crossing the second bridge as:\n    # distance = speed * time\n    distance_second_bridge = speed * 27  # distance = speed * time\n    \n    # The length of the second bridge will be this total distance minus the train's length.\n    length_second_bridge = distance_second_bridge - 137\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    # Calculate the total cost of 2 such watches and 2 such handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Assign one piece to each child initially. This ensures each child gets at least one piece.\n    total_candies = 88 - 8\n\n    # The least possible number for the child with the most pieces will be when the rest get as many as possible\n    # in increasing order, which is the triangular number T(n-1) for n - 1 children.\n    # T(n-1) = (n-1)(n)/2. We solve for T(7) since we are excluding the child with the most candies.\n    triangular_number = (7 * 8) // 2\n\n    # The remaining candies will be for the child with the most\n    # Subtract the triangular number from the remaining candies \n    child_with_most = total_candies - triangular_number\n\n    return child_with_most\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Since there are 7 different books and each student needs to get at least one book,\n    # we first choose 1 book for each of the 3 students.\n    # There are C(7,3) ways to choose 3 different books from 7.\n\n    # After giving out 3 books, there are 4 books left.\n    # Now, we distribute these among the three students where each one can get any number of books.\n    # This is a problem of distributing n indistinguishable items into r distinguishable boxes,\n    # which is equivalent to the number of ways to put n + r - 1 indistinguishable items into n distinguishable boxes.\n\n    # For our problem, we distribute 4 books among 3 students, which is equivalent to putting 4 indistinguishables into 3 distinguishables.\n    # The formula for this distribution is C(n + r - 1, r - 1), so in our case C(4 + 3 - 1, 3 - 1)\n\n    ways_to_choose_3_books = factorial(7) // (factorial(3) * factorial(7 - 3))\n    ways_to_distribute_remaining_4_books = factorial(4 + 3 - 1) // (factorial(3 - 1) * factorial(4))\n\n    # The final answer is the multiplication of the two ways.\n    ans = ways_to_choose_3_books * ways_to_distribute_remaining_4_books\n    return ans\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "from itertools import permutations\n\ndef solution():\n    # Assume that the four individuals are A, B, C, and D\n    individuals = ['B', 'C', 'D'] # Excluding A as the ball must return to A after 3 passes\n    total_methods = 0\n\n    # Generate all possible permutations of 3 passes among B, C, and D\n    for sequence in permutations(individuals, 3):\n        # A passes to the first in the sequence, the second item in the sequence receives the ball second and\n        # the third item receives the ball third. Then it would be passed back to A to make a total of 3 passes.\n        # Therefore, the ball makes a round without returning to A until the very end.\n        total_methods += 1\n\n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    \n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Year when grandmother was 80\n    grandmother_age_80_year = 2008\n    \n    # Grandmother's age when she was 80\n    grandmother_age_80 = 80\n    \n    # Year when daughter was 40\n    daughter_age_40_year = 1996\n    \n    # Daughter's age when she was 40\n    daughter_age_40 = 40\n    \n    # The difference in years between the times each was at the mentioned ages\n    year_difference = grandmother_age_80_year - daughter_age_40_year\n    \n    # Therefore, the grandmother's age when the daughter was 40\n    grandmothers_age_when_daughter_40 = grandmother_age_80 - year_difference\n    \n    # Grandmother's age when daughter was born is the grandmother's age when daughter was 40 minus the daughter's age at that time\n    grandmother_age_when_daughter_born = grandmothers_age_when_daughter_40 - daughter_age_40\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n\n    equation1 = Eq(mike_candy - valeria_candy, 6 - 22)\n    equation2 = Eq(mike_candy + valeria_candy, 36)\n\n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300  # Total weight of the solution in grams\n    sugar_concentration = 0.35  # Sugar concentration (35%)\n\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Total amount of salt Leroy has\n    leroy_salt = 200 * 0.35\n    # Total amount of salt Lenny has\n    lenny_salt = 300 * 0.50\n    # Total weight of the mixed solution\n    total_weight = 200 + 300\n    # Total amount of salt in the mixed solution\n    total_salt = leroy_salt + lenny_salt\n    # Concentration of the salt in the mixed solution\n    concentration = (total_salt / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Total people excluding A and B\n    total_individuals = 8 - 2  \n    # A and B together as a unit\n    total_units = total_individuals - 2 + 1  \n    # Total permutations of units and individual people\n    total_permutations = factorial(total_units) \n    \n    # Permutations of A and B since they can stand in two ways (AB or BA)\n    ab_permutations = 2  \n\n    # Permutations of the rest of the people excluding C and D\n    other_permutations = factorial(total_individuals - 2)\n    \n    # Calculate number refusing to stand next to each other\n    refuse_permutations = 0\n    for i in range(total_individuals - 1):\n        refuse_permutations += factorial(i) * factorial(total_individuals - 1 - i)\n    \n    # Multiplying the different sets of permutations together\n    ans = total_permutations * ab_permutations * (other_permutations - refuse_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    first_calculation = psi_operation(14, 13)\n    ans = psi_operation(first_calculation, 12)\n\n    return ans\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    k = symbols('k', real=True)\n    equation = Eq(12**50, k**75)\n    solutions = solve(equation, k)\n\n    # Return the largest whole number k\n    return int(solutions[1])\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    count = 0\n    for i in range(1, 20):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_count = 133\n    thrown_away = 34\n    bought = 25\n    \n    initial_count = final_count - bought + thrown_away\n    \n    return initial_count\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 36 - boys\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    number_of_girls = solve(equation, girls)[0]\n\n    return number_of_girls\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for cats, dogs, and rabbit\n    legs_cats = 2 * 4\n    legs_dogs = 2 * 4\n    legs_rabbit = 1 * 4\n\n    # Total legs excluding birds\n    total_legs_excluding_birds = legs_cats + legs_dogs + legs_rabbit\n\n    # Total legs including birds, birds have 2 legs each (x represents the number of birds)\n    total_legs = 28\n\n    # Calculate the number of birds\n    num_birds = (total_legs - total_legs_excluding_birds) / 2\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_1_to_5 = 12 # minutes\n    time_available = 30 # minutes\n    flights_in_12_minutes = 5 - 1 # from the first to the fifth floor is 4 flights\n    \n    flights_in_30_minutes = (flights_in_12_minutes * time_available) // time_for_1_to_5\n    \n    return flights_in_30_minutes\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_21_6_grams = cookies_per_gram * 21.6\n    return cookies_with_21_6_grams\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Hours taken by 5 people to paint the original fence\n    original_hours = 6\n    \n    # Length of neighbour's fence in multiples of the original fence\n    neighbour_fence_length_multiple = 2 \n\n    # Desired completion time for neighbour's fence\n    desired_hours = 5\n\n    # Work is directly proportional to the length of the fence\n    # and inversely proportional to the number of people\n    # Let's denote the minimum number of people needed as x\n    # (Number of people for original fence * hours for original fence * neighbour fence length multiple) / desired hours\n    # We look for x such that:\n    # 5 people * 6 hours * 2 = x people * 5 hours\n    # Therefore, x = (5 * 6 * 2) / 5 = 12\n\n    min_people = (5 * original_hours * neighbour_fence_length_multiple) / desired_hours\n    \n    # Returning the minimum number of people required as an integer\n    return int(min_people)\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the octal number 12345654321 to a decimal number\n    N = int(\"12345654321\", 8)\n    \n    # Calculate the remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Calculate the sum of the remainders\n    ans = remainder_7 + remainder_9\n    \n    return ans\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    # Three years ago and in four years, a total of 7 years will pass for each cat\n    years_passed_for_each_cat = 3 + 4\n    # Since there are two cats, we multiply by 2 to account for both\n    combined_age_future = combined_age_past + (years_passed_for_each_cat * 2)\n    return combined_age_future\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the handbag, wallet, and belt\n    handbag, wallet, belt = symbols('handbag wallet belt')\n\n    # Handbag costs $300 more than the wallet\n    equation1 = Eq(handbag, wallet + 300)\n    \n    # Wallet costs $54 more than the belt\n    equation2 = Eq(wallet, belt + 54)\n    \n    # The total cost is $840\n    equation3 = Eq(handbag + wallet + belt, 840)\n    \n    # Solve the system of equations for the cost of the belt\n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(2*book + 3*magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the equations for the price of one book and one magazine\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import divisors, is_square\n\n    d = divisors(2016)\n    count = sum(1 for x in d if is_square(x))\n    \n    return count\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_n = (n * (n + 1)) // 2\n    ans = sum_of_squares + sum_of_n\n    return ans\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let b = big pail capacity, s = small pail capacity\n    b, s = symbols('b s')\n\n    # 3 big pails and 4 small pails hold 68 litres of water\n    equation1 = Eq(3 * b + 4 * s, 68)\n    \n    # 4 big pails and 2 small pails hold 64 litres of water\n    equation2 = Eq(4 * b + 2 * s, 64)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (b, s))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and ((A * 100 + B * 10 + A) + (C * 100 + D * 10 + C)) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the smallest of the three numbers be n. \n    # Then the consecutive numbers are n, n+1, and n+2.\n    # Their sum is 3n + 3, and it is given that the sum is 60.\n    # So the equation is 3n + 3 = 60.\n\n    # Solving for n:\n    n = (60 - 3) // 3\n\n    # The largest of the three numbers is n+2:\n    return n + 2\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Count of each color shirt in the closet\n    orange = 6\n    yellow = 10\n    pink = 4\n    brown = 12\n    \n    # We need to take out at least all shirts of other colors \n    # to be sure to get 1 yellow shirt (worst-case scenario)\n    must_take_out = orange + pink + brown + 1\n\n    return must_take_out\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = total_pens_needed / 8\n\n    return -(-total_pens_needed // 8)  # Ceiling division to get the packs needed\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Convert mixed fractions to improper fractions and sum them\n    total = (49/5) + (499/5) + (999/5) + (14999/5) + (199999/5) + 1\n    \n    # Calculate the answer\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # The difference between 94 and 80 is 14\n    # The difference between 80 and 73 is 7\n    # It seems like the differences are reducing by half each time.\n    # Let's find the difference before 80 and 94 and divide that by 2.\n    # Then we subtract that number from 94 to find the missing number in the sequence.\n    \n    difference = (94 - 80) // 2  # Dividing the difference by 2\n    missing_number = 94 - difference\n    \n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences to solve is as follows:\n    # age ≡ 1 (mod 2)\n    # age ≡ 1 (mod 3)\n    # age ≡ 1 (mod 4)\n    # age ≡ 1 (mod 6)\n    # age ≡ 0 (mod 7)\n    # Using the Chinese Remainder Theorem with the given congruences\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # solve_congruence function returns a tuple where the first element is the solution\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_back = total_people - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of powers of 2 cycles every 4 steps as: 2, 4, 8, 6\n    # Since we only need the last digit of 2 raised to the power 859433\n    # We find where 859433 lies in the cycle by taking 859433 mod 4\n    power_mod_cycle = 859433 % 4\n    \n    # Now we map the modulo result to the cycle of the last digits of powers of 2\n    # The cycle is [2, 4, 8, 6], so the positions are 0 for 2, 1 for 4, 2 for 8, 3 for 6\n    last_digit_cycle = [2, 4, 8, 6]\n    \n    # Get the last digit from the cycle\n    last_digit = last_digit_cycle[power_mod_cycle - 1]  # -1 because list index starts at 0\n\n    return last_digit\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    # Given the equation 4 * n = 36 / 3\n    # Solving for n\n    n = (36 / 3) / 4\n\n    return n\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    # The ratio of avocados to peaches to lemons is 2:9:8, let's denote the common ratio factor as x.\n    # So, initially we have 2x avocados, 9x peaches, and 8x lemons.\n    # According to the problem, after selling 52 avocados, 12 peaches, and 60 lemons,\n    # the ratio of peaches to lemons becomes 6:5.\n    # If original number of peaches is 9x and lemons is 8x,\n    # after selling, we have 9x - 12 peaches and 8x - 60 lemons.\n\n    # Setting up equation based on the ratio after selling fruits:\n    # (9x - 12) / (8x - 60) = 6 / 5\n    # Solving for x:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((9*x - 12) / (8*x - 60), 6/5)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    # Since x is the common ratio factor, take the positive solution for a practical situation\n    x_value = [val for val in x_value if val > 0][0]\n\n    # Calculate the number of each fruit left in the stall\n    avocados_left = 2*x_value - 52  # Original number of avocados minus those sold\n    peaches_left = 9*x_value - 12   # Original number of peaches minus those sold\n    lemons_left = 8*x_value - 60    # Original number of lemons minus those sold\n\n    # Calculate the total number of avocados, peaches, and lemons left in the stall\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count = 0\n    for i in range(1, 61):  # Iterate through numbers called out by students\n        is_multiple_of_3 = i % 3 == 0\n        is_multiple_of_5 = i % 5 == 0\n        \n        # A student ends up facing the teacher if they turn around an odd number of times\n        if is_multiple_of_3 and not is_multiple_of_5:  # Turning around for multiple of 3 only\n            count += 1\n        elif not is_multiple_of_3 and is_multiple_of_5:  # Turning around for multiple of 5 only\n            count += 1\n        elif is_multiple_of_3 and is_multiple_of_5:  # Turning around for both 3 and 5, will end up back facing the teacher\n            count += 0\n        else:  # Not turning around at all\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm\n\n    # The least common multiple of 2, 4, and 6\n    lcm_2_4_6 = lcm(2, 4, 6)\n\n    # Peter's age is of the form lcm_2_4_6 * k + 1\n    # Let's try finding the smallest k such that age % 7 == 5\n    k = 0\n    while True:\n        age = lcm_2_4_6 * k + 1\n        if age % 7 == 5:\n            return age\n        k += 1\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n    \n    # before sharing:\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # after sharing:\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # total sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    # We will start with largest cards and go down\n    for i in range(7, 0, -1):\n        # Generate all permutations\n        perms = permutations(range(1, i+1))\n        # Check each permutation for divisibility\n        for perm in perms:\n            num = int(''.join(map(str, perm)))\n            if all(num % d == 0 for d in perm):\n                return num\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    count = 0\n    max_length = 0\n    for start in range(1, 900, 2):\n        sum = 0\n        length = 0\n        for n in range(start, 900, 2):\n            sum += n\n            length += 1\n            if sum == 900:\n                max_length = max(max_length, length)\n                break\n            elif sum > 900:\n                break\n    return max_length\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Iterating through two-digit numbers\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    dividend = 120\n\n    quotient = (dividend // divisor) + 1\n    smallest_number = (quotient * divisor) + remainder\n    \n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A, B, and C be the weights of Adam, Ben, and Carl respectively\n    # From the problem we have the following equations:\n    # A + B = 102 (Adam and Ben)\n    # B + C = 97  (Ben and Carl)\n    # A + C = 93  (Adam and Carl)\n\n    # Adding all these equations we get 2*(A + B + C) = 102 + 97 + 93\n    total_weight_double = 102 + 97 + 93\n\n    # The total weight of Adam, Ben, and Carl is then\n    ans = total_weight_double / 2\n    return ans\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    min_value = min(numbers)\n    return min_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    meters = 2\n    centimeters = 2\n\n    height_in_meters = meters + (centimeters / 100)\n\n    return height_in_meters\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score_increase = 0.25\n    third_test_score_decrease = 0.20\n\n    second_test_score = first_test_score + first_test_score * second_test_score_increase\n    third_test_score = second_test_score - second_test_score * third_test_score_decrease\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pupils = symbols('pupils')\n    bookmarks = symbols('bookmarks')\n\n    # If each pupil gets 4 bookmarks, 8 remain\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    # If each pupil gets 6 bookmarks, he is short of 10\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n \n    # Solve the equations for the number of bookmarks\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january = 13\n    february = 18\n    march = 5\n    \n    mean_saving = (january + february + march) / 3\n    return mean_saving\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    return 233 in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229}\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    # Find the specified terms: 7, 14, 21, ..., 105\n    # They are a multiple of 7. The first term is 7^2 and the last term is 105^2\n    # First, find the number of terms in the sequence\n    # The common difference d in this sequence is 7 (since each term is 7 more than the previous one)\n    # The sequence is an arithmetic sequence where a_n = a_1 + (n-1)d\n    # To find n (the number of terms), solve 105 = 7 + (n-1)*7\n    # So, n = (105 - 7) / 7 + 1\n    n = (105 - 7) / 7 + 1\n    \n    # Now that we have the number of terms, we can sum the squares of the terms\n    # The sum of squares of the first n terms of the sequence 7, 14, ..., 7n is given by\n    # the formula: 7^2 * n * (n+1) * (2n+1) / 6, since 7k^2 = 7^2 * k^2 and sum of squares of first n natural numbers is n(n+1)(2n+1)/6\n    ans = 7**2 * n * (n + 1) * (2 * n + 1) / 6\n    \n    return int(ans)\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(130, 151))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Hours with '4': 04, 14\n    # Minutes with '4': 04, 14, 24, 34, 44, 54\n    # Times within an hour where there is at least two '4's: 04:04, 04:14, ..., 04:54\n    # But 14:04, 14:14, ..., 14:54 cannot be counted again since they have been counted once already\n\n    # Count occurances for 04 and 14 each\n    for hour_prefix in [0, 1]:\n        for minute_tens in range(6):\n            for minute_ones in range(10):\n                if hour_prefix == 0 and minute_tens == 4: # e.g., 04:4x\n                    count += 1\n                elif hour_prefix == 1 and minute_ones == 4: # e.g., 14:x4\n                    count += 1\n                elif hour_prefix == 1 and minute_tens == 4: # e.g., 14:4x, avoid double count\n                    continue\n                else:\n                    if '4' in str(minute_tens) or '4' in str(minute_ones):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Correcting Sam's method to find multiples of 4 between 56 to 92 (inclusive)\n    # Calculate multiples of 4 up to and including 92\n    multiples_up_to_92 = 92 // 4\n    \n    # Calculate multiples of 4 less than 56\n    multiples_less_than_56 = (56 - 1) // 4\n    \n    # Subtract multiples less than 56 from multiples up to and including 92 to get the number of multiples between 56 and 92\n    correct_count = multiples_up_to_92 - multiples_less_than_56\n    \n    # Sam's answer\n    sam_answer = 9  # As per the given working\n    \n    # Check if Sam's answer is correct\n    is_sam_correct = sam_answer == correct_count\n    \n    # Return the tuple (Is Sam correct, Correct count of multiples)\n    return (is_sam_correct, correct_count)\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Given data\n    distance = 144  # distance between Magic Town and Super Town in km\n    speed_in_still_water = 15  # speed of the ship in still water in km/h\n    downstream_time = 8  # time taken to travel downstream in hours\n\n    # Calculate the speed of the current using the downstream data\n    downstream_speed = distance / downstream_time  # speed of the ship downstream in km/h\n    current_speed = downstream_speed - speed_in_still_water  # speed of the current in km/h\n\n    # Calculate the speed of the ship upstream\n    upstream_speed = speed_in_still_water - current_speed  # speed of the ship upstream in km/h\n\n    # Calculate the time taken to come back upstream\n    upstream_time = distance / upstream_speed  # time to come back upstream in hours\n\n    return upstream_time\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_selected = 2\n    return comb(num_students, num_selected)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo, kangaroo = symbols('hippo kangaroo')\n\n    equation1 = Eq(hippo, kangaroo + 45)\n    equation2 = Eq(20 * hippo, 10 * 20 * kangaroo)\n\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n\n    return solutions[hippo] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    meeting_time = datetime.strptime('3:15 PM', '%I:%M %p') + wait_time\n    return meeting_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    a_rate = 1 / 15\n    b_rate = 1 / 20\n    work_done = 2 * (a_rate + b_rate)\n    remaining_work = 1 - work_done\n    days_for_a_to_finish = remaining_work / a_rate\n    return days_for_a_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # If we take one green and one blue, we have not ensured the same colour.\n    # The next ball we take, regardless of its colour, will ensure that we have\n    # at least two balls of the same colour.\n    # Therefore, we need to take 1 green + 1 blue + 1 more ball of any colour.\n    return 1 + 1 + 1\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    students_to_guarantee = (zodiac_signs - 1) * 10 + 1\n    return students_to_guarantee\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    ans += sum(2/i for i in range(3, 21))\n    ans += sum(3/i for i in range(4, 21))\n    ans += sum(4/i for i in range(5, 21))\n    ans += sum(5/i for i in range(6, 21))\n    ans += sum(6/i for i in range(7, 21))\n    ans += sum(7/i for i in range(8, 21))\n    ans += sum(8/i for i in range(9, 21))\n    ans += sum(9/i for i in range(10, 21))\n    ans += sum(10/i for i in range(11, 21))\n    ans += sum(11/i for i in range(12, 21))\n    ans += sum(12/i for i in range(13, 21))\n    ans += sum(13/i for i in range(14, 21))\n    ans += sum(14/i for i in range(15, 21))\n    ans += sum(15/i for i in range(16, 21))\n    ans += sum(16/i for i in range(17, 21))\n    ans += sum(17/i for i in range(18, 21))\n    ans += sum(18/i for i in range(19, 21))\n    ans += 19/20\n    return ans\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using the Pigeonhole principle\n\n    # possible worst-case scenario without getting 10 balls of the same colour:\n    # take 9 yellow, 9 white, and 9 black balls\n    worst_case_without_10_same_color = 9 + 9 + 9\n\n    # To ensure that the next ball will be the 10th ball of the same colour\n    # we have to add 1 more to the worst case scenario without having 10 of the same colour\n    balls_to_take_for_10_same_color = worst_case_without_10_same_color + 1\n\n    return balls_to_take_for_10_same_color\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n    \n    last_seat = (start_seat + total_candies - 1) % total_children\n    return last_seat if last_seat != 0 else total_children\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        perm = ''.join(perm)\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n           perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B'):\n            if 'DE' in perm or 'ED' in perm:\n                if 'FG' not in perm and 'GF' not in perm:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    \n    # Using the Inclusion-Exclusion Principle\n    min_both = children_with_dogs + children_with_cats - total_children\n    \n    return min_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Using formula for the sum of the first n terms of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    total_sum = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of 7 and 3\n    days_until_next = lcm(7, 3)\n\n    # Return the next date she will eat them both on the same day\n    return days_until_next\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    sum_of_numbers = 0\n    for x in range(1, 101):\n        for y in range(1, 101):\n            sum_of_numbers += x * y\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    numbers = [12, 145, 32, 77, 62]\n    ans = max(numbers) - min(numbers)\n    return ans\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    number_of_months = 3\n    total_saving = monthly_saving * number_of_months\n    return total_saving\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # Natalie had 36 fewer shirts than skirts\n    equation1 = Eq(shirts, skirts - 36)\n    # After selling, she had 72 shirts and skirts left\n    equation2 = Eq((2/3)*shirts + (5/6)*skirts, 72)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    num_cloaks_length = material_length // cloak_length\n    num_cloaks_width = material_width // cloak_width\n\n    total_cloaks = num_cloaks_length * num_cloaks_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    distance = 120\n    expected_avg_speed = 30\n\n    time_to_go = distance / 20  # Time taken to go 120 miles at 20 mph\n    total_time_for_round_trip = (2 * distance) / expected_avg_speed  # Total time for a 240-mile round trip at 30 mph\n\n    return_time = total_time_for_round_trip - time_to_go  # Time left for the return journey\n    return_speed = distance / return_time  # Speed needed for the return journey\n\n    return return_speed\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes for the man to make one cut to divide the rod into two.\n    # To cut into 5 pieces, we need 4 cuts in total.\n    total_minutes = 2 * 4\n    return total_minutes\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The conditions can be translated into the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Using the Chinese Remainder Theorem to solve the congruences\n    ans, _ = solve_congruence(*congruences)\n    \n    # Since we want a number between 400 and 800, we need to find a multiple of\n    # the least common multiple of 5, 6, and 11 that falls within that range\n    while ans < 400:\n        ans += 5 * 6 * 11\n\n    return ans if ans <= 800 else None\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # Let x be the number that must be added\n    original_average = 120\n    new_average = 110\n    original_sum = original_average * 3  # The sum of the three numbers\n\n    # The new sum will be the original_sum + x, and the new average will be achieved over 4 numbers:\n    # new_average = (original_sum + x) / 4\n    # Rearrange the equation to solve for x:\n    x = new_average * 4 - original_sum\n\n    return x\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person has\n    sean, jovan, heman = symbols('sean jovan heman')\n    \n    # The equations describing the relationships between the number of marbles\n    eq1 = Eq(jovan, 2 * sean)  # Jovan has twice as many marbles as Sean\n    eq2 = Eq(heman, 3 * jovan)  # Heman has 3 times as many marbles as Jovan\n    eq3 = Eq(jovan, heman - 240)  # Jovan has 240 fewer marbles than Heman\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (sean, jovan, heman))\n\n    # Calculate the total number of marbles\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    last_term = 65\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "网络故障，请重试"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    return 10.25 + 9.2 - 7\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 9\n    num3 = 12\n\n    # Finding GCD of the three numbers\n    ans = gcd(gcd(num1, num2), num3)\n\n    return ans\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900  # Total length of expressway in meters\n    companies = 4  # Number of construction companies\n    days = 5  # Days taken by 4 companies to build the expressway\n\n    # Calculate meters built per company per day\n    meters_per_company_per_day = (total_length / companies) / days\n    \n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price = 78\n    sock_price = 12\n    alien_legs = 5\n    brothers = 5\n\n    total_legs = alien_legs * (brothers + 1)\n    total_shoe_cost = (total_legs // 5) * shoe_price\n    total_sock_cost = total_legs * sock_price\n\n    total_cost = total_shoe_cost + total_sock_cost\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, mode\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n    \n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles), dict=True)\n    total_mass = solutions[0][john] + solutions[0][andy] + solutions[0][charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    ways = (13 + 3 - 1)  # Number of objects plus number of containers minus one\n    # Since some kids might not get any orange, this is an example of stars and bars problem\n    # We are looking for combinations of 13 oranges into 3 parts\n    return math.comb(ways, 13)  # Choose 13 positions to be oranges out of ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of sweets each person has\n    bud, pip, tom = symbols('bud pip tom')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    \n    # Get the value for Tom's sweets\n    return solutions[tom]\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n    \n    products_candy = {a * b for a, b in candy_combinations}\n    products_candice = {a * b * c for a, b, c in candice_combinations}\n    \n    common_products = products_candy.intersection(products_candice)\n\n    for prod in common_products:\n        for num in numbers:\n            if prod % num != 0: \n                return num\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the value of David's $0.50 cookies\n    # Let j represent the number of Jeremy's $0.50 cookies\n    d, j = symbols('d j')\n\n    # David's cookies were cost thrice as much as Jeremy's cookies\n    equation1 = Eq(d, 3 * j * 0.5)\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(j * 0.5, 3/5 * (j + 60) * 0.10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, j))\n\n    # Jeremy's cookies worth = number of Jeremy's $0.50 cookies * $0.50\n    jeremy_cookies_worth = solutions[j] * 0.50\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20\n    distance_between_each_tree = distance_between_first_and_fifth / 4\n    total_distance = 200\n    number_of_intervals = total_distance / distance_between_each_tree\n    total_trees = number_of_intervals + 1\n    return int(total_trees)\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # Combined rate of both taps\n    time_to_fill_half = (1 / 2) / combined_rate  # Time to fill half the tank\n    return time_to_fill_half\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Because the ones digit becomes the first digit after the change,\n    # the change can be represented by a multiplication and addition of the original number.\n    # original_number = ABCD (in digit form, where A, B, C, D are digits)\n    # new_number = DABC \n    # new_number - original_number = 5877\n    # D*1000 + A*100 + B*10 + C - (A*1000 + B*100 + C*10 + D) = 5877\n    # Rearranging gives us:\n    # D*1000 - D + A*100 - A*1000 + B*10 - B*100 + C - C*10 = 5877\n    # Combine like terms gives us:\n    # D*999 - A*900 - B*90 - C*9 = 5877\n    # Dividing both sides by 9 gives us:\n    # D*111 - A*100 - B*10 - C = 653\n    # Let's find a set of (A, B, C, D) that satisfies this equation.\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if D*111 - A*100 - B*10 - C == 653:\n                        # Construct the original number ABCD\n                        original_number = A*1000 + B*100 + C*10 + D\n                        return original_number\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Calculate the original expression\n    original = (36 * 21) / (6 * 7)\n    \n    # Calculate the expression after the mistake\n    after_mistake = 6 * 7 * 21\n    \n    # Check if the answer is correct by comparing the two calculations\n    if original == after_mistake:\n        ans = after_mistake\n    else:\n        # Identify and correct the mistake (the error is in the division priority)\n        correct = 36 / 6 * 21 / 7\n        ans = correct\n        \n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    number_of_apples = total_fruit * fraction_apples\n    number_of_pears = total_fruit - number_of_apples\n    \n    return int(number_of_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    total_students_per_side = int(girls ** 0.5) + 1\n    boys_per_side = total_students_per_side - 1\n    total_boys = boys_per_side ** 2\n    return total_boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_in_8_years = cousin_age_now + 8\n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between_ann_david = 3\n    david_position_from_end = 2\n\n    total_people = ann_position + people_between_ann_david + david_position_from_end\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    page = 1\n    count = 0\n\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Using ratios comparison n:8 = 9:12 can be written as n/8 = 9/12\n    # Then solve for n, n = 8 * (9/12)\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    net_distance_per_day = day_climb - night_slide\n\n    days = 0\n    current_distance = 0\n\n    while True:\n        days += 1\n        current_distance += day_climb  # Snail climbs during the day\n        if current_distance >= total_distance:\n            break  # Snail has reached the top\n        current_distance -= night_slide  # Snail slides down at night\n\n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = (maths_students + art_students) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n    \n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep_hours = 8\n    mary_sleep_hours = lucy_sleep_hours + 2\n    return mary_sleep_hours\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 150 / 100 + 4 * x, 19)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n\n    difference = height_mountain_world - height_mountain_england\n\n    return difference\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Number of balls needed to ensure one color has at least 29 balls, without considering the other colors\n    to_ensure_29 = 29\n    # Number of balls needed to ensure one color has at least 28 balls, on top of 29 of another color\n    to_ensure_28 = 28 + to_ensure_29\n    # Number of balls needed to ensure one color has at least 10 balls, on top of 28 and 29 of the other two colors\n    to_ensure_10 = 10 + to_ensure_28\n    \n    # But we must also consider that we might pick the maximum number of balls from the other colors first\n    # So we need to add the maximum possible of the other two colors before we guarantee 10 of the last color\n    max_other_colors = (80 - 29) + (40 - 28)\n    \n    # Total number of balls to make sure we have 29 of one color, 28 of another, and 10 of the last\n    ans = to_ensure_10 + max_other_colors\n    return ans\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the factorial of any number greater than 9 will always end in 0 because it will include\n    # the factors 10 (or 2 and 5), the last digit of 2014! will be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(1, 50):\n        if (number + 2) % 3 == 0 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the amounts of money each person had initially\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Equations based on the problem statement\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)\n    equation2 = Eq(alicia - alicia / 2, beth - 60)\n    equation3 = Eq(beth - 60, casey - 3 * (alicia / 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    # Solution for how much money Alicia had at first\n    return solutions[alicia]\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbol for the variable we want to find\n    x = symbols('x')\n\n    # Set up the equation 2(x+3) = 30\n    equation = Eq(2 * (x + 3), 30)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    # Prime factorization of the product\n    product = 2*2*3*8*5*5*5\n    # Count number of 2s and 5s, since they form 10s which add trailing zeros\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(2, product + 1):\n        while product % 2 == 0:\n            count_2 += 1\n            product //= 2\n        while product % 5 == 0:\n            count_5 += 1\n            product //= 5\n    \n    # The number of zeroes at the end is equal to the minimum of count_2 and count_5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    multiplier = 5\n\n    new_denominator = (denominator / numerator) * 30\n    return int(new_denominator)\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    \n    equation = Eq(original_number + 10 * original_number, 253)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    new_seashells_picked = 70\n    number_of_boxes = 8\n\n    remaining_seashells = (initial_seashells - given_to_sister - given_to_friend + new_seashells_picked)\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Work backwards from the final answer\n    final_answer = 1\n\n    # Add 8 to the final answer to undo the subtraction\n    result_after_adding = final_answer + 8\n\n    # Multiply by 8 to undo the division\n    result_after_multiplication = result_after_adding * 8\n\n    # Divide by 3 to undo the multiplication\n    result_after_division = result_after_multiplication / 3\n\n    # Subtract 6 to undo the addition\n    original_number = result_after_division - 6\n\n    return original_number\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for i in range(1, 90):\n        if i % 9 == 0 and (i + 1) % 5 == 0 and (i + 2) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]:\n            return i\n    return None\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of cookies eaten on the first day as 'a'\n    a = symbols('a')\n\n    # The number of cookies eaten each day forms an arithmetic sequence\n    # a, a + 6, a + 12, a + 18, a + 24\n    # The sum of an arithmetic sequence is n/2 * (first term + last term)\n    # Given that the sum of the sequence is 100, we write the equation\n    num_days = 5\n    last_term = a + 24\n    sum_of_sequence = Eq((num_days / 2) * (a + last_term), 100)\n\n    # Solving the equation for 'a'\n    solutions = solve(sum_of_sequence, a)\n\n    # There could be multiple solutions, but we want the positive value (number of cookies can't be negative)\n    first_day_cookies = [sol.evalf() for sol in solutions if sol.evalf() > 0][0]\n    \n    return first_day_cookies\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = sum(solutions.values())\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    # counting 'P' which appears twice\n    repeat_p = \"HAPPY\".count('P')\n\n    arrangements = factorial(total_letters) // factorial(repeat_p)\n\n    return arrangements\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    price_per_roll_ali = 2.40 / 8\n    price_per_roll_mya = price_per_roll_ali * 2\n    cost_for_three_rolls_mya = price_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    # There are 4 men and 4 women.\n    # Men can be arranged in 4! ways and women can be arranged in 4! ways.\n    # Since they want to stand alternately, we treat each man as a unique position for a woman to stand next to.\n    # Thus, we have 4! arrangements for men and for each arrangement of men,\n    # we have 4! arrangements of women.\n    \n    men_arrangements = factorial(4)\n    women_arrangements = factorial(4)\n    \n    ans = men_arrangements * women_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ashley = symbols('ashley')\n    crystal = Eq(2 * ashley)\n    justin = Eq(10 * ashley)\n    \n    equation = Eq(justin.lhs + crystal.lhs + ashley, justin.rhs + 72 + crystal.rhs)\n    solutions = solve((equation,), (ashley,))\n\n    ashley_pages = solutions[ashley]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    total_pages = ashley_pages + crystal_pages + justin_pages\n    \n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys_fraction = 2/5\n    girls = 12\n    total_children = symbols('total_children')\n    \n    equation = Eq((1 - boys_fraction) * total_children, girls)\n    \n    total_children_sol = solve(equation, total_children)[0]\n    boys = boys_fraction * total_children_sol\n    \n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Including Peter and John themselves\n    peter_and_john = 2\n\n    ans = people_in_front_of_peter + peter_and_john + people_behind_john\n    return ans\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.6 * 0.1 * 900\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n    \n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(50, 31, -4):\n        ans += i - (i - 2)\n    return ans\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    # Assuming St Petersburg is in Russia, typically it is GMT+3\n    # England is typically GMT+0\n    # Hence, there is a +3 hour difference between England and St Petersburg.\n\n    # The flight takes 4 hours, so in England it will be 4 hours later which is 4 PM or 16:00.\n    # However, we have to account for the time zone difference.\n    # When it is 16:00 in England, it will be 16:00 + 3 hours = 19:00 in St Petersburg.\n\n    england_time_at_landing = 12 + 4\n    st_petersburg_time_at_landing = england_time_at_landing + 3\n\n    # The time will be 19:00 or 7 PM in St Petersburg when Richard lands.\n    return st_petersburg_time_at_landing\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):  # N can't be 0 as it's a two-digit number\n        for O in range(10):  # O can be any digit from 0 to 9\n            if len(set([N, O])) == 2:  # They must be different\n                ans = 10 * N + O\n                break\n    \n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    kilogram = 2.5\n\n    ans = kilogram * kg_to_grams\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    colors = 3\n    socks_to_form_a_pair = 2\n    max_single_socks_without_a_pair = colors * (socks_to_form_a_pair - 1)\n    socks_to_ensure_a_pair = max_single_socks_without_a_pair + 1\n    return socks_to_ensure_a_pair\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_to_km = 5\n\n    ground_distance_km = (map_distance_cm / scale_cm_to_km) * 1  # 1 km for every 5 cm on the map\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= (1.0/i - 1.0/(51-i))\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Calculate the total number of children\n    total_children = total_sweets / (fraction_boys * sweets_per_boy + (1 - fraction_boys) * sweets_per_girl)\n    \n    # Since the number of children must be an integer, we round it to the nearest integer\n    total_children = round(total_children)\n    \n    # Calculate the number of girls\n    number_of_girls = total_children * (1 - fraction_boys)\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2           # speed in kilometers per hour\n    time_seconds = 24         # time in seconds\n    speed_meters_per_second = (speed_kmh * 1000) / 3600   # converting speed to meters per second\n    distance_meters = speed_meters_per_second * time_seconds # distance = speed * time\n    return int(distance_meters)\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Explanation is not given as per instruction; only returning whether Pip is correct or not.\n    # A positive integer which is not a prime number is called a composite number, except for 1,\n    # which is neither prime nor a composite. Pip's statement disregards this exception.\n    ans = False\n    return ans\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(number % 7, 5)\n    eq2 = Eq(number % 8, 6)\n    eq3 = Eq(number % 10, 6)\n    eq4 = Eq((number // 7) + (number // 8) + (number // 6), 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), number)\n    \n    # Since there might be multiple solutions, we are only interested in non-negative ones\n    for sol in solutions:\n        if sol.is_integer and sol >= 0:\n            ans = sol\n            break\n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    foreign_language_students = 54\n    \n    both_classes = maths_students + foreign_language_students - total_students\n    \n    only_maths_students = maths_students - both_classes\n    return only_maths_students\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    # Jimmy says: \"I ate 7 more carrots than Jack.\"\n    equation1 = Eq(jimmy, jack + 7)\n    \n    # Tommy says: \"The carrots I ate are 3 times the carrots Jimmy ate.\"\n    equation2 = Eq(tommy, 3 * jimmy)\n    \n    # Jack says: \"We ate a total of 43 carrots.\"\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    factors = [\n        Fraction(3, 2), Fraction(4, 3), Fraction(5, 4), Fraction(6, 5),\n        Fraction(7, 6), Fraction(8, 7), Fraction(9, 8), Fraction(10, 9)\n    ]\n\n    result = 1\n    for factor in factors:\n        result *= factor\n\n    return result\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    num = 40309\n    adder = 0\n    while True:\n        adder += 1\n        if is_palindrome(num + adder):\n            return adder\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):  # First group\n        for x2 in range(1, 12):  # Second group\n            if x2 == x1:\n                continue\n            for x3 in range(1, 12):  # Third group\n                if x3 in (x1, x2):\n                    continue\n                for x4 in range(1, 12):  # Fourth group\n                    if x4 in (x1, x2, x3):\n                        continue \n                    if x1 + x2 + x3 + x4 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    sweets_to_share = 42 - kasia_keeps\n    sweets_each_friend = sweets_to_share // 2\n    lucie_gives_to_joan = sweets_each_friend * 2 // 7\n    lucie_keeps = sweets_each_friend - lucie_gives_to_joan\n    return lucie_keeps\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2*(9-x), 4*(x-5) + 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the weekly pension be 1 (100% of pension)\n    # Friday night out would spend 1/4 of his pension\n    friday_spend = 1 / 4\n\n    # Saturday night out spends 1/3 of what remains\n    # What remains after Friday is (1 - 1/4) of his pension\n    remaining_after_friday = 1 - friday_spend\n    saturday_spend = remaining_after_friday / 3\n\n    # Calculate what's left after spending on Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spend\n\n    # The remaining fraction after his weekend spending\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boys_diff = 52\n    total_students = 0\n\n    layer = 0\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = layer ** 2 if layer > 0 else 0\n        current_diff = boys - girls\n\n        if current_diff > boys_diff:\n            break\n        total_students = boys + girls\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_total = ratio_adults + ratio_children\n\n    adults = (ratio_adults / ratio_total) * total_people\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    \n    ans = num_school_bags * num_pencil_boxes\n    return ans\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # If Mr Nelson uses a 5-litre pail, 4 litres will overflow.\n    # So the tank capacity is 1 litre less than a multiple of 5.\n    # If he uses a 3-litre pail, he needs 4 more pails to fill the tank.\n    # So the tank capacity is 4 * 3 = 12 litres more than a multiple of 3.\n\n    # We're searching for a number that is 1 less than a multiple of 5\n    # and simultaneously 12 more than a multiple of 3.\n\n    # Let the tank capacity be x litres.\n    for x in range(1, 1000):  # Increase the range if the amount of water is very large\n        if (x + 4) % 5 == 0 and (x - 12) % 3 == 0:\n            return x\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = '6129043'\n    sequence_sum = sum(int(digit) for digit in recurring_sequence)\n    full_sequences = 212 // len(recurring_sequence)\n    remaining_digits = 212 % len(recurring_sequence)\n\n    total_sum = full_sequences * sequence_sum + sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    # Initial ratio of apples to pears (3:4)\n    equation1 = Eq(apples / pears, 3/4)\n    # After swapping 36 pears with apples\n    equation2 = Eq((apples + 36) / (pears - 36), 1.5)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    return int(solutions[apples])\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    number_of_ginkgo_trees = 30\n    number_of_spaces = number_of_ginkgo_trees - 1\n\n    ans = number_of_spaces\n    return ans\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return (36 / 100) * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Calculate the number of 5s in the prime factorization of n!,\n    # as these are the limiting factor for how many zeros the factorial will end with.\n    n = 1\n    count_fives = 0\n    \n    # To have 28 zeros, we need at least 28 factors of 5.\n    while count_fives < 28:\n        n += 1\n        n_copy = n\n\n        # Count factors of 5 in the current n.\n        while n_copy % 5 == 0:\n            count_fives += 1\n            n_copy //= 5\n    \n    return n\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let's find the size of the original square array (n x n)\n    # After the new soldiers join, the array becomes (n+1) x (n+1)\n    # The original number of soldiers is n^2\n    # The new number of soldiers is (n+1)^2\n    # The difference between the new and the original number is 31 (as they added one row and one column)\n    # So (n+1)^2 - n^2 = 31\n    # Expanding this equation gives: n^2 + 2n + 1 - n^2 = 31\n    # Simplifying gives: 2n + 1 = 31\n    # So n = (31 - 1) / 2\n    # n should only be an integer because we can't have a fraction of a soldier\n \n    n = (31 - 1) // 2\n    # Now calculate the total number of soldiers in the new array (n+1)^2\n    ans = (n + 1) ** 2\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    # Each person shakes hands with n_people - 1 other people\n    # But this counts each handshake twice (A shakes B's hand, and B shakes A's hand)\n    # So we divide by 2 to avoid double counting\n    handshakes = (n_people * (n_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    num_lemonades = 5\n    num_chocolate_bars = 6\n    ten_pound_note = 10\n\n    total_cost = (lemonade_price * num_lemonades) + (chocolate_bar_price * num_chocolate_bars)\n    change = ten_pound_note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # To ensure two pairs of matching socks, Daniel must pick at least:\n    # 1 yellow + 1 green + 1 white + 1 red + 1 black = 5 (one of each to make sure he doesn't have a pair)\n    # After picking one of each, the next sock he picks must give him a pair:\n    # So he picks one more sock which could be any color, giving him his first pair.\n    # Up until now he has picked 6 socks (1 pair and three singles).\n    # He must now continue picking socks to ensure a second pair.\n    # Since he has singles of 3 colors, he should pick one of each to maximize the number of picks:\n    # So he picks 1 yellow + 1 green + 1 white = 3 more socks.\n    # Now, he has picked 9 socks (1 pair and three singles).\n    # The next sock he picks must give him a second pair.\n    ans = 10 # 9 from before + 1 more to guarantee a second pair\n\n    return ans\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Sam's current age as s\n    s = symbols('s')\n\n    # Equation representing the relationship:\n    # Sam's age in 4 years = 2 * (Sam's age 4 years ago)\n    # Which translates to:\n    # (s + 4) = 2 * (s - 4)\n    equation = Eq(s + 4, 2 * (s - 4))\n\n    # Solving the equation for Sam's age\n    sam_age = solve(equation, s)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    all_combinations = sorted([''.join(p) for p in permutations(digits)])\n    for number in all_combinations:\n        if int(number) % 2 != 0:\n            return int(number)\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total letters in RAINBOW\n    total_letters = 7\n    \n    # Vowels in the word RAINBOW (A, I, O)\n    vowels = 3\n    consonants = total_letters - vowels  # R, N, B, W\n    \n    # Total arrangements of consonants\n    consonants_arrangements = factorial(consonants)\n    \n    # Possible positions to insert the vowels\n    possible_positions = consonants + 1  # Places between and around consonants\n    \n    # Total arrangements of vowels\n    vowels_arrangements = factorial(vowels)\n    \n    # Now, calculate the total arrangements where vowels and consonants are combined\n    combinations_with_vowels_together = consonants_arrangements * vowels_arrangements\n    \n    # Total arrangements without any restrictions\n    total_arrangements = factorial(total_letters)\n    \n    # Subtract the calculated arrangement from the total to get the \n    # arrangement where vowels are not together\n    arrangements_vowels_not_together = total_arrangements - combinations_with_vowels_together\n    \n    return arrangements_vowels_not_together\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # The sum of the first n terms of an arithmetic progression can be calculated by:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, a is the first term, d is the common difference and n is the number of terms.\n    \n    # From the problem statement, we have two equations:\n    # S_10 = 20 and S_30 = 90\n    # We can set up the equations based on the formula for the sum of an arithmetic progression:\n    # 10/2 * (2a + (10 - 1)d) = 20\n    # 30/2 * (2a + (30 - 1)d) = 90\n    \n    # Simplify these equations:\n    # 5 * (2a + 9d) = 20  => 2a + 9d = 4\n    # 15 * (2a + 29d) = 90 => 2a + 29d = 6\n    \n    # Now we have a system of linear equations:\n    # 2a + 9d = 4  => Equation (1)\n    # 2a + 29d = 6 => Equation (2)\n    \n    # We can solve this system by subtraction method:\n    # Subtract Equation (1) from Equation (2) we get:\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 2a + 29d - 2a - 9d = 2\n    # 20d = 2\n    # d = 2 / 20\n    d = 2 / 20\n    \n    return d\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are: x ≡ 2 (mod 3), x ≡ 3 (mod 5), x ≡ 4 (mod 7)\n    congruences = [(2, 3), (3, 5), (4, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    .ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2/3) * 729\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, cows, goats = symbols('chickens cows goats')\n\n    # chicken + goats = 40\n    eq1 = Eq(chickens + goats, 40)\n    # 3 times chickens = 5 times cows\n    eq2 = Eq(3 * chickens, 5 * cows)\n    # 2 times goats = 10 times cows\n    eq3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((eq1, eq2, eq3), (chickens, cows, goats))\n\n    # chicken feet = 2, cow feet = 4, goat feet = 4\n    total_feet = 2 * solutions[chickens] + 4 * solutions[cows] + 4 * solutions[goats]\n\n    return total_feet\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    # Ratio of stickers Amy has to Penny's is 5:4\n    # This implies 5x + 4x = total_stickers, where x is the value each part of the ratio represents\n    # So, total parts = 5 + 4 = 9\n    # Penny's stickers will be 4 parts of the ratio\n    \n    # Calculate the value of each part\n    part_value = total_stickers / (5 + 4)\n    \n    # Calculate the number of stickers Penny has\n    penny_stickers = part_value * 4\n    \n    return int(penny_stickers)\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # converting speed to meters per second (1 km/h = 1000/3600 m/s)\n    time_seconds = 300  # time in seconds\n\n    distance_meters = speed_mps * time_seconds  # distance = speed * time\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let total_apples be the total number of apples Jack has.\n    # According to the problem:\n    # Jack sold 40 apples which is 4/7 of the apples he brought yesterday.\n    # Jack brought 1/2 of all apples he has yesterday.\n    # We can set up the following equations:\n    # (4/7) * (1/2) * total_apples = 40\n    # Solving for total_apples:\n    \n    total_apples = 40 * (7/4) * 2\n    return int(total_apples)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d\n    # given that (a + b) / 2 = 10, (c + d) / 2 = 22, (a + d) / 2 = 14\n    \n    # From the first condition\n    a_plus_b = 10 * 2  # a + b = 20\n    \n    # From the second condition\n    c_plus_d = 22 * 2  # c + d = 44\n    \n    # From the third condition\n    a_plus_d = 14 * 2  # a + d = 28\n    \n    # Since we know a + b and a + d, we can find b + d by taking the difference of the two sums\n    b_plus_d = a_plus_b - a_plus_d + c_plus_d # (a + b) - (a + d) + (c + d)\n    \n    # Finally, the average of the two middle numbers b and c is half their sum\n    average_middle_numbers = b_plus_d / 2   # (b + d) / 2\n    \n    return average_middle_numbers\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    numbers = [200, 202, 204, 206, 208]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    min_diff = float('inf')\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(num - 2978)\n        if diff < min_diff:\n            closest_num = num\n            min_diff = diff\n\n    return closest_num\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4\n\n    # Calculate the number of rows\n    number_of_rows = 1 + (last_row_seats - first_row_seats) // difference\n\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    total_seats = number_of_rows / 2 * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # Number of lines\n    n = 10\n    # The formula for the maximum number of different parts n lines can divide the plane into is:\n    # 1 + n + n(n-1)/2 + n(n-1)(n-2)/6 + n(n-1)(n-2)(n-3)/24\n    # Simplified, this is the sum of the first n+1 terms of the binomial coefficient of (n, k), where n is the number of lines and k ranges from 0 to n.\n    parts = 1\n    for i in range(1, n+1):\n        parts += n\n        n -= 1\n    return parts\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    number = (result + 10) / 2\n    return number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n    sum_AB = 2 * average_AB  # sum of A and B\n    sum_ABC = sum_AB + C  # sum of A, B, and C\n    average_ABC = sum_ABC / 3  # average of A, B, and C\n\n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # The sum of the average ages for each pair of teachers\n    sum_of_averages = 34 + 36 + 44\n\n    # Each teacher is counted twice in the sum above, so divide by 2 to get the total average\n    total_average = sum_of_averages / 2\n\n    return total_average\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year = 1533\n    birth_month = 9\n    birth_day = 7\n\n    death_year = 1603\n    death_month = 3\n    death_day = 24\n\n    age_years = death_year - birth_year\n    if death_month < birth_month or (death_month == birth_month and death_day < birth_day):\n        age_years -= 1\n\n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n    \n    return remainder\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    prime_factors = []\n    n = 7007\n    # prime factorization of 7007\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n        i += 1\n    if n > 1:\n        prime_factors.append(n)\n    \n    # 7007 = 7 * 7 * 11 * 13, we need to find 2-digit multiples of 7\n    # The pairs of factors that are two 2-digit numbers are (77, 91).\n    # We exclude (1, 7007) and (7, 1001) since those are not 2-digit numbers\n    # There is only one combination for this case as per the prime factorization\n    multiple1 = 7 * 11  # 77\n    multiple2 = 7 * 13  # 91\n    \n    return multiple1 + multiple2\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Pigeonhole Principle calculation\n    max_cakes_in_layer = -(-total_cakes // layers)  # Ceiling division\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = int(23 ** 0.5)  # Largest integer that is smaller than the square root of 23\n    square_perimeter = 4 * side_length  # Perimeter of the largest square that can be formed\n    leftover_rope = 23 - square_perimeter  # Length of a rope that must be cut\n    return leftover_rope\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = (21 + 1) * 7 - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        x = (2018 + i) / 5\n        fractional_part = x - int(x)\n        total += fractional_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    first_term = 11\n    num_boxes = 10\n    # sum of arithmetic sequence: n/2 * (2*a1 + (n-1)*d) = 425\n    # 10/2 * (22 + 9*d) = 425\n    # 11 + 4.5*d = 42.5\n    # 4.5*d = 31.5\n    # d = 7\n    difference = (425 - num_boxes * first_term) / (num_boxes * (num_boxes - 1) / 2)\n\n    return int(difference)\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    equation1 = Eq((3/4) * chelsia, (2/3) * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    return solutions[chelsia] + solutions[benson]\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    total_sum = 357\n    num_numbers = 7\n    average = total_sum // num_numbers\n    smallest_number = average - 6  # Since they are consecutive odd numbers and we want the smallest.\n\n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    # There are two '1's and one of each other digit\n    repetitions = factorial(2)\n    permutations = factorial(total_digits) // repetitions\n\n    return permutations\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1/x for x in range(1995, 2009))\n    ans = int(1 / A_inverse)\n    return ans\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2 (since all other even numbers are divisible by 2 and thus not prime)\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    ratio_martin = 9\n    ratio_carter = 13\n    speed_difference = 20\n\n    equation1 = Eq(martin_speed, carter_speed + speed_difference)\n    equation2 = Eq(martin_speed * ratio_martin, carter_speed * ratio_carter)\n\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese remainder theorem, we want to solve the set of congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George's combined rate is 1 room per 6 hours\n    combined_rate = 1/6\n    \n    # Fred's individual rate is 1 room per 9 hours\n    fred_rate = 1/9\n    \n    # George's individual rate is the combined rate minus Fred's rate\n    george_rate = combined_rate - fred_rate\n    \n    # George's time to paint the room on his own is the reciprocal of his rate\n    george_time = 1/george_rate\n    \n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    x = symbols('x')\n    remaining_cloth = total_cloth - x\n    \n    return remaining_cloth\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    # To ensure we have two apples of the same color, we need to consider the worst case.\n    # We can take out one of each color until we run out of the apples in the smaller group.\n    # Then we take out one more apple, which will guarantee it's the same color as the last one taken.\n\n    # The number of apples we need to take to reach the worst case is the number in the smaller group (red_apples) + 1.\n    apples_to_take = red_apples + 1\n\n    return apples_to_take\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Final count of red pens\n    final_red_pens = 20\n    # Final ratio red:black after selling equal number of each\n    final_ratio_red_to_black = 5 / 13\n    # Calculate the final count of black pens using the final ratio\n    final_black_pens = final_red_pens / final_ratio_red_to_black\n    \n    # Initial ratio red:black before selling\n    initial_ratio_red_to_black = 3 / 7\n    # Calculate initial count of red pens using proportion\n    initial_red_pens = initial_ratio_red_to_black * final_black_pens\n    \n    # Calculate how many red pens were sold\n    red_pens_sold = initial_red_pens - final_red_pens\n    \n    return int(red_pens_sold)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n\n    # Each person has 5 choices, independent of each other, hence 5^4\n    ways = entrances ** people\n\n    return ways\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    # Calculate the total number of legs from cats, dogs and rabbit\n    total_legs_from_cats_dogs_rabbit = 2 * legs_per_cat + 2 * legs_per_dog + 1 * legs_per_rabbit\n    \n    # Calculate remaining legs which should be for the birds\n    remaining_legs_for_birds = 28 - total_legs_from_cats_dogs_rabbit\n    \n    # Calculate the number of birds\n    num_birds = remaining_legs_for_birds / legs_per_bird\n    \n    return int(num_birds)\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    for num in range(11, 20):\n        if 42 % num == 0:\n            return num\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Calculate the original price based on last year's price after 5% increase\n    last_years_price = 10500\n    original_price = last_years_price / 1.05\n    \n    # Calculate this year's price after 5% decrease\n    this_years_price = original_price * 0.95\n    \n    # Calculate the profit or loss by comparing original and this year's price\n    profit_or_loss = this_years_price - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    # Calculate numbers divisible by 5\n    divisible_by_5 = 200 // 5\n\n    # Calculate numbers divisible by 7\n    divisible_by_7 = 200 // 7\n\n    # Calculate numbers divisible by both 5 and 7\n    divisible_by_5_and_7 = 200 // (5 * 7)\n\n    # Use the inclusion-exclusion principle to calculate the total\n    total = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n\n    return total\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return -(-num_bags // 1)  # Ceiling division to ensure enough bags are bought\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    # Let's denote the unknown number as x.\n    sum_of_numbers = (8 + 3 + 9) # Sum of the known numbers\n    total_numbers = 4 # Total numbers including the placeholder square\n    average = 6 # Given average\n\n    # Average = sum of all numbers / total number of numbers\n    # So, sum of all numbers = Average * total number of numbers\n    required_sum = average * total_numbers\n\n    # To find the number that goes in the square,\n    # we subtract the sum of known numbers from the required sum.\n    x = required_sum - sum_of_numbers\n\n    return x\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler_price, pen_price = symbols('ruler_price pen_price')\n\n    # 2 rulers and 9 pens cost $21.60, this is our first equation\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n\n    # A ruler costs $0.90 more than a pen, this is our second equation\n    equation2 = Eq(ruler_price - pen_price, 0.90)\n\n    # Solving the equations to find the price of a ruler and a pen\n    solutions = solve((equation1, equation2), (ruler_price, pen_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for p in permutations(digits):\n        first_num = int(''.join(p[:3]))\n        second_num = int(''.join(p[3:5]))\n        third_num = int(''.join(p[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    # Reverse the calculation process\n    result = 1126\n\n    # Step 8: Add 50 to the result\n    result += 50\n\n    # Step 7: Subtract the day from the result (this will be undone later)\n    \n    # Since we don't know the day, we set the result of month calculation\n    # Step 6: Divide by 5\n    month_result = result / 5\n\n    # Step 5: Add 20 to the results\n    month_result += 20\n\n    # Step 4: Divide by 5\n    month_result /= 5\n\n    # Step 3: Subtract 6 from the result\n    month_result -= 6\n\n    # Step 2: Divide by 4\n    month_result /= 4\n\n    # Now we have the month and can calculate the day \n    # by plugging month_result back into the process\n    day = (1126 - 50) - (month_result * 5) * 5  \n  \n    # Check if we correctly found a month and a positive day of the month\n    if month_result.is_integer() and 0 < month_result <= 12 and 0 < day <= 31:\n        return int(month_result), int(day)\n    else:\n        return None\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    if total_money < cup_price:\n        return 0\n\n    # First cup costs $5\n    total_money -= cup_price\n    # The rest of the money can be used for refills at $1 each\n    number_of_cups = 1 + total_money // refill_price\n\n    return number_of_cups\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Arithmetic sequence sum formula: S_n = n/2 * (a_1 + a_n)\n    # Number of terms in 4, 8, ..., 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    \n    # Sum of first sequence\n    sum_first_sequence = num_terms / 2 * (first_term + last_term)\n    \n    # Sum of second sequence is the same as the first one, because it's just reversed\n    total_sum = sum_first_sequence * 2\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    total_peaches_5_monkeys_4_days = peaches_per_monkey_per_day * 5 * 4\n    return total_peaches_5_monkeys_4_days\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_50k_tax = 0.06 * 50000\n    remaining_income = income - 50000\n    remaining_tax = (0.06 + T / 100) * remaining_income\n    total_tax = first_50k_tax + remaining_tax\n\n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)[0]\n\n    return T_value\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the story books, comic books, and science books among themselves\n    # which is 2! for story books, 3! for comic books, and 4! for science books\n    story_books_ways = factorial(2)\n    comic_books_ways = factorial(3)\n    science_books_ways = factorial(4)\n    \n    # Calculate the number of ways to arrange the groups of different kinds of books (story, comic, science)\n    # There are 3 kinds of books, so there are 3! ways to arrange these groups\n    groups_arrangement_ways = factorial(3)\n    \n    # The total number of ways is the product of the ways to arrange within groups times the ways to arrange the groups\n    total_ways = story_books_ways * comic_books_ways * science_books_ways * groups_arrangement_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Spendings from January to March\n    jan_to_mar = 450 * 3\n\n    # Spendings from April to July\n    apr_to_jul = 350 * 4\n\n    # Spendings from August to October\n    aug_to_oct = 1250\n\n    # Spendings from November to December\n    nov_to_dec = 400 * 2\n\n    # Total spendings\n    total_spendings = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Average spending per month from January to December\n    average_spendings = total_spendings / 12\n\n    return average_spendings\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "from math import comb\n\ndef solution():\n    # After ensuring each friend gets at least 1 ice-cream, we have 2 ice-cream left to distribute\n    # We are effectively looking for the number of non-negative integer solutions to \n    # x1 + x2 + x3 = 2, where x1, x2, x3 are the additional ice-creams that Zyan, Xuan Ying, and SiCheng get.\n    # This is equivalent to finding the number of combinations with repetition, given by\n    # (n + r - 1) choose (r) where n is the number of friends (3) and r is the number of ice-creams left (2)\n    \n    ways = comb(3 + 2 - 1, 2)\n    return ways\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # Assuming the distance to the library is the same for both walking and cycling\n    # Let d be the distance to the library in meters\n    d = 1  # Arbitrarily chosen because it will cancel out in the calculation\n    \n    # Speeds are given in meters per minute\n    walk_speed = 40  # Walking speed\n    cycle_speed = 60  # Cycling speed\n\n    # Time taken to walk to the library is distance divided by walking speed\n    # Time taken to cycle back from the library is distance divided by cycling speed\n    walk_time = d / walk_speed\n    cycle_time = d / cycle_speed\n\n    # Total time for the whole trip is the sum of walking and cycling times\n    total_time = walk_time + cycle_time\n\n    # Total distance for the whole trip is twice the distance to the library (there and back)\n    total_distance = 2 * d\n\n    # Average speed for the whole trip is the total distance divided by the total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the total money Sophie's mother gave her.\n    # Cost of 1 serving of ice cream is represented as c.\n    # According to the problem, we have the following equations:\n    # x - 5c = -2.30 (She was short of $2.30 for 5 servings)\n    # x - 3c = 0.30 (She had $0.30 left after buying 3 servings)\n    # By solving these two equations, we can find the value of x.\n\n    # The first equation gives us: x = 5c - 2.30\n    # The second equation gives us: x = 3c + 0.30\n    # Now we equate both expressions for x:\n    # 5c - 2.30 = 3c + 0.30\n    # By solving for c, we get:\n    c = (2.30 + 0.30) / (5 - 3)\n    \n    # Now that we have c, we can find x using the second equation:\n    x = 3 * c + 0.30\n    \n    return x\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    \n    ans = solve(equation, x)\n    return ans\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    x = symbols('x')\n    y = symbols('y')\n\n    # Given proportion\n    proportion = Eq(9/x, y/2)\n\n    # Solve the proportion for y when x=3\n    y_value = solve(proportion.subs(x, 3), y)[0]\n\n    return y_value\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n    \n    # All permutations of the digits 2, 3, 5, 6\n    perms = permutations(['2', '3', '5', '6'])\n    \n    # Find the smallest odd number\n    min_odd = float('inf')\n    for perm in perms:\n        num = int(''.join(perm))\n        if num % 2 != 0:  # checking if it is an odd number\n            min_odd = min(min_odd, num)\n    \n    return min_odd\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To guarantee that you have at least two of the same color,\n    # you would have to take out all balls of one color plus one more ball.\n    # Since there could be a situation where you take out all 7 green balls\n    # and the next one is a blue ball, that would guarantee two of the same color.\n    num_green_balls = 7\n    num_blue_balls = 8\n    ans = num_green_balls + 1  # taking all green balls plus one more which will be blue\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's define a variable x as the starting number.\n    # Then apply the operations step by step on x and simplify the expression.\n    \n    x = symbols('x')\n    expression = ((x + 3) * 2 - 2 + 10) / 2 - x\n    \n    # Now, we calculate the simplified result of the expression.\n    # The expression will result in a constant value independent of 'x'.\n    \n    result = simplify(expression)\n    \n    return result\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of bracelets Felicia had originally.\n    f = symbols('f')\n    \n    # Felicia sells 3/5 of her bracelets.\n    felicia_sold = 3 * f / 5\n    \n    # Janice buys 2/5 of the bracelets Felicia sold.\n    janice_bought = 2 * felicia_sold / 5\n    \n    # After selling, Felicia has 2/5 of her original number of bracelets left.\n    felicia_remaining = f - felicia_sold\n    \n    # Janice originally has 96 bracelets.\n    janice_original = 96\n    \n    # Janice now has her original bracelets plus what she bought.\n    janice_new_total = janice_original + janice_bought\n    \n    # The new ratio is Felicia's remaining bracelets to Janice's total bracelets: 5:7\n    equation = Eq(felicia_remaining / janice_new_total, 5 / 7)\n\n    # Solve for f, the number of Felicia's original number of bracelets.\n    num_bracelets_felicia = solve(equation, f)\n    \n    # Calculate the number of bracelets Janice bought (2/5 of 3/5 of Felicia's original bracelets).\n    num_bracelets_janice_bought = num_bracelets_felicia[0] * 3 / 5 * 2 / 5\n\n    return num_bracelets_janice_bought\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9\n\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    \n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    total_individual_cost = 15 * individual_packet_cost\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2 / 7 * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Worst case scenario: Annabella takes out all shirts except the yellow ones without getting a yellow shirt.\n    # So, she must take out all orange, pink, and brown shirts.\n    non_yellow_shirts = 6 + 4 + 12\n    # To ensure she gets at least 1 yellow shirt, add one more shirt to the non-yellow shirts count.\n    return non_yellow_shirts + 1\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    initial_deposit = 20000\n    annual_interest_rate = 0.05\n    number_of_years = 11\n\n    final_amount = initial_deposit * (1 + annual_interest_rate * number_of_years)\n\n    return final_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Calculate the left hand side\n    lhs = (3/4) + (3/4) + (3/4)\n    # Since the right hand side is 1 plus some fraction over 4, let's subtract 1 from the lhs\n    missing_number_times_fourth = lhs - 1\n    # The missing number is simply that value times 4\n    missing_number = missing_number_times_fourth * 4\n    return missing_number\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climbing_distance_per_day = 3\n    slipping_distance_per_night = 2\n    climbing_net_distance_per_day = climbing_distance_per_day - slipping_distance_per_night\n    day = 0\n\n    while depth > 0:\n        day += 1\n        depth -= climbing_distance_per_day\n        if depth <= 0:\n            break\n        depth += slipping_distance_per_night\n        \n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    total_pages = (25 * 4) + (40 * 6) + 80\n    total_days = 4 + 6 + 5\n\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20  # number of terms\n    S_n = 560  # sum of the arithmetic progression\n    d = 2  # common difference\n    \n    # We use the formula for the sum of the first n terms of an arithmetic progression:\n    # S_n = n/2 * (2*a_1 + (n-1)*d)\n    # where a_1 is the first term. We can rearrange the formula to solve for a_1:\n    \n    a_1 = (S_n - (n * (n - 1) * d) / 2) / n\n    \n    return a_1\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate = 54\n    strawberry = chocolate + 12\n    vanilla = 3 * chocolate\n    total_cookies = chocolate + strawberry + vanilla\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let's denote Penny's original number of toys as p\n    # Let's denote her brother's original number of toys as b\n\n    # From the problem we know that:\n    # p - b = 10 (Penny has 10 more toys than her brother)\n    # After giving away toys, Penny has 14 toys and her brother has 12.\n    # This means Penny gave away p - 14 toys, which her brother received.\n    # So the new number of toys her brother has is b + (p - 14)\n    \n    # Now we can set up the equations based on the provided information:\n    # p - 14 (toys Penny gave away) = 14 (toys Penny has now)\n    # b + (p - 14) = 12 (toys her brother has now)\n    \n    # From the first equation we get p = 14 + 14 = 28\n    # Now we can solve for b using the second equation.\n    # b + (28 - 14) = 12\n    # b + 14 = 12\n    # b = 12 - 14\n    b = 12 - 14\n    \n    return b\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Multiplication out of the multiplication table usually refers to \n    # larger numbers multiplied together. For this task, since there is no \n    # specific multiplication given, I will demonstrate by multiplying two \n    # arbitrary three-digit whole numbers.\n    number1 = 123\n    number2 = 456\n    ans = number1 * number2\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        tens, ones = divmod(age, 10)\n        new_age = ones * 10 + tens + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_of_series = n * (n + 1) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2/3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60\n    tickets_unsold = 28\n    total_tickets = tickets_unsold / ((100 - percent_sold) / 100)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the amount spent\n    amount_spent = symbols('amount_spent')\n    \n    # Hayden's and Mitchell's saved money\n    hayden_saved = 1420\n    mitchell_saved = 505\n    \n    # Hayden had 4 times as much money as Mitchell after spending\n    # Set up the equation based on the information given\n    equation = Eq((hayden_saved - amount_spent), 4 * (mitchell_saved - amount_spent))\n    \n    # Solve for the amount spent\n    solutions = solve(equation, amount_spent)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To ensure 4 cards of the same suit, Tom has to draw enough cards so that even in the worst case scenario,\n    # where the cards are distributed as evenly as possible among the suits, he will still have 4 of one suit.\n    # In the worst case, he could draw 3 cards from each of the 4 suits, making a total of 3*4 = 12 cards.\n    # The next card he draws, no matter the suit, will be the fourth card of that suit.\n    \n    max_cards_without_4_of_a_kind = 3 * 4 # 3 cards from each of 4 suits\n    cards_to_draw_for_4_of_a_kind = max_cards_without_4_of_a_kind + 1 # The next card ensures 4 of a kind\n    \n    return cards_to_draw_for_4_of_a_kind\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    num_terms = 100\n    first_term = 1\n    last_term = 100\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_terms\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of people at the party be x\n    total_people = symbols('total_people')\n\n    # Adults are 3/7 of total people\n    adults = (3/7) * total_people\n\n    # Therefore, children are (1 - 3/7) of total people\n    children = (1 - (3/7)) * total_people\n\n    # Out of the children, 3/8 of them are boys and the rest are girls\n    boys = (3/8) * children\n\n    # The rest are girls, which are 45\n    girls = children - boys\n\n    # Now we set up the equation where the number of girls is 45\n    equation = Eq(girls, 45)\n\n    # Solve for the total number of people\n    total_people_solution = solve(equation, total_people)\n\n    return total_people_solution[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's calculation\n    two_dollar_notes = 5 * 2  # amount from two-dollar notes\n    fifty_cent_coins = 7 * 0.5  # amount from fifty-cent coins in dollars\n\n    # Correct total amount calculation\n    total_amount = two_dollar_notes + fifty_cent_coins\n\n    # Cost of the file\n    file_cost = 11.95\n\n    # Correct remaining money calculation\n    remaining_money = total_amount - file_cost\n\n    return remaining_money\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to seat in a row\n\n    # Number of ways to seat r pupils from n is a permutation problem nPr = n! / (n-r)!\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_distance_per_day = day_climb - night_slide\n    current_distance = 0\n    days = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n            \n    return days\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_water = 28\n    speed_current = 3\n    distance = 150\n    \n    effective_speed = speed_water - speed_current\n    time = distance / effective_speed\n    \n    return time\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    spaces_between_ginkgo = ginkgo_trees - 1\n    willow_trees_per_space = 2\n\n    total_willow_trees = spaces_between_ginkgo * willow_trees_per_space\n    \n    return total_willow_trees\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    return (26 + 4) / 5\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    # Let's denote Andrew's amount as A, Brian's as B, and Christopher's as C.\n    # The equations based on the problem statement are:\n    # A + B = 40 (Andrew and Brian have £40 between them)\n    # A + C = 37 (Andrew and Christopher have £37 between them)\n    # B + C = 25 (Brian and Christopher have £25 between them)\n    #\n    # To find the total, we need to find A + B + C.\n    # By adding all three equations, we get:\n    # 2A + 2B + 2C = 40 + 37 + 25\n    # Dividing both sides by 2 gives us the total:\n    # A + B + C = (40 + 37 + 25) / 2\n    \n    total_amount = (40 + 37 + 25) / 2\n    return total_amount\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the number of aircrafts Andy sells per hour\n    A = symbols('A')\n\n    # Zack sells 150 aircrafts per hour\n    Z = 150\n\n    # Total number of aircrafts to be sold\n    total_aircrafts = 1200\n\n    # Together, Andy and Zack sell all aircrafts in 6 hours\n    equation = Eq((A + Z) * 6, total_aircrafts)\n\n    # Solve the equation for A\n    solution = solve(equation, A)\n\n    # Calculate the time it would take for Andy to sell all the aircrafts by himself\n    time_for_andy = total_aircrafts / solution[0]\n\n    return time_for_andy\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    total_people = 0\n    for layer in range(1, 100): # We can safely assume the square won't be larger than 100 layers.\n        students = (layer * 2 + 1)**2\n        teachers = layer**2\n        if students - teachers == 80:\n            total_people = students + teachers\n            break\n    return total_people\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_price_per_kg = 7.48  # in pounds\n    price_per_apple = 0.12  # in pounds\n    price_per_yoghurt = 0.46  # in pounds\n    number_of_apples = 8\n    number_of_yoghurts = 2\n    note_value = 10  # in pounds\n\n    # Convert cheese weight to kilograms and calculate cost\n    cheese_cost = (cheese_weight / 1000) * cheese_price_per_kg\n    # Calculate total cost for apples and yoghurts\n    apples_cost = number_of_apples * price_per_apple\n    yoghurts_cost = number_of_yoghurts * price_per_yoghurt\n    # Calculate total cost\n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n    # Calculate change from a £10 note\n    change = note_value - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = daily_savings * days_saved\n    total_left = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return total_left\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n    \n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the smaller number, y is the bigger number\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(y, 3 * x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    width, length = symbols('width length')\n    eq1 = Eq(length, 2 * width)\n    eq2 = Eq(2 * (length + width), 72)\n\n    solutions = solve((eq1, eq2), (width, length))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repayment_to_mum = 10.50\n    amount_after_repayment = initial_amount - repayment_to_mum\n    amount_spent_on_magazines = amount_after_repayment / 2\n    amount_left = amount_after_repayment - amount_spent_on_magazines\n\n    return amount_left\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of the meal\n    # Let ms be the amount of money Steve had originally\n    # Let mm be the amount of money Mark had originally\n    # Let mr be the amount of money Ryan had originally\n    \n    x, ms, mm, mr = symbols('x ms mm mr')\n\n    # From the given information, we have the following equations\n    equation1 = Eq(ms, mm + 40)\n    # After Steve pays\n    equation2 = Eq((ms - x) / (mm - 0) / (mr - 0), 3 / 8 / 9)\n    # After Ryan pays\n    equation3 = Eq((ms - 0) / (mm - 0) / (mr - x), 5 / 4 / 1)\n    # After Mark pays\n    equation4 = Eq((ms - 0) / (mm - x) / (mr - 0), 10 / 1 / 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, ms, mm, mr))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # To find q when 44000/q is a cube, we determine the prime factorization of 44000\n    # Then ensure that each prime in q's factorization is to a power of a multiple of 3\n    import sympy as sp\n    \n    # Determine the prime factorization of 44000\n    prime_factors = sp.factorint(44000)\n    \n    # The factorization must be such that dividing 44000 by q results in a cube\n    # Thus, the exponents in the factorization of q must make the result of the division have\n    # exponents that are multiples of 3 since it's a perfect cube\n    \n    # We initialize q as 1\n    q = 1\n    \n    # Now we iterate over the prime factors\n    for prime, exponent in prime_factors.items():\n        # We need to make sure that each prime factor's exponent in 44000 is reduced\n        # to a multiple of 3. If exponent is not a multiple of 3, then q must include\n        # the prime raised to the difference between the exponent and the next multiple of 3\n        if exponent % 3 != 0:\n            q *= prime ** (3 - (exponent % 3))\n    \n    return q\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    return len(factors)\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    force_applied = 250  # force applied to the crate in N\n\n    # Calculate the normal force (force perpendicular to the floor)\n    normal_force = mass * 9.81  # Force due to gravity = mass * acceleration\n\n    # Calculate the maximum possible static frictional force\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # The force of static friction matches the applied force until the maximum possible static friction is reached\n    force_of_static_friction = min(force_applied, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution\n    nick_salt = 300 * 0.12\n    # Nicole's solution\n    nicole_salt = 500 * 0.28\n    # Total salt\n    total_salt = nick_salt + nicole_salt\n    # Total solution weight after mixing\n    total_solution = 300 + 500\n    # New concentration calculation\n    new_concentration = total_salt / total_solution\n\n    return new_concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n\n\n    return common_difference\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = cube + 1\n        if (int(square ** 0.5)) ** 2 == square:\n            return square\n        i += 1\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a is the score of student A, b is the score of student B\n\n    equation1 = Eq(b, a - 50)  # student B scored 50 points less than student A\n    equation2 = Eq(a + 25, 5 * (b - 25))  # if student B gave student A 25 points, A's score is 5 times that of B's\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = (total_parts / total_hours) / total_workers\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let j be the number of buttons James originally has\n    # Let n be the number of buttons Nina originally has\n    # From the problem, we have two equations:\n    # j + n = 24 (1)\n    # n - 6 = j + 6 (2)\n    # Solve equation (2) for j\n    # j = n - 12\n    # Now substitute j in equation (1)\n    # (n - 12) + n = 24\n    # Simplify the equation\n    # 2n - 12 = 24\n    # 2n = 36\n    # n = 18\n    # Hence, Nina originally has 18 buttons\n    \n    # Assigning the initial number of buttons for Nina\n    n = 18\n    return n\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_progress = 5\n    night_regress = 3\n    net_progress = day_progress - night_regress\n    burrow_depth = 16\n    \n    # Calculate how many full days are needed for the snail to reach the top minus the last climb\n    full_days = (burrow_depth - day_progress) // net_progress  # Integer division\n    remaining_depth = burrow_depth - full_days * net_progress\n    \n    # Check if the snail can climb out on the last day without sliding back\n    if remaining_depth > 0:\n        full_days += 1\n\n    return full_days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given:\n    # Each bag incurs a tax of $1.50.\n    # There is an additional $2.00 environmental charge regardless of the number of bags used.\n    # The total tax charged is the sum of the per-bag tax and the environmental charge.\n    \n    x = symbols('x')  # The number of bags used\n    tax_per_bag = 1.50\n    environmental_charge = 2.00\n\n    y = tax_per_bag * x + environmental_charge  # The total tax charged\n\n    return y\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n    \n    if fraction > decimal:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    result = 3 * (4/5) * (1 + 1/9) * (5 + 1/2) * (3/11)\n    return result\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    _, ans = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_paid = 275\n\n    for days in range(1, 1000):  # arbitrary upper limit to avoid infinite loop\n        if days <= 5:\n            cost = flat_fee + (daily_fee_short * days)\n        else:\n            cost = flat_fee + (daily_fee_short * 5) + (daily_fee_long * (days - 5))\n\n        if cost == total_paid:\n            return days\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        factor = (1/i - 1/(101-i))\n        product *= factor\n    return product\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n    race_distance = 3000  # meters\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time  # in minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    green, yellow = symbols('green yellow')\n    \n    # Before giving away\n    equation1 = Eq(green, yellow)\n    \n    # After giving away\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n    \n    solutions = solve((equation1, equation2), (green, yellow))\n    \n    green_toy_cars_end = solutions[green] - 60\n    \n    return green_toy_cars_end\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270  # original height from which the ball was dropped\n    rebound_ratio = 0.10  # ratio of the height of rebound to the previous height\n    total_distance = initial_height  # initial drop\n\n    while initial_height * rebound_ratio > 0:  # while rebound height is greater than 0\n        rebound_height = initial_height * rebound_ratio\n        total_distance += rebound_height * 2  # add rebound up and down to total distance\n        initial_height = rebound_height  # set the next drop height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Going with the given conditions and the fact that the booklet is folded in half:\n    # Assume the sheet with the sum of page numbers as 58 has pages (n), (n+1), (n+2), (n+3).\n    # n + (n + 1) + (n + 2) + (n + 3) = 58 => 4n + 6 = 58 => 4n = 52 => n = 13\n    # Pages are numbered 1, 2, 3, ... so the first page of this sheet is page 13.\n    # Since the booklet is folded in half, page 13 is four times the number of sheets (excluding the current sheet).\n    # Thus, number of sheets before this one is 13 / 4 which is 3 whole sheets.\n    # So there are 3 sheets before the given sheet plus the sheet itself giving 4 sheets in total.\n\n    # However, the above does not account for the first page being 1, not 0. To adjust for this, we must add 1:\n    # Since the booklet was folded in half, the pages on the first and last side of a sheet differ by the number\n    # of sheets. For this sheet with page number 13 as the first page, as the sum of 58 indicates a page number\n    # of 16 on the other side, there must be (16 - 13) - 1 folds between the two, which equals 2 sheets.\n    # Including this sheet itself gives us total 3 sheets at the start.\n\n    return 3\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Arithmetic Sequence sum formula: S = n/2 * (a1 + an)\n    # For the increasing sequence: 4 + 8 + ... + 396 + 400\n    # The first term a1 is 4\n    # The common difference d is 4 (since it's increasing by 4 each time)\n    # The last term an is 400\n    # We need to find the number of terms n in the sequence\n\n    a1 = 4          # first term\n    an = 400        # last term\n    d = 4           # common difference\n    n = (an - a1) / d + 1  # number of terms (an = a1 + (n - 1) * d)\n    n = int(n)\n\n    # sum of the increasing sequence\n    S_increasing = n/2 * (a1 + an)\n\n    # Only the last term 400 is not repeated in the sequence that goes back down\n    # So subtract it from the last term in the next sequence\n    # The sequence 396 + ... + 12 + 8 + 4 is the same as the increasing one but without the last term 400\n    \n    S_decreasing = S_increasing - an  # Subtract the term 400, as it is not repeated\n    \n    # The final sum is the sum of both sequences\n    S_total = S_increasing + S_decreasing\n\n    return S_total\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Calculate the cost of one pencil\n    cost_per_pencil = 1.80 / 12\n    \n    # Calculate the cost of one pen based on the ratio\n    ratio_pen_to_pencil = 7 / 3\n    cost_per_pen = cost_per_pencil * ratio_pen_to_pencil\n    \n    # Calculate the cost of 5 pens\n    cost_of_5_pens = 5 * cost_per_pen\n    \n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n    combinations = drinks * food_items\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                continue\n            else:\n                unlocked += 1\n        elif i % 5 == 0:\n            unlocked += 1\n    return unlocked\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_spent = 12\n    pancakes_per_time_unit = 2 / 3\n\n    pancakes_cooked = time_spent * pancakes_per_time_unit\n\n    return int(pancakes_cooked)\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        ways = [0] * (steps + 1)\n        ways[0] = 1\n        ways[1] = 1\n\n        for i in range(2, steps + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        \n        return ways[steps]\n\n    # Count the ways to reach step 5\n    ways_to_5 = count_ways(5)\n    # Count the ways to reach step 10 from step 5\n    ways_from_5_to_10 = count_ways(10 - 5)\n\n    # Total ways is the product of the ways to reach step 5 and the ways from step 5 to step 10\n    total_ways = ways_to_5 * ways_from_5_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1/5\n\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for time\n    time_symb = symbols('t')\n\n    # We'll set the time when Simon's wife leaves as time zero\n    \n    # Simon's distance equation (distance = speed * time)\n    # Simon has an extra 15 km to cover before reaching his wife's starting point\n    simon_distance = Eq(80 * (time_symb + 6.10), 15)\n\n    # His wife's distance, she doesn't have the extra 15 km\n    wife_distance = Eq(60 * time_symb, 0)\n\n    # We want to find the time when Simon overtakes his wife, i.e., Simon's distance == Wife's distance + 15\n    # which simplifies to Simon's distance - 15 = Wife's distance\n    solution = solve((simon_distance, wife_distance), time_symb)\n\n    # Simon catches up with his wife after t hours from his wife's departure\n    catchup_time_in_hours = solution[time_symb]\n    catchup_time_in_minutes = catchup_time_in_hours * 60\n\n    # The wife left at 6.10 pm, so we need to add the catchup time to this\n    overtaking_time = 6.10 * 60 + catchup_time_in_minutes\n\n    # Convert overtaking time back to hours and minutes\n    overtaking_hour = int(overtaking_time) // 60\n    overtaking_minutes = int(overtaking_time) % 60\n    # The answer should be HH.MM format\n    ans = overtaking_hour + overtaking_minutes / 100.0\n\n    return ans\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    \n    meters_per_day = total_road / total_days\n    \n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # According to the Pigeonhole Principle, if n pigeons are to be placed into m pigeonholes and n > m,\n    # then at least one pigeonhole must contain more than one pigeon.\n\n    # In this case, each country represents a pigeonhole. We want to find the minimum number of participants\n    # (pigeons) such that at least one country (pigeonhole) has at least 9 participants (pigeons).\n\n    # If we have 8 participants per country (pigeonhole), we can distribute them evenly across the 18 countries\n    # and still not meet the condition of having at least 9 participants from one country.\n    # Therefore:\n    participants_per_country = 8\n    total_countries = 18\n\n    # Now we calculate the number of participants needed to ensure at least 9 participants from one country.\n    # We add 1 participant to the scenario where every country has exactly 8 participants.\n    # This extra participant would be the 9th participant for one of the countries.\n    total_participants = participants_per_country * total_countries + 1\n\n    return total_participants\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Time taken by each person to cross the river\n    times = [5, 5, 9, 7] # Jason, Chi Yew, Wei Jie, Michael\n    times.sort() # Ensure the list is sorted to facilitate the logical solution\n    \n    total_time = 0\n    \n    # While there are more than two people on the starting side\n    while len(times) > 1:\n        # If only two people are left, they both cross and we're done\n        if len(times) == 2:\n            total_time += max(times)\n            break\n        \n        # Option 1: Send the fastest two to bring the boat back and forth\n        cost1 = times[1] + times[0] + times[-1] + times[1]\n        \n        # Option 2: Send the fastest to escort the slowest and come back, twice\n        cost2 = times[-1] + times[0] + times[-2] + times[0]\n        \n        # Choose the option that is the cheapest\n        if cost1 < cost2:\n            # Send the two fastest people\n            total_time += times[1] # Time for second fastest to get across\n            total_time += times[0] # Time for fastest to get back\n            # Remove the two people who have crossed\n            times = times[2:]\n            total_time += times[-1] # Time for the fastest of remaining to get across with the boat\n            total_time += times[0] # Time for fastest to get back again\n        else:\n            # Send the slowest with the fastest\n            total_time += times[-1] # Time for slowest to cross with the boat\n            total_time += times[0] # Time for fastest to get back\n            # Remove the two people who have crossed\n            times = times[:-2]\n            total_time += times[-1] # Time for second slowest to cross with the boat\n            total_time += times[0] # Time for fastest to get back again\n    \n    # The last person's crossing time is already included\n    return total_time\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra wrote 88 instead of 98 by mistake, so we have the equation:\n    # 88 / A = 22\n    # Solving for A gives A = 88 / 22\n    A = 88 / 22\n    \n    # Now we need to find the correct answer using the right number, which is 98.\n    # So we calculate 98 / A\n    correct_answer = 98 / A\n    \n    # Return both the value of A and the correct answer\n    return A, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Let the first term of the sequence be x.\n    # The sum of an arithmetic sequence can be found by the formula: sum = n/2 * (first_term + last_term)\n    # We know that sum = 2014, n = 53 (number of terms)\n    # We need to find the last term. \n    # Since they are consecutive numbers, last_term = first_term + n - 1\n\n    # We can set up the equation: 2014 = 53/2 * (first_term + first_term + 53 - 1)\n    # Simplify the equation: 2014 = 53 * first_term + 53 * 26\n    # Solve for first_term: first_term = (2014 - 53 * 26) / 53\n\n    # Importing the math library for floor division\n    import math\n\n    first_term = (2014 - 53 * 26) // 53\n\n    # Once we have the first term, we can find the last term\n    last_term = first_term + 53 - 1\n\n    return last_term\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_savings = 1670\n    greatest_possible_savings = rounded_savings + 4\n    return greatest_possible_savings\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6  # laps per minute\n    miller_speed = 5 / 10  # laps per minute\n\n    speed_difference = lucas_speed - miller_speed\n\n    # Since Lucas overtakes Miller once every time the difference in laps equals 1,\n    # we calculate the time it takes for Lucas to be one whole lap ahead of Miller.\n    time_to_overtake = 1 / speed_difference\n\n    return time_to_overtake\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    number = 5217\n    divisor = 13\n\n    remainder = number % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours_to_minutes = 60\n    total_minutes = 2.5 * hours_to_minutes\n    return int(total_minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n    \n    children_fraction = 3/5\n    men_fraction = 1/4\n    \n    children_count = children_fraction * visitors\n    remaining_visitors = visitors - children_count\n    men_count = men_fraction * remaining_visitors\n\n    equation = Eq(children_count - men_count, 120)\n\n    visitors_count = solve(equation, visitors)\n\n    return visitors_count[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 80  # charge in cents for the first 15 minutes\n    additional_charge = 5  # charge in cents for each additional minute\n    total_cost = 140  # Total cost in cents\n    additional_cost = total_cost - base_charge  # Cost for additional minutes\n    \n    if additional_cost <= 0:\n        return 15  # The call lasted for exactly 15 minutes or less\n\n    additional_minutes = additional_cost // additional_charge  # Calculate the number of additional minutes\n\n    return 15 + additional_minutes  # Total number of minutes\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    orange_to_purple_ratio = 9.2  # ratio of the lengths of the orange string to the purple string\n    green_to_purple_difference_cm = 24.9  # length difference between green and purple string in centimeters\n\n    purple_length_m = orange_length_m / orange_to_purple_ratio\n    green_length_m = purple_length_m + green_to_purple_difference_cm / 100  # convert cm to m\n\n    return green_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    # Let Tim's current age be t (which is given as 8 years)\n    t = 8\n\n    # Let the mother's current age be m\n    # We need to find out m\n    \n    # Let's assume after x years, Tim's age will be the same as his mother's current age m\n    # So, after x years Tim's age will be t + x and his mother's age will be m + x\n    # According to the problem,\n    # m + x (Mother's age after x years) = 54 (Given in the problem)\n    \n    # So, the equation is \n    # Tim's future age (which will be equal to his mother's current age) = Tim's current age + x\n    # That is: m = t + x\n    # and\n    # Mother's age after x years = 54 = m + x\n    \n    # Now, we will find x first\n    # Since m = t + x\n    # We can say m - t = x\n    # And we have another equation m + x = 54 \n    \n    # From both equations, if we substitute m from the first equation to the second, we get:\n    # (t + x) + x = 54\n    # 2x + t = 54\n    # 2x = 54 - t\n    # x = (54 - t)/2\n    # Now substitute t = 8\n    # x = (54 - 8)/2\n    x = (54 - t) / 2\n    \n    # Now, we will find m using x\n    # m = t + x\n    m = t + x\n    \n    return m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    A, B = symbols('A B')\n    # Equation representing the puzzle:\n    #  A  \n    # BA     (which reads as B added to AB equals BAB; A and B are digits in base 10)\n    # ---\n    # BAB\n\n    # Converting the vertical form to an algebraic equation\n    eq = Eq(10*A + B + 10*B + A, 100*B + 10*A + B)\n\n    # Solving the equation\n    solution = solve(eq, (A, B))\n\n    # Returning the value of A\n    return solution[A]\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49.5)\n    equation2 = Eq(x, 5 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    longer_piece = solutions[x]\n    return round(float(longer_piece), 1)\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n\n    # In 18 days, without taking days off, Kevin and Ivy would finish...\n    work_done = combined_rate * 18\n\n    # If work done >= 1, they would have finished the job without any days off.\n    # But since the job is exactly completed, and Kevin took days off, we need to find those days.\n    # Let k be the days Kevin took off.\n    # Work done = Ivy's work for 18 days + Kevin's work for (18 - k) days.\n    # 1 = ivy_rate * 18 + kevin_rate * (18 - k)\n    # Solve for k\n    k = symbols('k')\n    equation = Eq(ivy_rate * 18 + kevin_rate * (18 - k), 1)\n    days_off = solve(equation, k)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_quantity = 36\n    apple_ratio = 4\n    orange_ratio = 5\n    \n    total_ratio = apple_ratio + orange_ratio\n    apple_juice = (apple_ratio / total_ratio) * total_quantity\n    \n    return apple_juice\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance_climbed = 0\n    day = 0\n    while total_distance_climbed < 25:\n        day += 1\n        total_distance_climbed += 4  # Climb during the day\n        if total_distance_climbed >= 25:\n            break  # Snail has climbed out of the well\n        total_distance_climbed -= 1  # Slide down at night\n\n    return day\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Deposits on odd days\n            total_money += 5\n        else:  # Spends on even days\n            total_money -= 8\n    \n    return total_money\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes Tim to write the book by himself\n    t = symbols('t')\n\n    # Nancy's rate of writing is 1/6 of the book per day\n    # Tim's rate of writing is 1/t of the book per day\n    # Together, their rate is 1/4 of the book per day\n\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t\n    tim_days = solve(equation, t)\n\n    return tim_days[0]  # Return the solution for Tim's days\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let the total amount of money Helen had at the start be x.\n    # She spends one-third of her money on a dress, so she is left with 2/3 of x.\n    # Then, she spends three-fifths of what is left on shoes, so she is left with 2/5 of 2/3 of x.\n    # If she has £40 left after the second spending, we have 2/5 of 2/3 of x = £40\n    # So, (2/5) * (2/3) * x = £40. We can solve this equation for x to find the total amount.\n\n    # Calculate the total amount (x)\n    total_amount = 40 * (5/2) * (3/2)\n\n    return total_amount\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are normally in Year 7\n    # When some Year 7 girls miss school, the number of pupils left is 400\n    # and 10% of these 400 pupils are in Year 7\n\n    remaining_pupils = 400\n    reduced_percentage = 0.10  # 10%\n    normal_percentage = 0.20   # 20%\n\n    # Let y be the number of Year 7 pupils who miss school\n    # Therefore, the remaining Year 7 pupils at school are:\n    # 20% of x - y = 10% of 400\n    # We can express y as:\n    # y = (normal_percentage * x) - (reduced_percentage * remaining_pupils)\n\n    # We need to solve for x where y is positive because y represents actual pupils\n    # Rearranging the formula:\n    # normal_percentage * x - reduced_percentage * remaining_pupils = y\n    # y > 0, so we can just take the left part of the equation:\n    # normal_percentage * x = reduced_percentage * remaining_pupils + y\n    # However, we know that normal_percentage * x = reduced_percentage * remaining_pupils\n    # as the number of year 7 pupils after girls leave is still the same as before girls leave.\n    # Hence, we get the following equation to solve for x:\n    # normal_percentage * x = reduced_percentage * remaining_pupils\n\n    # normal_percentage * x = reduced_percentage * remaining_pupils\n    # x = (reduced_percentage * remaining_pupils) / normal_percentage\n\n    ans = (reduced_percentage * remaining_pupils) / normal_percentage\n    return int(ans)\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    terms = [(1 / (1 * 2)), \n             (2 / (2 * 4)), \n             (3 / (4 * 7)), \n             (4 / (7 * 11)), \n             (5 / (11 * 16)), \n             (6 / (16 * 22)), \n             (1 / 22)]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    jump_up = 3\n    slide_down = 2\n    tree_height = 31\n    effective_jump = jump_up - (slide_down / 3)  # average progress after three jumps\n    jumps = ((tree_height - jump_up) // (effective_jump * 3)) * 3  # calculate sets of three jumps\n    remaining_height = tree_height - (jumps // 3) * effective_jump * 3\n\n    while remaining_height > 0:  # for the remaining height, continue jumping\n        jumps += 1\n        remaining_height -= jump_up  # make a jump\n        if remaining_height <= 0:  # if the top is reached, return the total number of jumps\n            break\n        remaining_height += slide_down  # slide down after jump\n\n    return jumps\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def find_factors(n, factor):\n        count = 0\n        while n > 0:\n            n //= factor\n            count += n\n        return count\n\n    numerator_zeros = find_factors(999, 5) - find_factors(300, 5)\n    ans = numerator_zeros\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    perimeter_students = 60\n    # Each side has one less than a quarter of the perimeter students (since corners are counted twice)\n    side_students = (perimeter_students + 4) // 4\n    # The total number of students is the square of the number of students on one side\n    total_students = side_students ** 2\n    return total_students\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknown initial number of buttons in box A and B\n    a, b = symbols('a b')\n    \n    # Ken added x buttons in box A for every 2 buttons removed from box B. \n    x = symbols('x')\n\n    # Equation 1: Initial number of buttons (A had 64 more than B)\n    equation1 = Eq(a, b + 64)\n\n    # Equation 2: Number of buttons removed from box B (B has 28 fewer than before)\n    equation2 = Eq(b - 2*x, b - 28)\n\n    # Equation 3: Final ratio of the total number of buttons to those in box B (4:1)\n    equation3 = Eq((a + x + (b - 2*x)), 4 * (b - 2*x))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, x))\n\n    # Get the initial number of buttons in box A\n    initial_buttons_in_a = solutions[a]\n\n    return initial_buttons_in_a\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n', integer=True))  # Even number represented as 2n\n\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n    # Search through solutions to find one that sums to less than 100\n    for sol in solutions:\n        if sum(sol) < 100 and sum(sol) % 2 == 0:\n            return sol\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length = 300\n    interval = 10\n    # Number of intervals would be equal to the number of bins - 1\n    # since bins are also placed on both ends of the boulevard\n    num_intervals = length // interval\n    # Number of bins = Number of intervals + 1 (for the bin at the beginning)\n    num_bins = num_intervals + 1\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number = int('26' + '2011' * n + '7')\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        layer_tiles = (layer * 2 - 1) ** 2\n        if total_tiles - layer_tiles < 0:\n            break\n        if layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        total_tiles -= layer_tiles\n        layer += 1\n\n    if total_tiles > 0:\n        if layer % 2 == 1:\n            red_tiles += total_tiles\n        else:\n            green_tiles += total_tiles\n\n    if red_tiles > green_tiles:\n        color = 'red'\n        difference = red_tiles - green_tiles\n    else:\n        color = 'green'\n        difference = green_tiles - red_tiles\n    \n    return color, difference\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_rounds = 12\n    total_cards_won = 24\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let the number of wins be x and losses be y\n    # We have two equations:\n    # x + y = total_rounds and\n    # cards_per_win * x + cards_per_loss * y = total_cards_won\n    # We can solve for y using these equations.\n\n    # From the first equation: y = total_rounds - x\n    # Substitute y in the second equation:\n    # cards_per_win * x - 2 * (total_rounds - x) = total_cards_won\n    # 4x - 2 * total_rounds + 2x = total_cards_won\n    # 6x = total_cards_won + 2 * total_rounds\n    # x = (total_cards_won + 2 * total_rounds) / 6\n\n    x = (total_cards_won + 2 * total_rounds) // (cards_per_win - cards_per_loss)\n    y = total_rounds - x\n    \n    return y\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # It takes 3 minutes to make 3 cuts to get 4 pieces.\n    # So it takes 1 minute per cut.\n    cuts_for_8_pieces = 8 - 1  # 7 cuts are needed to get 8 pieces\n    total_time = cuts_for_8_pieces * 1  # Each cut takes 1 minute\n    return total_time\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    X, Y, Z, rounds, discard = 20, 19, 18, 0, 0\n    while min(X, Y, Z) > 0:\n        max_coins = max(X, Y, Z)\n        \n        if X == max_coins:\n            X -= 3\n            Y += 1\n            Z += 1\n        elif Y == max_coins:\n            Y -= 3\n            X += 1\n            Z += 1\n        elif Z == max_coins:\n            Z -= 3\n            X += 1\n            Y += 1\n        \n        discard += 1\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chaiseng = symbols('rasidah chaiseng')\n\n    equation1 = Eq(chaiseng, rasidah + 48)\n    equation2 = Eq(rasidah * (2/5), (chaiseng * (1/7)) * 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chaiseng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    final_cards = (initial_cards - duplicates) + new_cards\n\n    return final_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Considering Amy and Judy as one person, we have 7 \"people\" to arrange\n    arrangements_of_7 = factorial(7)\n    \n    # Since Amy and Judy can switch places with each other, we multiply by 2\n    arrangements_of_Amy_Judy = 2\n    \n    # The total number of arrangements is the product of the above two\n    total_arrangements = arrangements_of_7 * arrangements_of_Amy_Judy\n    \n    # However, since the table is circular,\n    # we have to divide by the number of seats to account for rotational symmetry\n    total_arrangements = total_arrangements // 8\n\n    return total_arrangements\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x1, x2, x3 represent the number of lollipops on plate 1, 2, and 3\n    x1, x2, x3 = symbols('x1 x2 x3')\n\n    # since plates are identical and we don't care about the order \n    # just need to find solutions for non-negative integers\n    # for the equation x1 + x2 + x3 = 7\n    equation = Eq(x1 + x2 + x3, 7)\n\n    # solve the equation using sympy's nonlinsolve\n    # nonlinsolve is used instead of solve because it is better suited \n    # for systems of non-linear equations\n    solutions = solve(equation, dict=True)\n    \n    # Count the number of integer (including zero) \n    # solutions for the equation x1 + x2 + x3 = 7\n    # This is a problem of partitioning a number into at most 3 parts\n    # which can be solved by the formula of partitioning a number (n) into (k) parts:\n    # p(n+k,n)\n    # Here, we need to partition 7 into at most 3 parts, so k = 3 and n = 7\n    # resulting in p(7+3,7) = p(10,7), given p(a,b) is the partition of b into a parts.\n    # The generating function for this sequence is (1+x+x^2+x^3+⋯)(1+x^2+x^4+⋯)(1+x^3+x^6+⋯)\n    # We can find this by generating the possible exponents for each binomial factor and sum for x^7.\n    \n    # Initialize a list to capture the exponents for x that sum up to 7\n    exp_counts = [0] * (7 + 1)\n    \n    # We need to iterate over each factor, i.e., (1+x+x^2+x^3+⋯), (1+x^2+x^4+⋯), (1+x^3+x^6+⋯)\n    # So, we create exponents for these sequences\n    for i in range(0, 8):\n        for j in range(0, 8, 2):\n            for k in range(0, 8, 3):\n                if i + j + k <= 7:\n                    exp_counts[i + j + k] += 1\n\n    # The result for x^7 will be stored at index 7 of exp_counts\n    return exp_counts[7]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Andy had 84 fewer cookies than Ben at first\n    equation1 = Eq(andy_initial, ben_initial - 84)\n\n    # After buying more cookies\n    andy_final = andy_initial + andy_initial / 3\n    ben_final = ben_initial + ben_initial / 5\n\n    # Andy had 1/3 as many cookies as Ben in the end\n    equation2 = Eq(andy_final, ben_final / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Extract the solution\n    andy_final_cookies = solutions[andy_initial] + solutions[andy_initial] / 3\n\n    return andy_final_cookies\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd # Greatest Common Divisor (GCD) is the same as Greatest Common Factor (GCF)\n    \n    pencils = 56\n    pens = 60\n    \n    # The most students is determined by the greatest common factor of the number of pencils and pens.\n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n    bella_years = 5\n\n    # Calculate the amount using compound interest formula A = P * (1 + r/n)^(nt)\n    # Compound interest formula for annual compounding: A = P * (1 + r)^(t)\n    # Since no information mentions compounding frequency, assume annual compounding\n    years = 0\n    while principal < final_amount:\n        principal += principal * rate\n        years += 1\n\n    is_correct = (years == bella_years)\n    if is_correct:\n        return (is_correct, 0)  # Bella is correct\n    else:\n        return (is_correct, years)  # Bella is incorrect, return actual years\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # This is the pattern recognition of the sequence: odd numbers are increasing by 1, even numbers are decreasing by 1.\n    # Let's find the 6th term in the sequence\n\n    # Starting values for the sequence\n    odd_number = 20  # last odd number in the sequence\n    even_number = -15  # last even number in the sequence\n\n    # Since the last number is 20 and it's an odd position, the next number is at an even position\n    next_even_number = even_number - 1\n    \n    return next_even_number\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since Tom raised his hand both times, his number is divisible by 24.\n    # As Tom's friends either know their number is divisible by the secret number Mr. Tan wrote,\n    # or not divisible, and 4 raised their hands, the secret number must have exactly 4 multiples\n    # in the two-digit range.\n    # Finding the two-digit multiples of 24.\n    multiples_of_24 = [i for i in range(24, 100, 24)]\n    # Find possible secret numbers (2-digit) that have exactly 4 two-digit multiples.\n    possible_secrets = [i for i in range(10, 100) if 9999 // i - 9 // i == 4]\n    # Eliminate those that have multiples in common with 24.\n    possible_secrets = [i for i in possible_secrets if not any(m % i == 0 for m in multiples_of_24)]\n    # Now find the union of multiples of 24 and one of the found secrets.\n    possible_numbers = set(multiples_of_24)\n    for secret in possible_secrets:\n        possible_numbers.update(i for i in range(secret, 100, secret))\n    # Since there are 6 students raising their hands for 24, 3 numbers are not multiples of 24.\n    # We remove the lowest 3 multiples of 24 to account for those not raising their hands.\n    possible_numbers.difference_update(multiples_of_24[:3])\n    # Calculate the sum of possible numbers, excluding Tom's own (a multiple of 24).\n    sum_of_possible_numbers = sum(possible_numbers) - multiples_of_24[0]\n    \n    return sum_of_possible_numbers\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Calculate the equivalent fraction's denominator\n    # Using the property of equivalent fractions: a/b = x/y => a*y = x*b\n    new_denominator = new_numerator * original_denominator / original_numerator\n    \n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Known quantities\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Inclusion-Exclusion Principle to find the maximum possible number of students\n    # who could have passed all three.\n    # At most students passing all three = Total - (Sum of pass in each - total number of students passing at least one)\n    max_all_three_pass = (math_pass + science_pass + english_pass) - at_least_one_pass\n\n    return max_all_three_pass\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    ways = 0\n    # Since each pencil case cannot be empty, we start with one pen in each case\n    for x1 in range(1, 6 - 2 + 1):\n        for x2 in range(1, 6 - x1 - 1 + 1):\n            x3 = 6 - x1 - x2\n            if x1 >= 1 and x2 >= 1 and x3 >= 1:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create four symbols representing the numbers.\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Given that the numbers are arranged in descending order.\n    # a > b > c > d and are all distinct positive whole numbers.\n    \n    # The sum of the smallest number and the average of the other three numbers is 39.\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    # The sum of the largest number and the average of the other three numbers is 51.\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # We also know that the sum of three times the largest number and the other three numbers is\n    # 3 times 51 and the sum of three times the smallest number and the other three numbers is\n    # 3 times 39. This is because we found the sums with their averages multiplied by 3.\n    equation3 = Eq(3*equation2.lhs - (b + c + d), 3*equation2.rhs)\n    equation4 = Eq(3*equation1.lhs - (a + b + c), 3*equation1.rhs)\n\n    # We can now simplify by subtracting the 4th equation from the 3rd.\n    # This gives us an equation involving only 'a' and 'd'.\n    simplified_eq = Eq(equation3.lhs - equation4.lhs, equation3.rhs - equation4.rhs)\n\n    # Solve the simplified equation for 'a'.\n    # We don't care about 'd' for finding the largest possible value of the largest number,\n    # so we can ignore 'd' in our equations.\n    a_value = solve(simplified_eq, a)[0]\n\n    # Now, 'a' will be maximized when 'd' is minimized, given that a > b > c > d.\n    # Hence, we start with d = 1 and increment it to find the smallest 'd' that still\n    # satisfies 'a' being an integer and a > b > c > d.\n    d = 1\n    while True:\n        a_val = a_value.subs('d', d)\n        if a_val.is_integer and a_val > d + 2:  # d + 2 is the next smallest integer after 'd'\n            break\n        else:\n            d += 1\n    \n    # The largest possible value of the largest number is when 'd' is minimized.\n    return a_val\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's symbolize the distance between school and home as 'd'\n    d = symbols('d')\n    \n    # Ahmad's speed is 80m/min, his brother's is 50m/min.\n    # Assume that the time Ahmad takes to reach the meeting point after turning back is 't'.\n    # In the same 't' minutes, his brother would have covered 50t meters.\n    # The difference in their distances would therefore be 210 meters.\n\n    # When Ahmad met his younger brother, Ahmad would have traveled d + (d - 210)\n    # And his brother would have traveled d - 210.\n    # Also, since Ahmad travels 80m/min and his brother 50m/min, the time they travel until they meet can be set equal.\n    # Ahmad travels the whole distance to school plus back to the meeting point: (d/80) + ((d - 210)/80)\n    # His brother travels to the meeting point: (d - 210)/50\n    \n    # Hence the equation representing the situation is:\n    # (d/80) + ((d - 210)/80) = (d - 210)/50\n    \n    equation = Eq((d/80) + ((d - 210)/80), (d - 210)/50)\n    \n    # Now, solve the equation for 'd'\n    solution = solve(equation, d)\n    \n    # Return the distance between the school and their home\n    return solution[0]\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    largest = 0\n    smallest = 99999\n    \n    for num in range(10000, 100000):\n        if num % 45 == 0 and str(num) == str(num)[::-1]:\n            largest = max(largest, num)\n            smallest = min(smallest, num)\n    \n    ans = largest - smallest\n\n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f'572{A}')\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    place_value_first_8 = 8 * 1000  # The first 8 is in the thousands place\n    place_value_second_8 = 8 * 100   # The second 8 is in the hundreds place\n    difference = place_value_first_8 - place_value_second_8\n    return difference\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    n = 40309\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length1 = 16\n    length2 = 24\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n\n    return total_sheep\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    \n    hours_needed = desired_earnings / hourly_rate\n    \n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n    \n    # Mean score of top 3 students is 92; sum is 3 * 92\n    sum_top_3 = 3 * 92\n    \n    # Mean score of last 7 students is x - 6; sum is 7 * (x - 6)\n    sum_last_7 = 7 * (x - 6)\n    \n    # Total sum of scores for all 10 students is 10 * x\n    # This is equal to the sum of the top 3 and last 7 students\n    equation = Eq(sum_top_3 + sum_last_7, 10 * x)\n    \n    # Solve for x\n    mean_score = solve(equation, x)[0]\n    \n    return mean_score\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # This is the given situation:\n    # biscuits % 5 = 1; biscuits % 6 = 2; biscuits % 11 = 7\n\n    # Now we want to find a common number that satisfies these conditions:\n    # For Step 1: The common supplement is the list of remainders.\n    remainders = [(1, 5), (2, 6), (7, 11)]\n\n    # For Step 2: Finding the LCM by solving the congruences\n    biscuit_count, lcm = solve_congruence(*remainders)\n\n    # LCM is not directly necessary for finding the solution, but it is part of the\n    # Chinese Remainder Theorem process. We get it as part of solving the congruences.\n\n    # For Step 3: The final answer is the biscuit count which satisfies all\n    # condition mentioned in the problem.\n    # It's the unknown in the Chinese Remainder Theorem context.\n\n    # Lastly, we verify the number is less than 500\n    while biscuit_count < 500:\n        return biscuit_count\n        # In a real CRT calculation scenario, we might loop through the solution adding the lcm each time\n        # until we find a solution that meets all the problem's requirements. But here we expect only one\n        # solution to be less than 500 due to the problem constraints so we don't loop.\n        biscuit_count += lcm\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                if perm[0] != '0' and all(abs(int(perm[i]) - int(perm[i + 1])) == 1 for i in range(3)):\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bag_marbles = [19, 21, 27, 32, 37, 40]  # Number of marbles in each bag\n    red_marbles = 0  # Variable to store the number of red marbles\n\n    for red_bag in bag_marbles:\n        other_bags = [marbles for marbles in bag_marbles if marbles != red_bag]\n        for i in range(1, len(other_bags)):  # Choose different combinations for Jaslin's bags\n            # Get all possible combinations for Jaslin by selecting i bags\n            for jaslin_bags in itertools.combinations(other_bags, i):\n                george_bags = [marbles for marbles in other_bags if marbles not in jaslin_bags]\n                # If Jaslin gets twice as many marbles as George\n                if sum(jaslin_bags) == 2 * sum(george_bags):\n                    red_marbles = red_bag\n                    break\n            if red_marbles:  # if we found the number of red marbles break the loop\n                break\n        if red_marbles:  # if we found the number of red marbles break the loop\n            break\n\n    return red_marbles\n\nimport itertools\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let Beth's sweets be b, and Andre's sweets be a.\n    # From the question, it is known that:\n    # 1. a + b = 24 (before the teacher gave them sweets)\n    # 2. a + 4 = b + 4 + 6 (after the teacher gave them sweets)\n    # By simplifying the second equation:\n    # a - b = 6\n    # Now we can solve these two equations to find the values of a and b.\n\n    # Value from the first equation\n    total_sweets_before = 24\n\n    # Value from the second equation after simplification\n    sweet_difference = 6\n\n    # Now we'll solve the two linear equations:\n    # a + b = total_sweets_before\n    # a - b = sweet_difference\n\n    # Adding the two equations:\n    # 2a = total_sweets_before + sweet_difference\n    # a = (total_sweets_before + sweet_difference) / 2\n    a = (total_sweets_before + sweet_difference) / 2\n\n    # Substitute the value of a in the first equation to find b\n    # b = total_sweets_before - a\n    b = total_sweets_before - a\n\n    # Finally, add 4 sweets to Beth's initial amount to get her current amount\n    beth_current_sweets = b + 4\n\n    return int(beth_current_sweets)\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 3/5  # After selling 2/5, Will has 3/5 left\n    remaining_apples = 150\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # The sum of these five consecutive even numbers is 5x + 20\n    # According to the problem statement, this sum is 100\n    # So, 5x + 20 = 100\n    # Now, we solve for x\n    x = (100 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # speed in km/h\n    distance = speed * 3  # distance traveled in 3 hours\n    return distance\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    first_post = 1\n    fifteenth_post = 15\n    distance_per_jump = 3\n    \n    num_jumps = fifteenth_post - first_post\n    total_distance = num_jumps * distance_per_jump\n    \n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from math import factorial\nfrom fractions import Fraction\n\ndef count_even_arrangements():\n    # There are 6 blocks, and thus 5 spaces between pairs, and these can be 0, 2, or 4.\n    # We will choose 3 positions out of 5 to place our pairs, using 3 blocks of the same color, which can be arranged in 2! ways.\n    # The remaining 3 positions will be filled with the 3 blocks of the other colors, which can be arranged in 3! ways.\n    return factorial(5) // factorial(2) * factorial(2) * factorial(3)\n\ndef solution():\n    total_even_arrangements = 0\n    # For each color, calculate the number of different even arrangements and sum them up.\n    for i in range(6): # One of the 6 pairings of colors\n        total_even_arrangements += count_even_arrangements()\n        \n    # Total possible arrangements\n    total_arrangements = factorial(12) // (factorial(2)**6)\n    \n    # Calculate the probability\n    probability = Fraction(total_even_arrangements, total_arrangements)\n    \n    # Simplify the fraction to get m and n\n    m, n = probability.numerator, probability.denominator\n    \n    # Return the sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits\n    total_friends = 6  # Number of friends\n\n    fruits_per_friend = total_fruits // total_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Alan and Bob's combined rate\n    combined_rate = 1 / 4\n    # Bob's individual rate\n    bob_rate = 1 / 6\n    # Alan's individual rate (x)\n    # 1/x + 1/6 = 1/4\n    # Solving for Alan's rate (x)\n    alan_rate = 1 / (1 / combined_rate - 1 / bob_rate)\n    return alan_rate\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    p_rain_saturday = 0.7\n    p_rain_sunday = 0.5\n    p_no_rain_saturday = 1 - p_rain_saturday\n    p_no_rain_sunday = 1 - p_rain_sunday\n    \n    p_no_rain_both_days = p_no_rain_saturday * p_no_rain_sunday\n    p_rain_at_least_one_day = 1 - p_no_rain_both_days\n\n    return p_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    difference = 6\n    samantha_pencils = matthew_pencils - difference\n    return samantha_pencils\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    a_rate = 1 / 36 # Inlet A filling rate per minute\n    b_rate = 1 / 48 # Inlet B filling rate per minute\n    \n    fill = 0\n    minute = 0\n    cycle_length = 6 #\n    cycle_a_time = 2 # A is open for 2 minutes in the cycle\n    cycle_b_time = 4 # B is open for 4 minutes in the cycle\n    \n    # Calculate the filling rate for a complete cycle\n    cycle_rate = (a_rate * cycle_a_time) + (b_rate * cycle_b_time)\n    \n    # If we can't fill the pool in one cycle, calculate how many complete cycles we need\n    while fill < 1:\n        minute += cycle_length # Time for each cycle\n        fill += cycle_rate # Amount of pool filled each cycle\n        if fill >= 1:\n            # If the pool is filled during the last cycle, subtract the extra time\n            extra_fill = fill - 1\n            if extra_fill > (a_rate * cycle_a_time): # Check if it's B's cycle part to be reverted\n                extra_fill -= (a_rate * cycle_a_time)\n                # Revert B's time\n                minute -= (extra_fill / b_rate)\n            else:\n                # It's A's cycle part to be reverted\n                minute -= (extra_fill / a_rate)\n            fill = 1 # The pool is filled\n\n    # If there's a fraction of a minute, we should round up to the nearest minute\n    return int(minute) if minute == round(minute) else int(minute) + 1\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_questions = 10\n    points_correct = 10\n    points_incorrect = -3\n    total_points = 48\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros = 28\n    n = 1\n    factor_5 = 0\n\n    while factor_5 < zeros:\n        n += 1\n        k = n\n        while k % 5 == 0:\n            factor_5 += 1\n            k //= 5\n\n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bottles_initial = 10\n    borrowed_bottle = 1\n\n    total_bottles = bottles_initial + borrowed_bottle\n    drank = 0\n\n    while total_bottles >= 2:\n        new_bottles = total_bottles // 2\n        drank += new_bottles\n        total_bottles = new_bottles + total_bottles % 2\n\n        if total_bottles == 1 and borrowed_bottle == 1:\n            total_bottles = 0  # He has to return the borrowed bottle.\n\n    return drank + bottles_initial  # Include the initial bottles bought.\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let x be the number of minutes after which A's waterline will be 3 times B's\n    # Therefore, the volume (height*base) drained in A = 1/10 * x\n    # And the volume (height*base) drained in B = 1/6 * x\n    # The ratio of the remaining water in A to B is A/B = 3\n    # (1 - 1/10*x) / (1 - 1/6*x) = 3\n    # Simplifying the equation we get:\n    # (60 - 6*x) / (60 - 10*x) = 3\n    # 60 - 6*x = 3 * (60 - 10*x)\n    # 60 - 6*x = 180 - 30*x\n    # 24*x = 120\n    # x = 5 minutes\n    x = 120 / 24\n    return x\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n    \n    # Since Vanessa is 10th from the front, there are 9 children in front of her.\n    # Andrea, being 12th from the back implies there are 11 children in front of Andrea.\n    # To find number of children in between, we use the total number of children,\n    # and subtract positions in front of Vanessa and Andrea, and exclude Vanessa and Andrea themselves.\n    \n    children_between = total_children - (vanessa_position_from_front + andrea_position_from_back - 1)\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    weeks = 7\n    initial_sweets = 320\n    final_sweets = 348\n    bought_per_week = 30 * weeks\n\n    total_sweets = initial_sweets + bought_per_week\n    eaten_per_week = (total_sweets - final_sweets) // weeks\n\n    return eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        if (281 * 10 + digit) % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = total_path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # In a clock, there are 12 distinct positions.\n    # When minute hand is on 1, the hour can be on any of the 11 remaining positions (excluding the one where the minute hand is).\n    # Thus, there are 11 valid combinations for each unique position of the minute hand.\n    # And since the minute hand also has 12 distinct and unique positions, there will be 11 * 12 combinations in total.\n\n    ans = 11 * 12\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours\n    late_time_h = 12 / 60\n    early_time_h = 8 / 60\n    \n    # Let the distance between home and office be 'd' km\n    # Time to travel at 3 km/h if on time = d / 3 hours\n    # Time to travel at 7 km/h if on time = d / 7 hours\n\n    # Hence, when late, time taken = (d / 3) + 12/60 hours\n    # When early, time taken = (d / 7) - 8/60 hours\n    # Given, (d / 3) + 12/60 = (d / 7) - 8/60\n    # Solving the equation for d\n\n    # Inverse proportions with respect to speed and time with the time difference being constant\n    # d/3 - d/7 = late_time_h + early_time_h\n\n    d = (3 * 7 * (late_time_h + early_time_h)) / (3 - 7)\n\n    return d\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    chenxi_extra_sweets = 5\n    sweets_transferred = 10\n\n    difference_after_transfer = (chenxi_extra_sweets + sweets_transferred) - 2 * sweets_transferred\n\n    return difference_after_transfer\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    \n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for prime in range(2, 69):\n        if isprime(prime) and isprime(69 - prime):\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let original number of students in school A be x\n    # Then original number of students in school B will be 1050 - x\n    # After transfer, school A will have x - 20 students\n    # After transfer, school B will have (1050 - x) + 20 students\n    # Given that after transfer, school A still has 10 more students than school B\n    # We get the equation: (x - 20) = ((1050 - x) + 20) + 10\n    # Solve this equation for x\n    \n    x = symbols('x')\n    equation = Eq((x - 20), ((1050 - x) + 20) + 10)\n\n    original_students_a = solve(equation, x)[0]\n    return original_students_a\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Considering the order of operations, to maximize the result we need to\n    # maximize the effect of multiplication and minimize the subtractions\n    # Maximize the first product using the first addition, and then bracket the remaining addition and subtraction\n    # This leads to two options: (15+5)*5+(15)-(6+7) and (15+(5*5)+15)-6+7\n    # We calculate both and return the larger result\n\n    option1 = (15+5)*5+(15)-(6+7)\n    option2 = (15+(5*5)+15)-6+7\n\n    return max(option1, option2)\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_questions = 10\n    correct_points = 10\n    incorrect_points = -5\n    total_points = 70\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_points:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_class = 10\n\n    only_writing_class = total_students - math_students - neither_class + both_classes\n\n    return only_writing_class\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = ['0', '8', '0', '7', '2', '0', '0', '3']\n    primes_less_than_50 = [i for i in range(2, 50) if isprime(i)]\n\n    for prime in sorted(primes_less_than_50, reverse=True):\n        prime_digits = list(str(prime))\n        temp_digits = digits.copy()\n        for digit in prime_digits:\n            if digit in temp_digits:\n                temp_digits.remove(digit)\n            else:\n                break\n        else:\n            return prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # Total sum of the five numbers\n    total_sum_five_numbers = 5 * 54\n    # Total sum of the first two numbers\n    total_sum_first_two_numbers = 2 * 48\n    # Total sum of the last three numbers\n    total_sum_last_three_numbers = total_sum_five_numbers - total_sum_first_two_numbers\n    # Average of the last three numbers\n    average_last_three_numbers = total_sum_last_three_numbers / 3\n\n    return average_last_three_numbers\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    return sum(range(1, 18, 2))\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    max_slices = sum(range(1, 5))  # 1+2+3+4\n    return max_slices\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    teddy, father = symbols('teddy father')\n    \n    # When Teddy was 5, his father's age was 7 times his age\n    equation1 = Eq(father, 7 * 5)\n    \n    # The difference in age will always be the same\n    age_difference = father - teddy\n    \n    # When father is 40, how old will Teddy be?\n    equation2 = Eq(age_difference, 40 - teddy)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (teddy, father))\n\n    return solutions[teddy]\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from fractions import Fraction\n\n    # Adriana's calculation for the proportion of girls\n    girls_portion = Fraction(1, 5) * Fraction(5, 7)  # This should be 5/7 instead of 2/7\n\n    # Correct calculation for the difference in proportion between adults and girls\n    adults_portion = Fraction(2, 7)\n    difference_portion = adults_portion - girls_portion\n\n    # Given that the difference represents 80 more adults than girls\n    total_people = 80 / difference_portion\n\n    return total_people\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 110):\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    # The rabbit is to the right of the elephant\n    rabbit_position_from_left = elephant_position_from_left + toys_between_rabbit_and_elephant + 1\n\n    # Calculate the rabbit's position from the right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1 \n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    # Given area of the triangle\n    area = 54\n    # Given base length of the triangle\n    base = 9\n\n    # Use the formula for the area of a triangle: area = 0.5 * base * height\n    # Solving for height: height = (2 * area) / base\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let's denote the number of pink dolphins as x.\n    # The number of gray dolphins would then be 11 * x.\n    # The total number of dolphins is the sum of pink and gray dolphins, which equals 48.\n    # Therefore, we have the equation x + 11 * x = 48.\n    # Simplify the equation to get 12 * x = 48.\n    # Thus, x = 48 / 12.\n    \n    x = 48 / 12\n    \n    # Return the number of pink dolphins\n    return x\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # We can simplify the fraction before taking the remainder\n    # Notice that 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    # So 4^982 - 2^1963 = 2^1963 * (2 - 1) = 2^1963\n    # We need to find the remainder of (2^2019 / 2^1963) % 5 = 2^(2019-1963) % 5\n\n    exponent_diff = 2019 - 1963\n\n    # Now calculate 2^exponent_diff and take modulo 5:\n    remainder = (2 ** exponent_diff) % 5\n\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of tables and chairs be 't'\n    t = symbols('t')\n\n    # After selling 42 tables: t - 42\n    # After bringing in 24 more chairs: t + 24\n    # Number of chairs will be 4 times as many as tables: 4 * (t - 42)\n\n    equation = Eq(t + 24, 4 * (t - 42))\n\n    # Solve for the value of 't'\n    original_chairs = solve(equation, t)\n\n    return original_chairs[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 0.35 * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be 1-9\n        for tens in range(0, 10):  # Tens digit must be 0-9\n            for ones in range(0, 10, 2):  # Ones digit must be even, so 0-8 by steps of 2\n                if hundreds + tens + ones == 7:  # Check if the sum of the digits is 7\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    max_number = 0\n    for i in range(10):\n        for j in range(10):\n            number = 4900 + i * 10 + j\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                max_number = max(max_number, number)\n    return max_number\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n+1)**2) // 4\n    sum_of_integers = n * (n+1) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    kristoff_olaf_ratio = 5.5\n    olaf_height = ana_height - 116\n    kristoff_height = kristoff_olaf_ratio * olaf_height\n    height_difference = kristoff_height - ana_height\n    return height_difference\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(motorcycles + cars + lorries, 27)   # Total number of vehicles\n    equation2 = Eq(2*motorcycles + 4*cars + 6*lorries, 96)  # Total number of wheels\n    equation3 = Eq(cars, lorries)   # Number of cars equals the number of lorries\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let j be the mass of the jar (empty) and c be the mass of one chocolate\n    jar_plus_5chocos = 185  # mass of jar with 5 chocolates\n    jar_plus_17chocos = 317  # mass of jar with 17 chocolates\n\n    # We have two equations based on the given information:\n    # j + 5c = 185 and j + 17c = 317\n\n    # We want to find the mass of the jar with 10 chocolates: j + 10c\n\n    # Let's solve the two equations to find the values for j and c\n    # Subtract the first equation from the second to eliminate j\n    c = (jar_plus_17chocos - jar_plus_5chocos) / (17 - 5)  # Find the mass of one chocolate\n\n    # Use the value of c to calculate the mass of the jar j\n    j = jar_plus_5chocos - 5 * c  # Find the mass of the jar\n\n    # Now calculate mass of the jar with 10 chocolates\n    jar_plus_10chocos = j + 10 * c\n    return int(jar_plus_10chocos)\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    ans = 3.05 - 1/10\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700  # Total weight of the sugar solution\n    sugar_concentration = 0.32  # Sugar concentration in the solution\n    sugar_weight = total_weight * sugar_concentration  # Weight of the sugar in the solution\n    water_weight = total_weight - sugar_weight  # Weight of the water in the solution\n    return water_weight\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    road_length = 800\n\n    # One less interval than the number of trees\n    num_intervals = total_trees - 1\n\n    # Distance between trees is the road length divided by the number of intervals\n    distance_between_trees = road_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    cost_apples = 0.6  # cost of each apple\n\n    # John bought 4/5 as many pears as apples -> pears = (4/5) * apples\n    eq1 = Eq(pears, (4 / 5) * apples)\n    \n    # John bought 2/5 as many mangoes as apples -> mangoes = (2/5) * apples\n    eq2 = Eq(mangoes, (2 / 5) * apples)\n\n    # The ratio of the amount of money spent on apples to pears is 3:2\n    # Let's assume total cost of apples is 3x and total cost of pears is 2x\n    total_cost_apples = 3 * cost_apples * apples\n    total_cost_pears = 2 * (total_cost_apples / 3) * (5 / 4)\n    \n    # The ratio of the amount of money spent on pears to mangoes is 1:5\n    # Total cost of pears is 2x and total cost of mangoes is 5y\n    # Since 1 portion of pears cost equals 5 portions of mangoes cost\n    # 2x = 5y -> y = (2/5)x  and y is cost per mango\n    cost_per_mango = (2 / 5) * (total_cost_apples / 3) * (5 / 4)\n\n    # Total cost for mangoes is 10 * cost_per_mango * number of mangoes\n    total_cost_mangoes = 10 * cost_per_mango * mangoes\n\n    # She paid a total of 150 for all fruits\n    eq3 = Eq(total_cost_apples + total_cost_pears + total_cost_mangoes, 150)\n\n    solutions = solve((eq1, eq2, eq3), (apples, pears, mangoes))\n    \n    # total number of fruits John bought\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n\n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_total = 366\n    second_half_avg = 65\n    months_in_half_year = 6\n    second_half_total = second_half_avg * months_in_half_year\n    \n    total_for_year = first_half_total + second_half_total\n    months_in_year = 12\n\n    avg_per_month = total_for_year / months_in_year\n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n\n    while b:\n        a, b = b, a % b\n    \n    return a\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # For the number to be divisible by 2, the last digit must be even.\n    # For the number to be divisible by 5, the last digit must be 0 or 5.\n    # For the number to be divisible by 3, the sum of all digits\n    # must be a multiple of 3.\n    # For the number to be divisible by 11, the difference between the sum of \n    # the digits in the odd positions and the sum of the digits in the even \n    # positions must be a multiple of 11.\n\n    # Since the number is divisible by both 2 and 5, its last digit must be 0.\n    # We now need to find the middle two digits such that the resulting number\n    # is divisible by both 3 and 11.\n    \n    # The sum of the digits we already know is 1+9+9+2 = 21.\n    # To be divisible by 3, the sum of all digits must add up to a multiple of 3.\n    # Since there are two digits missing and we already have a sum of 21 which is \n    # a multiple of 3, we only need to make sure that the sum of the two digits is \n    # a multiple of 3 to maintain the divisibility by 3.\n    \n    # For divisibility by 11, the alternating sum should be a multiple of 11.\n    # With 1992_xxx0 already in place, we need to find x such that the alternating\n    # sum (1 - 9 + 9 - 2 + x1 - x2 + x3 - 0) is a multiple of 11.\n    \n    # Since the pattern of subtraction and addition alternates and there are \n    # an even number of digits, we can simply make the sum of x1-x2+x3 a multiple \n    # of 11 and add or subtract 1-9+9-2 to/from it to satisfy the condition.\n    \n    # x1 is in the odd position, x2 is in the even position, and x3 is also\n    # in the odd position (but x3 must be 0).\n    \n    # To minimize the value, we try to find the smallest x1 and x2 that satisfy\n    # the conditions; that is, (x1 - x2 + 0) should be a multiple of 11 and \n    # x1 + x2 should be a multiple of 3.\n\n    smallest_number = 0  # Initializing the smallest number.\n\n    # As we've established that x3 must be 0, we can iterate through possible\n    # values for x1 and x2 that are multiples of 3 and check divisibility by 11.\n    for x1 in range(10):\n        for x2 in range(10):\n            if (x1 + x2 + 21) % 3 == 0 and (x1 - x2 - (1 - 9 + 9 - 2)) % 11 == 0:\n                smallest_number = int(f\"1992{x1}{x2}0\")\n                break\n        if smallest_number:\n            break\n\n    return smallest_number\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    profit = 440\n\n    # Calculate the number of pairs sold to earn the profit\n    pairs_sold = profit // (selling_price_per_pair - cost_price_per_pair)\n\n    # Calculate initial number of pairs by adding the remaining pairs\n    initial_pairs = pairs_sold + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    duration = timedelta(hours=1, minutes=45)  # musical duration is half at 5:30 PM\n    start_time = end_time - duration\n\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Average score of 6 assignments is 92\n    # Therefore, total score for 6 assignments is 6 times average = 6 * 92\n    total_6_assignments = 6 * 92\n\n    # Average score of first 5 assignments is 94\n    # Therefore, total score for first 5 assignments is 5 times average = 5 * 94\n    total_5_assignments = 5 * 94\n\n    # Score of the sixth assignment is then the difference between total score of 6 assignments\n    # and total score of 5 assignments\n    sixth_assignment_score = total_6_assignments - total_5_assignments\n\n    return sixth_assignment_score\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_at_end = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_at_beginning = cars_at_end - cars_entered + cars_exited\n\n    return cars_at_beginning\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number we're trying to find\n    x = symbols('x')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(((x*2)/4)**2 - 4, 6*10)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    first_day_fill = 3\n    days = 1\n    current_water = first_day_fill\n    \n    while current_water < total_water_needed:\n        current_water -= leak_rate\n        current_water += fill_rate\n        days += 1\n        \n    return days\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    digits_written = 0\n    \n    # Keep writing digits until we run out of time\n    while digits_written + len(str(current_number)) <= total_seconds:\n        digits_written += len(str(current_number))\n        if digits_written < total_seconds:\n            current_number += 1\n    \n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n\n    return max(amounts) - min(amounts)\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # In the worst case, Darrell draws all the non-green marbles before a green one.\n    # Number of non-green marbles\n    non_green_marbles = 5 + 9 + 2  # blue + white + black\n    \n    # In the worst case, he will have to draw all non-green marbles plus one green marble\n    draws_for_first_green = non_green_marbles + 1\n    \n    return draws_for_first_green\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance_climbed = 6 * 6 + 2  # 6 metres for the first 6 days and 2 metres on the 7th day\n    well_height = 20\n    # Since the snail climbs out on the 7th day, the slide down amount only applies to the first 6 nights\n    # Calculate the total distance slid down during the first 6 nights\n    total_distance_slid = total_distance_climbed - well_height\n    # Calculate the distance slid down each night\n    nightly_slide = total_distance_slid / 6\n    return nightly_slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a round robin tournament with 8 players, each player plays against every other player once.\n    # So each player plays 7 matches.\n    # For a single round robin tournament, the maximum number of wins is equal to the number of players minus one.\n    # This is because each match has a winner, and no two players can have the same number of wins.\n    # Hence, the champion, who is the player with the maximum number of wins, has 7 wins.\n\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Minah's rate of making curry puffs per hour\n    hours_for_120_puffs = 120 / puffs_per_hour  # Time taken to make 120 curry puffs\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let the walking speed of Candy be x meters per minute\n    # Then the walking speed of Ivy is x + 20 meters per minute\n    \n    # Candy walks for 12 minutes when they meet\n    # Ivy walks for 6 + 12 = 18 minutes when they meet\n    \n    # Distance covered by Candy is 12 * x\n    # Distance covered by Ivy is 18 * (x + 20)\n\n    # The total distance is the sum of distances covered by both\n    # 12 * x + 18 * (x + 20) = 1200\n\n    # Simplify and solve for x\n    x = symbols('x')\n    equation = Eq(12 * x + 18 * (x + 20), 1200)\n    \n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for a in range(1, 14):\n        for b in range(1, 14):\n            for c in range(1, 14):\n                d = 13 - (a + b + c)\n                if d > 0:\n                    max_product = max(max_product, a*b*c*d)\n    return max_product\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6  # in mg\n    nickel_percent1 = 45  # in percent\n\n    weight_metal2 = 14  # in mg\n    nickel_percent2 = 60  # in percent\n\n    # Calculate the amount of nickel in each metal\n    nickel_metal1 = weight_metal1 * (nickel_percent1 / 100)\n    nickel_metal2 = weight_metal2 * (nickel_percent2 / 100)\n\n    # Calculate the total weight and total amount of nickel\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel = nickel_metal1 + nickel_metal2\n\n    # Calculate the percentage concentration of nickel in the new metal\n    nickel_concentration = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm represents 6 m\n    plan_length_cm = 5  # Length of playground on the plan in cm\n    real_length_m = plan_length_cm * scale_ratio  # Real length in meters\n\n    return real_length_m\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    number_of_boxes = total_money // cookie_box_price\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    return 4060800 - 4000000 - 800\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    avg_apples_boys = 30\n    avg_apples_girls = 20\n    overall_avg_apples = 26\n\n    # Let g be the number of girls\n    g = symbols('g')\n\n    # Equation representing the average\n    equation = Eq((boys * avg_apples_boys + g * avg_apples_girls) / (boys + g), overall_avg_apples)\n\n    # Using sympy solve() to find the number of girls\n    girls = solve(equation, g)\n\n    return girls[0]\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Assume the initial square array side length is n,\n    # then the number of students is n^2 + 11.\n    # When one row and one column are added, the new side length is n + 1,\n    # and the number of students required is (n + 1)^2.\n    # The difference between the new number of students and the old is 12 more.\n    # So, we need to solve for n in the equation (n + 1)^2 = n^2 + 11 + 12.\n\n    n = 1\n    while True:\n        if (n + 1) ** 2 == n ** 2 + 23:\n            break\n        n += 1\n\n    students = n ** 2 + 11\n    return students\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    difference = 56\n    oil_in_tank_B = oil_in_tank_A + difference\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketballs, volleyballs = symbols('basketballs volleyballs')\n\n    equation1 = Eq(basketballs + volleyballs, 12)      # total balls\n    equation2 = Eq(30 * basketballs + 25 * volleyballs, 340) # total cost\n\n    solutions = solve((equation1, equation2), (basketballs, volleyballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth / 3\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie / 2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2 / 5\n    remaining_after_bounty = remaining_after_thrifty - bounty_share\n    archie_share = remaining_after_bounty\n    return archie_share\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3 / 4)\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = remaining_candy * (1 / 3)\n    final_candy = remaining_candy - given_to_brother\n    \n    return final_candy\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum([sum([1/i for i in range(1, j+1)]) for j in range(2, 61)])\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Roy's money as r and Dennis's money as d\n    r, d = symbols('r d')\n    \n    # The initial total amount they shared\n    total_amount = Eq(r + d, 340)\n    \n    # Dennis had twice as much money left as Roy after spending\n    after_spending = Eq(d - d/4, 2 * (r - (2/3) * r))\n    \n    # Solve the system of equations\n    solutions = solve((total_amount, after_spending), (r, d))\n    \n    # Find the amount of money Dennis had in the end (after spending 1/4 of his money)\n    dennis_money_end = solutions[d] - solutions[d]/4\n    \n    return dennis_money_end\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 / 25\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of curry puffs sold on Friday\n    friday = symbols('friday')\n    \n    # Saturday sold 27 more than Friday, so Saturday is x + 27\n    # Sunday sold 14 fewer than Friday, so Sunday is x - 14\n    # Total sold over the 3 days is 475\n    equation = Eq(friday + (friday + 27) + (friday - 14), 475)\n\n    # Solve the equation\n    solutions = solve(equation, friday)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_used = 0\n    page_number = 0\n    \n    while digits_used < 300:\n        page_number += 1\n        digits_used += len(str(page_number))\n    \n    return page_number - 1\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of mint candies, y be the mass of chocolate candies.\n    x, y = symbols('x y')\n\n    # Define the systems of equations based on the given fractions and the fact that mint to chocolate ratio is always the same.\n    eq1 = Eq(2/5 * (x + y), x + y - x)  # Strawberry fraction for the first container\n    eq2 = Eq(2/7 * (x + y), x + y - x)  # Strawberry fraction for the second container\n    eq3 = Eq(2/9 * (x + y), x + y - x)  # Strawberry fraction for the third container\n\n    # Another equation is required stating the mass relation between mint and chocolate candies, let's call it eq4.\n    # Since the ratio is constant, we can simply use the mass of mint candies from any one of the equations:\n    eq4 = Eq(x, 3/5 * (x + y) - x)  # Mint fraction (3/5 - 2/5) from the first container\n    eq5 = Eq(x, 3/7 * (x + y) - x)  # Mint fraction (3/7 - 2/7) from the second container\n    eq6 = Eq(x, 3/9 * (x + y) - x)  # Mint fraction (3/9 - 2/9) from the third container\n\n    # Solve the first three equations for a single container mass.\n    solutions1 = solve((eq1, eq4), (x, y))\n    solutions2 = solve((eq2, eq5), (x, y))\n    solutions3 = solve((eq3, eq6), (x, y))\n\n    # Merge the solutions to get the total mass of strawberries in all containers.\n    total_strawberry_mass = (2/5 * (solutions1[x] + solutions1[y]) +\n                             2/7 * (solutions2[x] + solutions2[y]) +\n                             2/9 * (solutions3[x] + solutions3[y]))\n\n    # Since the total mass of all containers is 1371\n    total_mass_equation = Eq(solutions1[x] + solutions1[y] + \n                             solutions2[x] + solutions2[y] + \n                             solutions3[x] + solutions3[y], 1371)\n\n    # Now solve the total mass equation for the correct mint and chocolate masses that add up to 1371g.\n    final_solutions = solve(total_mass_equation, (solutions1[x], solutions1[y]))\n\n    # Calculate the mass of strawberry candies with the found mint and chocolate mass.\n    mass_of_strawberry = (2/5 * (final_solutions[solutions1[x]] + final_solutions[solutions1[y]]) +\n                          2/7 * (final_solutions[solutions1[x]] + final_solutions[solutions1[y]]) +\n                          2/9 * (final_solutions[solutions1[x]] + final_solutions[solutions1[y]]))\n\n    return mass_of_strawberry\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    ball_cost = 20.45\n    num_hula_hoops = 6\n    \n    total_ball_cost = num_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    \n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n    \n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(693)\n    number_to_multiply = 1\n\n    for base, exp in factors.items():\n        if exp % 2 != 0:\n            number_to_multiply *= base\n\n    return number_to_multiply\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    unit_digit_13 = pow(13, 242, 10)  # Get the last digit\n    unit_digit_17 = pow(17, 379, 10)  # Get the last digit\n    unit_digit_4 = pow(4, 2012, 10)   # Get the last digit\n    ans = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drank = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    num_containers = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight = 3 + 1/2  # 3 and a half kg of steak\n    cost_per_kg = 7.50\n    total_cost = weight * cost_per_kg\n    amount_available = 20\n    more_money_needed = total_cost - amount_available\n    return more_money_needed\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n    \n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n    \n    return eddie_position_from_end\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_original, charlotte_final = symbols('marry alexis charlotte_original charlotte_final')\n\n    equation1 = Eq(marry, 7/5 * alexis)  # Mary had 7/5 as many stickers as Alexis.\n    equation2 = Eq(marry - 0.2 * marry, charlotte_final + 20)  # Mary gave 20% of her stickers to Charlotte.\n    equation3 = Eq(alexis - 0.2 * alexis, charlotte_final)  # Alexis gave 20% of her stickers to Charlotte.\n    equation4 = Eq(charlotte_final, charlotte_original + 0.8 * charlotte_original)  # Charlotte's stickers increased by 80%.\n\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_original, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n    \n    # Equation: 6 * x (mass of light balls) + 6 * 2x (mass of heavy balls) = 65.7\n    equation = Eq(6 * x + 6 * 2 * x, 65.7)\n    \n    # Solve the equation for x\n    mass_light_ball = solve(equation, x)[0]\n    \n    # Round to the nearest kg\n    return round(mass_light_ball)\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    # Benson and Clive start with a total of 705\n    equation1 = Eq(benson + clive, 705)\n    \n    # After spending, they have the same amount of money left\n    equation2 = Eq(benson - 34 , clive - 63)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # Iterate through all possible hundreds and tens digits\n    # (first and last digits will be the same as hundreds digit)\n    for x in range(1, 10):  # Hundreds digit goes from 1 to 9\n        for y in range(0, 10):  # Tens digit goes from 0 to 9\n            count += 1  # Increment count for every palindromic number formed\n    \n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    total = sum(scores)\n    num_scores = len(scores)\n    average_score = total / num_scores\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    total_pens = 126\n    # Let the number of pens Denise has be x. Then Jay has 6*x pens.\n    # x + 6*x = 126\n    # 7*x = 126 => x = 126 / 7\n    denise_pens = total_pens / 7\n    return int(denise_pens)\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Ensuring the last digit is even\n                if hundreds + tens + ones == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the cost of each cookie\n    cost_per_chocolate_bar = 1.26\n    total_cost_chocolate_bars = 5 * cost_per_chocolate_bar\n    cost_per_cookie = total_cost_chocolate_bars / 6\n\n    # Calculate the remaining money after buying 4 cookies\n    initial_money = 9.05\n    total_cost_cookies = 4 * cost_per_cookie\n    remaining_money = initial_money - total_cost_cookies\n\n    return remaining_money\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation for the number of balls shared among boys and girls\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    \n    # Equation for the total number of children\n    equation2 = Eq(boys + girls, 650)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # We are interested in the number of girls, hence the second variable\n    return solutions[girls]\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    return (8 * 11 - 34) // 9\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    midnight_temp_decrease = 12\n    midnight_temp = midday_temp - midnight_temp_decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls initially, and b represent the number of boys initially\n    g, b = symbols('g b')\n\n    # From the condition after 25 girls went outside, we have g - 25 = 2/3 * (b)\n    equation1 = Eq(g - 25, 2/3 * b)\n\n    # After that, 15 boys went out and the number became equal: g - 25 = b - 15\n    equation2 = Eq(g - 25, b - 15)\n\n    # Solve the two equations for g and b to find the initial number of girls and boys\n    solutions = solve((equation1, equation2), (g, b))\n\n    # The total number of students initially is the sum of girls and boys\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let the number of 10-cent coins be 8x and the number of 50-cent coins be 3x.\n    # Therefore, the total value in cents is (10 * 8x) + (50 * 3x) = 75.90 * 100 cents.\n\n    # Forming the equation: 80x + 150x = 7590\n    total_cents = 75.90 * 100\n    value_per_set = (10 * 8) + (50 * 3)\n    number_of_sets = total_cents / value_per_set\n\n    # Since we want the total value of the 50-cent coins, we calculate 50 cents * 3x\n    value_of_50_cent_coins = 50 * 3 * number_of_sets\n\n    return value_of_50_cent_coins\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    side_length = 7\n    hole_side_length = 3\n    total_volume = 320\n\n    # Volume of the prism without the hole\n    volume_without_hole = total_volume + (hole_side_length ** 2) * side_length\n    \n    # Calculate the height of the prism\n    height = volume_without_hole / (side_length ** 2)\n    \n    return height\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # We start with one piece, and each cut, can increase the number of pieces by at most the number of cuts we have made so far plus one.\n    pieces = 1  # Initial piece count\n    cuts = 0  # Initial cut count\n    \n    # Increase the cut count until the number of pieces is equal or greater than 46\n    while pieces < 46:\n        cuts += 1\n        pieces += cuts\n\n    return cuts\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # There are 7 entities to arrange around the table: 6 single people + 1 pair (Amy and Judy)\n    entities = 7\n    # For a circular table, we have (entities - 1)! ways to arrange since rotations are considered the same\n    arrangements = factorial(entities - 1)\n    \n    # Amy and Judy can switch places in 2! ways\n    pair_arrangements = factorial(2)\n\n    # Calculate the final number of different orders\n    total_arrangements = arrangements * pair_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    # Given that 3x's balance with 10y's\n    # Given weight of one x is 1.5g\n    # Let y_weight be the weight of one y\n    # According to the problem 3 * 1.5g = 10 * y_weight\n    # Solving for y_weight\n    y_weight = (3 * 1.5) / 10\n    return y_weight\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize variables to keep track of the current number, the max number in the pattern, and the counter\n    current_number = 0\n    max_number_in_pattern = 0\n    counter = 0\n\n    # Loop until we reach the 2008th number\n    while counter < 2008:\n        max_number_in_pattern += 1  # Increase the size of the pattern\n        for i in range(1, max_number_in_pattern + 1):\n            current_number = i  # Current number in the pattern\n            counter += 1  # Increment the counter for each number\n            if counter == 2008:  # If we have reached the 2008th number, break out of both loops\n                return current_number  # Return the current number, which is the 2008th number in the sequence\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) // 3  # Subtract 3 and divide by 3 to reverse the \"3 more than 3 times\"\n    return cucumbers\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_combinations = permutations(digits, 3)\n    count = len(list(all_combinations))\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            sum += number\n    return sum\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_bags = total_bags - given_to_avril\n    return remaining_bags\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers\n    for i in range(100, 1000):\n        # Calculate the sum of the digits\n        if sum([int(digit) for digit in str(i)]) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # A cannot be 0 as it is a 3-digit number\n            num_ABC = A * 100 + B * 10 + C\n            if (B+C) % 2 == 0 and C % 2 != 0 and (A+B+C) % 3 == 0 and (A*10+B) % 4 == 0 and \\\n               (B+C) % 3 ==0 and (A*10+B) % 5 == 0 and num_ABC % 2 == 0:\n                return num_ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('123456789', 5):\n        a, b, c, d, e = p\n        abac = int(a + b + a + c)\n        dbec = int(d + b + e + c)\n        acedc = int(a + c + e + d + c)\n\n        if abac + dbec == acedc:\n            return int(dbec)\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    return 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris must ensure that after their first turn, the number of matches\n    # left is a multiple of 3. This forces Dylan to always leave a multiple\n    # of 3 for Chris, which ensures that Chris can always pick last.\n    \n    # Total matches\n    total_matches = 7\n    \n    # Loop to find the number of matches Chris should take\n    for first_pick in range(1, 3):\n        remaining_matches = total_matches - first_pick\n        # Check if remaining matches are a multiple of 3\n        if remaining_matches % 3 != 0:\n            return first_pick\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Given values\n    n = 31\n    nth_term = 100  # mosquitoes eaten on the 16th night\n    n_nth = 16  # the 16th night\n    difference = 6  # number of mosquitoes increases each night\n    \n    # Calculate the first term using the nth term formula for arithmetic sequences:\n    # nth_term = first_term + (n_nth - 1) * difference\n    first_term = nth_term - (n_nth - 1) * difference\n    \n    # Calculate the sum of the arithmetic sequence using the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # First calculate the last_term using the first_term and the difference\n    last_term = first_term + (n - 1) * difference\n    total = n/2 * (first_term + last_term)\n    \n    return int(total)\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%I.%M%p\"\n    start_time = datetime.strptime('9.23am', time_format)\n    end_time = datetime.strptime('1.06pm', time_format)\n\n    time_difference = end_time - start_time\n    total_minutes = time_difference.total_seconds() / 60\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    difference_of_squares = (64 + 36) * (64 - 36)\n    return difference_of_squares\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1, 10)) * 2 - 9\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    result = sum([53, 47, 41, 35, 29, 23]) - sum([50, 44, 38, 32, 26])\n    return result\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming the information provided in the Knowledge Point Routes is sufficient\n    # and given there is no specific quantity or condition described in the question,\n    # we return 1 as a default answer for the unspecified number of choices,\n    # representing at least one choice.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    # Auntie Lina's calculation\n    lina_time = 48 / 8\n    # Correct calculation\n    correct_time = distance / speed\n    # Determine if she is correct\n    if lina_time == correct_time:\n        ans = \"Correct\"\n    else:\n        ans = correct_time\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote \"n\" as the cost of a notebook, \"p\" as the cost of a pencil case,\n    # and \"e\" as the cost of an eraser.\n    n, p, e = symbols('n p e')\n\n    # Creating equations based on the given information.\n    # 3 notebooks (3n) + 4 pencil cases (4p) + 5 erasers (5e) = $50\n    equation1 = Eq(3 * n + 4 * p + 5 * e, 50)\n    # A notebook and a pencil case (n + p) cost $6\n    equation2 = Eq(n + p, 6)\n    # A pencil case and an eraser (p + e) cost $8\n    equation3 = Eq(p + e, 8)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2, equation3), (n, p, e))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_number_of_people = 4\n    average_age = 25\n    total_age = total_number_of_people * average_age\n    \n    harry_age = 14\n    harrys_mom_age = 36\n    harrys_sister_age = 10\n    \n    harrys_dad_age = total_age - (harry_age + harrys_mom_age + harrys_sister_age)\n    \n    return harrys_dad_age\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, tmp1, tmp2 = perm\n        if A == 0: # A cannot be zero\n            continue\n        number = A*1000 + E*100 + E*10 + A\n        if (number % (A+E)) == 0:\n            return number\n    return None\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    digits_used = 0\n    page_number = 1\n\n    while digits_used < 450:\n        if page_number < 10:\n            digits_per_page = 1\n        elif page_number < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n\n        digits_used += digits_per_page\n        if digits_used <= 450:\n            page_number += 1\n\n    return page_number - 1  # Subtract one because the last page number exceeds 450 digits\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Define the measurements in a common unit (centimeters)\n    measurements = {\n        \"83m\": 8300,       # 83 meters to centimeters\n        \"200cm\": 200,      # 200 centimeters\n        \"8cm\": 8,          # 8 centimeters\n        \"1/2m\": 50         # 1/2 meter to centimeters\n    }\n\n    # Typical height of a classroom door in centimeters (around 200 cm or 2 meters)\n    typical_door_height_cm = 200\n\n    # Find the measurement closest to the typical door height\n    closest_measurement = min(measurements, key=lambda x: abs(measurements[x] - typical_door_height_cm))\n\n    # Return the result. As per the question, it seems we need to return the string\n    return closest_measurement\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    # Leonard spent 5/12 of his money on lunch\n    money_after_lunch = original_money - (5/12) * original_money\n\n    # He then spent 2/7 of the remainder on dinner\n    money_after_dinner = money_after_lunch - (2/7) * money_after_lunch\n\n    # He had $45 left\n    equation = Eq(money_after_dinner, 45)\n\n    # Solve for the original amount of money\n    ans = solve(equation, original_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * (5 - 1)) // 2\n    lily_eva_tina_emma_wins = 2 + 1 + 4 + 3\n    gina_wins = total_games - lily_eva_tina_emma_wins\n\n    return gina_wins\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits = 1524\n    pages = 0\n    current_digits = 0\n    digit_range = 1\n    \n    while current_digits < digits:\n        temp_pages = 9 * (10**(digit_range - 1))\n        temp_digits = temp_pages * digit_range\n        \n        if current_digits + temp_digits >= digits:\n            difference = digits - current_digits\n            pages += (difference + digit_range - 1) // digit_range\n            break\n        else:\n            current_digits += temp_digits\n            pages += temp_pages\n            digit_range += 1\n\n    return pages\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for correct_answers_avril in range(0, 11):\n        points_avril = correct_answers_avril * 10 - (10 - correct_answers_avril) * 5\n        points_eddie = 155 - points_avril\n        if points_eddie == points_avril + 15:\n            return correct_answers_avril\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_cost = 5\n    bag_cost = 10\n    total_spent = 300\n\n    group_cost = 4 * shirt_cost + bag_cost\n    num_groups = total_spent // group_cost\n    shirts_bought = num_groups * 4\n\n    return shirts_bought\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = math.radians(20)  # converting the angle from degrees to radians\n    distance = 400  # distance (measured along the slope) in meters\n    mu = 0.2  # coefficient of kinetic friction\n\n    # Acceleration due to gravity in m/s^2\n    g = 9.81\n\n    # The acceleration along the incline is given by:\n    # a = g * (sin(angle) - mu * cos(angle))\n    acceleration = g * (math.sin(angle) - mu * math.cos(angle))\n\n    # Using the equation v^2 = u^2 + 2as, where u is the initial speed (0 in this case)\n    # v is the final speed, a is acceleration and s is the distance.\n    # We need to find v.\n    final_speed = math.sqrt(0 + 2 * acceleration * distance)\n\n    return final_speed\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n    \n    # Weights of coffee beans\n    A = 56\n    B = 96\n    C = 120\n\n    # Greatest common divisor of the three weights\n    greatest_common_mass = gcd(gcd(A, B), C)\n\n    return greatest_common_mass\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation 1: Initially there were thrice as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    \n    # Equation 2: After 12 boys leave and 20 girls join, the numbers equalize\n    equation2 = Eq(boys - 12, girls + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    for apples in range(1, 24):\n        bananas = 2 * apples\n        oranges = 3 * apples\n        if apples + bananas + oranges == 24:\n            return bananas\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    # Define current ages\n    anna_age_now = 8\n    mother_age_now = 44\n    \n    # Let x be the number of years after which the mother is 3 times as old as Anna\n    x = symbols('x')\n    \n    # Equation for the future ages\n    equation = Eq(mother_age_now + x, 3 * (anna_age_now + x))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Let the total work be represented as a variable 'work'\n    # 'work' is completed by 6 men in 5 days, so 1 man can do 'work'/30 in 1 day\n    # Similarly, 'work' is completed by 5 women in 6 days, so 1 woman can do 'work'/30 in 1 day\n    # We want to find the days taken by 10 men and 5 women, hence we sum their daily work contribution\n    # Equation: days * (10 * (work/30) + 5 * (work/30)) = work\n\n    # If we assume work to be 1 job (for simplicity), \n    # then we get the following equation based on the problem statement:\n    work = 1\n    man_work_day = work / (6 * 5) # work done by one man in one day\n    woman_work_day = work / (5 * 6) # work done by one woman in one day\n\n    # Now work done by 10 men in one day\n    ten_men_work_day = 10 * man_work_day\n    # Work done by 5 women in one day\n    five_women_work_day = 5 * woman_work_day\n\n    # Total work done by 10 men and 5 women in one day\n    total_work_per_day = ten_men_work_day + five_women_work_day\n\n    # The number of days required to complete 'work' by 10 men and 5 women\n    days = work / total_work_per_day\n\n    return days\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Since we have to distribute at least one apple to each child, \n    # we will initially give one apple to each of the six children.\n    remaining_apples = 30 - 6  # This is because we have already given away 6 apples.\n\n    # The kid who gets the most apples will get the minimum amount possible \n    # when the remaining apples are distributed as equally as possible among the other five kids.\n    # In other words, we divide the remaining apples by 5 and take the ceil of the result\n    # to get the minimum number of extra apples any other kid would get.\n    # The smallest possible number for the kid with the most apples would then be:\n    # initial apple + maximum extra apples any other of the five children can get\n    from math import ceil\n    max_apples_other_kid = ceil(remaining_apples / 5)\n\n    # The smallest possible number for the kid with the most apples is\n    # the remaining apples minus the maximum number given to any other kid (since we are trying to minimize his count),\n    # plus the one apple originally assigned to him.\n    least_apples_most_kid = remaining_apples - (max_apples_other_kid * (5 - 1)) + 1\n\n    return least_apples_most_kid\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Let's assume all the animals are chickens (with 2 legs each)\n    total_legs_if_all_chickens = 12 * 2\n\n    # Now let's calculate the number of extra legs (if some animals are rabbits with 4 legs each)\n    extra_legs = 34 - total_legs_if_all_chickens\n\n    # Since each rabbit has 2 extra legs compared to a chicken, we can find the number of rabbits\n    number_of_rabbits = extra_legs // 2  # Use integer division because we can't have a fraction of an animal\n\n    return number_of_rabbits\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Length in cm, May = 7 * 40 + x * 70\n    # Length in cm, Nancy = 18 * 70\n    # May's ribbons are 240cm longer than Nancy's ribbons\n    # Equation: May - Nancy = 240\n    # 7 * 40 + x * 70 - 18 * 70 = 240\n    # Solve for x, then calculate total ribbons for May: short (7) + long (x)\n\n    # converting 2.4m to cm for the calculation\n    diff_in_cm = 2.4 * 100 \n\n    # May's short ribbons in cm\n    may_short_ribbons_cm = 7 * 40\n\n    # Nancy's long ribbons in cm\n    nancy_long_ribbons_cm = 18 * 70\n\n    # Equation to solve for x\n    x = (diff_in_cm + nancy_long_ribbons_cm - may_short_ribbons_cm) / 70\n\n    # Total ribbons May has\n    total_may_ribbons = 7 + x # 7 short ribbons + x long ribbons\n\n    return int(total_may_ribbons)\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio_units = 3 + 1  # Sum of ratio parts for red and blue\n    total_paint = 1  # Total litres of paint required\n    red_paint_ratio = 3  # Red paint part of the ratio\n    \n    red_paint = (red_paint_ratio / total_ratio_units) * total_paint\n    \n    return red_paint\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    known_numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = 8\n    known_sum = sum(known_numbers)\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given_away = total_money * 1/4\n    money_left = total_money - money_given_away\n    return money_left\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # Start from the largest two-digit number and go down until we find a number\n    # that satisfies the conditions.\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num  # Return the first number that satisfies the conditions.\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # The total amount of grass can be represented as G.\n    # From the given information:\n    # G = 8 cows * 10 days = 4 cows * 15 days\n    # Let's find the number of cows (C) for 5 days.\n\n    # Setting up the equation:\n    # G = 8 * 10 = 4 * 15 = C * 5\n    # Thus, C = (8 * 10) / 5 = 4 * 15 / 5\n    C = (8 * 10) / 5\n\n    return int(C)\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # We start by giving each child 1 apple to satisfy the condition.\n    apples_distributed = 8  # 1 apple to each child\n    remaining_apples = 50 - apples_distributed  \n    # The remaining apples now have to be distributed such that each child gets a different number.\n    # Number of children remaining.\n    children_left = 8\n    # Least apples the child with the most can get.\n    max_apples = 1\n    while remaining_apples > 0:\n        for i in range(1, children_left):\n            remaining_apples -= 1\n            if remaining_apples == 0:\n                break\n        max_apples += 1\n        children_left -= 1\n        \n    return max_apples\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_result = 99.396\n    missing_decimal = 1.22\n\n    true_result = incorrect_result * missing_decimal\n\n    return true_result\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    tape_number = 3\n    cd_number = 4\n\n    cd_cost = (total_cost - (tape_cost * tape_number)) / cd_number\n\n    return cd_cost\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    final_number = 35\n    initial_number = (final_number - 8) / 3\n    return initial_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n\n    ans = boys // greatest_common_divisor + girls // greatest_common_divisor\n    return ans\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (sum(1 / (i * (i + 5)) for i in range(1, 32, 5)))\n    return ans\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Let the first two numbers be a and b.\n    # Thus, the sequence is: a, b, a+b, 2a+3b, 3a+5b, 5a+8b, ...\n    # We know the fourth number (2a+3b) is 6 and the sixth number (5a+8b) is 15.\n    # This results in a system of equations:\n    # 2a + 3b = 6\n    # 5a + 8b = 15\n\n    # Solving the system of equations for a and b\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(2*a + 3*b, 6)\n    equation2 = Eq(5*a + 8*b, 15)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Using the values of a and b to find the seventh number in the sequence\n    # The seventh number is 8a + 13b\n    seventh = 8 * solutions[a] + 13 * solutions[b]\n\n    return seventh\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    # 1 litre is 1000 millilitres\n    millilitres_per_litre = 1000\n    litres = 1.7\n\n    n = litres * millilitres_per_litre\n    return n\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    \n    # Total number of cards\n    total_cards = 876\n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # Sum of cards\n    equation2 = Eq(hisham + melissa, total_cards)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    \n    hisham_cards = solutions[hisham]\n    melissa_cards = solutions[melissa]\n    \n    # Calculate number of cards to be given to Hisham to make it equal\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    smallest_odd_number = float('inf')\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 != 0 and number < smallest_odd_number:\n            smallest_odd_number = number\n    return smallest_odd_number\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(equation, julie)[0]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n\n    total_pay = julie_pay + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Each man's daily work rate\n    man_rate = 1 / (24 * 16)\n    # Each woman's daily work rate\n    woman_rate = 1 / (16 * 24)\n\n    # Combined daily work rate for 10 men and 6 women\n    combined_rate = (10 * man_rate) + (6 * woman_rate)\n\n    # Total number of days for 10 men and 6 women to complete the job\n    days = 1 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    # The formula for the maximum number of regions divided by n identical rectangles is:\n    # n^2 + n + 1\n    ans = rectangles**2 + rectangles + 1\n    return ans\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n\n    # Total number of permutations without any restrictions\n    total_permutations = factorial(total_people)\n\n    # Permutations where Eddie is in the middle\n    eddie_middle_permutations = factorial(total_people - 1)\n    \n    # Subtracting Eddie's middle permutations from total permutations\n    eddie_not_middle_permutations = total_permutations - eddie_middle_permutations\n\n    return eddie_not_middle_permutations\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    # Let the total sum of money Hamid had at first be x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x/3 + 56, x - 3*x/8)\n\n    total_money = solve(equation, x)[0]\n\n    # Total spent = Amount spent on the watch (1/3 of total) + Amount spent on the tie ($56)\n    total_spent = total_money / 3 + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given sequence: 96, n, 24, 12, 6\n    # It is a geometric sequence\n\n    # The ratio (r) can be found by dividing two consecutive values of the sequence:\n    # r = term[i+1] / term[i]\n\n    # r = 12/24\n    r = 12 / 24\n\n    # Calculate the missing term (n) using r and the term before it (96):\n    # n = previous_term * r\n    n = 96 * r\n\n    return n\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for permutation in permutations(range(1, 10)):\n        num = int(''.join(map(str, permutation)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    speed_of_eddie = 3  # m/s\n    speed_of_train = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # Relative speed of the train with respect to Eddie\n    relative_speed = speed_of_train + speed_of_eddie  # m/s\n\n    # Distance covered by the train while passing Eddie\n    length_of_train = relative_speed * time_to_pass  # m\n\n    return length_of_train\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    symbols = ['+', '*']\n    max_value = 0\n    for comb in product(symbols, repeat=3):\n        expression = f\"1{comb[0]}2{comb[1]}3{comb[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_mark = 8\n    incorrect_deduction = 3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        marks = correct_answers * correct_mark - incorrect_answers * incorrect_deduction\n        if marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # in meters\n    bridge_length = 900  # in meters\n    speed = 400  # in meters per minute\n\n    # The total distance for the train to cross the bridge entirely\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed  # in minutes\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        if b % 3 == 0:\n            return 0\n        a, b = b % 3, a % 3  # Only interested in remainders to simplify computation\n    return b % 3\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Number of terms in the sequence\n    n = 60\n\n    # Sum of the first 5 terms\n    S_first_5 = 10\n    # Average of the first 5 terms\n    avg_first_5 = S_first_5 / 5\n\n    # Sum of the last 5 terms\n    S_last_5 = 120\n    # Average of the last 5 terms\n    avg_last_5 = S_last_5 / 5\n\n    # Average of the first and last term (which is the average of the whole sequence)\n    avg_sequence = (avg_first_5 + avg_last_5) / 2\n\n    # Sum of all 60 numbers in the sequence\n    S_total = n * avg_sequence\n\n    return S_total\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        if peter_age == (pip_age + pit_age):\n            break\n    return peter_age\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Hazel's current age as 'h' and her mom's current age as 'm'.\n    h, m = symbols('h m')\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(h + 12, 3 * h)\n\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age then.\n    # This means Hazel will be 18 and her mom will be 18 * 3 = 54 years old.\n    equation2 = Eq(m + (18 - h), 3 * 18)\n\n    # Now we solve the system of equations.\n    solutions = solve((equation1, equation2), (h, m))\n\n    # We are interested in her mom's current age, which is 'm'.\n    return solutions[m]\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent the number of stickers Sam had initially\n    # Let p represent the number of stickers Peter had initially\n    s, p = symbols('s p')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(s, p + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # After giving, Sam has 80% of his original number of stickers\n    # Peter receives 20% of Sam's original number of stickers\n    equation2 = Eq(s * 0.80, s - (0.20 * s))\n\n    # Peter gave 25% of his new total (after receiving from Sam) to Sam\n    # Peter gave away 0.25 * (initial + received)\n    # Peter's final total is 75% of his new total\n    equation3 = Eq(p - (0.25 * (p + (0.20 * s))), p + 0.20 * s - 0.25 * (p + 0.20 * s))\n\n    # In the end, Sam had 96 stickers more than Peter\n    # Sam's final count is his 80% of initial plus what he received from Peter\n    equation4 = Eq(s * 0.80 + 0.25 * (p + 0.20 * s), p - 0.25 * (p + 0.20 * s) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (s, p))\n\n    # We need the initial number of stickers Peter had\n    return solutions[p]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible consecutive numbers (from 1 to 13)\n    # We are ensuring that 2 cards with consecutive numbers are drawn.\n    # According to the Pigeonhole Principle, we can draw at most one card \n    # from each non-consecutive number without fulfilling the condition.\n    # Hence, we should draw one more than that to ensure that we have \n    # consecutive numbers. Thus, since there are 13 numbers, we can draw one \n    # from each of the 12 non-consecutive numbers.\n    max_non_consecutive_draws = 12\n    # Now, we draw one more to ensure we have 2 consecutive numbers.\n    total_draws_required = max_non_consecutive_draws + 1  \n  \n    return total_draws_required\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet of a newspaper will have 4 page numbers.\n    # The 5th sheet will thus have the 9th to the 12th pages when counting from the back side.\n    # Since the back page is 36, we count the pages in reverse.\n\n    back_page = 36  # Last page number\n    fifth_sheet_pages = range(back_page - 4 * (5 - 1), back_page - 4 * (5 - 1) + 4)\n    \n    return sum(fifth_sheet_pages)\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48  # number of seats in the first row\n    last_term = 80   # number of seats in the last row\n    difference = 4   # each row has 4 more seats than the previous row\n\n    # Calculate the number of terms in the arithmetic sequence\n    number_of_rows = ((last_term - first_term) // difference) + 1\n\n    # Find the total number of seats using the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (first_term + last_term)\n    total_seats = number_of_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    digits = 0\n    # numbers 1 to 9 have 1 digit each\n    digits += 9\n    # numbers 10 to 99 have 2 digits each\n    digits += 2 * (99 - 10 + 1)\n    # numbers 100 to 129 have 3 digits each\n    digits += 3 * (129 - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let p be the original profit per laptop\n    # Let c be the original cost per laptop\n    # Let n be the number of laptops\n    # Let s be the selling price of each laptop\n    s = 2000\n    total_original_profit = 60000\n    # p = s - c\n    # total_original_profit = p * n\n    # Increase in total profit = 30% of total_original_profit\n    total_profit_increase = 0.30 * total_original_profit\n    # Decrease in cost per laptop = c / 5\n    # New profit per laptop = p + c / 5\n    # New total profit = total_original_profit + total_profit_increase\n    # (p + c / 5) * n = total_original_profit + total_profit_increase\n    # Substitute total_original_profit = p * n\n    # (p + c / 5) * n = p * n + total_profit_increase\n    # Solve the equation for n:\n    # n = total_profit_increase / (c / 5)\n    # But we don't have c, however, we can express c in terms of p and s:\n    # c = s - p\n    # Substitute c in the above equation:\n    # n = total_profit_increase / ((s - p) / 5)\n    # Also substitute total_original_profit = p * n to find p:\n    # p = total_original_profit / n\n    # Combine the equations:\n    # n = total_profit_increase / ((s - (total_original_profit / n)) / 5)\n    # Rearrange and solve for n:\n    n = (total_profit_increase * 5) / (s - (total_profit_increase * 5) / n)\n    # Since we have an equation with n on both sides, we can iterate to find the solution\n\n    # Start with an initial guess for n, total profit increase per laptop\n    n_guess = 1\n    while True:\n        n_new = (total_profit_increase * 5) / (s - (total_profit_increase * 5) / n_guess)\n        # Check if the new guess is close enough to the old guess\n        if abs(n_guess - n_new) < 1e-5:\n            break\n        n_guess = n_new\n\n    return int(n_guess)\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import symbols, solve, lcm\n\n    # Define the variables for the remainders when M is divided by 7, 9, a, and 28\n    r1, r2, r3, r4 = symbols('r1 r2 r3 r4')\n    \n    # Define an equation for the remainders forming an increasing arithmetic pattern\n    arithmetic_seq_eq = r2 - r1 - (r3 - r2)\n\n    # Define equations for the remainders being less than the divisors\n    remainder_eqs = [r1 < 7, r2 < 9, r3 < a, r4 < 28]\n\n    # Loop over possible values of a, the smallest possible M will be found first\n    for a_value in range(1, 29):  # Since the LCM of 7, 9, and 28 is 252, a has to be less than 29\n        for r1_value in range(7):\n            r4_value = r1_value + 3 * (a_value - 1)  # The difference in the arithmetic pattern is a-1\n            r2_value = r1_value + (a_value - 1)\n            r3_value = r1_value + 2 * (a_value - 1)\n\n            # Check if the values for remainders satisfy the equations\n            if all(eq.subs({r1: r1_value, r2: r2_value, r3: r3_value, r4: r4_value, a: a_value})\n                   for eq in remainder_eqs):\n                # Calcualte the least common multiple of the divisors\n                divisors_lcm = lcm([7, 9, a_value, 28])\n                # Use the lcm and remainders to find M that satisfies all conditions\n                M = solve(r1 + divisors_lcm * symbols('k') - M for r1, M in [(r1_value, symbols('M'))])[0]\n\n                # Since we're iterating over a and r1 in ascending order, the first valid M will be the smallest one\n                return M\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Total man-days for the initial scenario\n    total_man_days = 3 * 2\n    # Length dug by one man in one day\n    man_day_length = 120 / total_man_days\n\n    # Total man-days for the new scenario\n    new_total_man_days = 880 / man_day_length\n    # Time for four men to dig the new length\n    time_for_four_men = new_total_man_days / 4\n\n    return time_for_four_men\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Initialize the difference between boys and girls\n    diff = 36\n\n    # Start checking from the smallest possible square size incrementing by odd numbers \n    # (as every layer added would consist of an odd number of students on each side of the square)\n    n = 1\n    while True:\n        # The boys make up the outer layer of a square with side length n, so they are 4n-4 (subtracting the 4 corners counted twice)\n        # The girls make up the next inner layer, if it exists, with side length n-2, so the number is 4(n-2)-4\n        # The difference between boys and girls for this configuration\n        current_diff = 4*n - 4 - (0 if n == 1 else (4*(n-2) - 4)) \n        \n        if current_diff == diff:\n            # Number of students is n^2 where n is the side length of the square\n            students = n**2\n            return students\n        n += 2  # Increase the square size by going to the next odd number\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    \n    # Combined rate of both Ellie and Gloria\n    combined_rate = total_people / combined_weeks\n    \n    # Gloria's rate per week\n    gloria_rate = combined_rate - ellie_rate\n    \n    # Time it takes for Gloria alone\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    fraction = (2/5) * 15\n    return fraction\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n    denom = 1/7 + 1/11 + 1/13\n\n    ans = (num1 + num2 + num3) / denom\n    return ans\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n    speed = distance / time  # speed = distance / time\n\n    return speed  # speed in meters per second\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    books_first_shelf = 18\n    books_second_shelf = 24\n    moved_books = symbols('moved_books')\n    \n    # books_first_shelf - moved_books = number of books left on the first shelf\n    # books_second_shelf + moved_books = number of books on the second shelf after moving\n    # We want the second shelf to have twice as many books as the first shelf\n    equation = Eq(books_second_shelf + moved_books, 2 * (books_first_shelf - moved_books))\n    \n    ans = solve(equation, moved_books)\n    \n    return ans[moved_books]\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pupils in the class\n    x = symbols('x')\n\n    # 5 pupils are in the band, so the remaining pupils are x - 5\n    remaining = x - 5\n\n    # (3/4) of the remaining pupils are in the school choir\n    choir = (3/4) * remaining\n\n    # (2/9) of the class are neither in the band nor the choir\n    neither = (2/9) * x\n\n    # The equation can be set up as band (5) + choir + neither = total pupils (x)\n    equation = Eq(5 + choir + neither, x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the number of pupils\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for i in range(1, 1000):  # assuming Jonathan does not have more than 1000 lollipops\n        if (i - 32) % 4 == 0 and (i - 3) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3*(24 - 5*x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    for long_tubes in range(0, 47 // 8 + 1):\n        short_tubes = (47 - 8 * long_tubes) / 5\n        if short_tubes.is_integer():\n            return long_tubes\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    sum_cubes = sum(i**3 for i in range(1, 15) if i % 3 != 0)\n    return sum_cubes\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    true_result = incorrect_result / (432 - 4.32)\n    return true_result\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    return 9 + 99 + 999 + 9999\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    # The nth term of an arithmetic sequence is given by: a_n = a_1 + (n - 1)*d\n    # where a_n is the nth term, a_1 is the first term, and d is the common difference.\n\n    # Given that the third term (a_3) is 8, we have:\n    # a_3 = a_1 + (3 - 1)*d = 8\n    # Therefore, a_1 + 2d = 8 ....(1)\n\n    # Given that the ninth term (a_9) is 26, we have:\n    # a_9 = a_1 + (9 - 1)*d = 26\n    # Therefore, a_1 + 8d = 26 ....(2)\n\n    # We can now set up two equations and solve for a_1 (the first term) and d (the common difference).\n\n    # Subtract equation (1) from equation (2) to find d:\n    # (a_1 + 8d) - (a_1 + 2d) = 26 - 8\n    # a_1 + 8d - a_1 - 2d = 18\n    # 6d = 18\n    # d = 18 / 6\n    d = 3\n\n    # Substitute the value of d in equation (1) to find a_1:\n    # a_1 + 2*3 = 8\n    # a_1 + 6 = 8\n    # a_1 = 8 - 6\n    a_1 = 2\n\n    # Now that we have both a_1 and d, we can find the 11th term (a_11):\n    # a_11 = a_1 + (11 - 1)*d\n    # a_11 = 2 + (11 - 1)*3\n    a_11 = 2 + 10 * d\n\n    return a_11\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Felicia's and Janice's bracelets\n    F, J = symbols('F J')\n\n    # Given that Janice bought 2/5 of the bracelets Felicia sold\n    # and the ratio between Felicia's remaining bracelets to Janice's become 5:7\n    # Janice initially had 96 bracelets\n    J_initial = 96\n\n    # Felicia sold 3/5 of her bracelets, let's denote the fraction sold as Fs\n    Fs = 3/5 * F\n\n    # Janice bought 2/5 of the bracelets Felicia sold\n    J_bought = 2/5 * Fs\n\n    # After these transactions, Janice's bracelets became her initial bracelets plus what she bought\n    J_final = J_initial + J_bought\n\n    # The ratio of the remaining bracelets of Felicia (F - Fs) to Janice's final bracelets (J_final) is 5:7\n    equation1 = Eq((F - Fs) / J_final, 5 / 7)\n\n    # We know the initial amount of Janice's bracelets\n    equation2 = Eq(J_initial, 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (F, J))\n\n    # Returning how many bracelets Janice bought from Felicia\n    return solutions[J_bought]\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Find the differences between the numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n\n    # The possible values of A will be the divisors of the GCD of the differences\n    # Use the gcd function from the math library to calculate the greatest common divisor\n    from math import gcd\n    gcd_value = gcd(diff1, diff2)\n\n    # Now we need to find all divisors of the gcd_value.\n    # The divisors of the GCD will be the possible values of A\n    divisors = set()\n    # We only need to search up to the square root of gcd_value for efficiency\n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            divisors.add(i)\n            divisors.add(gcd_value // i)\n\n    # Calculate the sum of the possible values of A (excluding 1, because it will not give a remainder)\n    # Since we know A must be a factor of both differences and also leave a remainder we disregard 1 and gcd_value itself\n    return sum(divisors) - 1 - gcd_value\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Each boy gets 5 candies, each girl gets 3 candies, and there are 8 more girls than boys\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    equation2 = Eq(girls - boys, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of children\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            break\n    return count\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of milk candies and fruit candies\n    milk, fruit = symbols('milk fruit')\n    \n    # Initial ratio before Ella ate candies\n    original_ratio = Eq(milk / fruit, 7/9)\n    \n    # New ratio after Ella ate 8 milk candies\n    new_ratio = Eq((milk - 8) / fruit, 2/3)\n    \n    # System of equations based on the ratios\n    solutions = solve((original_ratio, new_ratio), (milk, fruit))\n    \n    # Return the number of milk candies before Ella ate them\n    return solutions[milk]\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the difference in years between 2008 and 1996\n    year_difference = 2008 - 1996\n\n    # Calculate my grandmother's age in 1996\n    grandmother_age_in_1996 = 80 - year_difference\n\n    # Calculate my mum's age when she was born (which is 0)\n    # So, my grandmother's age when my mum was born will be her age in 1996 minus my mum's age in 1996\n    grandmother_age_when_mum_born = grandmother_age_in_1996 - 40\n    \n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    additional_apples_per_friend = 1\n    total_initial_apples = 60\n\n    # Find the number of friends\n    number_of_friends = total_initial_apples // initial_apples_per_friend\n\n    # Now calculate how many apples in total if each friend asks for one more apple\n    total_apples_needed = (initial_apples_per_friend + additional_apples_per_friend) * number_of_friends\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # He could take all red and black socks without getting a pair of white socks.\n    max_red_and_black_socks = 10 + 10\n\n    # The next two socks he takes must then constitute a pair of white socks.\n    max_socks_for_white_pair = max_red_and_black_socks + 2\n\n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_income = 2012\n    total_bottles = 350\n    price_lemonade = 4\n    price_plus = 7\n\n    # Initialize the minimum number of bottles of \"1000 Plus\" with the total number of bottles.\n    min_bottles_plus = total_bottles\n    \n    # Iterate through the number of lemonade bottles sold to find the minimum number of \"1000 Plus\" bottles.\n    for lemonade_bottles in range(total_bottles + 1):\n        if (total_income - lemonade_bottles * price_lemonade) % price_plus == 0:\n            bottles_plus = (total_income - lemonade_bottles * price_lemonade) // price_plus\n            if bottles_plus < min_bottles_plus and bottles_plus + lemonade_bottles <= total_bottles:\n                min_bottles_plus = bottles_plus\n\n    return min_bottles_plus\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers\n    avg_of_three = 60\n    \n    # Total sum of the three numbers\n    total_sum_three = avg_of_three * 3\n    \n    # New average with the fourth number\n    new_avg = 90\n    \n    # Total sum of the four numbers\n    total_sum_four = new_avg * 4\n    \n    # The fourth number is the difference between total sums\n    fourth_number = total_sum_four - total_sum_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    # Let's suppose all groups had 4 pupils\n    groups_of_4 = total_groups\n    groups_of_6 = 0\n\n    # Calculate the number of students if all groups had 4 pupils\n    students_with_4_per_group = groups_of_4 * 4\n\n    # We will subtract groups of 4 and add groups of 6 until we reach 112 students\n    while students_with_4_per_group != total_students:\n        groups_of_4 -= 1\n        groups_of_6 += 1\n        students_with_4_per_group = groups_of_4 * 4 + groups_of_6 * 6\n\n    return groups_of_6\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate through all permutations of three different digits\n    for p in permutations(range(10), 3):\n        # Convert the permutation into a three-digit number\n        ABC = int(f\"{p[0]}{p[1]}{p[2]}\")\n        # Since different permutations yield different numbers,\n        # the first valid permutation represents the correct answer\n        # for the given puzzle under the stated conditions.\n        return ABC\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen trades 3 fish for 2 rabbits, so the ratio of fish to rabbit is 3 fish / 2 rabbit\n    fish_to_rabbit_ratio = 3 / 2\n\n    # Oscar trades 3 rabbits for 4 packs of wheat, so the ratio of rabbit to wheat is 3 rabbit / 4 wheat\n    rabbit_to_wheat_ratio = 3 / 4\n\n    # To find out how many fish are needed for 1 pack of wheat, we multiply the two ratios:\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Now we want to find out how many fish are needed for 8 packs of wheat\n    fish_needed_for_8_wheat = fish_to_wheat_ratio * 8\n\n    return fish_needed_for_8_wheat\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "from math import factorial\n\ndef solution():\n    n = factorial(25)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The decimal repeats every two digits, which means in 20 digits there are 10 repetitions\n    repetitions = 20 // 2\n\n    # Each repetition contributes a sum of A+2 to the total\n    total_sum = 80\n\n    # Since we know the sum of 10 repetitions is 80, find the sum of one repetition\n    one_repetition_sum = total_sum / repetitions\n\n    # Subtract 2 (the known repeating digit) to find A\n    A = one_repetition_sum - 2\n\n    return int(A)\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    return 2 * 2  # Sally dances twice a week, so in two weeks, she goes dancing 2 * 2 times.\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_rate = 4\n    slide_rate = 1\n    net_climb = climb_rate - slide_rate\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_rate\n        \n        if distance_climbed >= total_distance:\n            break\n        \n        distance_climbed -= slide_rate\n\n    return days\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # price before discount for handbag\n    hb_price_before = symbols('hb_price_before')\n\n    # price before discount for purse\n    purse_price_before = symbols('purse_price_before')\n\n    # total discount for purse and handbag\n    total_discount = 121\n\n    # handbag price after 20% discount\n    hb_discounted_price = 428\n    hb_discount_value = hb_price_before * 0.20\n\n    # purse price after 28% discount\n    purse_discount_value = purse_price_before * 0.28\n\n    # system of equations\n    equation1 = Eq(hb_discount_value + purse_discount_value, total_discount)\n    equation2 = Eq(hb_price_before - hb_discount_value, hb_discounted_price)\n\n    # solve for original prices\n    solutions = solve((equation1, equation2), (hb_price_before, purse_price_before))\n\n    return float(solutions[purse_price_before])\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Star jogs for 30 minutes from 6:30 a.m. to 7:00 a.m.\n    jogging_time_hours = 0.5\n    jogging_speed_mph = 6\n    \n    # Star walks for 1 hour from 7:00 a.m. to 8:00 a.m.\n    walking_time_hours = 1\n    walking_speed_mph = 5\n    \n    # Calculate jogging distance\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n    \n    # Calculate walking distance\n    walking_distance = walking_speed_mph * walking_time_hours\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 10\n    lcm = (num1 * num2) // gcd(num1, num2)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_most_layer = (total_books + layers - 1) // layers\n    \n    return min_books_most_layer\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the original amount of money Elvin had as x.\n    x = symbols('x')\n    \n    # According to the problem, Elvin spent $120 on a chair.\n    spent_on_chair = 120\n    \n    # He then spent 40% of the remainder on a jacket.\n    spent_on_jacket = 0.40 * (x - spent_on_chair)\n    \n    # He had 30% of his original amount of money left after shopping.\n    remaining_money = 0.30 * x\n    \n    # Set up the equation for the remaining money after shopping.\n    equation = Eq(x - spent_on_chair - spent_on_jacket, remaining_money)\n    \n    # Solve the equation for x.\n    original_money = solve(equation, x)[0]\n\n    return original_money\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # The difference between the terms\n    # The terms are negative where 50 + n*difference < 0\n    # Solving for n where n*difference = -50 we get the last non-negative term\n    n = -first_term / difference\n\n    return int(n)\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 4):  # hundreds place can be 1, 2, or 3\n        for tens in range(4):     # tens place can be 0, 1, 2, or 3, but cannot be the same as hundreds\n            for ones in range(4): # ones place can be 0, 1, 2, or 3, but cannot be the same as tens or hundreds\n                if ones != tens and ones != hundreds and tens != hundreds:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of books bought at an average price of $3.50 each.\n    x = symbols('x')\n    \n    # Total price for the initial x books.\n    total_initial_cost = 3.5 * x\n    \n    # Cost for the 2 additional books bought at $6 each.\n    cost_additional_books = 2 * 6\n    \n    # New average price after purchasing the additional books.\n    new_average_price = 4\n    \n    # Total cost for all books after purchasing the additional books.\n    total_cost_after_additional_books = total_initial_cost + cost_additional_books\n    \n    # The total number of books after purchasing the additional books is x + 2.\n    total_number_of_books = x + 2\n    \n    # Equation based on the new average price.\n    equation = Eq(total_cost_after_additional_books / total_number_of_books, new_average_price)\n    \n    # Solve the equation for x.\n    num_books = solve(equation, x)\n    total_books = num_books[0] + 2  # Adding the 2 additional books to the initial number of books.\n    \n    return total_books\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n\n    total_weight_g = total_weight_kg * 1000\n    num_pieces = total_weight_g / piece_weight_g\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter is approximately 1.05669 quarts\n    cups = liters_to_quarts / 0.5\n    return round(cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    rachel_candies = solutions[rachel]\n    alice_candies = solutions[alice]\n\n    total_candies = rachel_candies + alice_candies\n\n    return total_candies\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    \n    # Jogging distance\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    \n    # Walking distance\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # Angel has 5/6 as many sweet wrappers as Belle initially.\n    equation1 = Eq(a, (5/6) * b)\n\n    # After throwing away 58 wrappers, Angel has 75% as many sweet wrappers as Belle.\n    equation2 = Eq(a - 58, 0.75 * b)\n\n    # Solving the equations to find the number of sweet wrappers Belle has.\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n    \n    return solutions[dad]\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money, children = symbols('money children')\n\n    # If there was 20p more, then there would be enough for each child to receive 70p\n    equation1 = Eq(money + 20, 70 * children)\n\n    # If each child was to receive 60p, then £2.10 would be left over\n    equation2 = Eq(money - (60 * children), 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (money, children))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Since B=2 and D=0, we have:\n    # 5 x ABCDEF = 6 x EFABC2\n    # ⇒ 5 x (A×100000 + 2×10000 + C×1000 + 0×100 + E×10 + F) = 6 x (E×100000 + F×10000 + A×1000 + B×100 + C×10 + 2)\n    # Given that A, C, E, and F are not 0 and distinct.\n    # Since E cannot be equal to 0 and for 5 x ABCDEF to be divisible by 6, F must be 0 or 5.\n    # We know that D=0, so F cannot be 0. Hence F must be 5.\n    # Now let's substitute B, D and F into the equation:\n    # ⇒ 5 x (A×100000 + 2×10000 + C×1000 + E×10 + 5) = 6 x (E×100000 + 5×10000 + A×1000 + 2×100 + C×10 + 2)\n    # Simplifying it further:\n    # ⇒ 5A x 100000 + 100000 + 5C x 1000 + 5E x 10 + 25 = 6E x 100000 + 300000 + 6A x 1000 + 1200 + 6C x 10 + 12\n    # Now let's rearrange it:\n    # ⇒ (5A - 6E) x 100000 + (-3) x 100000 + (5C - 6A) x 1000 + (5E - 6C) x 10 + 13 = 0\n    # Since (5A - 6E) should be a multiple of 10, E must be 5\n    # Now we have two possibilities 5 or 0, since F is 5, E is 0.\n    # With the constraints in place, let's try out the possible non-zero unique digits for A and C.\n    for A in range(10):\n        for C in range(10):\n            if A == C or A in (0, 2) or C in (0, 2):\n                continue\n            ABCDEF = A*100000 + 2*10000 + C*1000 + 0*100 + 5*10 + 5\n            EFABCD = 5*100000 + 5*10000 + A*1000 + 2*100 + C*10 + 0\n            if 5 * ABCDEF == 6 * EFABCD:\n                return (A*1000 + C*100 + 5*10 + 0)  # FACE = A*1000 + C*100 + E*10 + F\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    amount_to_remit = salary * remit_percentage\n    bank_charge = amount_to_remit * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment_received = 120.75\n    new_balance = current_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # divide by the number of permutations of the three vases\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"2 Mar\", \"%d %b\")\n    end_date = datetime.strptime(\"15 Apr\", \"%d %b\")\n    start_date = start_date.replace(year=end_date.year)\n    \n    ans = (end_date - start_date).days + 1  # +1 because the start date is included\n\n    return ans\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):  # Assuming the special number to be less than 5 digits as a realistic constraint\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Following the Pigeonhole Principle\n    \n    # To guarantee a matching pair of blue gloves, Dilly has to take all 3 right-hand blue gloves\n    # and at least one left-hand blue glove (total = 4)\n    \n    # To guarantee a matching pair of green gloves, Dilly has to take all 4 right-hand green gloves\n    # and at least one left-hand green glove (total = 5)\n    \n    # The worst case is when Dilly tries to find a green pair, hence\n    # the minimum number of gloves to be sure of getting a matching pair is 5\n    return 5\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n    \n    price_increase = original_price * increase_percentage\n    new_price = original_price + price_increase\n    \n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    known_sum = sum(known_numbers)\n    total_sum = mean_value * total_numbers\n\n    missing_number = total_sum - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "from math import factorial\n\ndef solution():\n    # Eddie is always on the left end, so it's fixed.\n    # Avril is always next to Eddie, so we treat Eddie and Avril as one unit.\n    # We have 5 other students to arrange, plus the Eddie-Avril unit, making 6 units to arrange.\n    arrangements_of_six = factorial(6)\n\n    # Avril can either stand to the immediate left or immediate right of Eddie\n    # Since Eddie is fixed on the left end, Avril has 2 options.\n    avril_options = 2\n\n    # Total arrangements is the product of the above possibilities\n    total_arrangements = arrangements_of_six * avril_options\n\n    return total_arrangements\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Calculate the number of holes that were dug every 3m\n    holes_dug_every_3m = 30  # Given in the question\n\n    # Calculate the distance covered after 30 holes dug every 3m\n    distance_covered_3m = holes_dug_every_3m * 3  # 30 holes * 3m/hole\n\n    # Calculate the remaining distance to cover with 5m interval\n    remaining_distance_5m = 300 - distance_covered_3m  # 300m total circumference\n\n    # Calculate the number of additional holes needed with 5m interval\n    # to complete the job\n    # Add one to account for the last hole at the end of the remaining distance.\n    additional_holes_needed = -(-remaining_distance_5m // 5)  # Ceiling division\n    \n    return additional_holes_needed\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: After Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: After they both eat 8 sweets, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculating the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate the binomial coefficient\n    def binom(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Number of ways to reach the 5th step: 1-1-1-1-1 or 1-1-1-2 (2 ways)\n    # So there are 2 ways to reach the 5th step\n    \n    # After the 5th step, there are 5 more steps to reach the 10th\n    # Nelson can take (1-1-1-1-1 -> 1 way), (1-1-1-2 -> 4 choose 1 = 4 ways),\n    # (1-1-2-2 -> 4 choose 2 = 6 ways), (1-2-2-2 -> 4 choose 3 = 4 ways),\n    # (2-2-2-2 -> 1 way) to climb the remaining steps\n    \n    # Number of ways to climb the last 5 steps\n    ways_after_5th = sum(binom(4, i) for i in range(5))\n    \n    # Total combinations\n    ans = 2 * ways_after_5th\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_numbers = [num for num in range(1, 51) if '3' in str(num)]\n    return sum(erased_numbers)\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_used = 0\n    page_number = 0\n\n    while digits_used < 792:\n        page_number += 1\n        digits_used += len(str(page_number))\n\n    return page_number - 1  # Subtracting 1 because we have to return the last page number that does not exceed 792 digits\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from sympy import symbols, evalf\n\ndef solution():\n    x = symbols('x')\n    expressions = [\n        (15 + x) * (5 + x) + (15 - 6 + 7),\n        15 + x * (5 + (x * (15 - 6) + 7)),\n        (15 + 5) * (x + 15) - (6 + x + 7),\n        15 + 5 * (x + 15) - (6 + (x + 7)),\n        ((15 + 5) * 5 + 15) - (6 + 7)\n    ]\n    \n    # Replace x with multiplication operator\n    max_value = -float('inf')\n    for expr in expressions:\n        cur_expr = expr.subs(x, 5)\n        cur_value = cur_expr.evalf()\n        if cur_value > max_value:\n            max_value = cur_value\n    \n    return max_value\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    ivan_total = ivan_average * 5\n    billy_average_first_four = 89\n    billy_total_first_four = billy_average_first_four * 4\n    billy_final_average = ivan_average + 10\n\n    billy_final_total = billy_final_average * 5\n    billy_score_fifth_assignment = billy_final_total - billy_total_first_four\n\n    return billy_score_fifth_assignment\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # There will be (1000 - 1 + 1) = 1000 ways to add two whole numbers to give a sum of 1000\n    # For each number from 1 to 999, there is a unique number (1000 - number) that sums up to 1000\n    # Including the case where both numbers are 500 (500 + 500 = 1000)\n    ans = 1000\n    return ans\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given the 7th term is 39, 8th term is 44, and 9th term is 49\n    # It's clear we have an arithmetic sequence with a common difference of 5\n\n    # Find the first term (a1)\n    # Since the 7th term (a7) = 39, we use the formula for the nth term of an arithmetic sequence: an = a1 + (n-1)d\n    # 39 = a1 + (7-1)*5\n    # 39 = a1 + 30\n    # a1 = 39 - 30\n    a1 = 9\n\n    # Common difference (d)\n    d = 5\n\n    # We need to find the 100th term (a100)\n    # a100 = a1 + (100-1)*d\n    a100 = a1 + (100-1)*d\n\n    return a100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260 to get the prime factors and their exponents\n    prime_factors = factorint(1260)\n\n    # Find m by ensuring the exponent of each prime factor is even\n    m = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # The least common multiple of 8 and 11\n    for number in range(10, 100):  # Loop through two-digit numbers\n        if number % 8 == 6 and number % 11 == 6:\n            return number + lcm  # Return the next number after the first that fulfills the condition\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    capacity_per_boat = 7\n    \n    num_boats = -(-students // capacity_per_boat)  # Ceiling division to get the minimum number of boats\n    \n    return num_boats\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit of 9 in power repeats in a pattern: 9, 1, 9, 1, ...\n    # Since the pattern repeats every 2, we find the remainder of 99 divided by 2.\n    remainder = 99 % 2\n    # If the remainder is 1, the ones digit will be 9. If it's 0, it will be 1.\n    if remainder == 1:\n        ans = 9\n    else:\n        ans = 1\n    return ans\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = pow(2, 2015, 3)\n    return remainder\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    stickers_given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - stickers_given_away\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n\n    # Step 5: Add 50 (Inverse of subtracting 50)\n    step4 = result + 50\n\n    # Step 4: Subtract the number of the day of his birth twice (Inverse operation is dividing by 2)\n    # Since this step is not specific, we need to check each day (1 to 31) to see which fits in the pattern\n    for day in range(1, 32):\n        temp_step4 = step4 - (2 * day)\n        \n        # Step 3: Divide by 50 (Inverse of multiply by 50)\n        step2 = temp_step4 / 50\n\n        # Step 2: Subtract 1 (Inverse of adding 1)\n        step1 = step2 - 1\n\n        # Step 1: Divide by 4 (Inverse of multiply by 4)\n        month = step1 / 4\n\n        # Check if month is an integer and within range (1 to 12)\n        if month.is_integer() and 1 <= month <= 12:\n            return int(month), day\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    concentration = (sugar / total_mixture) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial as f\n    \n    # Treat the four pupils who insist on standing together as a single unit.\n    # There are now 5 units to arrange.\n    units = 5\n  \n    # These 5 units can be arranged in 5! ways\n    arrangement_units = f(units)\n  \n    # The 4 pupils can stand together in 4! ways\n    arrangement_within_unit = f(4)\n  \n    # Total arrangements is the product of the two possibilities\n    total_arrangements = arrangement_units * arrangement_within_unit\n  \n    return total_arrangements\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # initial situation, 6 ponies total, Rein Beau worth 250k.\n    rein_beaus_value = 250000\n    small_stable_value = 3 * rein_beaus_value  # Rein Beau + 2 other ponies\n    large_stable_value = 3 * symbols('x')  # 3 ponies of unknown value\n\n    # When Rein Beau moves to the large stable, each stable's average increases by 10000.\n    avg_increase_per_stable = 10000\n\n    # Let x be the average value of the ponies in the large stable before Rein Beau moves in.\n    x = symbols('x')\n    # The initial average values before Rein Beau moves:\n    # Small stable had Rein Beau, so it's average is his value since he is the most expensive and there are 2 other ponies.\n    # Large stable had no Rein Beau, so it's average is x.\n\n    # Equations system:\n    equation1 = Eq(small_stable_value, rein_beaus_value + 2 * x)                                       # The value of the small stable with Rein Beau.\n    equation2 = Eq(small_stable_value + avg_increase_per_stable * 3, 3 * x)                            # The value of the small stable after Rein Beau moves.\n    equation3 = Eq(large_stable_value + avg_increase_per_stable * 3, rein_beaus_value + 3 * x)         # The value of the large stable after Rein Beau moves.\n\n    # Solve the system for x (average value of the other ponies).\n    average_value_of_ponies = solve((equation1, equation2, equation3), (x))\n\n    # The total value is Rein Beau's value + 5 times the average value of the other ponies.\n    total_value = rein_beaus_value + 5 * average_value_of_ponies[x]\n\n    return total_value\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    cost = (7 * lamb_price_per_kg) + (30 * beef_price_per_kg)\n    return cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the first of the three consecutive numbers be x.\n    # Then, the second number will be x + 1 and the third x + 2.\n    # According to the problem, their sum is 60:\n    # x + (x + 1) + (x + 2) = 60\n    # Simplify it to 3x + 3 = 60\n    # Subtract 3 from both sides: 3x = 57\n    # Divide both sides by 3: x = 19\n    # The consecutive numbers are 19, 20, and 21.\n    # The largest number is 21.\n\n    return 21\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 // 8\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's use x for the number of gold medals and y for the number of silver medals.\n    # We have the following system of equations:\n    # 5x + 4y = 331 (total points)\n    # x + y = 80 (total medals)\n    \n    # From the second equation, we can express y as y = 80 - x.\n    # Substitute y into the first equation and solve for x:\n    for x in range(81):\n        y = 80 - x\n        if 5*x + 4*y == 331:\n            return x\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    master, apprentice = symbols('master apprentice')\n\n    # Equation 1: 1 master and 3 apprentices finish in 4 days, so their work rates combined should be 1/4\n    eq1 = Eq(1 * master + 3 * apprentice, 1/4)\n\n    # Equation 2: 2 masters and 1 apprentice finish in 3 days, so their work rates combined should be 1/3\n    eq2 = Eq(2 * master + 1 * apprentice, 1/3)\n\n    # Solve the system of equations\n    rates = solve((eq1, eq2), (master, apprentice))\n\n    # Calculate how long it will take 1 apprentice to complete the task on his own\n    apprentices_time = 1 / rates[apprentice]\n\n    return apprentices_time\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Let total number of spectators be x\n    # Then (2/3)x is the number spectators who were not children (the remainder)\n    # And (5/8) * (2/3)x were men\n    # The number of women is the remainder, i.e., (2/3)x - (5/8) * (2/3)x which equals 80\n    # Therefore, (2/3)x * (1 - (5/8)) = 80\n    # Solving for x gets us the total number of spectators\n    \n    women_fraction = (2/3) * (1 - (5/8))\n    total_spectators = 80 / women_fraction\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Define a function to apply the new operation based on observed patterns\n    def new_operation(a, b):\n        # From the given examples, we can observe that:\n        # if a is odd then a★b is a + b\n        # if a is even then a★b is a * b\n        if a % 2 == 1:  # Check if 'a' is odd\n            return a + b\n        else:  # 'a' is even\n            return a * b\n\n    # Calculate 11★10 using the new_operation function\n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_position = 10\n    rabbit_position_from_right = 9\n    dolls_between = 5\n\n    total_dolls = elephant_position + rabbit_position_from_right + dolls_between - 1 # Subtract 1 because we counted the elephant's position twice\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    calculation = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    ans = calculation\n    return ans\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))  # 61 because the upper bound is exclusive\n    return primes_sum\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    total_students = 0\n    diff = 32\n    # Assuming the side of the square is 2n+1 (odd number of layers)\n    # Number of boys in outer layer (4n) plus number of girls in second layer (4(n-1)) and so on.\n    # After expanding: Boys = n(2n+1), Girls = n^2\n    # Boys - Girls = n(2n+1) - n^2 = 32 => n^2 + n - 32 = 0\n    # Solve the quadratic equation for positive n\n    for n in range(1, 100):  # Trying numbers from 1 to 100, assuming the number of students won't exceed this.\n        boys = n * (2 * n + 1)\n        girls = n * n\n        if boys - girls == diff:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    r_original, d_original, months, r_monthly, d_monthly = symbols('r_original d_original months r_monthly d_monthly')\n    \n    # Equation representing the total number of flowers initially\n    equation1 = Eq(r_original + d_original, 300)\n    \n    # Equations representing the total number of roses and daisies after planting\n    equation2 = Eq(r_original + months * r_monthly, 280)\n    equation3 = Eq(d_original + months * d_monthly, 180)\n    \n    # Equation representing that the number of plants planted every month is the same for roses and daisies\n    equation4 = Eq(r_monthly, d_monthly)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r_original, d_original, months, r_monthly, d_monthly))\n\n    return solutions[r_original]\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n\n    # Calculate common difference\n    common_difference = (nth_term_15 - nth_term_10) // (15 - 10)\n\n    # Calculate first term a1\n    first_term = nth_term_10 - common_difference * (10 - 1)\n\n    # Calculate 102nd term\n    nth_term_102 = first_term + common_difference * (102 - 1)\n    \n    return nth_term_102\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n\n    coffee_litres = 6\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books  # Chinese books + comics\n\n    # Let the number of comics be x.\n    # Then Chinese books are 2x.\n    # So, x + 2x = non_english_books\n    comics = non_english_books // 3  # Solving for x.\n\n    return comics\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    # Calculate total score after 6 accurate shots and 4 misses\n    total_score = (6 * 5) + (4 * 0)\n    # Calculate the number of total shots\n    total_shots = 6 + 4\n    # Calculate the average score\n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    from fractions import Fraction\n\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator_1 = Fraction(2, 25)\n    fraction_1 = numerator_1 / denominator_1\n\n    numerator_2 = 2 - Fraction(2, 3)\n    denominator_2 = Fraction(8, 3)\n    fraction_2 = numerator_2 / denominator_2\n\n    ans = fraction_1 + fraction_2\n\n    return ans\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    min_apples = None  # Initialize variable to track the minimum apples for the child with the most\n    for x1 in range(1, 50):\n        for x2 in range(1, x1):\n            for x3 in range(1, x2):\n                for x4 in range(1, x3):\n                    for x5 in range(1, x4):\n                        for x6 in range(1, x5):\n                            for x7 in range(1, x6):\n                                for x8 in range(1, x7):\n                                    if x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 == 50:\n                                        min_apples = x1 if min_apples is None else min(min_apples, x1)\n    return min_apples\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3*apple + 5*orange, 270)\n    equation2 = Eq(3*apple + 7*orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253  # length of the train in meters\n    tunnel_length = 669  # length of the tunnel in meters\n    speed = 104          # speed of the train in meters per second\n\n    # The total distance to be covered is the sum of the train and tunnel lengths\n    total_distance = train_length + tunnel_length\n    \n    # Duration is total distance divided by the speed\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    greatest_no_bow_ties_spectacles = total_men - max(bow_ties, spectacles)\n\n    return greatest_no_bow_ties_spectacles\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return (50 / 100) * (20 / 100) * 350\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    total_apples = 19\n    number_of_children = 5\n    max_apples = total_apples - (1 + 2 + 3 + 4)  # Smallest amounts for the other children\n    return max_apples\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n    \n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return 414 * (1/3)\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # Using the concept of partitions of a number\n    # For 8, the partitions (ignoring order) are:\n    # 7+1, 6+2, 5+3, 5+2+1, 4+4, 4+3+1, 4+2+2, 4+2+1+1, 3+3+2, 3+3+1+1,\n    # 3+2+2+1, 3+2+1+1+1, 2+2+2+2, 2+2+2+1+1, 2+2+1+1+1+1, 2+1+1+1+1+1+1,\n    # 1+1+1+1+1+1+1+1\n\n    # Count the partitions without considering the order\n    partitions = [\n        # sum of two\n        (7, 1),\n        (6, 2),\n        (5, 3),\n        (4, 4),\n        # sum of three\n        (5, 2, 1),\n        (4, 3, 1),\n        (4, 2, 2),\n        (3, 3, 2),\n        (3, 2, 2, 1), \n        # sum of four\n        (4, 2, 1, 1),\n        (3, 3, 1, 1),\n        (3, 2, 2, 1),\n        # sum of five\n        (3, 2, 1, 1, 1),\n        (2, 2, 2, 1, 1),\n        # sum of six\n        (2, 2, 2, 1, 1),\n        (2, 2, 1, 1, 1, 1),\n        # sum of seven\n        (2, 1, 1, 1, 1, 1, 1),\n        # sum of eight\n        (1, 1, 1, 1, 1, 1, 1, 1)\n    ]\n    \n    # count the number of unique ways (permutations) that each partition\n    # can be produced\n    from math import factorial\n    def count_permutations(partition):\n        num_counts = {n: partition.count(n) for n in set(partition)}\n        count_perm = factorial(sum(num_counts.values()))\n        for n in num_counts.values():\n            count_perm //= factorial(n)\n        return count_perm\n\n    # Sum the unique permutations for each partition to get the answer\n    ans = sum(count_permutations(part) for part in partitions)\n    return ans\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Treat Ali and Bala as one unit since they must stand together,\n    # and with Dan fixed on the far left, we arrange the \"units\": Dan, (Ali, Bala), Charles, Ella\n    # There are 3! = 6 ways to arrange these units\n\n    units_arrangement = factorial(3)\n\n    # Ali and Bala can be in two orders within their unit\n    ali_bala_arrangement = factorial(2)\n\n    total_arrangements = units_arrangement * ali_bala_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 140 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    max_same_color_balls = max(15, 9, 6)  # Maximum number of balls of the same color\n    balls_to_draw = max_same_color_balls + 2  # Add 2 balls to ensure we have at least two other colors\n    return balls_to_draw\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    return sum(sequence)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_wood = 6.5\n\n    left_over = total_length - (used_fence + used_wood)\n\n    return left_over\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 7, 8]\n    all_combinations = list(permutations(digits, 3))  # All 3 digit permutations\n    return len(all_combinations)\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # the subtrahend is an XX53 number (where XX represents the tens place)\n    # the minuend is an XX32 number\n    # the incorrect difference is computed as XX53 - XX32 = 36\n\n    for minuend_tens_place in range(10, 100):\n        # Construct the incorrect subtrahend by swapping the tens and ones place values as per the mistake\n        incorrect_subtrahend = minuend_tens_place * 10 + 53\n        minuend = minuend_tens_place * 10 + 32\n\n        # Compute the incorrect difference\n        incorrect_difference = incorrect_subtrahend - minuend\n\n        # If we found the incorrect difference as given, we compute the correct one\n        if incorrect_difference == 36:\n            # Now compute the correct subtrahend from the mistaken one\n            correct_subtrahend = minuend_tens_place * 10 + 32\n            # Compute the correct difference\n            correct_difference = minuend - correct_subtrahend\n            return correct_difference\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen gives away 12 sweets\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny - 12))\n    \n    # Lenny gives away 12 sweets\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny - 12))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ellen, lenny))\n    \n    # Total number of sweets they have altogether\n    total_sweets = solutions[ellen] + solutions[lenny]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50000_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    remaining_tax_rate = 0.06 + T / 100\n    remaining_income_tax = remaining_tax_rate * remaining_income\n\n    total_tax = Eq(first_50000_tax + remaining_income_tax, 10000)\n\n    T_value = solve(total_tax, T)[0]\n    return T_value\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits, so the ratio of fishes to rabbits is 3:2\n    fish_to_rabbit = 3 / 2\n\n    # Oscar trades 3 rabbits for 4 packs of wheat, so the ratio of rabbits to wheat is 3:4\n    rabbit_to_wheat = 3 / 4\n\n    # Deniss wants 8 packs of wheat, we need to find equivalent fishes for it\n    packs_of_wheat = 8\n\n    # Use the ratios fish_to_rabbit and rabbit_to_wheat to find out the number of fishes for 8 packs of wheat\n    # Calculate the total ratio of fishes to wheat by multiplying fish_to_rabbit and rabbit_to_wheat\n\n    # fishes ----- 1 * rabbit_to_wheat ------ 1*3 / 4 * wheat\n    # Therefore, for one pack of wheat, we need (1 * 3 / 4) / rabbit_to_wheat fishes.\n    # So, for 8 packs of wheat, we need (1 * 3 / 4) / rabbit_to_wheat * 8 fishes.\n\n    # Simplifying the ratios and multiplying\n    fishes_for_one_pack_of_wheat = (1 / fish_to_rabbit) * (1 / rabbit_to_wheat)\n    fishes_for_eight_packs_of_wheat = fishes_for_one_pack_of_wheat * 8\n\n    # Since fishes_for_one_pack_of_wheat is in terms of 1 fish, we need to find out how many fishes\n    # that would be considering the ratio. Since we got reciprocal of fish_to_rabbit, we will\n    # multiply it by packs_of_wheat (which in this case is 8 packs)\n    ans = fish_to_rabbit * fishes_for_eight_packs_of_wheat\n\n    return round(ans) # Rounding to the nearest whole number since you can't give a fraction of a fish\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # To get the smallest difference, the numbers should be arranged such that\n    # the most significant digits have the smallest possible difference,\n    # the next most significant digits also have the smallest possible difference, and so on.\n\n    # We can split the digits into two groups of 5 digits each - (0,1,2,3,4) and (5,6,7,8,9)\n    # and arrange them in increasing and decreasing order to form the smallest and largest 5-digit numbers.\n    # 0 cannot be the most significant digit, so we place it in the second smallest number as second digit.\n\n    # Form the two 5-digit numbers\n    smallest_number = 10234\n    largest_number = 98765\n\n    # Calculate the smallest possible difference\n    diff = largest_number - smallest_number\n\n    return diff\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # Length of the train in meters\n    tunnel_length = 500  # Length of the tunnel in meters\n    speed = 10  # Speed of the train in meters per second\n\n    # Duration for the train to completely pass through the tunnel\n    duration = (train_length + tunnel_length) / speed\n\n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 2\n    while True:\n        if all(isprime(n + i) for i in [0, 4, 6, 132, 250]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    amount_paid = 100  # In pence, since £1 equals 100p\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial\n\ndef solution():\n    # Total number of presents Amy could give to one child\n    total_presents = 7\n    total_children = 5\n    \n    # Calculate the combinations of giving 5 presents out of 7 to 5 children\n    total_combinations = factorial(total_presents) // (factorial(total_children) * factorial(total_presents - total_children))\n    \n    # Calculate the combinations when Richard and Kevin both don't get what they want (Case where both toy car and puzzle are not given)\n    presents_left_when_both_dont_get = 5  # Either toy car or puzzle is given but not both\n    combinations_when_both_dont_get = factorial(presents_left_when_both_dont_get) // (factorial(total_children) * factorial(presents_left_when_both_dont_get - total_children))\n    \n    # Calculate the combinations when one of Richard or Kevin don't get what they want (Case where one gets but not the other)\n    # There are two such cases: one where Richard gets and Kevin doesn't and vice versa\n    presents_left_when_one_doesnt_get = 6  # Both presents are available but one child doesn't get what they want\n    combinations_when_one_doesnt_get = 2 * (factorial(presents_left_when_one_doesnt_get) // (factorial(total_children) * factorial(presents_left_when_one_doesnt_get - total_children)))\n    \n    # Use the inclusion-exclusion principle to get the final answer\n    ans = total_combinations - combinations_when_both_dont_get - combinations_when_one_doesnt_get\n    \n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10  # time in hours\n\n    # Relative speed is the difference between Jack's and Rose's speeds\n    relative_speed = jack_speed - rose_speed\n\n    # Distance is the product of time and relative speed\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n    \n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)\n    \n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n    \n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    total = 0\n    for n in range(2, 2021, 4):\n        total += n**2 - (n-2)**2\n    return total\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 4.6*x - 0.35 - 0.57\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiple_of_7 = 5000 // 7\n    multiple_of_13 = 5000 // 13\n    multiple_of_7_and_13 = 5000 // (7 * 13)\n\n    # Applying the Inclusion-Exclusion Principle\n    ans = multiple_of_7 + multiple_of_13 - multiple_of_7_and_13\n\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    total_girls = 333\n    total_teachers = 36\n\n    total_boys = total_pupils - total_girls\n    more_boys_than_teachers = total_boys - total_teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # David works at a rate of 1/10 of the journal per day\n    # Emma works at a rate of 1/18 of the journal per day\n    # Together they complete 1 journal in 14 days\n    # David worked for x days and Emma worked for (14 - x) days\n    \n    equation = Eq((x/10) + ((14 - x)/18), 1)\n    \n    # Solve the equation for x\n    david_days = solve(equation, x)\n    \n    # Calculate the number of days Emma worked on the journal\n    emma_days = 14 - david_days[0]\n   \n    return emma_days\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = ((n * (n + 1)) // 2) ** 2\n    sum_of_numbers = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirt_price = 56 / (145 - 138)\n    total_money = 145 * t_shirt_price\n\n    return total_money\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    \n    # Total number of permutations of the entire word\n    total_permutations = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    \n    # Now, find the number of permutations with two S's together, which we will subtract from the total\n    # Replace 'SS' with a placeholder (like 'X') and count permutations of this new word\n    reduced_word = word.replace('SS', 'X')\n    perm_with_ss_together = factorial(len(reduced_word)) // (factorial(reduced_word.count('X')) * factorial(reduced_word.count('C')) * factorial(reduced_word.count('U')) * factorial(reduced_word.count('E')))\n    \n    # Since we replaced two 'S' with one 'X', we need to adjust for the number of places 'SS' can occur\n    # There are (len(word) - 1) such places\n    ss_combinations = len(word) - 1\n    \n    # Number of permutations where S's are together\n    perm_with_ss_together *= ss_combinations\n    \n    # Subtract the number of permutations with S's together from the total to get permutations where no two S's are next to each other\n    ans = total_permutations - perm_with_ss_together\n\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # Since the numbers are consecutive even numbers, differences between them are 2\n    # Let's denote the first term of the sequence be x\n    # Then the 14 numbers are: x, x+2, x+4, ..., x+26 (since we have 14 terms, the last term is x + 2*(14-1))\n    # The average of these 14 numbers can be calculated by the formula:\n    # Average = (first_term + last_term) / 2.\n    # According to the question, the average is 119, so:\n    # (x + (x + 26)) / 2 = 119\n    # 2x + 26 = 238\n    # 2x = 238 - 26\n    # 2x = 212\n    # x = 106\n    # Therefore, the smallest number among the 14 numbers is 106.\n    \n    return 106\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    min_same_height_students = 4\n\n    height_range = max_height - min_height + 1\n    min_class_size = (min_same_height_students - 1) * height_range + 1\n\n    return min_class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    increase_percentage = 12\n    new_pay_per_hour = old_pay_per_hour * (1 + increase_percentage / 100)\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    return (3 ** 2009) % 10\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to cut a piece of wood into 5 sections.\n    # This means she makes 4 cuts since 1 piece of wood requires no cut, 2 pieces require 1 cut, and so on.\n    # Hence, each cut takes 12 / 4 = 3 minutes.\n\n    # To cut the wood 5 times, Rachel needs to make 5 cuts.\n    # Therefore, she will take 5 cuts * 3 minutes/cut = 15 minutes.\n\n    # Return the total time for 5 cuts.\n    return 5 * (12 / 4)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5  # The smallest even number that is a multiple of 5\n    while True:\n        if (number ** 0.5).is_integer():\n            break\n        number += 2 * 5  # Increment by the LCM of 2 and 5 to maintain the properties\n    return number\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    # Let the total number of people be x.\n    # Then the number of people who are not adults is (1 - 2/5)x = (3/5)x.\n    # The number of boys is (5/9) * (3/5)x = (1/3)x.\n    # The number of girls is therefore (3/5)x - (1/3)x = (9/15)x - (5/15)x = (4/15)x.\n    # Solving for (4/15)x = 36 gives us x.\n    \n    x = (36 * 15) / 4\n    \n    return x\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_pence = 126  # converting pounds to pence\n    coin_values = [2, 5]  # since there are equal number of 2p and 5p coins\n\n    # Let x be the number of coins of each denomination in the bag.\n    # The total amount in pence is then 2x (from 2p coins) + 5x (from 5p coins).\n    # The equation is: 2x + 5x = total_pence\n    # Solving for x gives us the number of coins of each type.\n\n    x = total_pence / sum(coin_values)\n    \n    # As there are equal numbers of both 2p and 5p coins, the total number of coins\n    # will be 2 times x (one x for 2p and one x for 5p).\n    num_coins = 2 * x\n\n    return int(num_coins)\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import factorial\n\n    def n_plus_k_minus_1_C_k(n, k):\n        return factorial(n + k - 1) // (factorial(k) * factorial(n - 1))\n\n    # since someone might not get any book, each child can be seen as a bin, \n    # and we want to distribute 20 identical items (books) into 4 bins (kids)\n    ans = n_plus_k_minus_1_C_k(20, 4)\n\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_days_product = 3 * 30\n    days_for_2_people = men_days_product / 2\n    return days_for_2_people\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    adult_price = 30 / (1 - child_discount)\n    senior_discount = 0.20\n    senior_price = adult_price * (1 - senior_discount)\n    \n    return senior_price\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n    \n    ans = trains + cars + boats\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')  # Will's current age\n\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least two books, so we distribute 2 books to each first.\n    remaining_books = 30 - 5 * 2\n    \n    # Now, we need to distribute the remaining 20 books among 5 kids\n    # This is equivalent to finding combinations with repetition\n    # We can imagine 20 identical books ('b') and 4 separators ('|') to divide them into 5 groups\n    # Example: bb|bbb|b|bbb|bbbbbbb - This is one way to divide the books among 5 kids\n    # So the total number of objects is 20 + 4 = 24\n    # We need to choose positions for the 4 separators out of these 24\n    ans = comb(24, 4)\n    return ans\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    return like_neither\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, 2 / 3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    mike_amount = solutions[mike]\n    mason_amount = solutions[mason]\n    chewy_amount = solutions[chewy]\n\n    total_soup_ml = mike_amount + mason_amount + chewy_amount\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    max_sum = float('-inf')\n    second_largest_term = None\n    \n    for ops in permutations(operations):\n        term1 = eval(f\"(1/2) {ops[0]} (1/9)\")\n        term2 = eval(f\"(1/3) {ops[1]} (1/8)\")\n        term3 = eval(f\"(1/4) {ops[2]} (1/7)\")\n        term4 = eval(f\"(1/5) {ops[3]} (1/6)\")\n        \n        current_sum = term1 + term2 + term3 + term4\n        if current_sum > max_sum:\n            max_sum = current_sum\n            sorted_terms = sorted([term1, term2, term3, term4])\n            second_largest_term = sorted_terms[-2]\n\n    A, B = second_largest_term.as_integer_ratio()\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    # Number of intervals is one less than the number of trees\n    num_intervals = road_length // interval\n    \n    # Number of trees is one more than the number of intervals\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, S\n\n    x = symbols('x')\n    \n    # Define the inequality we need to solve\n    inequality = (x + 3)/(2*x + 5) > S('0.505')\n\n    # Find the solutions to the inequality, we want the one where x is less than 47.5\n    solutions = solve(inequality, x)\n\n    # The largest number of matches he could have won is the floor of the highest solution\n    ans = int(solutions[1].evalf()) - 1  # Subtract 1 since it's less than\n\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 89)])\n    return ans\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coins are of denominations: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p)\n    # Since Susan's bus fare is 44p, let's assume she gives a £1 coin (100p)\n    # The change she should get is 100p - 44p = 56p\n    # To minimize the number of coins, we should start with the largest denomination smaller than the change\n\n    change = 100 - 44  # 56p\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Start from the largest coin denomination and go down\n    number_of_coins = 0\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            number_of_coins += 1\n    \n    return number_of_coins\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2  # Since the number of students will be the same in each room after transfer\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    amount_spent = 89.65\n    amount_left = 20.35\n\n    initial_amount = amount_spent + amount_left\n\n    return initial_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Calculate the common difference using the 10th and 15th terms\n    tenth_term = 23\n    fifteenth_term = 38\n    terms_apart = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / terms_apart\n\n    # Calculate the 12th term based on 10th term and the common difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    ans = sum((i / ((i**2 + i - 1) * (i**2 + i))) for i in range(1, 8)) + 1/29\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "from math import gcd\n\ndef solution():\n    class_a = 24\n    class_b = 36\n    class_c = 42\n    \n    common_factor = gcd(gcd(class_a, class_b), class_c)\n    \n    return common_factor\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_combinations = total_points  # Each point can be the vertex of a right angle.\n    \n    # Cases for right angle formation:\n    #   Hypotenuse: Adjacent Points - 4 possibilities\n    #   Sides: Non-Adjacent (2 points away) - 4 possibilities\n    # Right angles can be at each of the 12 points. For each 4 right-angle positions,\n    # there are 4 possibilities for the hypotenuse, with 2 possibilities for the\n    # remaining side for each hypotenuse position (total 4 * 2 = 8 combinations per right angle position).\n    \n    # Total combinations for right-angled triangles:\n    ans = right_angle_combinations * 8\n\n    return ans\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i - 6 for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    cost_per_day = 4.36\n    days = 5\n\n    total_cost = children * cost_per_day * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * 5 - wrong * 3\n        if score == 76:\n            return correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3/8\n    quantity = 16\n    ans = fraction * quantity\n    return ans\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    # Let's denote the cost price as 'cp'.\n    # The marked price (20% above cost price) would be 'mp = 1.20 * cp'.\n    # The selling price (90% of the marked price) would be 'sp = 0.90 * mp = 0.90 * 1.20 * cp'.\n    # The profit is given as 'profit = sp - cp = 120'.\n    # So we have 'sp = cp + 120'.\n    # Substituting the value of sp in terms of cp, we have '0.90 * 1.20 * cp = cp + 120'.\n    # Solving for cp, we have '1.08 * cp = cp + 120'.\n    # Rearranging, we have '0.08 * cp = 120'.\n    # Dividing both sides by 0.08, we have 'cp = 120 / 0.08'.\n\n    cp = 120 / 0.08\n    return cp\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    midway = (num1 + num2) / 2\n    return midway\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' can't be 0 as it's the first digit in a 3-digit number\n        for b in range(10): # 'b' can be any digit from 0 to 9\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "def solution():\n    from math import comb\n    ans = comb(10, 3)\n    return ans\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n    \n    # The first part is about arranging 4 different colored socks\n    # The number of ways to arrange them is simply 4!\n    ways_4_socks = factorial(4)\n\n    # The second part is about arranging 2 pairs of socks\n    # Here we treat each pair as one entity, so we have 2! ways to arrange pairs.\n    # Within each pair, the socks can also be interchanged, so for each pair, there are 2! arrangements.\n    # Total arrangements for the two pairs is 2! * 2!.\n    ways_2_pairs = factorial(2) * factorial(2)\n    \n    # Overall number of ways to arrange two pairs of socks:\n    # we need to consider that each pair can be arranged internally, which leads to additional arrangements.\n    ways_2_pairs *= factorial(2)\n    \n    ans = (ways_4_socks, ways_2_pairs)\n    return ans\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Initially, they have a total of 24 sweets\n    # After receiving 4 sweets each, Andre has 6 more than Beth\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4  # Return Beth's current sweets count after receiving 4 more\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the mass of a table and the mass of a chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n    \n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Total number of people including Judy\n    total_people = 6\n\n    # Judy can stand on 2 different positions (either end)\n    judy_positions = 2\n\n    # Calculate permutations for the remaining friends\n    friends_permutations = factorial(total_people - 1)\n\n    # Total ways Judy and her friends can perform\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_of_6_bars = 3.18\n    cost_per_bar = cost_of_6_bars / 6\n    cost_of_5_bars = cost_per_bar * 5\n    return cost_of_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari ended in second, and overtook 5 cars\n    # He must have overtaken the cars that finished in 3rd - 7th place\n    # So there has to be at least 7 cars (1st place + the 5 overtaken + the Ferrari)\n    # Since the Ferrari finished second, we add 1 to this number to account for the car in 1st place\n    return 7 + 1  # the Ferrari itself plus the number of cars overtaken plus the first place\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The strategy for winning is to leave a number of apples that is a multiple of 4 for the other player.\n    # To guarantee a win, Anthea should remove enough apples to make the total count a multiple of 4.\n    \n    # Number of apples on the table\n    apples_total = 18\n\n    # Anthea should take enough apples such that the remainder is a multiple of 4\n    # We will try to take 1, 2, or 3 apples and check the result\n    for apples_to_take in range(1, 4):\n        # Remaining apples after Anthea's turn\n        remaining_apples = apples_total - apples_to_take\n        # Anthea wins if the remaining apples are a multiple of 4\n        if remaining_apples % 4 == 0:\n            ans = apples_to_take\n            return ans\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Equation based on initial information\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation after receiving more sweets\n    equation2 = Eq(andre + 4 - 6, beth + 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "网络故障，请重试"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_for_four_numbers = 130 * 4\n    total_for_three_numbers = 110 * 3\n    removed_number = total_for_four_numbers - total_for_three_numbers\n    return removed_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    maths_elder = symbols('maths_elder')\n    english_younger = symbols('english_younger')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(maths_elder - 10, english_younger - 4) # Elder spent 10 mins more on maths than younger on English\n    equation2 = Eq(maths_elder + english_younger, 88) # Elder spent a total of 88 mins\n    equation3 = Eq(english_younger - (maths_elder - 10) - 12, 0) # Younger spent 12 mins less on maths than English\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (maths_elder, english_younger))\n\n    return solutions[english_younger]\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert the times to seconds for easier calculations\n    first_light = 60          # 1 minute\n    second_light = 90         # 1.5 minutes\n    nine_minutes = 9 * 60     # 9 minutes in seconds\n\n    # Calculate the LCM of the first two lights and nine minutes\n    lcm_two_lights = lcm(first_light, second_light)\n    lcm_all = lcm(lcm_two_lights, nine_minutes)\n\n    # The third light change time needs to be a divisor of the LCM that is at least 30 seconds\n    for time in range(30, lcm_all+1):\n        if lcm_all % time == 0:\n            return time\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Leo wants to win the game, which means he should leave a multiple of 3\n    # apples for Mia in order to always maintain a winning position.\n    # 14 is not a multiple of 3, but 12 and 15 are the closest multiples of 3.\n    # Leo aims to reach 12 apples after his first move so that whatever Mia picks\n    # (1 or 2 apples), he can always pick a number that results in a multiple\n    # of 3 remaining apples.\n\n    # Calculate the initial move\n    initial_move = 14 % 3\n\n    # If initial_move is 0 or 1, Leo should pick 1 apple\n    # If initial_move is 2, Leo should pick 2 apples to leave a multiple of 3\n    leo_first_turn = 2 if initial_move == 2 else 1\n    \n    return leo_first_turn\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon\n    # Let y be the value of one gold ring\n    # According to the problem, 12x = (3/4) * 6y\n    # We need to find how many silver spoons (n) have the same value as 3 gold rings (3y)\n    # So we have the equation n * x = 3y\n    # Replace x using the first equation: n * ((3/4) * 6y / 12) = 3y\n    # Simplify the equation to find n\n    n = (3/4) * 6 / 12 * 3 \n\n    return int(n)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_more_than_girls = 55\n    total_students = 0\n    \n    # Start checking from the smallest possible square side that can have more boys\n    # that is a 3x3 square since 2x2 or 1x1 wouldn't have more boys than girls\n    side_length = 3\n    while True:\n        # Calculate the number of boys based on the perimeter of the outer layer\n        boys = side_length*4 - 4\n        \n        # Calculate the number of girls, which is the total number of students minus boys and the corners\n        girls = (side_length**2) - boys\n        \n        # Check if we found the correct configuration where there are 55 more boys than girls\n        if boys - girls == boys_more_than_girls:\n            total_students = side_length**2\n            break\n        \n        # Increment the side length to build the next square layer\n        side_length += 2\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n\n    # Given average weights\n    avg_weight_all_teachers = 65\n    avg_weight_male_teachers = 75\n    avg_weight_female_teachers = 60\n\n    # Number of male teachers\n    m = 3\n\n    # Form the equation based on the average weight formula\n    eq = Eq((m * avg_weight_male_teachers + f * avg_weight_female_teachers), (m + f) * avg_weight_all_teachers)\n\n    # Solve for f\n    num_female_teachers = solve(eq, f)\n    \n    return num_female_teachers[0]\n\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_left = 2\n    from_right = 4\n    from_front = 5\n    from_back = 7\n\n    total_columns = from_left + from_right - 1\n    total_rows = from_front + from_back - 1\n\n    total_students = total_columns * total_rows\n\n    return total_students\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    paintbrush_cost = 1\n    \n    # Assume all items are paintbrushes\n    paintbrushes = total_items\n    cost_with_all_paintbrushes = paintbrushes * paintbrush_cost\n    \n    # Calculate how much more we need to reach the total cost\n    additional_cost_needed = total_cost - cost_with_all_paintbrushes\n    \n    # Since marker costs marker_cost-times more than paintbrush,\n    # divide the additional cost by the cost difference to find the number of markers\n    markers = additional_cost_needed // (marker_cost - paintbrush_cost)\n    \n    return markers\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n\n    # Total number of teammates excluding Star is 4\n    # Star is fixed as the first runner so we need to arrange the remaining 4\n    num_ways = math.factorial(4)\n\n    return num_ways\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Prime factorize 33 and 55\n    # 33 = 3 * 11\n    # 55 = 5 * 11\n    # To make the product a square number, each prime factor's power must be even.\n    # The product 33 * 55 = 3 * 11 * 5 * 11 = 3 * 5 * 11^2\n    # We need to make the power of 3 and 5 even, so we need another 3 and another 5.\n    # Hence, m must at least be 3 * 5 = 15 to make the product a square number.\n\n    m = 3 * 5\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for plate1 in range(2, 8 - 2*2 + 1):  # The first plate can have from 2 to 4 candies\n        for plate2 in range(2, 8 - plate1 - 2 + 1):  # The second plate can have from 2 to the remaining candies after plate1 minus 2\n            plate3 = 8 - plate1 - plate2\n            if plate3 >= 2:  # The third plate must have at least 2 candies\n                count += 1\n    return count\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Brute force all the possible combinations of increasing 4-digit numbers\n    for a in range(1, 10):\n        for b in range(a + 1, 10):\n            for c in range(b + 1, 10):\n                for d in range(c + 1, 10):\n                    # Create the original increasing digits number by placing digits in position\n                    inc_num = a * 1000 + b * 100 + c * 10 + d\n                    # Create the decreasing digits number by reversing the position of digits\n                    dec_num = d * 1000 + c * 100 + b * 10 + a\n                    # Calculate the third number using the sum given\n                    third_num = 26352 - (inc_num + dec_num)\n                    # Finding the potential third number removes the need to permute all digits\n                    # Then we check if it consists of the same digits\n                    if set(str(third_num)) == set(str(inc_num)):\n                        return min(inc_num, dec_num, third_num)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Define a function for the custom operation based on given outcomes\n    def custom_operation(a, b):\n        return a**2 + b**2 + (a * b)\n    \n    # Use the custom operation to find 6 otimes 12\n    ans = custom_operation(6, 12)\n    \n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    return 210 / (1 - 0.3)\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # It takes 60 minutes to cut a piece of wood into 31 segments\n    # This means there are 30 cuts made, since the first piece doesn't require a cut\n    time_for_31_segments = 60\n    cuts_for_31_segments = 31 - 1\n    \n    # Find out how long it takes to make one cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    \n    # Calculate the number of cuts needed for 50 segments\n    cuts_for_50_segments = 50 - 1\n    \n    # Calculate the total time needed for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    # Select the solution within the given range 100 to 200\n    for i in range(ans[0], 200, ans[1]):\n        if 100 <= i < 200:\n            return i\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n\n    return year - 2002\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    \n    ans = factorial(len(word))\n    for freq in letter_freq.values():\n        ans //= factorial(freq)\n  \n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    increased_price = original_price * (1 + increase_percentage)\n    return increased_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3 # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n\n    return total_money\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy, flowers_given = symbols('candy nancy flowers_given')\n\n    original_candy = 11\n    original_nancy = 9\n\n    equation1 = Eq(candy, original_candy - flowers_given)\n    equation2 = Eq(nancy, original_nancy + flowers_given)\n    equation3 = Eq(nancy, candy + 8)\n\n    solutions = solve((equation1, equation2, equation3), (candy, nancy, flowers_given))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number // 24 == 36:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_pence = 43\n    booklet_cost_pence = 185\n    total_cost_pence = 3 * pen_cost_pence + 4 * booklet_cost_pence\n    total_money_pence = 10 * 100\n    change_pence = total_money_pence - total_cost_pence\n\n    return change_pence / 100\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5383890  # As per the latest available knowledge up to early 2023\n    return population\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        thousands_digit = int(str(i)[0])\n        if thousands_digit == 0:\n            continue\n        digits = [int(d) for d in str(i)[1:]]\n        if all(thousands_digit % d == 0 or d == 0 for d in digits):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    # Create a list of the first 3 prime numbers\n    first_three_primes = list(primerange(1, 6))\n\n    # Get the third prime number\n    third_prime = first_three_primes[2]\n\n    return third_prime\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    \n    # All possible digits for each of the three positions\n    hundreds = list(range(1, 10))  # 100-999, the first digit can't be 0\n    tens = list(range(10))         # 0-9\n    ones = list(range(10))         # 0-9\n\n    for h in hundreds:\n        for t in tens:\n            if abs(h - t) >= 7:    # Check if hundreds and tens digits differ by at least 7\n                for o in ones:\n                    if abs(t - o) >= 7:  # Check if tens and ones digits differ by at least 7\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    x = symbols('x')\n\n    # Create the equation based on the question\n    equation = Eq((x + 7) / 9, 9)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    number_of_weeks = 10\n\n    total_coins = (number_of_weeks / 2) * (2 * first_week_coins + (number_of_weeks - 1) * common_difference)\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses / 2\n    fiona_dresses = gina_dresses / 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return int(total_dresses)\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # To find the number of children, we need to determine the position\n    # where the 4th and the 22nd child are opposite to each other in a circle.\n    # This means that the 22nd child is halfway around the circle from the 4th child.\n\n    # Since the children are evenly spaced, the number of spaces between the 4th and the 22nd child\n    # is the same as the number of spaces from the 22nd child back to the 4th child.\n    # This means that the total number of children is twice the number of children between\n    # the 4th and the 22nd children.\n\n    # The number of children between the 4th and the 22nd children is (22 - 4).\n    # Therefore, the total number of children in the circle is 2 * (22 - 4).\n    \n    total_children = 2 * (22 - 4)\n    \n    return total_children\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Initialize all possible digits\n    possible_digits = [set(range(10)) for _ in range(4)]\n\n    # Process each attempt and update possible digits for each position\n    possible_digits[0] -= {5, 3, 1}  # 5, 3 and 1 are not the first digit\n    possible_digits[1] -= {6, 1, 2}  # 6, 1 and 2 are not the second digit\n    possible_digits[2] -= {4, 6, 1}  # 4, 6 and 1 are not the third digit\n    possible_digits[3] -= {8, 7, 9}  # 8, 7 and 9 are not the fourth digit\n    \n    # The attempt 5648 has two digits correct and two digits wrong:\n    # After previous eliminations, 6 and 8 cannot be in positions 1 and 3.\n    # So 6 and 8 have to be in positions 2 and 4; we don't know the exact places yet.\n\n    # Since we already eliminate 6 from the second position, it has to be in the fourth.\n    possible_digits[3] = {6}\n    \n    # Since 8 cannot be the fourth digit, it has to be the second one.\n    possible_digits[1] = {8}\n\n    # The attempt 3628 has two digits correct:\n    # After previous eliminations, 3 cannot be in the first position, and 6 is confirmed to be the fourth digit.\n    # So 2 has to be in the first position.\n    possible_digits[0] = {2}\n\n    # The attempt 5629 has two digits correct:\n    # Since 6 and 8 are already in position, 2 has to be correct, confirming it as the first digit.\n    # We also confirmed 6 as the fourth digit, which leaves only one possibility for the third digit: 4.\n    possible_digits[2] = {4}\n\n    # Given all the information, the correct combination should be the only remaining possibilities\n    ans = ''.join(str(next(iter(digit_set))) for digit_set in possible_digits)\n    return ans\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the marks of the students\n    A, B, C, D, E = symbols('A B C D E')\n\n    # The given conditions\n    average_ABC = Eq((A + B + C) / 3, 95)\n    average_BCD = Eq((B + C + D) / 3, 94)\n    E_mark = Eq(E, 96)\n    A_highest = (A > E)  # A has the highest mark\n    E_second_highest = (E > B) & (E > C) & (E > D)  # E's mark is the second highest\n    B_equals_D = Eq(B, D)  # B and D have the same score\n    marks_above_91 = (A > 91) & (B > 91) & (C > 91) & (D > 91) & (E > 91)\n\n    # Solving the equations\n    # We don't need to check explicitly for marks above 91, because they are automatically satisfied\n    # by the given average values and E's marks\n    solutions = solve((average_ABC, average_BCD, E_mark, B_equals_D), (A, B, C, D), dict=True)\n\n    # Extracting the solution that satisfies all conditions\n    for sol in solutions:\n        if sol[A] > sol[E] and sol[E] > sol[D] and all(mark > 91 for mark in sol.values()):\n            return sol[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n\n    years = 0\n    current_amount = principal\n\n    while current_amount < final_amount:\n        current_amount += current_amount * interest_rate\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarters_full) / 2\n    \n    mass_empty_jar = mass_quarter_full - (mass_half_full - mass_quarter_full)\n    \n    return mass_empty_jar\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let f be the number of female teachers.\n    # Let m be the number of male teachers, which is 3.\n    # Let a_w be the average weight of the teachers, which is 65.\n    # Let a_w_m be the average weight of the male teachers, which is 75.\n    # Let a_w_f be the average weight of the female teachers, which is 60.\n    \n    m = 3\n    a_w = 65\n    a_w_m = 75\n    a_w_f = 60\n\n    # The total weight of the male teachers is the average weight times the number of male teachers.\n    total_weight_m = a_w_m * m\n    \n    # We can write an equation for the total weight of all teachers using the average weight and the number of female and male teachers.\n    # a_w * (f + m) = total_weight_m + a_w_f * f\n    # We need to find f, the number of female teachers.\n    \n    # Isolating f on one side of the equation:\n    # 65 * f + 65 * m = 75 * m + 60 * f\n    # 65 * f - 60 * f = 75 * m - 65 * m\n    # 5 * f = 10 * m\n    \n    # Finally, we solve for f:\n    f = (a_w_m * m - a_w * m) / (a_w - a_w_f)\n\n    return int(f)\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_fraction = 1/7\n    bottle_capacity_liters = 9.1\n    cup_capacity_ml = 350\n    cups_number = 4\n    ml_to_liters = 1000\n\n    # Calculate the amount of soda used to fill the fraction of the bottle\n    soda_for_bottle = bottle_fraction * bottle_capacity_liters\n\n    # Convert the capacity of cups from ml to liters and calculate the total amount used\n    soda_for_cups = (cup_capacity_ml / ml_to_liters) * cups_number\n\n    # Calculate the remaining amount of soda in the bucket\n    remaining_soda = total_soda_liters - soda_for_bottle - soda_for_cups\n\n    return round(remaining_soda, 2)\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters (8.0 cm)\n    x = 0.04  # distance from equilibrium in meters (4.0 cm)\n\n    # Total energy (E) of the oscillator is given by (1/2) * k * amplitude^2\n    E = 0.5 * k * amplitude**2\n\n    # The speed (v) of the block can be found using conservation of energy\n    # E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # Solving for v gives v = sqrt(2/m * (E - (1/2) * k * x^2))\n    v = math.sqrt((2/m) * (E - 0.5 * k * x**2))\n\n    return E, v\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # In order to ensure victory, Rose must leave a multiple of 3 marbles after her first turn.\n    # Why? Because:\n    # - If Kylie is left with a multiple of 3 marbles, Rose can always keep it that way.\n    # - No matter if Kylie takes 1 or 2 marbles, Rose can take 2 or 1 (respectively) to make the count\n    #   go down by 3 again.\n    # - This way, Rose will always take the last marble.\n    # Thus, if Rose takes 1 marble, 13 are left (which is not a multiple of 3).\n    # If Rose takes 2 marbles, 12 are left, which is a multiple of 3.\n    # So, Rose must take away 2 marbles.\n\n    return 2\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Pip and Bud's distance per minute\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    # Total distance Pip runs in 3 minutes should be each minute's distance times 3\n    total_pip = pip_per_minute * 3\n\n    # Similarly, the total distance for Bud\n    total_bud = bud_per_minute * 3\n\n    # Pip runs 20 meters more than Bud each minute\n    equation1 = Eq(pip_per_minute, bud_per_minute + 20)\n\n    # Together they run 540 meters in 3 minutes\n    equation2 = Eq(total_pip + total_bud, 540)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip_per_minute, bud_per_minute))\n\n    # Pip's distance in 3 minutes\n    pip_distance_3_minutes = solutions[pip_per_minute] * 3\n\n    return pip_distance_3_minutes\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of coins in boxes A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Equation 1: Box A contains four times as many coins as Box B\n    eq1 = Eq(A, 4 * B)\n    \n    # Equation 2: 6% of the coins in Box A are transferred to Box C\n    eq2 = Eq(C + 0.06 * A, 1220)\n    \n    # Equation 3: 20% of the coins in Box B are transferred to Box C\n    eq3 = Eq(C + 0.20 * B, C + 0.22 * C)\n    \n    # Equation 4: There are 1220 coins in Box C\n    eq4 = Eq(C, 1220)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2, eq3, eq4), (A, B, C))\n\n    return solution[A]\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # Convert £45 to pence\n    coin_value = 5  # Value of each 5p coin in pence\n    num_coins = total_pence / coin_value  # Calculate the number of 5p coins\n    return num_coins\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex(int('2A3', 16) + int('17B', 16)).upper()\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let the initial total number of bottled drinks be 100 units for simplicity\n    initial_total = 100\n\n    # Initially, 60% were coffee, so 40% were tea\n    initial_tea = initial_total * 0.40\n\n    # If 40% of the drinks are coffee now, then 60% are tea\n    final_tea_percentage = 0.60\n\n    # Let's denote the new total number of bottled drinks as x, including the added tea\n    # The amount of coffee stays the same because no new coffee is added\n    # The new amount of tea is 60% of x\n\n    # Since coffee is now 40%, the actual amount of coffee is 40% of x which is equal to initial amount of coffee\n    amount_of_coffee = initial_total * 0.60\n    amount_of_coffee_is_now = initial_total * 0.40\n    # total number of drinks is therefore the amount of coffee divided by the percentage that represents coffee now, which is 40%\n    final_total = amount_of_coffee / amount_of_coffee_is_now\n\n    # Now we can calculate the final number of tea bottles\n    final_tea = final_total * final_tea_percentage\n\n    # Finally, calculate the percentage increase in the number of bottles of tea\n    percentage_increase = ((final_tea - initial_tea) / initial_tea) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_sales = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_sales / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Given time durations for tasks\n    washing_watermelons_time = 1\n    washing_glasses_time = 3\n    juicer_working_time = 4\n    pouring_juice_time = 1\n\n    # Minimum time will be the sum of all individual times\n    min_time = (washing_watermelons_time + washing_glasses_time +\n                juicer_working_time + pouring_juice_time)\n\n    return min_time\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "网络故障，请重试"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60  # in pence\n    james_money = 110  # £1.10 in pence\n    total_money_pence = lewis_money + james_money\n\n    # Since the result is needed in pounds, we convert pence into pounds\n    ans = total_money_pence / 100  # Convert pence to pounds\n    return ans\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n    eq1 = Eq(tricycles + cars, 24)  # Total number of vehicles\n    eq2 = Eq(4*cars + 3*tricycles, 86)  # Total number of wheels\n\n    solutions = solve((eq1, eq2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = \"WINNING\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    return ways\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        # Base cases\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        # Use recursive formula: !n = (n-1) * (!(n-1) + !(n-2))\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # We must give at least 3 books to each stack, so we start with 3 books in each\n    # and distribute the remaining 4 books to different stacks.\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    total_pens_before = 96\n    ratio_blue_red = 3 / 5\n    red_pens_added = 60\n    \n    # Calculate the initial number of blue and red pens\n    red_pens = (5 * total_pens_before) / (3 + 5)\n    blue_pens = total_pens_before - red_pens\n    \n    # Calculate the new total number of pens after adding 60 red pens\n    new_total_pens = total_pens_before + red_pens_added\n    \n    # Calculate the total number of blue pens after some are added, knowing that 40% are now blue pens\n    new_blue_pens = 0.4 * new_total_pens\n    \n    # Calculate the number of blue pens that were added\n    blue_pens_added = new_blue_pens - blue_pens\n    \n    return blue_pens_added\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kilograms\n    final_velocity = 8  # final velocity in meters per second\n    time = 4  # time in seconds\n    \n    # Calculate acceleration using final velocity (v), initial velocity (u=0 since the object is stationary), and time (t)\n    # v = u + at  => 8 = 0 + a*4  =>  a = 8 / 4\n    acceleration = final_velocity / time\n    \n    # Calculate force using Newton's second law: F = m * a\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # The minimum number of 1000 Plus bottles sold occurs when the maximum number of lemonade bottles are sold.\n    # Let x be the number of lemonade bottles sold, and y be the number of 1000 Plus bottles sold.\n    \n    # Total income from lemonade: 4x\n    # Total income from 1000 Plus: 7y\n    # Total income: 4x + 7y = 2012\n    # Total bottles: x + y <= 350\n    # We are looking for the minimum y, therefore we maximize x.\n    \n    # Since we want to maximize x and x must be an integer (you can't sell a fraction of a bottle), we try the largest x that gives us a valid y\n    for x in range(350, -1, -1):\n        # calculating the income from x lemonade bottles\n        income_from_lemonade = 4 * x\n        \n        # if the income from lemonade is less than or equal to total income,\n        # calculate the income needed from 1000 Plus bottles and verify it gives a whole number of bottles\n        if income_from_lemonade <= 2012:\n            income_needed_from_1000plus = 2012 - income_from_lemonade\n            # check if income_needed_from_1000plus is divisible by 7 to ensure it's a whole number of bottles\n            if income_needed_from_1000plus % 7 == 0:\n                # calculate the minimum number of 1000 Plus bottles\n                y = income_needed_from_1000plus // 7\n                return y\n    return None\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # This problem is known as the Coin Problem, a part of the Frobenius coin problem\n    # The largest number that cannot be obtained by a combination of 3 and 7\n    # is given by the formula (a*b) - a - b, where a and b are coprime.\n    # Since 3 and 7 are coprime, we can apply the formula directly.\n    \n    a = 3\n    b = 7\n    largest_unobtainable_num = (a * b) - a - b\n    return largest_unobtainable_num\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    total_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / total_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    # Let x be the number of incorrect answers\n    correct, incorrect = symbols('correct incorrect')\n    \n    # The number of correct answers that Jane got is 12 more than three times the number of incorrect answers\n    equation1 = Eq(correct, 3 * incorrect + 12)\n\n    # Jane got a total of 151 points in the contest\n    # +5 points for each correct answer, -2 points for each incorrect answer\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n    \n    # We need the number of correct answers\n    return solutions[correct]\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers to base 10\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n\n    # Sum numbers in base 10\n    sum_base10 = num1_base10 + num2_base10\n\n    # Convert the sum back to base 7\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Based on the fact that in a round-robin tournament each player plays every other player once,\n    # the total number of matches for n players is n(n-1)/2.\n    # Since there are 7 players here, each player should play 6 matches.\n    # We can calculate how many matches must have played to keep the count consistent.\n    \n    num_players = 7\n    total_matches_per_player = num_players - 1\n    \n    # Sum of matches played by A, B, C, D, E, and G.\n    matches_played = 4 + 6 + 2 + 1 + 3 + 5\n    \n    # Number of matches F has played is the difference between the expected total and the actual total.\n    matches_F_played = total_matches_per_player * num_players - matches_played\n\n    return matches_F_played // 2  # Divide by 2 since each match is counted twice in the sum.\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Start with the highest product of numbers from 1 to 20 not containing two consecutive numbers\n    # Since the product of all numbers from 1 to 20 will be divisible by all of them.\n    # We need to find two consecutive numbers first.\n    for i in range(1, 20):\n        excludable = i * (i + 1)  # Consecutive numbers\n        N = 1\n        for j in range(1, 21):  # Product of numbers from 1 to 20 except the two consecutive ones\n            if j not in (i, i+1):\n                N *= j   \n        # Check if the resulting N is divisible by 18 of the first 20 natural numbers\n        divisible_count = sum([1 for k in range(1, 21) if N % k == 0])\n        if divisible_count == 18:\n            return i + (i + 1)\n    return -1  # If no such number is found (should not reach here)\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\nfrom functools import reduce\nfrom math import prod\n\ndef solution():\n    # Define all possible numbers to be put on foreheads\n    nums = set(range(1, 14))\n\n    # List all possible combinations of 9 numbers from 1 to 13\n    combs = list(combinations(nums, 9))\n    \n    # Initialize the answer and the set of numbers with unique number of factors\n    unique_factors_nums = set()\n    \n    # Function to calculate the number of factors\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Go through 1 to 13 and find the numbers with unique number of factors\n    factors_count = {}\n    for num in nums:\n        count = num_factors(num)\n        if count not in factors_count:\n            factors_count[count] = [num]\n        else:\n            factors_count[count].append(num)\n    \n    # Filter out only the counts with single numbers\n    for count, number in factors_count.items():\n        if len(number) == 1:\n            unique_factors_nums.add(number[0])\n\n    # Now find the combinations where exactly two numbers have a unique count of factors\n    valid_combs = []\n    for comb in combs:\n        unique_count = sum(num in unique_factors_nums for num in comb)\n        if unique_count == 2:\n            valid_combs.append(comb)\n    \n    # From Alice and May's conversation we know:\n    # May's number is one more than an even number (thus odd),\n    # and Alice's number is 2 more than May's, which means Alice's is also odd.\n    # So we can rule out combinations where the two unique count numbers are not both odd,\n    # and Alice's number should not be 1 (Alice knows it's odd based on others) or the largest odd in the combination\n    final_combs = []\n    for comb in valid_combs:\n        valid = True\n        remaining = nums - set(comb)\n        sorted_remaining = sorted(list(remaining))\n        # Check that Alice and May have the described relationship\n        for num in comb:\n            if num in unique_factors_nums:\n                # Check if number is odd and not 1\n                if num % 2 == 0 or num == 1:\n                    valid = False\n                    break\n                # Check that Alice's number is not the largest odd number minus 1\n                if num == sorted_remaining[-1] - 1:\n                    valid = False\n                    break\n        if valid:\n            final_combs.append(comb)\n    \n    # Since it was not stated which remaining number is Mark's,\n    # there may still be more than one combination,\n    # so we calculate the product of the remaining numbers for each valid combination\n    products = []\n    for comb in final_combs:\n        remaining = nums - set(comb)\n        products.append(prod(remaining))\n    \n    # The problem assumes there is a unique solution, so we return the only product\n    ans = products[0]\n    \n    return ans\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the number of Natasha's stamps be x\n    # Then the number of Jamie-Anne's stamps will be x + 18\n    # According to the ratio 5:3, we have Jamie-Anne's stamps to Natasha's stamps as 5 to 3.\n    # (x + 18) / x = 5/3\n    # 3*(x + 18) = 5x\n    # 3x + 54 = 5x\n    # 54 = 5x - 3x\n    # 54 = 2x\n    # x = 27 (Natasha's stamps)\n    \n    # Jamie-Anne's stamps are x + 18 = 27 + 18 = 45\n    # Total number of stamps is Natasha's + Jamie-Anne's = x + (x + 18)\n    total_stamps = 27 + (27 + 18)\n  \n    return total_stamps\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cici_age, linda_age = symbols('cici_age linda_age')\n    equation1 = Eq(linda_age - cici_age, 11) # Linda is 11 years older than Cici.\n    equation2 = Eq(cici_age + 4 + linda_age + 4, 37) # The sum of their ages in 4 years is 37.\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (cici_age, linda_age))\n    \n    # Linda's age 3 years later\n    linda_age_future = ages[linda_age] + 3 \n    return linda_age_future\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    divisor = 15\n    for i in range(161, divisor**2 + divisor):\n        quotient, remainder = divmod(i, divisor)\n        if quotient == remainder:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n\n    min_sum = first_number_min + second_number_min\n\n    return min_sum\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_people = 4\n    num_entrances = 5\n    \n    # Each person can choose from 5 entrances, so the total combinations will be 5^4\n    ans = num_entrances ** num_people\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    bags_needed = total_peaches // peaches_per_bag\n\n    return bags_needed\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300\n    distance_downhill = 300\n    speed_uphill = 10\n    speed_downhill = 30\n\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_downhill / speed_downhill\n\n    total_distance = distance_uphill + distance_downhill\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Subtract the leftovers to get the divisible amounts\n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n\n    # Calculate GCD of the three numbers\n    gcd_ap_pe = gcd(apples, pears)\n    gcd_all = gcd(gcd_ap_pe, oranges)\n\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    total_friends = 5  # Judy's friends\n    positions_for_judy = 2  # first or last place\n    ways_to_arrange_friends = factorial(total_friends)  # 5!\n\n    total_ways = positions_for_judy * ways_to_arrange_friends\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    num1 = 6\n    LCM = 12\n\n    for num2 in range(1, LCM + 1):\n        if LCM % num2 == 0 and num1 % num2 in [0, 1]:\n            if LCM // num2 == num1 or LCM // num1 == num2:\n                return num2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digits_written = 0\n    current_number = 1\n    while True:\n        str_current_number = str(current_number)\n        digits_in_current_number = len(str_current_number)\n        if digits_written + digits_in_current_number >= 200:\n            return int(str_current_number[200 - digits_written - 1])\n        digits_written += digits_in_current_number\n        current_number += 1\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    discount_price = price * 0.8\n    profit = discount_price - cost\n\n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    first_part = 6.25 * 8.27 * 16\n    second_part = 1.25 * 0.827 * 8\n\n    ans = first_part + second_part\n\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, solve\n\n    daniel, daughter = symbols('daniel daughter')  # Define the symbols for Daniel's and daughter's age\n    eq1 = daniel - 2 - 6 * (daughter - 2)         # Daniel's age 2 years ago was 6 times daughter's age 2 years ago\n    eq2 = daniel + 2 - 4 * (daughter + 2)         # Daniel's age in 2 years will be 4 times daughter's age in 2 years\n    solutions = solve((eq1, eq2), (daniel, daughter))  # Solve the system of equations\n\n    return solutions[daniel]  # Return Daniel's current age\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    points_per_qualified = 5\n    lost_points_per_unqualified = 18\n    total_points = 9931\n    daily_production = 500\n    \n    # Let the number of qualified TVs produced per day be q\n    # Since the daily production is constant, the number of unqualified TVs is 500 - q per day\n    # The points gained from the qualified TVs is 5q\n    # The points lost from the unqualified TVs is 18(500 - q)\n    # The total points over 4 days is the sum of the points gained minus the points lost, which is 9931\n    # So we have the following equation: 4 * (5q - 18(500 - q)) = 9931\n    \n    # Solving the equation for q gives us the number of qualified TVs per day\n    # Multiply q by 4 to get the total number of qualified products over 4 days\n    q = (total_points + total_days * lost_points_per_unqualified * daily_production) \\\n        / (total_days * (points_per_qualified + lost_points_per_unqualified))\n    \n    # The total number of qualified products over 4 days\n    total_qualified = q * total_days\n    \n    return int(total_qualified)\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let d be the distance April runs until she meets Baye\n    # Since the total distance between P and Q is 1800m, Baye is at 1800-d position from P\n    # After they meet, April runs d at 4 times her original speed\n    # Baye will cover the same distance as April but at 1/4 of the speed\n    \n    # Distance April has run when she met Baye is 1800m - 800m\n    d = 1800 - 800\n    # Therefore, when April runs back to P (800m), Baye will go 1/4 of that\n    baye_moves = 800 / 4\n    # Baye's distance from Q when April reaches P again\n    baye_dist_from_Q = d + baye_moves\n    \n    return baye_dist_from_Q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    sum_of_seven_numbers = 7 * 12\n    new_mean = 11\n    total_numbers = 8\n    sum_of_eight_numbers = total_numbers * new_mean\n    eighth_number = sum_of_eight_numbers - sum_of_seven_numbers\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sequence = list(range(1, 9)) + list(range(7, 0, -1)) + [1, 2]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    # The given recurring decimal is 0.538462 repeating.\n    # We find the position (remainder) when dividing the sequence number by the length of the repeating pattern.\n    sequence_number = 2021\n    pattern_length = 6\n    position = sequence_number % pattern_length\n    \n    # If the remainder is 0, we take the last digit of the repeating pattern.\n    # Otherwise, the remainder gives us the position in the pattern.\n    digit = '538462'[(position-1) % pattern_length]\n\n    return int(digit)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for num in range(10, 1000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)  # Subtract 1 because indexing starts from 0\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    money = symbols('money')\n    equation = Eq((1/3 + 2/5) * money, 132)\n    result = solve(equation, money)\n    return result[money]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_by_5 = 105 // 5\n    count_by_7 = 105 // 7\n    count_by_35 = 105 // 35  # 35 is the least common multiple of 5 and 7\n    \n    total_count = count_by_5 + count_by_7 - count_by_35\n    return total_count\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    # Initialize the digit counter\n    digit_count = 0\n\n    # Count digits for 1-9\n    digit_count += 9\n    \n    # Count digits for 10-99\n    digit_count += 2 * (99 - 10 + 1)\n\n    # Count digits for 100-215\n    digit_count += 3 * (215 - 100 + 1)\n\n    return digit_count\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for x in range(10000, 100000):\n        if int('1' + str(x)) * 3 == int(str(x) + '1'):\n            return x\n            \nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 82):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell can draw all the blue and white beads and might still need more to ensure 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    # Worst case, Darrell draws all blue and white beads.\n    worst_case_draw = blue_beads + white_beads\n\n    # To ensure 5 green beads, after drawing all blue and white beads, Darrell needs to draw 4 more green beads.\n    # Because on the 4th green bead drawn, at least one more would ensure the 5 green beads.\n    worst_case_draw += green_beads_needed - 1\n\n    return worst_case_draw\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # John walks from the first floor to the fourth floor in 12 minutes\n    # Assuming each floor takes the same amount of time to walk\n    # The number of intervals between the first and the fourth floor\n    intervals_1_4 = 4 - 1  \n    \n    # The number of intervals between the first and the eighth floor\n    intervals_1_8 = 8 - 1\n    \n    # Calculate the time for one interval\n    time_per_interval = 12 / intervals_1_4\n    \n    # Calculate the total time for walking from the first to the eighth floor\n    time_1_8 = time_per_interval * intervals_1_8\n\n    return time_1_8\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    def new_operation(a, b):\n        return 5 * a - 2 * b\n\n    ans = new_operation(6, 2)\n    return ans\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # Since the baskets are identical, we need to consider only partitions of 6\n    # We use stars and bars theorem to calculate the number of possible partitions\n    # In this case, we have 6 apples (stars) and 2 bars (to create 3 partitions/baskets).\n    # So we need to place 2 bars in between or outside of 6 stars.\n    # The formula for stars and bars is: (n + k - 1) choose k\n    # where n is the number of stars and k is the number of bars.\n    \n    # Importing the necessary function from math library for combination calculation\n    from math import comb\n\n    # Number of apples (stars)\n    stars = 6\n    # We need 2 bars to create 3 baskets\n    bars = 2\n    # Using the stars and bars theorem\n    return comb(stars + bars, bars)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    birds_to_squirrels_initial = 8 / 5\n    squirrel_percentage_increase = 20 / 100\n    \n    initial_squirrels = 5  # Assume initially there are 5n squirrels\n    initial_birds = 8      # and 8n birds\n    \n    # After 1 year\n    squirrels_after = initial_squirrels * (1 + squirrel_percentage_increase)\n    total_initial = initial_squirrels + initial_birds\n    total_after = squirrels_after + initial_birds  # which should be the same as initial\n\n    # Since total count remains the same, the birds count should decrease\n    birds_after = total_initial - squirrels_after\n\n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((initial_birds - birds_after) / initial_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    num_values = 0\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                num_values += 1\n    return num_values\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # Rearrange the formula to solve for n:\n    n = ((last_term - first_term) // difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_consumed = 9\n    container_volume = 5\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_consumed\n    containers_needed = -(-remaining_juice // container_volume)  # ceil division\n\n    return containers_needed\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Establish the relationship from the given examples\n    # After observing the pattern, we realize that the operation ◈ can be defined as:\n    # a ◈ b = b - (a % b)\n    # where % is the modulus operator representing the remainder of the division of a by b\n    \n    # To find 9 ◈ 20\n    a = 9\n    b = 20\n    ans = b - (a % b)\n\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    difference = 15 - 7  # calculated from the difference between the first two terms\n    next_term_index = 5  # since 31 is the 4th term, the next term is 5th\n\n    # Formula for nth term of an arithmetic sequence: a_n = a_1 + (n-1)*d\n    next_term = first_term + (next_term_index - 1) * difference\n\n    return next_term\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)\n    for perm in permutations(digits, 5):\n        D, A, R, T, C = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            return A + R + T\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # A must be less than 10 because 9/A < 1\n        if 5/9 < 9/A:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1  # Tanya herself\n\n    total_members = members_left_of_tanya + tanya + members_right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange, isprime\n\n    four_digit_primes = list(primerange(1000, 10000))\n    \n    for prime in reversed(four_digit_primes):\n        if 87878 % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls', integer=True)\n\n    equation1 = Eq(boys + girls, 39)  # Total number of students\n    equation2 = Eq(1/4 * boys, 2/5 * girls)  # The relation between the number of boys and girls\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    van_capacity = 12\n    total_crates = 24\n    total_weight = total_crates * crate_weight\n    vans_needed = total_weight / van_capacity\n    return vans_needed if vans_needed == int(vans_needed) else int(vans_needed) + 1\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def partitions(n, I=1):\n        yield (n,)\n        for i in range(I, n//2 + 1):\n            for p in partitions(n-i, i):\n                yield (i,) + p\n\n    return len(list(partitions(5)))\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Speeds for each segment\n    speed1 = 7  # in meters/second\n    speed2 = 5  # in meters/second\n    speed3 = 8  # in meters/second\n    \n    # Distances for each segment\n    distance1 = 280  # in meters\n    distance2 = 400  # in meters\n    distance3 = 800 - (distance1 + distance2)  # Total distance - sum of the first two segments\n    \n    # Time for each segment = distance / speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time is the sum of times for all segments\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of stickers Daniel and Patrick had originally.\n    x = symbols('x')\n    \n    # Daniel gave away 24 stickers, so he has x - 24 stickers now.\n    # Patrick bought another 10 stickers, so he has x + 10 stickers now.\n    # Patrick has twice as many stickers as Daniel now, so we set up the equation: x + 10 = 2 * (x - 24)\n    equation = Eq(x + 10, 2 * (x - 24))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the number of stickers Daniel had at first, which is the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    num = 10  # start with the smallest two-digit number\n    while True:\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    distance = whale_depth + plane_height\n    return distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # If all the boys are right handed.\n    right_handed_boys = right_handed - girls\n    \n    # The minimum number of right handed girls.\n    right_handed_girls = girls - (total_pupils - right_handed)\n    \n    if right_handed_girls < 0:\n        right_handed_girls = 0\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum([(skirts_per_day * day) for day in range(1, 10)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    result = 234000 / 520\n    return result\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = None\n    digits = '123456789'\n    # Generate all permutations of the number 1 to 9\n    from itertools import permutations\n    for num1 in permutations(digits):\n        for num2 in permutations(digits):\n            # Convert tuple of digits to integer\n            n1 = int(''.join(num1))\n            n2 = int(''.join(num2))\n            # Calculate the difference\n            diff = abs(n1 - n2)\n            if diff != 0:  # Ensure they're two different numbers\n                if smallest_diff is None or diff < smallest_diff:\n                    smallest_diff = diff\n    return smallest_diff\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n    \n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    taps = 5\n    time_for_1_litre = 2  # in minutes\n    volume_for_1_litre = 1  # in litres\n    target_volume = 0.5  # 500 ml is 0.5 litres\n\n    # Calculate the rate at which one tap fills the jug\n    one_tap_rate = taps * time_for_1_litre / volume_for_1_litre\n\n    # Calculate the time for one tap to fill 500ml\n    time_for_500ml = one_tap_rate * target_volume\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    apples_lemons_ratio = 2 / 3\n    bananas_ratio = 1 / 9\n\n    # Let's denote the total number of fruits by x, and the number of lemons by l.\n    # Then, we have 2/3 * x - l = 12, the number of apples is 12 more than the number of lemons.\n    # We can also say that the number of lemons is x - (2/3 * x + 1/9 * x) because the rest are lemons.\n\n    # Let's find the common denominator for these fractions and subtract to find the lemon's fraction.\n    # Common denominator for 3, 9 is 9.\n    # So converting both fractions with denominator 9, we get:\n    # apples_ratio:  (2/3) = 6/9\n    # bananas_ratio: (1/9) = 1/9\n    # lemons_ratio: 9/9 - (6/9 + 1/9) = 2/9\n\n    lemons_ratio = 1 - apples_lemons_ratio - bananas_ratio\n    # lemons_ratio = 2/9\n\n    # now we have the equation: 2/9 * x = (2/3 * x + 1/9 * x) - 12\n    # which simplifies to: 2/9 * x = 2/3 * x - 12\n    # and further to: 2/9 * x - 2/3 * x = -12\n    # and even further to: (2x/9 - 6x/9) = -12\n    # which yields: -4/9 * x = -12\n    # solving for x gives us: x = 12 * (9/4)\n    \n    x = 12 * (9 / 4)\n    # And then calculate the number of lemons\n    lemons = lemons_ratio * x\n\n    return int(lemons)\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assuming total number of visitors is 'v'\n    visitors = symbols('visitors')\n\n    children = (3/5) * visitors\n    remaining = visitors - children\n    men = (1/2) * remaining\n    \n    # given: there were 140 more children than men\n    equation = Eq(children - men, 140)\n    \n    # solving for the total number of visitors 'v'\n    sol = solve(equation, visitors)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n\n    for perm in permutations(digits, 6):\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        \n        current_sum = num1 + num2\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_litres = 2  # total litres in the bottle\n    drink_millilitres = 350  # millilitres drunk\n    remaining_litres = total_litres - (drink_millilitres / 1000)  # convert ml to litres and subtract from total\n    return remaining_litres\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    games_played = 20\n    average_goals = 2\n    pay_per_match = 500\n    pay_per_goal = 100\n\n    total_pay = (games_played * pay_per_match) + (games_played * average_goals * pay_per_goal)\n\n    return total_pay\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # First, identify the alternating patterns by looking at the sequence.\n    # It seems that one rule adds 7 to the previous number (1 -> 8 -> 15 ...)\n    # and the other rule multiplies the previous number by 2 (1 -> 2 -> 4 ...).\n    # To follow the pattern for the given sequence, let's write it out with the operations:\n    # 1 (x2) -> 2 (+7) -> 9 (x2) -> 18 (+7) -> 25 (x2) -> 50 (+7) -> 57 ...\n    \n    # Following this pattern to find the next number after 53:\n    # We see that 53 is reached by adding 7 to 46, so we apply a multiplication by 2 next.\n    \n    next_number = 53 * 2\n    return next_number\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    horse_days_to_eat_grass = 20 * 12  # Horse-grass days available\n    sheep_days_to_eat_grass = 60 * 24  # Sheep-grass days available\n    \n    # Since 1 horse eats as much as 4 sheep per day, we can express everything in 'sheep' terms.\n    sheep_days_to_eat_grass_equivalent_for_horses = horse_days_to_eat_grass * 4\n\n    # Amount of grass on the grassland in 'sheep' terms (we choose the sheep unit as it's more granular).\n    total_grass = sheep_days_to_eat_grass + sheep_days_to_eat_grass_equivalent_for_horses\n    \n    # 12 horses eat as much as 12 * 4 = 48 sheep\n    daily_consumption_rate_by_12_horses_88_sheep = 48 + 88\n    \n    # Number of days 12 horses and 88 sheep will take to eat all the grass\n    days_required = total_grass / daily_consumption_rate_by_12_horses_88_sheep\n    \n    return days_required\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the flow rates of A, B and C\n    a, b, c = symbols('a b c')\n\n    # if only A and C are turned on, the pool can be filled with 18 tons from A\n    # this means that the pool's capacity is equal to the flow rate of A plus the flow rate of C\n    eq1 = Eq(a + c, 18)\n\n    # if only B and C are turned on, the pool can be filled with 27 tons from B\n    # this means that the pool's capacity is equal to the flow rate of B plus the flow rate of C\n    eq2 = Eq(b + c, 27)\n\n    # Given the flow rate of B is twice that of A\n    eq3 = Eq(b, 2 * a)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n\n    # The total tons of water the pool can be filled up with is the sum of inlet A, B and C\n    # Since it corresponds to the capacity of the pool when all are on, which is A + B + C\n    total_capacity = solutions[a] + solutions[b] + solutions[c]\n\n    return total_capacity\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0:  # We can exclude scenarios where M or H are 0 since they are the first digits of the numbers.\n            continue\n\n        math = 1000 * M + 100 * A + 10 * T + H\n        htam = 1000 * H + 100 * T + 10 * A + M\n\n        if math + htam == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    first_number = 5\n    last_number = 10\n    ans = last_number - first_number + 1\n    return ans\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    num_balls = 16\n    cost_per_ball = total_cost / num_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total numbers from 100 to 999 (leading digit cannot be 0)\n    no_sevens = 8 * 9 * 9  # Numbers with no 7 at all (excluding 7 as a possible digit choice)\n\n    at_least_one_seven = total_three_digit_numbers - no_sevens\n    \n    exactly_one_seven = (3 * 8 * 9)  # One 7 in one of the three possible positions\n    \n    ans = at_least_one_seven - exactly_one_seven  # Subtracting numbers that have exactly one 7\n    \n    return ans\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    # The operation \"☀\" is defined as the sum of an arithmetic sequence starting from the first given number\n    # and the number of terms is the second given number, with a constant difference of 2 between each term.\n    first_number = 1\n    num_terms = 10\n    difference = 2\n\n    # Since the sequence starts at the first number and increments by 2, \n    # we calculate the last term of the sequence.\n    last_number = first_number + (num_terms - 1) * difference\n\n    # To find the sum of an arithmetic sequence, we use the formula:\n    # sum = n/2 * (first_number + last_number)\n    # where n is the number of terms\n    sum_sequence = num_terms / 2 * (first_number + last_number)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer can sit in any of the 4 middle seats to be between his 2 children.\n    spencer_seats = 4\n    \n    # There are 2! ways to arrange his children around him.\n    children_arrangements = factorial(2)\n    \n    # The remaining 3 people can sit in any of the 3! possible arrangements.\n    other_people_arrangements = factorial(3)\n    \n    # Total number of arrangements.\n    total_arrangements = spencer_seats * children_arrangements * other_people_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    bill_eats = total_sweets / 2\n    remaining_sweets = total_sweets - bill_eats\n    giveaway_sweets = remaining_sweets / 3\n    sweets_left = remaining_sweets - giveaway_sweets\n    return sweets_left\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes initially\n    x, y = symbols('x y')\n\n    # Cindy had a total of $55 notes initially\n    total_notes_initial = Eq(x + y, 55)\n\n    # After spending 1/3 of the $2 notes and receiving another 8 $5 notes\n    spent_2_notes = x / 3\n    new_2_notes = x - spent_2_notes\n    new_5_notes = y + 8\n\n    # The number of $5 notes is 3/7 of the remaining number of notes\n    remaining_notes_relation = Eq(new_5_notes, 3/7 * (new_2_notes + new_5_notes))\n\n    # Solve the equations\n    solutions = solve((total_notes_initial, remaining_notes_relation), (x, y))\n\n    # Calculate the total amount of money Cindy had initially\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    min_sum = float('inf')\n    for B in range(1, 25):\n        if 24 % B == 0 and 52 % B == 0:\n            A = 24 // B\n            C = 52 // B\n            min_sum = min(min_sum, A + C)\n    return min_sum\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    \n    time = distance / speed  # time = distance / speed\n\n    return int(time)\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_marks = 5\n    wrong_deduction = -2\n    total_questions = 6\n\n    # Hypothesis: Suppose all answers are correct, we calculate the max possible score\n    max_possible_score = total_questions * correct_marks\n\n    # The difference between the max score and the actual score must be due to wrong answers\n    difference = max_possible_score - total_marks\n\n    # Each wrong answer causes a loss of correct_marks - wrong_deduction\n    # Therefore, calculate the number of wrong answers and deduct from total questions\n    wrong_answers = difference // (correct_marks - wrong_deduction)\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18\n    original_number = (result_after_operations - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # A, B, C together can be treated as a single entity, so does E and F.\n    # Thus, we have 8 - 3 + 1 (for {A, B, C} group) + 1 (for {E, F} pair) = 7 entities to arrange.\n    entities = factorial(7)\n    \n    # A, B, C can be arranged among themselves in 3! ways.\n    abc_permutations = factorial(3)\n    \n    # E and F can be arranged in 2! ways.\n    ef_permutations = factorial(2)\n    \n    # The total arrangements is the product of the arrangements of each entity.\n    total_arrangements = entities * abc_permutations * ef_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    equation1 = Eq(sweets - (6 * students), -26)\n    equation2 = Eq(sweets - (5 * students), -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 16, 2))\n    return series_sum\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    original_ratio = Eq(boys / girls, 5 / 3)\n    new_ratio = Eq((boys - 15) / girls, 5 / 6)\n\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let x be the number of scarfs produced per day originally\n    # 6x is then the total number of scarfs produced in 6 days\n    # (x + 24) is the number of scarfs produced per day when she produces 24 more each day\n    # (6 - 2)(x + 24) is the total number of scarfs produced in 4 days at the increased rate\n    # The total number of scarfs must be the same in both cases, so we equate them and solve for x:\n    # 6x = 4(x + 24)\n    # 6x = 4x + 96\n    # 6x - 4x = 96\n    # 2x = 96\n    # x = 96 / 2\n    # x = 48 scarfs per day originally\n    \n    # Now we can find the total number of scarfs produced in 6 days: 6 * 48\n    total_scarfs = 6 * 48\n    \n    return total_scarfs\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):  # ensure x2 > x1 to get different numbers\n            for x3 in range(x2+1, 15):  # ensure x3 > x2 to get different numbers\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factor 675 to get its prime factors and their powers\n    prime_factors = factorint(675)\n\n    # For a number to be a square, all prime factors must be of even power\n    # Multiply 675 by the minimum required powers of its prime factors to make it a square\n    B = 1\n    for prime, power in prime_factors.items():\n        if power % 2 != 0:  # Check if the power is odd\n            B *= prime  # Multiply B by the prime to make the power even\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_factor = 2/3\n\n    original_price = sale_price / discount_factor\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = 65 - 5\n    \n    # Josh's age 5 years ago, which is 3/5 of Shelby's age at that time\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    \n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    \n    return josh_current_age\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  # Given multipack cost in pence\n    single_can_cost_pence = 65  # Given single can cost in pence\n    individual_cost_pence = single_can_cost_pence * 12  # Cost of 12 cans when bought individually\n\n    savings = individual_cost_pence - multipack_cost_pence  # Savings when buying a multipack\n\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Create the two equations based on the problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Get the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let x, y, z represent Adam's, Ben's, and Carl's weights respectively.\n\n    # Sum of Adam's and Ben's weight\n    adam_and_ben = 102\n\n    # Sum of Ben's and Carl's weight\n    ben_and_carl = 97\n\n    # Sum of Adam's and Carl's weight\n    adam_and_carl = 93\n\n    # The total sum of all weights counting each person twice\n    total_twice = adam_and_ben + ben_and_carl + adam_and_carl\n\n    # The total weight of Adam, Ben, and Carl\n    total_weight = total_twice / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    result = 55 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Alan and Bob's combined rate\n    combined_rate = 1 / 4\n    \n    # Bob's individual rate\n    bob_rate = 1 / 6\n    \n    # Alan's individual rate\n    alan_rate = combined_rate - bob_rate\n    \n    # Alan's time on his own\n    alan_time = 1 / alan_rate\n    \n    return alan_time\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n    \n    # Count numbers between 4000 and 4999\n    # 4 is already used as thousand's digit, we have 5 choices for hundreds\n    # 4 choices for tens and 3 choices for ones.\n    total_count += 5 * 4 * 3\n    \n    # Count numbers between 3300 and 3267\n    # 3 is already used as thousand's digit, we can't use 3 at hundred's place\n    # so we have 4 choices for hundreds (1, 2, 4, 5, as 6 leads to a number greater than 3267)\n    # For number 32X7, we have 3 choices for tens place.\n    # For number 326X, only 1 choice for units place which is 4.\n    total_count += 4 + 3 + 1 \n    \n    # Count numbers between 3270 and 3299\n    # For these numbers, thousand's digit is already 3, the hundred's digit is already 2\n    # there are 4 choices for the tens (which are 1, 4, 5, and 6 since 3 is already used)\n    # after choosing the tens digit, we have 3 choices left for the one's digit.\n    total_count += 4 * 3\n    \n    # For numbers between 5000 and 5120,\n    # 5 is already used as thousand's digit, no choice for hundred's since it must be 0\n    # For tens, we can't use 1 since it would lead to a number above 5120, so we have 4 choices (2, 3, 4, and 6)\n    # For one's place, we have after choosing tens, 4 choices left.\n    total_count += 4 * 4\n    \n    # Count numbers between 4000 and 5120 with the thousand's digit being 1, 2, 3, or 5\n    # For each thousand's choice (1, 2 or 3), we have 1 choice for thousand's place, 5 choices for hundred's place\n    # 4 choices for ten's place, and 3 choices left for ones place.\n    total_count += 3 * (5 * 4 * 3)\n    \n    return total_count\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n\n    ans = number1 + number2\n\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "import math\n\ndef solution():\n    return math.gcd(84, 108)\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n\n    # Peter needs one more vote than half the total votes to be elected for sure\n    required_majority = total_votes // 2 + 1\n\n    # The votes Peter still needs to get to achieve a certain victory\n    additional_votes_required = required_majority - current_votes_peter\n\n    return additional_votes_required\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    food_per_week = 15\n    number_of_weeks = 26\n\n    total_food_required = food_per_week * number_of_weeks\n\n    return total_food_required\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial amount of money Alex and Nicholas had\n    x = symbols('x')\n    \n    # Create the equation based on the problem statement\n    equation = Eq((x - 13) / (x - 58), 6)\n    \n    # Solve the equation to find the initial amount of money x\n    initial_amount = solve(equation, x)\n    \n    # Since the initial amounts are the same for both, the total is twice the initial amount for one person\n    return 2 * initial_amount[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n\n    return used_flour\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n    day_codes = {'Monday': '0001', 'Tuesday': '0002', 'Wednesday': '0003', \n                 'Thursday': '0004', 'Friday': '0005', 'Saturday': '0006', \n                 'Sunday': '0007'}\n\n    # Since 28 is a multiple of 7, the day of the week will be the same.\n    day_of_week = 'Monday'\n    return day_codes[day_of_week]\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # Subtract the interval once because there are no poles at either end\n    num_poles = ((road_length - interval) // interval)\n\n    return num_poles\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    mean = 11\n    numbers = [11, 13, 17, 12]\n    sum_numbers = sum(numbers)\n    total_numbers_with_x = mean * (len(numbers) + 1)\n    x = total_numbers_with_x - sum_numbers\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_7_value = 7 * 10**3  # The value of the first 7 in the ten-thousandth place\n    second_7_value = 7 * 10**1  # The value of the second 7 in the tenth place\n    difference = first_7_value - second_7_value\n    return difference\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # Let's denote the number of rulers as r.\n    # According to the problem, Alison has 10 more pencils than rulers.\n    # This implies that the number of pencils is r + 10.\n    # The total number of pencils and rulers is 52.\n    # We can set up the following equation: r + (r + 10) = 52.\n\n    # Solving for r:\n    r = (52 - 10) / 2\n\n    return int(r)\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n\n    return total_cost_for_12\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Take all yellow marbles\n    marbles = 10\n    # Take 3 red marbles (the worst case before getting the 4th of the same colour)\n    marbles += 3\n    # Take 3 blue marbles (the worst case before getting the 4th of the same colour)\n    marbles += 3\n    # One more marble guarantees 4 of the same colour\n    marbles += 1\n\n    return marbles\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_ratio = 5\n    girls_ratio = 6\n    \n    girls = (girls_ratio * boys) / boys_ratio\n    \n    return int(girls)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_dress, red_dress, yellow_dress = symbols('blue_dress red_dress yellow_dress')\n\n    equation1 = Eq(blue_dress, 2 * red_dress)\n    equation2 = Eq(yellow_dress, blue_dress + 2.40)\n    equation3 = Eq(blue_dress + red_dress + yellow_dress, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue_dress, red_dress, yellow_dress))\n\n    return solutions[blue_dress]\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 15 / 100 * 29\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.3333... (repeating)\n    # The sum of the first 1000 digits from the right of the decimal point is \n    # just 1000 times the digit \"3\" since the digit \"3\" repeats indefinitely.\n    digit = 3\n    sum_of_digits = digit * 1000\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Start counting from 2 up to and including 100\n    # Since she's counting by twos, all even numbers will be crossed out\n    start = 2\n    end = 100\n    step = 2\n    \n    # Calculate the number of multiples of 2 in the range 2 to 100\n    num_multiples = (end - start) // step + 1\n    \n    # Return the number of multiples\n    return num_multiples\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_per_book = 32 / 8\n    total_cost_for_12_books = cost_per_book * 12\n    return total_cost_for_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x - 13, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    # Final concentration in container C is 0.5% of 60 grams, so pure water in C is:\n    pure_water_in_C = 60 * (1 - 0.005)\n    \n    # Since 10 grams of solution was added from B to C, pure water in B before transfer is:\n    pure_water_in_B_before = pure_water_in_C + 10 - 50\n    \n    # The concentration of solution in A after adding 10 grams of unknown solution is:\n    concentration_in_A_after = (30 + 10) / (40 + pure_water_in_B_before)\n    \n    # Let x be the concentration of the original solution in A\n    # Then 10 grams of this solution has 10*x grams of pure water\n    # And (30 + 10 - 10*x) is the amount of pure water in container A after mixing\n    # The pure water in B (40 grams) mixed with those 10 grams from A gives us pure_water_in_B_before\n    equation = Eq((30 + 10 - 10*x) / 40, concentration_in_A_after)\n    \n    # Solving the equation for x gives us the concentration of the solution originally put in A\n    x = solve(equation, x)[0]\n\n    return x * 100  # converting to percentage\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    place_value = 0.001  # 6 is in the thousandths place\n    digit_value = 6 * place_value\n\n    return digit_value\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n    \n    # The two people who want to stand next to each other can be treated as a single unit.\n    # Therefore, we actually have 4 \"units\" to arrange: the combined unit and the other three individuals.\n    units_factorial = factorial(4)\n    \n    # Now, the two people within the combined unit can be arranged in 2! ways.\n    combined_people_factorial = factorial(2)\n    \n    # The total number of ways is the product of the arrangements of the units\n    # and the arrangements within the combined unit.\n    total_ways = units_factorial * combined_people_factorial\n    \n    return total_ways\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the ages of the three cousins be a, b, and c.\n    a, b, c = symbols('a b c', integer=True)\n\n    # The product of their ages this year is 2016\n    eq1 = Eq(a * b * c, 2016)\n\n    # The product of their ages last year (a - 1)(b - 1)(c - 1) is 1377\n    eq2 = Eq((a - 1) * (b - 1) * (c - 1), 1377)\n\n    # We solve the system of equations for a, b, and c.\n    solutions = solve((eq1, eq2), (a, b, c))\n\n    # Since ages are positive integers, we find the positive integer solution.\n    for sol in solutions:\n        if all(x > 0 for x in sol):\n            a, b, c = sol\n\n    # The product of their ages two years ago would be (a-2)(b-2)(c-2)\n    product_two_years_ago = (a - 2) * (b - 2) * (c - 2)\n\n    return product_two_years_ago\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    num1 = -3\n    num2 = 8\n    halfway_number = (num1 + num2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    weight_metal2 = 13\n    nickel_percent1 = 0.40\n    nickel_percent2 = 0.60\n\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel = (weight_metal1 * nickel_percent1) + (weight_metal2 * nickel_percent2)\n    \n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # Using the formula for the sum of an arithmetic series: n*(n+1)/2\n    # Let's try to find n such that n*(n+1)/2 < 3405 since he added an extra number \n    n = 1\n    while n*(n+1)/2 < 3405:\n        n += 1\n    n -= 1  # Adjust for the loop overshoot\n\n    # Calculate the proper sum without the duplicate\n    correct_sum = n*(n+1)//2\n    \n    # Find the duplicate number by subtracting the correct sum from the wrong one\n    duplicate_number = 3405 - correct_sum\n    return duplicate_number\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays with every other player once.\n    # Therefore, each player plays 7 games (since there are 7 other players).\n    # Since everyone scores a different number of wins and no ties are allowed, \n    # the possible scores for the players are from 0 to 7 wins.\n\n    # Hence, the player with the highest number of wins (the champion) would have 7 wins, \n    # as each win corresponds to a different opponent they defeated.\n    return 7\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of chickens in each of the original 24 pens\n    x = symbols('x')\n\n    # Equation representing the total number of chickens before and after building 6 more pens\n    equation = Eq(24 * x, (24 + 6) * (x - 6))\n\n    # Solve for x\n    chickens_per_pen = solve(equation, x)\n\n    # There will be only one solution that makes sense in this context (positive number of chickens)\n    num_chickens = 24 * chickens_per_pen[0]\n\n    return num_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    for divisor in range(1, 40-remainder):  # The divisor has to be less than the total sum minus remainder\n        for quotient in range(1, (40-remainder) // divisor):  # Quotient has to fit the dividend\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    return len(possible_values)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_to_math_ratio = 7 / 8\n    history_club_total = math_club_total * history_to_math_ratio\n    return int(history_club_total)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the given numbers on planet Zog to our understanding\n    # 729 becomes 927 and 26 becomes 62\n    number1 = int(str(729)[::-1])\n    number2 = int(str(26)[::-1])\n\n    # Perform the subtraction\n    result = number1 - number2\n\n    # Reverse the result to match how numbers are written on planet Zog\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    ashley_age_3_years_ago = ashley_age - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    \n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    speed = 20  # Train's speed in meters per second\n    time = 30   # Time taken to pass through the bridge in seconds\n\n    # Since the train completely passes the bridge in 30 seconds,\n    # we need to find the distance covered in 30 seconds at the speed of 20 m/s\n    # Distance covered is the length of the train plus length of the bridge\n    distance_covered = time * speed\n\n    # Subtract the length of the train to find the length of the bridge\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    test_total_marks = 60\n    hebe_percentage = 60\n    hebe_score = (hebe_percentage / 100) * test_total_marks\n\n    more_marks = hebe_score - emily_score\n\n    return more_marks\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    jog_time = 0.5  # Time spent jogging (from 6:30 AM to 7:00 AM)\n    walk_time = 1.0  # Time spent walking (from 7:00 AM to 8:00 AM)\n    \n    jog_speed = 9  # Jogging speed in km/hour\n    walk_speed = 7.5  # Walking speed in km/hour\n    \n    # Distance = speed * time\n    jog_distance = jog_speed * jog_time\n    walk_distance = walk_speed * walk_time\n    \n    total_distance = jog_distance + walk_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence is given by the formula: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term and a_n is the nth term.\n    \n    # S_6 = 64 implies 6/2 * (a_1 + a_6) = 64\n    # S_12 = 156 implies 12/2 * (a_1 + a_12) = 156\n\n    # We also know that a_6 = a_1 + 5d and a_12 = a_1 + 11d, where d is the common difference of the arithmetic sequence.\n    \n    # From S_6 and S_12 we have two equations:\n    # 3 * (a_1 + a_1 + 5d) = 64      --> (1)\n    # 6 * (a_1 + a_1 + 11d) = 156    --> (2)\n\n    # Let's simplify these equations:\n    # 6a_1 + 15d = 64                --> (1)\n    # 12a_1 + 66d = 156              --> (2)\n\n    # We can divide these equations by 6 to simplify further:\n    # a_1 + (15/6)d = 64/6           --> (1)\n    # 2a_1 + (66/6)d = 156/6         --> (2)\n\n    # Now, let's solve this system to find a_1 and d.\n    \n    # Multiply equation (1) by 2 to eliminate a_1:\n    # 2a_1 + (15/3)d = (64/6)*2      --> (1)'\n\n    # Subtracting equation (1)' from equation (2):\n    # (66/6)d - (15/3)d = (156/6) - (64/6)*2\n\n    # Solve for d:\n    d = ((156/6) - (64/6)*2) / ((66/6) - (15/3))\n\n    # Now we can find a_1 using equation (1):\n    a_1 = (64/6 - (15/6)*d) / 2\n\n    # We want to find the sum of the first 18 terms, which is S_18 = 9 * (a_1 + a_18).\n    # Since a_18 = a_1 + 17d, we can plug in the values:\n    S_18 = 9 * (a_1 + (a_1 + 17*d))\n\n    # Return the value of S_18\n    return S_18\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4),\n    # because a three-digit number cannot start with 0.\n    first_digit_choices = 2\n\n    # There are 3 choices for the second digit (0, 3, or 4),\n    # since it can be any of the three available digits.\n    second_digit_choices = 3\n\n    # There are also 3 choices for the third digit (0, 3, or 4).\n    third_digit_choices = 3\n\n    # The total number of different three-digit numbers is the product\n    # of the number of choices for each digit.\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference = 55 - 44\n    ans = common_factor * difference\n    return ans\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of games won and lost\n    games_won, games_lost = symbols('games_won games_lost')\n    \n    # Equation representing twice times as many games won as lost\n    equation1 = Eq(games_won, 2 * games_lost)\n    \n    # Equation representing the total number of games played\n    equation2 = Eq(games_won + games_lost, 63)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially.\n    c, g = symbols('c g')\n\n    # Initial condition: 65% of the total animals are cows.\n    initial_total = c + g\n    equation1 = Eq(c, 0.65 * initial_total)\n\n    # After adding animals: 240 more animals are added.\n    new_total = initial_total + 240\n\n    # The cows have increased by 20%.\n    new_cows = c + (20 / 100) * c\n\n    # The number of goats has doubled.\n    new_goats = 2 * g\n\n    # After addition, the new percentage of cows is 65% + 20% = 85%\n    equation2 = Eq(new_cows, 0.85 * new_total)\n\n    # Using the fact that the total number of animals after addition is the sum of new cows and new goats.\n    equation3 = Eq(new_cows + new_goats, new_total)\n\n    # Solving the system of equations for g.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # There are 3 girls who want to stand together, so we treat them as one unit.\n    # Additionally, 3 teachers can stand in any order, which gives us 4! ways.\n    # 3 girls can arrange among themselves in 3! ways.\n    unit_and_teachers = 4  # 3 teachers + 1 unit of 3 girls\n    unit_and_teachers_permutations = factorial(unit_and_teachers)\n    girls_permutations = factorial(3)\n    \n    # Now we place 3 boys in the spaces between teachers and the girls-unit.\n    # We have 5 spaces (before the first person, between the first and second, and so on...)\n    # So there are permutations of 5 taken 3 for the boys.\n    spaces = 5  # | T | G-unit | T | T |\n    boys_permutations = permutations(spaces, 3)\n\n    total_permutations = unit_and_teachers_permutations * girls_permutations * boys_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_spent = Eq(5*x*12 + 3*x*5, 120)\n    solution = solve(total_spent, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "def solution():\n    from math import comb\n\n    num_students = 5\n    num_select = 2\n\n    ans = comb(num_students, num_select)\n\n    return ans\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    \n    total_roses = bouquets * roses_per_bouquet\n    \n    return total_roses\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Calculate the area of Triangle X and Triangle Y using Heron's formula:\n    # A = sqrt(s * (s - a) * (s - b) * (s - c))\n    # where s is the semi-perimeter s = (a + b + c) / 2\n    # For equilateral triangles, area formula simplifies to A = (sqrt(3) / 4) * a^2\n    \n    from math import sqrt\n\n    # Given that Triangle X has sides of 3 cm\n    side_x = 3\n    # Area of Triangle X\n    area_x = (sqrt(3) / 4) * side_x ** 2 \n\n    # Given that Triangle Y has sides of 9 cm\n    side_y = 9\n    # Area of Triangle Y\n    area_y = (sqrt(3) / 4) * side_y ** 2 \n\n    # How many times can Triangle X fit into Triangle Y?\n    times_fit = area_y / area_x\n\n    return int(times_fit)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_expression = 8 * 9 * 10\n    smaller_expression = 1 * 2 * 3\n    ans = larger_expression - smaller_expression\n    return ans\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 201):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    # He picks 1 appetizer and 1 main course for sure, so we start with\n    # basic combinations for those.\n    combinations = 2 * 3\n\n    # For the soup, he can either have it or not, so we multiply by 2\n    # (2 choices: with soup or without soup).\n    combinations *= 2\n\n    # For the dessert, same logic as soup, multiply by 2\n    # (2 choices: with dessert or without dessert).\n    combinations *= 2\n\n    return combinations\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue_balls = symbols('blue_balls', integer=True)\n\n    # The total number of ways to pick 2 balls from the bag when there are 4 red balls and some blue balls\n    total_ways = (4 + blue_balls) * (3 + blue_balls - 1) / 2\n\n    # The number of ways to pick 2 red balls from the 4 red balls\n    red_ways = 4 * 3 / 2\n\n    # The probability that both balls are red is given by red_ways/total_ways\n    probability_eq = Eq(red_ways / total_ways, 2 / 7)\n\n    # Solve for the number of blue balls\n    solutions = solve(probability_eq, blue_balls)\n\n    # Since the number of blue balls has to be an integer, we choose the positive solution\n    num_blue_balls = [s for s in solutions if s.is_integer and s > 0]\n\n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    a1 = 6  # first term\n    n = 8  # number of terms\n    d = 5  # common difference\n    an = a1 + (n - 1) * d  # nth term\n\n    sum_of_sequence = (n * (a1 + an)) // 2  # sum of arithmetic sequence formula\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Weight ratio between dog and rabbit\n    dog_to_rabbit = 1 / 8\n    \n    # Weight ratio between rabbit and chicken\n    rabbit_to_chicken = 1 / 2\n    \n    # Weight ratio between dog and chicken\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    \n    # Calculate the number of chickens that weigh as much as one dog\n    # Since 1 dog is 8 rabbits and 1 rabbit is 2 chickens, 1 dog is 8 * 2 chickens\n    chickens_per_dog = 1 / dog_to_chicken\n\n    return int(chickens_per_dog)\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let 'x' be the total number of slices Terry had at first\n    for x in range(1, 100):  # Iterating within a reasonable range to find our total slices\n        if (3*x)/5 + 2 + 4 == x:  # Family ate 3/5 of the cake, then she gave away 2, and 4 were left\n            return x\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    sequence = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Initialize count of such numbers to 0\n    count = 0\n\n    # Using combinations with replacement to find all combinations of 10 digits where the product is 2^27\n    # We know that 2^27 is just multiplying '2' 27 times, the only digits can be 2, 4, and 8,\n    # because they are powers of 2 and are all less than 10\n    # Thus, we look for combinations of 2's, 4's, and 8's where the total number of 2's can be found by 27 - 2*num_4 - 3*num_8\n    # Where 'num_4' is the number of 4's and 'num_8' is the number of 8's\n    for combo in combinations_with_replacement([2, 4, 8], 10):\n        if combo.count(2) + 2*combo.count(4) + 3*combo.count(8) == 27:\n            # For each valid combination, we need to find all permutations of the digits\n            # However, due to repeated digits, we divide the total permutations\n            # by the factorial of the count of each unique digit to avoid duplicates.\n            from math import factorial\n            num_perms = factorial(10)\n            num_perms //= factorial(combo.count(2))\n            num_perms //= factorial(combo.count(4))\n            num_perms //= factorial(combo.count(8))\n            count += num_perms\n\n    return count\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_rate, danny_rate = symbols('mike_rate danny_rate', positive=True, real=True)\n\n    equation1 = Eq(1/mike_rate + 1/danny_rate, 1/10)\n    equation2 = Eq(8*mike_rate + 13*danny_rate, 1)\n\n    solutions = solve((equation1, equation2), (mike_rate, danny_rate))\n\n    danny_time = 1/solutions[danny_rate]\n\n    return danny_time\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n\n    min_pencils = (total_pencils // pencil_cases) + (total_pencils % pencil_cases > 0)\n    \n    return min_pencils\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_first_3 = 3 * 10**2  # The place value of the first 3 (hundreds place)\n    place_value_second_3 = 3 * 10**5  # The place value of the second 3 (hundred thousands place)\n    \n    difference = place_value_second_3 - place_value_first_3\n    return difference\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(m + sum([m + i for i in range(1, 11)]), 66)\n    res = solve(equation, m)\n    return res[0]\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    \n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += common_difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_on_folder = 2.89\n    father_gave = 4 / 5\n\n    remaining_amount = initial_amount - spent_on_folder + father_gave\n\n    return remaining_amount\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    chess_per_side = (side_length // interval) - 1 # chess at each interval, excluding corners\n    chess_on_corners = 4  # one chess at each corner\n\n    total_chess = 4 * chess_per_side + chess_on_corners\n\n    return total_chess\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):\n        num = int(f\"{i // 10}{i // 10}{i % 10}{i % 10}\")\n        root = int(num ** 0.5)\n        if root * root == num:\n            return num\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m) - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    combined_speed = tim_speed + bob_speed\n\n    time_driven = (initial_distance - remaining_distance) / combined_speed\n\n    return time_driven\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Assuming each digit appears 4 times at most to avoid painting red.\n    # Since there are 10 different digits (0-9), the total is 4 times each,\n    # the sum would be 40, while we have 100 squares to fill in.\n    # The remaining 60 squares can be filled with the same 4 times max strategy.\n    # This means that we can have each digit 4 times for 24 digits,\n    # and an additional 4 digits (100 - 96) from the set [0, 1, 2, 3].\n    # So, in the worst-case scenario, those additional 4 digits will result in painting red.\n\n    # Each of the digits 0-9 can appear at most 4 times without painting\n    # Then we have 60 left, each digit from 0-5 can appear another 4 times\n    # We have 4 squares left, which we can fill with any 4 identical digits, painting them red\n    red_squares = 4  # The minimal number of red squares\n    return red_squares\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    progress_per_day = distance_per_day - slide_per_night\n    \n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # The number of zeros at the end of the product is determined by the number of pairs of 2's and 5's in the factorization\n    # Since there are always more 2's than 5's, we only need to count the number of 5's in the factorial\n    n = 1\n    number_of_fives = 0\n    \n    # Each multiple of 5 contributes at least one 5 to the factorial\n    # Multiples of 25 contribute two, multiples of 125 contribute three, and so on\n    while number_of_fives < 28:\n        n += 1\n        current = n\n        while current % 5 == 0:\n            number_of_fives += 1\n            current //= 5\n\n    return n\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean = 5\n    total_numbers = 5\n    known_numbers = [3, 4, 6, 10]\n\n    total_sum = mean * total_numbers\n    sum_known_numbers = sum(known_numbers)\n    fifth_number = total_sum - sum_known_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 / 10\n    hundredths = 8 / 100\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = \"8354\"\n    length_of_sequence = len(recurring_sequence)\n    total_digits = 84\n    sum_of_digits = 0\n\n    for i in range(total_digits):\n        sum_of_digits += int(recurring_sequence[i % length_of_sequence])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = set(year_str)\n        if len(digits) == 4: # Ensure all digits are unique.\n            sorted_digits = sorted(digits)\n            for i in range(len(sorted_digits) - 3):\n                # Check if there are 4 consecutive digits\n                if int(sorted_digits[i + 3]) - int(sorted_digits[i]) == 3:\n                    # Now we should check if permutations of these 4 digits form a valid year\n                    for perm in permutations(sorted_digits):\n                        perm_year = int(''.join(perm))\n                        if perm_year >= 1000 and perm_year <= year:\n                            count += 1\n                            break\n    return count\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    time_between_strikes = (43 - 6 * 3) / (6 - 1) \n    total_time_for_12_strikes = 12 * 3 + time_between_strikes * (12 - 1)\n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    hours = 15\n    target_hours = 2\n\n    work_rate_per_person = 1 / (people * hours) \n    total_work = 1\n    people_needed = total_work / (work_rate_per_person * target_hours)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_zero_numbers = 9 * 9 * 9\n    at_least_one_zero = total_three_digit_numbers - no_zero_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # We use the concept of \"stars and bars\" (balls and urns) where we distribute n identical items into k distinct bins.\n    # We can think of the problem as arranging 20 identical pens and 5 dividers (since there are 6 kids, we need 5 dividers).\n    # The number of ways to arrange these items is (20 - 1) choose (6 - 1),\n    # since we must subtract 1 pen for each child to ensure they get at least one.\n    \n    n = 20 - 6  # Number of pens to distribute after giving each kid one pen\n    k = 6 - 1   # Number of dividers\n\n    # Calculate the number of combinations using the formula for combinations, which is n! / (k! * (n-k)!)\n    return factorial(n + k) // (factorial(k) * factorial(n))\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Given that initially, m^2 + 5 is the number of students\n    # After 18 more students join, we have m^2 + 5 + 18 = n^2,\n    # which simplifies to m^2 + 23 = n^2\n    # We need to find m and n such that n^2 - m^2 = (n + m)(n - m) = 23\n    # Since 23 is a prime number, the only factors it has are 1 and 23\n    # Therefore, n + m = 23 and n - m = 1, or n + m = 1 and n - m = 23, which is impossible for natural m and n.\n    \n    # Solving the two equations gives us:\n    n_plus_m = 23\n    n_minus_m = 1\n\n    # Adding both equations we get:\n    # 2n = 24 => n = 12\n    n = (n_plus_m + n_minus_m) // 2\n\n    # Subtracting second from the first we get:\n    # 2m = 22 => m = 11\n    m = (n_plus_m - n_minus_m) // 2\n\n    # Since we want the original number of students which is m^2 + 5:\n    original_students = m ** 2 + 5\n    \n    return original_students\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 200):\n        if (num % 3 == 1) and (num % 4 == 1) and (num % 5 == 1) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30   # speed of the ball in meters per second\n    \n    kinetic_energy = 0.5 * mass * speed ** 2  # Kinetic energy formula: 1/2 * mass * velocity^2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # after n cuts, there will be n+1 pieces\n    \n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem\n    # Here the congruences are x ≡ 2 (mod 5), x ≡ 2 (mod 6), and x ≡ 2 (mod 7)\n    congruences = [(2, 5), (2, 6), (2, 7)]\n\n    # Use the solve_congruence function from sympy's ntheory module\n    x, _ = solve_congruence(*congruences)\n\n    # Make sure that the number is a three-digit number and less than 300\n    while x < 100 or x >= 300:\n        x += 5 * 6 * 7  # The least common multiple of 5, 6, and 7\n\n    return x\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # All digits are different and it's the smallest 4-digit number\n    # The ones place must be 9, the greatest odd number\n    ones_digit = 9\n\n    # Loop through possible hundreds and tens digits that add up to 13\n    # And find the digits for smallest number\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            if (hundreds_digit + tens_digit == 13) and (hundreds_digit != ones_digit) and (tens_digit != ones_digit):\n                # We found our hundreds and tens digits\n                # Now find the smallest digit for thousands place\n                for thousands_digit in range(1, 10):\n                    if len({thousands_digit, hundreds_digit, tens_digit, ones_digit}) == 4:\n                        # Form the smallest 4-digit number and return it\n                        return thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + ones_digit\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let Jerry's speed be x mph\n    # Thus, Kevin's speed is 1.5x mph\n    # We know that the time taken for them to meet will be the same for both\n    # Therefore, the distance covered by Jerry would be his speed (x) multiplied by the time (t)\n    # And the distance covered by Kevin would be his speed (1.5x) multiplied by the time (t)\n    # With the combined distance they covered being 225 miles, we have:\n    # x * t + 1.5x * t = 225\n    # Converting the equation to terms of x and t, we get:\n    # 2.5x * t = 225\n    # We want to find the distance Jerry has driven which is x * t\n    # So we can define the ratio of distances covered by Jerry to the total and multiply by the total distance\n    jerry_ratio = 1 / (1 + 1.5)\n    jerry_distance = jerry_ratio * 225\n\n    return jerry_distance\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    num_pictures = 10\n\n    # Space available to place pictures between the first and the last one:\n    space_between = total_width - 2 * picture_width\n\n    # The space is to be equally divided into 9 intervals (for 8 remaining pictures)\n    interval_width = space_between / (num_pictures - 1)\n\n    # The centre of the wall\n    center_wall = total_width / 2\n\n    # The distance from the left edge to the third picture (first interval + half picture width)\n    distance_third_picture = picture_width + interval_width + (picture_width / 2)\n\n    # How far should Gill place the centre of the third picture from the centre of the wall\n    distance_from_center_wall = center_wall - distance_third_picture\n\n    return distance_from_center_wall\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = range(5, 21, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 1  # Assign 100% as 1 for simplicity\n    bounce_height = initial_height * 0.75  # 75% of the initial height\n    bounce_count = 0  # Start counting the number of bounces\n\n    # We want to stop once the bounce height is less than 25% of initial height\n    while bounce_height >= initial_height * 0.25:\n        bounce_height *= 0.75  # Each bounce goes to 75% of the previous height\n        bounce_count += 1  # Increment the bounce count\n\n    return bounce_count\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    doris_future_age = 40\n\n    uncle_future_age = 40\n    uncle_current_age = uncle_future_age - (doris_future_age - doris_age)\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's purchase\n    eq1 = Eq(2*banana + 3*apple, 1.50)\n    \n    # Beth's purchase\n    eq2 = Eq(3*banana + 2*apple, 1.45)\n    \n    # Solve the system of equations\n    prices = solve((eq1, eq2), (banana, apple))\n\n    # Calculate the price for 1 banana and 1 apple\n    annabella_price = prices[banana] + prices[apple]\n    \n    return annabella_price\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    start = 6\n    end = 19\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for i in range(1, 10):\n        if 8 + i == 15:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    amount_after_five_years = initial_investment * interest_first_three_years * interest_last_two_years\n\n    return round(amount_after_five_years, 1)\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    # Equation based on the description of the problem\n    equation = Eq(original_money - 200 - (2/7) * (original_money - 200), (1/3) * original_money)\n\n    # Find solution to the equation\n    solutions = solve(equation, original_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    for price in range(124900, 125000):\n        rounded_price = round(price, -2)\n        if rounded_price == 125000:\n            return price\n    return None\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n    \n    # Consider Tom and Harry as a single entity for the arrangement\n    # We have 5 entities (Tom and Harry together, plus the other 5 students)\n    entities_count = 5\n    \n    # There are 5! arrangements for these entities\n    arrangements_without_Ronda = factorial(entities_count)\n    \n    # Tom and Harry can switch places, adding a factor of 2\n    arrangements_for_Tom_Harry = 2\n\n    # Since Ronda must be at the far right, the arrangements for Ronda are fixed at 1\n    arrangements_for_Ronda = 1\n    \n    # Total arrangements is the product of the different arrangements\n    total_arrangements = arrangements_without_Ronda * arrangements_for_Tom_Harry * arrangements_for_Ronda\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    # Initial conditions\n    current_average = 89\n    current_total_score = current_average * 4  # 4 common tests already taken\n    desired_average = 95\n    full_score = 100\n\n    # Number of tests needed to reach the desired average\n    tests_taken = 4  # start with the tests already taken\n    while True:\n        tests_taken += 1\n        # Calculate the new average if Paul scores full marks on all subsequent tests\n        new_average = (current_total_score + full_score * (tests_taken - 4)) / tests_taken\n        # If the new average reaches or exceeds the desired average, break the loop\n        if new_average >= desired_average:\n            break\n\n    # The answer is total tests needed minus the tests already taken\n    ans = tests_taken - 4\n    return ans\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time taken for each part of the race\n    time_first_part = 540 / 9\n    time_middle_part = 300 / 6\n    time_last_part = (1000 - 540 - 300) / 10\n\n    # Calculate total time taken\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the usual speed in km/h, t be the usual time in hours, and d be the distance between P and Q.\n    x, t, d = symbols('x t d')\n\n    # The distance d is equal to the usual speed x multiplied by the usual time t.\n    equation1 = Eq(d, x * t)\n\n    # If the speed is increased by 20%, the time taken decreases by 1 hour.\n    equation2 = Eq(d, x * 1.2 * (t - 1))\n\n    # For the first scenario\n    # The car travels the first 200km at its usual speed.\n    # Let t1 be the time taken to travel the first 200 km\n    t1 = 200 / x\n\n    # For the remaining distance, the car increases its speed by 25%.\n    # Therefore, the car travels with a speed of 1.25x.\n    # The time taken for the remaining distance is (d-200)/(1.25x)\n    # This journey takes 12 minutes less, which is 12/60 hours = 0.2 hours less.\n    equation3 = Eq(t, t1 + (d - 200) / (1.25 * x) + 0.2)\n\n    # Solving the system of equations for d\n    solutions = solve((equation1, equation2, equation3), (x, t, d))\n\n    # Extracting the distance d\n    return solutions[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2 # Lia and Liz each prepares an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30 # m/s\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    # Let's denote Doris's current age as d and her uncle's current age as u.\n    d = 10\n\n    # Let's assume x years later Doris will reach her uncle's current age.\n    # So, we'll have: d + x = u (Doris's age when she reaches her uncle's current age)\n    # And her uncle will then be u + x years old at that time.\n\n    # According to the uncle's statement: u + x = 40 (When Doris reaches his current age, he will be 40)\n\n    # Now, let's replace u with d + x in the second equation:\n    # d + x + x = 40\n    # 2 * x + d = 40\n    # We know Doris's current age (d = 10), so we can solve for x\n    # 2 * x + 10 = 40, which implies x = (40 - 10) / 2\n    x = (40 - d) / 2\n\n    # Now we can find the uncle's current age by adding d and x\n    u = d + x\n\n    return int(u)\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n    \n    initial_condition = Eq(sheep, (5/7) * cows)\n    final_condition = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    solution_set = solve((initial_condition, final_condition), (sheep, cows))\n    return solution_set[sheep]\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pencil_box = symbols('book pencil_box')\n    \n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    solutions = solve((equation1, equation2), (book, pencil_box))\n    \n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = 8 * 60 + 30  # Convert 08:30 to minutes\n    end_time = 9 * 60 + 25    # Convert 09:25 to minutes\n    n = end_time - start_time  # Calculate the difference in minutes\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 1/6\n    B_efficiency = A_efficiency / 2\n    combined_efficiency = A_efficiency + B_efficiency\n    days_to_complete = 1 / combined_efficiency\n    return days_to_complete\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cents\n    mamee_cost = haribo_cost - 30  # cents\n    jelly_cost = 6 * mamee_cost  # cents\n    jelly_cost_dollars = jelly_cost / 100  # converting cents to dollars\n\n    return jelly_cost_dollars\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    ans = (18 / 36) * 32\n    return ans\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Assuming Geoff's current age is G and his sister's current age is S\n    # We are given that G + S = 22\n\n    # In every passing year, both Geoff and his sister will grow older by 1 year\n    # After n years, the ages will be (G + n) and (S + n)\n    # We are asked to find after how many years their ages will sum up to 30\n    # Therefore, (G + n) + (S + n) = 30\n\n    # From the first equation, we can express S in terms of G: S = 22 - G\n    # Substituting S in the second equation, we have (G + n) + (22 - G + n) = 30\n    # Simplifying: 2n + 22 = 30\n\n    # Solving for n:\n    n = (30 - 22) / 2  # This will give us the number of years after which their ages sum up to 30\n\n    return int(n)\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_candies = symbols('total_candies')\n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_dawn = total_candies - (anna + belle)\n    equation = Eq(anna + belle, cathy_dawn + 90)\n    total_candies_solution = solve(equation, total_candies)\n\n    return total_candies_solution[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    \n    # Joel removes 2 less than half of the remaining plants\n    remaining_after_joel = 2 * (remaining_plants + 2)\n    \n    # Valerie removes 3 less than half of the remaining plants\n    remaining_after_valerie = 2 * (remaining_after_joel + 3)\n    \n    # Ethan removes 1 less than half of the plants\n    initial_plants = 2 * (remaining_after_valerie + 1)\n\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + vanilla * 2 / 3 + blueberry * 7 / 9, 427)\n    \n    # Use sympy's solve to find the number of cupcakes\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    chocolate_sold = solutions[chocolate] / 6\n    return chocolate_sold\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    \n    return (beck_books - chris_books) // 2\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_fish_balls = symbols('initial_fish_balls')\n\n    # Equation for the remaining fishballs after selling in the morning and afternoon\n    remaining_after_morning = initial_fish_balls * (1 - 3/4)\n    remaining_after_afternoon = remaining_after_morning * (1 - 1/3)\n    \n    # Equation for final amount of fish balls after making another 506\n    final_fish_balls = remaining_after_afternoon + 506\n    \n    # Equation stating he had twice the number of fish balls he made at first after making 506\n    equation = Eq(final_fish_balls, 2 * initial_fish_balls)\n    \n    # Solve for the initial number of fish balls\n    solution = solve(equation, initial_fish_balls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    \n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    # Calculating the first term\n    first_term = (5 / 8) * 92\n    \n    # Calculating the second term\n    second_term = 7 * 0.625\n    \n    # Calculating the third term, converting percentage to decimal\n    third_term = 62.5 / 100\n    \n    # Sum of all terms\n    ans = first_term + second_term + third_term\n    \n    return ans\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import divisors\n\n    n = 36\n    factors = divisors(n)\n    ans = len(factors)\n\n    return ans\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown value represented by the circle\n    circle = symbols('circle')\n    \n    # Setting up the equation based on the problem statement\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    \n    # Solving the equation and getting the value of the circle\n    result = solve(equation, circle)\n    \n    # Returning the value of the circle which is the solution to the equation\n    return result[0]\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * 1 / 4\n    grown_seeds = total_seeds - died_seeds\n    return int(grown_seeds)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 0.5\n    \n    total_green_apples = pigs * green_apples_per_pig\n    total_red_apples = pigs * red_apples_per_two_pigs\n    \n    total_apples = total_green_apples + total_red_apples\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 3 (mod 5)\n    # x ≡ 4 (mod 7)\n    # x ≡ 5 (mod 9)\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies all congruences\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 0:  # spends money on even days\n            money -= 8\n        else:  # deposits money on odd days\n            money += 10\n    return money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    cong_1 = (1, 2)\n    cong_2 = (2, 3)\n    cong_3 = (3, 4)\n    cong_4 = (4, 5)\n    congruences = [cong_1, cong_2, cong_3, cong_4]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    avg_apples = sum(apples) / len(apples)\n    return avg_apples\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number Michael thinks of\n    x = symbols('x')\n    \n    # Create the equation based on the problem statement\n    equation = Eq((2 * x + 178) / 4, 54)\n    \n    # Solve the equation for x\n    solved_x = solve(equation, x)\n    \n    # Get the result of what number he thought of\n    return solved_x[0]\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # s is the original speed, t is the original time, d is the distance\n    s, t, d = symbols('s t d')\n    \n    # Original speed and time (t = 8 hours)\n    original_time = 8\n    \n    # Equation for original journey\n    eq1 = Eq(d, s * original_time)\n    \n    # New speed and time (t = original_time - 1 hour, speed = s + 5)\n    new_time = original_time - 1\n    eq2 = Eq(d, (s + 5) * new_time)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (s, d))\n    return solutions[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "网络故障，请重试"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_permutations = sorted(permutations(digits))\n    fifth_number = all_permutations[4]  # Since indexing starts at 0\n    return fifth_number[0] * 100 + fifth_number[1] * 10 + fifth_number[2]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    num_bottles = 1000\n    test_tubes_needed = 1\n    while 2 ** test_tubes_needed < num_bottles:\n        test_tubes_needed += 1\n    return test_tubes_needed\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs_initial = 10\n    total_chairs_final = total_chairs_initial - 3\n    total_distance = 36\n\n    distance_between_chairs_initial = total_distance / (total_chairs_initial - 1)\n    distance_between_chairs_final = distance_between_chairs_initial * (total_chairs_initial / total_chairs_final)\n\n    return distance_between_chairs_final\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let Marry's stickers be 7x and Alexis's stickers be 5x at first\n    # Marry and Alexis each gave 20% of their stickers to Charlotte, \n    # which means Marry gave 0.2 * 7x and Alexis gave 0.2 * 5x\n    \n    # Let the initial number of stickers that Charlotte have be y\n    # Charlotte's stickers increased by 80%, so the total she received is 0.8 * y\n    # Therefore, 0.2 * 7x + 0.2 * 5x = 0.8 * y\n    \n    # Marry had 20 stickers more than Charlotte in the end\n    # which means 7x - 0.2 * 7x + 20 = y + 0.8 * y \n    # Simplify this to 5.6x + 20 = 1.8y\n    \n    # From the previous equation, we know that 0.2 * 7x + 0.2 * 5x = 0.8 * y\n    # Simplify this to 1.4x + 1x = 0.8 * y\n    # Simplify further to 2.4x = 0.8 * y\n    \n    # Divide both sides by 0.8 to get y in terms of x\n    # y = 3x\n    \n    # Substitute back into 5.6x + 20 = 1.8y to find x\n    # 5.6x + 20 = 1.8 * 3x\n    # 5.6x + 20 = 5.4x\n    # 0.2x = 20\n    # x = 100\n    \n    # Now that we have x, we can find the initial number of stickers Alexis had, which is 5x\n    # 5 * 100 = 500\n    \n    return 500\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start from 2 books for each.\n    for brother1 in range(2, 11):\n        for brother2 in range(2, 11):\n            brother3 = 10 - brother1 - brother2\n            # Check if brother3's condition satisfies the requirement.\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    # Let x be the fourth angle (smallest angle).\n    # Since one angle is five times larger, it would be 5x.\n    # Two angles are right angles (90 degrees each), therefore:\n    # x + 5x + 90 + 90 = 360 (sum of angles in a quadrilateral is 360 degrees).\n    \n    x = symbols('x')\n    equation = Eq(x + 5*x + 90 + 90, 360)\n\n    # Solving for x.\n    solution_x = solve(equation, x)\n\n    # The largest angle is five times of x.\n    largest_angle = 5 * solution_x[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    smallest_number_of_boxes = float('inf')\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:\n                    smallest_number_of_boxes = min(smallest_number_of_boxes, small + medium + large)\n    return smallest_number_of_boxes\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    median_index = len(sequence) // 2\n    return sequence[median_index]\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # dp[i] will hold the number of ways to reach the i-th step\n    dp = [0] * 11  # We need an array of size 10 + 1, since we're including the 0-th step\n    \n    # Base case initialization\n    dp[0] = 1  # There's one way to stand on the ground without climbing\n    dp[1] = 1  # There's one way to climb to the first step\n    dp[2] = 2  # There are two ways to climb to the second step: (1+1) or (2)\n\n    # Since he can't step on the 5th step, we consider it as zero ways to get there.\n    dp[5] = 0\n    \n    # Compute the number of ways to reach each step, avoiding the 5th\n    for i in range(3, 10 + 1):\n        if i != 5:  # Skip the muddy 5th step\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n\n    ans = dp[10]  # The number of ways to reach the 10th step\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # x/3 + 6/3 = 5\n    equation = Eq((x + 6)/3, 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days_for_9_days = 9\n    cans_in_9_days = (cans_in_6_days / 6) * days_for_9_days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6 / 7) * 42\n    return result\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorize 7007 to find the two 2-digit multiples of 7\n    prime_factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    \n    # The prime factors of 7007 that are multiples of 7 are 7 and 1001\n    \n    # Find the two 2-digit multiples of 7\n    for i in range(len(prime_factors)):\n        for j in range(i+1, len(prime_factors)):\n            multiple1 = prime_factors[i]\n            multiple2 = prime_factors[j]\n            # Check if the product of the two makes 7007 and both are 2-digit numbers\n            if multiple1 * multiple2 == 7007 and 10 <= multiple1 < 100 and 10 <= multiple2 < 100:\n                return multiple1 + multiple2\n\n# Set the final answer\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    distance_miles = miles_per_hour * hours\n    miles_to_kilometers = 1.60934\n    distance_kilometers = distance_miles * miles_to_kilometers\n    return distance_kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    initial_frogs = symbols('initial_frogs')\n    initial_dragonflies = initial_frogs - 9\n\n    # Equation after the magic show\n    equation = Eq(initial_frogs - (11 - 10), initial_dragonflies + (11 - 10))\n\n    # Solve the equation\n    solutions = solve(equation, initial_frogs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # With one entrance and 16 minutes, calculate total number of visitors\n    total_visitors = visitors_per_minute * 16\n\n    # Two entrances combined rate of check-in per minute\n    combined_rate = 2 * check_in_per_entrance\n\n    # Calculate time with two entrances till no one is in the line\n    time_with_two_entrances = total_visitors / combined_rate\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_climbed = 0\n    days = 0\n    \n    while distance_climbed < 16:\n        days += 1\n        distance_climbed += 5\n        if distance_climbed >= 16:\n            break\n        distance_climbed -= 3\n    \n    return days\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for i in range(999, 99, -1):\n        if i % 25 == 0:\n            return i\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies // cookies_per_bottle\n    \n    return num_bottles\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")\n        if number % 9 == 0 and A != 5:\n            return A\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cookies, muffins = symbols('cookies muffins')\n\n    # The number of cookies she baked was 24 more than the number of muffins\n    equation1 = Eq(cookies, muffins + 24)\n\n    # After selling 3/4 of her muffins and 5/8 of her cookies, she had 74 cookies and muffins left\n    # This means 1/4 of muffins and 3/8 of cookies were left\n    equation2 = Eq(1/4 * muffins + 3/8 * cookies, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_to_n = n * (n + 1) // 2\n    ans = sum_to_n**2\n    return ans\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    sum = 0\n    for i in range(40, 49):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver to reach the destination be t minutes.\n    # Since the speed ratio of the driver to the cyclist is 13:2,\n    # the time ratio of the cyclist to the driver will be the inverse, i.e., 2:13.\n    # If the driver takes t minutes, the cyclist will take 13/2 * t minutes.\n    # It is given that the cyclist takes 143 minutes more than the driver.\n    # So, 13/2 * t = t + 143\n    # Solve for t:\n    # Multiplying both sides by 2 to get rid of the fraction yields 13t = 2t + 286\n    # Therefore, 11t = 286\n    t = 286 / 11\n\n    return int(t)\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    # Calculate the cost of each item by multiplying the unit price with the quantity\n    cost_sausage_rolls = 4 * 24  # 4 sausage rolls at 24 pence each\n    cost_hotdogs = 5 * 81  # 5 hotdogs at 81 pence each\n    cost_drinks = 7 * 20  # 7 drinks at 20 pence each\n    \n    # Sum up the total cost\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n    \n    return total_cost\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assume cost of the metro both ways is x dollars\n    # Assume cost of a cup of coffee is y dollars\n    # Assume cost for entry fee to the game is z dollars\n\n    # We do not have the exact costs, but we will represent them as variables.\n    # total_cost = (number_of_friends + Richard) * (cost_of_metro + cost_of_coffee + entry_fee)\n    # Since we know the total_cost is $40, we represent it as an equation and solve for number_of_friends.\n\n    # For simplicity, assume the combined cost (metro, coffee, entry) for one person is c dollars.\n    # Now we have: 40 = (number_of_friends + 1) * c\n    # Since the question does not provide details of x (metro), y (coffee), and z (entry), \n    # we will consider c as an example variable cost per person.\n\n    # We try different values for c assuming it is the same for Richard and his friends:\n    # Note: c must be a factor of 40 to not have fractional friends.\n    c_values = [factor for factor in range(1, 41) if 40 % factor == 0]\n    \n    # Now we find the maximum number of friends he can treat by finding the \n    # highest number of people he can pay for with his $40, considering himself.\n    max_friends = max([(40 // c) - 1 for c in c_values])\n    \n    return max_friends\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of coins on the table\n    x = symbols('x')\n    \n    # One quarter of the coins are showing heads initially\n    initial_heads = x / 4\n    \n    # After flipping two coins, there are initial_heads + 2 coins showing heads\n    # Now, one third of the coins show heads\n    flipped_heads = initial_heads + 2\n    \n    # Set up the equation where flipped_heads is one third of the total coins\n    equation = Eq(flipped_heads, x / 3)\n    \n    # Solve for x\n    total_coins = solve(equation, x)\n\n    # Return the number of coins on the table\n    return total_coins[0]\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Check each statement one by one under the condition that only one statement is correct\n\n    # If statement 1 is correct, then all statements including this one are correct, which violates the condition\n    statement1 = False\n\n    # If statement 2 is correct, then none of the statements is correct, which contradicts the condition that one statement is correct\n    statement2 = False\n\n    # If statement 3 is correct, then one of the statements above it should be correct. Both statements above are incorrect as analyzed.\n    statement3 = False\n\n    # If statement 4 is correct, then all statements including this one should be correct, which also violates the condition\n    statement4 = False\n\n    # If statement 5 is correct, then none of the statements above it is correct, which is consistent with our analysis above.\n    statement5 = True\n\n    # As there is only one statement that can be correct, which is statement 5\n    # So returning index 5 which is the correct statement\n    return 5\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    singing_shows = 5\n    comedy_shows = 3\n\n    # Calculate the total spaces where we can insert comedy shows\n    total_spaces = singing_shows + 1\n\n    # Calculate the ways to choose spaces for comedy shows such that they are not consecutive\n    ways_to_choose_spaces = factorial(total_spaces) // (factorial(comedy_shows) * factorial(total_spaces - comedy_shows))\n\n    # Finally, calculate the total arrangements\n    total_arrangements = ways_to_choose_spaces * factorial(singing_shows) * factorial(comedy_shows)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    # The number of ways Mike can choose each transportation method\n    num_trains = 4\n    num_cars = 3\n    num_flights = 2\n\n    # The total number of different ways Mike can choose\n    total_ways = num_trains + num_cars + num_flights\n\n    return total_ways\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x / 2 - 9, 12)\n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Define the recurring decimals as a repeating sequence of digits\n    recurring_sequence = '23456789' * (2100 // 9) + '23456789'[:2100 % 9]\n    # Sum the digits of the recurring sequence\n    ans = sum(int(digit) for digit in recurring_sequence)\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert the fractions to decimals\n    decimal_values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    \n    # Sort the list of decimals\n    sorted_values = sorted(decimal_values)\n    \n    # Find the middle value (since there are 5 numbers, the middle one will be at index 2)\n    ans = sorted_values[2]\n\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Let x be the number we are trying to find\n    equation = Eq((5 * x + 7) / 4, 8)  # Translate the word problem into an equation\n\n    solution = solve(equation, x)  # Solve the equation for x\n\n    return solution[0]  # Return the solution\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            ans = chocolates\n            break\n    return ans\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # There are 6 people to be seated around an 8-seater circular table.\n    # If rotating the table results in the same order, we treat them as the same.\n    # Thus, we fix one person and arrange the remaining 5 people around the table\n    # which is (5-1)! = 4! ways.\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    num_quarters = total_dollars * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    even_digits = [digit for digit in digits if int(digit) % 2 == 0]\n    smallest_even_number = float('inf')\n\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            number = int(''.join(perm))\n            if number < smallest_even_number:\n                smallest_even_number = number\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of escalator steps be represented by 's'\n    # Let the speed of the escalator be 'e' steps per second\n    s, e = symbols('s e')\n    \n    # When Peter walks at 1 step per second,\n    # the total steps he takes is his steps plus the escalator steps in 10 seconds\n    equation1 = Eq(s, 10*(1 + e))\n    \n    # When Peter walks at 2 steps per second,\n    # the total steps he takes is his steps plus the escalator steps in 8 seconds\n    # (since he takes 16 steps, and thus 16 seconds minus 8 equals 8 seconds)\n    equation2 = Eq(s, 8*(2 + e))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, e))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    return 45 / 100 * 2000\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_cost = 72  # chocolate bar cost in pence\n    balloon_cost = 20  # cost of each balloon in pence\n    total_paid = 1000  # total amount paid in pence (£10 note)\n    change_received = 388  # change received in pence (£3.88)\n\n    # Calculate the total cost of chocolate bar and balloons\n    total_cost_with_balloons = total_paid - change_received\n\n    # Subtract the cost of the chocolate bar to find the cost of balloons only\n    total_cost_balloons = total_cost_with_balloons - chocolate_cost\n\n    # Divide the cost of balloons by the cost of one balloon to find the number of balloons bought\n    num_balloons = total_cost_balloons // balloon_cost\n\n    return num_balloons\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    expression1 = (4 + 2) * 13\n    expression2 = 4 + (2 * 13)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity_per_kayak = 4\n\n    if students % capacity_per_kayak == 0:\n        kayaks_needed = students // capacity_per_kayak\n    else:\n        kayaks_needed = (students // capacity_per_kayak) + 1\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the age of the youngest be x.\n    # The ages of the youngest three are x, x + 1, x + 2.\n    # Their sum is 3x + 3.\n    # According to the problem, 3x + 3 = 42.\n    # Solve for x:\n    x = (42 - 3) // 3\n\n    # The ages of the oldest three are x + 4, x + 5, x + 6.\n    # Their sum is 3x + 15.\n    # Substitute the solved value of x into this sum:\n    sum_oldest_three = 3 * x + 15\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n    \n    # Assume the cost of one slice of pizza is p and one cupcake is c\n    # 3 slices of pizza is equal to 2 cupcakes: 3p = 2c\n    # Mark bought 5 cupcakes and 6 slices of pizza: 5c + 6p = money_spent\n    # Substitute the price of pizza in terms of cupcakes: 5c + 6*(2c/3) = money_spent\n    # Simplify the equation: 5c + 4c = money_spent\n    # Solve for the cost of one cupcake: c = money_spent / 9\n    \n    cost_per_cupcake = money_spent / 9\n    max_cupcakes = money_left // cost_per_cupcake\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "import math\n\ndef solution():\n    count = 0\n    num = 2\n    while num < 100000:  # Limit the iteration for practical reasons\n        if math.sqrt(num).is_integer():\n            count += 1\n        num = num * 10 + 5  # Generate the next number in the series 2, 25, 255...\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Initial number of pieces of paper\n    initial_pieces = 10\n    # Final number of pieces of paper\n    final_pieces = 16\n    # Each piece cut into three parts results in an increase of 2 pieces\n    increase_per_cut = 3 - 1\n    \n    # Calculate the number of pieces cut\n    pieces_cut = (final_pieces - initial_pieces) / increase_per_cut\n\n    return int(pieces_cut)\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    numbers = [2, 3, 5]\n    perm = permutations(numbers, 3)\n    \n    ans = len(list(perm))\n\n    return ans\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original = 98\n    new = 44.1\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * (1 / 4)\n    non_rotten_apples = total_apples - rotten_apples\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 2240 to get its prime factors\n    factors = factorint(2240)\n    \n    # For 2240/n to be a square number, each prime factor's exponent\n    # in the factorization of n must be an odd number.\n    # This is because 2240 has to be divided by a factor such that\n    # the resulting quotient has each prime factor raised to an even power.\n\n    # Initialize n as 1\n    n = 1\n\n    # For each factor, if the exponent is odd, multiply n by that factor\n    for prime, exp in factors.items():\n        if exp % 2 == 1:\n            n *= prime\n    \n    return n\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Given that 6 workers can produce 120 parts in 4 minutes,\n    # find the number of parts produced by 1 worker in 4 minutes\n    parts_per_worker_in_4_min = 120 / 6\n    \n    # Now, find the number of parts produced by 1 worker in 1 minute\n    parts_per_worker_in_1_min = parts_per_worker_in_4_min / 4\n    \n    # Given that 3 workers can produce the parts for a machine in 10 minutes,\n    # find the number of parts produced by 1 worker in 10 minutes\n    parts_per_worker_in_10_min = parts_per_worker_in_1_min * 10\n    \n    # Now, total parts in the machine produced by 3 workers in 10 minutes\n    # will be the production of 1 worker in 10 min multiplied by the number of workers\n    total_parts = parts_per_worker_in_10_min * 3\n    \n    return total_parts\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n    increase = new - original\n    percent_increase = (increase / original) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimmers = total_pupils * 0.70\n    non_swimming_boys_percentage = 0.40\n    swimming_girls = 200\n    \n    # Since 70% can swim and we have 200 swimming girls, the boys who can swim are:\n    swimming_boys = swimmers - swimming_girls\n    \n    # Boys who cannot swim is 40% of all boys, let b be the number of boys\n    # swimming_boys = 0.6 * b (since 60% of boys can swim)\n    # swimming_boys / 0.6 = b (the total number of boys in school)\n    boys = swimming_boys / 0.6\n    \n    # Rest of the pupils are girls\n    girls = total_pupils - boys\n    \n    return int(girls)\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n    \n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n    \n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n    \n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation for the total sugar from both types of water\n    # 4 kg of 30% sugar water + x kg of 10% sugar water = (4+x) kg of 26% sugar water\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve for x\n    sugar_water_amount = solve(equation, x)\n\n    return sugar_water_amount[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    discounted_price = 32 - 4\n    total_discount = original_price - discounted_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - a - b + 1\n\n    first_part = new_operation(2, 3)\n    ans = new_operation(first_part, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Since the corners are planted and part of the count, we can consider them as starting points\n    # The total length of the sides is the perimeter subtracting the four corners\n    perimeter_without_corners = (144 * 2 + 204 * 2) - 4\n    \n    # The actual number of spaces between wheat is 116 total wheat - 1 for each corner\n    num_spaces_between_wheat = 116 - 4\n    \n    # Distance between each wheat is total length of sides without corners divided by the spaces between them\n    distance = perimeter_without_corners / num_spaces_between_wheat\n    \n    return distance\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    mass_with_5_chocolates = 185\n    mass_with_17_chocolates = 317\n    mass_difference = mass_with_17_chocolates - mass_with_5_chocolates\n    chocolates_difference = 17 - 5\n\n    mass_per_chocolate = mass_difference / chocolates_difference\n    mass_of_empty_jar = mass_with_5_chocolates - (5 * mass_per_chocolate)\n    \n    mass_with_10_chocolates = mass_of_empty_jar + (10 * mass_per_chocolate)\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    number = 200\n    count = 0\n    for parts in range(2, number + 1):\n        if number % parts == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Since one cat takes 10 minutes to catch a fish,\n    # 5 cats can catch 5 fish in the same amount of time,\n    # because they can work simultaneously.\n    return 10\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Lana and Mark's initial amount of sweets\n    lana, mark = symbols('lana mark')\n\n    # Equation 1: The sum of Lana and Mark's sweets\n    equation_sum = Eq(lana + mark, 674)\n\n    # Equation 2: After Lana gave away 1/3 of her sweets and Mark ate 34 sweets,\n    # they had the same number of sweets\n    equation_same = Eq(lana - lana / 3, mark - 34)\n\n    # Solve the system of equations\n    solutions = solve((equation_sum, equation_same), (lana, mark))\n\n    # Calculate the difference in the initial number of sweets Lana had more than Mark\n    difference = solutions[lana] - solutions[mark]\n\n    # Return the difference\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    # Let x be the number of stickers Timmy has.\n    # Then Dorothy has 8 * x stickers, which is given to be 96.\n    # Dorothy's stickers / 8 = Timmy's stickers\n    timmys_stickers = 96 / 8\n\n    # Kevin has 45 more stickers than Timmy, so Kevin's stickers = Timmy's stickers + 45.\n    kevins_stickers = timmys_stickers + 45\n\n    return int(kevins_stickers)\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    summer_camp_days = 2 * 7  # 2 weeks in days\n    time_after_friends_house = summer_camp_days + 4  # 4 days at the friend's house\n    total_time = time_after_friends_house * 4  # The rest of the time is half of the remaining time, so multiply by 4\n    return total_time\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total perimeter of the rectangular field\n    perimeter = 2 * (144 + 204)\n    \n    # Total number of wheat minus the corners (1 at each of the 4 corners)\n    wheat_along_sides = 116 - 4\n    \n    # The distance between each 2 wheat is the total perimeter divided by the number of spaces\n    # Number of spaces between wheat is one less than number of wheat along sides\n    distance_between_wheat = perimeter / wheat_along_sides\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    initial_number = (result / 9) * 4 - 3\n    return initial_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remaining_bracelets\n    made_bracelets = morning_bracelets + afternoon_bracelets\n\n    more_bracelets_needed = total_bracelets - made_bracelets\n\n    return int(more_bracelets_needed)\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, pineapple = symbols('watermelon pineapple')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n    \n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    together_weeks = 4\n\n    together_rate = total_people / together_weeks\n    gloria_rate = together_rate - ellie_rate\n\n    gloria_weeks = total_people / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3 / 8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 0.28 * total_weight\n    rice_in_A = 0.40 * 15\n\n    rice_in_B = total_rice - rice_in_A\n    percent_rice_in_B = (rice_in_B / 60) * 100\n\n    return percent_rice_in_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    for largest in range(51, 0, -1):\n        other_three_avg = 51 - largest\n        total_of_three = other_three_avg * 3\n        smallest = 39 - other_three_avg\n        if smallest < 1:\n            continue\n        middle_two_sum = total_of_three - smallest\n        middle_first = (middle_two_sum - 1) // 2\n        if middle_first * 2 + 1 == middle_two_sum and middle_first > smallest:\n            return largest\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    for A in range(10):\n        for B in [2]:  # B is given as 2\n            for C in range(10):\n                for D in [0]:  # D is given as 0\n                    for E in range(10):\n                        for F in range(10):\n                            if len(set([A, B, C, D, E, F])) == 6: # all digits are distinct\n                                number1 = int(f\"{A}{B}{C}{D}{E}{F}\")\n                                number2 = int(f\"{E}{F}{A}{B}{C}{D}\")\n                                if 5 * number1 == 6 * number2:\n                                    return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    time_in_minutes = 2 * 60  # converting 2 hours into minutes\n\n    total_leakage = leak_rate_per_minute * time_in_minutes  # total leakage in milliliters\n\n    total_leakage_in_litres = total_leakage / 1000  # converting milliliters to litres\n\n    return total_leakage_in_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_apart = 10\n    ans = (road_length // distance_apart) + 1\n    return ans\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = (2 * 10) + (5 * 5) + (4 * 0.20)\n    money_spent = 100 - total_change\n    return money_spent\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Speed difference between Barbara and Catherine\n    speed_difference = 60 - 45  # in metres per minute\n\n    # Since Barbara has finished the distance and Catherine still has 60 metres to go,\n    # the time they walked is the same.\n    # The distance that Catherine is behind (60 metres) can be covered by the speed difference\n    # in the same amount of time.\n\n    # Time taken for Barbara to reach the shopping mall (which is the same time Catherine has walked)\n    time_taken = 60 / speed_difference\n\n    # Total distance Barbara walked (which will be the same distance to the shopping mall from the starting point)\n    distance = time_taken * 60  # Barbara's speed multiplied by the time taken\n\n    return distance\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n\n    solutions = solve(equation, x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    plates_fried = total_time // time_per_plate\n    return plates_fried\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # Total sum of money\n    equation1 = Eq(A + B + C, 200)\n    \n    # Ratio of A's total to B's total is 4:3\n    equation2 = Eq(A, 4/7 * (A + B))\n    \n    # A has 20 more than C\n    equation3 = Eq(A, C + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            students_facing_teacher -= 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * (2 / 5)\n    remaining_after_first_day = total_pears - first_day_sold\n    second_day_sold = remaining_after_first_day * (7 / 9)\n\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Nini's age and Dad's age\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Create the equations based on the problem\n    eq1 = Eq(dad_age, nini_age + 25)                # Dad is 25 years older than Nini\n    eq2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)   # After 5 years, Dad's age will be 8 less than twice Nini's age\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (nini_age, dad_age))\n\n    # Solution for Nini's age\n    return solution[nini_age]\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick_leads = boys * girls\n    \n    return ways_to_pick_leads\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if num != reversed_num and isprime(reversed_num):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original = 140\n    new = 87.5\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic goes to three fixed bars at random,\n    # and he is not at two of the bars, he must be at the third bar.\n    # Hence, the probability is 100% or 1.\n    return 1\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Define the variables\n    students, apples = symbols('students apples')\n\n    # Expression for total students using the apples given (with at least one student getting at least 3 apples)\n    # Pigeonhole Principle indicates that at least one student will get more apples if\n    # number of students is less than or equal to apples - 2\n    equation = Eq(students, apples - 2)\n\n    # Solve for the number of students when apples is 29\n    num_students = solve(equation.subs(apples, 29), students)\n\n    return num_students[0]\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    for blue_balls_initial in range(1, 140):\n        green_balls_initial = 140 - blue_balls_initial\n        removed_blue_balls = 2 / 5 * blue_balls_initial\n        remaining_blue_balls = blue_balls_initial - removed_blue_balls\n        remaining_green_balls = green_balls_initial - 28\n\n        if remaining_blue_balls == remaining_green_balls:\n            return int(blue_balls_initial)\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_future_age = solutions[cousin] + 4\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    tagged_first_catch = 100\n    total_second_catch = 100\n    tagged_second_catch = 16\n\n    estimated_fish_population = (tagged_first_catch * total_second_catch) / tagged_second_catch\n    \n    return estimated_fish_population\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance Nancy walked when they meet\n    nancy = symbols('nancy')\n    \n    # Since Randy walks 10 metres more than Nancy, he walks x + 10 metres\n    randy = nancy + 10\n    \n    # Set up the equation based on the proportions they walk (2m for Nancy is 3m for Randy)\n    equation = Eq(2 * nancy, 3 * (randy - 10))\n    \n    # Solve the equation\n    nancy_distance = solve(equation, nancy)[0]\n    randy_distance = nancy_distance + 10\n    \n    # The total distance between them is the sum of the distances they each walked\n    total_distance = nancy_distance + randy_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n    \n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    return solutions[charlie]\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be represented as r\n    r = 0.201414141414...\n\n    # Multiply r by 100 to shift the digits two places to the left\n    # so that the repeating part aligns\n    # 100r = 20.1414141414...\n    # r = 0.201414141414...\n    # Subtract the second equation from the first to get an equation without a repeating decimal\n    # 99r = 20.1414141414... - 0.201414141414...\n    # 99r = 19.94\n    # r = 19.94 / 99\n    r = 19.94 / 99\n\n    # We know that x / 9900 = r, therefore, x = r * 9900\n    x = r * 9900\n\n    # Making sure we return a whole number since floats might introduce precision errors\n    return int(round(x))\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator_1 = (1 * 99 + 3) / 99\n    numerator_2 = (3 * 33 + 3) / 33\n    numerator_3 = (9 * 11 + 3) / 11\n    denominator_1 = (1 * 99 + 1) / 99\n    denominator_2 = (3 * 33 + 1) / 33\n    denominator_3 = (9 * 11 + 1) / 11\n\n    # Summing up the numerators and denominators\n    total_numerator = numerator_1 + numerator_2 + numerator_3\n    total_denominator = denominator_1 + denominator_2 + denominator_3\n\n    # Calculating the result\n    ans = total_numerator / total_denominator\n\n    return ans\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        modified_num = int(str(2) + str(num)[:-1])\n        if modified_num == num // 3:\n            return num\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister now\n    equation2 = Eq(alice + sister + 20, 53)  # In 10 years, their combined age is 53\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000, 2):  # iterate through even numbers from 100 to 999\n        digits = [int(d) for d in str(i)]\n        if sum(digits) == 8 and len(set(digits)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    first_exam_passed = 25\n    second_exam_failed = 12\n    second_passed_first_failed = 3\n\n    # Calculate the number of students who passed both exams\n    both_passed = first_exam_passed - second_passed_first_failed\n\n    # Calculate the number of students who failed the first exam\n    first_exam_failed = total_students - first_exam_passed\n\n    # Calculate the number of students who passed just the second exam\n    just_second_passed = second_exam_failed - first_exam_failed\n\n    # Calculate the number of students who passed only the first exam\n    only_first_passed = total_students - both_passed - just_second_passed - second_passed_first_failed\n\n    return only_first_passed\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences according to given conditions\n    congruences = [(3, 5), (6, 8), (7, 9)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    sol, mod = solve_congruence(*congruences)\n\n    # Find the smallest solution within the given range\n    while sol < 500:\n        sol += mod\n\n    return sol\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n    remainder = total_cereal_bars % people\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit appears twice in each position (hundreds, tens, ones)\n    sum_of_digits_each_position = 2 * (a + b + c)\n\n    # The final sum is the sum of all permutations\n    # with each digit occurring in each place value (hundred, ten, one) twice\n    ans = sum_of_digits_each_position * (100 + 10 + 1)\n\n    return ans\n\n# Assuming a, b, and c are given numbers.\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_for_300 = 300 / rate_per_hour\n    return hours_for_300\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # Start from 1 because 'a' is the tens digit\n        for b in range(10):  # 'b' is the ones digit, can be 0-9\n            num = a * 10 + b  # Constructing the number 'ab'\n            rev_num = b * 10 + a  # Constructing the number 'ba'\n            product = num * rev_num\n            if product % 100 == 0:  # Checking if the ones and tens digit is 0\n                return num  # Return the smallest number that satisfies the condition\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    small_sack, large_sack = symbols('small_sack large_sack')\n    \n    # Large sack holds 20% (0.20) more potatoes than the small sack\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    # One large sack and one small sack together contain 77 potatoes\n    equation2 = Eq(large_sack + small_sack, 77)\n    \n    # Now solve the system of equations\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Equation representing the total of oranges and apples\n    equation1 = Eq(oranges + apples, 125)\n    \n    # Equation representing the condition after selling\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity_per_cabin = 6\n    min_cabins = (students + capacity_per_cabin - 1) // capacity_per_cabin\n    return min_cabins\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first 5-digit palindrome).\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome is 999999 (the last 6-digit palindrome).\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference between the greatest 6-digit palindrome and \n    # the least 5-digit palindrome.\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    digits = 0\n    for i in range(1, 59):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    right_of_picture_book = 6\n    position_from_left = 14\n\n    total_books = position_from_left + right_of_picture_book\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    multiples_of_five = [x for x in range(5, 51, 5)]\n    return sum(multiples_of_five)\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n\n    # One quarter of the coins are showing heads initially.\n    initial_heads = coins / 4\n    \n    # Two more coins are turned over, so heads become initial_heads + 2\n    # and that is one third of the total coins.\n    final_heads = initial_heads + 2\n\n    equation = Eq(final_heads, coins / 3)\n\n    # Solve for the number of coins\n    solutions = solve(equation, coins)\n\n    # Only consider the positive integer solution\n    ans = next(sol for sol in solutions if sol.is_integer and sol > 0)\n\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    number = 1200\n    \n    while number > 0:\n        if total_digits >= 2011:\n            break\n        digits_in_number = len(str(number))\n        total_digits += digits_in_number\n        number -= 1\n\n    # After exiting the loop, the total_digits is the accumulated digit count.\n    # The next step is to identify the exact digit that is the 2011th from the right.\n    remaining_digits = total_digits - 2011\n    number += 1  # Since the loop decreased by 1 extra\n    # Now, number is the number where the 2011th digit from the right is\n    \n    str_number = str(number)\n    ans = int(str_number[::-1][remaining_digits])  # Get digit by indexing in the reversed string\n\n    return ans\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # in km per minute\n    speed_planet2 = 40  # in km per minute\n    time = 5  # in minutes ago\n\n    # Calculate the distance travelled by each planet in 5 minutes\n    distance_travelled_by_planet1 = speed_planet1 * time\n    distance_travelled_by_planet2 = speed_planet2 * time\n\n    # The total distance apart 5 minutes ago is the sum of the distances travelled by both planets\n    total_distance_apart = distance_travelled_by_planet1 + distance_travelled_by_planet2\n\n    return total_distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    total_vehicles = 140\n    total_tyres = 490\n    # Let c be the number of cars and b be the number of motorbikes.\n    for c in range(total_vehicles + 1):\n        b = total_vehicles - c\n        # Each car has 4 tyres and each motorbike has 2 tyres.\n        if 4 * c + 2 * b == total_tyres:\n            return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # The first digit can be one out of 5 options (1, 2, 3, 4, 5)\n    # since it cannot be 0 for two-digit numbers.\n    first_digit_options = 5\n    \n    # The second digit can be one of 6 options (0, 1, 2, 3, 4, 5)\n    # since it can be 0 here.\n    second_digit_options = 6\n    \n    # The total number of two-digit numbers is the product of the\n    # number of options for the first and second digits.\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.2\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    apple_ratio = 4\n    orange_ratio = 5\n    total_ratio = apple_ratio + orange_ratio\n\n    apple_juice = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    for divisor in range(1, 101):  # The divisor must be less than 101 as per the given conditions\n        if 190 % divisor == 137 % divisor == 101 % divisor + 2:\n            return 299 % divisor\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n    \n    initial_number = (result - added_number) / 2\n    return initial_number\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    effective_distance = day_climb - night_slide\n\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    for number in range(1, 2*13):\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for x in range(2, 200):  # Start at 2 since 1 is not a prime number\n        if all(x % i != 0 for i in range(2, int(x**0.5) + 1)):  # Check if x is prime\n            y = 200 - x\n            if x * (2 + y) == 200 + y and y > 1 and all(y % i != 0 for i in range(2, int(y**0.5) + 1)) and x != y:  # Check if y is prime and different from x\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_numbers = 6\n    num_2s = 2\n    num_3s = 2\n    # Since there is only one '4' and one '5', we don't count them explicitly\n\n    # Calculate the number of permutations with duplicates\n    permutation_with_duplicates = factorial(total_numbers) \\\n                                  // (factorial(num_2s) * factorial(num_3s))\n\n    return permutation_with_duplicates\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Given that 2p is one-quarter of her money, let's denote her total money as x.\n    # Therefore, by the problem statement, we have x/4 = 2p\n    # To find the total money (x), we multiply both sides by 4.\n    \n    total_money = 2 * 4  # Multiplying by 4\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    num_rounds = num_teams * (num_teams - 1) // 2\n    return num_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "网络故障，请重试"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]  # indexing starts from 0\n    return int(fifth_number)\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n\n    # Sum of the two numbers\n    sum_nums = num1 + num2\n\n    # Sum of the fractions in the divisor\n    sum_div = Fraction(1, 6) + Fraction(1, 5)\n\n    # Division of the two sums\n    result = sum_nums / sum_div\n\n    return result\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    one_day_work = 1000 / 5\n    total_days = 2600 / one_day_work\n    return total_days\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time_original = 5\n    time_new = 3\n\n    speed = distance / time_original\n    distance_new = speed * time_new\n\n    return distance_new\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees.\n    intervals = 30 - 1\n\n    # Length of each interval is 5 meters.\n    interval_length = 5\n\n    # Total length of the road is the product of the number of intervals and the length of each interval.\n    road_length = intervals * interval_length\n\n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle = symbols('triangle')\n    \n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    total_numbers = 90 - 12 + 1  # Counting from 12 to 90 inclusive\n    if total_numbers % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    result = 1\n    for i in range(2, 10):\n        result *= Fraction(1, i) + Fraction(1)\n    return float(result)\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let the numbers on the hats be a, b, and c.\n    # The totals are: a+b, a+c, and b+c.\n    # We have the equations:\n    # a + b = 11\n    # a + c = 17\n    # b + c = 22\n\n    # Adding all three, we get 2*(a + b + c) = 11 + 17 + 22\n    # Solving for a + b + c:\n    total = (11 + 17 + 22) // 2\n    \n    # The largest number on a hat would be total - the smallest total of the other two hats.\n    # Since a + b is the smallest total (11), the largest number on a hat is total - 11.\n    ans = total - 11\n\n    return ans\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 346):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n\n    singles_share = total_prize / 5\n    doubles_share = total_prize / 15\n\n    equation = Eq(singles_share + doubles_share, 360)\n\n    total_prize_money = solve(equation, total_prize)\n\n    return total_prize_money[0]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for speed during the first 30 minutes\n    x = symbols('x')\n    \n    # Calculate distance covered in each interval\n    # d = r * t; using the formula for speed (r = d/t), where t is time in hours\n    d1 = x * (30/60)       # distance covered in the first 30 minutes\n    d2 = (x - 20) * (30/60) # distance covered in the second 30 minutes\n    d3 = (x + 10) * (30/60) # distance covered in the last 30 minutes\n\n    # Sum of distances is equal to the total distance driven: d1 + d2 + d3 = 70 miles\n    equation = Eq(d1 + d2 + d3, 70)\n\n    # Solve the equation to find x\n    solution = solve(equation, x)\n\n    # Return the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    # if the staff gives 3 fish to each penguin, there will be 25 fish left\n    # if the staff gives 6 fish to each penguin, only one fish is left.\n    remaining_fish_3 = 25\n\n    # let the total number of fish be denoted by `total_fish`\n    # let the number of penguins be denoted by `penguins`\n    # when giving 3 fish per penguin, there is a total of `penguins * 3 + 25 = total_fish`\n    # when giving 6 fish per penguin, there is a total of `(penguins - 1) * 6 + 1 = total_fish`\n    # equating the two expressions, since `total_fish` remains constant:\n    # penguins * 3 + 24 = (penguins - 1) * 6\n    # solve for penguins:\n    penguins = symbols('penguins')\n    equation = Eq(penguins * 3 + 24, (penguins - 1) * 6)\n    solution = solve(equation, penguins)\n\n    # return the total number of penguins\n    return solution[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    ans = (-0.512)**(1/3) + (-1.2)**2\n    return ans\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # The coach has a fixed position in the middle\n    # The captain has two possible places to stand; either left or right to the coach\n    captain_positions = 2\n\n    # The remaining positions can be filled by any of the remaining 5 players\n    remaining_positions = factorial(5)\n\n    # The total number of different ways the team can line up\n    total_ways = captain_positions * remaining_positions\n\n    return total_ways\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum = 0\n    for n in range(1, 31):\n        sum += n * (n + 1) // 2\n    return sum - ((n * (n + 1) // 2) - 30)\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    sum_of_parts = (0.25 * 20) + (1/5 * 30) + (2/3 * 18)\n    return sum_of_parts\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let the side length of the square array be k\n    # For each complete layer, there are 4 rows of boys or girls\n    # (except the first layer which has four sides, and last layer which might have 1 or 4 sides)\n    # The difference between boys and girls will be 8 for each layer (4 sides of boys, 4 less sides of girls)\n    # So we need to find k such that the number of complete layers of boys minus that of girls is 20/8 = 2.5 layers\n    # This means we are looking for a k that when squared, it gives a number with last digit either 0 or 5,\n    # because only then the difference between the number of boys and girls would be 20.\n    # As we square those numbers and check for a difference of 20.\n\n    k = 1  # start with the smallest square size\n    while True:\n        boys = 0\n        girls = 0\n        for i in range(1, k + 1, 2):\n            boys += i * i  # squared side length for boys\n        for j in range(2, k, 2):\n            girls += j * j  # squared side length for girls\n\n        if boys - girls == 20:\n            return boys + girls  # total number of students\n        k += 1\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    cindy_votes = 47\n    highest_other_votes = 41\n    votes_needed = highest_other_votes - cindy_votes + 1\n    return votes_needed\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Chelsia's and Brian's money\n    chelsia, brian = symbols('chelsia brian')\n\n    # Equation based on the given information\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve for both Chelsia and Brian\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money\n    total = solutions[chelsia] + solutions[brian]\n\n    return total\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n\n    # James's age on 10th May 1997\n    james_age_1997 = 20\n\n    # Difference in years between 1997 and 2005\n    year_diff = 2005 - 1997\n\n    # Gina's age when James was born (8 years before 1997)\n    gina_age_when_james_born = gina_age_2005 - (james_age_1997 + year_diff)\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Step 1: Evaluate the first fraction\n    numerator_1 = 7 / (-3.3333333333333335)  # As -3.3333333333333333 is the decimal equivalent of -3.(3)\n    denominator_1 = (-0.027) ** (1/3)       # Cube root of -0.027\n    fraction_1 = numerator_1 / denominator_1\n\n    # Step 2: Evaluate the second fraction\n    numerator_2 = 2 ** 3 / 4 ** 2           # 2 to the power 3 divided by 4 to the power 2\n    denominator_2 = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times [...] \n    fraction_2 = numerator_2 / denominator_2\n\n    # Step 3: Evaluate the expression in the brackets\n    # Since 0.142857 is the decimal representation of 1/7, we represent it as 1/7\n    expression_brackets = (0.1 / (1/7)) + (2 * 0.3)\n\n    # Step 4: Calculate the entire expression\n    ans = fraction_1 + fraction_2 - expression_brackets\n\n    return ans\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ryan, audrey = symbols('ryan audrey')\n    \n    # Original ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    \n    # New ratio after Ryan bought 20 and Audrey gave away 80 marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sales = symbols('sales')\n\n    base_salary = 2500\n    salary = 3300\n    commission_1_rate = 0.02\n    threshold = 25000\n    commission_2_rate = 0.05\n\n    # Condition 1: sales up to 25000 (commission is 2% of sales)\n    equation1 = Eq(base_salary + commission_1_rate * sales, salary)\n    # Condition 2: sales over 25000 (commission is 2% of first 25000, 5% of the rest)\n    equation2 = Eq(base_salary + commission_1_rate * threshold + commission_2_rate * (sales - threshold), salary)\n\n    # Solve the equations with the given conditions\n    possible_sales_1 = solve(equation1, sales)\n    possible_sales_2 = solve(equation2, sales)\n\n    # Choose the correct sales amount (should be a positive real number)\n    sales_amount = 0\n    for value in possible_sales_1 + possible_sales_2:\n        if value.evalf() > 0 and value.is_real:\n            sales_amount = value\n            break\n\n    return sales_amount\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digit_count = 0\n\n    while digit_count < digits:\n        pages += 1\n        digit_count += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Let x be the total height of the four players\n    # Average height of the team is 150 cm, so the total height of the team is 6 * 150\n    team_total_height = 6 * 150\n    # Average height of the four players is 150 - 2\n    four_players_average = 150 - 2\n    # Total height of the four players is 4 * (150 - 2)\n    four_players_total_height = 4 * four_players_average\n    # Total height of the other two players is the difference\n    other_two_players_total_height = team_total_height - four_players_total_height\n    # The average height of the other two players is their total height divided by 2\n    other_two_players_average = other_two_players_total_height / 2\n    return other_two_players_average\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    sum_of_terms = num_terms/2 * (2*first_term + (num_terms-1)*common_difference)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    hours_needed = total_pieces / rate_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt is 0.4\n    p_first = 0.4\n    # Probability of failing the first and passing the second is (1 - 0.4) * 0.5\n    p_second = (1 - p_first) * 0.5\n    # Probability of failing the first two and passing the third is (1 - 0.4) * (1 - 0.5) * 0.3\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n    \n    # Total probability of passing before the fourth attempt is the sum of the three scenarios\n    total_p = p_first + p_second + p_third\n    \n    return total_p\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_second_student = 0\n    total_apples = 48\n\n    for a in range(1, total_apples - 3):\n        for b in range(a + 1, total_apples - 2):\n            for c in range(b + 1, total_apples - 1):\n                d = total_apples - (a + b + c)\n                if d > c:\n                    max_apples_second_student = max(max_apples_second_student, b)\n\n    return max_apples_second_student\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    students_difference = 44\n    total_students = 0\n\n    for layer in range(1, 100):  # We start with layer 1 assuming it's plausible the number of layers won't exceed 100\n        boys = (layer * 2) * (layer * 2) \n        girls = ((layer - 1) * 2) * ((layer - 1) * 2) if layer > 1 else 0\n        if boys - girls == students_difference:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climb = 18\n    daily_climb = 7\n    days_passed = 5\n    climbed_on_6th = 3\n\n    # On the 6th day, its climb is only 3 metres\n    climb_until_5th = (days_passed - 1) * daily_climb + climbed_on_6th \n    # Remaining climb on the 5th night\n    remaining_climb_on_5th = total_climb - climb_until_5th\n    \n    # Since it reaches the top on the 6th day, it does not slide down, so we calculate the slide using the remaining climb.\n    slide_down = daily_climb - remaining_climb_on_5th \n\n    return slide_down\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq((age / 4) + 32, age - 22)\n\n    sol = solve(equation, age)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Times each person takes to cross the river\n    eddie, jack, rose, mary = 1, 2, 5, 10\n\n    # Steps to get the shortest time:\n    # 1. Eddie takes Jack across, Eddie returns - 2 + 1 = 3 minutes\n    # 2. Mary and Rose cross, Jack returns - 10 + 2 = 12 minutes\n    # 3. Eddie takes Jack across again - 2 minutes\n    # Total time = 3 + 12 + 2 = 17 minutes\n\n    total_time = eddie + (eddie + jack) + (mary + min(eddie, jack)) + jack\n    return total_time\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 2):\n        ans += i ** 2 - (i + 1) ** 2\n    return ans\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Original length and width of the rectangle\n    length, width = symbols('length width')\n    \n    # If you increase the length by 12 cm\n    increased_length = length + 12\n    \n    # Perimeter of the rectangle with increased length\n    new_perimeter_eq = Eq(2 * increased_length + 2 * width, 38)\n    \n    # Solve for the width based on the new perimeter\n    solutions = solve(new_perimeter_eq, width)\n    \n    # There should be only one solution for width\n    width = solutions[0]\n    \n    # Original perimeter based on the original width and length\n    original_perimeter_eq = Eq(2 * length + 2 * width)\n    \n    # Evaluated original perimeter\n    original_perimeter = original_perimeter_eq.lhs.subs(width, solutions[0])\n    \n    return original_perimeter\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    num = 2 ** 19 - 1\n    remainder = num % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 1 and number % 4 == 1:\n            return number\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    num_students = 4\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    people = 7\n    # The circular permutation formula for (n-1)! is used since rotations are considered the same.\n    ans = factorial(people - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Let's denote chocolate as C, peaches as P and strawberries as S.\n    ways = 0  # Initialize the number of ways.\n    \n    for day2 in ['P', 'S']:  # Jenny can choose either peaches or strawberries on the second day.\n        for day3 in ['P', 'S']:  # Jenny can again choose either peaches or strawberries on the third day.\n            if day2 != day3:  # Jenny doesn't eat the same food on adjacent days.\n                ways += 1  # Increment the number of ways.\n    \n    return ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Every unique pair (x, y) such that x + y = 8 and x < y can be represented by x.\n    # Because x has to be positive, x can be at minimum 1.\n    # Because x < y, the maximum value for x is (8 - 1) // 2, as any higher would make y not greater than x.\n    max_x = (8 - 1) // 2\n    # The number of solutions is just the number of valid x's.\n    return max_x\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    money_left = 160\n    money_spent_on_table_fraction = 3 / 4\n    remaining_after_tv_fraction = 1 - 5 / 9\n\n    remaining_after_tv = money_left / (1 - money_spent_on_table_fraction)\n    initial_salary = remaining_after_tv / remaining_after_tv_fraction\n    cost_of_tv = initial_salary - remaining_after_tv\n\n    return cost_of_tv\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6  # From Monday to Saturday is 6 days\n\n    total_earnings = average_earnings_per_day * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    # The number of triangles formed by choosing any 3 points out of 15 non-collinear points\n    # can be calculated using combination formula C(n, k) = n! / (k! * (n-k)!)\n    # Here, n = 15 (total points) and k = 3 (points needed for a triangle)\n    \n    number_of_triangles = comb(15, 3)\n    return number_of_triangles\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, emma = symbols('john emma')\n\n    # In 3 years' time, the sum of the ages of John and Emma will be 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n    # Emma’s age is the difference between her own and John’s ages\n    equation2 = Eq(emma, john - emma)\n\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed in km per hour\n    tom_speed = 48\n    # Jack's speed in km per hour\n    jack_speed = 50\n    # Jack starts 3 hours after Tom\n    jack_delay = 3\n    # Five more hours of travel before they are 15 km apart\n    additional_time = 5\n    \n    # In the time Jack has been driving, Tom has traveled for jack_delay + additional_time hours.\n    tom_travel_time = jack_delay + additional_time\n    \n    # Calculate the distance Tom has driven\n    distance_tom = tom_speed * tom_travel_time\n    \n    # Calculate the distance Jack has driven\n    distance_jack = jack_speed * additional_time\n    \n    # Since they are 15 km apart after these times, add this to the distance Jack has driven\n    total_distance = distance_tom + distance_jack + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n\n    # Each child has 2 legs, each dog has 4 legs\n    # There are 3 times as many dogs as children\n    # The total number of legs is 56\n    equation1 = Eq(dogs, 3 * children)\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) // 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    present_fraction = 3 / 5  # Since 2/5 are absent, 3/5 are present.\n\n    total_pupils = present_pupils / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    from math import pi\n    # Since Water section has 36 degrees in the pie chart, it corresponds to 36/360 of the total\n    water_fraction = 36 / 360\n\n    # Let the total number of people be x\n\n    # According to the problem:\n    # (1/4) * x chose tea\n    # 7 people chose coffee\n    # (30/100) * x chose cola\n    # water_fraction * x chose water\n\n    # Summing up all the fractions of people who chose something we get:\n    # (1/4) * x + 7 + (30/100) * x + water_fraction * x = x\n    # Combining terms and factoring out x:\n    # x * (1/4 + 30/100 + water_fraction) + 7 = x\n    # x * (1/4 + 3/10 + 1/10) + 7 = x\n    # x * (6/10 + 1/10) + 7 = x\n    # x * (7/10) + 7 = x\n\n    # Solving for x:\n    x = 7 / (1 - 7/10)\n\n    return int(x)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10 ** 5) / (5 ** 5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    # Using the distributive property of multiplication over addition:\n    # a*7 + b*7 = (a + b)*7\n    a = 4\n    b = 5\n    \n    # Calculate Z by summing a and b\n    Z = a + b\n    \n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36\n    height_cm = height_m * 100\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_rate = 0.03\n    tax_amount = initial_income * tax_rate\n    final_income = initial_income - tax_amount\n    return final_income\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare variables for the number of cookies baked on Saturday and Sunday\n    saturday, sunday = symbols('saturday sunday')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(saturday, 4 * sunday - 5)  # Judy baked 5 less than four times the number of cookies on Sunday\n    equation2 = Eq(saturday, sunday + 43)     # She baked 43 more cookies on Saturday than on Sunday\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # For rectangular paths the formula for the trees is:\n    # Trees in length sides: (length/spacing)*2 (both lengths)\n    # Trees in width sides: (width/spacing - 1)*2 (both widths, minus 1 at each to not double count the corners)\n    # The -1 is important as the corners are to be considered only once.\n    trees_length = (length // spacing) * 2\n    trees_width = ((width // spacing) - 1) * 2\n    \n    total_trees = trees_length + trees_width\n    return total_trees\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for x in range(1, 10000):\n        original_number = x * 10 + 9\n        new_number = int(str(9) + str(x))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_mixture_ml = 750 * (1 + 9)  # total volume of the mixture (squash and water combined)\n    bottle_ml = 1000  # volume of one bottle in millilitres\n\n    num_bottles = total_mixture_ml // bottle_ml  # greatest number of complete bottles that can be filled\n    \n    return int(num_bottles)\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Initialize the count of possibilities to zero\n    count = 0\n    \n    # Iterate over possible numbers of adult tickets (at least 2)\n    for adults in range(2, 110 // 20 + 1):\n        # Calculate the remaining cost after buying adult tickets\n        remaining_cost = 110 - (adults * 20)\n        # If the remaining cost is non-negative and divisible by the children ticket price, increment the count\n        if remaining_cost >= 0 and remaining_cost % 15 == 0:\n            count += 1\n            \n            # Since we only need the number of children for the first valid case\n            children = remaining_cost // 15\n            break\n            \n    return children\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    last_digits = (6 ** 2015 + (2015 * 6) + 2015 ** 6) % 100\n    return last_digits\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n    \n    B, D = 2, 0\n    for perm in permutations('123456789', 4):\n        \n        A, C, E, F = map(int, perm)\n        \n        if E == 0:  # leading zero in EFABCD is not allowed\n            continue\n\n        ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n        EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n\n        if 5 * ABCDEF == 6 * EFABCD:\n            return A*1000 + C*100 + E*10 + F\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 1/2\n    total_cost = 132\n\n    # Correct calculation:\n    # Li Yan spends 1/3 on a book, so she has 2/3 left.\n    # She then spends 1/2 of the remainder (which is 2/3) on the bag.\n    # The cost of the bag is thus 1/2 of 2/3 of her total money, or (1/2)*(2/3) = 1/3 of her total money.\n    # So, the cost of the book and bag combined is 1/3 + 1/3 = 2/3 of her total money.\n\n    # 2 units (for book and bag) = $132\n    # 1 unit = $132 / 2\n    one_unit_cost = total_cost / (book_fraction + bag_fraction / (1 - book_fraction))\n\n    # 3 units (total money) = 1 unit * 3\n    original_money = one_unit_cost * 3\n    return original_money\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    factors = [1, 2, 4, 7, 8]\n    # find the largest already-given factor (which is not necessarily the largest factor)\n    largest_given_factor = max(factors)\n    # find the number by multiplying the largest given proper factor by the second largest\n    # This works because the factors of a number are symmetric around the square root. \n    # Given that there are 8 factors, the number must be a square or a product of two primes.\n    # We already know two primes here, so we assume this number is a product of 2 and 7.\n    number = largest_given_factor * 7\n    \n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10  # 10% discount\n    discounted_price = original_price * (1 - discount)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_in_box = symbols('cookies_in_box')\n\n    cookies_sold_second_month = 1680 + 1680 * (7/20)\n    kept_cookies_decrease = cookies_in_box * (3/20)\n\n    # Equation representing cookies kept in the first month and cookies kept in the second month\n    equation = Eq(cookies_in_box - 1680 - (cookies_sold_second_month + kept_cookies_decrease), 0)\n\n    solutions = solve(equation, cookies_in_box)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene is the 6th from the front and Amy is directly behind her, so Amy is the 7th from the front.\n    jolene_position_from_front = 6\n    amy_position_from_back = 8\n\n    # The total number of children in the queue is the position of Amy from the front plus her position from the back minus 1.\n    total_children = jolene_position_from_front + amy_position_from_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_animals_initial, cows_initial, cows_final, goats_initial, goats_final = symbols('total_animals_initial cows_initial cows_final goats_initial goats_final')\n    \n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)\n    equation3 = Eq(cows_final, cows_initial + 240)\n    equation4 = Eq(goats_final, 2 * goats_initial)\n    equation5 = Eq(cows_final, 0.65 * total_animals_initial + 0.20 * (total_animals_initial + 240))\n    equation6 = Eq(total_animals_initial + 240, cows_final + goats_final)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (total_animals_initial, cows_initial, cows_final, goats_initial, goats_final))\n    \n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_cycle = 2\n    net_gain_per_cycle = jumps_per_cycle * jump_up - slide_down\n\n    jumps = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jumps += jumps_per_cycle\n        height_after_jumps += net_gain_per_cycle\n        if height_after_jumps >= total_height:\n            break\n        # After two jumps, it needs one more jump to make progress before falling.\n        height_after_jumps += jump_up\n        jumps += 1\n\n    return jumps\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    total_perimeter = 5 * side_length\n    # Since there's a sunflower on each corner, we subtract 5 to account for them,\n    # to get the number of sunflowers along the sides.\n    sunflowers_along_sides = (total_perimeter - 5 * distance_apart) / distance_apart\n\n    # Adding the corners sunflowers\n    total_sunflowers = sunflowers_along_sides + 5\n    return int(total_sunflowers)\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_price_p = 46\n    pounds_to_pence_conversion = 100\n    total_money_p = 3 * pounds_to_pence_conversion\n    number_of_stamps = total_money_p // stamp_price_p\n    return number_of_stamps\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2\n\n    # Calculate number of full trips (each full trip ferrying 7 adventurers)\n    full_trips = adventurers // boat_capacity\n    \n    # Calculate whether there is a partial trip for remaining adventurers\n    partial_trip = adventurers % boat_capacity > 0\n    \n    # Subtract one from full trips as the last trip doesn't require a return journey\n    total_trips = 2 * full_trips - 1 + partial_trip\n    \n    # Calculate the total time\n    total_time = total_trips * trip_time\n    \n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t represent the time Ryan drives at his usual speed\n    t = symbols('t')\n    \n    # Distance = Speed * Time, and the distance doesn't change; hence,\n    # 45*t = 30*(t+2)\n    equation = Eq(45*t, 30*(t + 2))\n    \n    # Solve for t, the time Ryan would drive at his usual speed\n    solution = solve(equation, t)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum from 3 to 10 using the arithmetic sum formula: n/2 * (first + last)\n    # This is the upward sequence\n    sum_up = (10 - 3 + 1) / 2 * (3 + 10)\n    \n    # Calculate the sum from 3 to 6 using the arithmetic sum formula: n/2 * (first + last)\n    # This is the downward sequence, excluding the peak at 10\n    sum_down = (6 - 3 + 1) / 2 * (3 + 6)\n    \n    # The total sum is the sum of both sequences minus 10 (because it's counted twice)\n    total_sum = sum_up + sum_down - 10\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        if n < 0 or m == 0:\n            return 0\n        return count_partitions(n, m - 1) + count_partitions(n - m, m)\n\n    ans = count_partitions(5, 5) - 1  # subtract 1 because we don't count 5 as a split\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10  # First two terms of the sequence\n    for _ in range(1995):  # 1997th term will be computed after 1995 iterations\n        a, b = b, (a + b) % 3  # Update with the next term and calculate the remainder when divided by 3\n    ans = a  # After the loop, a will be the (1997-1)th term and b is the 1997th.\n    return ans  # We return a because we updated before returning.\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the difference between each tree's fruits is 1, we can represent the amounts as:\n    # a, a+1, a+2, a+3, a+4, a+5, a+6, a+7 for some integer a\n    \n    # The sum of the fruits for these 8 trees is therefore:\n    # S = a + (a+1) + (a+2) + (a+3) + (a+4) + (a+5) + (a+6) + (a+7)\n    # S = 8a + (1+2+3+4+5+6+7) = 8a + 28\n    \n    # Because 225 - 28 is not divisible by 8, it is not possible.\n    return False\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    # Let b represent the number of blue shirts\n    # and w represent the number of white shirts\n    # According to the problem, we have two equations:\n    # w = 6 * b\n    # w + b = 63\n    \n    # We can substitute the value of w from the first equation into the second\n    # (6 * b) + b = 63\n    # 7 * b = 63\n    # b = 63 / 7\n    b = 63 / 7\n    \n    # Now we find the number of white shirts\n    w = 6 * b\n    \n    return int(w)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students and y be the total number of sweets.\n    # According to the question:\n    # 6 * x = y + 26   (1) - If he gives each student $6 sweets, he is short of $26 sweets.\n    # 5 * x = y + 5    (2) - If he gives each student $5 sweets, he is short of $5 sweets.\n    # Simplifying the above equations we get:\n    # y = 6x - 26      (3)\n    # y = 5x - 5       (4)\n    # Equating (3) and (4), we get:\n    # 6x - 26 = 5x - 5\n    # 6x - 5x = 26 - 5\n    # x = 21 (number of students)\n\n    # Substituting x in (4), we get:\n    # y = 5 * 21 - 5\n    # y = 105 - 5\n    # y = 100 (total number of sweets)\n\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    # Let Leo's current age be L and his son's current age be S.\n    # From the first statement \"When I was your age, you were 4 years old\", we can write:\n    # L - S = S - 4  =>  2S = L + 4  =>  S = (L + 4) / 2\n    \n    # From the second statement \"When you reach my age, I will be 70 years old\", we can write:\n    # L + (L - S) = 70  =>  L + L - (L + 4) / 2 = 70  =>  2L + 2L - L - 4 = 140\n    # 3L - 4 = 140  =>  3L = 144  =>  L = 144 / 3  =>  L = 48\n    \n    # Hence, Leo's current age is 48.\n    return 48\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    heidi_age = 8 + years\n    dad_age = 50 + years\n\n    equation = Eq(dad_age, 4 * heidi_age)\n\n    solution_years = solve(equation, years)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    count = 0\n    for i in range(1, 61):\n        while i % 5 == 0:\n            count += 1\n            i /= 5\n    return count\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_values_initial = 3\n    \n    # Calculate the sum of the initial three numbers\n    sum_initial = average_initial * num_values_initial\n    \n    # Calculate the sum of four numbers after the fourth number is added\n    sum_final = average_final * (num_values_initial + 1)\n    \n    # The fourth number is the difference between the final sum and the initial sum\n    fourth_number = sum_final - sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3/13) * 52\n    return result\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r = symbols('r')\n    equation = Eq(216 * r, r**2)\n\n    solutions = solve(equation, r)\n    possible_values = [sol.evalf() for sol in solutions if sol.is_real and sol.is_positive]\n\n    # We need the square root of 216 which is a perfect square when multiplied by r\n    square_root_of_216 = 216**0.5\n    for value in possible_values:\n        if ((square_root_of_216 * value) ** 0.5).is_integer():\n            return value\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_up = 8\n    slide_down = 3\n    effective_climb = climb_up - slide_down\n    days = 9\n\n    # The snail reaches the top before the 9th night\n    # so we subtract the last day's climb and add the net climb per day \n    depth = (days - 1) * effective_climb + climb_up\n\n    return depth\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "def solution():\n    from math import factorial\n\n    # Total singing performances (S) and dancing performances (D)\n    S = 4\n    D = 3 \n    \n    # To satisfy the condition of at least one singing performance between every two dancing performances,\n    # We can think of the arrangement in parts. There must be a singing performance at the start and end.\n    # Therefore, we have two less singing performances to distribute and one less spot between dances.\n    \n    # S _ D _ D _ D S, we have two S's to distribute into 3 positions (arrangement of D's with one S at each end)\n    \n    # Calculate the number of ways to distribute the two remaining S's among the spots (3 - 1 spots since 1 is fixed at end)\n    # This is equivalent to placing two indistinguishable items (the remaining S's) into two distinguishable spots (the intervals)\n    num_ways_to_distribute_S = factorial(D) // factorial(D - (S - 2))\n    \n    # Now consider the inner permutations of the singing and dancing performances.\n    # Since we have fixed the position of 1 singing performance at the end, there are only (S - 1) + D performances to permute.\n    inner_permutations = factorial(S + D - 1) \n    \n    # Total arrangements are the product of distribution choices and inner permutations.\n    total_arrangements = num_ways_to_distribute_S * inner_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_lang_teachers = french_teachers + japanese_teachers - total_teachers\n    only_french_teachers = french_teachers - both_lang_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the cost of one bag of sweets as 's' and the cost of one can of drink as 'd'\n    s, d = symbols('s d')\n\n    # Rachel's purchase equation: 3 * cost of sweets + 5 * cost of drink = £4.90\n    equation1 = Eq(3 * s + 5 * d, 4.90)\n\n    # Rosie's purchase equation: 1 * cost of sweets + 3 * cost of drink = £2.70\n    equation2 = Eq(s + 3 * d, 2.70)\n\n    # Solving the equations to get the cost of one bag of sweets\n    solutions = solve((equation1, equation2), (s, d))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The formula to calculate dividend is: dividend = (quotient * divisor) + remainder\n    # Since we are looking for the smallest possible dividend, the smallest possible divisor that yields a remainder is 1 more than the remainder\n    divisor = remainder + 1\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)           # All possible ways 6 people can line up\n    teddy_leftmost_ways = factorial(5)  # Ways for the other 5 friends without Teddy on the left\n\n    answer = total_ways - teddy_leftmost_ways  # Subtract the arrangements where Teddy is leftmost\n\n    return answer\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    amount_in_pence = 963\n    fraction = 4 / 9\n\n    result = amount_in_pence * fraction\n\n    return int(result)\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4  # Because the sequence is decreasing\n\n    # The nth term formula is: an = a1 + (n - 1)d\n    # We need to find the largest n where an > 0\n    \n    # an > 0\n    # a1 + (n - 1)d > 0\n    # 50 + (n - 1)(-4) > 0\n    # 50 - 4n + 4 > 0\n    # 54 > 4n\n    # n < 13.5\n    \n    # Since n has to be an integer, the largest integer smaller than 13.5 is 13\n    # So the sequence will have 13 positive terms before the first negative term\n    \n    return 13\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100): # Range of 2-digit numbers\n        if (i % 10 + i // 10) % 7 == 0: # Sum of digits divisible by 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # If the seven consecutive whole numbers have a center number 'n',\n    # then the numbers are (n-3), (n-2), (n-1), n, (n+1), (n+2), (n+3).\n    # Their sum is 7n.\n    sum_of_numbers = 280\n    # Find 'n' by dividing the sum by 7.\n    n = sum_of_numbers // 7\n    # The largest number is (n + 3).\n    largest_number = n + 3\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Define the equations based on the given conditions\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the solution for the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):  # A is a 3-digit number\n        for j in range(i + 1, 1000):  # B is a distinct 3-digit number\n            if i % 75 == 0 and j % 75 == 0:  # Check for HCF of 75\n                str_i = str(i)\n                str_j = str(j)\n                set_i = set(str_i)\n                set_j = set(str_j)\n\n                # Check if A and B have two equal digits\n                common_digits = set_i.intersection(set_j) \n                if len(common_digits) == 2:\n                    if i + j > max_sum:\n                        max_sum = i + j\n\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    for i in range(2, 21, 2):\n        total = total - i if i % 4 == 0 else total + i\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # Since the numbers are not consecutive squares and don't fit the formula directly, we\n    # decompose the arithmetic operations to find a pattern.\n    \n    # After analyzing the sequence, it can be seen that it follows a pattern:\n    # 8 = 2^3, 32 = 2 * 2^4, 72 = 3 * 2^5, ..., N = n * 2^(n+2)\n    # Given the sequence up to 648, we can deduce that n goes from 1 to 9.\n    \n    # Now we calculate the sum using this pattern.\n    total_sum = sum(n * 2**(n+2) for n in range(1, 10))\n    \n    return total_sum\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    space = 0\n    penalty = False  # To track if the previous roll was a 6\n\n    for roll in throws:\n        if penalty:\n            space -= roll\n            penalty = False\n        elif roll == 6:\n            penalty = True\n        else:\n            space += roll\n    \n    return space\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)         # Alex and Brayden had $756 altogether.\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))  # After Alex gave $65 to Brayden, Alex had three times as much money as Brayden.\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # iterate through possible numbers of gums, set an arbitrary upper limit\n        remaining_after_music = gums - 2  # ate 2 in music lesson\n        shared_at_break = remaining_after_music // 3  # one third shared with friends\n        remaining_after_break = remaining_after_music - shared_at_break\n        if remaining_after_break % 4 == 0:  # can be divided equally in the next four lessons\n            return gums\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial as fact\n\n    # There should be at least 1 magazine between every 2 storybooks\n    # The minimum arrangement would thus place all storybooks 's' interspersed with magazines 'm': m s m s m s m s m s m\n    # We can consider 4 magazines locked in those positions (since 5th can be placed anywhere within those slots)\n    # and then we have 5! ways to arrange the storybooks and 5! ways to arrange the magazines.\n    # The first magazine has 6 possible positions (slots between and at the ends of the storybooks)\n    \n    storybooks = fact(5)\n    magazines = fact(5)\n    first_magazine_positions = 6\n\n    total_ways = storybooks * magazines * first_magazine_positions\n\n    return total_ways\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    \n    # After giving some money to Kate, both will have the average of their initial amounts\n    avg_money = (kate + james) / 2\n    \n    # The amount given to Kate is the difference between the average and her initial amount\n    amount_given = avg_money - kate\n    \n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # The sum of all ten numbers\n    remaining_sum = 9 * 9  # The sum of the remaining nine numbers\n    removed_number = total_sum - remaining_sum  # The value of the removed number\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kmh * 1000 / 3600  # convert km/h to m/s\n\n    time_seconds = 300  # time in seconds\n\n    distance_meters = speed_mps * time_seconds  # distance in meters\n    \n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n    \n    # When the money is shared among 4 people (3 brothers + 1 sister)\n    each_share_4 = original_sum / 4\n    \n    # When the money is shared among 3 brothers\n    each_share_3 = original_sum / 3\n    \n    # According to the given condition\n    equation = Eq(each_share_3, each_share_4 + 20)\n    \n    # Solving for the original sum\n    original_sum_value = solve(equation, original_sum)\n\n    return original_sum_value[0]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = (21 + 1) // 2  # since we are summing odd cubes: 1, 3, 5, ..., 21 (total 11 terms)\n    sum_of_series = (n * (n + 1) // 2) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # Rule for divisibility by 99: a number is divisible by 99 if it's divisible by both 9 and 11.\n    # Divisibility rule for 9: the sum of the digits must be divisible by 9.\n    # Divisibility rule for 11: the difference between the sum of the digits in the odd positions and \n    # the sum of the digits in the even positions must be divisible by 11.\n\n    # For the number 42A28B to be divisible by 99, the sum S1 of digits 4 + 2 + A + 2 + 8 + B must be divisible by 9.\n    # S1 = 4 + 2 + A + 2 + 8 + B = 16 + A + B must be divisible by 9.\n    # Since A and B are digits, the minimum value for A + B would be 0 (if both are 0), and the max would be 18 (if both are 9).\n    # Now, we find the least value for A + B such that (16 + A + B) is divisible by 9 and A + B < 100 (because AB is a 2-digit number), \n    # which will give us the correct value for A + B.\n\n    # For the divisibility by 11, the absolute difference D of (4 - 2 + A - 2 + 8 - B) must be divisible by 11.\n    # D = (4 - 2 + A - 2 + 8 - B) = 8 + A - B must be divisible by 11.\n\n    # Since A and B are numbers from 0 to 9, we will iterate over those ranges to find the possible values.\n    for A in range(10):\n        for B in range(10):\n            S1 = 16 + A + B\n            D = abs(8 + A - B)\n            if S1 % 9 == 0 and D % 11 == 0:\n                return A * 10 + B  # Since AB is a 2-digit number, we return A*10+B.\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n    \n    science_books = (art_books / art_books_fraction) * science_books_fraction\n    \n    return int(science_books)\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of red, green, and blue beads left after giving some away\n    red, green, blue = symbols('red green blue')\n\n    # Equations based on the problem statement\n    equation1 = Eq(red, 2 * green)                     # red is twice as many as green\n    equation2 = Eq(blue, red - 50)                     # blue is 50 fewer than red\n    equation3 = Eq(red + green + blue, 350)            # total beads left is 350\n    equation4 = Eq(blue + 112, red)                    # blue beads left plus 112 equals the initial amount of each color\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red, green, blue))\n\n    # Initial number of blue beads = blue beads left + 112\n    initial_blue_beads = solutions[blue] + 112\n\n    return initial_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Calculate the sum of each set of 4 numbers\n    sums_of_4 = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    \n    # Calculate the sum of all 5 numbers, which is equal to the sum of sums of 4 numbers\n    # minus 4 times the single number that was excluded each time (since it has been subtracted once for each group of 4)\n    total_sum = sum(sums_of_4) - 4 * (sum(sums_of_4) // 5)\n    \n    # Since the average of each group of 4 is given and each average is distinct,\n    # the lowest sum of 4 will give us the exclusion of the highest number of the 5.\n    # We can then deduce the largest number by subtracting the lowest sum of 4 from the total sum.\n    largest_number = total_sum - min(sums_of_4)\n    \n    return largest_number\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1**2\n\n    amount_after_five_years = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(amount_after_five_years, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(n / 100) * 100 for n in numbers]\n    ans = sum(rounded_numbers)\n    return ans\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Find the greatest common divisor of the numbers of textbooks\n    greatest_common_divisor = gcd(gcd(42, 63), 28)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    katelyn, jared = symbols('katelyn jared')\n    ratio_katelyn = 2\n    ratio_jared = 5\n\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / jared, ratio_katelyn / ratio_jared)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Each person should get 16/24 = 2/3 of a sausage.\n    # One cut can divide one sausage into two parts.\n    # To get 2/3 parts from each sausage, we can do 16 cuts (one for each sausage),\n    # and each pair of cut pieces can be shared between three people (2/3 each).\n    # But for each additional sausage, we only need 2 more cuts (one at the 1/3 and two-thirds mark)\n    # so for 16 sausages, we need the initial 16 cuts, plus 15 sausages * 2 cuts each.\n    \n    return 16 + 15 * 2\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Calculate the work rate for 4 companies to build 900m in 5 days\n    rate_for_four_companies = 900 / 5\n    \n    # Calculate the daily work done by one company\n    rate_for_one_company = rate_for_four_companies / 4\n    \n    # Calculate the days needed for one company to build 2700m\n    days_needed = 2700 / rate_for_one_company\n    \n    return days_needed\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Star's work rate (jobs per hour)\n    # Let y be Nini's work rate (jobs per hour)\n    x, y = symbols('x y')\n\n    # If Star types for 5 hours and Nini types for 20 hours, they finish 1 job\n    equation1 = Eq(5*x + 20*y, 1)\n\n    # If Star types for 20 hours and Nini types for 8 hours, they finish 1 job\n    equation2 = Eq(20*x + 8*y, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Time for Nini to finish the job by herself is 1 divided by her work rate\n    time_for_nini = 1 / solutions[y]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # St. Petersburg is 3 hours ahead of Manchester\n    time_difference = timedelta(hours=3)\n    \n    # Richard meets the plane at 12 noon St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n\n    # Calculate the time the plane left Manchester\n    manchester_departure_time = st_petersburg_time - time_difference\n\n    # Format the result to match the desired output (e.g., \"09:00 AM\")\n    ans = manchester_departure_time.strftime('%H:%M')\n\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs_conversion_rate = 2.2\n    weight_in_kg = 5\n    weight_in_lbs = weight_in_kg * kg_to_lbs_conversion_rate\n    return weight_in_lbs\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    total_people = (ben_position_from_front - 1) + people_between + (frank_position_from_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    \n    total_litres = (coffee_litres / coffee_ratio) * (coffee_ratio + milk_ratio)\n\n    return total_litres\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the distance, time taken by Qiqi and Weiling\n    distance, t_qiqi, t_weiling = symbols('distance t_qiqi t_weiling')\n\n    # Qiqi's speed in m/min\n    speed_qiqi = 60\n    # Weiling's speed in m/min\n    speed_weiling = 72\n\n    # Equation for Qiqi's travel: distance = speed_qiqi * t_qiqi\n    equation1 = Eq(distance, speed_qiqi * t_qiqi)\n\n    # Equation for Weiling's travel: distance = speed_weiling * (t_qiqi - 2)\n    # Weiling starts 2 minutes later\n    equation2 = Eq(distance, speed_weiling * (t_qiqi - 2))\n\n    # Weiling arrives 4 minutes earlier than Qiqi\n    # t_weiling = t_qiqi - 4\n    equation3 = Eq(t_weiling, t_qiqi - 4)\n\n    # Since t_weiling is t_qiqi - 2, we substitute it in equation2\n    # Now equation2 reflects the correct time variable for Weiling's travel\n    equation2 = Eq(distance, speed_weiling * t_weiling)\n\n    # Solve the system of equations for distance, t_qiqi, and t_weiling\n    solutions = solve((equation1, equation2, equation3), (distance, t_qiqi, t_weiling))\n\n    # Return the distance between the library and the school\n    return solutions[distance]\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(2, 33, 2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = (72 / 100) * 140\n    return result\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(102, 1000, 8):  # Starts from the smallest 3-digit number with a remainder of 2 when divided by 8\n        if num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let's assume the total number of marbles is x\n    # According to the problem:\n    # 2/5 of the marbles are red\n    # 1/3 of the marbles are green\n    # There are 96 yellow marbles = total - red - green\n    # So, (2/5)*x + (1/3)*x + 96 = x\n    # Solving for x gives us the total number of marbles\n\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (2/5)*x + (1/3)*x + 96 - x\n\n    total_marbles = solve(equation, x)\n\n    return total_marbles[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_four_digits_sum = 0\n    for i in range(1, 2016):\n        last_four_digits_sum += int('1' * i)\n        last_four_digits_sum %= 10000  # Keep only the last 4 digits\n    return last_four_digits_sum\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundred_digit in range(1, 10):\n        for ten_digit in range(10):\n            for unit_digit in range(10):\n                if (hundred_digit + ten_digit + unit_digit == 8) and (unit_digit % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If you take 3 marbles from the bag, you are sure to have at least 2 marbles of the same colour\n    # Because in the worst case, you can have 1 blue and 1 yellow in the first two picks\n    # And the third one must be either blue or yellow, which guarantees 2 of the same colour\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    # x ≡ 2 (mod 4), x ≡ 3 (mod 5), and x ≡ 3 (mod 11)\n    congruences = [(2, 4), (3, 5), (3, 11)]\n\n    # Using the Chinese Remainder Theorem to find a solution\n    ans, _ = solve_congruence(*congruences)\n\n    # Return the smallest possible value of the number\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a power of 13 cycles every 4 powers: 3, 9, 7, 1, ...\n    # So, we need to find the remainder of 242 divided by 4 to determine the unit digit\n    unit_digit_13 = (13 ** (242 % 4)) % 10\n    \n    # Similarly, the unit digit of a power of 17 cycles every 4 powers: 7, 9, 3, 1, ...\n    # We find the remainder of 379 divided by 4 to determine the unit digit\n    unit_digit_17 = (17 ** (379 % 4)) % 10\n    \n    # The unit digit of a power of 4 is always 4 if the power is not zero\n    # Since 2012 is not zero, the unit digit of 4^2012 is 4\n    unit_digit_4 = (4 ** (2012 % 4)) % 10\n    \n    # Now we combine the unit digits following the original expression\n    # Since we only care about the unit digit, we can multiply and add the unit digits directly\n    unit_digit = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3  # since the sequence is decreasing\n    n = 7  # 7th term\n\n    # nth term of an arithmetic sequence is given by: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Let's denote the ages of the children as a, a+2, and a+4.\n    # We are told that the product of the children's ages is less than 2019.\n    # The oldest a child can be while satisfying this condition is when a*(a+2)*(a+4) < 2019.\n    # Let's find the maximum age 'a' can be:\n    max_a = 0\n    while (max_a * (max_a + 2) * (max_a + 4) < 2019):\n        max_a += 1\n    max_a -= 1  # Subtract 1 because we went one over the condition\n    \n    # Now we will iterate over the ages of John (j) and Mary (m) where j = m + 1\n    # And their product is less than 2019 this year and greater than 2020 next year.\n    max_j = 0\n    for m in range(1, 2019):\n        j = m + 1\n        if j * m < 2019 and (j + 1) * (m + 1) > 2020:\n            max_j = j\n        else:\n            continue\n    \n    # Knowing the oldest of the children is max_a + 4, and the parents' product is within the bounds,\n    # We can find the sum of all five ages this year.\n    sum_ages = max_j + (max_j - 1) + max_a + (max_a + 2) + (max_a + 4)\n    \n    return sum_ages\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        number_sum = sum(int(''.join(str(perm[i:i+3]))) for i in range(len(perm)-2))\n        if number_sum > max_sum:\n            max_sum = number_sum\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert the bicyclist's time to minutes\n    bicyclist_time_minutes = 2 + 30 / 60\n\n    # Calculate the number of miles in 1 hour\n    miles_in_one_hour = 60 / bicyclist_time_minutes\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    number = 8\n    while count < 2012:\n        str_number = str(number)\n        if str_number[0] == '8':\n            count += 1\n        number += 1\n    return number - 1\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote x as the original sum of money Mrs Chen had.\n    # According to the problem, after spending money on plates,\n    # she spent 3/4 of the remaining money on cups.\n    # In the end, she is left with 1/6 of the original sum.\n    # So, we can write the equation as:\n    # x - (money spent on plates) - 3/4*(x - (money spent on plates)) = 1/6 * x\n    # money spent on plates is given as $36.\n    # Now we solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - 36 - (3/4) * (x - 36), (1/6) * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    n = 5  # Number of students (and terms in sequence)\n    \n    # Let the middle term (number of balls for the middle student) be \"x\".\n    # The terms in the sequence are: x-2, x-1, x, x+1, x+2.\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term).\n    # Total balls: 5/2 * ((x-2) + (x+2)) = 160.\n    \n    # Simplify to find x.\n    # 5x = 160\n    # x = 160 / 5\n    x = total_balls / n\n\n    # The student with the most balls has x+2 balls.\n    most_balls = x + 2\n\n    return int(most_balls)\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    # The minimum number of envelopes that can be placed into each mailbox\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    # The rest of the envelopes after minimum placement\n    remaining_envelopes = 15 - (min_A + min_B + min_C)\n    \n    # We enumerate all possible distributions for the remaining envelopes in D (0-6 envelopes)\n    # For each distribution, there is exactly 1 way to place the envelopes in A, B, and C\n    # since the minimum required envelopes are fixed.\n    \n    # Number of ways to distribute the remaining envelopes to box D is\n    # the number of ways to distribute 0 to 6 envelopes, which is 7 (including 0)\n    count_ways = 7\n    \n    return count_ways\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n\n    equation = Eq(0.15 * 20000 + 0.20 * (income - 20000), 7000)\n\n    solutions = solve(equation, income)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1/10)\n    return result\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Finding the recurring cycle for 1/13\n    remainder = 1\n    seen_remainders = []\n    cycle_digits = []\n\n    # We use long division until we see a repeating remainder\n    while remainder not in seen_remainders:\n        seen_remainders.append(remainder)\n        digit, remainder = divmod(remainder * 10, 13)\n        cycle_digits.append(digit)\n        \n    cycle_length = len(cycle_digits)\n    \n    # The position in the cycle for the 2022th digit\n    position_in_cycle = (2022 - 1) % cycle_length\n    \n    ans = cycle_digits[position_in_cycle]\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    # Calculate the greatest common divisor of the three lengths\n    ans = gcd(gcd(length1, length2), length3)\n\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Assume all animals are chickens (with 2 legs each)\n    chickens = total_animals\n    legs_with_all_chickens = 2 * chickens\n    # Calculate the excess legs when assuming all are chickens to find rabbit count\n    excess_legs = total_legs - legs_with_all_chickens\n    # Each rabbit has 2 more legs than a chicken, so divide excess legs by 2 to find rabbit count\n    rabbits = excess_legs // 2\n    # Subtract rabbits from total to find number of chickens\n    chickens -= rabbits\n    return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial number of packs in each store\n    x = symbols('x')\n    \n    # After selling 290 packs, store A has x - 290\n    # Store B has 3 times the packs of store A, which is 3(x - 290)\n    # The total initial number of packs is x (store A) + x (store B) = 2x\n    # So we can write the equation as 3(x - 290) = x\n    equation = Eq(3 * (x - 290), x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The answer is the total initial number of packs, which is 2x\n    return 2 * solution[0]\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    # Total number of students\n    total_students = 30\n\n    # Given information\n    total_boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_went_home = 5\n    boys_went_home = 3\n\n    # Calculate the number of boys and girls who went home\n    girls_went_home = students_went_home - boys_went_home\n\n    # Calculate the number of girls\n    total_girls = total_students - total_boys\n\n    # Calculate the number of girls who had a packed lunch (All girls minus those who had school lunch or went home)\n    girls_packed_lunch = total_girls - girls_school_lunch - girls_went_home\n\n    # Calculate the total number of students who had a packed lunch (Add boys and girls who had packed lunch)\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n\n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n    dark_chocolate_qty = 20\n    milk_chocolate_qty = 20\n    strawberry_chocolate_qty = 20\n\n    total_cost = (dark_chocolate_price * dark_chocolate_qty +\n                  milk_chocolate_price * milk_chocolate_qty +\n                  strawberry_chocolate_price * strawberry_chocolate_qty)\n    total_qty = dark_chocolate_qty + milk_chocolate_qty + strawberry_chocolate_qty\n\n    average_cost = total_cost / total_qty\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    uniforms_per_day = 720 / 5\n    total_days = 3600 / uniforms_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    ans = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time to pass the tree in seconds\n    \n    # Distance = Speed * Time\n    train_length = speed * time \n    \n    return train_length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days the wife takes to finish the barrel on her own\n    # Then the man's rate of drinking is 1/15 barrel/day\n    # The wife's rate of drinking is 1/x barrel/day\n    # Their combined rate is 1/12 barrel/day\n\n    # The sum of their rates equals the combined rate:\n    # 1/15 + 1/x = 1/12\n    # Solving for x gives us the number of days the wife would take to finish the barrel\n\n    # Given rate equation:\n    # 1/x = 1/12 - 1/15\n    # 1/x = (15 - 12) / (12 * 15)\n    # 1/x = 3 / 180\n    # 1/x = 1 / 60\n    # x = 60\n\n    # The wife will take 60 days to finish the barrel on her own\n    return 60\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    return sum(i**2 for i in range(2, 21, 2))\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    num_friends = 6\n\n    fruits_per_friend = (total_pears + total_strawberries + total_chocolates) // num_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    tricycles = 6\n    wheels_per_tricycle = 3\n    total_wheels = tricycles * wheels_per_tricycle\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    offer_books = 3 + 1  # Buy 3 get 1 free\n    books_needed = 5\n\n    # calculate the number of free books Subhan gets\n    free_books = books_needed // offer_books\n    # calculate the number of books Subhan pays for\n    paid_books = books_needed - free_books\n\n    total_cost = paid_books * book_price\n    return total_cost\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n\n    solution = solve(equation, sam_number)\n\n    return solution[sam_number]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n    ans = mount_fuji_tip - turpan_depression_base\n    return ans\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_people = symbols('total_people')\n    children = symbols('children')\n\n    # According to the problem statement, we can set up the following equations:\n    women = 2 / 5 * total_people\n    men = 3 * children\n    # We know there are 190 more women than children\n    equation1 = Eq(women, children + 190)\n    # The sum of men, women, and children equals the total number of people\n    equation2 = Eq(men + women + children, total_people)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (children, total_people))\n\n    # Return the total number of people\n    return solutions[total_people]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) % 4\n    return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    total_pupils = 40\n    girls = total_pupils - boys\n    overall_average = 35\n    boys_average = 20\n    girls_average = 60\n\n    equation = Eq(boys * boys_average + girls * girls_average, total_pupils * overall_average)\n    \n    num_boys = solve(equation, boys)[0]\n    \n    return num_boys\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def count_digit_1(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('1')\n    return count\n\ndef solution():\n    ans = count_digit_1(200)\n    return ans\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    \n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both_competitions = 20\n    total_students = coding_only + math_only + both_competitions\n    return total_students\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    # By the inclusion-exclusion principle:\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for price per apple and price per banana\n    price_per_apple, price_per_banana = symbols('price_per_apple price_per_banana')\n\n    # equations based on the given information\n    equation1 = Eq(6 * price_per_apple + 7 * price_per_banana, 8 * price_per_apple + 4 * price_per_banana)\n    equation2 = Eq(price_per_apple, price_per_banana)  # Let's assume the cost of 1 apple is equal to 1 banana\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (price_per_apple, price_per_banana))\n\n    # calculate how many bananas he could afford by using either option's total amount\n    total_amount = (6 * solutions[price_per_apple] + 7 * solutions[price_per_banana])\n    bananas_only = total_amount / solutions[price_per_banana]\n\n    return int(bananas_only)\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    # Iterate the envelopes for each box adhering to the constraints \n    for A in range(2, 15):\n        for B in range(4, 15):\n            for C in range(3, 15):\n                D = 15 - (A + B + C)\n                \n                # D should not have negative envelopes, check if the total\n                # is equal to 15 and that box D is not empty\n                if D >= 0 and A + B + C + D == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the dividend and y be the true result\n    x, y = symbols('x y')\n    wrong_divisor = 211  # Leo forgets to put down the decimal point\n    true_divisor = 2.11  # The actual divisor with the decimal point\n\n    # The wrong result comes from dividing by the wrong divisor\n    wrong_result = x / wrong_divisor\n\n    # The true result is the wrong result plus the difference\n    equation = Eq(wrong_result + 98.01, y)\n\n    # The true result also comes from dividing the dividend by the true divisor\n    equation2 = Eq(x / true_divisor, y)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_in_minute = 60\n    minutes_in_hour = 60\n    hours_in_day = 24\n    days_in_week = 7\n    \n    seconds_in_week = seconds_in_minute * minutes_in_hour * hours_in_day * days_in_week\n    return seconds_in_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(male_first_day * 0.82 + female_first_day * 1.15, 1354)\n\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n\n    # After selling 4 eggs fewer than half of the remaining eggs in his basket.\n    second_sale_half = remaining_eggs * 2 + 4\n\n    # Before the second sale, he had sold 5 eggs more than half the number of eggs in his basket.\n    total_eggs = (second_sale_half + 5) * 2\n\n    return total_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    distance_in_miles = miles_per_hour * hours\n    \n    miles_to_kilometers = 1.60934\n    distance_in_kilometers = distance_in_miles * miles_to_kilometers\n    \n    return distance_in_kilometers\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the amount John and Choon Mui had initially\n    J, CM = symbols('J CM')\n\n    # John and Choon Mui initially had the same amount of money\n    equation1 = Eq(J, CM)\n\n    # After spending, John's money is four times Choon Mui's\n    equation2 = Eq(J - 30, 4 * (CM - 150))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (J, CM))\n\n    # Calculate how much money John had left\n    money_left = solutions[J] - 30\n\n    return money_left\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10\n    final_amount = initial_amount * (1 + percentage_increase / 100)\n    return final_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial as f\n\n    # This is a classic example of a derangement problem (a permutation where no\n    # element appears in its original position). The number of derangements of n\n    # elements is given by !n, also known as the subfactorial of n.\n    \n    # The formula for !n is: !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # For n = 4, we calculate !4 as follows:\n\n    n = 4\n    derangement = int(f(n) * (1 - 1/f(1) + 1/f(2) - 1/f(3) + 1/f(4)))\n    return derangement\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_climb_per_day = climb_per_day - slide_per_night\n    days = 0\n    \n    while True:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n    \n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    num, _ = solve_congruence(*congruences)\n    \n    # Looking for the number less than 100\n    while num < 100:\n        return int(num)\n        num += 7 * 13\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_weekly_earnings = hourly_rate * 8 * 7\n\n    if total_weekly_earnings < 700:\n        answer = \"John cannot pay off his debt because he earned less than $700.\"\n    else:\n        answer = \"John can pay off his debt.\"\n\n    return answer\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    price_difference = air_ticket - train_ticket\n\n    return price_difference\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq((A/100) + (A/10%10)*10 + A%10, 22)\n    ans = solve(equation, A)\n    return ans[0]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count(\"0\") == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n\n    start_time = end_time - work_duration\n    ans = start_time.strftime(\"%I:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n    \n    # Assign the period in days for each person's haircut frequency\n    arjun_period = 2 * 7  # 2 weeks in days\n    yahya_period = 10     # 10 days\n\n    # Find the least common multiple (LCM) of the two periods\n    ans = lcm(arjun_period, yahya_period)\n    \n    return ans\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for i in range(10):\n        for j in range(10):\n            number = 2000 + i * 100 + 90 + j\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    total_length = 42  # meters\n    distance_apart = 7  # meters apart\n    trees = (total_length - distance_apart) // distance_apart\n\n    return trees\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    return cost_of_shoes + fake_note\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = last_term - first_term + 1\n    sum_of_terms = (first_term + last_term) * num_terms // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    final_stamps = 34\n    stamps_given = 14\n    stamps_bought = 11\n    stamps_used = 2\n\n    initial_stamps = final_stamps + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Students A, B, and C can be arranged in 3! ways among themselves.\n    group_abc_permutations = factorial(3)\n    \n    # Treating students A, B, and C as one unit and including the rest of the students (7 others), \n    # we have 8 units to arrange in total.\n    units_permutations = factorial(8)\n    \n    # The total number of ways to line up with the condition is the product of the two possibilities.\n    total_permutations = group_abc_permutations * units_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, one must consider the worst-case scenario, which is\n    # picking all the blue balls first. After all the blue balls are picked, the next ball\n    # is guaranteed to be white.\n\n    num_blue_balls = 6\n    # Picking all blue balls\n    worst_case_balls_picked = num_blue_balls\n    # The next one will be white\n    balls_to_guarantee_white = worst_case_balls_picked + 1\n\n    return balls_to_guarantee_white\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return value\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return int(total)\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20  # length of each short ruler\n    overlap_length = 3       # overlapping length between two short ruler bundles\n    num_rulers = 3           # total number of short rulers\n\n    total_length = (num_rulers * short_ruler_length) - (overlap_length * (num_rulers - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Since we want the smallest number after removing 46 digits,\n    # we should remove the largest digits to minimize the remaining number.\n    # The largest digits would be towards the end of the concatenated number\n    # because it's an increasing sequence.\n    \n    # We know that the lengths of the numbers increase after every 9, 99, 999, ...\n    # Therefore, let's calculate the number of digits in this entire sequence\n    # from 1 to 30\n\n    # The digit counts for numbers with lengths 1, 2, and 3\n    num_digits_1 = 9  # Digits for 1 to 9\n    num_digits_2 = 20 * 2  # Digits for 10 to 29 (20 numbers, each with 2 digits)\n    num_digits_3 = 1 * 3  # Digits for the number 30\n\n    total_digits = num_digits_1 + num_digits_2 + num_digits_3\n\n    # Now, we need to keep the smallest 46 numbers from these digits.\n    # We will keep all single-digit numbers (1 to 9)\n    # For the two-digit numbers, we start by keeping the smallest numbers possible, which are 10, 11, ..., till we reach a count of 46.\n\n    # Calculate how many two-digit numbers we need to keep to reach 46\n    # We have already 9 single-digit numbers, so we need 46 - 9 more.\n    two_digit_nums_needed = 46 - num_digits_1\n\n    # Now the smallest number that we can form comes from concatenating:\n    # 1. The remaining two-digit numbers up to the 46th number \n    # 2. All subsequent numbers in the original sequence.\n    \n    # The first two digit number to be removed\n    first_removed_two_digit = 10 + two_digit_nums_needed\n    \n    # Now we construct the smallest possible number after removing the 46 digits\n    smallest_num = ''.join(str(n) for n in range(1, first_removed_two_digit))\n\n    # If we're not at the end of our total digits, we need to add the rest of the sequence\n    if first_removed_two_digit <= 29:\n        smallest_num += ''.join(str(n) for n in range(first_removed_two_digit + 1, 31))\n    \n    return smallest_num\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time spent jogging at 6 miles per hour is 1 hour (from 6:30 am to 7:30 am)\n    jogging_time = 1\n    jogging_speed = 6\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n\n    # Time spent walking at 5 miles per hour is 2 hours (from 7:30 am to 9:30 am)\n    walking_time = 2\n    walking_speed = 5\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    num = 2000 - 222\n    return num\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n    \n    while used_cups >= 7:\n        # Make new cups from used cups\n        made_now = used_cups // 7\n        new_cups += made_now\n        \n        # Calculate remaining used cups, which are the ones that couldn't be used to make new cups\n        used_cups = used_cups % 7 + made_now\n        \n    return new_cups\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    total_length_cm = 23 * 100  # convert meters to centimeters\n    start_offset = 20\n    spacing = 15\n    cauliflower_width = 45\n    planting_space = total_length_cm - start_offset - cauliflower_width\n    number_of_cauliflowers = planting_space // (spacing + cauliflower_width)\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    pages_first_3_days = 14 * 3\n    pages_next_2_days = 9 * 2\n    pages_sixth_day = 12\n    \n    total_pages = pages_first_3_days + pages_next_2_days + pages_sixth_day\n    average_pages = total_pages / total_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate the time for each section of the race\n    time_first_section = 280 / 7  # time = distance / speed\n    time_middle_section = 400 / 5\n    time_last_section = (800 - 280 - 400) / 8  # using total distance to determine last section distance\n\n    # Sum the times to get total time spent\n    total_time = time_first_section + time_middle_section + time_last_section\n\n    return total_time\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Calculate the greatest common divisor for class A and B\n    gcd_AB = gcd(class_A, class_B)\n    \n    # Calculate the greatest common divisor for the result of A and B with C\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n\n    original_state = Eq(badminton, 3 * bowling)\n    after_leaving = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((original_state, after_leaving), (badminton, bowling))\n\n    final_members_badminton = solutions[badminton] - 36\n    final_members_bowling = solutions[bowling] - 4\n\n    return final_members_badminton\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # speed of sound in meters per second\n    distance = 1.5 * 10**3  # distance in meters (1.5 kilometers)\n\n    time = distance / speed_of_sound  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors_count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n            \n    return factors_count\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n\n    ans = number1 - number2\n\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    from math import factorial\n\n    # Prime factorization of 5 will indicate the number of zeros since\n    # number of 2s will always be more than number of 5s in this product.\n    def count_factors_of_5(n):\n        count = 0\n        while n % 5 == 0:\n            n //= 5\n            count += 1\n        return count\n\n    # This product is equivalent to factorial(999) // factorial(300)\n    zeros = 0\n    for i in range(301, 1000):\n        zeros += count_factors_of_5(i)\n\n    return zeros\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1/i for i in range(10, 20))\n    integer_part = int(sum_of_fractions)\n    return integer_part\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    difference = 6\n    number_of_cards = total_sum // average\n\n    # Since the difference between the greatest and smallest number is 6,\n    # and we know that each number on the cards is an odd 3-digit number, \n    # the numbers must be consecutive odd numbers.\n    # So we can say that the smallest number is:\n    # smallest_number = average - (difference // 2) * (number_of_cards - 1) / 2\n\n    # However, since we are dealing with an odd number of cards (4 in this case),\n    # The median will also be the average, meaning the smallest number will be\n    # average - 1.5 * difference since the cards are (x-3, x-1, x+1, x+3).\n    # So the smallest number is:\n    smallest_number = average - 1.5 * difference  # which is average - 9 in this case\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation representing Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation representing Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):  # Loop through all two-digit numbers\n        if i % 6 == 0 and (i - 1) % 13 == 0:  # Check the conditions\n            return i\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)  # Bolt has run 1656 meters more than Boris\n    equation2 = Eq(bolt, 5 * boris + 280)  # Bolt has finished 280 meters more than 5 times Boris's distance\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    sleep_time = 215  # min\n    start_delay = 10  # min\n\n    # Calculate the distance rabbit ran before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n\n    # Calculate the time turtle takes to finish the race\n    turtle_time_to_finish = race_distance / turtle_speed\n\n    # Calculate the time rabbit takes to finish the race after sleeping\n    rabbit_time_to_finish = (race_distance - rabbit_distance_before_sleep) / rabbit_speed + sleep_time + start_delay\n\n    # Establish who reached the finish line first and the distance between them\n    if rabbit_time_to_finish < turtle_time_to_finish:\n        time_difference = turtle_time_to_finish - rabbit_time_to_finish\n        distance_difference = time_difference * turtle_speed\n        winner = \"rabbit\"\n    else:\n        time_difference = rabbit_time_to_finish - turtle_time_to_finish\n        distance_difference = time_difference * rabbit_speed\n        winner = \"turtle\"\n\n    return winner, distance_difference\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    # As the money increases by 10% each year, the multiplier for each year is 1 + 10/100 = 1.1\n    # Hence for two years, we need to divide by 1.1 twice\n    initial_amount = final_amount / (1.1 ** 2)\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(7)  # total ways to arrange 7 people without restrictions\n    \n    # Ways to arrange the three people who do not want to stand next to each other\n    restrictive_ways = factorial(3) * factorial(5) * 3\n\n    ans = total_ways - restrictive_ways\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n  \n    # Given equations\n    equation1 = Eq(girls + 90, boys)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of swimming girls to non-swimming girls\n    equation3 = Eq(boys_swim + 120, boys_not_swim)  # Number of boys who can swim is 120 less than those who cannot\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Total girls is the sum of swimming and non-swimming girls\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Total boys is the sum of swimming and non-swimming boys\n  \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Number of pupils who can not swim = girls who cannot swim + boys who cannot swim\n    number_of_pupils_who_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return number_of_pupils_who_cannot_swim\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (num_rows - 1) * common_difference\n\n    total_athletes = (first_term + last_term) * num_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    ans = count_trailing_zeros(789)\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    # if each of the n schools sends exactly 3 participants, that would be the maximum\n    # number of schools to avoid any having 4 or more participants\n    # so we find the maximum number of schools by dividing the total participants by 3\n    # but since we can't have a fraction of a school, we take the ceiling to ensure at least 4 participants for the school with the most\n    max_participants_per_school = 3\n\n    num_schools = (100 + max_participants_per_school - 1) // max_participants_per_school\n\n    return num_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "网络故障，请重试"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Average score for Team A: 76\n    # Average score for Team B: 67\n    # Combined average score: 70\n    # Number of students in Team A: 20\n\n    # Total score for Team A = average score * number of students = 76 * 20\n    total_score_A = 76 * 20\n\n    # Combined average score = (total score of Team A + total score of Team B) / (number of students in A + number of students in B)\n    # 70 = (total score of Team A + total score of Team B) / (20 + x)\n    # (70 * (20 + x)) = total score of Team A + total score of Team B\n    # (70 * (20 + x)) = (76 * 20) + (67 * x)\n    # Solve for x\n    total_score_combined = 70 * (20 + x)  # This is the total score for both teams combined\n    total_score_B = 67 * x  # This is the total score for Team B\n    x = (total_score_combined - total_score_A) / total_score_B\n\n    students_team_B = (total_score_combined - total_score_A) / 67\n    \n    return students_team_B\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)  # Digits from 1 to 9\n    max_product = 0\n    min_product = float('inf')\n    \n    for perm in permutations(digits, 7):  # All permutations of 7 digits from the given range\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    difference = max_product - min_product\n    return difference\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_roll = 6\n    target_position = 25\n    minimum_rolls = (target_position - 1) // max_roll\n\n    if (target_position - 1) % max_roll != 0:\n        minimum_rolls += 1\n\n    return minimum_rolls\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    permut = list(permutations(digits, 3))\n    min_product = float('inf')\n\n    for i in permut:\n        for j in permut:\n            # Ensure all digits are unique across both numbers\n            if len(set(i + j)) == 6:\n                num1 = i[0]*100 + i[1]*10 + i[2]\n                num2 = j[0]*100 + j[1]*10 + j[2]\n                product = num1 * num2\n                if product < min_product:\n                    min_product = product\n    \n    return min_product\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 10):\n            if i + j == 15:\n                return 10 * i + j\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -100\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    return 2 - (-2 - 2) - (-2 - (-2 - 2))\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    result = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return result\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    # Start from the largest possible number less than 30\n    for num in range(29, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total_sum = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    hole_depth = 220\n    climb_rate = 40\n    slip_back = 10\n    effective_climb = climb_rate - slip_back\n    hours = 0\n\n    while hole_depth > climb_rate:\n        hole_depth -= effective_climb\n        hours += 1\n        \n    hours += 1  # Final climb to get out of the hole\n    return hours\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    initial_typists = 5\n    sick_typists = 2\n    remaining_typists = initial_typists - sick_typists\n    initial_words = 6000\n    target_words = 9000\n    initial_time_minutes = 20\n\n    words_per_typist_per_minute = initial_words / (initial_typists * initial_time_minutes)\n\n    required_time_minutes = target_words / (words_per_typist_per_minute * remaining_typists)\n\n    return required_time_minutes\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_cabbage = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_cost = price_cabbage * cabbages_bought\n    price_lettuce = total_cost / lettuces_bought\n\n    return price_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_on_shoes = 97\n    saved_money = total_money - spent_on_shoes\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_number_plants = 11\n    plants_removed = 8\n\n    original_intervals = original_number_plants - 1\n    new_number_plants = original_number_plants - plants_removed\n    new_intervals = new_number_plants - 1\n    \n    new_distance_between_plants = total_distance / new_intervals\n\n    return new_distance_between_plants\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time_hour = 13\n    start_time_minute = 52\n    end_time_hour = 14\n    end_time_minute = 5\n    \n    # Calculate the total duration (in minutes) of the call\n    duration_minutes = (end_time_hour * 60 + end_time_minute) - (start_time_hour * 60 + start_time_minute)\n    \n    cost_per_minute = 14  # cost per minute in pence\n    total_cost = duration_minutes * cost_per_minute  # total cost in pence\n    \n    return total_cost\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n\n    return total_payment\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # The three-digit numbers containing only 2 and 3 can have the following configurations:\n    # 222, 223, 232, 233, 322, 323, 332, 333 - Possible patterns for the digits\n    # However, we want to exclude the cases where a digit doesn't appear, i.e., 222 and 333\n    total_configurations = 3 ** 3  # Each digit can be either 2 or 3, and there are 3 digits\n    unwanted_configurations = 2    # 222 and 333 are the unwanted configurations\n    # Number of valid configurations is the difference\n    ans = total_configurations - unwanted_configurations\n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    one_day = timedelta(days=1)\n\n    current_date = start_date\n    sunday_count = 0\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # where Sunday is 6\n            sunday_count += 1\n        current_date += one_day\n\n    return sunday_count\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # There are 5 skiboards and 5 people (Pip, Bud, and 3 friends)\n    # The number of different ways everyone can pick their skiboards\n    # is simply the number of permutations of 5 items, which is 5!\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for the first two traffic lights\n    light1 = 30  # 0.5 minutes is 30 seconds\n    light2 = 45  # 0.75 minutes is 45 seconds\n    \n    # We now find the LCM of the first two traffic lights\n    lcm_first_two = lcm(light1, light2)\n\n    # The third light changes lights in sync every 9 minutes. Convert to seconds.\n    every_9_minutes = 9 * 60\n\n    # LCM of all three traffic lights\n    lcm_all = every_9_minutes\n    \n    # Check that the third light interval is at least 30 seconds and is a valid period that makes all three sync every 9 minutes\n    third_light = lcm_first_two\n    while third_light < 30 or lcm(lcm_first_two, third_light) != lcm_all:\n        third_light += 1\n\n    # Return the time period for the third light which is the smallest possible satisfying the conditions\n    return third_light\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the price of an apple tart, and y be the number of strawberry tarts.\n    x, y = symbols('x y')\n\n    # The price of a strawberry tart will be x + 0.40\n    # Total cost of apple tarts will be twice the number of strawberry tarts times the price of an apple tart: 2y * x\n    # Total cost of strawberry tarts will be the number of strawberry tarts times the price of a strawberry tart: y * (x + 0.40)\n    # Total amount spent on tarts is $40\n\n    equation1 = Eq(2 * y * x, y * (x + 0.40))  # She spent an equal amount on each type\n    equation2 = Eq(2 * y * x + y * (x + 0.40), 40)  # She paid a total of $40\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total number of tarts: strawberry tarts (y) + apple tarts (2y)\n    total_tarts = y + 2*y\n\n    return total_tarts.subs(solutions)\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_per_m = 1000\n    meters = 2\n    mm = meters * mm_per_m\n    return mm\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_pos_from_left = 18\n    tony_pos_from_right = 17\n    \n    henry_pos_from_right = total_children - henry_pos_from_left + 1\n    children_between_henry_and_tony = abs(henry_pos_from_right - tony_pos_from_right) - 1\n    \n    return children_between_henry_and_tony\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_amount = 4\n    paid_amount = 0.30 * initial_amount\n    amount_owed = initial_amount - paid_amount\n    return amount_owed\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pieces in the jigsaw puzzle\n    x = symbols('x')\n\n    # First day, fitted 20% of x\n    first_day_fitted = 0.20 * x\n\n    # Second day, fitted 60 more pieces\n    second_day_fitted = 60\n\n    # After the 2nd day, the ratio of fitted to unfitted is 2:5; therefore, fitted pieces are 2/7 of the total\n    fitted_pieces = (2/7) * x\n\n    # Equation for the number of pieces fitted after second day\n    equation = Eq(first_day_fitted + second_day_fitted, fitted_pieces)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_ten = total_numbers // 10\n    numbers_not_multiples_of_ten = total_numbers - multiples_of_ten\n    \n    percentage = (numbers_not_multiples_of_ten / total_numbers) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Since we know the number of cats, dogs, and rabbits, we can calculate the total legs without birds\n    total_legs_without_birds = 2 * 4 + 2 * 4 + 1 * 4  # 2 cats, 2 dogs, 1 rabbit (4 legs each)\n    \n    # Now calculate the remaining legs that belong to the birds\n    remaining_legs_for_birds = 28 - total_legs_without_birds  # total legs minus legs of cats, dogs and rabbits\n    \n    # Assuming birds have 2 legs\n    number_of_birds = remaining_legs_for_birds // 2  # dividing remaining legs by 2 legs per bird\n    \n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10  # time in hours\n\n    distance = (jack_speed + rose_speed) * time\n    \n    return distance\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    # Find the odd factors of 24\n    n = sum(filter(lambda x: 24 % x == 0 and x % 2 != 0, range(1, 25)))\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    original_melvin = 40\n    gained_from_nelson = 5/8 * original_melvin\n    melvin_after_gain = original_melvin + gained_from_nelson\n\n    loss_to_oliver_each = 1/4 * original_melvin\n    melvin_after_loss = melvin_after_gain - loss_to_oliver_each\n    nelson_after_loss = loss_to_oliver_each\n    oliver_after_loss = 2 * loss_to_oliver_each\n\n    gained_final_round = 1/8 * original_melvin\n    melvin_final = melvin_after_loss + gained_final_round\n    nelson_final = nelson_after_loss - gained_final_round\n    oliver_final = oliver_after_loss\n\n    initial_nelson_and_oliver = melvin_final * 2\n    initial_melvin_nelson_oliver = initial_nelson_and_oliver + original_melvin\n\n    return initial_melvin_nelson_oliver\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let x be the age when Polly's age equals the sum of her children's ages\n    # At that moment, her first child will be x - 20 years old\n    # Her second child will be x - 22 years old\n    # Her third child will be x - 24 years old\n    \n    # So, we have the equation:\n    # Polly's age (x) = Sum of children's ages\n    # x = (x - 20) + (x - 22) + (x - 24)\n    \n    # Solve the equation\n    x = symbols('x')\n    equation = Eq(x, (x - 20) + (x - 22) + (x - 24))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from sympy import primefactors\n\n    # list of the cards\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # find the prime factors of each card\n    card_factors = {card: primefactors(card) for card in cards}\n\n    # generate all possible pairs and triplets\n    pairs = [(card_factors[cards[i]], card_factors[cards[j]]) \n             for i in range(len(cards)) \n             for j in range(i+1, len(cards))]\n\n    triplets = [(card_factors[cards[i]], card_factors[cards[j]], card_factors[cards[k]]) \n                for i in range(len(cards)) \n                for j in range(i+1, len(cards)) \n                for k in range(j+1, len(cards))]\n\n    # check which pair has a product equal to one of the triplets\n    for pair in pairs:\n        for triplet in triplets:\n            # flatten the pair and triplet factors\n            flattened_pair = [factor for sublist in pair for factor in sublist]\n            flattened_triplet = [factor for sublist in triplet for factor in sublist]\n            \n            # sort the lists to compare\n            flattened_pair.sort()\n            flattened_triplet.sort()\n\n            # check for equality using a set to ignore duplicates\n            if set(flattened_pair) == set(flattened_triplet):\n                # find the unmatched card\n                pair_cards = [card for sublist in pair for card in sublist if card != 1]\n                triplet_cards = [card for sublist in triplet for card in sublist if card != 1]\n                unmatched_card = set(cards) - set(pair_cards) - set(triplet_cards)\n                return list(unmatched_card)[0]\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    sweets_received = 7\n    total_sweets = initial_sweets + sweets_received\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiplier = 5\n\n    weight_of_suitcase = total_weight_with_presents / multiplier\n\n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(1, 10):\n        small_boxes = (50 - (big_boxes * 6)) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Combined age of the 2 dogs 4 years ago\n    combined_age_4_years_ago = 10\n    # Since 4 years have passed, we add 4 * 2 (for each dog) to the combined age\n    combined_age_now = combined_age_4_years_ago + 4 * 2\n    # We need to find the combined age in 2 years, so we add 2 * 2 (for each dog) to the combined age now\n    combined_age_in_2_years = combined_age_now + 2 * 2\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # According to the problem, we have two equations:\n    # y - x = 39 (1)\n    # x + y = 59 (2)\n    # Adding the two equations (1) + (2) to eliminate y gives us:\n    # 2x = 59 - 39 = 20\n    # Solving for x gives us the value of the smaller number:\n    x = 20 / 2\n    return x\n\nans = solution()"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    total_amount = 340\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14*m, 8*(10 + m) - 3)\n\n    m_value = solve(equation, m)\n\n    return m_value[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years_passed = 0\n    \n    while True:\n        if mother_age == 3 * (justin_age + years_passed):\n            return years_passed\n        years_passed += 1\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from math import prod\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the equations\n    A, B, C = symbols('A B C')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Since we're looking for natural numbers, we filter the non-natural number solutions\n    natural_solutions = [s for s in solutions if all(x > 0 and x.is_integer for x in s)]\n\n    # Assuming there is one unique solution set of natural numbers\n    A, B, C = natural_solutions[0]\n\n    # Calculate the sum of A, B, and C\n    sum_of_abc = A + B + C\n\n    return sum_of_abc\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Cora and Qingle's sweets\n    Cora, Qingle = symbols('Cora Qingle')\n\n    # Equation: After giving 8 sweets, Qingle has 4 more sweets than Cora\n    equation1 = Eq(Qingle + 8, Cora - 8 + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1), (Cora, Qingle))\n    \n    # The difference in the number of sweets they have at first\n    difference = solutions[Cora] - solutions[Qingle]\n    \n    return difference\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest = 0\n    current = 0\n    for warren_add in range(20, 0, -1):\n        current += warren_add\n        largest = max(largest, current)\n        naida_subtract = 21 - warren_add\n        current -= naida_subtract\n    return largest\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the graph passes through the origin (0,0), b=0.\n    # We need to find the slope m, using the point (4,8).\n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # The point the line passes through\n    \n    # Calculate the slope (m) using the formula (y2 - y1) / (x2 - x1)\n    m = (y2 - y1) / (x2 - x1)\n    \n    # The equation of the line will thus be y = mx\n    return f\"y={m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of seashells Jane has be 5x and Eric has 7x\n    jane, eric = symbols('jane eric')\n    \n    # Given initial ratio\n    equation1 = Eq(jane, 5 * eric / 7)\n    # After transferring 6 seashells from Eric to Jane\n    equation2 = Eq(jane + 6, 11 * (eric - 6) / 13)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jane, eric))\n\n    # Total number of seashells\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / total_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    years = 11\n    \n    total_amount = principal + (principal * interest_rate * years)\n\n    return total_amount\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n\n    # Calculate the product\n    product = 48 * 925 * 38 * 435\n\n    # Prime factorization of the product\n    prime_factors = factorint(product)\n\n    # Count the number of 2's and 5's in the prime factorization\n    twos = prime_factors.get(2, 0)\n    fives = prime_factors.get(5, 0)\n\n    # The number of trailing zeroes is the minimum of the number of 2's and 5's\n    return min(twos, fives)\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(''.join(map(str, p))) for p in permutations(digits) if p[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Invert the operation of one third getting off\n    original_passengers = remaining_after_first_stop / (1 - 2/5)  # Invert the operation of two fifths getting off\n\n    return int(original_passengers)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for d in range(1, 10):  # Since d is the last digit, it can't be 0\n        a = d // 4\n        b = a - 1\n        c = (4 * d) % 10  # When multiplied by 4, c must be last digit\n        if a != b and b != c and c != d and a != d and a != 0 and b >= 0 and c < 10:\n            abcd = a * 1000 + b * 100 + c * 10 + d\n            dcba = d * 1000 + c * 100 + b * 10 + a\n            if abcd * 4 == dcba:\n                return abcd\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "from sympy import symbols, Eq, solve, pi, integrate\n\ndef solution():\n    # Defining the coordinate system\n    x, y = symbols('x y')\n  \n    # Limits of the right isosceles triangle with waist length of 2\n    lower_x = 0\n    upper_x = 2\n    lower_y = 0\n    upper_y = -x + 2 \n  \n    # Function for the circle with radius 1 centered at the origin (right angle vertex)\n    circle_eq = Eq(x**2 + y**2, 1)\n  \n    # Solving for the intersection points of the triangle and the circle\n    int_points = solve((circle_eq, Eq(y, -x + 2)), (x, y))\n  \n    # The circle intersects the hypotenuse at a certain x\n    int_x = int_points[0][0]\n  \n    # The area of the triangle\n    triangle_area = 1/2 * 2 * 2\n  \n    # The probability is the area under the quarter circle with radius 1 inside the triangle\n    # Divide by the total area of the triangle\n    circle_area_integral = integrate(\n        solve(circle_eq, y)[0],\n        (x, 0, int_x)\n    )\n    circle_area = float(circle_area_integral)\n  \n    prob = circle_area / triangle_area\n  \n    return prob\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    piano_and_violin_players = piano_players // 4\n    \n    neither = total_pupils - (piano_players + violin_players - piano_and_violin_players)\n    return neither\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    subtracted_value = 10\n    divisor = 3\n\n    start_value = (final_result - subtracted_value) * divisor\n\n    return start_value\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate time spent walking to the bus stop\n    walking_to_bus = time_caught_bus - time_left_school\n    # Calculate the time when she got off the bus\n    got_off_bus = time_caught_bus + time_bus_trip\n    # Calculate walking from bus drop off to home\n    walking_from_bus = time_got_home - got_off_bus\n\n    # Total walking time\n    total_walking = walking_to_bus + walking_from_bus\n    total_walking_minutes = total_walking.total_seconds() / 60\n\n    return int(total_walking_minutes)\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_constant = 30000 + 452\n    right_side_coefficient = 2\n\n    missing_number = (left_side - right_side_constant) // right_side_coefficient\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    percentage = 20 / 100\n    total = 8880\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    length_per_piece_m = (total_length_cm / 2) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_sum = mean_value * (len(numbers) + 1)\n    sum_of_numbers = sum(numbers)\n    a = total_sum - sum_of_numbers\n    return a\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_for_remaining_test = total_marks_for_3_tests - 172\n    return marks_for_remaining_test\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Number of socks needed to be taken out for each color to ensure at least one pair\n    # 1 white + 1 grey + 1 black + 1 any color to guarantee a pair\n    socks_needed = 1 + 1 + 1 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7 # Including Victoria\n    total_rows = 1 + 1 + 8 # Including Victoria's row\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(((number + 3) / 4) * 9, 81)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time_period = 1\n\n    interest = principal * interest_rate * time_period\n\n    return interest\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 2, 17)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Numerator sum\n    numerator_sum = sum(1/(i * (i + 1)) for i in range(1, 20, 2))\n\n    # Denominator sum\n    denominator_sum = sum(1/(i * (31 - i)) for i in range(11, 16))\n\n    # Final result\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_covered = 6300 - 1800  # distance covered from 8.00 am to 8.30 am\n    time_elapsed = 30  # time in minutes from 8.00 am to 8.30 am\n    \n    # Calculate the rate of jogging in meters per minute\n    rate_of_jogging = distance_covered / time_elapsed\n    \n    # Calculate the time taken to cover the remaining 1800m\n    remaining_time = 1800 / rate_of_jogging\n    \n    # Calculate the time of arrival at friend's house in minutes after 8.00 am\n    time_of_arrival = 30 + remaining_time  # add 30 minutes as he started at 8.00 am\n    \n    # Convert time_of_arrival to hours and minutes\n    hours = 8 + int(time_of_arrival // 60)\n    minutes = int(time_of_arrival % 60)\n    \n    return f\"{hours}:{minutes:02d}\"\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    x = symbols('x')\n    # Mr. Smith's mixture\n    sugar_smith = 300 * 0.5 + 600 * 0.2\n    total_volume_smith = 300 + 600\n\n    # Mrs. Smith's mixture\n    sugar_mrs_smith = 700 * 0.1 + 300 * (x / 100)\n    total_volume_mrs_smith = 700 + 300\n\n    # Setting equations for equal sugar percentage\n    equation = Eq(sugar_smith / total_volume_smith, sugar_mrs_smith / total_volume_mrs_smith)\n\n    # Solve for x and round to two decimal places\n    sol = solve(equation, x)\n    sugar_percentage = round(sol[0], 2)\n\n    return sugar_percentage\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candies = 36\n    candies_given_to_lily = (3/4) * initial_candies\n    remaining_candies = initial_candies - candies_given_to_lily\n    candies_given_to_brother = (1/3) * remaining_candies\n    final_candies = remaining_candies - candies_given_to_brother\n    return final_candies\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # May's current age\n    may_age_now = 7\n\n    # Let kenny_age_now be Kenny's current age and kb_age_now be his brother's current age\n    kenny_age_now, kb_age_now = symbols('kenny_age_now kb_age_now')\n    \n    # When May is 10, Kenny and his brother's age sum will be three times May's age then\n    future_sum_ages = Eq((kenny_age_now + 3) + (kb_age_now + 3), 3 * (may_age_now + 3))\n    # Kenny is 2 years older than his brother \n    kenny_age_diff = Eq(kenny_age_now, kb_age_now + 2)\n    \n    # Solve the equations\n    solutions = solve((future_sum_ages, kenny_age_diff), (kenny_age_now, kb_age_now))\n    kenny_current_age = solutions[kenny_age_now]\n\n    # Difference in age between Kenny and May\n    age_difference = kenny_current_age - may_age_now\n    \n    return age_difference\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    min_apples_per_child = 1\n    num_children = 5\n\n    # Each of the other four children gets at least one apple.\n    remaining_apples = total_apples - (min_apples_per_child * (num_children - 1))\n    \n    # The most apples one child can get is the remaining apples after the rest have at least one\n    max_apples_for_one_child = remaining_apples\n    \n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Convert the weight from kilograms to grams\n    total_grams = 5 * 1000\n\n    # Calculate the number of bags she can make\n    num_bags = total_grams / 250\n\n    # Calculate total revenue from selling all the bags\n    total_revenue = num_bags * 0.65\n\n    # Calculate the cost price of the sweets\n    total_cost = 10\n\n    # Calculate profit\n    profit = total_revenue - total_cost\n\n    # Calculate the percentage profit\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between 4th and 9th teeth involves 5 gaps.\n    gaps_between_4_and_9 = 9 - 4\n    \n    # Calculate the gap distance in millimetres.\n    distance_per_gap = 30 / gaps_between_4_and_9\n    \n    # The total number of gaps is one less than the number of teeth.\n    total_gaps = 100 - 1\n    \n    # Calculate the length of the comb in millimetres.\n    length_in_mm = total_gaps * distance_per_gap\n    \n    # Convert the length from millimetres to centimetres.\n    length_in_cm = length_in_mm / 10\n    \n    return length_in_cm\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Price per unit for donuts and muffins\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n    \n    # Total number of more donuts than muffins\n    more_donuts = 54\n\n    # Equating the money spent on donuts to half the money spent on muffins\n    # Total money spent equals money spent on donuts plus money spent on muffins\n    # Let x be the number of muffins Amy bought\n\n    # Amy spent the same amount on donuts and muffins. Therefore, the cost of the donuts\n    # she bought (x + 54 donuts) is the same as the cost of the x muffins she bought.\n    # Equate the expressions and solve for x to find the number of muffins.\n\n    # money_spent_on_muffins = price_per_muffin * x\n    # money_spent_on_donuts = price_per_donut * (x + 54)\n    # money_spent_on_donuts = 2 * money_spent_on_muffins\n\n    # price_per_donut * (x + 54) = 2 * (price_per_muffin * x)\n    # (10/7) * (x + 54) = 2 * ((6/3) * x)\n    # Solve for x to find the number of muffins bought by Amy\n\n    # x = number of muffins, y = total money Amy had\n    x = (2 * (6/3)) / ((10/7) - (2 * (6/3))) * 54\n    \n    # Now find the total amount of money spent, which is the amount for donuts plus the amount for muffins\n    # Total money = price_per_donut * (x + 54) + price_per_muffin * x\n    # Because price_per_donut * (x + 54) is equal to twice the money spent on muffins (by above equation)\n    # Total money = 2 * (price_per_muffin * x) + price_per_muffin * x\n    # Total money = 3 * (price_per_muffin * x)\n    total_money = 3 * price_per_muffin * x\n\n    return total_money\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age on 1st December 2008: 80 years old\n    grandmother_age_2008 = 80\n    \n    # Mum's age on 1st December 1996: 40 years old\n    mum_age_1996 = 40\n    \n    # Calculate the year when Mum was 25\n    year_mum_was_25 = 1996 - (40 - 25)\n    \n    # Calculate the difference in years between 2008 and the year when Mum was 25\n    years_diff = 2008 - year_mum_was_25\n    \n    # Calculate Grandmother's age when Mum was 25\n    grandmother_age_when_mum_was_25 = grandmother_age_2008 - years_diff\n    \n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5! # Total ways to arrange 5 people\n    adjacent_ways = 2! * 4!  # Ways two people can stand next to each other and the rest arrange\n    ans = total_ways - adjacent_ways\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = total_vegetables * (2/3)\n    remaining_vegetables = total_vegetables - monday_sold\n    tuesday_sold = remaining_vegetables * (2/5)\n    total_sold = monday_sold + tuesday_sold\n    return total_sold\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total_sum = 0\n    for i in range(5, 856, 15):\n        total_sum += i - (i - 5)\n    return total_sum\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend needs to get at least one ice-cream cone,\n    # we give one to each friend first. Now we have 5 - 3 = 2 ice-cream cones left.\n    \n    # The problem now reduces to how many ways we can distribute 2 identical\n    # ice-cream cones to 3 friends, which is equivalent to finding the number of\n    # non-negative integer solutions to the equation:\n    # z + x + s = 2, where z, x, s represent the number of cones for Zyan, Xuan Ying, and SiCheng respectively.\n    \n    # This is a classic stars and bars problem, where we want to place 2 indistinguishable\n    # items into 3 distinguishable bins, which equals to finding the number of ways to arrange\n    # the items and the dividers (2 items + 2 dividers = 4 objects in total).\n    # Number of ways = (number of objects)! / (number of items)! / (number of dividers)!\n    \n    from math import factorial\n    \n    num_objects = 2 + 3 - 1  # items + dividers\n    num_items = 2\n    num_dividers = 3 - 1  # since we have 3 bins we need 2 dividers\n    \n    ans = factorial(num_objects) // (factorial(num_items) * factorial(num_dividers))\n    return ans\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # We need to ensure we get 16 balls of one color and 13 balls of another color.\n    # To determine the worst case scenario, we consider the worst case of not getting 16 balls of the same color.\n    # This would involve picking 15 balls of each color (one less than needed for any color to have 16).\n    # For the colors with less than 16 balls, picking all balls ensures we still don't have 16 of the same color.\n    # Then, for the next color, we will have to pick all balls of that color to be sure we have at least 16 of one color.\n    # Since we also need 13 balls of another color, we need to pick at least 12 balls from each of the remaining colors.\n    # After we have 16 balls of one color, we need to continue picking one more ball to ensure 13 of another color.\n\n    # Total balls picked without having 16 of one color and 13 of another:\n    # 15 balls each from the colors with more than 16 balls (3 colors in total: 26, 34, and 40)\n    # All from the colors with less than 16 balls (1 color: 16)\n    # All from the color with exactly 16 balls to ensure we have at least 16 of one color (1 color: 24)\n    # 12 balls each from the remaining colors (1 color: 16)\n    total_picked = (15 * 3) + 16 + 24 + (12 * 1)\n    # Then pick one more ball to ensure we have 13 of another color\n    total_picked += 1\n\n    return total_picked\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for containers P and Q\n    P, Q = symbols('P Q')\n\n    # The equation for the problem\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (P, Q))\n\n    # Container Q amount is the second element of the solution tuple\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits / 4\n    left_for_freddie = total_biscuits - given_to_sister\n    return left_for_freddie\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for cost of one chair and one table\n    chair, table = symbols('chair table')\n\n    # Given equations\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n\n    # Solve equations\n    solved_values = solve((equation1, equation2), (chair, table))\n\n    return solved_values[table]\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    B, C, A = symbols('B C A')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    solutions = solve((equation1, equation2, equation3), (B, C, A))\n    return solutions[B]\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    original_money = spent / (1 - remaining_fraction)\n    return original_money\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    return (125 + 75) * (630 - 616)\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n\n    total_coins = joann + sana + nancy\n\n    return total_coins\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    unit_rate = pizzas_initial / people_initial\n    pizzas_final = unit_rate * people_final\n    \n    return int(pizzas_final) if pizzas_final.is_integer() else round(pizzas_final)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    \n    while num_teams > 1:\n        num_teams /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # total distance apart is 20 miles\n    total_distance = 20\n    # remaining distance between them is 4 miles\n    remaining_distance = 4\n    # ratio of Lucas's speed to his mother's speed is 3:5\n    ratio_lucas = 3\n    ratio_mother = 5\n    # total parts when the ratio is combined\n    total_parts = ratio_lucas + ratio_mother\n    # distance covered by Lucas is the ratio of his speed to the total parts of both speeds\n    distance_lucas = (ratio_lucas / total_parts) * (total_distance - remaining_distance)\n\n    return distance_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    common_difference = -1  # Since the sequence is decreasing\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term and a_n is the nth term.\n    # nth term (a_n) can be calculated as: a_n = a_1 + (n - 1) * d\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "import math\n\ndef solution():\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    total_items = 69\n    difference = 17\n    \n    cards = (total_items - difference) // 2\n    wands = cards + difference\n    \n    return wands\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of students in the big class (b) and small class (s)\n    b, s = symbols('b s')\n\n    # Create the equations based on the problem\n    # Big class: 2b apples and 3b oranges\n    # Small class: 2s apples and 2s oranges\n    # Total: 48 apples and 55 oranges\n    equation1 = Eq(2 * b + 2 * s, 48)  # Equation for the apples\n    equation2 = Eq(3 * b + 2 * s, 55)  # Equation for the oranges\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, s))\n\n    # Return the number of students in the small class\n    return solutions[s]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    total_lollipops = 10\n    total_cost = cost_per_lollipop * total_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_amount = 160\n    new_amount = 40\n\n    percent_change = ((new_amount - original_amount) / original_amount) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    # Let Danny's current age be d and Efron's current age be e.\n    from sympy import symbols, Eq, solve\n\n    d, e, n = symbols('d e n')\n    # According to the problem, d = e + 30\n    equation1 = Eq(d, e + 30)\n    # The ratio of Danny’s age to Efron’s age now is 8:3\n    equation2 = Eq(d / e, 8/3)\n    # In n years, the ratio of Danny’s age to Efron’s age will be 5:3\n    equation3 = Eq((d + n) / (e + n), 5/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, e, n))\n\n    # We need the value of n, which represents the number of years\n    return solutions[n]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    butter_per_cookie = 40 / 100\n    butter_needed = butter_per_cookie * 150\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "网络故障，请重试"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):  # Second digit cannot be 0\n        first_digit = 1 + 2 * second_digit\n        if 1 <= first_digit <= 9:  # First digit must be between 1 and 9\n            for third_digit in range(0, 10):\n                sum_of_digits = first_digit + second_digit + third_digit\n                if 9 < sum_of_digits < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ball, racket = symbols('ball racket')\n    \n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    number = 224\n    factors = 0\n    \n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    \n    return factors\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # system of equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25) # 3 apples and 2 bananas cost £1.25\n    equation2 = Eq(apple + banana, 0.48) # 1 apple and 1 banana cost £0.48\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate number of games in the group stage\n    # Each group has 4 teams, and they play a single round-robin tournament\n    # where each team plays against every other team once.\n    # Therefore, each group will play a total of C(4, 2) = 4! / (2! * (4 - 2)!) = 6 games.\n    # Since there are 8 groups, this must be multiplied by 8.\n    group_games = 8 * (4 * 3 // 2)  # 4 choose 2, simplified\n\n    # Calculate number of games in the knockout round\n    # This includes Round of 16, Quarter-finals, Semi-finals, Third place play-off, and Final\n    # Round of 16 has 8 games (16 teams / 2 teams per match)\n    # Quarter-finals has 4 games (8 teams / 2 teams per match)\n    # Semi-finals has 2 games (4 teams / 2 teams per match)\n    # Third place play-off has 1 game (2 teams / 2 teams per match)\n    # Final has 1 game (2 teams / 2 teams per match)\n    knockout_games = 8 + 4 + 2 + 1 + 1\n\n    # Total number of games is the sum of games in the group stage and knockout round\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    # Total number of matches\n    total_matches = 15\n    # To find n, we solve the equation n * (n-1) / 2 = total_matches\n    # where n * (n-1) / 2 is the total number of matches played by n teams.\n    # We will use a simple iteration to find the number n that satisfies the equation.\n    n = 1\n    while n * (n - 1) / 2 != total_matches:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / (1 - 0.30)\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if (correct * 6) - (incorrect * 2) == 44:\n            return correct\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10): \n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirts = symbols('shorts tshirts')\n\n    equation1 = Eq(2 * shorts + 3 * tshirts, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirts, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirts))\n\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = second_term + common_difference\n    return third_term\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, solve\n\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n    pentagons = 2  # Given number of pentagons\n\n    # Equations based on the problem statement\n    # Each triangle has 3 sides, quadrilateral has 4 sides, pentagon has 5 sides\n    equation_sides = 3 * triangles + 4 * quadrilaterals + 5 * pentagons - 394\n\n    # Quadrilaterals are 82 more than triangles\n    equation_shapes = quadrilaterals - triangles - 82\n\n    # Solve the system of equations\n    solutions = solve((equation_sides, equation_shapes), (triangles, quadrilaterals))\n\n    # Return the number of quadrilaterals\n    return solutions[quadrilaterals]\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # there are 3 gaps between 4 posts\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # 3, 5 and 7 are prime and thus lcm of 3, 5 and 7 is 3*5*7 = 105\n    # Any number that is divisible by 3, 5, and 7 is also divisible by 105\n    # We can check multiples of 105 that are three-digit numbers starting from the first (105)\n\n    for i in range(1, 10):  # Checking for three-digit numbers\n        number = 105 * i\n        if str(number).startswith('6'):\n            return number\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-girl teams\n    # All-boys teams will be 2x, given by the problem statement\n    \n    # Total teams\n    total_teams = 150 // 3\n\n    # 15 teams with only 1 boy means there are 2 girls in each of those teams\n    # So, 15 teams contribute to 30 girls\n\n    # 27 teams have two or more boys, \n    # but we already counted the all-boys teams as 2x, \n    # so (27 - 2x) teams will have exactly two boys and one girl each.\n    # So, (27 - 2x) teams contribute to (27 - 2x) girls\n\n    # The remaining teams must be the all-girl teams which is x,\n    # each contributing 3 girls, so x teams contribute to 3x girls\n\n    # Total number of students = number of girls + number of boys\n    # Total number of girls = 30 + (27 - 2x) + 3x\n    # Total number of boys = 150 - Total number of girls\n    \n    # Since all teams are accounted for and 27 includes the all-boys teams, \n    # we can write the equation:\n    # total_teams = 15 + (27 - 2x) + x\n    # 150 // 3 = 15 + 27 - 2x + x\n    # 50 = 42 - x\n    x = 42 - 50  # This gives us the number of all-girl teams\n    \n    # Number of girls in the level = 30 + (27 - 2x) + 3x\n    number_of_girls = 30 + (27 - 2 * x) + 3 * x\n    \n    return number_of_girls\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of apples, peaches, and pears\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers to base 10 from base 7\n    number1_base7 = '61'\n    number2_base7 = '34'\n    \n    number1_base10 = int(number1_base7, 7)\n    number2_base10 = int(number2_base7, 7)\n    \n    # Perform subtraction in base 10\n    result_base10 = number1_base10 - number2_base10\n    \n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    total_candies = initial_students * candies_each_initially\n    new_students = initial_students + 1\n    candies_each_after = total_candies // new_students\n    return candies_each_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Assume the distance between Town A and Town B is d km\n    # If Ben cycles at 10 km/h, he will arrive at 10 am, so we can write:\n    # d / 10 = time_taken_at_10kmph\n    # If Ben cycles at 15 km/h, he will arrive at 8 am, so we can write:\n    # d / 15 = time_taken_at_15kmph\n    # The difference in time is 2 hours (from 8 am to 10 am)\n\n    # Let's express the times taken in terms of distance\n    time_taken_at_10kmph = d / 10\n    time_taken_at_15kmph = d / 15\n\n    # The difference between the times is 2 hours:\n    # time_taken_at_10kmph - time_taken_at_15kmph = 2\n    # (d / 10) - (d / 15) = 2\n\n    # To solve for d:\n    # Multiply both sides of the equation by 30 (LCM of 10 and 15) to get rid of the denominators:\n    # 3d - 2d = 60\n    # d = 60\n    d = 60\n\n    # Ben wants to arrive at 9 am, which means the time taken should be 1 hour less than the time taken at 10 km/h\n    # Time taken at desired speed is time_taken_at_10kmph - 1\n    # time_taken_at_desired_speed = (d / 10) - 1\n    time_taken_at_desired_speed = (d / 10) - 1\n\n    # Now we calculate the desired speed:\n    # desired_speed = d / time_taken_at_desired_speed\n    desired_speed = d / time_taken_at_desired_speed\n    \n    return desired_speed\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # We want to ensure Dilly has at least one matching pair.\n    # If Dilly picks one of each color without regard to left or right, that's 2 gloves.\n    # But since these could be one left and one right, there's no guarantee of a matching pair.\n    # So Dilly needs to take more than this.\n    \n    # Now, let's look at the worst-case scenario for each color after taking 2 gloves (one of each).\n    # For blue, there will be 1 left and 3 right remaining. Dilly can take 4 more blue gloves to guarantee a pair.\n    # For green, there will be 2 left and 4 right remaining. Dilly can take 3 more green gloves to guarantee a pair.\n    \n    # Therefore, Dilly should take the larger of these two numbers, plus the initial 2 gloves to ensure at least one matching pair.\n    # This is because after taking those gloves, there is guaranteed to be at least one color with both a left and a right glove.\n    # The worst-case scenario is picking all green or all blue before getting a matching pair.\n    \n    # Minimum gloves needed to ensure one pair of the same color (worst case):\n    # 2 initial gloves (one of each color), plus 4 more blue gloves, for a total of 6 gloves.\n    return 6\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    x = 1\n    while True:\n        if (x % 4 == 3) and (x % 5 == 4) and (x % 7 == 6):\n            return x\n        x += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_price = 120\n    depreciation_rate = 0.04\n    years = 5\n    value_after_years = initial_price * (1 - depreciation_rate) ** years\n    \n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "def solution():\n    from math import factorial\n    word = \"REVISE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_ways = factorial(len(word))\n    \n    for letter, count in letter_counts.items():\n        total_ways //= factorial(count)\n        \n    return total_ways\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    boys_diff = 52\n\n    # initial guess based on the fact that every layer difference will add 4 students to the boys\n    layer = boys_diff // 4\n\n    while True:\n        # boys count for the current layer guess: (layer*2 + 1)**2 - layer**2\n        boys_count = (2 * layer + 1)**2 - layer**2\n        # girls count for current layer guess: total_students - boys_count\n        girls_count = layer**2\n        # check the difference between boys and girls\n        if boys_count - girls_count == boys_diff:\n            total_students = boys_count + girls_count\n            return total_students\n        layer += 1\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbols for Eugene's and Yuna's number of pins before Yuna bought more\n    eugene, yuna = symbols('eugene yuna')\n    \n    # Equation 1: Eugene had 3 times as many pins as Yuna initially\n    equation1 = Eq(eugene, 3 * yuna)\n    \n    # Equation 2: After Yuna bought 76 pins, she had 7/9 as many pins as Eugene\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n    \n    # Eugene's number of pins\n    return solutions[eugene]\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n\n    ans = hundreds * 100 + tens * 10 + ones\n\n    return ans\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    sum_digits = 1 + 2 + 3 + 4 + 5\n    # The digit 'A' must be such that the number is divisible by 9.\n    # This means that 1 + 2 + 3 + 4 + 5 + A should be divisible by 9.\n    for A in range(10):\n        if (sum_digits + A) % 9 == 0:\n            # Find the remainder when the number is divided by 4.\n            # Only the last two digits affect the remainder when dividing by 4.\n            remainder = (45 * 10 + A) % 4\n            return remainder\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers')\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    total = solve(equation, total_flowers)\n\n    return total[0]\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure Kelly's victory, she needs to make it so that she can always take the last match.\n    # If Kelly takes 1 match at first, Dan can take 2 matches, leaving 8.\n    # Kelly can then take either 1 or 2 matches, but Dan can always adjust his choice,\n    # to make sure that Kelly cannot take the last one (since 8 is divisible by 3).\n    # So, Kelly should not take 1 match.\n    # If Kelly takes 2 matches at first, there are 9 left. No matter how Dan plays,\n    # Kelly can always make sure that Dan is left with a multiple of 3 after her turn.\n    # And since 9 is not divisible by 3, Kelly can always win.\n\n    # Kelly must take 2 matches in her first turn to ensure victory.\n    return 2\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(2*n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    # Converting mixed numbers to improper fractions\n    num1 = 5 + Fraction(1, 7)\n    num2 = 3 + Fraction(3, 11)\n    num3 = 1 + Fraction(13, 23)\n    \n    denom1 = 3 + Fraction(3, 7)\n    denom2 = 2 + Fraction(2, 11)\n    denom3 = 1 + Fraction(1, 23)\n    \n    # Adding improper fractions\n    numerator = num1 + num2 + num3\n    denominator = denom1 + denom2 + denom3\n    \n    # Dividing the two sums\n    result = numerator / denominator\n    \n    return result\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Increment in length as a multiplier (10% increase)\n    length_multiplier = 1 + (10 / 100)\n    # Decrement in breadth as a multiplier (reduced to 4/5)\n    breadth_multiplier = 4 / 5\n    # Increment in height as a ratio (11:10)\n    height_multiplier = 11 / 10\n\n    # Calculate the new volume as a percentage of the original volume\n    new_volume_percentage = length_multiplier * breadth_multiplier * height_multiplier * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "from sympy import symbols, diophantine, Eq\n\ndef solution():\n    # Define the variables\n    x, y = symbols('x y', integer=True)\n    \n    # Define the equation\n    equation = Eq(2*x + 3*y, 77)\n    \n    # Use diophantine to find integer solutions\n    solutions = diophantine(equation)\n    \n    # Number of solutions is the answer\n    ans = len(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    # Let the number of cars be x and the number of motorcycles be y\n    # We know that:\n    # 1 car has 4 wheels and 1 motorcycle has 2 wheels\n    # x cars and y motorcycles are there, so\n    # 4x + 2y = total_wheels\n    # x + y = total_vehicles (since each vehicle is either a car or a motorcycle)\n    # Thus, we can deduce the second equation as:\n    # x = total_vehicles - y\n    # Substituting the value of x from the second equation in the first\n    # 4(total_vehicles - y) + 2y = total_wheels\n    # Simplify the equation to find the value of y\n    for y in range(total_vehicles + 1):\n        x = total_vehicles - y\n        if 4 * x + 2 * y == total_wheels:\n            return x\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the sticker quantity variables\n    jason, nicole = symbols('jason nicole')\n\n    # Jason's initial number of stickers\n    jason_initial = 20\n    # Nicole ended up with 5 more stickers than Jason after giving him 18\n    nicole_final = jason + 5\n    # Jason ended up with 18 more stickers after Nicole gave them to him\n    jason_final = jason_initial + 18\n\n    # Equation representing the transaction of stickers\n    transaction_eq = Eq(nicole_final, nicole - 18)\n    # Equation representing that Jason's final amount is 5 less than Nicole's\n    jason_eq = Eq(jason_final, nicole_final)\n\n    # Solve the equations\n    solutions = solve((transaction_eq, jason_eq), (jason, nicole))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_marshals = 9\n    \n    # Convert km to m\n    total_distance_m = total_distance_km * 1000\n    \n    # Number of intervals is one less than the number of marshals\n    intervals = total_marshals - 1\n    \n    distance_between_marshals = total_distance_m / intervals\n    \n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_fast = 180\n    time_fast = 6\n    speed_slow = 120\n    time_slow = 8\n    \n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n    \n    total_distance = distance_fast + distance_slow\n    \n    return total_distance\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total_score = 74 * 7\n    correct_total_score = incorrect_total_score - (81 - 18)\n    correct_average_score = correct_total_score / 7\n    return correct_average_score\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n    interest_first_year = principal * interest_rate\n    principal_second_year = principal + interest_first_year\n    interest_second_year = principal_second_year * interest_rate\n    return interest_second_year\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the total tiles\n    total_tiles = 400\n    \n    # Initialize the layer, start with 1 for the outermost layer\n    layer = 1\n    # Initialize counters for red and green tiles\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        # Calculate the number of tiles in the current layer\n        layer_tiles = (layer * 2 - 1)**2\n        \n        # Subtract the number of tiles in the current layer from the total\n        total_tiles -= layer_tiles\n        \n        # If we are at an odd layer, it is red, otherwise it is green\n        if layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        \n        # Move on to the next layer (inner layer)\n        layer += 1\n    \n    # Since we might subtract too many tiles in the last layer, we add back the over-counted tiles\n    # The color of these tiles is the opposite of the color from the last layer\n    if layer % 2 == 1:\n        green_tiles -= abs(total_tiles)\n    else:\n        red_tiles -= abs(total_tiles)\n    \n    # Calculate the difference between red and green tiles, and the dominant color\n    tile_difference = abs(red_tiles - green_tiles)\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    \n    # The answer is the amount of tiles of the dominant color more than the other color\n    ans = tile_difference\n    return ans\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_value = 1 + (4/7)\n    ans = round(decimal_value, 1)\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let the widget sales for Megacorp in 2014 be x\n    # Then the widget sales for Vastco in 2014 is x + 0.68x = 1.68x\n    # Vastco's sales in 2015 is 1.32 times the sales in 2014, thus 1.68x * 1.32\n    vastco_2015_sales = 1.68 * 1.32\n\n    # In 2015, Vastco sold 44% more widgets than Megacorp, so\n    # Vastco's sales from 2015 divided by Megacorp's sales from 2015 equals 1.44\n    # Hence Megacorp's sales in 2015 is Vastco's 2015 sales divided by 1.44\n    megacorp_2015_sales = vastco_2015_sales / 1.44\n\n    # The rate of increase for Megacorp is ((sales in 2015 / sales in 2014) - 1) * 100%\n    # Megacorp's sales increased by ((Megacorp's sales 2015 / x) - 1) * 100\n    megacorp_increase_rate = ((megacorp_2015_sales / 1) - 1) * 100\n\n    return megacorp_increase_rate\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    repeating_sequence = \"428571\"\n    position = 69 % len(repeating_sequence)  # As the sequence repeats every 6 digits\n\n    if position == 0:\n        position = len(repeating_sequence)  # if the remainder is 0, it's the last digit in the sequence\n\n    ans = repeating_sequence[position - 1]  # Array indices start at 0, not 1\n    return int(ans)\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    total_planned_profit = 1.5\n    actual_total_profit = 0.82 * total_planned_profit\n    \n    profit_first_day = 0.7 * 1.5\n    remaining_goods_profit = actual_total_profit - profit_first_day\n    \n    # On the second day, Ken sold 30% of his goods (100% - 70% from the first day)\n    # hence, the profit on the second day per good\n    profit_second_day_per_good = remaining_goods_profit / 0.3\n    \n    # Since the discount led to a profit lower than the planned 50%\n    # We subtract the profit made on the second day from the planned profit\n    discount_rate = (1.5 - profit_second_day_per_good) / 1.5\n    \n    return discount_rate * 100  # convert to percentage\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    sweets_left = y / 2\n    return sweets_left\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n    total_age = 55\n\n    # Equations based on the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, total_age)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(older_daughter + 2, younger_daughter)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Get the age of the youngest child\n    youngest_age = min(solutions.values())\n\n    return youngest_age\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = initial_bottles = 48\n    empty_bottles = initial_bottles\n\n    while empty_bottles >= 4:\n        new_bottles, empty_bottles_left_over = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + empty_bottles_left_over\n\n        if empty_bottles == 3:  # customer can borrow 1 bottle\n            total_bottles += 1\n            empty_bottles = 0  # borrowed bottle must be returned, leaving no empty bottles\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits in 1-9\n    digits_1_9 = 9 * 1\n\n    # Calculate the number of digits in 10-99\n    digits_10_99 = (99 - 10 + 1) * 2\n    \n    # Calculate the number of digits in 100-113\n    digits_100_113 = (113 - 100 + 1) * 3\n    \n    # Get total number of digits written\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Define the variable x for the total number of pearls\n    x = symbols('x')\n    \n    # Write the equation according to the problem\n    # x = (1/2)x + (1/4)x + (1/6)x + 3\n    equation = Eq((1/2)*x + (1/4)*x + (1/6)*x + 3, x)\n    \n    # Solve the equation\n    total_pearls = solve(equation, x)\n    \n    return total_pearls[0]\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    # Number of workers and days it takes for 3 workers to build the wall\n    workers_initial = 3\n    days_initial = 3\n    \n    # Total work done is the product of the number of workers and the number of days\n    total_work = workers_initial * days_initial\n    \n    # Now we find out how many days it will take for 1 worker to do the same total work\n    workers_final = 1\n    days_final = total_work / workers_final\n    \n    return days_final\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Use permutations to generate all possible entrance orders\n    for entrance_order in permutations(range(1, 4), 4):\n        # Convert to set to count how many unique entrances are used\n        if len(set(entrance_order)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john + brother, 246)\n    equation2 = Eq(john, brother + 32)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit = 92\n\n    # Let x be the number of glasses Peter broke.\n    # He gets paid for the glasses he didn't break, so he makes total_glasses - x dollars.\n    # He pays for the glasses he broke, so he loses x dollars.\n    # His total profit is (total_glasses - x) - x = total_glasses - 2x.\n    # We can set up the equation total_glasses - 2x = profit and solve for x.\n\n    # total_glasses - 2x = profit\n    # 100 - 2x = 92\n    # 100 - 92 = 2x\n    # 8 = 2x\n    # x = 8 / 2\n    # x = 4\n\n    broken_glasses = (total_glasses - profit) // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # Importing the necessary function to calculate the square root.\n    from math import sqrt\n\n    # In a round-robin competition each team plays every other team once.\n    # For n teams, there will be a total of n(n-1)/2 games.\n    # We can set up the equation n(n-1)/2 = 45 and solve for n.\n    # Rearrange the equation: n^2 - n - 90 = 0 to find n using the quadratic formula.\n\n    # Calculate the discriminant\n    D = 1**2 - 4*1*(-90)\n\n    # Positive solution of the quadratic equation (since number of teams cannot be negative)\n    n = (1 + sqrt(D)) / 2\n\n    # We only want the integer solution since the number of teams must be an integer.\n    return int(n)\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost  # converting £12 to pence for calculation\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57, 2):\n        if i + (i + 2) + (i + 4) == 57:\n            return i\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # The formula to solve the underline part would be x / 3 = 2\n    # We can solve for x: x = 2 * 3\n    x = 2 * 3\n    return x\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boats originally and p represent the people per boat originally\n    b, p = symbols('b p')\n\n    # If the number of boats is reduced by 1, then each boat will take 9 people\n    equation1 = Eq((b - 1) * 9, b * p)\n\n    # If the number of boats is increased by 1, then each boat will take 6 people\n    equation2 = Eq((b + 1) * 6, b * p)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # There must be a whole number of boats, so filter out non-integer solutions\n    solutions = [(int(b), p) for b, p in solutions if b.is_integer and p.is_integer]\n\n    # Calculate number of people in the class (assuming solutions are (boats, people))\n    if solutions:\n        num_boats, people_per_boat = solutions[0]\n        total_people = num_boats * people_per_boat\n        return total_people\n    else:\n        return None\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    # Each combination is counted 3! = 6 times, so we divide by 6 to get unique combinations\n    return count // 6\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for number in range(5, 16):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    \n    gcf = gcd(pencils, pens)\n    \n    return gcf\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60  # Total percentage before the fifth test\n    new_total_marks = total_marks_before + 70  # Include the fifth test\n    new_average = new_total_marks / 5  # Calculate new average\n    return new_average\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies John and Peter have\n    john, peter = symbols('john peter')\n\n    # Create equations based on the problem statement\n    # John had 180 more cookies than Peter initially\n    equation1 = Eq(john, peter + 180)\n    # After selling, John had 1/2 as many cookies as what Peter had left\n    equation2 = Eq(john * (1 - 4/5), (peter * (1 - 3/10)) / 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, peter))\n\n    # Only gives the positive solution as the number of cookies cannot be negative\n    return solutions[john]\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        total_sum = num1 + num2\n        min_sum = min(min_sum, total_sum)\n    return min_sum\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if i + j < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horse_apples = 20\n    pig_apples = 15\n    rabbit_apples = 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    total_apples_eaten = (total_horses * horse_apples) + (total_pigs * pig_apples) + (total_rabbits * rabbit_apples)\n\n    average_apples_eaten = total_apples_eaten / total_animals\n\n    return average_apples_eaten\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    num = 3172\n    rounded_num = round(num, -2)\n    return rounded_num\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    benson_spent = 74\n    jayden_spent = 120\n    total_money = 590\n\n    # Calculate cumulated money left after spending\n    money_left = total_money - (benson_spent + jayden_spent)\n\n    # Since Benson has three times as much left as Jayden, let Jayden's money be x\n    # Benson's money will be 3x and the sum is money_left\n    # x + 3x = money_left => 4x = money_left\n    # We solve for x to find Jayden's remaining money\n    jayden_left = money_left / 4\n\n    return jayden_left\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n    sale1_discount = 3\n    sale2_discount_per_cup = 0.5\n    minimum_cups_for_sale2 = 5\n\n    # Calculate the total cost with sale1\n    cost_with_sale1 = full_price_per_cup * number_of_cups - sale1_discount\n\n    # Check if the number of cups is enough for sale2\n    if number_of_cups >= minimum_cups_for_sale2:\n        cost_with_sale2_per_cup = full_price_per_cup - sale2_discount_per_cup\n        cost_with_sale2 = cost_with_sale2_per_cup * number_of_cups\n    else:\n        cost_with_sale2 = full_price_per_cup * number_of_cups\n    \n    # Choose the lower price from the two sales\n    ans = min(cost_with_sale1, cost_with_sale2)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variables\n    # A: number of students in Class A\n    # B: number of students in Class B\n    # P: total number of peaches\n    A, B, P = symbols('A B P')\n\n    # We are given the following information:\n    # Peaches to Class A: Each student gets 5 peaches, and 10 peaches are left -> 5*A + 10 = P\n    # Peaches to Class B: Each student gets 8 peaches, and we need 2 more peaches -> 8*B + 2 = P\n    # Class A has 3 more students than Class B -> A = B + 3\n\n    # Write the equations based on the above information\n    eq1 = Eq(5*A + 10, P)\n    eq2 = Eq(8*B + 2, P)\n    eq3 = Eq(A, B + 3)\n\n    # Solve the equations for A, B, and P\n    solutions = solve((eq1, eq2, eq3), (A, B, P))\n\n    # Return the total number of peaches (P)\n    return solutions[P]\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    least_number = solve_congruence(*congruences)\n\n    return least_number[0]\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    # Fraction of the drink that is water\n    water_fraction = 3 / 4\n    # Total volume of the orange drink\n    total_drink_volume = 12\n    # Calculate litres of water\n    water_litres = water_fraction * total_drink_volume\n    return water_litres\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    cm = meters * centimeters_per_meter\n    return cm\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    # Take modulo 100000 to get the last 5 digits\n    last_five_digits = total_sum % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    betty_speed, kevin_speed, betty_early_time = symbols('betty_speed kevin_speed betty_early_time')\n\n    # Equation 1: Betty arrives at the store in 6 minutes\n    equation1 = Eq(betty_speed * 6, kevin_speed * (6 - betty_early_time))\n\n    # Equation 2: Kevin has walked 150 meters when Betty is at the store\n    equation2 = Eq(kevin_speed * (6 - betty_early_time), 150)\n\n    # Equation 3: Both walk for another 3 minutes at their previous speeds\n    equation3 = Eq(betty_speed * (9 - betty_early_time), 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (betty_speed, kevin_speed, betty_early_time))\n\n    return solutions[betty_early_time]\n    \nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # Since all squares must hold the same whole number\n    # we can represent this number as 'n'.\n    # Then, the equation becomes: n * n + n = 380\n    # Simplifying, we get: n^2 + n - 380 = 0\n    # We'll use quadratic formula to solve for n\n    \n    from math import sqrt\n    \n    # coefficients for quadratic equation ax^2 + bx + c = 0\n    a = 1\n    b = 1\n    c = -380\n    \n    # calculating discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # calculating two possible solutions\n    n1 = (-b + sqrt(discriminant)) / (2*a)\n    n2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    # We need to find the positive whole number solution\n    if n1 > 0 and n1.is_integer():\n        return int(n1)\n    elif n2 > 0 and n2.is_integer():\n        return int(n2)\n    \nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3  # the sum of parts for raspberry, orange, and apple\n    total_volume = 300  # the volume of the final mix in ml\n\n    # Calculate the volume of raspberry juice based on its proportion in the mix\n    raspberry_part = (1 / total_parts) * total_volume\n\n    return raspberry_part\n\nans = solution()"
    ]
}