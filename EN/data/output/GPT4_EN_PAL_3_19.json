{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # Implementing the given formula to calculate the sum of squares\n    n = 15 # Use the upper limit of the series (15)\n    m = 4  # Use the lower limit of the series squared (since 5^2 = 25 and the formula uses n(n+1)(n+2), we lower n by 1)\n    \n    # Calculate the sum of squares from 1 to n\n    sum_to_n = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Calculate the sum of squares from 1 to (m - 1)\n    sum_to_m_minus_one = (m * (m + 1) * (2 * m + 1)) // 6\n    \n    # Subtract the sum up to (m - 1) from the sum up to n to get the sum from m to n\n    ans = sum_to_n - sum_to_m_minus_one\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Start time in minutes (9:00 AM is 9 * 60 minutes after midnight)\n    end_time = 10 * 60   # End time in minutes (10:00 AM is 10 * 60 minutes after midnight)\n    duration = end_time - start_time  # Duration in minutes\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remainder_after_bag = 90 / (1 - 0.4)\n    initial_amount = remainder_after_bag / (1 - 0.2)\n    return initial_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # Reasonable upper limit, as the number of students can't be too high\n        if (n + 1) ** 2 - n ** 2 - 26 == 0 and n**2 + 5 == n**2 + n + 1 - 5:\n            return n ** 2 + 5\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    apples_to_give = (amy - john - 4) / 2\n    return int(apples_to_give)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n    \n    # Total number of potted plants\n    total_plants = 9\n    \n    # Number of potted plants to arrange in a row\n    plants_to_arrange = 4\n    \n    # Calculate the number of ways to arrange 4 out of 9 plants in a row (permutations)\n    num_ways = factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n\n    return num_ways\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure Fred wins, he needs to leave George in a position where\n    # George cannot win on the next turn and must leave Fred a winning position.\n    # If Fred can always leave a multiple of 4 for George,\n    # then he will be able to take the last orange and win.\n    # Therefore, Fred needs to take a number of oranges so that\n    # the remaining is a multiple of 4 after his first turn.\n    total_oranges = 15\n\n    # Fred can take 1, 2, or 3 oranges on his turn.\n    # We will check which of these starting moves leaves a multiple of 4.\n\n    for first_move in range(1, 4):\n        if (total_oranges - first_move) % 4 == 0:\n            # Fred takes this number to ensure that he can maintain the multiple of 4 strategy.\n            ans = first_move\n            return ans\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    \n    tom_dad_age = 43\n    equation = Eq(4 * tom_age - 5, tom_dad_age)\n    \n    tom_age_solution = solve(equation, tom_age)\n    \n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n\n    # Let's denote the cost price for the houses as x and y respectively.\n    # According to the question:\n    # For the first house, the selling price is the cost price plus a 10% profit:\n    # 1.1 * x = 99000 => x = 99000 / 1.1\n    # For the second house, the selling price is the cost price minus a 10% loss:\n    # 0.9 * y = 99000 => y = 99000 / 0.9\n\n    cost_price_first = 99000 / 1.1\n    cost_price_second = 99000 / 0.9\n\n    # The total cost price for both houses\n    total_cost_price = cost_price_first + cost_price_second\n\n    # The total selling price for both houses\n    total_sale_price = 2 * sale_price  # Since both are sold at 99000\n\n    # Now we can calculate the profit or loss by subtracting the total cost from the total selling price\n    # If the result is negative, it's a loss; if it's positive, it's a profit.\n    profit_loss = total_sale_price - total_cost_price\n\n    return profit_loss\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal_number = 0.16\n    ans = fraction > decimal_number\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # There are 5! ways to arrange 5 students, but since A has to be in the middle of B and C\n    # we treat B, A and C as a single unit resulting in 3! arrangements for A, B, C, D, and E.\n    # But B and C can swap positions, and still, A would be in the middle, so we multiply by 2.\n    count = 3! * 2\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_set = 3\n    set_of_cupcakes = 15\n\n    total_eggs = (cupcakes / set_of_cupcakes) * eggs_per_set\n    return total_eggs\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # jogging time in hours from 6:30 AM to 8:30 AM\n    jogging_time = 2\n    # walking time in hours from 8:30 AM to 9:30 AM\n    walking_time = 1\n\n    # jogging speed in km per hour\n    jogging_speed = 8\n    # walking speed is half the jogging speed\n    walking_speed = jogging_speed / 2\n\n    # calculating the distance travelled during jogging\n    jogging_distance = jogging_speed * jogging_time\n    # calculating the distance travelled during walking\n    walking_distance = walking_speed * walking_time\n\n    # total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let the number of £5, £10, and £20 notes be x each.\n    # 5*x (for £5 notes) + 10*x (for £10 notes) + 20*x (for £20 notes) = 280\n    # Combine terms: (5 + 10 + 20) * x = 280\n    # Simplify: 35 * x = 280\n    # Solve for x: x = 280 / 35\n    x = 280 // 35\n\n    # Since there are x notes of each denomination and there are 3 denominations,\n    # the total number of notes is 3 * x.\n    total_notes = 3 * x\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Calculate the last digit of each sequence raised to the 100th power\n    last_digit_2_pow_100 = (2 ** (100 % 4)) % 10\n    last_digit_7_pow_100 = (7 ** (100 % 4)) % 10\n    last_digit_9_pow_100 = (9 ** (100 % 2)) % 10\n\n    # Multiply last digits together to find the last digit of the entire expression\n    last_digit = (last_digit_2_pow_100 * last_digit_7_pow_100 * last_digit_9_pow_100) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_operation(M, N):\n        return M * N + N + 1\n\n    def square_operation(M, N):\n        return 8 * M - N * N\n\n    result_diamond = diamond_operation(7, 6)\n    ans = square_operation(result_diamond, 9)\n\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # We assume that the number of marbles in each pile is a, b, c, and d\n    # and that a < b < c < d. The total is a + b + c + d = 16.\n    # We are looking for the smallest largest number 'd', \n    # thus we start by giving the smallest values to a, b, and c.\n\n    for d in range(16, 0, -1): # Start from the largest possible pile size and go down\n        for c in range(d-1, 0, -1): # c should be less than d\n            for b in range(c-1, 0, -1): # b should be less than c\n                a = 16 - (b + c + d) # a is determined by the others\n                if a < b and a > 0: # a should be less than b and positive\n                    return d # This is the smallest possible largest pile size\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    # starting from an arbitrary number 2 (first prime), and incrementing to find suitable p\n    p = 2\n    while True:\n        # check if both p and p+107 are primes\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    total = sum(Fraction(1, d) for d in range(1, 6))\n    common_denominator = 60\n    A = total * common_denominator\n    return A.numerator\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 10  # Since we are summing the squares of odd numbers from 1 to 19, there are 10 odd numbers.\n    ans = (1/6) * n * (n + 1) * (2*n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    buses_needed = (students + capacity - 1) // capacity\n    return buses_needed\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time = 12\n    # Assuming floors are evenly spaced and speed is constant,\n    # time taken to go from first to second floor is 1/3rd of the total time\n    time_first_to_second = total_time / 3\n    return time_first_to_second\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    # Initialize answer variable\n    ans = 0\n\n    # Iterate each fraction from 1 to 2007\n    for n in range(1, 2008):\n        # Calculate term using the rule given in the question\n        term = (n**2 + (n+1)**2) / (n * (n+1))\n        # Add the term to the sum\n        ans += term\n\n    # Round the final answer to the nearest whole number\n    ans = round(ans)\n\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_average = 159\n    correct_average = 163\n    incorrect_height = 126\n    correct_height = 162\n\n    # Calculate the total height difference caused by the incorrect recording\n    height_difference = correct_height - incorrect_height\n\n    # Compute the number of girls using the difference in average heights\n    girls_count = height_difference // (correct_average - incorrect_average)\n\n    return girls_count\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = 24 / 100 * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    # Define the numbers to multiply\n    product = 123456789 * 987654321\n    \n    return product\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Sum of cubes of first n odd numbers: (1^3 + 2^3 + ...+ k^3) = (1 + 2 + ... + k)^2 where k = n/2 for n even\n    # Find k such that 2k + 1 = 13 => k = (13 - 1) / 2 = 6\n    k = 6\n    # Calculate the sum of first k natural numbers\n    sum_of_naturals = k * (k + 1) // 2\n    # The sum of squares is the square of the sum of naturals\n    ans = sum_of_naturals ** 2\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n    \n    ans = hash_op(200, 199)\n    for i in range(188, 1, -1):\n        ans = hash_op(ans, i)\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    from fractions import Fraction\n\n    product = 1\n    for i in range(2, 10):\n        product *= Fraction(1, i) + 1\n    \n    return product\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n\n    containers = -(-apples // container_capacity)  # Ceiling division\n\n    return containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    ribbon_lengths = [56, 42, 84]\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    return 9876543 + 10000\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n    \n    # Equations based on the problem statement\n    total_notes = Eq(x + y, 40)  # David had a total of 40 notes\n    \n    # After spending the notes, 40% of $10 notes and 25% of $2 notes\n    spent_10_notes = 0.40 * x\n    spent_2_notes = 0.25 * y\n    \n    # David has 4/5 as many $10 notes as $2 notes left\n    remaining_notes_ratio = Eq((x - spent_10_notes), 0.8 * (y - spent_2_notes))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes, remaining_notes_ratio), (x, y))\n    \n    # Calculate the cost of the gift\n    gift_cost = spent_10_notes.subs(x, solutions[x]) * 10 + spent_2_notes.subs(y, solutions[y]) * 2\n    \n    return gift_cost\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square_root = int(cube_root ** (3 / 2))\n        square = (square_root + 1) ** 2\n        if cube - 2 == square:\n            return square_root ** 2\n        square = square_root ** 2\n        if cube - 2 == square:\n            return square_root ** 2\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    # Required libraries\n    from math import factorial as fact\n    \n    # Since each of the 3 kids should get at least 2 oranges,\n    # subtract 6 oranges which are guaranteed (2 per kid) from the total.\n    total_oranges = 13 - 3 * 2\n    \n    # Now we want to distribute the remaining oranges to 3 kids.\n    # The problem now is equivalent to placing 2 separators in the 7 positions\n    # between the oranges to divide them into 3 groups.\n    # This is a combination problem: C(n+k-1, k-1) where n is the oranges and k is the kids\n    # C(7+3-1, 3-1) = C(9, 2)\n\n    num_ways = fact(9) // (fact(2) * fact(9 - 2))\n    \n    return num_ways\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of seashells Beth had as 'b' and Ken's as 'k'\n    b, k = symbols('b k')\n    \n    # Ken had $75 more seashells than Beth\n    equation1 = Eq(k, b + 75)\n    \n    # 4/5 of the number of seashells Beth had was equal to 2/5 of the number of seashells Ken had\n    equation2 = Eq(4/5 * b, 2/5 * k)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (b, k))\n\n    # Calculate the total number of seashells they had altogether\n    total_seashells = solutions[b] + solutions[k]\n\n    return total_seashells\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    licia, krisnam, imran = symbols('licia krisnam imran')\n    \n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n    \n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n    \n    return solutions[imran]\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n    \n    # The sum of two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Oliver accidentally shifted the decimal point in one of the numbers one position to the left\n    # Let's assume he did it with y, so it became y/10\n    # And the incorrect sum is x + y/10 = 5.87\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Now solve the two equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Get the original numbers\n    original_x = solutions[x]\n    original_y = solutions[y]\n\n    # Calculate the difference between the two original numbers\n    difference = abs(original_x - original_y)\n\n    # Return one hundred times the difference\n    return 100 * difference\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    # Start checking from the smallest 3-digit number\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    # Before transfer\n    equation1 = Eq(harry + liam, 640)\n\n    # After transfer, Harry has 90ml more, and Liam has 90ml less\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    common_difference = 3\n    number_of_days = 7\n\n    # Use arithmetic series sum formula: n/2 * (2a + (n-1)d)\n    total_questions = number_of_days / 2 * (2 * first_day + (number_of_days - 1) * common_difference)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Amount of work done by man in one day\n    work_man = 1 / 15\n    # Amount of work done by both in one day\n    work_both = 1 / 12\n    # Amount of work done by the wife in one day\n    work_wife = work_both - work_man\n    # Number of days the wife takes to finish the barrel on her own\n    days_wife = 1 / work_wife\n\n    return days_wife\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The given expression simplifies using the difference of squares:\n    # (1 + x)(1 - x) = 1 - x^2, where x is 1/(2^k) where k is a power of 2.\n    # Applying this to consecutive pairs in the expression results in:\n    # 2 = (1 - 1/(2^2)) * (1 - 1/(2^4)) * (1 - 1/(2^8)) * ... * (1 - 1/(2^(2^2009)))\n    \n    # The pattern results in multiplying many terms of the form (1 - 1/(2^(2^k)))\n    # until the largest k is 2009. The last term to be multiplied will be:\n    # (1 - 1/(2^(2^2009))), which needs to pair with the term on the left side\n    # of the equation: 2 * (1 - 1/(2^(2^n)))\n    \n    # Since we are searching for the last term of multiplication, we equate:\n    # (1 - 1/(2^(2^2009))) = 2 * (1 - 1/(2^(2^n)))\n    # Simplifying the equation, we get 1/2 = 1/(2^(2^n)),\n    # Then, 2^(2^n) = 2, which means 2^n = 1.\n    # The only power of 2 that equals 1 is 2^0, so n must be 0.\n\n    n = 0\n    return n\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Iterate through all possible numbers of white, red, and black balls picked\n    for white, red, black in product(range(1, 10), repeat=3):\n        if white + red + black == 10:\n            # Check conditions: 3-8 white left, 2 red left, 1-3 black left\n            if 3 <= 9 - white <= 8 and 9 - white >= 2 and 1 <= 6 - black <= 3:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # hundreds digit cannot be 0\n        for j in range(0, 10):  # tens digit\n            for k in range(0, 10):  # ones digit\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Adding a helper function to calculate n-th term based on the arithmetic sequence formula\n    def nth_term(a1, d, n):\n        return a1 + (n - 1) * d\n\n    # We used the given terms to get the 2nd and 3rd differences\n    a3_minus_a2 = 36 - 28  # difference between the 3rd and the 2nd term\n    a2_minus_a1 = 28 - 20  # difference between the 2nd and the 1st term\n    common_difference = a3_minus_a2\n\n    # Using the arithmetic sequence formula, we get the first term (beans peeled in the first hour)\n    # a1 + d * 2 = a3; hence a1 = a3 - d * 2 => a1 = 20 - d * 2\n    first_term = 20 - common_difference * 2\n    \n    return first_term\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100  # convert snake length from meters to centimeters\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    while True:\n        term = n * (n + 1) // 2 + n\n        if term >= 100:\n            break\n        n += 1\n    return (n - 1) * n // 2 + (n - 1)\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The arithmetic mean of the first three numbers\n    mean_of_three = 120\n    \n    # The total sum of the first three numbers\n    sum_of_three = mean_of_three * 3\n    \n    # The new mean with the fourth number\n    new_mean = 150\n    \n    # The total sum with the fourth number\n    sum_with_four = new_mean * 4\n    \n    # The fourth number is the difference between the two sums\n    fourth_number = sum_with_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the total number of pearls originally on the strand.\n    # According to the problem:\n    # Half of the pearls fell onto the floor, which is x/2.\n    # A fourth rolled under a chair, which is x/4.\n    # A sixth fell into her lap, which is x/6.\n    # And there are 3 pearls that remained on the strand.\n    # Thus, we have the equation:\n    # x/2 + x/4 + x/6 + 3 = x\n    # To find x, we can solve this equation.\n\n    # Finding the Least Common Multiple (LCM) of the denominators 2, 4, and 6 to combine the fractions.\n    lcm = 12\n    # Convert all fractions to have the same denominator, which is the LCM\n    # Then, we can write the equation as:\n    # 6x/12 + 3x/12 + 2x/12 + 3 = x\n    # Combine the fractions and move all terms involving x to one side:\n    # 6x/12 + 3x/12 + 2x/12 - x = -3\n    # Multiply through by 12 to clear the fractions:\n    # 6x + 3x + 2x - 12x = -36\n    # Combine the x terms:\n    # -x = -36\n\n    # Solving for x:\n    x = 36\n\n    return x\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away_mass = 0.76\n    remaining_mass = initial_mass - given_away_mass\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sally's and John's current ages\n    sally, john = symbols('sally john')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, john))\n\n    # Return Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be zero because it's a 4-digit number\n            continue\n        paso = p * 1000 + a * 100 + s * 10 + o\n        opas = o * 1000 + p * 100 + a * 10 + s\n        if paso * 4 == opas:\n            return paso\n            \nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(0, 7), (2, 8), (4, 9)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    first_number = remainder\n    second_number = first_number + 2\n    third_number = first_number + 4\n\n    sum_of_numbers = first_number + second_number + third_number\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    total_athletes = (total_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_taken = 5\n    total_paintings = 56\n\n    per_day = paintings_done / days_taken\n    remaining_paintings = total_paintings - paintings_done\n    more_days_needed = remaining_paintings / per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    return int(8 * 3 / 3)\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n\n    leaves = total_papers // interval\n\n    return leaves\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    # When half full, the weight is the basket weight plus half the mangoes' weight\n    # So, we subtract the half full weight from the full weight to get the weight of half the mangoes\n    half_mangoes_weight = full_weight - half_full_weight\n    # Now, we know the full weight includes full mangoes and basket weight\n    # Subtracting the weight of half mangoes twice (which is equal to full mangoes), we get the weight of the empty basket\n    empty_basket_weight = full_weight - 2 * half_mangoes_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip was the 6th in the queue from the front,\n    # Bud was the 6th from the end of the queue.\n    # Counting from Pip to Bud (including Pip but not Bud) there were 5 children.\n    # Therefore, Bud is 5 places behind Pip in the queue.\n    # The total number of children in the queue can be calculated by:\n    # (Pip's position) + (Number of children between Pip and Bud) + (Bud's position) - 1\n    # because Bud's position from the end of the queue is counted in reverse.\n    # Subtract 1 because we counted Pip twice (once in his position and once in the number between them).\n    \n    pip_position = 6\n    children_between_pip_bud = 5\n    bud_position_from_end = 6\n    \n    total_children = pip_position + children_between_pip_bud + bud_position_from_end - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    term_diff = term_12 - term_5\n\n    common_difference = term_diff / (12 - 5)\n\n    return common_difference\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    # The average age of a family of six is 29.\n    # Therefore, the total age of the family is average * number of family members.\n    total_age_family = 29 * 6\n    \n    # The total age of the children is 64.\n    # We can find the total age of the parents by subtracting the children's ages from the family's total age.\n    total_age_parents = total_age_family - 64\n    \n    # Number of parents is two.\n    num_parents = 2\n    \n    # The total age of the parents 3 years ago is the current total age minus 3 years per parent.\n    total_age_parents_3_years_ago = total_age_parents - 3 * num_parents\n    \n    # Finally, average age of the parents 3 years ago is the total age divided by the number of parents.\n    average_age_parents_3_years_ago = total_age_parents_3_years_ago / num_parents\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Using distributive property of multiplication over addition\n    # 95 * 37 + 95 * 42 + 21 * 95\n    # = 95 * (37 + 42 + 21)\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    difference = 3\n\n    # Find out the total number of terms in the original sequence\n    last_term = 242\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # The given process is repeated (num_terms - 3) times.\n    # In each repetition, the first three terms are removed and the sum of these terms is added to the end.\n    # Since this is an arithmetic progression, the sum of these three terms would be at the original position of the second term.\n    # Thus, after all the repetitions, the second number on the blackboard would be at the position which is the original position of the second number + (num_terms - 3).\n    \n    # Calculate the position of the new second number\n    new_second_position = 2 + (num_terms - 3)\n    \n    # Calculate the second number in the new sequence\n    new_second_number = first_term + (new_second_position - 1) * difference\n\n    return new_second_number\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef time_to_cross(perm):\n    # Assuming perm is a permutation of indices (0, 1, 2, 3)\n    slowest1 = max(times[perm[0]], times[perm[1]])\n    slowest2 = max(times[perm[2]], times[perm[3]])\n\n    time_taken = times[perm[0]] + slowest1 + times[perm[2]] + slowest2\n    return time_taken\n\ndef solution():\n    global times\n    times = [7, 9, 4, 10] # The time taken by each individual to cross the river\n    min_time = float('inf')\n\n    # 4 people (labelled as indices 0-3)\n    for perm in permutations(range(4), 4):\n        # First, two people cross with the boat (perm[0] and perm[1])\n        # One person returns with the boat (perm[0])\n        # Next, other two people cross with the boat (perm[2] and perm[3])\n        # One person from the first two people returns with the boat (perm[1])\n        # Now the fastest two are across, along with one of the slower two,\n        # so the fastest across returns with the boat.\n        # The two people who are now on the start side (perm[0] and perm[1]) cross together\n        # Finally, the fastest person goes back\n        # The time taken is:\n        # ... time for the fastest returner and the slowest to get across first\n        # + time for the fastest to return\n        # + time for the two slowest to get across\n        # + time for the fastest returner to come back with the boat\n        time_taken = times[perm[0]] \\\n                    + max(times[perm[0]], times[perm[1]]) \\\n                    + times[perm[2]] \\\n                    + times[perm[0]]\n\n        min_time = min(min_time, time_taken)\n\n    return min_time\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    # The average age of a family of six is 29.\n    # Therefore, the total age of the family is average * number of family members.\n    total_age_family = 29 * 6\n    \n    # The total age of the children is 64.\n    # We can find the total age of the parents by subtracting the children's ages from the family's total age.\n    total_age_parents = total_age_family - 64\n    \n    # Number of parents is two.\n    num_parents = 2\n    \n    # The total age of the parents 3 years ago is the current total age minus 3 years per parent.\n    total_age_parents_3_years_ago = total_age_parents - 3 * num_parents\n    \n    # Finally, average age of the parents 3 years ago is the total age divided by the number of parents.\n    average_age_parents_3_years_ago = total_age_parents_3_years_ago / num_parents\n    \n    return average_age_parents_3_years_ago\n\nans = solution()",
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total distance of the journey\n    x = symbols('x')\n\n    # Original speed covers distance x in 30 minutes, so new speed covers x in 35 minutes.\n    # Time spent before the rain is t minutes, at original speed.\n    # After the rain, at 80% speed, it took (35 - t) minutes to cover 2400 meters.\n    t = symbols('t')\n\n    # Set up the equations:\n    # The distance covered before the rain is original_speed * t.\n    # The distance covered after the rain is 80% of original_speed * (35 - t).\n    # The sum of both distances equals the total distance x.\n\n    # Eq1: original_speed * t + 0.8 * original_speed * (35 - t) = x\n    # Also from Eq1 we can extract the original speed as: original_speed = x / 30\n    # Replacing original_speed in Eq1 gives us the equation to solve.\n\n    equation = Eq(x / 30 * t + 0.8 * (x / 30) * (35 - t), x)\n\n    # Solve the equation for x\n    distance = solve(equation, (x, t))\n\n    return distance[x]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n    \n    original_work_per_person = 1 / original_people\n    total_work = original_work_per_person * original_days\n    \n    work_per_person_in_target = total_work / target_days\n    required_people = 1 / work_per_person_in_target\n    \n    additional_people = required_people - original_people\n    \n    return int(additional_people)\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let p represent Pip's weight, b represent Bud's weight, and o represent Bob's weight.\n    # The given information translates to the following equations:\n    # (p + b) / 2 = 30   ->   p + b = 60\n    # (p + o) / 2 = 33   ->   p + o = 66\n    # (b + o) / 2 = 36   ->   b + o = 72\n\n    # Sum the equations:\n    # (p + b) + (p + o) + (b + o) = 60 + 66 + 72\n    # 2p + 2b + 2o = 198\n    # Divide by 2:\n    # p + b + o = 99\n\n    # Subtract the equation of p + o from the total sum:\n    # (p + b + o) - (p + o) = 99 - 66\n    # b = 33\n\n    # Now subtract the weight of Bud from the combined weight of Pip and Bud to find Pip's weight.\n    # p = (p + b) - b\n    # p = 60 - 33\n    p = 60 - 33\n    return p\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the original number of students in school A\n    # Let b represent the original number of students in school B\n    a, b = symbols('a b')\n\n    # There are 1050 students in school A and B originally\n    equation1 = Eq(a + b, 1050)\n\n    # After 20 students transfer from school A to B, school A has 10 more students than school B\n    equation2 = Eq(a - 20, b + 20 + 10)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    rate_per_hour = 2\n    hours_passed = 5.5  # From 5:00 am to 10:30 am is 5 and a half hours\n    increase = rate_per_hour * hours_passed\n    final_temp = initial_temp + increase\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # After spending in shop A\n    spent_A = (x / 2) + 1\n    remaining_after_A = x - spent_A\n\n    # After spending in shop B\n    spent_B = (remaining_after_A / 2) + 2\n    remaining_after_B = remaining_after_A - spent_B\n\n    # After spending in shop C\n    spent_C = (remaining_after_B / 3) + 3\n    remaining_after_C = remaining_after_B - spent_C\n\n    # Equation based on the final amount left\n    equation = Eq(remaining_after_C, 49)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case: Darrell draws all blue and white pencils first\n    total_blue_white = 3 + 3\n    # To get at least 1 green pencil for sure, Darrell must draw one more after the blue and white\n    total_draws = total_blue_white + 1\n\n    return total_draws\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n    \n    # Get all divisors of 2240\n    divs = divisors(2240)\n    # Iterate through the divisors\n    for d in divs:\n        # Check if the result of the division is a square number\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    # Convert weeks to days for the window cleaning chore\n    window_cleaning_days = 3 * 7\n    \n    # Least common multiple will give us the period when all chores align again\n    ans = lcm(3, 5, 9, window_cleaning_days)\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies - kids * 18, 12)\n    equation2 = Eq(candies - (kids + 2) * 15, 0)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 311):\n        for digit in str(num):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the top shelf contain x books.\n    x = symbols('x')\n\n    # Since each shelf has 3 fewer books than the one below it, the number of books per shelf form an arithmetic sequence.\n    # There are 7 shelves, so the total number of books is the sum of an arithmetic sequence.\n    # The sum of an arithmetic sequence is given by: n/2 * (first_term + last_term)\n    # where n is the number of terms.\n    # We know that the sum of the books in the bookcase is 280, and there are 7 shelves.\n    # So the sum of the arithmetic sequence is: 7/2 * (first_term + last_term)\n    # first_term = x (top shelf)\n    # last_term = x - 3*6 (because there are 6 shelves below the top).\n\n    # Equation for the sum of the books:\n    equation = Eq(7/2 * (x + (x - 3*6)), 280)\n\n    # Solve for x (number of books on the top shelf).\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_for_9_items = 6.30\n    cost_per_item = cost_for_9_items / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import sqrt, pow, cbrt\n\n    expression = 16.7 - cbrt((pow(-4.56, 2) - pow(8.1, 3)) / pow(7.2, 3) / (-sqrt(6 + 3/4) + 30.15))\n    ans = round(expression, 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Define the current ages of Oliver and Lin\n    oliver_age_now = 20\n    lin_age_now = 26\n    \n    # Define the variable for years later\n    years_later = symbols('years_later')\n    \n    # Set up the equation for the sum of their ages in 'years_later' years\n    equation = Eq(oliver_age_now + years_later + lin_age_now + years_later, 48)\n    \n    # Solve for 'years_later'\n    solution_years_later = solve(equation, years_later)\n    \n    # Get the answer as an integer\n    ans = solution_years_later[0]\n    \n    return ans\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Let the distance from A to the meeting point be x meters\n    # Let the speed of Jayden be 7k and the speed of Carter be 4k\n    # The total distance Jayden will travel when he first meets Carter will be x meters\n    # Carter will travel (440 - x) meters at that point\n    # Using the ratio of their speeds, we have:\n    \n    # (distance Jayden travels) / (speed of Jayden) = (distance Carter travels) / (speed of Carter)\n    # x / (7k) = (440 - x) / (4k)\n    # To solve this equation, we cross-multiply:\n    # 4k * x = 7k * (440 - x)\n    # 4x = 7 * (440 - x)\n    \n    # Now solve for x\n    x = 7 * 440 / (7 + 4)\n    return x\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6/5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume John initially has J stickers\n    # Then, Sam has S stickers and Peter has P stickers initially\n    J, S, P = symbols('J S P')\n    \n    # Given that Sam Sam and Peter had stickers in the ratio 7 : 5\n    # So S = (7/5) * P\n    ratio_eq = Eq(S, (7/5) * P)\n    \n    # Sam and Peter each gave 20% (1/5) of their stickers to John\n    # Sam gave John (1/5)*S and Peter gave John (1/5)*P\n    # John's stickers increased by 80%, which means John's final count is 1.8 * initial count\n    # So the total given is (1/5)*S + (1/5)*P\n    # And we have J + (1/5)*S + (1/5)*P = 1.8 * J\n    john_eq = Eq(J + (1/5)*S + (1/5)*P, 1.8 * J)\n    \n    # Finally, Sam had 20 stickers more than John in the end, so S - 20 = J after receiving stickers\n    # S - (1/5)*S - 20 = J\n    sam_eq = Eq(S - (1/5)*S - 20, J)\n\n    # We have three equations and can solve for S, P, and J\n    solutions = solve((ratio_eq, john_eq, sam_eq), (S, P, J))\n    \n    # Return the number of stickers Peter had initially\n    return solutions[P]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Given\n    mean_of_5_students = 87\n    total_students = 6\n    new_mean = 88\n    \n    # The total score of 5 students\n    total_score_of_5_students = mean_of_5_students * 5\n    \n    # The new total score with Jim's score\n    new_total_score = new_mean * total_students\n    \n    # Jim's score\n    jim_score = new_total_score - total_score_of_5_students\n    \n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    n = symbols('n')\n    \n    # Cost price for each bat\n    cost_price_per_bat = 135\n    \n    # Selling price for each bat\n    selling_price_per_bat = 185 \n    \n    # Profit after selling all but 3 bats\n    total_profit = 2945\n    \n    # Total cost price for all bats\n    total_cost = n * cost_price_per_bat\n    \n    # Total revenue after selling all but 3 bats\n    total_revenue = (n - 3) * selling_price_per_bat\n    \n    # Equation based on the profit earned\n    equation = Eq(total_revenue - total_cost, total_profit)\n    \n    # Solve for the total number of bats initially purchased\n    bats_purchased = solve(equation, n)\n\n    return bats_purchased[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = (boys + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond]/solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one chair as 'c'\n    chair = symbols('chair')\n\n    # According to the problem, the cost of the table is 'chair + 160'\n    table = chair + 160\n\n    # The total cost of a table and 5 chairs is 328\n    total_cost = Eq(table + 5 * chair, 328)\n\n    # Solve for the cost of one chair\n    chair_cost = solve(total_cost, chair)\n\n    return chair_cost[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of the hot tap be h, then the rate of the cold tap is 2h\n    # The combined rate when both taps are open = h + 2h = 3h\n    # Both taps fill the bath in 10 minutes, so the combined work done is 1 bath (full bath)\n    # 1 bath/10 minutes = 3h baths/minute (combined rate)\n    # h = (1 bath/10 minutes) / 3\n    h = 1 / (10 * 3)  # Rate of the hot tap\n\n    # Time taken by the cold tap alone = 1 bath / (2h baths/minute)\n    # 2h is twice the rate of the hot tap, so we multiply h by 2\n    time_cold_tap = 1 / (2 * h)  # Time taken by the cold tap to fill the bath\n\n    return time_cold_tap\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # Total sum of 10 numbers\n    total_sum = 10 * 1111\n    \n    # Let x be the mean of the last 6 numbers\n    # Then, mean of the first 4 numbers is (x - 240)\n    # Total sum of the first 4 numbers is 4 * (x - 240)\n    # Total sum of the last 6 numbers is 6 * x\n    \n    # From the data we have following equation to solve\n    # 4 * (x - 240) + 6 * x = total_sum\n    x = (total_sum + 4 * 240) / 10\n    \n    return x\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's amount to pence\n    bud_pence = 110  # £1.10 is equivalent to 110 pence\n\n    # Pip's amount is already in pence\n    pip_pence = 60\n\n    # Calculate total pence\n    total_pence = pip_pence + bud_pence\n\n    # Since the question doesn't specify the format of the answer, we return the total in pence.\n    return total_pence\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of candies Rachel has and a be the number of candies Alice has\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 pieces of candy, they would have the same number\n    eq1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times Alice's candy\n    eq2 = Eq(r + 10, 3 * (a - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (r, a))\n    \n    # Calculate the total number of candies they had originally\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(0, 10):\n            for S in range(0, 10):\n                if P != I and I != S and P != S:\n                    if (S + S + S + S) % 10 == I:\n                        if ((S + S + S + S) // 10 + (I + I + I + I)) % 10 == P:\n                            if ((S + S + S + S) // 10 + (I + I + I + I)) // 10 == 0:\n                                return 10 * P + I\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    # Total race distance minus the distances of the first two parts\n    distance3 = 800 - distance1 - distance2\n\n    # Time = Distance / Speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time is the sum of times for each part of the race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed is given as 2 meters per second\n    ratio_jocye_lori = 3 / 2  # The ratio of Jocye's speed to Lori's speed is 3:2\n\n    # Calculate Jocye's speed based on the ratio\n    jocye_speed = lori_speed * ratio_jocye_lori\n    \n    # Calculate the distance Jocye can run in 10 seconds\n    distance_jocye = jocye_speed * 10\n    \n    return distance_jocye\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n    rounded_value = round(value_after_years, 1)\n\n    return rounded_value\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    # Probability of living over 20 years\n    p_over_20 = 0.6\n    # Probability of living over 25 years given it's already over 20\n    p_over_25_given_over_20 = 0.3\n    \n    # Probability of living over 25 years old given it's already 20 years old\n    # P(A|B) = P(A and B) / P(B), where\n    # P(A) = Probability of living over 25 years\n    # P(B) = Probability of living over 20 years\n    # We want to find P(A|B), which is equal to P(A) since B has already happened (20 years old animal)\n    # Therefore, P(A|B) = P(A)\n    \n    p_over_25 = p_over_25_given_over_20\n    \n    return p_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Speed of Don in m/min\n    speed_don = 60\n    # Distance between house and meeting point\n    distance_meeting = 360\n    # Total distance from house to library\n    distance_library = 780\n\n    # Time taken for Don to reach the meeting point\n    time_don = distance_meeting / speed_don\n    \n    # Remaining distance for Danny from meeting point to library\n    distance_danny = distance_library - distance_meeting\n    \n    # Since they meet at the same time, Danny covers his distance in the same time Don does\n    speed_danny = distance_danny / time_don\n\n    return speed_danny\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 0\n    pages = 0\n\n    # Calculate cumulative digits for 1-9, 10-99, 100-999 and so on\n    for digit_count in range(1, 12):\n        # Number of pages with digit_count digits\n        number_of_pages = 9 * (10 ** (digit_count - 1))\n        # Total number of digits used by these pages\n        used_digits = number_of_pages * digit_count\n\n        if total_digits + used_digits >= 792:\n            # Find the exact page where the total goes beyond 792 digits\n            remaining_digits = 792 - total_digits\n            pages += remaining_digits // digit_count\n            break\n        else:\n            total_digits += used_digits\n            pages += number_of_pages\n\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    both_events = 21\n    rope_skipping_only = 40 - both_events\n    long_jump_only = 31 - both_events\n    one_event_only = rope_skipping_only + long_jump_only\n    return one_event_only\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all the ingredients to grams\n    flour_g = 1 * 1000 + 500  # 1kg 500g of flour\n    sugar_g = 1 * 1000 + 200  # 1kg 200g of sugar\n    butter_g = 900            # 900g of butter\n\n    # Calculate the total amount of mixture in grams\n    total_mixture_g = flour_g + sugar_g + butter_g\n\n    # Divide the mixture equally into 8 cake tins\n    mixture_per_tin_g = total_mixture_g / 8\n\n    return mixture_per_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j/i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from math import factorial\n\n    # Total people to arrange = 4 (A, B, C, D)\n    total_people = 4\n\n    # Since A and B can only stand at the ends, we have 2 places and 2 people, so it is a permutation of 2.\n    ends_permutation = factorial(2)\n\n    # Once A and B are placed at the ends, we have 2 remaining places for C and D, which is again a permutation of 2.\n    middle_permutation = factorial(2)\n\n    # The number of different ways they can line up is the product of the above two permutations.\n    ans = ends_permutation * middle_permutation\n\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    x_value = solve(equation, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 / 30) * 27\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # To ensure she gets at least 4 marbles of the same colour, we need to consider the worst-case scenario.\n    # Case 1: She takes all 3 colours but none of the colours reaches 4 marbles.\n    # She could take 3 red, 3 blue, and 3 green marbles, which sums up to 9 marbles.\n    # In the worst-case scenario, she will get 3 marbles of each colour after picking 9 marbles.\n    \n    # Case 2: To ensure the 4th marble is the same colour, she needs to take one more marble.\n    # Adding one more marble will ensure that she has 4 of the same colour because she can't pick 4 marbles of each colour in 10 picks.\n    \n    marbles_to_ensure_four = 9 + 1  # 9 from Case 1 and 1 from Case 2\n\n    return marbles_to_ensure_four\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for first_digit in digits:\n        for second_digit in digits:\n            if first_digit != second_digit:\n                two_digit_number = first_digit * 10 + second_digit\n                two_digit_numbers.add(two_digit_number)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = float('inf')\n\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                for l in digits:\n                    if len(set([i, j, k, l])) == 4:  # Each digit is unique\n                        number = i * 1000 + j * 100 + k * 10 + l\n                        if number % 2 == 0 and number < smallest_even:  # Check if it's even and the smallest\n                            smallest_even = number\n    return smallest_even\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for x in range(99, 9, -1):\n        if x % 7 == 5 and x % 13 == 11:\n            return x\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    # Assuming the amount of work done is constant for a given wall,\n    # if 3 workers take 3 days, then the total worker-days is 3 workers * 3 days = 9 worker-days.\n    # If 1 worker is doing the same amount of work, it will take all 9 worker-days by himself.\n    days_for_one_worker = 3 * 3\n    return days_for_one_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n\n    return \"No solution found\"\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # The initial expression without any brackets\n    expression = \"285+15/5-2\"\n    \n    # Potential ways to add brackets (one or two pairs of brackets)\n    # There are six different positions where we can put single brackets,\n    # and some combinations of them for two pairs of brackets.\n    expressions = [\n        \"285+(15/5)-2\",\n        \"(285+15)/5-2\",\n        \"285+15/(5-2)\",\n        \"(285+15/5)-2\",\n        \"285+(15/5-2)\",\n        \"(285+15/5-2)\",\n        \"((285+15)/5)-2\",\n        \"(285+(15/5))-2\",\n        \"285+(15/(5-2))\",\n        \"(285+15)/(5-2)\"\n    ]\n    \n    # Using eval to compute the value of the expression with brackets\n    results = set(eval(expr) for expr in expressions) # Using a set to avoid duplicate results\n\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # Initialize a count to zero\n    count = 0\n\n    # Loop over all lockers\n    for locker_number in range(1, 101):\n        # If the locker number is a perfect square, it will end up unlocked\n        if (locker_number ** 0.5).is_integer():\n            count += 1\n\n    # Return the number of unlocked lockers\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current = 4\n    yiding_current = 3\n\n    nicolas_target = 16\n    ratio = yiding_current / nicolas_current\n\n    yiding_target = nicolas_target * ratio\n\n    return int(yiding_target)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake_price, borrowed_for_10, borrowed_for_13 = symbols('cake_price borrowed_for_10 borrowed_for_13')\n    \n    equation1 = Eq(borrowed_for_10, 10 * cake_price - (borrowed_for_10 + 11))\n    equation2 = Eq(borrowed_for_13, 13 * cake_price - (borrowed_for_13 + 26))\n    \n    solutions = solve((equation1, equation2), (cake_price, borrowed_for_10, borrowed_for_13))\n    \n    return solutions[cake_price]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / 10\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n    \n    number = divisor * quotient + remainder\n    \n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    known_scores = [37, 53, 29, 41]\n    total_known_scores = sum(known_scores)\n    total_scores_needed = total_matches * mean_score\n    x = total_scores_needed - total_known_scores\n    return x\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    all_students = 'ABCDEFG'\n    \n    for perm in permutations(all_students):\n        pos_a = perm.index('A')\n        pos_b = perm.index('B')\n        pos_c = perm.index('C')\n        pos_d = perm.index('D')\n        pos_e = perm.index('E')\n        pos_f = perm.index('F')\n        pos_g = perm.index('G')\n        \n        # Check A is in the middle of B and C, and not next to each other\n        if (pos_a > pos_b and pos_a < pos_c) or (pos_a > pos_c and pos_a < pos_b):\n            # Check D and E not next to each other\n            if abs(pos_d - pos_e) != 1:\n                # Check F and G are next to each other\n                if abs(pos_f - pos_g) == 1:\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    ans = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Counting all the three-digit numbers (excluding those starting with 0).\n\n    # Counting numbers with no 7 at all, which we need to subtract.\n    no_sevens = 8 * 9 * 9  # First digit can be from 1 to 9 (excluding 7), others from 0 to 9 (excluding 7).\n\n    # Total number with at least one 7 is then subtracted from the total.\n    at_least_one_seven = total_three_digit_numbers - no_sevens\n\n    # Counting numbers with exactly one 7:\n    # 7 in the first place: 7XX (1 * 9 * 9)\n    # 7 in the second place: X7X (8 * 1 * 9), first digit can't be 0 or 7\n    # 7 in the third place: XX7 (8 * 9 * 1)\n    one_seven = (1 * 9 * 9) + (8 * 1 * 9) + (8 * 9 * 1)\n\n    # With at least one seven minus exactly one seven will give us at least two sevens.\n    at_least_two_sevens = at_least_one_seven - one_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of animals originally as 'a'\n    # Let 'g' be the number of goats in the farm originally\n    # Then the number of cows would be '0.65a'\n    # After adding 240 more cows and goats, the total becomes 'a + 240'\n    # The number of cows becomes '0.65a + 240' and the number of goats becomes '2g'\n    # The new percentage of cows becomes 65% + 20% = 85%\n    # So, now cows are 85% of total, that is '0.85(a + 240)'\n    \n    a, g = symbols('a g')\n\n    # Original number of goats\n    original_goats = Eq(g, a - 0.65 * a)\n\n    # Number of cows after 240 more animals were added\n    cows_after = Eq(0.65 * a + 240, 0.85 * (a + 240))\n\n    # Solve the system of equations\n    solutions = solve((original_goats, cows_after), (a, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original = i * 10 + 9      # original six-digit number ending with 9\n        new_number = int(str(9) + str(i))  # new six-digit number starting with 9\n        if new_number == 4 * original:\n            return original\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    \n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Jonathan's and Abigail's current ages\n    jonathan_age, abigail_age = symbols('jonathan_age abigail_age')\n    \n    # Set up the equations based on the problem description\n    equation1 = Eq(abigail_age, jonathan_age + 6)           # Abigail is 6 years older than Jonathan\n    equation2 = Eq(abigail_age - 6, 2 * (jonathan_age - 6)) # Six years ago, she was twice as old as he was\n    \n    # Solve the equations for Jonathan's age\n    solutions = solve((equation1, equation2), (jonathan_age, abigail_age))\n    \n    # Return Jonathan's age\n    return solutions[jonathan_age]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Work rates of Alice and Bob\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n\n    # Number of days they worked together\n    days_together = 27\n\n    # Define a variable for the number of days Alice takes off\n    alice_days_off = symbols('alice_days_off')\n\n    # Total work done by Alice and Bob by the end of the 27th day\n    total_work_done = Eq((days_together - alice_days_off) * alice_work_rate + days_together * bob_work_rate, 1)\n\n    # Solve for the number of days Alice takes off\n    days_off_solution = solve(total_work_done, alice_days_off)\n\n    return days_off_solution[0]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Ensure A and C are not zero\n        if A == 0 or C == 0:\n            continue\n        num1 = A*101 + B*10\n        num2 = C*101 + D*10\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percent_increase = (increase / initial_amount) * 100\n    return percent_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_to_finish, total_pages = symbols('days total_pages')\n\n    equation1 = Eq(30 * (days_to_finish + 2), total_pages)\n    equation2 = Eq(39 * (days_to_finish - 4), total_pages)\n\n    solutions = solve((equation1, equation2), (days_to_finish, total_pages))\n\n    return solutions[days_to_finish], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    pattern_length = 6  # length of the repeating pattern 202020\n    total_2s_in_pattern = 3  # number of 2's in the repeating pattern\n\n    full_patterns = 535 // pattern_length  # count of complete patterns\n    remaining_digits = 535 % pattern_length  # remaining digits after full patterns\n\n    # count of 2's in the remaining digits\n    count_2_in_remaining = sum([1 for i in range(remaining_digits) if i % 3 != 1])\n\n    # total 2's written\n    total_2s_written = full_patterns * total_2s_in_pattern + count_2_in_remaining\n\n    return total_2s_written\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product_mod = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product_mod\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n\n    total_apples = apples_per_box * number_of_boxes\n\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_morning = 85\n    cookies_afternoon = 135\n    cookies_given_away = 55\n\n    cookies_left = (cookies_morning + cookies_afternoon) - cookies_given_away\n\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n    \n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dress, belt, shirt = symbols('dress belt shirt')\n    \n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n    \n    solutions = solve((equation1, equation2, equation3), (dress, belt, shirt))\n    \n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Defining the symbols for the number of marbles each girl originally had\n    Anna, Betsy, Charlene = symbols('Anna Betsy Charlene')\n\n    # Adding equations based on the problem description\n    equation1 = Eq(Anna + Betsy + Charlene, 168)  # Total number of marbles\n    equation2 = Eq(Anna + 8, (5/14) * (168 - (15 - 8)))  # Anna's marbles after the exchanges, given the final ratio\n    equation3 = Eq(Betsy - 8 + 15, (5/14) * (168))  # Betsy's marbles after the exchanges, given the final ratio\n    equation4 = Eq(Charlene - 15, (7/14) * (168))  # Charlene's marbles after the exchanges, given the final ratio\n\n    # Solving the equations\n    solution = solve((equation1, equation2, equation3, equation4), (Anna, Betsy, Charlene))\n\n    return solution[Betsy]\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # From the given examples, we try to deduce the pattern\n    # By inspection, looking at the first example:\n    # 4 * 1 + 4 + 1^2 = 4 + 4 + 1 = 9 which is not equal to 17\n    # So, we could try another pattern: 4 * 1 + 4^2 + 1^2 = 4 + 16 + 1 = 21 also not equal to 17\n    # We can now modify the pattern to: 4 * 1 + 4^2 - 1^2 = 4 + 16 - 1 = 19, still not the answer\n    # To get 17, we see that: 4 * 1 + 4 + 1 = 4 + 4 + 1 = 9 and adding 4^2 (16), so the operation seems to overcount by 8.\n    # We can now hypothesize the operation is 4 * 1 + 4 + 1 + 4^2 - 2*4 = 4 + 4 + 1 + 16 - 8 = 17, which seems to match\n    # We can apply this operation to see if it holds and adjusts to fit all given examples\n    # after finding the matching pattern: a^2 + b^2 + a * b - (a + b)\n    \n    # Now we define the operation based on our hypothesis\n    def delta_operation(a, b):\n        return a**2 + b**2 + a*b - (a + b)\n    \n    # Using our operation, we can calculate 10 Δ 9 with our hypothesis\n    return delta_operation(10, 9)\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_save = 7\n    brenda_daily_save = 6\n    andy_total_save = 378\n    \n    days_passed = andy_total_save / andy_daily_save\n    brenda_total_save = brenda_daily_save * days_passed\n    \n    return brenda_total_save\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    for correct in range(11):\n        wrong = 10 - correct\n        if (correct * 6) - (wrong * 2) == 44:\n            return correct\n            \nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Given that 2/7 of his coins were fifty-cent coins initially,\n    # it means that initially, 5/7 of his coins were one-dollar coins\n\n    # x is the initial total number of coins\n    # After receiving the coins, he has x + 10 + (5/0.5) = x + 20 more coins\n    # The final ratio of one-dollar to fifty-cent coins is 2:1\n    # Now we set up the equation (5/7)x + 10 = 2((2/7)x + 10)\n    # Solving the equation for x gives us the initial number of coins\n\n    # After receiving coins, the total additional coins are:\n    additional_one_dollar_coins = 10\n    additional_fifty_cent_coins_value = 5 # in dollars\n    additional_fifty_cent_coins = additional_fifty_cent_coins_value * 2 # since each is worth 0.5\n\n    # Let's setup the equation:\n    # Initial one-dollar coins: (5/7)x\n    # Initial fifty cent-coins: (2/7)x\n    # Final one-dollar coins: (5/7)x + 10\n    # Final fifty cent-coins: (2/7)x + (5 * 2)\n    # According to the problem, the final number of one-dollar coins is twice as many as fifty-cent coins:\n    # (5/7)x + 10 = 2 * ((2/7)x + 10)\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq((5/7)*x + additional_one_dollar_coins, 2*((2/7)*x + additional_fifty_cent_coins))\n\n    # Solve for x\n    solution_x = solve(equation, x)\n    \n    # Return the integer solution\n    return int(solution_x[0])\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Increased length by 10%\n    length_multiplier = 1 + (10 / 100)\n    \n    # Breadth reduced to 4/5\n    breadth_multiplier = 4 / 5\n    \n    # Height ratio: new height = 11, original height = 10\n    height_multiplier = 11 / 10\n    \n    # Calculating new volume as percentage of original\n    new_volume_percentage = (length_multiplier * breadth_multiplier * height_multiplier) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n    num_prizes = 3\n\n    ans = factorial(num_contestants) // factorial(num_contestants - num_prizes)\n\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    remaining_masks = 360\n    total_masks = remaining_masks / (remaining_work_percentage / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Start with the smallest number of questions one student other than Noa can solve, which is 1\n    # Continue incrementing the number of questions for each subsequent student, ensuring each student solves more questions than the previous one\n    # Noa should solve the most questions, so the remaining 4 students' questions are minimized\n    \n    # Minimum questions for 4 students, each solving one more than the previous\n    min_questions = [1, 2, 3, 4] # 1 + 2 + 3 + 4 = 10\n    # The remaining questions can be solved by Noa\n    noa_questions = 40 - sum(min_questions) # 40 - 10 = 30\n\n    return noa_questions\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    return round(278, -1)\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging (from 6:30 AM to 7:30 AM): 1 hour\n    jogging_time = 1 \n    jogging_speed = 6.5 # miles per hour\n\n    # Time spent walking (from 7:30 AM to 9:30 AM): 2 hours\n    walking_time = 2 \n    walking_speed = 4.5 # miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be Scan's current age and t be Ted's current age\n    s, t = symbols('s t')\n\n    # According to the problem, we have two equations\n    # s / t = 1 / 4 -> 4s = t\n    # (s + 4) / (t + 4) = 1 / 3 -> 3(s + 4) = (t + 4)\n    eq1 = Eq(4 * s, t)\n    eq2 = Eq(3 * (s + 4), (t + 4))\n\n    # Solve the equations to find s and t\n    solutions = solve((eq1, eq2), (s, t))\n\n    # Find Scan's and Ted's age at the time when the ratio was 1:9\n    # (s - years_ago) / (t - years_ago) = 1 / 9\n    # 9(s - years_ago) = (t - years_ago)\n    # Using s and t from the solutions, we can construct another equation\n    s_value = solutions[s]\n    t_value = solutions[t]\n    years_ago = symbols('years_ago')\n    eq3 = Eq(9 * (s_value - years_ago), (t_value - years_ago))\n\n    # Solve the equation to find years_ago\n    years_ago_solution = solve(eq3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    difference = mollies - guppies\n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_cm = 2\n    scale_m = 3\n    real_tree_height_m = 12\n\n    model_tree_height_cm = (scale_cm / scale_m) * real_tree_height_m * 100\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Using the Pigeonhole Principle, if each of the 20 students should have less than 3 pieces,\n    # it means each one can have at most 2 pieces of candy.\n    # Therefore, distributing 2 pieces of candy for each student, we have 20 * 2 pieces in total.\n    # To ensure that at least one student will get 3 pieces,\n    # we need to add one more piece of candy to the total. \n    pieces = 20 * 2 + 1\n\n    return pieces\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = 5 * 34\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_deduction = 4\n    target_score = 100\n\n    # Hypothetical situation: If all answers were correct\n    max_score = total_questions * correct_mark\n\n    # Difference between hypothetical max score and actual score\n    score_diff = max_score - target_score\n\n    # Since wrong answers deduct points, we can find the number of wrong answers\n    # Each wrong answer causes a difference of wrong_deduction (deduced) + correct_mark (not gained)\n    wrong_answers = score_diff // (wrong_deduction + correct_mark)\n\n    # The number of correct answers will be total_questions minus the number of wrong answers\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n    total_bicycles = 476\n    sold_bicycles = 208\n\n    # After selling, there's 5/9 non-foldable and 4/7 foldable bicycles left in the shop\n    remaining_non_foldable = 5/9 * non_foldable\n    remaining_foldable = 4/7 * foldable\n\n    # equations\n    equation1 = Eq(remaining_non_foldable + remaining_foldable, total_bicycles - sold_bicycles)\n    equation2 = Eq(foldable + non_foldable, total_bicycles)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n\n    # Number of foldable bicycles sold\n    sold_foldable = solutions[foldable] - remaining_foldable.subs(solutions)\n\n    return sold_foldable\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5 / 8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Taking the worst-case scenario:\n    # Yohan might get 10 red socks and then 10 black socks and then 2 white socks.\n    # This is the maximum number Yohan would have to take to guarantee a pair of white socks.\n    \n    max_socks = 10 + 10 + 2\n    \n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 0.60\n    total_amount = 765\n    ans = percentage * total_amount\n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    # The number of gaps between the lamp posts is equal to the\n    # total number of flowers divided by the flowers between each lamp post.\n    number_of_gaps = total_flowers / flowers_between_lamps\n    # The total length is 50m, therefore we divide this by the number of gaps\n    # to get the distance between each lamp post.\n    distance_between_lamps = 50 / (number_of_gaps + 1)\n    return distance_between_lamps\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_of_favorite = 6\n    right_of_favorite_inclusive = 14  # Includes the favorite book\n    total_books = left_of_favorite + right_of_favorite_inclusive\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n    final_temp = initial_temp - decrease_temp\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    whole_number = 48 / (4/5)\n    return whole_number\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_kept = 6\n    sweets_to_friends = total_sweets - sweets_kept\n    number_of_friends = 6\n    sweets_per_friend = sweets_to_friends // number_of_friends\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since the distribution is distinct and each child gets at least one apple,\n    # we let the child with the smallest number of apples get 1, the next one gets 2, and so on.\n    # Let's find the maximum number of apples for the child with the most apples:\n    for max_apples in range(19, 0, -1):\n        # We distribute the apples starting with the max_apples to the child with the most\n        remaining_apples = 19 - max_apples\n        # We then distribute the remaining apples to 4 children \n        # such that each child gets distinct and incrementally smaller number of apples.\n        # The next child may get max_apples - 1 at most.\n        # We continue this way to calculate the total number of apples distributed.\n        total = max_apples\n        for i in range(1, 5):\n            if remaining_apples > max_apples - i:\n                remaining_apples -= (max_apples - i)\n                total += (max_apples - i)\n            else:\n                break\n        # If the total distributed is exactly 19, we found the correct distribution.\n        if total == 19:\n            return max_apples\n\n    return None\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Calculate the effective length that can be used to plant rosebushes\n    effective_length = side_length - 2 * distance_from_edge\n\n    # Calculate how many bushes can be planted on one side\n    bushes_per_side = effective_length // distance_between_bushes\n\n    # Since bushes are planted inside the edge of the garden, calculate the total bushes\n    # considering the four sides\n    total_bushes = bushes_per_side * 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_rate = 1 / (12 * 8)  # P's work rate per hour\n    q_rate = 1 / (8 * 10)  # Q's work rate per hour\n\n    combined_rate_per_hour = p_rate + q_rate  # Combined work rate per hour\n    combined_rate_per_day = combined_rate_per_hour * 8  # Combined work rate per 8-hour day\n\n    days_to_complete_job = 1 / combined_rate_per_day  # Total days to complete the job working together\n\n    return days_to_complete_job\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132\n    speed_van_2 = 78\n    time = 8\n\n    distance_apart = (speed_van_1 + speed_van_2) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60 / 100\n    total_work = remaining_work / (1 - completed_percentage)\n    return int(total_work)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    solution = solve(equation, score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    number_of_apples = 78\n    divisors = [i for i in range(2, number_of_apples + 1) if number_of_apples % i == 0 and i % 2 == 0]\n    ans = len(divisors)\n    return ans\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats\n    # 1 goat is equivalent to 9/3 rabbits = 3 rabbits\n    goats_to_rabbits = 9 / 3\n    \n    # Given that 2 goats can be exchanged for 4 cows\n    # 1 cow is equivalent to 2/4 goats = 0.5 goats\n    cows_to_goats = 2 / 4\n    \n    # Now we want to find how many rabbits can 2 cows be exchanged for\n    # 2 cows * (0.5 goats per cow) * (3 rabbits per goat)\n    cows_to_rabbits = 2 * cows_to_goats * goats_to_rabbits\n    \n    return cows_to_rabbits\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    skipped_questions = 3\n    answered_questions = total_questions - skipped_questions\n    total_score = 168\n    score_for_correct = 4\n    penalty_for_wrong = -1\n\n    # Assume all answered questions are correct\n    max_score = answered_questions * score_for_correct\n    \n    # Subtract the actual score from the maximum possible score to find the penalty points\n    penalty_points = max_score - total_score\n    \n    # Penalty points are the number of wrong answers times the penalty for a wrong answer\n    wrong_answers = penalty_points // abs(penalty_for_wrong)\n    \n    # Correct answers are total answered questions minus wrong answers\n    correct_answers = answered_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Initial ratio of pencils to pens\n    initial_ratio_pencil_pen = 4 / 5\n\n    # After replacing a pen with a pencil, the new ratio\n    new_ratio_pencil_pen = 7 / 8\n\n    # Let's denote the initial number of pencils and pens as 4x and 5x respectively\n    # After taking out a pen and adding a pencil, we have (4x + 1) pencils and (5x - 1) pens\n    # Now, the ratio of pencils to pens is (4x + 1) / (5x - 1) = 7 / 8\n    # Solving this equation will give us the value of x\n    for x in range(1, 1000):  # Setting a reasonable limit for the loop\n        if (4 * x + 1) * 8 == (5 * x - 1) * 7:\n            # Calculate the total number of pencils and pens\n            total = 4 * x + 5 * x\n            return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n\n    # Formula to find the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_seats = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n    \n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    ans = custom_operation(result, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total cost of the books\n    planned_profit = 0.6\n    sold_books_first_day = 0.7\n    sold_books_second_day = 0.3\n    total_planned_profit = planned_profit * x\n    \n    # On the first day, Mike earns 60% profit on the 70% of his books\n    first_day_profit = sold_books_first_day * x * (1 + planned_profit)\n    \n    # Total profit is 80% of the planned profit\n    total_profit = total_planned_profit * 0.8\n    \n    # Let's define the discount rate on the second day as d\n    d = symbols('d')\n    \n    # On the second day, the price will be x (the cost) minus the discount on the remaining books\n    second_day_sales = sold_books_second_day * x * (1 - d)\n    \n    # Equation for the total profit\n    equation = Eq(first_day_profit + second_day_sales, x + total_profit)\n    \n    # Solve for discount rate (d)\n    discount_rate = solve(equation, d)[0]\n\n    return discount_rate * 100  # converting to percentage\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    # Since boys are 40%, girls are 60%\n    girls_percentage = 100 - boys_percentage\n    # Calculate the total number of children based on the percentage which girls form\n    total_children = (girls * 100) // girls_percentage\n\n    return total_children\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Each sheet of newspaper has two pages, one on each side,\n    # if pages are consecutive and a number of them are missing,\n    # we need to calculate the total number of pages.\n    \n    # The last page number before the missing pages is 14\n    # first page number after the missing pages is 35\n    # Therefore, the missing page numbers are from 15 to 34.\n    \n    # Calculate total missing pages\n    missing_pages = 34 - 14\n    \n    # Since there are two pages per sheet, divide by 2 to get the number of missing sheets.\n    missing_sheets = missing_pages // 2\n\n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna, curry = symbols('tuna curry')\n    equation1 = Eq(12 * tuna + 19 * curry, 39.60)\n    equation2 = Eq(curry, tuna - 0.20)\n\n    solutions = solve((equation1, equation2), (tuna, curry))\n\n    return solutions[tuna]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:\n                num = 10 * i + j\n                if num % 2 == 1:\n                    odd_count += 1\n    return odd_count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4*8 + 4*17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    for boys in range(38 + 1):\n        girls = 38 - boys\n        if boys * 2 + girls * 4 == 126:\n            return boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_count = 10\n    end_count = 25\n    ans = end_count - start_count + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_in_meters_per_minute = 36\n    time_in_seconds = 200\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_in_meters_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the original number of cows and g be the original number of goats\n    c, g = symbols('c g')\n\n    # Using the given information to set up equations\n    # 65% of the animals in the farm were cows and the rest were goats\n    equation1 = Eq(c, 0.65 * (c + g))\n    # When 240 more animals were added, the percentage of cows increased by 20%\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    # The number of goats doubled\n    equation3 = Eq(g * 2, g + 240)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1  # Initialize the product to 1\n\n    # Loop through the specified range of denominators\n    for i in range(3, 21, 2):\n        # Calculate each fraction and multiply it with the current product\n        product *= (1 + 2/i)\n\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    length_required = 400 * 85  # Total length in cm\n    roll_length_cm = 20 * 100  # Roll length in cm\n    rolls_needed = length_required / roll_length_cm\n\n    # Round up since she can't buy a fraction of a roll\n    return -(-length_required // roll_length_cm)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma's current age and John's current age\n    emma, john = symbols('emma john')\n\n    # Equations based on the problem statement\n    equation1 = Eq(john, emma + 7)  # John is 7 years older than Emma\n    equation2 = Eq(emma + john + 3 * 2, 27)  # In 3 years, the sum of their ages will be 27\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    # Return Emma's current age\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    charity = salary / 4\n    spent_on_food = 5/6 * (salary - charity)\n    savings = (salary - charity) - spent_on_food\n\n    equation = Eq(spent_on_food - charity, 78)\n    salary_solution = solve(equation, salary)\n\n    return salary_solution[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # Find the last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # Find the last digit of 3^2017\n    ans = (last_digit_2 * last_digit_3) % 10  # Multiply and find the last digit\n    return ans\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time David spent walking at increased speed\n    t = symbols('t')\n\n    # David walked for 10 minutes at original speed\n    distance_at_original_speed = 150 * 10\n    # David walked for t minutes at increased speed\n    distance_at_increased_speed = (150 + 50) * t\n\n    # Total distance walked\n    total_distance = distance_at_original_speed + distance_at_increased_speed\n\n    # Equation based on total distance\n    equation = Eq(total_distance, 3700)\n\n    # Solve for t\n    time_at_increased_speed = solve(equation, t)[0]\n\n    # Total time spent walking in the park\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    term_7 = 57\n    term_15 = 89\n    position_diff = 15 - 7\n\n    common_difference = (term_15 - term_7) / position_diff\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    number, _ = solve_congruence(*congruences)\n\n    while number < 400:\n        return number\n        number += 2*3*5*7\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    digits = set(range(10)) - {4, 7, 1, 9}\n    for A in digits:\n        for B in digits - {A}:\n            for C in digits - {A, B}:\n                if (4 + 7 + A + 1 + B + 9 + C) % 9 == 0:\n                    ans = A + B + C\n                    number = int(f\"47{A}1{B}9{C}\")\n                    return ans, number\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    weekly_change = 45 - 60   # She gains 45 sweets but eats 60, resulting in a net loss.\n    desired_sweets = 150\n    \n    weeks = (initial_sweets - desired_sweets) // abs(weekly_change)\n\n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    prices = solve((equation1, equation2), (apple, orange))\n\n    carrie_pay = prices[apple] + prices[orange]\n\n    return carrie_pay\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # There are three choices for each of the three digits\n    choices_per_digit = 3\n    # Since each digit can be used more than once, we multiply the number of choices\n    total_combinations = choices_per_digit ** 3\n    return total_combinations\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    i = 1\n    while True:\n        if all((i + 2) % n == 0 for n in [3, 4, 5, 6]):\n            return i + 2\n        i += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n    \n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    cost_of_two_rackets = 2 * racket_price\n    remaining_money = total_money - cost_of_two_rackets\n    number_of_balls = remaining_money // ball_price\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since there are 3 different colours, to ensure that we get 3 different coloured balls in the worst case,\n    # We take all balls of one colour (4 balls), all balls of another colour (4 balls),\n    # And then one ball from the remaining colour.\n    # That guarantees that we have at least 3 different coloured balls.\n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_per_week = 4\n    jed_chocolates = 137\n    jed_per_week = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_per_week\n        jed_chocolates += jed_per_week\n        week += 1\n        \n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Total points\n    points = 12\n    \n    # The hypotenuse of a right-angled triangle inscribed in a circle is the diameter.\n    # Count the number of diameters; each is defined by 2 points that are 6 positions apart.\n    diameters = points // 2\n    \n    # For each diameter, there are 2 sets of points that can be the third point of the right-angled triangle.\n    # Each set corresponds to one half of the circle (excluding the 2 points defining the diameter).\n    triangles_per_diameter = (points - 2) // 2\n    \n    # Total number of right-angled triangles is the number of diameters multiplied by the number of triangles \n    # that can be formed with each diameter.\n    total_triangles = diameters * triangles_per_diameter\n\n    return total_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    total_boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * total_boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    \n    return int(remaining_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples], solutions[oranges]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n    return solutions[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger being the 11th means there are 10 animals in front of him.\n    number_in_front = 10\n    \n    # As the tiger is in the exact middle, there must be an equal number of animals behind him.\n    number_behind = number_in_front\n    \n    # The total number is the sum of the numbers in front, the numbers behind, plus the tiger itself.\n    total_animals = number_in_front + number_behind + 1\n    \n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    # Iterate over all possible three-digit numbers\n    for i in range(100, 1000):\n        # Check if the sum of digits equals 4\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Given that the 24 roses were divided into 3 vases\n    # We find the number of roses per vase for the first arrangement\n    roses_per_vase_first_arrangement = 24 // 3\n\n    # Now that Nancy's mother brought more roses and divided them into another four vases with the same amount\n    # As each vase has the same amount of roses, the number in each vase must be divisible by 4\n    # The roses per vase in the second arrangement is also the roses_per_vase_first_arrangement\n    roses_per_vase_second_arrangement = roses_per_vase_first_arrangement\n\n    # The total number of roses in the second arrangement is thus 4 vases times the number in each vase\n    # Which we know is equal to roses_per_vase_first_arrangement\n    total_roses_second_arrangement = 4 * roses_per_vase_second_arrangement\n\n    # The total number of roses is the sum of the 24 roses Nancy first had and the additional roses her mother brought\n    total_roses = 24 + total_roses_second_arrangement\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50  # In cents\n    mamee_cost = haribo_cost - 30  # In cents\n    big_jelly_cost = 6 * mamee_cost  # In cents\n    big_jelly_cost_dollars = big_jelly_cost / 100  # Convert to dollars\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    return num2words(num)\n\nfrom num2words import num2words\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n\n    # Will hates mint flavour, so he won't eat that one\n    max_candies_will_can_eat = lemon_flavour + cherry_flavour\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    number1 = -18\n    number2 = -2\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            if B % 2 == 0: # AB is divisible by 2\n                for C in range(10):\n                    if (B*10 + C) % 3 == 0: # BC is divisible by 3\n                        for D in range(1, 10, 2): # CD ends with 5 or 0, but D has to be positive digit so only 5\n                            if (C*10 + D) % 5 == 0: # CD is divisible by 5\n                                if (A*100 + B*10 + C) % 9 == 0: # ABC is divisible by 9\n                                    if (B*100 + C*10 + D) % 11 == 0: # BCD is divisible by 11\n                                        return A*1000 + B*100 + C*10 + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 80:\n        ans = num\n        num += 2 * 3 * 4 * 5\n\n    return ans\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # In a single elimination tournament, the number of games played is always one less than the number of participants.\n    # Since there are 16 participants, the number of games will be 16 - 1.\n    return 16 - 1\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    # Extract the values from the solutions dictionary and find the youngest child\n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Given height of the television is 21 cm\n    height = 21\n    \n    # Calculate the width based on the given ratio\n    width = (ratio_width / ratio_height) * height\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for wallet and watch\n    wallet, watch = symbols('wallet watch')\n    \n    # Create equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n    \n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = '428571'\n    sequence_length = len(recurring_sequence)\n    num_repeats = 58 // sequence_length\n    remaining_digits = 58 % sequence_length\n\n    sum_repeats = sum(int(digit) for digit in recurring_sequence) * num_repeats\n    sum_remaining = sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n\n    ans = sum_repeats + sum_remaining\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # total number of books\n    # number of ways to arrange all books if they were distinct\n    total_ways = factorial(total_books)\n    # since there are books of the same type, we need to divide by the factorial of the counts of each type to correct for overcounting\n    ways = total_ways // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of solution exchanged between A and B\n    x = symbols('x')\n\n    # Equation for solution A\n    eq_A = Eq((50 * 0.11 - x * 0.11) + (x * 0.47), x + (50 - x))\n\n    # Equation for solution B\n    eq_B = Eq((50 * 0.47 - x * 0.47) + (x * 0.11), x + (50 - x))\n\n    # Since they have the same concentration, set the equations equal to each other and solve for x\n    solution = solve((eq_A, eq_B), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string_length = 13\n    nicks_extra_length = 25\n    difference_in_length = nicks_extra_length  # Since Nick's string is 25 cm longer, the difference is 25 cm\n\n    return difference_in_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_with_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_with_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_in_cm = 20 * 100  # Convert the length from meters to centimeters\n    cauliflower_spacing = 40  # Spacing between each cauliflower in centimeters\n    first_cauliflower_position = 20  # The position of the first cauliflower in centimeters from the end\n\n    # Calculate the available length for planting cauliflowers after the first one is planted\n    available_length = length_in_cm - first_cauliflower_position\n\n    # Calculate how many cauliflowers can be planted with the given spacing\n    number_of_cauliflowers = available_length // cauliflower_spacing + 1  # +1 for the first cauliflower\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    count = 0\n    for hundred in digits:\n        for ten in digits:\n            for one in digits:\n                if hundred != ten and ten != one and one != hundred:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    # Inverse operation to solve for the box\n    # 8 * box + 3 = 75\n    # 8 * box = 75 - 3\n    box = (75 - 3) / 8\n    return box\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    for combo in combinations(range(1, 15), 4):\n        if sum(combo) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = [p for p in range(2, 51) if isprime(p) and isprime(p + 6) or isprime(p - 6)]\n    count = len(primes)\n    return count, primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    return 30 / 100 * 250\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100 - (2 + 7 / 100)\n    return total_meters\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n    equation1 = Eq(1*banana + 2*pear, 94)\n    equation2 = Eq(1*banana + 1*pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_fib = fib_sequence[-1] + fib_sequence[-2]\n    return next_fib\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    # Total number of rabbits\n    total_rabbits_eq = Eq(black + white + grey, 59)\n\n    # The total number of black and white rabbits is 11 more than the number of grey rabbits\n    black_white_eq = Eq(black + white, grey + 11)\n\n    # The number of black rabbits is 9 less than the white rabbits\n    black_white_difference_eq = Eq(black, white - 9)\n\n    # Solving the equations\n    solutions = solve((total_rabbits_eq, black_white_eq, black_white_difference_eq), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence is a geometric sequence where each term is double the previous one.\n    # The nth term of a geometric sequence can be found by the formula: a_n = a * r^(n-1)\n    # where a is the first term and r is the common ratio.\n    # In this sequence, a = 1 and r = 2.\n    \n    # Calculate the 20th term of the geometric sequence\n    a_20 = 1 * (2**(20-1))\n    \n    # Calculate the 17th term of the geometric sequence\n    a_17 = 1 * (2**(17-1))\n    \n    # Divide the 20th term by the 17th term\n    ans = a_20 / a_17\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # Given sum of integers\n    total_sum = 35\n    # To maximize the product of two numbers with a given sum, we take the two numbers to be as close as possible\n    # Hence, for even sum, numbers would be sum/2 and sum/2 (but here we have odd sum)\n    # For odd sum, we'll take the floor division of sum by 2 for one number and the other will be one more than that\n    a = total_sum // 2\n    b = total_sum - a\n    # Now calculate the product\n    product = a * b\n    return product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earning = 70\n    number_of_working_days = 6\n\n    total_week_earning = average_daily_earning * number_of_working_days\n\n    return total_week_earning\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books Alice, Becky, and Crystal have\n    average_abc = 60\n    # Total number of books Alice, Becky, and Crystal have\n    total_abc = average_abc * 3\n    \n    # New average when including Dennis\n    new_average = average_abc + 10\n    # Total number of books all four people have\n    total_abcd = new_average * 4\n    \n    # Number of books Dennis has\n    dennis_books = total_abcd - total_abc\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    distance_per_day = 5\n    slide_per_night = 3\n    total_distance = 16\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(1, 10):\n        square = i**2\n        if square < 100:\n            largest_two_digit_square = square\n        else:\n            break\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    first_to_fourth = 9\n    # Since flags are placed at consistent distances, the distance between each flag is the same.\n    # The distance between the 1st and 4th flag covers 3 intervals (since flags are at positions 1, 2, 3, 4).\n    distance_between_flags = first_to_fourth / 3\n    \n    # The distance between the 1st and 9th flag covers 8 intervals.\n    first_to_ninth = distance_between_flags * 8\n    \n    return first_to_ninth\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_model_height = 19.6\n    ratio = 2 / 3\n    \n    mikes_model_height = (johns_model_height / 2) * 3\n    \n    return mikes_model_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    return all(233 % n != 0 for n in range(2, 233))\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Assigning the digits to corresponding places\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    # Constructing the number\n    number = ones + tenths * 0.1 + hundredths * 0.01\n\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    distance = 200\n\n    effective_speed_downstream = speed_in_still_water + speed_of_current\n    time_to_travel_downstream = distance / effective_speed_downstream\n    \n    return time_to_travel_downstream\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a_students, b_students, peaches = symbols('a_students b_students peaches')\n\n    equation1 = Eq(peaches, 5 * a_students + 10)\n    equation2 = Eq(peaches + 2, 8 * b_students)\n    equation3 = Eq(a_students, b_students + 3)\n\n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Let 'p' be the number of pencils Owen needs to trade for one of Oscar's pens.\n    # The cost of p pencils is equal to the cost of 1 pen.\n    # Cost of 1 pencil is $2 and cost of 1 pen is $4.\n    \n    # Setting up the proportion cost_of_p_pencils / cost_of_1_pen = 1\n    # p * cost_of_1_pencil = cost_of_1_pen\n    p = 4 // 2\n\n    return p\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    target_points = 36\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if points_correct * correct + points_incorrect * incorrect == target_points:\n            return correct\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    \n    total_ways = trains + buses + flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    # Calculate the product\n    product = 888 * 999\n    # Extract the last two digits\n    last_two_digits = product % 100\n\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the 7 dancing performances is factorial(7)\n    dance_perms = factorial(7)\n    \n    # We can consider the 3 playing a sketch as separators, and since we need 1 dance in between each\n    # there are 6 spaces between 7 dances, and we need to pick 3 out of these for the sketches.\n    # This is a combination C(6,3).\n    sketch_spaces = factorial(6) // (factorial(3) * factorial(6 - 3))\n    \n    # Multiply the possible arrangements of dances with the ways to place the sketches\n    count = dance_perms * sketch_spaces\n    \n    return count\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    # Initialize h to be the smallest possible factor\n    # Since 28512 is even, starting with h=2 is a logical choice\n    h = 2\n    # We will keep increasing h until 28512/h is a perfect cube\n    while True:\n        # Calculate the quotient\n        quotient = 28512 / h\n        # Check if quotient is a perfect cube: its cube root should be an integer\n        if round(quotient ** (1/3)) ** 3 == quotient:\n            # If the condition is met, we have found h\n            return h\n        # Increment h to check the next possible factor\n        h += 1\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Define the quantities of each color M&M's\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # Bart needs to take all of one color plus one more to be sure of having 2 different colors\n    # Since the goal is to find the smallest number necessary, we take all of the smallest group and one more\n    ans = red + 1\n\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    import math\n\n    def derangement(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    fathers_handshakes = families * (families - 1) * 2\n    mothers_handshakes = families * (families - 1)\n    children_handshakes = families * (families - 1)\n\n    total_handshakes = fathers_handshakes + mothers_handshakes + children_handshakes\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415927\n    b = 31415925\n    ans = a**2 - a*b\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between_mark_helen = 6\n\n    total_children = mark_position + helen_position_from_end + children_between_mark_helen\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = 5  # There are 5 odd digits (1, 3, 5, 7, 9)\n    # Each of the 3 positions in a 3-digit number can be an odd number, so we multiply the possibilities for each digit\n    num_of_3_digit_odd_numbers = odd_digits * odd_digits * odd_digits\n    \n    return num_of_3_digit_odd_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_part = \"85274\"\n    index = (79 - 1) % len(recurring_part)\n    ans = int(recurring_part[index])\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # A number divisible by both 17 and 19 is divisible by their least common multiple\n    lcm = 17 * 19  # since 17 and 19 are both prime, their LCM is just their product\n    \n    # The largest three-digit number is 999\n    # We need to find the largest three-digit number which, when 2009 is added, is divisible by the lcm\n    for num in range(999, 99, -1):\n        if (num + 2009) % lcm == 0:\n            return num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    max_hours_before_rate_change = 50\n    \n    # Calculate the bill if only the $5 rate was applied (after free hours and before 50 hours)\n    if bill <= ((max_hours_before_rate_change - free_hours) * 5):\n        # Calculate the number of hours with the $5 rate\n        hours = (bill / 5) + free_hours\n    else:\n        # Subtract the maximum bill achievable with the $5 rate\n        bill -= (max_hours_before_rate_change - free_hours) * 5\n        # Check if the bill exceeds the maximum amount for the $8 rate\n        if bill <= (10 * 8):\n            # Calculate the number of hours with the additional $8 rate\n            hours = (bill / 8) + max_hours_before_rate_change\n        else:\n            # Subtract the maximum bill achievable with the $8 rate\n            bill -= 10 * 8\n            # Calculate the number of hours with the additional $15 rate\n            hours = (bill / 15) + 60\n\n    return int(hours)\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))  # The sum of numbers from 1 to 62\n    actual_sum = 1939  # The sum Tim got after missing one page number\n    missing_page = expected_sum - actual_sum  # The missing page number\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # We need to ensure we have 4 different colors, \n    # So in the worst case, Jane could draw all marbles of one color before getting a different color.\n    # After drawing all marbles of one color, the next draw will certainly be a different color since no more marbles of the first color are left.\n    \n    # To ensure she has 4 different colors, she could draw all but one of the 3 most populous colors.\n    # Then, by the pigeonhole principle, the next draw must be the fourth color.\n    \n    # Calculate the sum of the three highest marble counts minus one for each\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Sort the marble counts and take the sum of the highest three counts\n    counts = sorted([red, green, blue, orange], reverse=True)\n    marbles_drawn = sum(counts[:3]) - 3\n\n    # The next draw ensures the fourth color.\n    marbles_drawn += 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 1000):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a recursive function to calculate the number of ways to climb n steps with restrictions\n    def count_ways(n, avoid):\n        # Base cases\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        # If the current step is the one to avoid, return 0\n        if n == avoid:\n            return 0\n        \n        # Recursive case: sum of ways to climb n-1, n-2, and n-3 steps\n        return count_ways(n-1, avoid) + count_ways(n-2, avoid) + count_ways(n-3, avoid)\n        \n    # Initial call to the recursive function\n    # Avoiding the 5th step\n    ans = count_ways(10, 5)\n    return ans\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    decimal_result = 5 / 16\n    return decimal_result\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # The smallest odd positive numbers are 1, 3, 5, 7, 9.\n    # To maximize the largest number, we should start by using the smallest possible odd numbers for the other four.\n    smallest_numbers_sum = 1 + 3 + 5 + 7\n\n    # Now we subtract the sum of the smallest numbers from the total to find the maximum possible largest number.\n    largest_number = 85 - smallest_numbers_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_paid = Eq(T/100 * 30000 + (T+3)/100 * (income - 30000), (T+1)/100 * income)\n    income_solutions = solve(tax_paid, income)\n\n    # Return only the positive solution as income cannot be negative\n    return max(income_solutions)\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    \n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 2.5\n    n = seconds_per_minute * minutes\n    return int(n)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_20_cent = 21\n    total_value = 630  # in cents\n\n    for num_50_cent in range(0, total_20_cent + 1):\n        num_20_cent = total_20_cent - num_50_cent\n        if 20 * num_20_cent + 50 * num_50_cent == total_value:\n            return num_50_cent\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance between A and B as d\n    d = symbols('d')\n\n    # Phillip arrives 3 minutes earlier than Alan\n    alan_time = 12 + 3  # Alan takes 15 minutes\n\n    # Speed of Phillip and Alan\n    phillip_speed = d / 12\n    alan_speed = d / alan_time\n\n    # Phillip walks 15 meters more than Alan does per minute\n    equation = Eq(phillip_speed, alan_speed + 15)\n\n    # Solve for d\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    num_children = 5\n    \n    coins_left = total_coins % num_children\n    \n    return coins_left\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    \n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    \n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    count = 0\n    num = 2\n    max_iters = 9  # Only up to 9 iterations are needed because the number starts with 2 and the last digit must be 5 for squares\n\n    for i in range(max_iters):\n        if math.sqrt(num).is_integer():\n            count += 1\n        num = num * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, tom = symbols('alice tom')\n    tom_amount = 68.10\n\n    # After Alice spent $36, she had $25.40 less than Tom\n    equation = Eq(alice - 36, tom_amount - 25.40)\n\n    # Tom's amount is known\n    tom_eq = Eq(tom, tom_amount)\n\n    # Solve the equations\n    solutions = solve((equation, tom_eq), (alice, tom))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_of_first_set = 5 * 28\n    total_of_second_set = 12 * 11\n    combined_mean = (total_of_first_set + total_of_second_set) / (5 + 12)\n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_benches = 9\n\n    total_distance_between_benches = (number_of_benches - 1) * distance_between_benches\n    length_of_bench = (total_distance - total_distance_between_benches) / number_of_benches\n\n    return length_of_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    x = symbols('x')\n\n    # Number of students in class A is twice of class B\n    students_A = 2 * x\n    students_B = x\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # This gives us the equation: 4 * students_A + 20 = total_candies\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # This gives us the equation: 6 * students_B = total_candies - 16\n\n    # Equating the two expressions for total_candies gives us the system of equations:\n    equation1 = Eq(4 * students_A + 20, 6 * students_B + 16)\n\n    # We can solve the equation for x and find the number of candies by substituting back\n    # into either expression for total_candies\n    solutions = solve(equation1, x)\n\n    # Number of candies\n    total_candies = 4 * (2 * solutions[x]) + 20\n\n    return total_candies\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Every time Peter cuts off 5 arms, the octopus bugbear grows 1 arm back.\n    # So effectively, for each cycle of this happening, Peter has cut off 4 arms.\n\n    # Peter has cut off 21 arms in total\n    total_cut_arms = 21\n\n    # Number of complete cycles where 5 arms are cut and 1 grows back\n    cycles = total_cut_arms // 4\n\n    # Arms remaining after complete cycles\n    remaining_arms_cut = total_cut_arms % 4\n\n    # Original number of arms before starting to cut\n    original_arms = cycles * 5 + remaining_arms_cut\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The sum of the 10 numbers is 2021.\n    # The third greatest number is 246, which implies that the first and second\n    # numbers are at least 247 and 248, respectively, to be greater than 246.\n\n    # Since we want to find the minimum value of the fourth greatest number,\n    # we should minimize the sum of the six smallest numbers.\n    # We start by assigning them the smallest whole numbers starting from 1.\n\n    # Sum of numbers from 1 to 6 is 1+2+3+4+5+6 = 21.\n    min_sum_of_six = sum(range(1, 7))\n\n    # The remaining sum after subtracting the three greatest and\n    # the sum of the six smallest numbers:\n    remaining_sum = 2021 - (246 + 247 + 248) - min_sum_of_six\n\n    # The minimum value of the fourth greatest number is the\n    # remaining sum, since we've minimized the total of the rest.\n    min_fourth_number = remaining_sum\n\n    return min_fourth_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # While taking the coins one by one, to ensure getting 2 different colors,\n    # we may end up taking all coins of one color before getting a coin from the second color.\n    # There are 6 coins of each color, so after taking all 6 coins of one color,\n    # the next coin taken will surely be of a different color.\n    \n    # Therefore, we need to take all 6 coins of one color (worst case for one color) \n    # and then 1 more coin to guarantee getting a different color.\n    ans = 6 + 1  # 6 coins of one color + 1 coin of the other color\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Distance from the 1st tree to the 5th tree (4 intervals) is 20 cm\n    # Each interval between trees is therefore 20 cm / 4 intervals = 5 cm per interval\n    \n    # Distance from the 8th tree to the 14th tree involves 6 intervals (14 - 8)\n    # Calculate the distance for 6 intervals\n    distance_per_interval = 20 / 4\n    total_distance = distance_per_interval * (14 - 8)\n    \n    return total_distance\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_sec = 150\n    time_min = time_sec / 60\n    \n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38 * 32 + 37 * 33 + 36 * 34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    # In 4 years' time, the ratio of their ages will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Here we use \"parts\" to represent the ratio between Pip's and Bud's apples\n    # Since Pip has 5 times as many apples as Bud, we represent them as parts 5 and 1.\n    pip_parts = 5\n    bud_parts = 1\n\n    # Define the data\n    labels = ['Pip', 'Bud']\n    sizes = [pip_parts, bud_parts]\n\n    # Plot\n    fig1, ax1 = plt.subplots()\n    ax1.bar(labels, sizes)\n\n    # Save the graph to local\n    plt.savefig('parts_graph.png')\n    \n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # In a circle where no two adjacent numbers are mutually exclusive, we can start by realizing that\n    # the number that can divide the most numbers in the range 1 to 24 is 2. Therefore, if we place\n    # all even numbers in the circle, no two adjacent numbers would be coprime (since they share a factor of 2).\n    # With this knowledge, we know we cannot have more than 12 numbers in the circle,\n    # since there are 12 even numbers in the range 1 to 24.\n\n    # Next, we'll find the maximum set of numbers that meet the criteria by ensuring that\n    # no two adjacent numbers are mutually exclusive. We have to select numbers such that\n    # no number is coprime with its neighbors.\n\n    max_numbers = []\n    for i in range(1, 25):\n        if not max_numbers:  # If the max_numbers list is empty, add the first number\n            max_numbers.append(i)\n        else:\n            # Check if the current number (i) is coprime with the last added number in the circle\n            is_coprime = True\n            for j in max_numbers[-1:]:\n                if i % j == 0 or j % i == 0:  # They are not coprime (they share a factor)\n                    is_coprime = False\n                    break\n            # Also check if the current number (i) is coprime with the first in the list\n            # because it's a circle and first and last will be adjacent too\n            for j in max_numbers[:1]:\n                if i % j == 0 or j % i == 0:  # They are not coprime (they share a factor)\n                    is_coprime = False\n                    break\n            # If the current number is not coprime with either neighbor, add it to the circle\n            if is_coprime:\n                max_numbers.append(i)\n\n    # The maximum number of elements that can be selected is the length of max_numbers\n    ans = len(max_numbers)\n    return ans\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # According to the Pigeonhole Principle, at least one layer must have:\n    # (total_books + layers - 1) // layers books\n    most_books = (total_books + layers - 1) // layers\n    return most_books\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    number_of_rows = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    # sum = (n / 2) * (first_term + last_term)\n    total_seats = (number_of_rows / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of numbers\n    numbers = [3, 6, 9]\n\n    # Generate all permutations of the three numbers\n    perm = permutations(numbers)\n\n    # Count the number of unique permutations\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_numbers = 0.12 + 0.345 + 0.6789\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for i in range(1, 3):  # The first digit cannot be 0, so it must be 1 or 2\n        for j in range(0, 3):  # The second digit can be 0, 1, or 2\n            for k in range(0, 3):  # The third digit can be 0, 1, or 2\n                if i != j and j != k and i != k:  # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    val, _ = solve_congruence(*congruences)\n    \n    # We want to find the least number greater than 100\n    while val < 100:\n        val += 3 * 5 * 7\n    \n    return val\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = remainder + 1  # To ensure the remainder is less than the divisor for minimum dividend\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(betty, eliza - 185)\n    equation2 = Eq(eliza, 2 * veron)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')  # y as Hazel's age in three years\n    hazel_now = y - 3\n    jessica_now = hazel_now - 3  # Jessica is 3 years younger than Hazel\n    total_age_next_year = (hazel_now + 1) + (jessica_now + 1)  # Their ages next year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats')\n\n    # initially 65% were cows, so goats will be 100% - 65%\n    initial_goats = 100 - 65\n\n    # 240 more cows and goats were added\n    total_new_animals = cows + goats + 240\n\n    # the percentage of cows increased by 20%, so now cows are 65% + 20%\n    new_cows_percentage = 65 + 20\n\n    # number of goats doubled\n    new_goats = 2 * goats\n\n    # setup the equations based on the problem statement\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n    equation2 = Eq(0.85 * total_new_animals, cows + 240)\n    equation3 = Eq(new_goats, goats * 2)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert from m to cm\n    section3 = 150 / 10  # convert from mm to cm\n    \n    # Add all sections to get the total width\n    total_width = section1 + section2 + section3\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    age_difference = uncle_future_age - melanie_age\n    uncle_current_age = melanie_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    \n    for student in range(1, 51):\n        if student % 4 != 0 and student % 6 != 0:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Starting time of the film in 24-hour format\n    start_time = datetime.strptime('15:25', '%H:%M')\n\n    # Duration of the film in minutes\n    duration = timedelta(minutes=108)\n\n    # Calculate the end time\n    end_time = start_time + duration\n\n    # Format the end time in 24-hour format to return\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all its variables.\n    # The given degree is 5 and the degree of the monomial is 3 (from x^3) + 2n (from y^(2n))\n    # Therefore, to find n, we solve for 5 = 3 + 2n\n\n    # Degree of x^3\n    degree_of_x = 3\n\n    # The total degree given\n    total_degree = 5\n\n    # Equation: total_degree = degree_of_x + 2 * n\n    # Solve for n\n    n = (total_degree - degree_of_x) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n    year_diff = father - grey\n\n    equation1 = Eq(year_diff, 30)         # When Grey was born, his father was 30 years older\n    equation2 = Eq(father, 3 * grey)      # Father is now three times Grey's age\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    result = result.limit_denominator()\n    ans = result.numerator // result.denominator, result.numerator % result.denominator, result.denominator\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Each number or letter (1 to K) can have a maximum of 4 cards before it repeats (one in each suit).\n    # Pigeonhole principle states that if there are n pigeonholes and m+n-1 pigeons,\n    # at least one pigeonhole must contain more than one pigeon.\n    # For this problem, pigeonholes are the different numbers or letters (1 to 13), which is 13 pigeonholes.\n    # We want to find the minimum number of cards (m) such that there is at least one overlap.\n    # m + 13 - 1 pigeons (cards) -> find minimum m for which overlap happens\n    \n    number_of_pigeonholes = 13  # 1 to K (13 different ranks for the cards)\n\n    # To ensure that there is a repeat, we need to draw one more card than the number of pigeonholes\n    cards_to_draw = number_of_pigeonholes + 1  # The minimum number of cards to ensure a repeat\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # Iterate from the smallest 3-digit number to find the smallest\n    # number that fulfills the conditions.\n    for number in range(100, 1000):\n        if number % 2 == 0 and sum(map(int, str(number))) == 21:\n            return number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    ans += sum(2 / i for i in range(3, 21))\n    ans += sum(3 / i for i in range(4, 21))\n    ans += sum(4 / i for i in range(5, 21))\n    ans += sum(5 / i for i in range(6, 21))\n    ans += sum(6 / i for i in range(7, 21))\n    ans += sum(7 / i for i in range(8, 21))\n    ans += sum(8 / i for i in range(9, 21))\n    ans += sum(9 / i for i in range(10, 21))\n    ans += sum(10 / i for i in range(11, 21))\n    ans += sum(11 / i for i in range(12, 21))\n    ans += sum(12 / i for i in range(13, 21))\n    ans += sum(13 / i for i in range(14, 21))\n    ans += sum(14 / i for i in range(15, 21))\n    ans += sum(15 / i for i in range(16, 21))\n    ans += sum(16 / i for i in range(17, 21))\n    ans += sum(17 / i for i in range(18, 21))\n    ans += sum(18 / i for i in range(19, 21))\n    ans += 19 / 20\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fraction = 3/5\n    part_value = 18\n    whole_amount = part_value / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of cacti and sunflowers\n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # Each cactus costs $2 and each sunflower cost $7\n    cactus_price = 2\n    sunflower_price = 7\n    \n    # Equation for the total cost\n    total_cost_eq = Eq(cactus_price * cacti + sunflower_price * sunflowers, 156)\n    \n    # Equation for the difference in number of cacti and sunflowers\n    amount_difference_eq = Eq(cacti - sunflowers, 6)\n    \n    # Solve the system of equations\n    solutions = solve((total_cost_eq, amount_difference_eq), (cacti, sunflowers))\n    \n    # Get the number of cacti\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of one book\n    book = symbols('book')\n\n    # Given values\n    pencil_cost = 40  # in pence\n    sarah_more = 100  # Sarah paid 1.00 pounds more than Rebecca which is 100 pence\n\n    # Create equations based on the problem statement\n    # Sarah's total cost is the cost of 8 books plus the cost of 3 pencils\n    # Rebecca's total cost is the cost of 3 books plus the cost of 8 pencils\n    # Sarah paid 1.00 pounds (100 pence) more than Rebecca\n    equation = Eq(8 * book + 3 * pencil_cost, 3 * book + 8 * pencil_cost + sarah_more)\n\n    # Solve the equation for the cost of one book\n    book_cost = solve(equation, book)[0]\n\n    return book_cost\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum(i**2 for i in range(2, 21, 2))\n    odd_squares_sum = sum(i**2 for i in range(1, 20, 2))\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6  # 2 litres into each of 6 jugs\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let l be the number of Liverpool fans at first\n    # let m be the number of Manchester United fans at first\n    l, m = symbols('l m')\n\n    # initial condition: l = m + 1000\n    initial_condition = Eq(l, m + 1000)\n\n    # after 30 minutes, Liverpool fans are l + 472\n    # after 30 minutes, Manchester United fans are m + 4836\n    # final condition: m + 4836 = 3 * (l + 472)\n    final_condition = Eq(m + 4836, 3 * (l + 472))\n\n    # solving the system of equations\n    solutions = solve((initial_condition, final_condition), (l, m))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of a book be 'b' in pounds\n    b = symbols('b')\n\n    # Given that a pencil costs £0.40\n    pencil_cost = 0.40\n\n    # Sarah's total cost for 8 books and 3 pencils\n    sarah_cost = 8*b + 3*pencil_cost\n\n    # Rebecca's total cost for 3 books and 8 pencils\n    rebecca_cost = 3*b + 8*pencil_cost\n\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 1)\n\n    # Solving the equation to find the cost of one book 'b'\n    book_cost = solve(equation, b)[0]\n\n    return book_cost\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n    jack_points = andrew_points + jack_extra_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    final_amount = 3\n    pre_mike_amount = final_amount + 2\n    pre_nini_amount = pre_mike_amount * 2\n    pre_bob_amount = pre_nini_amount * 2\n    original_amount = pre_bob_amount * 2\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    equation1 = Eq(students_A * 5 + 10, peaches)\n    equation2 = Eq(students_B * 8 - 2, peaches)\n\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    number_str = \"\"\n    for i in range(1, 10000):\n        number_str += str(i)\n        if len(number_str) >= 2023:\n            break\n    ans = int(number_str[2022])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    third_number = 450 - first_number - second_number\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Each T-shirt cost $3, each cap cost $5\n    cost_t_shirt = 3\n    cost_cap = 5\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps and collected $132\n    collected_money = Eq((1 / 4) * t_shirts * cost_t_shirt + (1 / 5) * caps * cost_cap, 132)\n    \n    # The ratio of T-shirts to caps is 8:5\n    ratio = Eq(t_shirts / caps, 8 / 5)\n\n    # Solve the system of equations\n    solutions = solve((collected_money, ratio), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birthday_year = 98\n    current_year = 1\n    age_on_birthday_98 = 11\n    years_passed = (100 - birthday_year) + current_year\n    age_on_31_12_01 = age_on_birthday_98 + years_passed\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = (4, 6, 2, 5)\n    min_odd_combination = None\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 != 0:  # Check if the number is odd\n            if min_odd_combination is None or number < min_odd_combination:\n                min_odd_combination = number\n\n    return min_odd_combination\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return 9.95 - 2.6 - 3.42\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n\n    trips = students // boat_capacity\n    if students % boat_capacity > 0:\n        trips += 1\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    target_term = 36\n    ordinal_number = (target_term - first_term) // common_difference + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    joe_cards = 168  # each will have 168 cards after Joe gives some to Eric\n    eric_cards = 168\n\n    # Before giving the cards, Joe had 7 times Eric's cards\n    # Let x be the number of cards Eric originally had\n    # Then Joe originally had 7x cards\n    # After giving away some cards, Joe will have 7x - (168 - x) cards\n    # We set up the equation: 7x - (168 - x) = 168\n    # Simplifying the equation: 7x - 168 + x = 168\n    # combining like terms: 8x - 168 = 168\n    # Adding 168 to both sides: 8x = 336\n    # Divide by 8 to get x: x = 42\n\n    # Eric originally had 42 cards, Joe originally had 7 * 42 cards\n    joe_original_cards = 7 * 42  # Joe's original card count\n\n    # Joe needs to give away (joe_original_cards - 168) cards\n    cards_to_give = joe_original_cards - joe_cards\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens in [2, 3, 5, 7]:\n        for ones in [2, 3, 5, 7]:\n            N = 10 * tens + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    additional_catch = 9\n\n    total_catch = initial_catch - run_away + additional_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80\n    number_of_pictures = total_minutes / minutes_per_picture\n    return number_of_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for people in range(1, 100): # Searching within a reasonable number of people\n        if (19 - 6) == people / 2: # The difference in positions is half the total number of people\n            return people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        x2 = 10 - x1\n        if x1 != x2:\n            count += 1\n    # Since each pair is counted twice, we divide by 2\n    return count // 2\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    difference = amy_swims - joanne_swims\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n\n    # The equation translates to: 1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a = 1370\n    # Simplify the equation to: 1111*a + 111*b + 11*c + d = 1370\n    equation = Eq(1111 * a + 111 * b + 11 * c + d, 1370)\n    solutions = solve(equation)\n\n    for sol in solutions:\n        if 0 <= sol[a] <= 9 and 0 <= sol[b] <= 9 and 0 <= sol[c] <= 9 and 0 <= sol[d] <= 9:\n            return 1000 * sol[a] + 100 * sol[b] + 10 * sol[c] + sol[d]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Isaac's stamps as i and Joseph's stamps as j\n    i, j = symbols('i j')\n    \n    # Initial condition Isaac had 5 times as many stamps as Joseph\n    equation1 = Eq(i, 5 * j)\n    \n    # After Joseph received 154 stamps, he had 9/10 as many stamps as Isaac\n    equation2 = Eq(j + 154, 9/10 * i)\n    \n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (i, j))\n    \n    # Return how many stamps Isaac had\n    return solutions[i]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n\n    count_zeroes = 0\n    while factorial % 10 == 0:\n        count_zeroes += 1\n        factorial //= 10\n\n    return count_zeroes\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    n_base_8 = int('12345654321', 8)\n    remainder_7 = n_base_8 % 7\n    remainder_9 = n_base_8 % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Speed ratio of Linda to Ted is 3:4\n    # This means that for every 3 meters Linda jogs, Ted jogs 4 meters\n    # Let the length of the path be x meters.\n    # When Linda has jogged 1200 meters, Ted has jogged ((4/3) * 1200) meters.\n    ted_distance_when_linda_met = (4/3) * 1200\n    # The total length of the path is Linda's distance plus Ted's distance at that meeting point\n    path_length = 1200 + ted_distance_when_linda_met\n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # The sum of the digits of a number divisible by 9 must be a multiple of 9.\n    # The sum of the digits of the number 2018A is 2 + 0 + 1 + 8 + A.\n    # We need to find the value of A that makes the sum a multiple of 9.\n    # Since 2 + 0 + 1 + 8 = 11, we need to find a digit A such that 11 + A is divisible by 9.\n    # The smallest such A from the set {0, 1, ..., 9} is 7,\n    # because 11 + 7 = 18, which is divisible by 9.\n    A = 7\n    \n    # Now we have the 5-digit number 20187, and we want to find the remainder when it is divided by 8.\n    remainder = 20187 % 8\n    \n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Since Ryan says there are 5 squirrels in front of him,\n    # and there is only 1 squirrel between Ryan and Elvis,\n    # it means Elvis is the 7th squirrel behind Ryan.\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_elvis = 1\n\n    # The total number of squirrels is the number of squirrels in front of Ryan,\n    # plus Ryan himself, plus the squirrel between Ryan and Elvis,\n    # plus Elvis, plus the squirrels behind Elvis.\n    total_squirrels = ryan_front + 1 + between_ryan_elvis + 1 + elvis_behind\n    \n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from itertools import permutations\n\n    def is_derangement(perm):\n        return not any(i == j for i, j in enumerate(perm, start=1))\n    \n    all_perms = permutations(range(1, 7))\n    derangements = list(filter(is_derangement, all_perms))\n    \n    return len(derangements)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work_done_by_3_workers = workers * days_for_3_workers\n    days_for_1_worker = work_done_by_3_workers / 1  # work is inversely proportional to workers\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2%\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 0.25 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial number of pupils in School P be x\n    x = symbols('x')\n\n    # Given ratio of pupils in School P and School Q is 2:3\n    # So number of pupils in School Q is (3/2)x\n    # Given that 240 Primary one pupils were admitted to both schools respectively\n    # New ratio became 3:4\n    # Set up equation based on new ratio\n    # (x + 240) / ((3/2)*x + 240) = 3/4\n    equation = Eq((x + 240) / ((3/2)*x + 240), 3/4)\n\n    # Solve for x\n    solution_dict = solve(equation, x)\n    num_pupils_school_p = solution_dict[0]\n\n    return num_pupils_school_p\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    total_amount = 45\n    percentage = 30/100\n    ans = total_amount * percentage\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_of_odds = sum([x for x in range(0, 21) if x % 2 != 0])\n    return sum_of_odds\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack = symbols('jack')\n\n    # Create the equation describing the relationship between Jack's age five years ago and in eight years\n    equation = Eq((jack - 5), (jack + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    jack_age = solve(equation, jack)\n\n    return jack_age[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percentage_spent_on_bag = 70\n    percentage_remaining_after_bag = 100 - percentage_spent_on_bag\n\n    # Calculate the fraction spent on the purse from the remaining amount\n    fraction_spent_on_purse = 3 / 8\n    percentage_spent_on_purse = fraction_spent_on_purse * percentage_remaining_after_bag\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"EDUCATION\")\n    total_vowels = len(\"EDUCATIONAEIOU\")  # Including repeated vowels for 'EDUCATION'\n    total_consonants = total_letters - total_vowels\n    arrange_vowels = factorial(total_vowels)\n    arrange_consonants = factorial(total_consonants)\n    total_arrangements = factorial(total_letters)\n\n    # Place vowels together and treat as a single entity\n    # Now we have total_consonants + 1 entities\n    arrange_together = arrange_vowels * factorial(total_consonants + 1)\n    \n    # Subtract the arrangements where vowels are together from total arrangements\n    arrange_apart = total_arrangements - arrange_together\n    \n    return arrange_apart\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    additional_students = 1\n    total_candies = initial_students * candies_each_initially\n    final_students = initial_students + additional_students\n    candies_each_finally = total_candies // final_students\n    return candies_each_finally\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_BAC = 50\n    angle_BPC = 180 - angle_BAC\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Sharon initially buys 11 sweets\n    sweets = 11\n    # She has 11 wrappers after eating those sweets\n    wrappers = 11\n    \n    # As long as Sharon has at least 3 wrappers, she can exchange them for more sweets\n    while wrappers >= 3:\n        # Calculate how many new sweets she can get from the wrappers\n        new_sweets = wrappers // 3\n        # Add the new sweets to the total count\n        sweets += new_sweets\n        # Calculate the remaining wrappers (wrappers used + wrappers from new sweets)\n        wrappers = wrappers % 3 + new_sweets\n        \n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each type of bird\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Each bird has one head except the eight-tailed, which has two heads\n    heads = two_tailed + three_tailed + six_tailed + 2 * eight_tailed\n\n    # Set up the equations from the problem description\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)\n    eq2 = Eq(three_tailed, six_tailed/2 + 2)\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed, 4 * heads - 2)\n    eq4 = Eq(heads - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    number = 10  # smallest two-digit number\n    while not (number % 5 == 4 and number % 7 == 4):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_weight_kg = 5\n    cost_per_kg = 10\n    bag_weight_kg = 0.25\n    sell_price_per_bag = 0.65\n\n    total_cost = total_weight_kg * cost_per_kg\n    number_of_bags = total_weight_kg / bag_weight_kg\n    total_revenue = number_of_bags * sell_price_per_bag\n    profit = total_revenue - total_cost\n    profit_percentage = (profit / total_cost) * 100\n\n    return round(profit_percentage, 2)\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    roads_Ayton_Beeton = 4\n    roads_Beeton_Ceeton = 5\n    roads_Ceeton_Deeton = 6\n    roads_Ayton_Deeton_direct = 3\n\n    ways_through_Beeton_and_Ceeton = roads_Ayton_Beeton * roads_Beeton_Ceeton * roads_Ceeton_Deeton\n    total_ways = ways_through_Beeton_and_Ceeton + roads_Ayton_Deeton_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator_1 = 15\n    denominator_1 = 20\n    numerator_2 = 3\n\n    # Since the numerators are proportional, their denominators will also be proportional\n    denominator_2 = (numerator_2 * denominator_1) / numerator_1\n\n    return int(denominator_2)\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    twelfth_term = tenth_term + (12 - 10) * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        # Count how many times a number is underlined\n        underline_times = (i % 2 == 0) + (i % 3 == 0) + (i % 4 == 0)\n        if underline_times == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of money Joe had originally\n    joe_initial = symbols('joe_initial')\n\n    # Equation representing the situation after both spent $2.50 on ice cream\n    equation = Eq((3.75 - 2.50) + (joe_initial - 2.50), 5)\n\n    # Solving the equation for joe_initial\n    solution = solve(equation, joe_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_average = 135\n    last_5_days_average = 151\n    days = 8\n\n    total_trees_first_3_days = first_3_days_average * 3\n    total_trees_last_5_days = last_5_days_average * 5\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n\n    overall_average = total_trees / days\n\n    return overall_average\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation1 = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solutions = solve(equation1, magic_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be between 1 and 9\n        for tens in range(0, 10):  # tens digit must be between 0 and 9\n            for units in range(0, 10, 2):  # units digit must be even, hence only 0, 2, 4, 6, 8\n                if hundreds + tens + units == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n\n    equation = Eq(first_number, 6 * second_number)\n\n    magic_number_solution = solve(equation, magic_number)\n\n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boys_more_than_girls = 32\n    students = 0\n    layer = 0\n\n    while True:\n        boys = (layer * 2 + 1) ** 2 - (layer * 2 - 1) ** 2 if layer != 0 else 1\n        girls = ((layer + 1) * 2 + 1) ** 2 - (layer * 2 + 1) ** 2\n        \n        if boys - girls == boys_more_than_girls:\n            students = ((layer + 1) * 2 + 1) ** 2\n            break\n        layer += 1\n\n    return students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all required numbers are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n                isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the mass of strawberries be 's' and mangoes be 'm'\n    s, m = symbols('s m')\n\n    # Equation 1: mangoes have 448g more than strawberries\n    equation1 = Eq(m, s + 448)\n\n    # Equation 2: after giving away 900g of mangoes, strawberries are twice the mass of mangoes\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, m))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetable_dishes = 12\n    sandwiches = 6\n\n    # Eddie can pick two options out of four\n    # 1. Salad and Soup\n    ss = comb(salads, 1) * comb(soups, 1) \n    # 2. Salad and Vegetable Dish\n    sv = comb(salads, 1) * comb(vegetable_dishes, 1) \n    # 3. Salad and Sandwich\n    san_s = comb(salads, 1) * comb(sandwiches, 1) \n    # 4. Soup and Vegetable Dish\n    so_v = comb(soups, 1) * comb(vegetable_dishes, 1) \n    # 5. Soup and Sandwich\n    so_san = comb(soups, 1) * comb(sandwiches, 1) \n    # 6. Vegetable Dish and Sandwich\n    v_san = comb(vegetable_dishes, 1) * comb(sandwiches, 1) \n\n    # Total different choices\n    total_choices = ss + sv + san_s + so_v + so_san + v_san\n    ans = total_choices\n    return ans\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Representing the number of lemons as a symbol\n    lemons = symbols('lemons')\n\n    # Creating the equation based on the given information\n    # total_items = apples (2/3 of total) + bananas (1/9 of total) + lemons\n    # apples = lemons + 12\n    # substituting apples in terms of lemons into the total_items equation we get\n    # (2/3)*total_items = lemons + 12\n    # (1/9)*total_items = bananas\n\n    # Rearranging and combining fractions:\n    # (2/3)*total_items - lemons - 12 + (1/9)*total_items + lemons = total_items\n    # Now solve the equation for lemons\n    eq = Eq((2/3 + 1/9) - 1, -lemons/((lemons + 12) + lemons + (1/9)*(lemons + 12 + lemons)))\n\n    # Solving the equation\n    lemons_count = solve(eq, lemons)[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let m represent the original amount of money Max had\n    # let a represent the original amount of money Anthony had\n    m, a = symbols('m a')\n\n    # if Max bought the chocolates, the remaining amount of money for Max and Anthony is m-12 and a\n    # and their ratio is 2:5\n    equation1 = Eq((m - 12) / a, 2 / 5)\n\n    # if Anthony bought the chocolates, the remaining amount of money for Max and Anthony is m and a-12\n    # and their ratio is 8:13\n    equation2 = Eq(m / (a - 12), 8 / 13)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables representing the initial number of red and blue stickers\n    red = symbols('red')\n\n    # At first, the number of red and blue stickers was equal\n    # Let 'blue' be the variable representing the number of blue stickers left\n    blue = symbols('blue')\n\n    # Given that Liz gave away 2/3 of her red stickers\n    red_given_away = (2 / 3) * red \n    red_left = red - red_given_away\n\n    # In the end, Liz was left with 1/4 of her total stickers\n    total_stickers_left = (1 / 4) * (2 * red)\n\n    # Equation that represents the stickers left\n    equation = Eq(red_left + blue, total_stickers_left)\n\n    # Since we only need the fraction of blue stickers given away\n    fraction_blue_given_away = 1 - (blue / red)\n\n    # Solve the system of equations\n    fraction_solution = solve((equation, fraction_blue_given_away), (red, blue))\n\n    return fraction_solution[fraction_blue_given_away]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Number of pens and kids\n    pens = 20\n    kids = 6\n    \n    # The problem is equivalent to putting 20 - 6 = 14 identical pens into 6 different boxes\n    # Every kid gets one pen, and we distribute the remaining\n    pens_to_distribute = pens - kids\n    \n    # Use the formula for combinations with repetition: C(n+k-1, k-1)\n    # which is the same as C((pens_to_distribute + kids - 1), kids - 1)\n    ans = factorial(pens_to_distribute + kids - 1) // (factorial(pens_to_distribute) * factorial(kids - 1))\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Considering the unit digit of powers of 4, we notice a pattern:\n    # 4^1 = 4, 4^2 = 16, 4^3 = 64, 4^4 = 256, 4^5 = 1024...\n    # The unit digit follows a pattern: 4, 6, 4, 6...\n    # This pattern repeats every 2 powers: 4^(2n) will have a unit digit 6, 4^(2n+1) will have a unit digit 4.\n\n    # Since 2022 is even (2022 = 2n for some integer n), the unit digit of 4^2022 will be 6.\n    # Hence the unit digit of 444^2022 is the same as the unit digit of 4^2022.\n    ans = 6\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Initialize variables to store the marbles in each pile\n    # We start with the smallest configuration possible where each pile has different number of marbles\n    # and the sum is less than 16 (1+2+3+4 = 10). Start from that arrangement and increase the size of piles\n    # while keeping the total count to 16.\n    pile1 = 1\n    pile2 = 2\n    pile3 = 3\n    pile4 = 4\n\n    # Increase the size of the biggest pile (pile4) step by step,\n    # adjusting the other piles to keep the total number of marbles equal to 16.\n    while (pile1 + pile2 + pile3 + pile4) < 16:\n        # Increment the number of marbles in the biggest pile\n        pile4 += 1\n        # Fine-tune the number in smaller piles to make sure the total is 16\n        remaining = 16 - pile4\n        # Adjust the smaller piles while maintaining different numbers of marbles\n        pile3 = remaining - 3  # reserve at least 1 and 2 for the smaller two piles\n        pile2 = 2  # second smallest pile\n        pile1 = remaining - pile2 - pile3  # adjust the smallest pile\n\n    # Ensuring that pile1 < pile2 < pile3 < pile4\n    if not (pile1 < pile2 < pile3 < pile4):\n        # if not in order, one of the bigger piles needs to be smaller\n        pile4 -= 1\n    \n    # The largest pile is represented by pile4\n    return pile4\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimetres\n    lengths_mm = {\n        \"10 millimetres\": 10,\n        \"100 centimetres\": 100 * 10,\n        \"10 metres\": 10 * 1000,\n        \"2 kilometres\": 2 * 1000 * 1000,\n        \"2800 centimetres\": 2800 * 10,\n        \"2500 metres\": 2500 * 1000,\n        \"100 millimetres\": 100,\n        \"100 metres\": 100 * 1000\n    }\n    \n    # Find the smallest length by comparing values\n    smallest_length_mm = min(lengths_mm.values())\n\n    # Find the corresponding key for the smallest value\n    for key, value in lengths_mm.items():\n        if value == smallest_length_mm:\n            ans = key\n            break\n\n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    common_difference = 4\n\n    # Calculate the number of terms n in the arithmetic sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Use the formula for the sum of an arithmetic series: (n/2)(first term + last term)\n    total_pages = (n * (first_term + last_term)) // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    smallest_6_digit_number = 100000\n    largest_5_digit_number = 99999\n\n    ans = smallest_6_digit_number - largest_5_digit_number\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['1', '2', '3', '4', '5', '6']\n    odd_numbers_count = 0\n    \n    for perm in permutations(digits, 3):\n        if int(perm[2]) % 2 == 1:  # Check if the third digit is odd\n            odd_numbers_count += 1\n      \n    return odd_numbers_count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim = 20\n    basketball = 25\n    both = 10\n    neither = 9\n\n    total_students = (swim + basketball - both) + neither\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 4.\n    # The first term (a1) is 3, and the number of terms (n) is 5.\n    \n    a1 = 3\n    n = 5\n    d = 4\n\n    # The sum of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (2*a1 + (n-1)*d)\n\n    ans = n / 2 * (2 * a1 + (n - 1) * d)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    ans = 324 * 24\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    additional_steps = 0\n    while True:\n        additional_steps += 1\n        if is_palindrome(steps + additional_steps):\n            return additional_steps\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, (2 / 3) * B)\n    equation2 = Eq(B, (4 / 5) * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        # Convert the page number to string and count the number of '4's in it\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pupils as n and the number of bookmarks as b.\n    n, b = symbols('n b')\n\n    # Given that if he gives each pupil 4 bookmarks, he will have 8 left.\n    equation1 = Eq(4*n + 8, b)\n\n    # If he gives each pupil 6 bookmarks, he is short of 10 bookmarks.\n    equation2 = Eq(6*n - 10, b)\n\n    # Solving the system of equations for n and b.\n    solutions = solve((equation1, equation2), (n, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    for ducks in range(26):\n        cows = 25 - ducks\n        if 4 * cows + 2 * ducks == 68:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the average heights\n    avg_height_girls, avg_height_boys = symbols('avg_height_girls avg_height_boys')\n\n    # Equation for the total height based on the average\n    total_height = Eq((11 * avg_height_girls) + (5 * avg_height_boys), (11 + 5) * 122.5)\n\n    # Equation for the average height difference between girls and boys\n    diff_avg_height = Eq(avg_height_girls, avg_height_boys + 3.2)\n\n    # Solve the system of equations\n    solutions = solve((total_height, diff_avg_height), (avg_height_girls, avg_height_boys))\n\n    return solutions[avg_height_girls]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Let f(n) be the maximum number of different parts that can be divided by n triangles.\n    # It follows that f(n) = f(n-1) + n for n ≥ 1 with f(0) = 1 (the whole plane without any triangle).\n    # This is because each new triangle can intersect with all the previous ones creating n new regions at most.\n    \n    f = [1]  # starting with f(0) = 1\n    for n in range(1, 6):  # from the first to the fifth triangle\n        f.append(f[n-1] + n)  # applying the recursive formula f(n) = f(n-1) + n\n    \n    return f[5]  # f(5) will be the maximum number of parts with 5 triangles\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7, 602 % 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be number of girls, so 70 - g is number of boys\n    g = symbols('g')\n    \n    # Total score for girls is 70 * g, for boys is 63 * (70 - g), and total is 70 students * 66 average\n    total_score = 70 * 66\n    girls_score = 70 * g\n    boys_score = 63 * (70 - g)\n\n    # Equation representing the sum of girls' and boys' scores equals total score\n    equation = Eq(girls_score + boys_score, total_score)\n\n    # Solve the equation to find the number of girls\n    solutions = solve(equation, g)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula S = n/2 * (first_term + last_term)\n    # where n is the number of terms. We know n = 9 and S = 1503.\n    n = 9\n    S = 1503\n\n    # We can rearrange the formula to find the average term (average = A):\n    # S = n/2 * (2 * A) -> A = S / n\n    A = S / n\n\n    # Since all numbers are consecutive odd numbers, the terms are equally spaced around the average.\n    # The smallest value is 4 terms away from the average: smallest_value = A - 4 * difference\n    # The difference (d) between consecutive odd numbers is 2.\n    d = 2\n\n    # Calculate the smallest value\n    smallest_value = A - (n // 2) * d\n\n    return int(smallest_value)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    difference = (term_108 - term_32) / (108 - 32)\n    \n    first_term = term_32 - (32 - 1) * difference\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3! ways for the first three passes as the ball can be passed to any other individual.\n    # However, for the last pass to return to A, the third person should not be A.\n    # Therefore, there are only 2 choices for the last pass (B, C, or D).\n    return 3 * 2 * 1 * 2\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_crisp_bag = 5\n    days = 5\n\n    total_cost = cost_per_crisp_bag * days\n    \n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has.\n    # According to the problem, when Jason gives 4 books to Anthea, they will have the same number.\n    # So, we have Jason's original number of books (30) minus 4 equals Anthea's original number plus 4.\n    # 30 - 4 = x + 4\n    # Solving for x gives us the original number of books Anthea has:\n    x = 30 - 4 - 4\n    \n    # The difference between the storybooks that Jason and Anthea originally had is:\n    difference = 30 - x\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q, r in permutations(range(10), 3):\n        if p != 0 and q != 0:\n            qp = q * 10 + p\n            rq = r * 10 + q\n            pr = p * 10 + r\n            if qp - pr == rq:\n                return qp\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Kate had 42 candies left after eating 1/4 of the candies she received\n    # which means those 42 candies are 3/4 of the amount Jane gave to Kate\n    # Let x be the total number of candies Jane gave to Kate\n    # 3/4 * x = 42\n    # x = 42 * 4 / 3\n    x = 42 * 4 / 3\n    \n    # Jane ate 1/3 of the candies plus 4 candies\n    # so the total candies Jane had is x + 1/3 * x + 4\n    # Let y be the total number of candies Jane had initially\n    # y = x + 1/3 * x + 4\n    y = x + (1/3 * x) + 4\n    \n    # Donna kept half of her candies plus 3 candies and gave the rest to Jane\n    # so the total candies Donna had is 2 * (y - 3)\n    # Let z be the total number of candies Donna had initially\n    # z = 2 * (y - 3)\n    z = 2 * (y - 3)\n    \n    return z\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 4 * 10 // math.gcd(4, 10)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    return 0.98 + 1.98 + 2.98 + 3.98\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's jogging speed in meters per second\n    time_s = 12 * 60  # 12 minutes converted to seconds\n    distance = speed_m_per_s * time_s  # Distance = speed * time\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    first_product = 2020 * 68\n    second_product = 505 * 128\n\n    # Extract common factors\n    reduced_first_product = (2020 // common_factor_1) * (68 // common_factor_2)\n    reduced_second_product = (505 // common_factor_2) * (128 // common_factor_1)\n\n    # Combine the common factors for addition\n    combined_common_factor = common_factor_1 * common_factor_2\n\n    # Calculate final result\n    ans = (reduced_first_product + reduced_second_product) * combined_common_factor\n\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # Efficiencies are inversely related to the number of days taken to finish a job\n    # Let's denote the number of days taken by B to finish the job alone as 'b_days'\n    # Then, A can finish the job in 'b_days - 12'\n    # Given A's efficiency is twice B's, A would take half the time that B does if they worked separately\n    # b_days - 12 = b_days / 2\n    # Solving for 'b_days' gives us b_days = 24\n    b_days = 24\n    \n    # A's efficiency is twice B's, so A takes half the time that B takes\n    # A takes 12 days to finish the job alone (24 - 12)\n    a_days = b_days - 12\n    \n    # Now, we calculate their combined work rate\n    # If A finishes the job in 12 days, A's work rate is 1/12 job/day\n    # If B finishes the job in 24 days, B's work rate is 1/24 job/day\n    # The combined work rate is then (1/12) + (1/24) job/day\n    combined_rate = (1/a_days) + (1/b_days)\n    \n    # The time taken to finish the job, working together at the combined work rate, is 1 / combined_rate days\n    combined_days = 1 / combined_rate\n    \n    return combined_days\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    newspaper_cost = 2.20\n    change_received = 4.83\n    note_given = 10\n\n    tissues_cost = note_given - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial conditions: boys = girls\n    initial_condition = Eq(boys, girls)\n\n    # After the leaving boys and girls\n    boys_left = boys - (3/5)*boys\n    girls_left = girls - 42\n\n    # Equation representing the situation after leaving\n    situation_after = Eq(boys_left, girls_left + 12)\n\n    # Solving the equations\n    solutions = solve((initial_condition, situation_after), (boys, girls))\n\n    return solutions[boys] * 2  # Total number of students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n\n    # Let d be the distance. We'll use the proportionality of time and speed.\n    # Time is distance over speed, so:\n    # time_taken_at_3kmph = d / 3 and time_taken_at_5kmph = d / 5.\n\n    # The difference in time is the late_time when traveling at 3 km/h minus the early time at 5 km/h.\n    # late_time = (d / 3) - correct_time and \n    # -early_time = (d / 5) - correct_time.\n\n    # Subtracting both equations: late_time - (-early_time) = (d / 3) - (d / 5)\n    # Solve for d\n    d = (late_time + early_time) / (1/3 - 1/5)\n\n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n\n    digits = '123'\n    all_permutations = set()\n\n    # Get all permutations for the different lengths\n    for i in range(1, len(digits) + 1):\n        all_permutations.update(permutations(digits, i))\n\n    # Convert the tuples into integers\n    all_numbers = {''.join(p) for p in all_permutations}\n\n    return len(all_numbers)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 * baskets_of_tomatoes + 3\n\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n  \n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Let the original number of boys be 3x and girls be 2x\n    # After 12 boys and 12 girls joined, the number of boys became 3x + 12\n    # and the number of girls became 2x + 12.\n    # The new ratio of boys to girls is 19:14, so we have:\n    # (3x + 12) / (2x + 12) = 19/14\n    # Cross-multiplying gives us:\n    # 14 * (3x + 12) = 19 * (2x + 12)\n    # 42x + 168 = 38x + 228\n    # 42x - 38x = 228 - 168\n    # 4x = 60\n    # x = 15\n    # The original number of children is 3x + 2x = 5x\n    original_children = 5 * 15\n    # Total children in the afternoon = original + 12 boys and 12 girls\n    total = original_children + 12 + 12\n    return total\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    number_of_cases = 12\n    total_cost = cost_per_case * number_of_cases\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    temp_increase = today_temp - last_night_temp\n    return temp_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For the first part with four different colored socks\n    num_ways_different_colors = factorial(4)  # 4!\n\n    # For the second part with two pairs of different colored socks\n    num_ways_two_pairs = factorial(4) // (factorial(2) ** 2)  # 4! / (2!*2!)\n\n    return num_ways_different_colors, num_ways_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    return A + B + C\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Period on Earth\n    T_earth = 1  # seconds\n\n    # Acceleration due to gravity on Earth\n    g_earth = 9.81  # m/s^2\n\n    # The period of a pendulum is T = 2π * sqrt(L/g)\n    # where L is the length of the pendulum and g is the acceleration due to gravity\n    # Since (2π * sqrt(L)) remains constant between Earth and the Moon, we can compare periods directly:\n    # T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    # g_moon is one-sixth of g_earth\n    g_moon = g_earth / 6\n\n    # Calculate the period on the Moon\n    T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    full_length = 23 + 37 - 3\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = william_points + 24\n        total_points = william_points + justin_points\n        if total_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n    \n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since this is a number puzzle, and there are no explicit instructions given,\n    # there's no actual way to solve this question without more information.\n    # The value of A cannot be determined from the given context.\n    # Typically, you'd need additional relations or a puzzle description to find A.\n    # As such, we cannot provide a definite answer here.\n    # We'll return None to indicate an indeterminate result.\n    return None\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's daily work rate\n    A_rate = 1 / 15\n    # B's daily work rate\n    B_rate = 1 / 10\n    # Combined rate\n    combined_rate = A_rate + B_rate\n    # Amount of work done in 3 days\n    work_done = 3 * combined_rate\n    # Remaining work\n    remaining_work = 1 - work_done\n    # Days for B to finish the remaining job\n    days_for_B = remaining_work / B_rate\n\n    return days_for_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    red_tiles, green_tiles = 0, 0\n    \n    for layer in range(0, side_length // 2):\n        if layer % 2 == 0:  # even layers are red\n            red_tiles += (side_length - 2 * layer) * 4 - 4\n        else:  # odd layers are green\n            green_tiles += (side_length - 2 * layer) * 4 - 4\n            \n    # The center tile case (if side_length is odd)\n    if side_length % 2 == 1:\n        red_tiles += 1\n    \n    if red_tiles > green_tiles:\n        more_color = 'red'\n    else:\n        more_color = 'green'\n    \n    difference = abs(red_tiles - green_tiles)\n    return (more_color, difference)\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Since the people are standing in a square array,\n    # the length of each side of the square is the square root of 100.\n    \n    import math\n    side_length = int(math.sqrt(100))\n    \n    # The total number of people in the outermost layer is equal to the perimeter of the square\n    # minus the four corner people, as they are counted twice when calculating the perimeter.\n    \n    perimeter = 4 * side_length\n    outermost_people = perimeter - 4\n    \n    return outermost_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    count = 0\n\n    while term > 0:\n        count += 1\n        term += common_difference\n\n    return count\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Tom wants to win so he needs to leave an equal number of cards in each pile\n    # after his turn.\n    \n    # The difference between piles A and B is 88 - 52 = 36. So Tom's first move\n    # should be to take 36 cards from pile A making both piles even.\n    \n    # Now, Pile A has 88 - 36 = 52 cards.\n    # This way, no matter how Jane plays, Tom can always mirror her moves but on the\n    # opposite pile to ensure they both pick the same number of cards each round.\n    \n    # The play continues until the last round where both piles have one card each\n    # and it's Tom's turn, he can pick the last card from either pile and win.\n    \n    # Winning Strategy: Take 36 cards from Pile A in the first move.\n    pile_A = 88\n    pile_B = 52\n    \n    # Tom's first move.\n    tom_first_move = pile_A - pile_B\n    \n    # Set the number of cards to be equal in both piles after Tom's first move.\n    pile_A -= tom_first_move\n    \n    # Return Tom's first move as the winning strategy.\n    return tom_first_move\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had.\n    x = 280 / (1 - 3/7 - (1/8)*(4/7))\n    \n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    loafs_needed = 24\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # If at least one student gets at least 3 apples, \n    # and there are 80 apples to distribute,\n    # then the maximum number of students that can be in the class,\n    # where all except one get 1 apple and one gets 3 apples or more, is 78.\n    # This is because we reserve 3 apples for one student and distribute the rest one per student.\n    \n    return 80 - 3 + 1\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    # Ratios\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n\n    # Sum of balls\n    equation3 = Eq(red + white + black, 34)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n    \n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people_count = 8\n\n    amount_per_person = total_amount / people_count\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since the factorial of a number greater than 9 will always have a last digit of 0 (as it includes 10 as a factor),\n    # the last digit of 2014! is 0.\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 ** 2  # Area of the square base in cm^2\n    hole_area = 1 * 1  # Area of the square hole in cm^2\n    effective_base_area = base_area - hole_area  # Substract the hole area from the base area\n\n    volume = 480  # Given volume of the prism in cm^3\n    height = volume / effective_base_area  # Prism's height is volume divided by base area\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(n * (2 * n - 1) for n in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    cost_of_pencil = 5\n    cost_of_pen = 15\n\n    pencils_per_pen = cost_of_pen // cost_of_pencil\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Let the original number of yellow beads be 3x and green beads be 2x\n    # After buying more beads, the number of yellow beads becomes 3x + 5\n    # and the number of green beads becomes 2x + 20\n    # The new ratio is 2x + 20 / 3x + 5 = 2 / 3\n    # Cross multiply to find the value of x\n    \n    x = symbols('x')\n    equation = Eq((2*x + 20)/(3*x + 5), 3/2)\n    solution = solve(equation, x)\n    \n    # The total number of beads he had at first is the sum of yellow and green beads, which is 3x + 2x = 5x\n    total_beads_initially = 5 * solution[0]\n    \n    return total_beads_initially\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n\n    total_marbles = marbles_given_to_brother + (marbles_given_to_each_sister * 2) + marbles_left_with_henry\n\n    return total_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # for two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # numbers are 11, 22, ..., 99\n    # for three-digit palindromic numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # numbers are 101, 111, ..., 191, 202, 212, ..., 292, ..., 909, 919, ..., 999\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum([(2*i + 1) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    \n    count = 0\n    for p in permutations(digits, 4):\n        if p[-1] in even_digits:\n            count += 1\n            \n    ans = count - 3  # Subtract permutations where '0' is at the beginning\n    return ans\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    # Let's say x is the number of correct answers\n    # Then, (50 - x) will be the number of wrong answers\n    # We have the equation: 4x - (50 - x) = 110\n    # which simplifies to: 5x - 50 = 110\n    # further simplification: 5x = 160\n    x = (110 + 50) // 5\n    \n    return x\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n    \n    remaining_cakes = total_cakes - (vanilla_cakes + banana_cakes)\n    # Since the ratio of lemon cakes to chocolate cakes is 4:5\n    # Let the common ratio be x, so we have 4x + 5x = remaining_cakes\n    # Solve for x\n    x = remaining_cakes / (4 + 5)\n    lemon_cakes = 4 * x\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    \n    # Choose the digit for the hundreds place (1-9, can't be 0)\n    for hundreds in range(1, 10):\n        # Choose the digit for the tens and the ones place (0-9)\n        for other in range(0, 10):\n            if hundreds != other:\n                # There are two possibilities for each number: XYX or XXY\n                count += 2\n                \n    # Subtract the count for numbers with all the same digits (111, 222, ...)\n    # Since for these numbers, the hundreds and the other digit are same and we've counted them twice.\n    count -= 9\n    \n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60  # Amy's speed in miles per hour\n    christen_speed = 40  # Christen's speed in miles per hour\n    time_to_meet = 4  # Time taken to meet in hours\n\n    # Total distance covered by both when they meet\n    total_distance = (amy_speed + christen_speed) * time_to_meet\n\n    # Time taken by Christen to reach Amy's starting point\n    time_for_christen_to_reach_amy = total_distance / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends to Judy\n    x = symbols('x')\n\n    # Let L be the number of books Lily has, J be the number Judy has\n    L, J = symbols('L J')\n\n    # Equation representing that after sending x books, they have the same amount\n    equation1 = Eq(L - x, J + x)\n\n    # Equation representing that Lily has more books than Judy\n    equation2 = Eq(L, J + 2*x)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (L, J, x))\n\n    # The difference in the number of books they originally had\n    ans = solutions[x]\n\n    return ans\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are three people: Cici, Lily, and April.\n    # Starting from Lily, she can pass the ball to either Cici or April (2 ways).\n    # Whoever receives the ball then has 2 options to pass it back to the other two.\n    # Since Lily started, if Cici receives the ball, she can only pass it to Lily or April.\n    # If April receives the ball, she can only pass it to Lily or Cici.\n    # This means that after the first pass, there are always 2 options for the second pass.\n    \n    # Number of ways Lily can pass to the others\n    first_pass_options = 2\n    # Number of ways the ball can be passed after the first pass\n    second_pass_options = 2\n    \n    # Total number of different passing ways\n    total_passing_ways = first_pass_options * second_pass_options\n    \n    return total_passing_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_for_first_four = 89 * 4\n    score_for_fifth = 94\n    total_score = total_for_first_four + score_for_fifth\n    average = total_score / 5\n    return average\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n    wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibbles * wibble_arms\n    total_wobble_arms = total_arms - total_wibble_arms\n    wobbles = total_wobble_arms // wobble_arms\n\n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 180)) # since 7a+9b=179, both a and b have to be less than 179\n    for a in primes:\n        for b in primes:\n            if 7*a + 9*b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(0, 10):\n            if hundreds == ones + 1:\n                tens = 2 * hundreds\n                if tens < 10:\n                    number = hundreds * 100 + tens * 10 + ones\n                    if hundreds + tens + ones == 15:\n                        return number\n    return None\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32 * (1/8) * (1/6) * (1/4)\n    seconds = minutes * 60\n    return int(seconds)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10  # km/h\n    lead_distance = 10  # km\n\n    # Relative speed is the difference in speeds because they are moving in the same direction\n    relative_speed = maverick_speed - kelvin_speed  # km/h\n\n    # Convert Maverick's time to hours (since the speed is in km/h)\n    maverick_time = 24 / 60  # 24 minutes to hours\n\n    # Check if Maverick's claim is correct by calculating the distance he would cover in 24 minutes\n    distance_maverick_covers = maverick_speed * maverick_time\n\n    # Maverick's claim is correct only if the distance covered is equal or greater than the lead distance\n    if distance_maverick_covers >= lead_distance:\n        return maverick_time * 60  # Maverick is correct, returning his time in minutes\n    else:\n        # Kelvin is correct. Calculate how long Maverick actually took to catch up\n        time_to_catch_up = lead_distance / relative_speed # time = distance / speed \n        return time_to_catch_up * 60  # Converting hours to minutes\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the custom operator function\n    def custom_operator(a, b):\n        return a + b - (a * b / 910)\n\n    # Initialize the answer with the last number in the sequence\n    ans = 2016\n\n    # Iterate in reverse order applying the custom operator\n    for i in range(2015,0,-1):\n        ans = custom_operator(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result_number = (113 - 5) / 9\n    return result_number\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    # Multiplication principle: pick 1 boy in 3 ways and 1 girl in 4 ways.\n    ans = boys * girls\n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # The problem is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 6 with the constraint that each xi >= 1\n    # Since each kid must get at least one eraser, we can account for this by giving\n    # each kid one eraser from the start and distribute the remaining 3 (6 - 3 kids = 3 erasers) freely.\n    # Now the problem is finding the number of non-negative integer solutions to\n    # x1 + x2 + x3 = 3, which can be calculated using stars and bars combinatorial method.\n    \n    # Here is why:\n    # Imagine we have 3 erasers (stars) to distribute and 2 bars to represent separations between the kids.\n    # For example, one distribution can be \"* | * | **\", which means the first kid gets 1 eraser,\n    # the second kid gets 1, and the third kid gets 2.\n    # So we have a total of 3 stars and 2 bars, and we need to find all possible arrangements of them.\n    \n    erasers_remaining = 3\n    kids_minus_one = 3 - 1\n    total_slots = erasers_remaining + kids_minus_one\n    \n    # We calculate combinations of choosing (erasers_remaining) positions for placing erasers out of total_slots\n    from math import comb\n    count = comb(total_slots, erasers_remaining)\n\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_score:\n            return correct\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Number of spaces between plum trees is one less than the number of plum trees\n    total_plum_tree_spaces = 41 - 1\n    # Total distance covered by plum trees including the first and last tree\n    total_plum_tree_distance = total_plum_tree_spaces * 4\n    # Since pine trees are also at opposite ends of the road, we can just add 5m to the distance\n    total_pine_tree_distance = total_plum_tree_distance + 5\n    # The number of pine trees is the total distance divided by the space between pine trees\n    # Plus one for the pine tree at the beginning of the road\n    num_pine_trees = (total_pine_tree_distance // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the current ages of the two men\n    younger, older = symbols('younger older')\n    \n    # Create equations based on the problem statement\n    # When the older man was the age of the younger man, the younger man was 4\n    equation1 = Eq(older - younger, younger - 4)\n    \n    # When the younger man will be the age of the older man, he will be 61\n    equation2 = Eq(older + (older - younger), 61)\n    \n    # Solve the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (younger, older))\n    \n    # Return the age of the younger man\n    return solutions[younger]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people = 10\n    original_hours = 9\n    target_hours = 3\n\n    # Calculate work rate per person per hour\n    work_per_person = 1 / (people * original_hours)\n\n    # Calculate total work done, which remains constant\n    total_work = people * work_per_person * original_hours\n\n    # Calculate number of people needed to do the total work in target hours\n    required_people = total_work / (work_per_person * target_hours)\n\n    return int(required_people)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    total_money = 120 / (2/5) * (3/3)\n    total_money = total_money / (2/3)\n\n    return total_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy = 30\n    nancy = candy - 4\n    return nancy\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)   # remaining watermelons after second day forms 40% of what was left after the first day\n    initial_watermelons = remaining_after_first_day / (2/3)  # initial amount is 3/3; 1/3 was sold so 2/3 was left after the first day\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_of_squares = (n*(n+1)*(2*n+1))//6 - ((first_term-1)*first_term*(2*(first_term-1)+1))//6\n    return sum_of_squares\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 13 and len({x1, x2, x3}) == 3:\n                    count += 1\n    # Since the order of selection doesn't matter, we must divide by the number of permutations for the 3 distinct numbers,\n    # which is 3! (because we have counted each combination 3! times in the above nested loops)\n    count //= 6  \n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    return 5 + 1 + 1 + 7  # Jessica's position + Jessica's desk + Judy's desk + Judy's position\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original number of students\n    total_students = 152\n\n    # Equation representing removing 1/11 of boys and 5 girls\n    equation1 = Eq(boys - boys/11, girls - 5)\n    # Equation representing total number of students\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(75 / 100 * x - 5, 2.5)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    decrement = 11\n\n    number = start\n    while number >= 0:\n        number -= decrement\n\n    return number\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    one_number = 0.11\n    other_number = 2 * midpoint - one_number\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_chocolate = 7 / 12\n    toffees = chocolates * toffees_per_chocolate\n\n    return toffees\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in [i for i in range(1, num + 1) if num % i == 0]:\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    return 21 + 27 + 19 - 17 + 22 + 18\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    # price of one case of mangoes\n    price_mangoes = 56\n    \n    # total number of cases\n    total_cases_mangoes = 24\n    total_cases_lychees = 19\n    \n    # total cost\n    total_cost = 2826\n    \n    # cost of all mangoes\n    cost_mangoes = total_cases_mangoes * price_mangoes\n    \n    # cost of all lychees\n    cost_lychees = total_cost - cost_mangoes\n    \n    # cost per case of lychees\n    price_lychees = cost_lychees / total_cases_lychees\n    \n    return price_lychees\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    # Define a helper function that takes a permutation and checks if the multiplication is valid\n    def check_permutation(p):\n        a, b, c, d, e, f, g, h = p\n        # Construct the numbers by placing the digits\n        top_number = a * 1000 + b * 100 + c * 10 + d\n        bottom_number = e * 10 + f\n        result = g * 10000 + h * 1000 + b * 100 + c * 10 + d\n        # Return True if the multiplication is valid according to the puzzle\n        return top_number * bottom_number == result\n    \n    # Loop through all permutations of the digits 0-9\n    for p in permutations(range(10), 8):\n        if check_permutation(p):\n            # If a valid permutation is found, calculate the sum A+B+C\n            a, b, c, d, e, f, g, h = p\n            return a + b + c\n    \n    return None\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n    amount = principal * ((1 + rate) ** years)\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24 * x - 5 * (3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percent_value = 65 / 100\n    decimal_value = 0.507\n    fraction_value = 1 / 4\n\n    ans = percent_value + decimal_value + fraction_value\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    perm_set = set(permutations(cards, 3)) # Generate all permutations of length 3\n    # Remove permutations that start with '0', convert to integer and then to a set to remove duplicates\n    valid_nums = set(int(''.join(p)) for p in perm_set if p[0] != '0')\n    return len(valid_nums)\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    for x in range(51):\n        y = 50 - x\n        if 10 * x + 15 * y == 555:\n            return y\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    jogging_time = 1        # Susan jogs for 1 hour\n    walking_time = 2        # Susan walks for 2 hours\n\n    jogging_speed = 5       # Susan's jogging speed is 5 mph\n    walking_speed = 3       # Susan's walking speed is 3 mph\n\n    # Calculate the distance traveled during jogging and walking\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    # Calculate the total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # Then the next four consecutive numbers will be x+1, x+2, x+3, x+4\n    # Sum of these five consecutive numbers is x + (x+1) + (x+2) + (x+3) + (x+4) = 100\n    # 5x + 10 = 100\n    # 5x = 90\n    # x = 18\n    return 18  # Smallest number in the sequence is x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and their exponents\n    factors = factorint(44000)\n    \n    # Initialize q to 1\n    q = 1\n    \n    # Go through each prime factor and its exponent in the factorization of 44000\n    for prime, exponent in factors.items():\n        # If the exponent is not a multiple of 3 (cube power), multiply q by the prime\n        # raised to the smallest multiple of 3 that is greater than the exponent\n        if exponent % 3 != 0:\n            q *= prime ** (3 - exponent % 3)\n    \n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # Since there are 13 different numbers and 4 patterns,\n    # We need to find the worst-case scenario to guarantee 3 cards with the same number.\n    \n    # We can draw 2 cards of each number without having 3 of the same number.\n    cards_drawn = 13 * 2\n    \n    # But the next card we draw could be the third card of a number we already have drawn twice.\n    cards_drawn += 1\n    \n    return cards_drawn\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # As there are no direct formulas to solve multiplication tiling puzzles,\n    # we have to iterate through possibilities for P, Q and R.\n\n    # P, Q, R can only be 0 to 9 as they are single digits in multiplication\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Check for the conditions given in multiplication tiles\n                #   PQR\n                # x   R\n                # -----\n                #  PQRR (because last digit of the product must be R)\n                if (100*P + 10*Q + R) * R % 1000 == 100*P + 10*Q + R:\n                    return P + Q + R  # Return the sum of P, Q, and R\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards by suit and rank as given in the problem statement\n    spades = ['A', 'J', 'K']\n    hearts = ['3', '5', 'K']\n    diamonds = ['2', '7', 'J']\n    clubs = ['A', '7']\n    \n    # Possible cards based on James' clues\n    possible_cards = {\n        'Spades': spades,\n        'Hearts': hearts,\n        'Diamonds': diamonds,\n        'Clubs': clubs\n    }\n    \n    # Step 1: Eddie and Avril both do not know the card after knowing the suit and rank respectively.\n    # Therefore, the card cannot be the Ace of Spades or Ace of Clubs as that would give Eddie the answer immediately.\n    # It also cannot be a King because there are two possible Kings, and that would prevent Eddie from knowing.\n    possible_cards['Spades'] = [card for card in possible_cards['Spades'] if card not in ['A', 'K']]\n    possible_cards['Hearts'] = [card for card in possible_cards['Hearts'] if card != 'K']\n    possible_cards['Diamonds'] = [card for card in possible_cards['Diamonds'] if card not in ['K']]\n    possible_cards['Clubs'] = [card for card in possible_cards['Clubs'] if card != 'A']\n    \n    # Step 2: Avril now knows for sure what the card is, so the rank must be unique among the remaining possibilities.\n    # We look for a rank that only exists once across all suits.\n    remaining_cards = [rank for suits in possible_cards.values() for rank in suits]\n    unique_rank = [rank for rank in remaining_cards if remaining_cards.count(rank) == 1]\n\n    # There should be only one unique rank based on the given information, and that should be the card's rank.\n    card_rank = unique_rank[0]\n\n    # Step 3: Now Eddie also knows the card, which means the suit must correspond to the unique rank identified.\n    for suit, ranks in possible_cards.items():\n        if card_rank in ranks:\n            card_suit = suit\n            break\n\n    # Convert the suit to the corresponding symbol represent in the question\n    suit_symbols = {'Spades': 'S', 'Hearts': 'H', 'Diamonds': 'D', 'Clubs': 'C'}\n    card_suit_symbol = suit_symbols[card_suit]\n\n    # The answer is in the format 'Suit Rank', e.g., 'Spades A' or 'Hearts K'\n    ans = f'{card_suit_symbol} {card_rank}'\n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800  # total length of the road in meters\n    num_trees = 21  # total number of trees to be planted\n\n    # Since trees are at both ends, we consider the number of intervals to be (num_trees - 1)\n    intervals = num_trees - 1\n\n    # The distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_has_initially = 149\n    andy_gives_to_sister = 38\n    sister_has_initially = (andy_has_initially - andy_gives_to_sister) // 2\n\n    is_joey_correct = sister_has_initially == 130\n\n    ans = (is_joey_correct, sister_has_initially)\n    return ans\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_trees = 9\n    number_of_intervals = number_of_trees + 1\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    original_number = 200\n    original_digits = str(original_number)\n    \n    # Go through each digit place for the original number\n    for i in range(len(original_digits)):\n        for digit in '0123456789':\n            # Change one digit at a time\n            if original_digits[i] != digit:\n                new_number = int(original_digits[:i] + digit + original_digits[i + 1:])\n                \n                # Check if the new number is prime\n                if isprime(new_number):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let the smaller number be x\n    # Then the larger number is 2x\n    # Their sum is x + 2x = 72\n    # Solving for x gives us x = 72 / 3\n\n    smaller_number = 72 // 3\n    return smaller_number\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5\n    sum_of_known_numbers = 3 + 4 + 6 + 10\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1 # Including Danny\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma cuts a piece of wood into 4 sections, which means making 3 cuts.\n    # Time required for each cut is 12 minutes / 3 cuts.\n    time_per_cut = 12 / 3\n\n    # To cut the wood 5 times, she needs to make 5 cuts.\n    # Total time needed is time per cut * number of cuts.\n    total_time = time_per_cut * 5\n\n    return int(total_time)\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')  # d represents the deadline in days\n    total_pages = symbols('total_pages')  # total_pages represents the number of pages in the book\n\n    # If Vanessa reads 30 pages a day, she will finish reading 2 days later than the given deadline\n    eq1 = Eq(30 * (d + 2), total_pages)\n\n    # If she reads 39 pages a day, she will finish reading 4 days ahead of the deadline\n    eq2 = Eq(39 * (d - 4), total_pages)\n\n    # Solving the system of equations for d and total_pages\n    solutions = solve((eq1, eq2), (d, total_pages))\n\n    deadline_days = solutions[d]\n    book_pages = solutions[total_pages]\n\n    return deadline_days, book_pages\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages_with_5 = 30\n    count = 0\n    page = 0\n\n    while count < pages_with_5:\n        page += 1\n        if '5' in str(page):\n            count += str(page).count('5')\n    \n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    \n    cost_per_cup = total_cost / number_of_cups\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol x which represents Ms Tan's age\n    x = symbols('x')\n\n    # Write down the given equation and solve it\n    equation = Eq(13 - 2*(2*x - 3), 5 - (x - 2))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the correct answer\n    return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum1 = sum(range(6, 11))  # Sum of 10, 9, 8, 7, 6\n    sum2 = sum(range(1, 6))   # Sum of 5, 4, 3, 2, 1\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms_to_paint = 4\n    num_workers = 2\n\n    days = total_rooms_to_paint / (rooms_per_day_per_worker * num_workers)\n    \n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for prices of apple and orange\n    apple, orange = symbols('apple orange')\n\n    # Given two equations based on the problem's description\n    equation1 = Eq(1 * apple + 2 * orange, 48)\n    equation2 = Eq(1 * apple + 1 * orange, 31)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Get the price of one orange\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n\n    equation1 = Eq(4 * price_per_ball + 0.27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + 1.51, pocket_money)\n\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    seconds_per_page = seconds_per_hour / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    \n    remaining_badges = total_badges - given_badges\n    \n    return int(remaining_badges)\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        if digits.count(0) == 1 and digits[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of stickers Elias and Aileen originally had\n    elias, aileen = symbols('elias aileen')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(elias, 5 * aileen)  # Elias had 5 times as many stickers as Aileen\n    equation2 = Eq(elias - 88, aileen - 8)  # After Elias gave away 88 stickers and Aileen lost 8, they had the same number left\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n    \n    # Calculate the number of stickers each person had in the end\n    elias_stickers_end = solutions[elias] - 88\n    aileen_stickers_end = solutions[aileen] - 8\n    \n    # Return the result as a tuple (elias_stickers_end, aileen_stickers_end)\n    return (elias_stickers_end, aileen_stickers_end)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas_pieces = symbols('thomas_pieces')\n    gerald_pieces = symbols('gerald_pieces')\n\n    thomas_to_gerald_ratio = Eq(thomas_pieces, (5/3) * gerald_pieces)\n    total_pieces = Eq(thomas_pieces + gerald_pieces, 104)\n\n    pieces = solve((thomas_to_gerald_ratio, total_pieces), (thomas_pieces, gerald_pieces))\n\n    thomas = pieces[thomas_pieces]\n    gerald = pieces[gerald_pieces]\n\n    return thomas - gerald\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)\n    return sum(numbers)\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    ans = cookies_per_gram * 48\n    return int(ans)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Calculate the sum in base 10\n    base_10_sum = int('25', 8) + int('37', 8)\n    \n    # Convert the sum back to base 8\n    ans = oct(base_10_sum)[2:]\n    \n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    # Calculate the fraction of the amount\n    fraction = 8 / 11\n    amount = 1.54\n    result = fraction * amount\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    purchase_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the original number of rackets\n    # Initial cost price = purchase_price * x\n    # Total revenue when 8 rackets are left = selling_price * (x - remaining_rackets)\n    # The profit is the total revenue minus the initial cost price\n\n    # Based on the information given in the problem\n    # total revenue - initial cost price = profit\n    # selling_price * (x - remaining_rackets) - purchase_price * x = profit\n    # 175 * (x - 8) - 150 * x = 525\n    # 175x - 1400 - 150x = 525\n    # 25x = 525 + 1400\n    # 25x = 1925\n    # x = 1925 / 25\n    x = (profit + purchase_price * remaining_rackets) / (selling_price - purchase_price)\n    \n    return int(x)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_amount = symbols('initial_amount')\n    \n    # Create an equation based on the problem statement:\n    # Chloe's remaining amount: initial_amount - 20*x\n    # Gordon's remaining amount: initial_amount - 25*x\n    # where x is the number of days passed, which is the same for both\n    \n    # Set up the equations based on the difference in spending and remaining amounts\n    equation = Eq(157 + (20 * (82 - 157) / 5), initial_amount)\n    \n    # Solve for the initial_amount\n    solution = solve(equation, initial_amount)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b, and the number of girls be g.\n    # Let the number of adults be a, and the number of children be c.\n    \n    # According to the problem, we have the following equations:\n    # b = (2/7) * g  (1)\n    # a = (2/3) * c  (2)\n    # a = b + 1228   (3)\n\n    # Since children are the sum of boys and girls, we have:\n    # c = b + g  (4)\n\n    # Substitute (1) and (4) into (2):\n    # a = (2/3) * (b + g)\n    # Substitute b from (1) into this equation:\n    # a = (2/3) * ((2/7) * g + g)\n    # a = (2/3) * ((2/7 + 7/7) * g)\n    # a = (2/3) * ((9/7) * g)\n    # a = (6/7) * g  (5)\n\n    # Substitute (5) into (3) to express a in terms of b:\n    # (6/7) * g = b + 1228\n\n    # Now replace b in terms of g using equation (1):\n    # (6/7) * g = (2/7) * g + 1228\n    \n    # Simplify the equations to solve for g:\n    # 6g = 2g + 7 * 1228\n    # 4g = 7 * 1228\n    g = (7 * 1228) / 4\n\n    # Calculate b using equation (1) with the value of g found:\n    b = (2/7) * g\n\n    # Calculate a using equation (3) with the value of b found:\n    a = b + 1228\n\n    # The total number of people is the sum of adults, boys, and girls:\n    total_people = a + b + g\n\n    return int(total_people)\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4*(5 - x))\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    # Iterate through possible values for the first number, ensuring it's positive\n    for x1 in range(1, 14 - 1):\n        # Iterate through possible values for the second number, which should be greater than x1 and less than the remainder\n        for x2 in range(x1 + 1, 14 - x1):\n            x3 = 14 - (x1 + x2)\n            # Check if the third number x3 is greater than x2 to maintain unique values\n            if x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial_product = 1\n    for i in range(1, 11):\n        factorial_product *= i\n\n    count_zeros = 0\n    while factorial_product % 10 == 0:\n        factorial_product //= 10\n        count_zeros += 1\n\n    return count_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost = 15\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    income = remaining_melons * selling_price_per_melon\n    profit = income - cost\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Number of oranges and apples after removing leftovers\n    oranges = 150 - 17\n    apples = 100 - 5\n\n    # Find the greatest common divisor of oranges and apples\n    neighbors = gcd(oranges, apples)\n\n    return neighbors\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n    crosses = (line_length // cross_interval) + 1\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # The pattern \"red, red, green, yellow, yellow, green\" has 6 balloons\n    green_count_pattern = 2  # There are 2 green balloons in the pattern\n    \n    full_patterns = 75 // pattern_length  # The number of complete patterns\n    green_balloons = full_patterns * green_count_pattern\n    \n    remaining_balloons = 75 % pattern_length\n    if remaining_balloons >= 3:  # The third balloon in the pattern is green\n        green_balloons += 1\n    if remaining_balloons == 6:  # The sixth balloon in the pattern is green too\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of jewels in box P and y be the total value in box Q initially.\n    x, y = symbols('x y')\n\n    # Average value increase by £1000 when a £5000 jewel is transferred from P to Q.\n    # So, the new average value of jewels in P is (x - 5000)/2 + 1000,\n    # and the new average value of jewels in Q is (y + 5000)/3 + 1000.\n\n    # (x - 5000)/2 = (x/3) + 1000 (since average value in both boxes increases by £1000)\n    # (y + 5000)/3 = (y/3) + 1000\n\n    # We can set up the equations for the average values before and after the transfer.\n    equation1 = Eq((x - 5000)/2, (x/3) + 1000)\n    equation2 = Eq((y + 5000)/3, (y/3) + 1000)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is x + y.\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    # Let's denote the original number of Sandra's and Jessica's marbles as S and J respectively.\n    # According to the question, after Sandra gives Jessica 13 marbles, we have:\n    # Sandra's marbles: S - 13\n    # Jessica's marbles: J + 13\n    # And Sandra has 6 fewer marbles than Jessica now, so we get the equation:\n    # S - 13 = J + 13 - 6\n    # Simplifying, we get:\n    # S - J = 2 * 13 + 6\n    # Now we calculate the difference:\n    marble_difference = 2 * 13 + 6\n    return marble_difference\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60\n    number_of_intervals_1_to_6 = 6 - 1\n    distance_of_one_interval = distance_between_1_and_6 / number_of_intervals_1_to_6\n    \n    number_of_intervals_1_to_9 = 9 - 1\n    distance_between_1_and_9 = distance_of_one_interval * number_of_intervals_1_to_9\n    \n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19  # Sum of strawberries in all bags\n    strawberries_left = total_strawberries % 8  # Remainder after distributing in boxes of 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize count of 1's and 2's\n    count_1, count_2 = 0, 0\n    N = 0  # Initialize N at 0, the starting number\n\n    # Define helper function for digit count in a number\n    def count_digits(num, digit):\n        return str(num).count(str(digit))\n\n    # Increment N until the count of 1's is 15 and count of 2's is 14\n    while not (count_1 == 15 and count_2 == 14):\n        N += 1\n        # Count number of 1's and 2's in the current N and add to the total count\n        count_1 += count_digits(N, 1)\n        count_2 += count_digits(N, 2)\n        \n    # Return the value of N when the condition is met\n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Lets use the given information to create an equation\n    # If Kate left with 22 pieces which are 2/3 of the total (since she ate 1/3 at home)\n    # and each of her seven friends got 26 pieces, then we can write the following equation:\n    \n    # (Total pieces * 2/3) - (7 friends * 26 pieces each) = 22 pieces she left with\n    \n    # Lets find Total pieces from the equation:\n    # Total pieces = (22 + 7 * 26) * 3/2\n    \n    total_pieces = (22 + 7 * 26) * 3 // 2\n    \n    return total_pieces\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    total_floors = 25\n\n    andy_bob_ratio = andy_current_floor / bob_current_floor\n    bob_top_floor = total_floors / andy_bob_ratio\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of words\n    # Let w be the original speed (words per minute)\n    x, w = symbols('x w')\n    \n    # Original rate: x = 3 * w\n    # Increased rate with 30 more words per minute: x = (3 - 1) * (w + 30)\n    equation1 = Eq(x, 3 * w)\n    equation2 = Eq(x, 2 * (w + 30))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, w))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to be 'off'\n\n    # Ms. Lily presses every other light switch\n    for i in range(1, 11, 2):\n        lights[i-1] = 1  # Change light status from 'off' to 'on'\n\n    # Sam presses each even numbered light switch 7 times\n    for i in range(2, 11, 2):\n        # Pressing a switch an odd number of times changes its state\n        if lights[i-1] == 0 and 7 % 2 == 1:\n            lights[i-1] = 1\n        elif lights[i-1] == 1 and 7 % 2 == 1:\n            lights[i-1] = 0\n\n    # Count the number of lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Original amount of water in A is 2/3 of B\n    original_A = 2/3 * B\n    \n    # After pouring 4 L from B to A, A has 7/8 the amount of water as B\n    new_A = original_A + 4\n    new_B = B - 4\n    \n    # Equation representing the new ratio\n    equation = Eq(new_A, 7/8 * new_B)\n    \n    # Solve the equation\n    solutions = solve((equation,), (B,))\n    \n    # Calculate total amount of water in both pails initially\n    total_water = 2/3 * solutions[B] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    effective_climb = climb_distance - slip_distance\n    days = 0\n    current_height = 0\n\n    while current_height < total_distance:\n        days += 1\n        current_height += climb_distance\n        if current_height >= total_distance:\n            break\n        current_height -= slip_distance\n\n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n    \n    parts_per_hour = parts_made / hours_spent\n    total_hours_needed = (total_parts_needed - parts_made) / parts_per_hour\n    \n    return total_hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # A worst-case scenario would be pulling out all of one color first, then all of another color.\n    # Only after that are we guaranteed to get 3 different colors.\n    # Since there are 5 of each color, we could pull out 5 red and 5 white balls.\n    # The next ball we pull out must then be yellow, guaranteeing 3 different colors.\n    balls_needed = 5 + 5 + 1  # All 5 of one color, all 5 of another, and 1 to guarantee the third color\n    return balls_needed\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    # According to the pigeonhole principle,\n    # if each person can have a combination of two balls, and there are 5 different colors,\n    # there are C(5,2) combinations for any two balls since the balls are indistinguishable by shape, size and texture.\n    from math import comb\n    total_combinations = comb(5, 2)\n\n    # For at least two people to have the same kind of balls, one more person than the total combinations must participate.\n    num_people = total_combinations + 1\n    return num_people\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure two numbers with a product divisible by 4, we need to consider different cases.\n    # We need at least one even number (divisible by 2) and among the even numbers,\n    # we need at least one that is divisible by 4 to ensure the product is divisible by 4.\n    \n    # Numbers divisible by 4 from 10 to 41 are: 12, 16, ..., 40.\n    # They are (41//4 - 10//4) = 10 - 2 = 8 numbers.\n    divisible_by_4 = 41 // 4 - 10 // 4\n    \n    # Odd numbers from 10 to 41 are: 11, 13, ..., 41.\n    # They are (41+1)//2 - 10//2 = 21 - 5 = 16 numbers.\n    odd_numbers = (41 + 1) // 2 - 10 // 2\n    \n    # Even but not divisible by 4 are the remaining numbers: 10, 14, 18, ..., 38, 42 minus the divisible by 4.\n    even_not_div_by_4 = ((41+1) - 10) // 2 - divisible_by_4\n    \n    # We can draw all odd numbers plus one even but not divisible by 4 to still not have a product divisible by 4.\n    # So we need one more draw to ensure that we have a pair of numbers with a product divisible by 4,\n    # which could either be an odd and a number divisible by 4, or two evens (one of which is divisible by 4).\n    return odd_numbers + even_not_div_by_4 + 1\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    # Total number of cards\n    total_cards = 876\n    # Melissa's cards are twice Hisham's cards\n    # Let Hisham's number of cards be x, so Melissa's number of cards will be 2x\n    # Therefore, their total is x + 2x = 3x\n    # We can find x by dividing the total number of cards by 3\n    hisham_cards = total_cards // 3\n    melissa_cards = total_cards - hisham_cards\n    \n    # To have the same number of cards, we need to find the difference\n    # between their current number of cards and divide it by 2\n    cards_to_give_to_hisham = (melissa_cards - hisham_cards) // 2\n    \n    return cards_to_give_to_hisham\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    term_position_difference = 3 - 1\n\n    common_difference = (third_term - first_term) / term_position_difference\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Convert 2 m 20 cm to cm\n    piece_length_cm = total_length_cm / 2\n    return piece_length_cm\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50-i)*(50+i) for i in range(0, 5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    primes = list(primerange(10, 100))\n    smallest_two_digit_prime = primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(10, 100):\n        if i**2 < 100:\n            largest_two_digit_square = i**2\n        else:\n            break\n\n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknown variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(40 / (x + 5), 5)\n\n    # Solve the equation\n    solved_x = solve(equation, x)\n\n    # Return the solution\n    return solved_x[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    for brian_age in range(15, 100):\n        father_age = 41 + (brian_age - 14)\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_dollars = cost_in_euros * euro_to_dollar\n    return cost_in_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = float('-inf')\n\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b / c + (d / e) * f - (g + h / j)\n        if N.is_integer():\n            max_N = max(max_N, N)\n\n    return max_N\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 0.06\n    final_sugar_percentage = 0.10\n\n    # Amount of sugar initially in the bottle\n    initial_sugar = initial_volume * initial_sugar_percentage\n\n    # Let x be the amount of sugar to be added\n    x = symbols('x')\n\n    # Equation for the final sugar percentage after adding x grams of sugar\n    equation = Eq((initial_sugar + x) / (initial_volume + x), final_sugar_percentage)\n\n    # Solve for x\n    added_sugar = solve(equation,x)\n\n    return added_sugar[0]\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Given total initial books and new books\n    initial_total_books = 3900\n    new_books = 510\n    \n    # Given ratio of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Initial number of books in each category\n    initial_chinese_books = (ratio_chinese / total_ratio) * initial_total_books\n    initial_malay_books = (ratio_malay / total_ratio) * initial_total_books\n    initial_english_books = (ratio_english / total_ratio) * initial_total_books\n    \n    # Percentage increase for Chinese and Malay books\n    percent_increase_chinese = 20 / 100\n    percent_increase_malay = 10 / 100\n    \n    # Increased number of Chinese and Malay books\n    increased_chinese_books = initial_chinese_books * (1 + percent_increase_chinese)\n    increased_malay_books = initial_malay_books * (1 + percent_increase_malay)\n    \n    # Remaining books for English after adding to Chinese and Malay\n    remaining_new_books = new_books - ((increased_chinese_books - initial_chinese_books) +\n                                       (increased_malay_books - initial_malay_books))\n                                       \n    # Increased number of English books\n    increased_english_books = initial_english_books + remaining_new_books\n    \n    # Calculate the percentage increase in the number of English books\n    percent_increase_english = ((increased_english_books - initial_english_books) / \n                                initial_english_books) * 100\n    \n    return percent_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_students = 20\n    avg_score_all = 14\n    juniors = 12\n    avg_juniors = 10\n\n    total_score_all = total_students * avg_score_all\n    total_score_juniors = juniors * avg_juniors\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    seniors = total_students - juniors\n    avg_seniors = total_score_seniors / seniors\n\n    return avg_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_value = rounded_number - 50\n    return smallest_possible_value\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Let's assume current combined age of the dogs is x\n    # Four years ago, the combined age would be x - 2*4 = x - 8\n    # According to the problem, this is equal to 10\n    combined_age_4_years_ago = 10\n    combined_age_now = combined_age_4_years_ago + 8\n    \n    # Now add 2 years to find out the combined age in two years\n    combined_age_in_2_years = combined_age_now + 2*2\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    no_attempt = 0\n    questions_attempted = total_questions - 1\n    target_score = 66\n    for correct_answers in range(questions_attempted + 1):\n        incorrect_answers = questions_attempted - correct_answers\n        score = correct_answers * points_correct + incorrect_answers * points_incorrect\n        if score == target_score:\n            return correct_answers\n    return None  # In case no solution is found, which should not happen.\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the pigeonhole principle, if n objects (apples in this case) are distributed\n    # among m containers (or pigeonholes), and if n > m, then at least one container will hold\n    # more than one object. In this case, we want the minimum number of apples such that at least\n    # one container has 2 apples.\n\n    containers = 10\n\n    # One apple per container gives us 10 apples across 10 containers. However, with 1 apple in each\n    # container, no container has at least 2 apples. Therefore, we need at least 1 additional apple to\n    # ensure that one container has 2 apples.\n\n    min_apples = containers + 1  # One additional apple to satisfy the condition\n\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram_of_butter = 160 / 50\n    grams_needed_for_300_cookies = 300 / cookies_per_gram_of_butter\n    return grams_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n    equation1 = Eq(dedra, 4 * timm)\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    digit_count = 0\n    number = 1\n\n    while digit_count < 1000:\n        digit_count += len(str(number))\n        if digit_count >= 1000:\n            break\n        number += 1\n\n    unit_digit_str = str(number)[-(digit_count - 1000 + 1)]\n    ans = int(unit_digit_str)\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # inverse addition (add 2 to both sides)\n    rhs = 19 + 2\n    # inverse multiplication (divide both sides by 3)\n    box_value = rhs / 3\n    return box_value\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    percent_answered = 60\n    correct_marks = 5\n    wrong_deduct = 2\n    unanswered_award = 1\n    total_score = 264\n\n    answered_questions = (total_questions * percent_answered) // 100\n    unanswered_questions = total_questions - answered_questions\n    unanswered_score = unanswered_award * unanswered_questions\n    \n    # Let x be the number of correct answers\n    # total_score = (correct_marks * x) - (wrong_deduct * (answered_questions - x)) + unanswered_score\n    # 264 = (5x) - 2(answered_questions - x) + unanswered_award * unanswered_questions\n    # 264 = 5x - 2(answered_questions - x) + unanswered_score\n    # Solve the equation for x:\n    \n    # Simplify equation\n    # 264 = 5x - 2 * answered_questions + 2x + unanswered_score\n    # 264 = 7x - 2 * answered_questions + unanswered_score\n    # (264 + 2 * answered_questions - unanswered_score) = 7x\n    # x = (264 + 2 * answered_questions - unanswered_score) / 7\n    \n    correct_answers = (total_score + 2 * answered_questions - unanswered_score) // 7\n    \n    return correct_answers\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the inclusion-exclusion principle\n    only_A = A - AC - AE + ACE\n    only_C = C - AC - CE + ACE\n    only_E = E - AE - CE + ACE\n\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n\n    # Total is sum of fruit with only one vitamin type,\n    # with two vitamin types, and with all three vitamin types\n    total = only_A + only_C + only_E + only_AC + only_AE + only_CE + ACE\n\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    return louis_position\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    ans = permutations(18, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = 4\n    jason_age = symbols('jason_age')\n    bruce_age = jason_age\n    willie_age = jason_age\n    total_age = 19\n    \n    equation = Eq(jack_age + jason_age + bruce_age + willie_age, total_age)\n    solutions = solve(equation, jason_age)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    for friends in range(1, 100):\n        if 5 * friends + 3 == 6 * (friends - 1) + 1:\n            erasers = 5 * friends + 3\n            return erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jake, john = symbols('jake john')\n\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    return solutions[john] + 14\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n\n    # Using the formula for compound interest to find the present value\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    youngest = symbols('youngest')\n    ages = [youngest + 15 * i for i in range(9)]\n    oldest = ages[-1]\n\n    equation = Eq(oldest, 6 * youngest)\n    solutions = solve(equation, youngest)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Initial expression components\n    numbers = [15, 5, 5, 15, -6, 7]\n    operators = ['+', '*', '+', '-', '+']\n\n    # Given insertion of two pairs of brackets, there are only few possible positions\n    # We iterate over all possibilities and evaluate the expression\n    # We also use eval function carefully since inputs are controlled and known\n    min_result = float('inf')\n\n    for i in range(5):\n        for j in range(i + 2, 6):  # Bracket pair cannot be adjacent\n            for m in range(i + 1, j):  # Second bracket starts inside the first one\n                for n in range(m + 2, 7):\n                    # Construct the string\n                    expression = ''\n                    for k in range(6):\n                        # Add operator\n                        if k > 0:\n                            expression += operators[k - 1]\n                        # Add brackets\n                        if k == i:\n                            expression += '('\n                        if k == m:\n                            expression += '('\n                        # Add number\n                        expression += str(numbers[k])\n                        # Close brackets\n                        if k == j:\n                            expression += ')'\n                        if k == n:\n                            expression += ')'\n                    # Evaluate the expression\n                    result = eval(expression)\n                    # Update minimum result\n                    if result < min_result:\n                        min_result = result\n\n    return min_result\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    summation = sum(((i ** 2 + (i + 1) ** 2) / (i * (i + 1))) for i in range(1, 2008))\n    return round(summation)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        original_number = str(i)\n        new_number = original_number[-1] + original_number[1:-1] + original_number[0]\n        if int(new_number) - int(original_number) == 5877:\n            return int(original_number)\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has\n    # Cayden has 5 more sweets than Jiaxiang, so Cayden has x + 5 sweets\n    \n    # After Cayden gives Jiaxiang 10 sweets, Cayden will have (x + 5) - 10 sweets\n    # Jiaxiang will have x + 10 sweets\n    \n    # The difference in number of sweets they have now is abs((x + 10) - ((x + 5) - 10))\n    # Simplifying this gives us abs(x + 10 - x - 5 + 10)\n    # Which is abs(15), since the x terms cancel out\n    \n    # The absolute value of 15 is still 15\n    # Therefore, the difference in number of sweets they will have now is 15\n    \n    return 15\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n    \n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 * 0.01) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # The average score of the other 5 pupils\n    avg_five_pupils = 72\n\n    # Total score of the other 5 pupils\n    total_score_five_pupils = avg_five_pupils * 5\n\n    # New class average with Mary's score included\n    new_class_avg = 75\n    total_students_with_mary = 6\n\n    # Total score of the class with Mary's score\n    total_class_score_with_mary = new_class_avg * total_students_with_mary\n\n    # Mary's score is the difference between the total class score with her and the total score of other 5 pupils\n    marys_score = total_class_score_with_mary - total_score_five_pupils\n\n    return marys_score\n\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    morning_cookies = 200 * (1/5)\n    remainder_cookies = 200 - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Initialize the greatest possible 3-digit odd number as a small odd number\n    greatest_num = 101\n    \n    # Iterate over possible 3-digit odd numbers divisible by 9 in reverse order\n    for num in range(999, 100, -1):\n        if num % 2 != 0: # Check if the number is odd\n            if num % 9 == 0: # Check if the number is divisible by 9\n                tens_digit = (num // 10) % 10 # Extract tens digit\n                if tens_digit % 4 == 0: # Check if tens digit is divisible by 4\n                    greatest_num = num\n                    break\n                    \n    return greatest_num\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    # Since each student must get at least one doughnut,\n    # we initially give 1 doughnut to each student,\n    # leaving us with 11 - 4 = 7 doughnuts to distribute.\n    \n    # We can now distribute the remaining 7 doughnuts\n    # among 4 students with unrestricted repetition.\n    # This is a problem of distributing n identical items\n    # into r distinct groups, which is given by the formula:\n    # (n + r - 1) choose (r - 1), also known as \"stars and bars\".\n    \n    # We want to calculate the number of ways to \n    # distribute 7 doughnuts among 4 students, which is equivalent to\n    # the number of ways to place 7 stars in 3 bars (or 7+3-1 choose 3-1)\n    \n    # We import the comb function for calculating combinations.\n    from math import comb\n\n    # Number of remaining doughnuts to distribute.\n    doughnuts_left = 7\n    \n    # Number of students.\n    students = 4\n    \n    # The number of ways we can distribute the remaining doughnuts\n    # is given by (doughnuts_left + students - 1) choose (students - 1).\n    ways = comb(doughnuts_left + students - 1, students - 1)\n    return ways\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    walking_speed = 8\n    minutes = distance // walking_speed\n\n    return minutes\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # To guarantee 4 different coloured marbles, Jane would have to draw\n    # all the marbles of one color + all marbles of another color +\n    # all marbles of the third color + 1 marble from the fourth color.\n    ans = (green + blue + orange) + 1  # red is the smallest group, so we take 1 from red\n\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the possible coins in pence (they are multiples of 5)\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Total amount Angela paid with in pence\n    total_paid = 500  # Five pound note represented in pence\n\n    # Initialize the amount spent to None\n    amount_spent = None\n\n    # Loop through all combinations of 5 different coins\n    for i in range(len(coins)):\n        for j in range(i+1, len(coins)):\n            for k in range(j+1, len(coins)):\n                for l in range(k+1, len(coins)):\n                    for m in range(l+1, len(coins)):\n                        # Calculate the total value of the selected coins\n                        change_total_value = coins[i] + coins[j] + coins[k] + coins[l] + coins[m]\n                        # Determine the amount spent by subtracting the change from total paid\n                        temp_amount_spent = total_paid - change_total_value\n                        # Check if the amount spent is more than 0 and less than total (valid scenario)\n                        if 0 < temp_amount_spent < total_paid:\n                            amount_spent = temp_amount_spent\n\n    # Convert the amount spent back to pounds\n    ans = amount_spent / 100  # Convert pence to pounds\n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    for ten_notes in range(38 + 1):\n        two_notes = 38 - ten_notes\n        \n        spent_tens = 0.8 * ten_notes\n        spent_twos = 0.75 * two_notes\n        \n        remaining_tens = ten_notes - spent_tens\n        remaining_twos = two_notes - spent_twos\n        \n        if remaining_tens == 3 * remaining_twos:\n            cost = spent_tens * 10 + spent_twos * 2\n            return cost\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    initial_hives = 5\n    initial_honey = 50\n    target_honey = 90\n\n    # Calculate honey per hive\n    honey_per_hive = initial_honey / initial_hives\n\n    # Calculate target hives needed\n    target_hives = target_honey / honey_per_hive\n\n    # Calculate additional hives needed\n    additional_hives = target_hives - initial_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the initial number of erasers Ali has and k be the initial number of erasers Kumar has\n    a, k = symbols('a k')\n\n    # Initially, the ratio of Ali's erasers to Kumar's is 7:5\n    initial_ratio = Eq(a / k, 7 / 5)\n\n    # After Ali gives Kumar 10 erasers, the ratio becomes 1:5\n    new_ratio = Eq((a - 10) / (k + 10), 1 / 5)\n\n    # Solve the system of equations to find the initial number of erasers each had\n    solutions = solve((initial_ratio, new_ratio), (a, k))\n\n    # Calculate the total number of erasers they had initially\n    total_erasers = solutions[a] + solutions[k]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    student_number = 23\n\n    term_value = first_term + (student_number - 1) * difference\n\n    return term_value\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    \n    # Tina's east-west movement is 15 km east then 9 km west, for a net of 6 km east\n    east_west_distance = 15 - 9\n\n    # Tina's north-south movement is 3 km north then 5 km north, for a net of 8 km north\n    north_south_distance = 3 + 5\n\n    # The shortest distance is the hypotenuse of the right-angled triangle formed\n    shortest_distance = sqrt(east_west_distance ** 2 + north_south_distance ** 2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, p = symbols('b p')\n\n    equation1 = Eq(b + 3*p, 84)\n    equation2 = Eq(b + p, 48)\n\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert everything to minutes\n    activity_duration = 45\n    break_duration = 20\n    activities_count = 0\n\n    while total_minutes >= activity_duration:\n        total_minutes -= activity_duration\n        activities_count += 1\n        if total_minutes >= break_duration:\n            total_minutes -= break_duration\n\n    return activities_count\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's define the weights of Adam, Ben, and Carl as a, b, and c respectively.\n    \n    # From the question, we have the following equations:\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 92\n    \n    # Summing all three equations gives us\n    # 2(Adam + Ben + Carl) = 102 + 97 + 92\n    total_sum = 102 + 97 + 92\n    \n    # Simplify to get the sum of Adam, Ben, and Carl\n    total_weight = total_sum // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "def solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    for i in range(len(cards)):\n        if cards[i] in ['5', '8']:  # The first digit must be '5' or '8' to be >5000\n            for j in range(len(cards)):\n                if j != i:\n                    for k in range(len(cards)):\n                        if k != i and k != j:\n                            for l in range(len(cards)):\n                                if l != i and l != j and l != k:\n                                    number = int(cards[i] + cards[j] + cards[k] + cards[l])\n                                    if number > 5000:\n                                        count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_B = symbols('days_B')\n    days_A = days_B - 5\n\n    equation = Eq(1/days_A, 2/days_B)\n    days_B_solve = solve(equation, days_B)\n\n    return days_B_solve[0]\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # Apply divisibility rule for 11: subtract the sum of the digits at \n    # odd places from the sum of the digits at even places. The result\n    # must be 0 or divisible by 11 for the original number to be divisible by 11.\n    odd_sum = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 != 0)\n    even_sum = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 == 0)\n    remainder = abs(even_sum - odd_sum)\n    \n    # Check if the result of the calculation is divisible by 11\n    is_divisible = (remainder == 0 or remainder % 11 == 0)\n    correct_remainder = 0 if is_divisible else remainder % 11\n\n    # George's answer is only correct if the remainder when dividing by 11 is indeed 1\n    george_correct = correct_remainder == 1\n    \n    return george_correct, correct_remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 25 / 100\n    tulip_bulbs = total_bulbs / 5\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # final length in meters (converted from cm to m)\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Define a dictionary to memoize the number of ways to climb to each step\n    ways_to_step = {0: 1}  # Base case: There's 1 way to climb 0 steps (standing still)\n\n    # Define a recursive function to find the number of ways to climb to a specific step\n    def count_ways(step):\n        if step in ways_to_step:\n            return ways_to_step[step]\n        # The number of ways to get to the current step is the sum of ways to get to\n        # the step that is 1 step behind and 4 steps behind\n        ways = count_ways(step - 1) + count_ways(step - 4)\n        ways_to_step[step] = ways\n        return ways\n\n    # Start the recursion from the 9th step\n    ans = count_ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n    quotient = dividend // divisor\n\n    return quotient\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    total_planes = planes_per_minute * 36\n    return int(total_planes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    \n    # At first stop, two-fifths get off\n    passengers_get_off_first = (2 / 5) * initial_passengers\n    passengers_after_first_stop = initial_passengers - passengers_get_off_first + 7\n\n    # At the next stop, a quarter of the remaining passengers get off\n    passengers_get_off_second = (1 / 4) * passengers_after_first_stop\n    passengers_after_second_stop = passengers_after_first_stop - passengers_get_off_second + 13\n\n    return int(passengers_after_second_stop)\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimate = 35\n    error_margin = 5\n\n    # The least amount would be when the estimate is the upper bound\n    least_amount = estimate - error_margin\n\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x be the number of years after which their ages sum up to 40.\n    # Current sum of their ages is 22.\n    # In x years, Geoff's age will be Geoff's current age + x.\n    # Similarly, his sister's age will be his sister's current age + x.\n    # Their ages sum up to 40 in x years. Which gives us the equation:\n    # (Geoff's current age + x) + (His sister's current age + x) = 40.\n    \n    # Since the current sum of their ages is 22, we substitute into the above equation:\n    # (22 + 2x) = 40\n    # Solving for x:\n    x = (40 - 22) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            for x3 in range(98, 103):\n                if x1 + x2 + x3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nancy_per_day = 1 / 6\n    tim_per_day = symbols('tim_per_day')\n    combined_per_day = 1 / 4\n\n    equation = Eq(nancy_per_day + tim_per_day, combined_per_day)\n\n    tim_per_day_solution = solve(equation, (tim_per_day))\n\n    return 1 / tim_per_day_solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n                return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    number_of_people = 1 + 3  # Ewan and his 3 sisters\n\n    biscuits_each = total_biscuits // number_of_people\n\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return result\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Each packet's weight in grams\n    weight_P = 300\n    weight_Q = 400\n    weight_R = 500\n\n    # Given ratio of P, Q, and R packets\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    \n    # Given total mass in kg, converted to grams\n    total_mass = 172 * 1000\n\n    # Finding the weight of one 'set' of packets (7P + 3Q + 2R)\n    weight_per_set = (ratio_P * weight_P) + (ratio_Q * weight_Q) + (ratio_R * weight_R)\n\n    # Finding number of sets used to make the total mass\n    sets = total_mass / weight_per_set\n\n    # Finding the total number of packets\n    total_packets = (ratio_P + ratio_Q + ratio_R) * sets\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    total = mean * (len(numbers) + 1)  # total sum of numbers including 'a'\n    sum_of_numbers = sum(numbers)  # sum of given numbers\n    a = total - sum_of_numbers  # find 'a' by subtracting sum_of_numbers from total\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    # Convert the times to seconds for easier calculation\n    light1_interval = 1 * 60  # 1 minute\n    light2_interval = 1.5 * 60  # 1.5 minutes\n    simultaneous_interval = 9 * 60  # 9 minutes\n    minimum_interval = 30  # 30 seconds\n\n    # Find the least common multiple of the first two lights\n    lcm_first_two = lcm(light1_interval, light2_interval)\n\n    # We start checking from the minimum_interval (30s) and increase by it \n    # until we find a number that is a multiple of lcm_first_two and \n    # divides the simultaneous_interval\n    for interval in range(minimum_interval, simultaneous_interval + 1, minimum_interval):\n        if simultaneous_interval % interval == 0 and lcm(lcm_first_two, interval) == simultaneous_interval:\n            return interval\n\n    return None  # In case there is no such interval which should not happen\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters\n    pink_ribbon_cm = 2.5 * 100  # Convert from metres to centimetres\n    blue_ribbon_cm = 220        # Already in centimetres\n    orange_ribbon_cm = 30.5     # Already in centimetres\n\n    # Find the longest ribbon\n    longest_ribbon_cm = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon_cm == pink_ribbon_cm:\n        return 'pink'\n    elif longest_ribbon_cm == blue_ribbon_cm:\n        return 'blue'\n    else:\n        return 'orange' \n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparation_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between = 5\n\n    rabbit_position_from_left = elephant_position_from_left - toys_between - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_red_car_capacity = 3 * 10\n    total_blue_car_capacity = 12 * 15\n    total_green_car_capacity = 15 * 20\n    total_cars = 3 + 12 + 15\n    total_capacity = total_red_car_capacity + total_blue_car_capacity + total_green_car_capacity\n    average_capacity = total_capacity / total_cars\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given values\n    rachel_speed = 84 # in km/h\n    eleanor_time_to_city_g = 4 # in hours\n    rachel_time_after_eleanor = 1.5 # in hours\n    distance_rachel_away_from_f = 39 # in km\n    \n    # Rachel's distance covered during the time after Eleanor reached City G\n    distance_covered_by_rachel = rachel_speed * rachel_time_after_eleanor\n    \n    # Total distance from F to where Rachel is 39 km away from\n    total_distance_to_rachel = distance_covered_by_rachel + distance_rachel_away_from_f\n    \n    # Since Eleanor takes 4 hours to reach City G, and Rachel meets her 1.5 hours before,\n    # Eleanor has already been driving for 2.5 hours when they meet. Therefore, we scale her distance.\n    eleanor_distance_when_meet_rachel = total_distance_to_rachel * (eleanor_time_to_city_g - rachel_time_after_eleanor) / eleanor_time_to_city_g\n    \n    # Total distance between the two cities is Eleanor's distance when she meets Rachel plus the remaining distance Rachel covered.\n    total_distance_between_cities = eleanor_distance_when_meet_rachel + total_distance_to_rachel\n    \n    return total_distance_between_cities\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    sum = 0\n    for i in range(1, 4):\n        sum += int(str(4) * i)\n    return sum\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Define the sum of cubes formula for natural numbers\n    def sum_of_cubes(n):\n        return (n * (n + 1) // 2) ** 2\n\n    # Calculate the total number of terms\n    term = 0.5\n    total_terms = 0\n    while term <= 10:\n        total_terms += 1\n        term += 0.5\n\n    # Apply the formula to the number of terms and adjust for the step of 0.5\n    ans = sum_of_cubes(total_terms) * (0.5 ** 3)\n\n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    cad_to_usd = 1 / 1.25\n    book_cost_cad = 64\n    \n    book_cost_usd = book_cost_cad * cad_to_usd\n    \n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    front = 8\n    back = 10\n    total_shelves = front + back - 1\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Assume the lowest score is x\n    # Because there are 5 students, the sum of their scores should be 5 * 90\n    total_score = 5 * 90\n    \n    # As everyone scores a different whole number, the possible lowest scores are:\n    # x, x+1, x+2, x+3, x+4\n    # The sum therefore is x + (x+1) + (x+2) + (x+3) + (x+4)\n    # Can be simplified to: 5x + 1 + 2 + 3 + 4 = 5x + 10\n    \n    # To find the maximum possible value for x (the lowest score)\n    # The sum 5x + 10 should be equal to or less than total_score (5 * 90)\n    x = (total_score - 10) // 5\n    \n    # Now we must ensure each score is a whole number and distinct\n    # If x is the maximum lowest score, we can check from this value downwards\n    while True:\n        if len(set(range(x, x+5))) == 5 and sum(range(x, x+5)) == total_score:\n            return x\n        x -= 1\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    A, B, C = symbols('A B C')\n\n    # Create the equations based on the problem statement\n    # Rope A is 3 times as long as Rope B\n    equation1 = Eq(A, 3 * B)\n    \n    # Rope C is 56 cm longer than Rope B\n    equation2 = Eq(C, B + 56)\n    \n    # Rope A is 1 m (which is 100 cm) + 30 cm longer than Rope C\n    equation3 = Eq(A, C + 100 + 30)\n\n    # Solve for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # The total length of the three ropes is A + B + C\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    ans = (2 * largest_number) - (3 * smallest_number)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from math import comb\n    # Total ways to choose 3 letters out of 5\n    total_ways = comb(5, 3)\n    \n    # Ways to choose the remaining letter from C, D, E after choosing A and B\n    ways_with_A_and_B = comb(3, 1)\n    \n    # Probability that both A and B will be in the string\n    probability = ways_with_A_and_B / total_ways\n    \n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n    \n    student_males = (student_male_percentage / 100) * male_members\n    student_females = (student_female_percentage / 100) * female_members\n    \n    total_students = student_males + student_females\n    total_members = male_members + female_members\n    \n    student_percentage = (total_students / total_members) * 100\n    \n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    juice_in_first = 200 * 0.35\n    juice_in_second = 300 * 0.50\n    total_juice = juice_in_first + juice_in_second\n    concentration = (total_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    \n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have 37 - x apples and John will have 15 + x apples\n    # We need to find x such that 37 - x = 4 + (15 + x)\n    # Simplifying the equation: 37 - x = 4 + 15 + x -> 37 - 4 - 15 = 2x -> 18 = 2x -> x = 9\n    \n    x = (amy_initial - john_initial - 4) // 2\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let x be the original number of papers she plans to mark per hour\n    # Let total be the total number of papers\n    # She worked for 1 hour, so there are 4 hours left in her original plan\n    # According to the first condition, (x + 6) papers per hour are needed for the remaining 4 hours\n    # According to the second condition, (x + 10) papers per hour will finish the job in 3 hours\n    # Equations based on the conditions:\n    # total = x * 1 + (x + 6) * 4 (first condition)\n    # total = x * 1 + (x + 10) * 3 (second condition)\n    # Solve for x and total:\n    # x * 1 + (x + 6) * 4 = x * 1 + (x + 10) * 3\n    # Simplify and solve the equation for x:\n    x = symbols('x')\n    equation = Eq(x + (x + 6) * 4, x + (x + 10) * 3)\n    x_value = solve(equation, x)[0]\n    # Calculate total using the first condition (substitute x value):\n    total = x_value + (x_value + 6) * 4\n    \n    return total\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = (last_term - first_term) // difference + 1\n\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    chicken_more_than_vegetable = Fraction(chicken_pies - vegetable_pies, chicken_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    vegetable_less_than_fruit = Fraction(fruit_pies - vegetable_pies, fruit_pies)\n\n    return chicken_more_than_vegetable, vegetable_less_than_fruit\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    \n    # Pack the markers into bags of 5\n    bags_of_markers = markers_left // 5\n    \n    return bags_of_markers\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    # 4 jugs and 5 cups cost £85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    # 2 jugs and 2 cups cost £40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' should be in the range 1 to 9 (inclusive) because 'ab' is a two-digit number\n        for b in range(10):  # 'b' should be in the range 0 to 9 (inclusive)\n            ab = a * 10 + b  # Calculating the two-digit number 'ab'\n            ba = b * 10 + a  # Calculating the two-digit number 'ba'\n            if 8 * ab == 3 * ba:  # Checking the condition given in the problem\n                return ab  # Returning the value of 'ab' when condition is satisfied\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    total_sum = sum(sum_of_digits(page) for page in range(1, 208))\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_made = 3/4\n\n    total_designs = made_designs / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):   # iterate over all three-digit numbers\n        if sum(map(int, str(i))) == 7:  # calculate the digit sum and check if it is 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    caps, wristbands, money_spent, money_remaining, total_money, cap_price, wristband_price = symbols('caps wristbands money_spent money_remaining total_money cap_price wristband_price')\n\n    # Initial equations based on the problem statement\n    equation1 = Eq(money_spent, total_money * 2/5)    # Caleb spent 2/5 of his money\n    equation2 = Eq(money_remaining, total_money - money_spent)     # Remaining money after first spending\n    equation3 = Eq(cap_price, wristband_price * 3)    # Each cap costs 3 times each wristband\n    equation4 = Eq(money_spent, 4 * cap_price + 6 * wristband_price)    # The cost of 4 caps and 6 wristbands\n    equation5 = Eq(money_remaining * 1/3, caps * cap_price)    # Money spent on additional caps\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (caps, wristbands, money_spent, money_remaining, total_money, cap_price, wristband_price))\n\n    # Calculate the total number of caps bought (initial 4 + additional)\n    total_caps_bought = 4 + solutions[caps]\n\n    return int(total_caps_bought)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants\n    g = 9.81  # gravitational acceleration in m/s^2\n\n    # Symbols\n    v0 = symbols('v0')  # initial velocity\n    s = symbols('s')    # displacement\n    \n    # Equations based on kinematic equations\n    # v^2 = u^2 + 2as\n    # where v is final velocity, u is initial velocity (which is 0 m/s here), a is acceleration, and s is displacement\n    # Since we are interested in the final velocity when altitude is 2,000 m, displacement s would be -1000 m (as displacement is downwards)\n    equation = Eq(v0**2, 2 * g * -1000)\n\n    solution = solve(equation, v0)\n\n    # We only need the positive result, since velocity is scalar and cannot be negative\n    return max(solution)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 possible sets of 4 consecutive numbers\n    # We need to consider the worst case scenario where we pick the maximum number of cards\n    # without getting 4 consecutive ones. \n    # For each set of 4 consecutive numbers, we can pick 3 cards at most without completing the set.\n    # Since there are 13 sets, we can pick 3 * 13 = 39 cards without guaranteeing 4 consecutive numbers.\n    # The next card we pick must complete at least one set of 4 consecutive numbers.\n    return 39 + 1\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations([0, 2, 4, 5, 6, 8, 9]):\n        A, B, C, D, E, F, G, H, I, J = 3, perm[0], 1, perm[1], perm[2], perm[3], 7, perm[4], perm[5], perm[6]\n        num = f\"{A}{B}{C}{D}{E}{F}{G}{H}{I}{J}\"\n        divisible = True\n        for i in range(1, 11):\n            if int(num[:i]) % i != 0:\n                divisible = False\n                break\n        if divisible:\n            ans = {'B': B, 'D': D, 'E': E, 'F': F, 'H': H, 'I': I, 'J': J}\n            return ans\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_then = ashley_age_now - 3\n    brother_age_then = ashley_age_then - 2\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Total number of actual pages in the book\n    total_pages = 89\n    # The incorrect page numbers follow a pattern where every third page number is omitted.\n    # Therefore, for every three-page sequence, we only have two page numbers.\n    # To find the total number of skipped pages, we divide the total by 3.\n    skipped_pages = total_pages // 3\n    # The last printed page number will be the actual total number of pages\n    # plus the number of skipped pages.\n    incorrect_last_page_number = total_pages + skipped_pages\n    return incorrect_last_page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children = symbols('adults children')\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15\n    \n    # Using Inclusion-Exclusion Principle\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n    age_difference = tom_age_future - tom_age_now\n\n    grandma_age_now = grandma_age_future - age_difference\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then 2x is the number of students in class A\n    # c is the number of candies\n    x, c = symbols('x c')\n\n    # Equation for class A: 4 * 2x = c - 20\n    class_a_eq = Eq(4 * 2 * x, c - 20)\n\n    # Equation for class B: 6 * x = c + 16\n    class_b_eq = Eq(6 * x, c + 16)\n\n    # Solve the system of equations\n    solutions = solve((class_a_eq, class_b_eq), (x, c))\n\n    # Number of candies Miss Jenny has\n    return solutions[c]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    # Initialize the number of ways to 0\n    ways = 0\n    # Iterate through the possible number of ten-pence coins\n    for ten_pence in range(6): # Jeremy has 5 ten-pence coins, so it goes from 0 to 5\n        # Iterate through the possible number of twenty-pence coins\n        for twenty_pence in range(4): # Jeremy has 3 twenty-pence coins, so it goes from 0 to 3\n            # Calculate the remaining amount needed after using ten-pence and twenty-pence coins\n            remaining = 70 - (10*ten_pence + 20*twenty_pence)\n            # If the remaining amount is exactly fifty-pence and Jeremy has that coin, increase the ways count\n            if remaining == 50:\n                ways += 1\n            # If no money is left, it means he used just ten and twenty-pence coins\n            elif remaining == 0:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    return 4\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum number of balls Sheila can take out without getting 4 of the same colour:\n    # 3 blue, 3 orange, 2 yellow. Afterwards, she is forced to get 4 of the same colour.\n    max_without_4_same = (3 + 3 + 2)\n    \n    # The next ball she takes out must result in 4 balls of the same colour.\n    next_ball = 1\n    \n    # Calculate the number of balls Sheila must take out.\n    balls_to_take_out = max_without_4_same + next_ball\n    \n    return balls_to_take_out\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # Each duckling has 2 legs\n    goose_legs = 2 * 2  # Each baby goose has 2 legs\n    \n    lamb_legs = 36 - (duck_legs + goose_legs)  # Total legs minus duck and goose legs gives lamb legs\n    \n    number_of_lambs = lamb_legs // 4  # Each lamb has 4 legs\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    # There are 5 teams, and each team plays with each of the other teams exactly once.\n    # This is a classic handshake problem where we find the number of handshakes possible\n    # if each person in a group of n people shakes hands with every other person exactly once.\n    \n    # For 'n' teams, the number of matches is given by the formula: n * (n - 1) / 2\n    n = 5\n    num_matches = n * (n - 1) // 2\n\n    return num_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)  # three times as many boys as girls\n    equation2 = Eq(2 * boys + 4 * girls, 570)  # total sweets received\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_number = int(\"\".join(map(str, sorted(digits, reverse=True))))\n    min_number = int(\"\".join(map(str, sorted(digits))))\n    return max_number - min_number\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Calculate the number of fruit boxes in each of the top three layers\n    third_layer = 1**2  # Top layer (1 box on each side)\n    second_layer = 2**2  # Second layer (2 boxes on each side)\n    first_layer = 3**2  # Third layer (3 boxes on each side)\n\n    # Sum up the number of boxes in all three layers\n    total_boxes = third_layer + second_layer + first_layer\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change_from_5 = 5 - total_cost\n    return round(change_from_5, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n    \n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n    \n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    number = 1.2 + 1.23 + 1\n    ans = number * number - number * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 200):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    farmer_rate = symbols('farmer_rate')  # rate at which farmer works\n    son_rate = symbols('son_rate')        # rate at which son works\n    total_work = 24                       # total hours of work if farmer works alone\n\n    # Eq1: The total work done is the product of the farmer's rate and the total time required.\n    equation1 = Eq(farmer_rate, 1 / total_work)\n\n    # Eq2: If they work together for 16 hours, they complete the work (1 = full work done)\n    equation2 = Eq((farmer_rate + son_rate) * 16, 1)\n\n    # Eq3: The son works alone for 6 hours which is the same as the son's rate times 6 hours\n    equation3 = Eq(son_rate * (24 - 6), 1 - 16 / 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (farmer_rate, son_rate))\n\n    # Getting the son's rate and calculate the time taken by son to complete the work alone\n    son_time_alone = 1 / solutions[son_rate]\n\n    return son_time_alone\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles_in_january = smiles_per_day * days_in_january\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n    concentration = total_sugar / total_solution\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # initial drop height in meters\n    bounce_height = initial_height / 2  # height after first bounce\n    total_distance = initial_height + 2 * bounce_height  # down + up + down\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)  # Dorothy has 9 times as many stickers as Timmy minus 3\n    equation2 = Eq(dorothy, 96)             # Dorothy has 96 stickers\n    equation3 = Eq(kevin, timmy + 45)       # Kevin has 45 more stickers than Timmy\n    \n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_times = total_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(5)\n    permutations_with_Hugh_between = factorial(3) * factorial(2)  # Hugh fixed between Louise and Richard\n    # Subtract the unwanted permutations from the total number of permutations\n    ans = total_permutations - permutations_with_Hugh_between\n    return ans\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # They lost 10 matches, which is the remainder after wins and draws.\n    # This means total matches = wins + draws + losses\n    # Let the total number of matches be x.\n    # wins = 2/5 * total_matches, draws = 7/20 * total_matches\n    # Total points = 3 * wins + 1 * draws + 0 * losses\n    from sympy import symbols, Eq, solve\n\n    total_matches = symbols('total_matches')\n    \n    equation = Eq((2/5)*total_matches + (7/20)*total_matches + 10, total_matches)\n    \n    total_matches_solution = solve(equation, total_matches)[0]\n\n    wins = (2/5) * total_matches_solution\n    draws = (7/20) * total_matches_solution\n    # Losses are given as 10\n    \n    # Calculate total points\n    total_points = 3 * wins + 1 * draws + 0 * 10\n\n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's method is incorrect. We'll correct his method and find the right answer.\n\n    # Johnny has multiplied the quotient by the remainder, which is incorrect.\n    # Instead, he should multiply the quotient by the divisor and then add the remainder.\n\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct method to find the original number\n    original_number = (quotient * divisor) + remainder\n\n    return original_number\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum([(40 - 2*i) - (38 - 2*i) for i in range(20)])\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = 4 * 75 + 3 * 95  # Total cost in pence\n    change = 1000 - total_cost     # Change from a £10 note, converted to pence\n    return change / 100            # Convert change back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mean of the first 3 numbers as m1 and the mean of the last 5 numbers as m2.\n    m1, m2 = symbols('m1 m2')\n\n    # We know that the mean of all 8 numbers is 555:\n    equation_total = Eq((3 * m1 + 5 * m2) / 8, 555)\n\n    # We know that the mean of the first 3 numbers is 296 less than the mean of the last 5 numbers:\n    equation_difference = Eq(m2 - m1, 296)\n\n    # Solve the two equations for m1 and m2:\n    solutions = solve((equation_total, equation_difference), (m1, m2))\n\n    return solutions[m2]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    # she starts at 2 and ends at 100, crossing out each multiple of 2\n    start = 2\n    end = 100\n    step = 2\n    \n    # calculate the number of multiples of 2 from 2 to 100 (inclusive)\n    num_multiples = (end - start) // step + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # Number of people originally\n    people_original = 5\n    # Time taken by original people\n    days_original = 15\n    # Time to build the bridge with additional people\n    days_required = 5\n    \n    # Calculate work rate of original people (work/day)\n    work_rate_original = people_original / days_original\n    \n    # Calculate the total work units (same for any number of people since the bridge is the same)\n    total_work = work_rate_original * days_original\n    \n    # Calculate required work rate to finish the job in 5 days (work/day)\n    work_rate_required = total_work / days_required\n    \n    # Calculate the number of people required for the new work rate\n    people_required = work_rate_required\n    \n    # Calculate how many more people are needed in addition to the original\n    additional_people = people_required - people_original\n    \n    return additional_people\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    position_pip = 3\n    children_between = 5\n    \n    position_bud = position_pip + children_between + 1\n    position_bud_from_end = total_children - position_bud + 1\n    \n    return position_bud_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)  # Chai Seng has $48 more than Rasidah\n    equation2 = Eq(chai_seng * (6/7), rasidah * (3/5) / 2)  # Chai Seng's remaining money is half of Rasidah's remaining money\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current = 53\n    mother_current = 81\n    years_ago = 0\n    \n    while True:\n        isaac_then = isaac_current - years_ago\n        mother_then = mother_current - years_ago\n        if isaac_then == mother_then / 3:\n            return years_ago\n        years_ago += 1\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    lb_to_kg_conversion_factor = 2.2\n    kg = pounds / lb_to_kg_conversion_factor\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(x, y):\n        result = sum(range(x, y)) - y\n        return result\n    \n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3  # Cat's speed in m/s\n    distance_behind = 500  # distance Elena is behind her cat in meters\n\n    # The relative speed at which Elena is catching up to the cat\n    relative_speed = elena_speed - cat_speed\n\n    # Time taken for Elena to catch up to her cat in seconds\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    all_possible_numbers = list(permutations(digits, 3))\n    ans = len(all_possible_numbers)\n    return ans\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6):\n            count += 1\n        elif isprime(num) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    even_digits = [2, 4]\n    ways = 0\n    # Choose the last digit to be even to ensure the number is even\n    for last_digit in even_digits:\n        remaining_digits = 4\n        # Multiply the possibilities for each position, excluding the chosen even digit\n        ways += factorial(remaining_digits)\n    return ways\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):  # Tens digit has to be at least 1 because we want a 2-digit number\n        ones_digit = 15 - tens_digit\n        if ones_digit < 10:  # If ones digit is 10 or greater, it's not a valid 2-digit number\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    initial_total_weight = initial_mean * 8\n    new_mean = 52\n    new_total_weight = new_mean * 9\n\n    extra_apple_weight = new_total_weight - initial_total_weight\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    ans = 0\n    for i in range(1, 251):\n        if int(i**0.5) == i**0.5:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -4**2\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    numbers = [99, 98, 97, 96]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    \n    # Original time = pages / original speed\n    original_time = pages / 50\n    # New time = pages / new speed\n    new_time = pages / (50 + 20)\n    # Time difference equation\n    time_difference_eq = Eq(original_time - new_time, 2)\n\n    # Solve for the number of pages\n    pages_solution = solve(time_difference_eq, pages)\n    return pages_solution[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n\n    return average \n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    import datetime\n\n    year = 2013\n    while True:\n        year += 1\n        if datetime.date(year, 1, 28).weekday() == 0:  # 0 is Monday\n            break\n            \n    return year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6*apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Arbitrary search range to find the least divisor\n        dividend = divisor * 8 + 7  # Since the quotient is 8 with a remainder of 7\n        if str(dividend).endswith(\"7\") and str(divisor).endswith(\"7\"):\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # From 6:30am to 7:30am, Star jogs for 1 hour at 6 mph\n    jogging_distance = 6 * 1\n\n    # From 7:30am to 9:30am, Star walks for 2 hours at 5 mph\n    walking_distance = 5 * 2\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_saved = daily_savings * days_saved\n    remaining_amount = original_amount + amount_saved - lent_to_brother - spent_on_snacks\n\n    return remaining_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = total_meters / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    number_of_members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / number_of_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_charge = 0.80  # $0.80 charge for up to 15 minutes\n    total_charge = 1.40  # Total amount charged in dollars\n    additional_charge_per_minute = 0.05  # $0.05 charge for each additional minute\n\n    # Calculate the charge for additional minutes excluding the base charge\n    additional_minutes_charge = total_charge - base_charge\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_minutes_charge / additional_charge_per_minute\n\n    # Total minutes is the sum of the first 15 minutes and any additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)  # The number of minutes must be an integer as fractions of a minute are not charged\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Last digit of 2 raised to any power alternates in a cycle of 4, i.e., 2, 4, 8, 6\n    power_cycle_2 = [2, 4, 8, 6]\n    \n    # Last digit of 3 raised to any power alternates in a cycle of 4, i.e., 3, 9, 7, 1\n    power_cycle_3 = [3, 9, 7, 1]\n    \n    # Since the power 2017 is 1 more than a multiple of 4, we can find the last digit of each expression\n    last_digit_2 = power_cycle_2[(2017-1) % 4]\n    last_digit_3 = power_cycle_3[(2017-1) % 4]\n    \n    # Multiply the last digits and find the last digit of the result\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    ans = (55 + 13) // 4\n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Observing the patterns:\n    # ◈ seems to imply a certain operation between the two numbers.\n    # Let's find the pattern by evaluating the given examples:\n    # 4◈7=21    ->    4 * 7 - 7 = 21\n    # 6◈22=20   ->    6 * 22 - 22 = 20\n    # 8◈30=26   ->    8 * 30 - 30 = 26\n    # It looks like the pattern might be: a◈b = a * b - b\n    # Now let's apply this pattern to find 9◈20:\n\n    a = 9\n    b = 20\n    ans = a * b - b  # Apply the discovered operation\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    equation = Eq((original_number - 4) / 2 + 11, 37)\n\n    original_value = solve(equation, original_number)\n\n    return original_value[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    start = (56 // 5) + (1 if 56 % 5 != 0 else 0)\n    end = 120 // 5\n    return end - start + 1\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when James was 20 (in 1997)\n    gina_age_when_james_20 = 50 - (2005 - 1997)\n    \n    # James' age difference (James is younger than Gina)\n    age_difference = gina_age_when_james_20 - 20\n    \n    # James' age when Gina was 35\n    james_age_when_gina_35 = 35 - age_difference\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2.5 * 4  # There are 4 quarters in a whole\n    return int(total_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy is 5th from front, Eddie is 9th from back\n    # 2 people are between them. Therefore, Lucy's position\n    # from the back is Eddie's position - 3 (Eddie + 2 people in between + Lucy)\n    \n    # Now we determine how many people are in front of Lucy and behind Eddie\n    people_in_front_of_lucy = 5 - 1  # excluding Lucy\n    people_behind_eddie = 9 - 1  # excluding Eddie\n    \n    # The total number of people is the sum of people in front of Lucy,\n    # people between Lucy and Eddie (2), Lucy (1), Eddie (1), and people behind Eddie\n    total_people = people_in_front_of_lucy + 2 + 1 + 1 + people_behind_eddie\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import isprime\n\n    # Start checking from 2 since 2 is the smallest prime.\n    for num in range(2, 3 * 5 * 7 * 8):\n        remainders = [num % i for i in [3, 5, 7, 8]]\n        if len(set(remainders)) == 4 and all(isprime(rem) for rem in remainders):\n            return num\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    cut_length_cm = 5 * 100 + 8      # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    stripe_length_m = stripe_length_cm // 100     # Convert centimeters to meters (whole part)\n    stripe_length_extra_cm = stripe_length_cm % 100  # The remaining centimeters\n\n    return (stripe_length_m, stripe_length_extra_cm)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x * 7 + 4 - 21 - 35\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    equation2 = Eq(orchids, 3/5 * tulips)\n    equation3 = Eq(0.60 * orchids + 0.80 * tulips + 0.75 * roses, 2644)\n\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # Minimum number of right-handed girls can be deduced by subtracting the maximum number of left-handed girls from total girls.\n    max_left_handed_girls = total_pupils - right_handed\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    equation1 = Eq(12 * books + 9 * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    total_animals = 10\n    total_legs = 34\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    def last_digit_of_power(base, power):\n        base %= 10\n        if base in [0, 1, 5, 6]:\n            return base\n        elif base in [9, 4]:\n            return (base ** (power % 2)) % 10\n        else:\n            return (base ** (power % 4)) % 10\n\n    result = sum(last_digit_of_power(i, 2013) for i in range(1, 10))\n    return result % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case, Peter takes one of each color before getting a pair.\n    # One red, one blue, and one black = 3 socks.\n    # The next sock he picks MUST match one of these, giving him a pair.\n    # So he needs to pick 4 socks to ensure he has a pair of the same color.\n    return 4\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time format\n    time_format = \"%Y-%m-%d %H:%M\"\n\n    # Define the departure and arrival times\n    departure = datetime.strptime(\"2023-07-02 20:00\", time_format)\n    arrival = datetime.strptime(\"2023-07-03 01:00\", time_format)\n\n    # Calculate the time difference\n    time_difference = arrival - departure\n\n    # Adjust for the timezone difference between Japan and France\n    timezone_difference = timedelta(hours=7)\n    flight_duration = time_difference + timezone_difference\n\n    # Convert the time duration to hours\n    duration_in_hours = flight_duration.total_seconds() / 3600\n\n    return int(duration_in_hours)\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):  # Page number starts from 1 and goes up to 131\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n\n    # Assume all attempted answers are correct\n    # Max possible score if all attempted questions are correct\n    max_score = 4 * attempted\n\n    # The difference between the max score and the actual score\n    # is due to wrong answers (each wrong answer leads to a differential of 5 points: +4 for correct and -1 for wrong)\n    score_diff = max_score - score\n\n    # Calculate the number of wrong questions from the score difference\n    num_wrong = score_diff // 5\n\n    # Calculate the number of correct questions\n    num_correct = attempted - num_wrong\n\n    return num_correct\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene + sid - 71 - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y') # x is the bigger number, y is the smaller number\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For a 2-digit number, the first digit can be 1 or 2 (0 is not allowed for a 2-digit number)\n    first_digit_options = 2\n    # The second digit can be 0, 1, or 2\n    second_digit_options = 3\n    \n    # The total number of combinations is the product of the options for each digit\n    total_combinations = first_digit_options * second_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    for i in range(200):\n        if (i + (i + 2) + (i + 4) + (i + 6) + (i + 8)) == 200:\n            return i\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the amount of sugar solution transferred in grams\n    x = symbols('x')\n\n    # Initial amount of sugar in each container\n    sugar_A_initial = 50 * 0.1    # 10% of 50g\n    sugar_B_initial = 30 * 0.2    # 20% of 30g\n\n    # Amount of sugar after transfer\n    sugar_A_after = sugar_A_initial - 0.1 * x + 0.2 * x\n    sugar_B_after = sugar_B_initial + 0.1 * x - 0.2 * x\n\n    # Amount of water after transfer\n    water_A_after = 50 - x + x\n    water_B_after = 30 - x + x\n\n    # Setting up the equation for sugar concentrations being equal\n    equation = Eq(sugar_A_after / water_A_after, sugar_B_after / water_B_after)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    # Initialize the result as 0.\n    ans = 0\n    \n    # Initialize the numerator and denominator with their starting values.\n    numerator = 100\n    denominator = 97\n    \n    # Loop to calculate each term in the series until the denominator is 1.\n    while denominator > 1:\n        # Calculate current term and add it to ans.\n        ans += numerator / denominator\n        \n        # Update the numerator and denominator for the next term.\n        numerator *= (numerator - 1)\n        denominator *= (denominator - 1)\n    \n    # Add the last term (when denominator is 1) to the result.\n    ans += numerator\n    \n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # The time it takes Katie to make one cut is 8 minutes divided by the 4 cuts she needs to do.\n    # (one piece of wood requires 4 cuts to be divided into 5 sections)\n    time_per_cut = 8 / 4\n\n    # To cut the wood 6 times (thus into 7 sections), Katie needs to make 6 cuts.\n    # So we multiply the time it takes to make one cut with the number of cuts needed.\n    total_time = time_per_cut * 6\n\n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_already = 22 + 27 + 35  # Votes for Mark, Nicole, and Peter\n    remaining_votes = total_votes - votes_already  # Votes remaining to be cast\n\n    # Peter needs more than half of the total votes to be guaranteed to win\n    required_votes_for_win = (total_votes // 2) + 1\n\n    # Calculate how many more votes Peter needs\n    additional_votes_needed = required_votes_for_win - 35\n\n    # If there are not enough remaining votes for Peter to reach the guaranteed win condition,\n    # then it's not possible for him to win outright. Otherwise, the additional votes needed is the answer.\n    ans = additional_votes_needed if additional_votes_needed <= remaining_votes else -1\n\n    return ans\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the total number of pupils\n    total_pupils_eq = Eq(boys + girls, 995)\n\n    # Equation representing the difference between the number of boys and girls\n    difference_eq = Eq(boys, girls + 7)\n\n    # Solve the system of equations\n    solutions = solve((total_pupils_eq, difference_eq), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Extract units from each number\n    units_31 = 31 % 10\n    units_32 = 32 % 10\n    # Compare the units to find the highest\n    if units_31 > units_32:\n        ans = 31\n    else:\n        ans = 32\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # Let x be the number of each type of coin\n    # The total value in the money box is then:\n    # 5x + 10x + 20x = 490 (since ￡4.90 is equal to 490 pence)\n    # This simplifies to:\n    # 35x = 490\n    # Solving for x gives us the number of each type of coin\n    x = 490 / 35\n    \n    # The total number of coins is three times the number of each type of coin\n    total_coins = 3 * x\n    return int(total_coins)\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    \n    percentage_reduction = (reduction / original_price) * 100\n    \n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_sweets = 135\n    days = 9\n    \n    # Since the sweets eaten form an arithmetic sequence,\n    # we can find the first term 'a' and the common difference 'd' as follows:\n    # sum = n/2 * (2a + (n-1)d), where n is the number of terms, a is the first term, and d is the common difference.\n    # In our case, sum = 135, n = 9, d = 3.\n    # Hence, we can find the first term using the formula for the sum of an arithmetic series.\n    \n    # Using the sum formula:\n    # 135 = 9/2 * (2a + (9-1)*3)\n    # Solve for 'a' (first term):\n    # 135 = 9/2 * (2a + 24)\n    # 2 * 135 = 9 * (2a + 24)\n    # 270 = 18a + 216\n    # 54 = 18a\n    # a = 54 / 18\n    a = 3\n\n    # We now know the first term 'a' and the common difference 'd'.\n    # To find the sweets eaten on the last day, which is the 9th term 'a9':\n    # a9 = a + (n-1)d\n    # a9 = 3 + (9-1)*3\n    last_day_sweets = a + (days - 1) * 3\n    \n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    remaining_after_book = initial_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # Annie's total money in dollars\n    gift_cost = 20  # The cost of the gift in dollars\n\n    # Convert dollars to cents\n    money_left_in_cents = (total_money - gift_cost) * 100  # Convert the remaining money to cents\n\n    return money_left_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * (1 + rate) ** time\n    return round(balance, 5)\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # initial count of digits\n    count = 0\n    # for numbers 1-9, we have 9 single-digit numbers\n    count += 9\n    # for numbers 10-99, we have 90 two-digit numbers\n    count += 90 * 2\n    # for numbers 100-185, we have 86 three-digit numbers\n    count += (185 - 99) * 3\n    return count\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n\n    new_annual_salary = annual_salary + (annual_salary * pay_rise_percent / 100)\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4*x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # Assuming Betty's birth month is between January (1) and December (12)\n        for day in range(1, 32):  # Assuming Betty's birth day is between 1 and 31\n            if month * 31 + day * 12 == 376:\n                return \"{:02d}{:02d}\".format(day, month)\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    result = 4.08 * 20 - 1.08 * 20\n    missing_number = result / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    numbers = [119, 117, -115, 113, -111, 109, -107, 105, -103, 101, -99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = cost_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original price of calculators and protractors\n    calculator_price = 6\n    protractor_price = 0.30\n\n    # Discounted price after the sale\n    calculator_discounted_price = calculator_price * (1 - 0.25)  # 25% off\n    protractor_discounted_price = protractor_price * (1 - 0.50)  # 50% off\n\n    # Total price for the calculators and protractors David bought\n    total_price = (8 * calculator_discounted_price) + (20 * protractor_discounted_price)\n\n    return total_price\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    # Original amounts\n    original_flour = 40\n    original_milk = 80\n\n    # Tom's available amount of flour\n    tom_flour = 25\n\n    # Calculate the amount of milk based on the proportion of flour Tom has\n    tom_milk = (tom_flour * original_milk) / original_flour\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    total_sweets = sweets_left + sweets_taken\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n    older_age_future = 62\n    # When the younger elephant reaches the older elephant's current age,\n    # the age difference between them will remain constant.\n    # So the difference in age will be the same between their current ages\n    # and the older's future age at the time the younger is the older's current age\n    age_difference = older_age_future - younger_age_now\n    # The older elephant's current age is therefore the younger's current age plus the age difference\n    older_age_now = younger_age_now + age_difference\n    \n    return older_age_now\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # 27 oxen can finish the grass in 6 weeks.\n    # So, the total amount of work is 27 oxen * 6 weeks = 162 oxen-weeks.\n    total_work = 27 * 6\n\n    # 23 oxen can also finish the same amount of work, but in 9 weeks,\n    # which confirms that the total work is 23 oxen * 9 weeks = 207 oxen-weeks.\n    # Since the total work should be the same, we equate them:\n    # 27 * 6 = 23 * 9\n    # From here we solve for the time it takes for 21 oxen to finish the work.\n    # Let that time be x weeks.\n    # So we have: 21 oxen * x weeks = 162 oxen-weeks\n    # Now we solving for x:\n    x = total_work / 21\n\n    return x\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    return (2/3) * 1194\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Calculate distance Ellen travels on bike\n    bike_speed = 10 # miles per hour\n    bike_time = 1 # hour (from 7:30 AM to 8:30 AM)\n    bike_distance = bike_speed * bike_time\n\n    # Calculate distance Ellen travels on train\n    train_speed = 50 # miles per hour\n    train_time = 2 # hours (from 8:30 AM to 10:30 AM)\n    train_distance = train_speed * train_time\n\n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # We will implement stars and bars theorem, where we put 5 indistinguishable balls (stars)\n    # into 3 distinguishable boxes (bars).\n    # We need to find the number of ways to arrange 2 bars among 5 stars and these 2 bars.\n    # This is equivalent to choosing 2 positions for bars out of (5 + 3 - 1) positions.\n    # Hence we use combinatory mathematics C(n + k - 1, k - 1), where n is the number of stars and k is the number of boxes.\n    \n    from math import comb\n    \n    stars = 5  # five balls\n    bars = 3   # three boxes\n    ans = comb(stars + bars - 1, bars - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote blue marbles as 'b'\n    b = symbols('b')\n\n    # define the equations based on the problem statement\n    red_marbles = b + 25\n    green_marbles = red_marbles + 32\n    \n    # total marbles equation\n    total_marbles_eq = Eq(b + red_marbles + green_marbles, 112)\n\n    # solve for blue marbles\n    blue_marbles_solution = solve(total_marbles_eq, b)\n\n    return blue_marbles_solution[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    letters = \"TEENAGE\"\n    letter_counts = {char: letters.count(char) for char in set(letters)}\n\n    total_permutations = factorial(len(letters))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas's position counting from front to back or from left to right establishes one dimension\n    # since he's 3rd from front and 2nd from back, there are 3 + 2 - 1 people in that dimension (we subtract 1 because we're counting Lucas twice)\n    length = 3 + 2 - 1\n\n    # Similarly, since he's 4th from left and 3rd from right, there are 4 + 3 - 1 people in the other dimension\n    width = 4 + 3 - 1\n\n    # The total number of students in the rectangular array is the product of the two dimensions\n    return length * width\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Symbols for Ema's money and Keng Wee's money\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n\n    # Ema spent 1/4 of her money; Keng Wee spent 4/7 of his money\n    # After that, they had the same amount of money left\n    equation2 = Eq(ema - ema / 4, keng_wee - (4/7) * keng_wee)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    # Return the amount of money Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def digits_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    number = 217\n    while digits_sum(number) != 9:\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ten_times_one_fourth_of_36 = one_fourth_of_36 * 10\n    return ten_times_one_fourth_of_36\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    from_front = 3\n    from_back = 2\n    from_left = 4\n    from_right = 3\n\n    rows = from_front + from_back - 1\n    columns = from_left + from_right - 1\n\n    return rows * columns\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls_before = 9/11 * boys\n    girls_after = girls_before + 2\n\n    equation = Eq(girls_after, 10/11 * boys)\n\n    boys_number = solve(equation, boys)[0]\n    girls_number = 10/11 * boys_number\n\n    total_students = boys_number + girls_number\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # start with the integer 1\n    for i in range(2, 11):  # we consider fractions from 1/2 to 10/10\n        ans += sum([(j / i) for j in range(1, i)])  # add the ascending fractions\n        ans += sum([(j / i) for j in range(i, 0, -1)])  # add the descending fractions\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(2*(3*x - y), 2*x + 4)\n\n    # Solve for y in terms of x using the first equation\n    y_expr = solve(eq1, y)[0]\n\n    # Substitute y in terms of x into the expression (2x - y)\n    expr = 2*x - y_expr\n    ans = expr.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    pounds = 5\n    change_pence = (pounds * 100) - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    # Let \"z\" represent Zehan's current age.\n    # According to the problem, in 12 years, Zehan will be 3 times her current age.\n    # So the equation that represents the relation is z + 12 = 3 * z\n    # We need to solve this equation to find Zehan's current age.\n\n    from sympy import symbols, Eq, solve\n\n    z = symbols('z')\n    equation = Eq(z + 12, 3 * z)\n\n    zehan_age = solve(equation, z)\n\n    return zehan_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(15, 5)\n    no_ABC = comb(12, 5)\n    exactly_one_ABC = total_ways - no_ABC * 3 + comb(12, 4) * 3\n    return exactly_one_ABC\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    \n    cost_per_ticket = total_cost / number_of_tickets\n    \n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of lemon juice in the bottle\n    x = symbols('x')\n\n    # Since 80ml of lemon juice is added, the new amount of lemon juice will be x + 80\n    # The amount of water in the bottle will remain the same and since the original\n    # ratio is 2:3, the water is (3/2)*x\n\n    # Set up the equation according to the new ratio 6:5, which will be:\n    # (x + 80) / ((3/2)*x) = 6 / 5\n    equation = Eq((x + 80) / ((3/2)*x), 6/5)\n\n    # Solve for x\n    initial_lemon_juice = solve(equation, x)[0]\n\n    return initial_lemon_juice\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    total_spent = 177 + 129\n    mother_share = total_spent / 0.5\n    total_savings = mother_share * 3\n\n    return total_savings\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_speakers = 75\n    japanese_speakers = 45\n\n    # both_languages represent those who know both French and Japanese.\n    # By Inclusion-Exclusion Principle: \n    # both_languages = french_speakers + japanese_speakers - total_teachers\n    both_languages = french_speakers + japanese_speakers - total_teachers\n\n    # only_french represent those who know only French.\n    # only_french = total French speakers - those who know both languages\n    only_french = french_speakers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # in mph\n    increased_speed = usual_speed * 1.3  # speed is increased by 30%\n    time_delay = 9 / 60  # time delayed in hours\n\n    # Distance = Speed * Time\n    # Let's assume usual time to reach the destination is t.\n    # Usual distance = usual_speed * t\n    # Distance with increased speed = increased_speed * (t - time_delay)\n    # Since the distance is the same, we equate them and solve for t:\n    # usual_speed * t = increased_speed * (t - time_delay)\n    # t = increased_speed * time_delay / (increased_speed - usual_speed)\n\n    t = (increased_speed * time_delay) / (increased_speed - usual_speed)\n\n    # Now we calculate the distance.\n    distance = usual_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    for num in range(-1000, 1000):  # Assuming the number is within this range\n        if (((num + 8) * 8 - 8) / 8) == 80:\n            return num\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the distance, and v the original speed.\n    # Let t be the original time taken at speed v to cover distance d.\n    d, v, t = symbols('d v t')\n\n    # According to the first condition:\n    # Traveling at increased speed (1.25*v), time taken is (t - 20/60) hours.\n    equation1 = Eq(d, 1.25 * v * (t - 20/60))\n\n    # According to the second condition:\n    # Traveling at decreased speed (v - 45), time taken is (1.75*t) hours.\n    equation2 = Eq(d, (v - 45) * (1.75 * t))\n\n    # Distance d can also be written as the product of original speed v and time t.\n    equation3 = Eq(d, v * t)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # There could be multiple solutions, filter based on physical constraints (positive distance).\n    valid_solution = [sol for sol in solutions if sol[d] > 0 and sol[v] > 0 and sol[t] > 0]\n\n    # Return the distance.\n    return valid_solution[0][d]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n  \n    # Assume all ropes are red. This is our hypothesis to calculate the maximum red ropes we can have.\n    max_red = total_ropes\n    red_length = 2\n    blue_length = 3\n\n    # Calculate the difference in the length with all red to actual total length\n    length_difference = max_red * red_length - total_length\n\n    # Calculate the number of blue ropes needed to make up for the length difference\n    blue_ropes = length_difference // (blue_length - red_length)\n\n    # Calculate the number of red ropes by subtracting the number of blue ropes from the total\n    red_ropes = total_ropes - blue_ropes\n\n    return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    total_both = 21\n\n    total_one_event = (total_skipping - total_both) + (total_long_jump - total_both)\n\n    return total_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.3\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366  # total saved electricity in the first half of the year\n    avg_second_half = 65  # average saved electricity per month in the second half of the year\n    months_in_half_year = 6  # number of months in half a year\n    \n    # Calculate total electricity saved in the second half of the year\n    total_second_half = avg_second_half * months_in_half_year\n    \n    # Total electricity saved for the whole year\n    total_year = total_first_half + total_second_half\n    \n    # Average saved electricity per month for the whole year\n    avg_per_month = total_year / (months_in_half_year * 2)  # Total months in a year is months in half year * 2\n\n    return avg_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 1\n    while True:\n        if children % 7 == 0 and children % 9 == 2:\n            return children\n        children += 1\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22 // 2 + 1):\n        y = 22 - x\n        if x != y:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    total_used_simplified = total_used.simplify()\n\n    return total_used_simplified\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for num in range(42):\n        if 41 % num == 0:\n            A = num + 41\n            break\n    ans = 7 * A\n    return ans\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given height and the ratio\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    # Calculate the width based on the ratio\n    width = (height / ratio_height) * ratio_width\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    ans = 1\n    for i in range(2, 12):\n        ans *= (1 + 1/i)\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    \n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    \n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Last digit of 4 raised to any power equals 6 after 4^2 because 4^2 = 16, and similarly for all even powers of 4\n    last_digit_4 = 6\n    \n    # Last digit of 7 raised to any power cycles through 7, 9, 3, and 1; here we need the last digit after 7^4 because 7^4 ends with 1\n    last_digit_7 = pow(7, 100 % 4) % 10\n    \n    # Last digit of 9 raised to any power cycles through 9 and 1; here we need the last digit after 9^2 because 9^2 ends with 1\n    last_digit_9 = pow(9, 100 % 2) % 10\n    \n    # Last digit of 11 raised to any power is always 1 because 11^1 ends with 1 and this pattern continues\n    last_digit_11 = 1\n\n    # The last digit of the product is the product of the last digits\n    last_digit_product = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_answer_percentage = 0.70\n    correct_answers = total_questions * correct_answer_percentage\n    correct_mark = 3\n    wrong_mark = -1\n    total_marks = 78\n\n    # Let x be the number of correct answers, and y be the number of wrong answers\n    # correct_answers = x + y\n    # total_marks = correct_mark * x + wrong_mark * y\n\n    # x + y = correct_answers\n    # 3x - y = total_marks\n\n    # Solve the system of equations\n    y = (correct_mark * correct_answers - total_marks) / (correct_mark - wrong_mark)\n    x = correct_answers - y\n\n    return int(x)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the cost of one file as f and one ruler as r\n    f, r = symbols('f r')\n\n    # given the cost of 6 files and 10 rulers\n    equation1 = Eq(6 * f + 10 * r, 40)\n\n    # solve the equation for f and r\n    solutions = solve(equation1, (f, r))\n\n    # now calculate the cost of 9 files and 15 rulers\n    cost = 9 * solutions[f] + 15 * solutions[r]\n    return cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for John and Jessie's initial amounts\n    john, jessie = symbols('john jessie')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(john, 5/13 * jessie)              # John had 5/13 of Jessie's money\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600)) # After transferring $600, John has 50% of Jessie's money\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, jessie))\n    \n    # Calculate the total amount of money they had\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    one_count = 0\n    two_count = 0\n    N = 0\n    while one_count < 15 or two_count < 14:\n        N += 1\n        one_count += str(N).count('1')\n        two_count += str(N).count('2')\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_in = datetime.strptime('10:30', '%H:%M')\n    time_out = datetime.strptime('11:00', '%H:%M')\n\n    time_baked = time_out - time_in\n\n    return int(time_baked.total_seconds() / 60)  # Convert time to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n    total_amount = 132\n\n    # The ratio of the number of T-shirts to the number of caps\n    ratio_eq = Eq(t_shirts/caps, 8/5)\n\n    # The total amount collected by selling 1/4 of T-shirts and 1/5 of caps\n    selling_eq = Eq((t_shirts/4)*3 + (caps/5)*5, total_amount)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, selling_eq), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = 3 * 12 + 5 * 11\n    change = 200 - total_cost\n    return change / 100\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n\n    harvir_age = youngest_age + age_difference * (number_of_siblings - 1)\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n    total_spent = calendar_cost + ball_cost\n    return total_spent\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the larger number and y be the smaller number\n    # We have two equations:\n    # x - y = 36 (Difference between the numbers)\n    # x + y = 98 (Sum of the numbers)\n    \n    # Solve for x and y:\n    # Adding the two equations, we get:\n    # 2x = 134 => x = 134 / 2\n    # x = 67\n    # Now, we can find y by plugging x into either of the equations, let's use x + y = 98\n    # 67 + y = 98 => y = 98 - 67\n    y = 98 - 67\n    \n    return y\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used_muffins = 1/5  # kg\n    flour_used_cookies = 1/2  # kg\n    flour_left = 360 / 1000   # convert g to kg\n\n    initial_flour = flour_used_muffins + flour_used_cookies + flour_left\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons', integer=True)\n\n    # Define the cost of one orange and one lemon\n    cost_orange = 26  # in pence\n    cost_lemon = 30   # in pence\n\n    # Gordon spent exactly 5 pounds, which is 500 pence\n    total_spent = 500  # in pence\n\n    # Create an equation based on the cost\n    equation = Eq(cost_orange * oranges + cost_lemon * lemons, total_spent)\n\n    # Gordon could have bought a maximum of 500/26 oranges or 500/30 lemons\n    # We can use this information to limit the search space\n    \n    # Find all solutions within a reasonable range for orange and lemon quantities\n    solutions = [(o, l) for o in range(total_spent // cost_orange + 1)\n                 for l in range(total_spent // cost_lemon + 1)\n                 if cost_orange * o + cost_lemon * l == total_spent]\n\n    # If the task is to find the total number of fruits he could buy,\n    # we can sum the quantities of oranges and lemons for all valid solutions\n    total_fruits = sum(o + l for o, l in solutions)\n\n    # Returns the total number of fruits\n    return total_fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # For a circular arrangement, fix one person's position and arrange the others.\n    # Since fixing one person reduces the permutations by 1 person, we have 3! arrangements.\n    num_people = 3  # Judy, James and Bowen (considering 'I' as fixed)\n    num_orders = factorial(num_people)\n\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_eggs = symbols('original_eggs')\n    \n    # Equation representing the relation after adding 24 eggs\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    # Solve the equation for the original number of eggs\n    solutions = solve(equation, original_eggs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3*a + 2*b\n    \n    def star(a, b):\n        return 3*a - 2*b\n    \n    result = delta(star(delta(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = total_cookies // cookies_per_box\n    if total_cookies % cookies_per_box != 0:\n        boxes_needed += 1\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of female visitors be 'f' on the first day\n    # The number of male visitors will then be 'f + 450'\n    f, m = symbols('f m')\n\n    # Construct two equations based on the problem statement\n    # On the second day, female visitors increased by 15% -> f + 0.15f\n    # On the second day, male visitors decreased by 18% -> m - 0.18m\n    # The total number of visitors on the second day is 1354\n\n    equation1 = Eq(m, f + 450)\n    equation2 = Eq((f + 0.15*f) + (m - 0.18*m), 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # Calculate the total number of visitors on the first day (f + m)\n    first_day_visitors = solutions[f] + solutions[m]\n\n    return first_day_visitors\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n    initial_difference = 220\n    leo_salary = 180\n    jason_salary = 1100\n    final_ratio = 2\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(leo - jason, initial_difference)\n    equation2 = Eq(leo + leo_salary, jason + jason_salary - initial_difference)\n\n    # Jason now has 2 times as much money as Leo\n    equation3 = Eq(jason, final_ratio * (leo + leo_salary))\n\n    solutions = solve((equation1, equation2, equation3), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Calculate factorial of the total number of books\n    total_permutations = factorial(total_books)\n    # Divide by the factorial of the number of books of each type\n    # to correct for indistinguishable objects (same type of book).\n    ans = total_permutations // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        if a == 0 or c == 0:  # E and C cannot be zero as they are the first digits of three-digit numbers\n            continue\n        sum_two = 100*a + 10*b + c\n        sum_three = 100*d + 10*e + a\n        result = 10000*e + 1000*c + 100*b + 10*sum_three%100//10 + sum_three%10\n        if sum_two + sum_three == result:\n            return result\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    from math import comb\n    \n    # The problem of splitting n identical items into k identical groups\n    # can be transformed into a problem of partitioning, which is equivalent\n    # to the number of ways to place n+k-1 identical items into k identical groups,\n    # minus the parts where any group would have 0 items\n    # we should put at least one item in each group to avoid the group having 0 items\n    # which is equivalent to (n - 1) items into k groups\n    \n    n = 7  # identical pencils\n    k = 3  # identical pencil cases\n    \n    # The formula is C(n + k - 1 - (k - 1), k - 1) = C(n, k - 1)\n    ans = comb(n + k - 1 - (k - 1), k - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    total_robots = robots_per_day * days_per_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    number = 345\n    while number > 0:\n        number -= 9\n\n    number += 9  # Add back the last subtracted 9 to get the last positive number\n    return number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # cost of the mansion in pounds\n    num_friends = 5  # number of friends\n\n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    shirt_cost_without_name = 10\n    shirt_cost_with_name = 15\n    total_amount_paid = 555\n    total_children = 50\n\n    # Assume all children bought the cheaper shirt first\n    base_cost = total_children * shirt_cost_without_name\n    # Remaining amount must have been used to add names to the shirts\n    remaining_amount = total_amount_paid - base_cost\n    # Calculate how many children paid the extra amount for their name\n    number_with_names = remaining_amount // (shirt_cost_with_name - shirt_cost_without_name)\n\n    return number_with_names\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t1, t2 = symbols('t1 t2')\n    speed1 = 150  # speed before increase\n    speed2 = speed1 + 50  # speed after increase\n    time_offset = 10  # time before speed increase in minutes\n\n    # equation for the distance walked before speed increase\n    equation1 = Eq(speed1 * t1, speed1 * time_offset)\n    # equation for the total distance\n    equation2 = Eq(speed1 * time_offset + speed2 * t2, 3700)\n\n    # solve the equations for t1 and t2\n    solutions = solve((equation1, equation2), (t1, t2))\n\n    # total time spent walking is the sum of time before and after the speed increase\n    total_time = time_offset + solutions[t2]\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # m = number of male visitors on the first day\n    # f = number of female visitors on the first day\n    m, f = symbols('m f')\n\n    # Male visitors are 450 more than female visitors on the first day\n    equation1 = Eq(m, f + 450)\n\n    # Male visitors decreased by 18% on the second day => 0.82 * m\n    # Female visitors increased by 15% on the second day => 1.15 * f\n    # The total number of visitors on the second day is 1354\n    equation2 = Eq(0.82 * m + 1.15 * f, 1354)\n\n    # Now solve the equations\n    solutions = solve((equation1, equation2), (m, f))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    # Since in each round half of the students (those with odd numbers) leave,\n    # the position of the last remaining student must be 2^n.\n    # We need to find 'n' such that 2^n <= 40 but 2^(n+1) > 40.\n    # This is the largest 'n' such that 2^n is still within the number of students.\n    \n    n = 0\n    while 2 ** (n+1) <= 40:\n        n += 1\n    # The position of the last student is 2^n.\n    final_position = 2 ** n\n    return final_position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Time difference between Singapore and London\n    time_difference = 7\n    \n    # Singapore departure time in hours (assuming 24-hour format)\n    sg_departure_time = 5\n    \n    # London arrival time in hours (assuming 24-hour format)\n    london_arrival_time = 11\n    \n    # We consider the case when the flight spans over the point when London time resets from 23:59 to 00:00\n    # If the plane lands at 11:00 in London, it should be 18:00 in Singapore time\n    # We calculate the duration by adding the hours before and after midnight\n    if london_arrival_time < sg_departure_time:\n        duration_before_midnight = (24 - sg_departure_time)  # Duration before midnight\n        duration_after_midnight = london_arrival_time       # Duration after midnight\n        flight_duration = duration_before_midnight + duration_after_midnight\n    else:\n        # If the flight did not span over the midnight point, we directly calculate the duration\n        flight_duration = london_arrival_time - sg_departure_time + 24 - time_difference\n    \n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "def solution():\n    from math import factorial\n\n    # Number of each suit of cards\n    hearts = 4\n    spades = 3\n    diamonds = 7\n\n    # Total number of cards\n    total_cards = hearts + spades + diamonds\n\n    # Calculate the total permutations without considering identical items\n    total_permutations = factorial(total_cards)\n\n    # Divide by the permutations of the identical items (hearts, spades, diamonds)\n    ways = total_permutations // (factorial(hearts) * factorial(spades) * factorial(diamonds))\n\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5 that is not 0.\n    first_digit = 5\n    # Second digit: the smallest odd number among the natural numbers.\n    second_digit = 1\n    # Third digit: in a single digit, the largest odd number.\n    third_digit = 9\n    # Fourth digit: in nature, the smallest even number.\n    fourth_digit = 2\n    # Fifth digit: the largest single digit that is a multiple of 2.\n    fifth_digit = 8\n    # Sixth digit: the smallest odd number greater than 1 in nature.\n    sixth_digit = 3\n    # Seventh digit: Bella's home phone number is both a multiple of 2 and a multiple of 5, \n    # inferring the smallest multiple of 10 which is a single-digit natural number.\n    seventh_digit = 0\n\n    # Combine the digits to form the phone number\n    phone_number = (first_digit, second_digit, third_digit, fourth_digit,\n                    fifth_digit, sixth_digit, seventh_digit)\n\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_read = 80\n    day_count = 1\n    pages_read = 20\n    \n    while total_pages_read < 80:\n        day_count += 1\n        pages_read += 5\n        total_pages_read += pages_read\n\n    total_pages = total_pages_read + (day_count - 1) * (2 * 20 + (day_count - 2) * 5) // 2\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds_weight = Fraction(4, 9)\n    cashew_nuts_weight = Fraction(1, 3)\n    difference = almonds_weight - cashew_nuts_weight\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's initial computation is 9 * 2 = 18, which seems to be a misunderstanding.\n    # The correct method should be to multiply the quotient (9) by the divisor (4) \n    # and then add the remainder (2) to get the dividend.\n    quotient = 9\n    divisor = 4\n    remainder = 2\n\n    correct_dividend = (quotient * divisor) + remainder\n    johnny_dividend = (remainder * quotient) + divisor\n\n    # Determine if Johnny's answer is correct\n    is_correct = correct_dividend == johnny_dividend\n\n    return correct_dividend if not is_correct else johnny_dividend\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(54, 1, -2):\n        total += sign * i\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if s != '0' and o != '0' and sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    \n    girls = Eq(40 - boys)\n    \n    bags_by_boys = 4 * boys\n    bags_by_girls = 3 * (40 - boys)\n    \n    equation = Eq(bags_by_boys, bags_by_girls + 62)\n    \n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    \n    # Sort the sequence to find the median\n    sequence.sort()\n    \n    middle_index = len(sequence) // 2\n    # If the sequence length is odd, the median is the middle number\n    if len(sequence) % 2 != 0:\n        median = sequence[middle_index]\n    # If the sequence length is even, the median is the average of the two middle numbers\n    else:\n        median = (sequence[middle_index - 1] + sequence[middle_index]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the part that has been cut from rope A and rope B\n    cut_length = symbols('cut_length')\n    \n    # The length of rope A after cutting\n    new_length_a = 65 - cut_length\n    # The length of rope B after cutting\n    new_length_b = 29 - cut_length\n    \n    # Equation representing the condition that rope A is 3 times rope B after cutting\n    equation = Eq(new_length_a, 3 * new_length_b)\n    # Solve the equation for the cut length\n    solution = solve(equation, cut_length)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_times = total_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((12/18), (x/6))\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    ratio1 = Eq(A/B, 2/3)\n    ratio2 = Eq(B/C, 6/5)\n    avg_eq = Eq((A + B + C)/3, 45)\n    \n    solution = solve((ratio1, ratio2, avg_eq), (A, B, C))\n    \n    return solution[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(6 * (7 * x) + 3 * 35, 441)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, 9\n    odd_digits_count = 5\n    \n    # For a 3-digit number where all digits are odd, we have 5 choices for each digit\n    choices_per_digit = odd_digits_count\n    \n    # Multiply choices for each of the three digits together (Law of Multiplication)\n    total_numbers = choices_per_digit * choices_per_digit * choices_per_digit\n    \n    return total_numbers\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The pattern suggests the telescoping series\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on his own\n    x = symbols('x')\n\n    # The rate of work done by the energetic one per day is 1/12\n    # The rate of work done by the lazy one per day is 1/x\n    # Together their combined rate of work per day is 1/8\n\n    # The equation representing their combined work is:\n    # 1/12 (energetic one's work per day) + 1/x (lazy one's work per day) = 1/8 (combined work per day)\n    equation = Eq(1/12 + 1/x, 1/8)\n\n    # Solve the equation for x\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(1, 1000, 2))\n    remainder = sum_squares % 3\n    return remainder\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 4) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    equation1 = jamie_anne - natasha - 18\n    equation2 = jamie_anne - (5/3) * natasha\n\n    stamps_count = solve((equation1, equation2), (jamie_anne, natasha))\n\n    total_stamps = stamps_count[jamie_anne] + stamps_count[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of coins Mina had be x\n    sana, mina = symbols('sana mina')\n    total_coins = 234\n\n    # Equation representing the total amount of coins\n    equation1 = Eq(sana + mina, total_coins)\n\n    # Sana had 8 times as many coins as Mina\n    equation2 = Eq(sana, 8 * mina)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina gave away 12 coins\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3/4\n\n    num_small_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(num_small_bags)\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let x be the original length and y be the original width.\n    # When the length is increased by 12cm, the new length becomes x+12.\n    # The new perimeter is then 2 * (x + 12) + 2y = 38\n    # From the perimeter equation, we can express y in terms of x.\n    # y = (38 - 2 * (x + 12)) / 2\n\n    # Since we know the perimeter of the new rectangle, we can plug in the value of y back into the original perimeter formula.\n    # The original perimeter is 2x + 2y.\n    # To find the original perimeter, we need to substitute y from the previous expression.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (x + 12) + 2 * y, 38)\n    solution = solve(equation, y)\n    y_value = solution[0]\n    original_perimeter = 2 * x + 2 * y_value\n\n    # However, we need an expression involving only x, since y is defined in terms of x.\n    # original_perimeter = 2 * x + (38 - 2 * (x + 12))\n\n    # Simplify the above equation.\n    # original_perimeter = 2 * x + 38 - 2 * x - 24\n    original_perimeter_expr = Eq(original_perimeter, 38 - 24)\n\n    # Now, we can solve for the original perimeter.\n    ans = solve(original_perimeter_expr)[0]\n\n    return ans\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pence_per_pound = 100  # There are 100 pence in one pound\n    total_pence = pounds * pence_per_pound  # Convert pounds to pence\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # It takes Uncle Sam 50 seconds to cycle from the first to the eleventh lamp post\n    # This means he cycles past 10 intervals (from the 1st to the 2nd, 2nd to the 3rd, ..., 10th to the 11th)\n    # Therefore, Uncle Sam cycles past one lamp post every 50 / 10 = 5 seconds\n    \n    # After 80 seconds, divide the time by the time it takes to pass one lamp post to find out how many he passed\n    lamp_posts_passed = 80 / 5\n    \n    # Since he starts at the first lamp post, we need to add the starting lamp post to the total count\n    total_lamp_posts = lamp_posts_passed + 1\n\n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side_excluding_corners = 6 - 2  # Since corners are counted twice if we take 6 for each side\n    total_flowers = (flowers_per_side_excluding_corners * 4) + (4 * 1)  # 4 corners, each with one flower\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the total number of items is x\n    items = symbols('items')\n\n    # $\\frac{2}{3}$ of them were apples\n    apples = 2 * items / 3\n\n    # $\\frac{1}{9}$ of them were bananas\n    bananas = items / 9\n\n    # The rest were lemons\n    lemons = items - apples - bananas\n    \n    # She bought $12$ more apples than lemons\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equations to find the total number of items\n    solutions = solve(equation, items)\n\n    # Since we want the number of lemons and one solution is the number of items\n    total_items = solutions[0]\n    number_of_lemons = total_items - (2 * total_items / 3) - (total_items / 9)\n\n    return int(number_of_lemons)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Calculate the sum of all factors of 4\n    factors_of_4 = [i for i in range(1, 5) if 4 % i == 0]\n    ones_place = sum(factors_of_4)\n    \n    # The digit in the hundreds place has a value of 800\n    hundreds_digit = 8\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the hundreds place and the ones place\n    tens_place = hundreds_digit - ones_place\n    \n    # Construct the 5-digit number according to the given conditions\n    number = 40000 + thousands_digit * 1000 + hundreds_digit * 100 + tens_place * 10 + ones_place\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n\n    football_field_length = basketball_court_length + football_field_extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price_rina = 60 / (1 - 0.20)\n    \n    discount_ana = (original_price_rina - 67.50) / original_price_rina * 100\n    \n    return discount_ana\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    # Find the smallest s where 3/10 < r/s < 5/16\n    # By cross-multiplication, we find the equivalent inequalities\n    # 16r < 5s and 3s < 10r. To minimize s, we start by testing from s=1 and move upwards.\n    \n    s = 1\n    while True:\n        if any((3 * s < 10 * r) and (16 * r < 5 * s) for r in range(1, s)):\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    portion_total = first_day + second_day\n    total_steering_wheels = portion_total / (5/6)\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return round(1.3 - 0.02, 2)\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_in_children = 40\n    children_on_bus = 15\n    adult_capacity = 24\n\n    # Find remaining capacity for children\n    remaining_capacity_for_children = total_capacity_in_children - children_on_bus\n    \n    # Convert remaining capacity for children to equivalent number of adults\n    remaining_capacity_for_adults = (remaining_capacity_for_children * adult_capacity) / total_capacity_in_children\n    \n    # The greatest number of adults has to be an integer, as we cannot have a fraction of an adult\n    max_adults = int(remaining_capacity_for_adults)\n    \n    return max_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Find the prime factorization of 28\n    def prime_factors(n):\n        factors = []\n        # 2 is the only even prime number\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        # now n is odd and we start from 3\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        # if n is a prime number greater than 2\n        if n > 2:\n            factors.append(n)\n        return factors\n    \n    pf_28 = prime_factors(28)\n    \n    # Find the smallest number that needs to be multiplied to 28 to get a perfect square\n    # perfect square has even powers of all its prime factors\n    # create a dictionary to count frequency of each prime factor in 28\n    factors_count = {}\n    for p in pf_28:\n        if p in factors_count:\n            factors_count[p] += 1\n        else:\n            factors_count[p] = 1\n    \n    smallest_multiplier = 1\n    # for each prime factor, calculate if we need to multiply it to get an even power\n    for p, power in factors_count.items():\n        if power % 2 != 0:  # if the power is odd\n            smallest_multiplier *= p\n    \n    return smallest_multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    total_minutes = 12\n    pancakes_per_minute = pancakes_per_3_minutes / 3\n    total_pancakes = pancakes_per_minute * total_minutes\n    \n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    uniform_sizes = 3\n    \n    # Using the Pigeonhole Principle to find the minimum number of students\n    # wearing the same size of uniform\n    same_size_min = (total_students + uniform_sizes - 1) // uniform_sizes\n    \n    return same_size_min\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_operation(a, b):\n        return (a + 2) / b\n\n    inner_result = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner_result)\n\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    expenditure_dvd = 740\n    remaining_after_dvd = salary - expenditure_dvd\n    expenditure_tv = (3/4) * remaining_after_dvd\n    remaining_after_tv = salary - expenditure_dvd - expenditure_tv\n    final_remaining = (1/5) * salary\n\n    equation = Eq(remaining_after_tv, final_remaining)\n\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell_current = symbols('russell_current')\n\n    equation = Eq(russell_current + 32, 4 * (russell_current - 16))\n\n    solution = solve(equation, (russell_current))\n\n    return solution[russell_current]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total_amount = 120\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Directly opposite in a circle implies that the positions are halfway around the circle from each other.\n    # Therefore, the total number of people in the circle is twice the difference in their numbers.\n    total_people = 2 * abs(19 - 6)\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * B + 100 * C + 10 * A + B\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Initial scenario: A = 4/9 * B\n    equation1 = Eq(A, 4 * B / 9)\n\n    # After reshuffling: The number of students in both classes are now equal\n    # A - 3 + 18 = B + 3 - 18\n    equation2 = Eq(A - 3 + 18, B + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let x be the number of shelves with math books\n    # Thus, 15 - x will be the number of shelves with spelling books\n    # Since there are 72 spelling books on 15 - x shelves, each shelf with spelling books contains 9 books\n    # Therefore, we can write the following equation:\n    # 9 * (15 - x) = 72 -> This implies there are 15 - x shelves with spelling books\n    # Simplify the equation to find x\n    # 135 - 9x = 72\n    # 9x = 135 - 72\n    # 9x = 63\n    # x = 63 / 9\n    # x = 7\n    # Hence, there are 7 shelves with math books\n    \n    # Since each shelf with math books contains 4 books, the total number of math books is 4 * 7\n    total_math_books = 4 * 7\n    \n    return total_math_books\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    original_chocolate = 40\n    original_biscuits = 100\n    available_biscuits = 75\n\n    # Finding the proportion of the available biscuit quantity\n    proportion = available_biscuits / original_biscuits\n\n    # Calculating the amount of chocolate needed according to the proportion\n    required_chocolate = proportion * original_chocolate\n\n    return required_chocolate\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n    return solutions[0]\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In a circle, for students to be directly opposite each other, there must be an even number of students.\n    # For the 8th student to be opposite the 16th, there must be 16 students in total (16 - 8 = 8).\n    original_students = 16\n\n    # For the 8th student to be opposite the 22nd, there must be 28 students in total (22 - 8 = 14).\n    new_total_students = 22 + 14\n\n    # The number of new students that joined is the difference between the new total and the original number of students.\n    new_students = new_total_students - original_students\n\n    return new_students\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey walks from the 1st to the 4th floor in 6 minutes\n    # This means he covers 3 floors (4th - 1st) in 6 minutes\n    time_for_3_floors = 6\n    \n    # To find out how long it takes for Jeffrey to walk from the 1st to the 10th floor\n    # We need to know the number of floors he will cover\n    # Which is 10th - 1st\n    total_floors = 10 - 1\n    \n    # Since the speed is constant, we can use a proportion to find out the time for all 9 floors\n    # (3 floors / 6 minutes) = (9 floors / x minutes)\n    # So, x = (9 floors * 6 minutes) / 3 floors\n    time_for_9_floors = (total_floors * time_for_3_floors) / 3\n    \n    return time_for_9_floors\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Jack runs the first 280 meters at a speed of 7 meters per second\n    time_first_part = 280 / 7\n    \n    # Jack runs the middle 400 meters at a speed of 5 meters per second\n    time_middle_part = 400 / 5\n    \n    # The remaining distance is 800 - 280 - 400 = 120 meters\n    # Jack runs this at a speed of 8 meters per second\n    time_last_part = 120 / 8\n    \n    # Total time is the sum of the three parts\n    total_time = time_first_part + time_middle_part + time_last_part\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of marbles Anna, Betsy and Charlene have as a, b, and c respectively.\n    a, b, c = symbols('a b c')\n\n    # Based on the problem statement, we can set up the following equations for the final number of marbles:\n    # Anna has a + 8, Betsy has b - 8 + 15, Charlene has c - 15\n    # The sum of their marbles is 168, so a + b + c = 168\n    # After the transfer, the proportion of their marbles is 2:5:7, so (a + 8) / 2 = (b + 7) / 5 = (c - 15) / 7\n\n    # We set up the three equations:\n    equation1 = Eq(a + b + c, 168)\n    equation2 = Eq((b + 7) * 2, (a + 8))\n    equation3 = Eq((b + 7) * 7, (c - 15) * 5)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Return the initial amount of marbles Betsy had\n    return solutions[b]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of lollipops and gumdrops before adding 120 to each.\n    lollipops, gumdrops = symbols('lollipops gumdrops')\n\n    # Equations based on the given ratios.\n    equation1 = Eq(lollipops / gumdrops, 5 / 7)\n    equation2 = Eq((lollipops + 120) / (gumdrops + 120), 4 / 5)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (lollipops, gumdrops))\n\n    # Calculate the total amount of candy now.\n    total_candy_now = solutions[lollipops] + 120 + solutions[gumdrops] + 120\n\n    return int(total_candy_now)\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    \n    # For 1 to 9, there are 9 pages, and we need 1 digit for each page\n    total_digits += 1 * 9\n    \n    # For 10 to 99, there are 90 pages, and we need 2 digits for each page\n    total_digits += 2 * 90\n    \n    # For the remaining pages from 100 to 268, we calculate the total number\n    total_digits += 3 * (268 - 99)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    # Dimensions of the white paper in cm (converted from m)\n    length_cm = 136\n    width_cm = 80\n\n    # Calculate the maximum side length of the squares in cm\n    side_length = gcd(length_cm, width_cm)\n\n    # Calculate the number of squares by dividing the area of the rectangle\n    # by the area of one square\n    num_squares = (length_cm // side_length) * (width_cm // side_length)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n    for hundreds in digits:\n        for tens in digits:\n            for ones in digits:\n                if (hundreds * 100 + tens * 10 + ones) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_div_by_5 = (200 // 5)\n    count_div_by_7 = (200 // 7)\n    count_div_by_5_and_7 = (200 // 35)\n\n    ans = count_div_by_5 + count_div_by_7 - count_div_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris buys 1 durian, 2 pineapples and 3 watermelons for $440\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    \n    # Dylan buys 4 durians, 6 pineapples and 9 watermelons for $1625\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1) ** (i % 2) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1350):\n        if i * 10 == i + 135:\n            return i * 10\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    A_only = 0.80  # Percentage of students choosing Grade A Math only\n    B_only = 0.35  # Percentage of students choosing Grade B Math only\n    neither = 0.10  # Percentage of students choosing neither\n    both = 75  # Number of students choosing both subjects\n\n    # Total percentage of students choosing either or both subjects\n    total_percent = 1 - neither  # 1 represents the 100% of the students\n    # Total percentage of students choosing either A or B but not both\n    # We subtract the percentage of students that are counted twice because they chose both\n    A_or_B = A_only + B_only - both / total_percent\n\n    # Total number of students\n    total_students = both / (A_only + B_only - total_percent - neither)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # If there are n teams, each team plays n-1 matches at home and n-1 matches away.\n    # Total matches played by each team is 2(n-1).\n    # Therefore, the total number of matches in the league if there are n teams is n*(n-1).\n    # Since each match involves two teams, we must divide by 2 to avoid double counting.\n    # We set up the equation: n*(n-1)/2 = 30\n\n    # If we solve this equation for n, we will get the number of teams.\n    # This is a quadratic equation of the form n^2 - n - 60 = 0,\n    # which factors to (n - 10)(n + 6) = 0.\n    # The positive solution for n is 10.\n    \n    # We cross check our answer.\n    # For n = 10, 10 * (10-1) = 90 total games played.\n    # Since each game is counted twice (once for each team), we divide by 2 to get 45 games.\n    # The equation does not seem to match our condition that the total number of matches is 30,\n    # so we need to try a different approach.\n\n    # Let's brute-force the solution by checking for each number of teams until we get the correct number of matches.\n    n = 1  # Starting with 1 team, we'll increment this to find the solution\n    while (n * (n - 1)) / 2 != 30:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) / (factorial(99) + factorial(98))\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    # In each trip, the boat can carry 5 students to the other side of the river.\n    # However, one student has to bring the boat back.\n    # So in each complete round trip (going to the other side and coming back),\n    # 4 new students are transported across the river.\n    \n    students = 37\n    boat_capacity = 5\n    trips_to_cross_one_way = (students - 1) // (boat_capacity - 1)  # -1 since one student has to return with the boat\n\n    # The last trip doesn't need a return trip, so we have to see if the last group is a full boat of 5 or not.\n    # If it's a full group, that means one student has to bring the boat back, thus we don't subtract 1.\n    if (students - 1) % (boat_capacity - 1) == 0:\n        trips_to_return = trips_to_cross_one_way - 1  # One less return trip since the last trip doesn't return\n    else:\n        # Every other trip includes a return trip.\n        trips_to_return = trips_to_cross_one_way\n\n    total_trips = trips_to_cross_one_way + trips_to_return\n\n    return total_trips\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Frank, Alex, and Paul's ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Frank is older than Alex, Alex is older than Paul, so the difference between Frank and Alex is the same as between Alex and Paul\n    eq_diff = Eq(frank - alex, alex - paul)\n\n    # Sum of their ages is 99\n    eq_sum = Eq(frank + alex + paul, 99)\n\n    # Solve the system of equations\n    sol = solve((eq_diff, eq_sum), (frank, alex, paul))\n\n    # Return Alex's age\n    return sol[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_numbers = [''.join(p) for p in permutations('1469')]\n    all_int_numbers = [int(number) for number in all_numbers]\n    average = sum(all_int_numbers) / len(all_int_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    # boys = girls initially\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, there were twice as many girls as boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from sympy import divisors\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    picked_numbers = set()\n\n    # Find numbers that have a unique count of divisors, as these are ones that can be known\n    factors_count = {i: len(divisors(i)) for i in all_numbers}\n    unique_factors_count = {factor: list(num) for factor, num in factors_count.items() if factors_count.values().count(factor) == 1}\n\n    # If a student raises his hand, he must have a unique factor count\n    for num, fac_count in factors_count.items():\n        if [num] == unique_factors_count.get(fac_count):\n            picked_numbers.add(num)\n    \n    # Assumption: Alice and May's numbers are not in picked_numbers since they can't be sure about their numbers\n    possible_alice_numbers = all_numbers.difference(picked_numbers)  # Alice knows she has an odd number\n    \n    # Eliminate numbers based on Alice's statement about being an odd number\n    possible_alice_numbers = {num for num in possible_alice_numbers if num % 2 != 0}\n    \n    # May's number is smaller than Alice's by 2 and bigger than Mark's by 1\n    # We loop through the remaining numbers to find Alice's Number based on May's clues\n    for alice_number in possible_alice_numbers:\n        may_number = alice_number - 2\n        mark_number = may_number - 1  # May's number is bigger than Mark's by 1\n        if may_number in all_numbers and mark_number in all_numbers:\n            picked_numbers.add(alice_number)\n            picked_numbers.add(may_number)\n            picked_numbers.add(mark_number)\n            break  # Since we found a valid combination for Alice, May, and Mark, we break the loop\n\n    # Find the numbers not picked\n    not_picked_numbers = all_numbers.difference(picked_numbers)\n\n    # Calculate the product of the not picked numbers\n    product_not_picked = 1\n    for number in not_picked_numbers:\n        product_not_picked *= number\n\n    return product_not_picked\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km/h\n    car_speed = 120  # km/h\n    lead_time = 3  # the van has a 3 hour lead\n    catch_up_speed = car_speed - van_speed  # speed difference\n\n    # Distance the van travels during its 3-hour lead\n    van_lead_distance = van_speed * lead_time\n\n    # Time required for the car to catch up\n    catch_up_time = van_lead_distance / catch_up_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats_options = 5 # 4 hats plus the option of not wearing any\n    shirts_options = 3\n    pants_options = 2\n    skirt_options = 1 # she has to wear the skirt, no other option\n\n    combinations = hats_options * shirts_options * pants_options * skirt_options\n\n    return combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert the recurring decimals to fractions\n    def recurring_decimal_to_fraction(digits, period):\n        # Convert the non-repeating part\n        non_repeating = int(digits) if digits else 0\n        non_repeating_length = len(digits) if digits else 0\n        \n        # Convert the repeating part\n        repeating = int(period)\n        repeating_length = len(period)\n        \n        # Formula to convert repeating decimal to fraction\n        return Fraction(non_repeating * (10**repeating_length - 1) + repeating, (10**repeating_length - 1) * 10**non_repeating_length)\n    \n    # 0.0101... = 0 + 0.010101...\n    decimal_fraction = recurring_decimal_to_fraction(\"\", \"01\")\n    \n    # Calculate the product of the fraction with itself\n    product_fraction = decimal_fraction * decimal_fraction\n    \n    # The number of digits in one repetend is the same as the denominator's number of digits\n    ans = len(str(product_fraction.denominator))\n    \n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    time_a = 12  # time for printer A to print 300 pages in minutes\n    time_b = 10  # time for printer B to print 300 pages in minutes\n    total_time = 30  # total printing time in minutes\n\n    rate_a = 300 / time_a  # rate of printer A (pages per minute)\n    rate_b = 300 / time_b  # rate of printer B (pages per minute)\n\n    pages_printed = (rate_a + rate_b) * total_time\n\n    return int(pages_printed)\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    # hundreds place is the greatest 1-digit number, which is 9\n    hundreds_place = 9\n    \n    # the tens and ones place add up to 15 and the number is even\n    # so the ones place has to be an even number\n    for tens_place in range(1, 10): # tens place can be from 1 to 9\n        for ones_place in range(0, 10, 2): # ones place can be 0, 2, 4, 6, or 8\n            if tens_place != ones_place and tens_place + ones_place == 15:\n                # combine digits to form the number\n                return hundreds_place * 100 + tens_place * 10 + ones_place\n                \nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    items = symbols('items')\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n\n    # apples = 2/3 of total items\n    # bananas = 1/9 of total items\n    # lemons = rest of the items = 1 - apple_fraction - bananas_fraction\n    lemons_fraction = 1 - apples_fraction - bananas_fraction\n    # 2/3 * items - lemons = 12 (given that there are 12 more apples than lemons)\n    # lemons = 2/3 * items - 12\n\n    equation = Eq((apples_fraction * items) - (lemons_fraction * items), 12)\n    solutions = solve(equation, items)\n\n    return int(lemons_fraction * solutions[0])\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if day is valid for the month\n            if (month == 2 and day > 28) or (month in [4, 6, 9, 11] and day > 30):\n                continue\n            # Format the date\n            date = f\"{day:02d}/{month:02d}/2019\"\n            # Count the number of '3's in the date\n            count += date.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    number = 7 + (2 * 10) + (3 * 100)\n    return number\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbols for the number of durian, chocolate, and strawberry puffs\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # Equation for the ratio of durian to chocolate to strawberry puffs\n    ratio_eq = Eq(durian / chocolate, 3 / 4) & Eq(chocolate / strawberry, 4 / 2)\n\n    # Equation for the total sales\n    total_sales_eq = Eq(5 * durian + 3 * chocolate + 4 * strawberry, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_sales_eq), (durian, chocolate, strawberry))\n\n    # Find the amount collected from the sale of durian puffs\n    amount_collected_durian = 5 * solutions[durian]\n\n    return amount_collected_durian\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon')\n\n    # Conditions\n    conditions = [\n        A > C,\n        A < D,\n        B < Xavier,\n        D == 5 * Yvonne,\n        Zachary + 2 == Waylon - XWaylon,\n        Zachary == Yvonne + Xavier,\n    ]\n\n    # Levels are between 1 and 18\n    levels = [\n        (1 <= A) & (A <= 18),\n        (1 <= B) & (B <= 18),\n        (1 <= C) & (C <= 18),\n        (1 <= D) & (D <= 18),\n        (1 <= Zachary) & (Zachary <= 18),\n        (1 <= Yvonne) & (Yvonne <= 18),\n        (1 <= Xavier) & (Xavier <= 18),\n        (1 <= Waylon) & (Waylon <= 18),\n    ]\n\n    # Names and letters are unique\n    uniqueness = [\n        Eq(len({A, B, C, D}), 4),\n        Eq(len({Zachary, Yvonne, Xavier, Waylon}), 4),\n    ]\n\n    # Combine all equations and inequalities\n    all_conditions = conditions + levels + uniqueness\n\n    # Solving the equations\n    solutions = solve(all_conditions, (A, B, C, D, Zachary, Yvonne, Xavier, Waylon), dict=True)\n\n    return solutions\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14 and it's divided into 490 cubes,\n    # each small cube is 1x1x1 in size (7*5*14 = 490, so 1 cube per unit volume).\n    # Only the corners will have exactly three faces painted yellow.\n    # There are 8 corners on a cuboid.\n    # Thus, 8 small cubes will have three faces painted yellow.\n\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = tens_digit * 10 + ones_digit\n            swapped_number = ones_digit * 10 + tens_digit\n            if swapped_number == 3 + original_number / 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191  # 6% interest compounded yearly for 3 years\n    rate_second_period = 1.166  # 8% interest compounded yearly for 2 years\n    final_amount = principal * rate_first_period * rate_second_period\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n    \n    # Equation representing the cost of 5 raisin rolls and 6 donuts\n    equation1 = Eq(5*raisin_roll + 6*donut, 14.70)\n    # Equation representing that each raisin roll costs 3 times as much as a donut\n    equation2 = Eq(raisin_roll, 3*donut)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "from math import gcd\n\ndef solution():\n    # numbers of students from each school\n    a, b, c = 24, 36, 42\n\n    # Find the greatest common divisor of the three numbers\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    # The largest possible number of students in each team\n    return gcd_abc\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the cost of a notebook, p be the cost of a pencil case, and e be the cost of an eraser.\n    n, p, e = symbols('n p e')\n\n    # We have the following equations based on the information given:\n    # 3 notebooks + 4 pencil cases + 5 erasers = $50 (total cost)\n    # 1 notebook + 1 pencil case = $6\n    # 1 pencil case + 1 eraser = $9\n    \n    # Setting up the equations\n    eq1 = Eq(3*n + 4*p + 5*e, 50)\n    eq2 = Eq(n + p, 6)\n    eq3 = Eq(p + e, 9)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3), (n, p, e))\n\n    # We want to find the cost of a pencil case\n    return solutions[p]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let's denote:\n    # a = first term of the arithmetic sequence\n    # d = common difference of the sequence\n\n    # Sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n-1)d)\n\n    # From the problem:\n    # S_9 = 99 => 9/2 * (2a + 8d) = 99\n    # S_27 = 540 => 27/2 * (2a + 26d) = 540\n\n    # We need to find S_16\n\n    # Solve the system of equations for a and d\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    \n    equation1 = Eq(9/2 * (2*a + 8*d), 99)\n    equation2 = Eq(27/2 * (2*a + 26*d), 540)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Use the found values of a and d to compute S_16\n    a_value = solutions[a]\n    d_value = solutions[d]\n\n    S_16 = 16/2 * (2*a_value + (16-1)*d_value)\n\n    return S_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Number of total terms when all 12s are written is\n    # 1 + 2 + 3 + ... + 11 + 12 = (12*(12+1))/2 = 78\n    \n    # Since we are looking for the median in an even number of terms (78 terms),\n    # the median will be the average of 39th and 40th term.\n    \n    # Let's find out which number is at the 39th and 40th position.\n    # 1 is written 1 time, 2s are written 2 times, ..., n times for number n.\n    # To find the number that occupies the 39th and 40th position,\n    # we sum the counts until we hit or pass the target position: 39 and 40.\n    \n    sum_counts = 0\n    for n in range(1, 13):\n        sum_counts += n\n        if sum_counts >= 39:\n            first_median = n\n            if sum_counts >= 40:\n                second_median = n\n                break\n    \n    median = (first_median + second_median) / 2\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    perm = permutations(digits)\n    num_diff_numbers = len(list(perm))\n    return num_diff_numbers\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    ans = 0\n    for i in range(7, 41):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # In each group of 4 teams, a single round-robin tournament has each team playing each other once.\n    # Therefore, in each group, there are C(4, 2) games, which is number of ways two teams can be chosen from four.\n    games_per_group = (4 * 3) // 2  # Combination of 4 choose 2, simplified to 4*3/2.\n    \n    # There are 8 groups.\n    group_games = 8 * games_per_group\n    \n    # In the knockout round, there are 16 teams, and they play in the following way:\n    # Round of 16, Quarterfinals, Semifinals, Third place match, and Final.\n    # For each round except the third place match, the number of games is half the number of teams.\n    knockout_games = 16 // 2 + 8 // 2 + 4 // 2 + 2 // 2  # Sum of games for each round.\n    \n    # There's an additional game for third place.\n    third_place_game = 1\n    \n    # Total number of games.\n    total_games = group_games + knockout_games + third_place_game\n    \n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Calculate the least common multiple (LCM) of the two flashing frequencies\n    from math import gcd\n    \n    red_flash_rate = 4 # red light flashes per minute\n    green_flash_rate = 6 # green light flashes per minute\n    \n    # Calculate Greatest Common Divisor (GCD) first\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n    \n    # Calculate how many times they flash together in one minute\n    flashes_per_minute = lcm / red_flash_rate\n    \n    # Calculate how many times they flash together in one hour\n    flashes_per_hour = flashes_per_minute * 60\n    \n    return int(flashes_per_hour)\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    num = symbols('num')\n    equation = Eq(3 * num + 1, 22)\n    solution = solve(equation, num)\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_paintings = 40\n    landscapes = int(0.4 * total_paintings)\n    french_landscapes = 25\n    \n    still_lifes = total_paintings - landscapes\n    non_french_paintings = total_paintings - french_paintings\n    non_french_landscapes = landscapes - french_landscapes\n    \n    non_french_still_lifes = still_lifes - (french_paintings - french_landscapes)\n    \n    return non_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # total volume of rose drink\n    max_volume_per_glass = total_volume // 9  # greatest volume of drink in each glass\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    # Calculate the total amount of rice in the original dogfood mixes\n    rice_in_first_mix = 100 * 0.50\n    rice_in_second_mix = 400 * 0.80\n\n    # Calculate the total weight of the new mixture\n    total_weight = 100 + 400\n\n    # Calculate the total amount of rice in the new mixture\n    total_rice = rice_in_first_mix + rice_in_second_mix\n\n    # Calculate the concentration of rice in the new mixture\n    rice_concentration = total_rice / total_weight\n\n    return rice_concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_meters_per_minute = 24\n    seconds = 300\n    meters_per_second = speed_meters_per_minute / 60\n    distance = meters_per_second * seconds\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five = str(total_sum)[-5:]\n    ans = sum(int(digit) for digit in last_five)\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # Total units of hay required for 12 horses for 15 days\n    total_hay_units = 12 * 15\n    # Total units of hay required for 1 horse for 1 day\n    hay_per_horse_day = total_hay_units / (12 * 15)\n    # Total units of hay required for 20 horses for x days\n    # total_hay_units = 20 * x, where x is the number of days 20 horses can be fed\n    days_for_20_horses = total_hay_units / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(0, 10):\n                    original_number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    new_number = hundreds * 1000 + tens * 100 + ones * 10 + thousands\n                    if new_number - original_number == 4707:\n                        return original_number\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    desired_sum = 48\n\n    years_later = (desired_sum - (oliver_current_age + lin_current_age)) // 2\n\n    return years_later\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_in_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    multiple = 35\n    while True:\n        if str(multiple).endswith('35') and sum(int(digit) for digit in str(multiple)) == 35:\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    equation = Eq(4 * y + 20 + 2 * (y - 5), 8 * y)\n    \n    solution_y = solve(equation, y)\n\n    return solution_y[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = [(year % 4 == 0) for year in range(1904, 2000, 4)].count(True)\n    non_leap_years = 99 - leap_years\n    days_in_leap_years = leap_years * 366\n    days_in_non_leap_years = non_leap_years * 365\n\n    # Plus one because we are counting the first day of 1901\n    total_days = days_in_leap_years + days_in_non_leap_years + 1\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_money = 100\n    deposit = 10\n    spend = 8\n\n    net_change_per_period = deposit - spend\n    number_of_periods = total_days // 2\n\n    money_after_periods = initial_money + number_of_periods * net_change_per_period\n\n    if total_days % 2 == 1:\n        money_after_periods += deposit\n\n    return money_after_periods\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    numbers_less_than_100 = range(1, 100)\n    divisible_by_3 = set(filter(lambda x: x % 3 == 0, numbers_less_than_100))\n    divisible_by_7 = set(filter(lambda x: x % 7 == 0, numbers_less_than_100))\n    divisible_by_3_or_7 = divisible_by_3.union(divisible_by_7)\n    not_divisible_by_3_or_7 = [num for num in numbers_less_than_100 if num not in divisible_by_3_or_7]\n    return len(not_divisible_by_3_or_7)\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest_number\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12\n    # formula for summing an arithmetic sequence: n/2 * (first_term + last_term)\n    strikes = n * (n + 1) // 2\n    return strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total value of ten-pence coins in pence\n    number_of_coins = total_pence // 10  # calculate the total number of ten-pence coins\n\n    total_weight = weight_per_coin * number_of_coins  # total weight of all coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # let's denote the number of buttons James has as 'j' and Nina as 'n'\n    # We have two equations based on the information given:\n    # 1. j + n = 22 (total number of buttons is 22)\n    # 2. j + 4 = n - 4 (after Nina gives 4 buttons to James, they have the same number)\n    \n    # by resolving these two equations, we can find the value of n (the number of buttons Nina originally has)\n    # adding the second equation to the first one, we get 2j + 8 = 18\n    # then we divide by 2 to get j and then we calculate n from the first equation\n    \n    j = (22 - 8) // 2  # using integer division\n    n = 22 - j\n    \n    return n\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Constants and angle conversion\n    initial_velocity = 10  # meters per second\n    angle_radians = math.radians(37)  # conversion to radians\n\n    # Gravity acceleration\n    g = 9.81  # meters per second squared\n\n    # Equations for projectile motion without friction\n    # Calculate the height using the vertical component of the initial velocity (v * sin(angle))\n    # h = (v^2 * sin^2(angle)) / (2 * g)\n    h = (initial_velocity ** 2) * (math.sin(angle_radians) ** 2) / (2 * g)\n\n    # Calculate the distance along the ramp using the vertical height (h) and the angle of the ramp\n    # distance = h / sin(angle)\n    distance = h / math.sin(angle_radians)\n\n    return h, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_seat = (total_candies + start_seat - 1) % total_children\n    last_seat = last_seat if last_seat != 0 else total_children\n\n    return last_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    return sum([9, 12, 17, 18, 21, 23])\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n    total_marks = 23\n\n    # Since every question Valerie answered will lead to a change in her score by either 5 or -2.\n    # Let x be the number of correct answers and y be the number of incorrect answers.\n    # We can form the system of equations:\n    # 5x - 2y = 23 - because for every correct answer Valerie gets 5 points and for every wrong answer she loses 2 points\n    # x + y = 6 - because she answered a total of 6 questions\n    # We can solve these equations for x and y.\n\n    # Rewrite the equations to be in terms of x and eliminate y:\n    # x + y = 6 => y = 6 - x\n    # So, replacing y in the first equation we get:\n    # 5x - 2(6 - x) = 23 => 5x - 12 + 2x = 23 => 7x = 35 => x = 5\n    # Valerie answered 5 questions correctly.\n\n    correct_answers = (total_marks + marks_deducted_for_wrong * total_questions) // \\\n                      (marks_for_correct + marks_deducted_for_wrong)\n\n    return correct_answers\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_in_match = 4\n    matches = 0\n\n    while total_players > 1:\n        matches += total_players // players_in_match\n        total_players = total_players // players_in_match\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "网络故障，请重试"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    return sum(numbers)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Let's call Alice's house number ABCD\n    # In which A, B, C, D are digits from 0-9 and A cannot be 0 because it's a 4-digit number\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    original_number = A * 1000 + B * 100 + C * 10 + D\n                    new_number = B * 1000 + C * 100 + D * 10 + A\n                    if new_number - original_number == 4707:\n                        return original_number\n    return None\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Consider the worst-case scenario with the pigeonhole principle.\n    # Sheila needs to take out 3 blue balls, 3 orange balls and 2 yellow balls\n    # without completing a group of 4 of the same color.\n    \n    # Worst case scenario for each color before getting a group of 4 balls is 3.\n    worst_case_blue = 3\n    worst_case_orange = 3\n    worst_case_yellow = 2  # Only 2 yellow balls in total.\n\n    # Having taken out the worst case scenario for each, the next ball ensures\n    # she completes a group of 4 of one color.\n    # Then, to ensure a second group of 4 of the same color, she needs to repeat\n    # the process taking into account she already has 1 group of 4.\n\n    # She could be left with 1 blue, 1 orange and 2 yellow.\n    # Hence, she needs to take 1 more of blue and orange each and both yellows to ensure\n    # she is at the worst case scenario for the second group.\n    additional_balls_for_second_group = worst_case_blue + worst_case_orange\n\n    # Next ball will complete the second group of 4 balls of the same color.\n    balls_for_two_groups = (worst_case_blue + worst_case_orange + worst_case_yellow +\n                            additional_balls_for_second_group + 1)\n\n    return balls_for_two_groups\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    cheese_weight = 6\n    total_weight = 22\n    number_of_flour_bags = 4\n\n    flour_bags_weight = total_weight - cheese_weight\n    weight_per_flour_bag = flour_bags_weight / number_of_flour_bags\n    \n    return weight_per_flour_bag\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Let's denote the n-th term of the sequence as a_n, the common difference as d,\n    # and the first term as a_1.\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2*a_1 + (n-1)*d)\n    # We have two equations based on the problem statement:\n    # S_9 = 72 --> 9/2 * (2*a_1 + (9-1)*d) = 72\n    # S_23 = 736 --> 23/2 * (2*a_1 + (23-1)*d) = 736\n    \n    # From the equation S_9 = 72, we get:\n    # 2*a_1 + 8*d = 72 * 2 / 9\n    # a_1 + 4*d = 16  [Equation 1]\n    \n    # From the equation S_23 = 736, we get:\n    # 2*a_1 + 22*d = 736 * 2 / 23\n    # a_1 + 11*d = 64  [Equation 2]\n    \n    # Subtracting Equation 1 from Equation 2, we get:\n    # (a_1 + 11*d) - (a_1 + 4*d) = 64 - 16\n    # 7*d = 48\n    # d = 48 / 7\n\n    d = 48 / 7\n    \n    # Substitute the value of d back into Equation 1 to get the value of a_1:\n    # a_1 + 4*(48/7) = 16\n    # a_1 = 16 - (4*48)/7\n    # a_1 = 16 - 192/7\n    # a_1 = (112 - 192) / 7\n    # a_1 = -80 / 7\n\n    a_1 = -80 / 7\n\n    # Now, to find S_16, we use the sum formula:\n    # S_16 = 16/2 * (2*a_1 + (16-1)*d)\n    # S_16 = 8 * (2*a_1 + 15*d)\n    \n    S_16 = 8 * ((2 * a_1) + 15 * d)\n    \n    return S_16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Given that Richard has £14\n    richard_money_pounds = 14\n\n    # Assuming the exchange rate information and CD price in St Petersburg is given\n    # For this scenario, I'm considering hypothetical values since they are not provided in the question\n\n    # These values should be based on the actual or given information\n    exchange_rate_rubles_per_pound = 100  # 1 pound = 100 rubles (hypothetical)\n    cd_price_st_petersburg_rubles = 700   # price of a CD in St Petersburg is 700 rubles (hypothetical)\n\n    # Convert Richard's money to Russian rubles\n    richard_money_rubles = richard_money_pounds * exchange_rate_rubles_per_pound\n\n    # Calculate how many CDs Richard could buy in St Petersburg\n    num_cd = richard_money_rubles // cd_price_st_petersburg_rubles\n\n    return num_cd\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Check all ages to find a match for the conditions\n    for age in range(100):\n        if (age - 3)**0.5 % 1 == 0:        # Age was a square 3 years ago\n            if isprime(age + 1):           # Age will be a prime next year\n                if (age + 12)**(1/3) % 1 == 0:  # Age will be a cube in 12 years\n                    if age in [28, 39, 52, 84]:  # Check if age is one of the options\n                        return age  # Uncle Isaac's current age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Since we want to ensure that Bart gets 2 M&Ms of different colors,\n    # the worst-case scenario would be taking all of one color plus one more.\n\n    # If we take all of one color, the worst case is taking all 5 brown ones.\n    worst_case_brown = 5\n\n    # Then Bart would need to take at least 1 more from the other colors to guarantee\n    # a different color M&M. Since we don't know which color it will be, we add 1.\n    # The +1 represents any single M&M of the remaining two colors.\n    worst_case_brown_plus_one = worst_case_brown + 1  # 5 brown + 1 other color\n\n    return worst_case_brown_plus_one\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio between Andrew's and Bernice's speed can be derived when Andrew is at level 5 (Bernice at level 3)\n    Andrew_Bernice_speed_ratio = 5 / 3\n\n    # Ratio between Bernice's and Cassandra's speed can be derived when Bernice is at level 6 (Cassandra at level 10)\n    Bernice_Cassandra_speed_ratio = 6 / 10\n\n    # Combine those two ratios to find Andrew's to Cassandra's speed ratio\n    Andrew_Cassandra_speed_ratio = Andrew_Bernice_speed_ratio * Bernice_Cassandra_speed_ratio\n\n    # When Cassandra is at level 19, we can find where Andrew will be by keeping the same ratio\n    Andrew_level_when_Cassandra_19 = 19 * Andrew_Cassandra_speed_ratio\n\n    return int(Andrew_level_when_Cassandra_19)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    # Define the new operation as a function to use it easily\n    def vee_operation(a, b):\n        return a * b + a + b\n\n    # Given equation: 2 vee (x vee 4) = 59\n    # We need to find x such that the equation holds true\n    \n    # Our goal is to solve for x:\n    # First we take a range of possible values for x to be checked\n    for x in range(-100, 100):\n        # Check if the result of the vee operation for 2 and (x vee 4) equals 59\n        if vee_operation(2, vee_operation(x, 4)) == 59:\n            return x  # x is the correct value that satisfies the equation\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    total_digits = 43\n    \n    # Find the total number of complete repetitions of the pattern\n    complete_repetitions = total_digits // len(pattern)\n    \n    # Find the number of remaining digits after the complete repetitions\n    remaining_digits = total_digits % len(pattern)\n    \n    # Calculate the sum of digits in the complete repetitions\n    sum_complete_repetitions = sum(int(digit) for digit in pattern) * complete_repetitions\n    \n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    # The total sum of all digits\n    total_sum = sum_complete_repetitions + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # Convert minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres = kilometres * 100000  # as 1 km = 100,000 cm\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_initial = 40 / 60\n    \n    # Assume the distance between Town X and Y is D km\n    # For Shafur\n    speed_shafur = 54  # in km/h\n    # For Samuel\n    speed_samuel = 66  # in km/h\n    \n    # Distance covered by Samuel before turning back\n    distance_initial_samuel = speed_samuel * time_initial\n\n    # As they reach the same time, the time taken by Shafur is Samuel's total time\n    # Therefore, Shafur covered distance D in the same time that Samuel covered D + 2 * distance_initial_samuel\n    # Let's denote the time as T hours,\n    # Shafur: Speed = Distance/Time --> 54 = D / T -> D = 54T\n    # Samuel: Speed = Distance/Time --> 66 = (D + 2 * distance_initial_samuel) / T -> D = 66T - 2 * distance_initial_samuel\n    \n    # Now, we can equate both expressions for D\n    # 54T = 66T - 2 * distance_initial_samuel\n    # Solving for T yields\n    T = 2 * distance_initial_samuel / (66 - 54)\n    \n    # Now find the distance D using Shafur's travel\n    D = 54 * T\n\n    return D\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages_sum = 4 + 7 + 12\n\n    years = 0\n    while grandsons_ages_sum != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages_sum += 3\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one chair and one table\n    cost_chair, cost_table = symbols('cost_chair cost_table')\n    \n    # Equation 1: total cost for chairs and tables\n    equation1 = Eq(9 * cost_chair + 4 * cost_table, 504)\n    \n    # Equation 2: cost relationship between one table and three chairs\n    equation2 = Eq(cost_table, 3 * cost_chair)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_chair, cost_table))\n    \n    return solutions[cost_chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        ten_p = 40 - five_p\n        if ten_p % 10 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        term += difference\n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "from itertools import product\n\ndef solution():\n    for num in range(100, 1000):\n        digits = [int(digit) for digit in str(num)]\n        product_of_digits = 1\n        for d in digits:\n            product_of_digits *= d\n        if 100 <= product_of_digits <= 999:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    vases_needed = -(-flowers // vase_capacity)  # Ceiling division\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit_weight = 416\n    afternoon_fruit_weight = 248\n    difference = morning_fruit_weight - afternoon_fruit_weight\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, getcontext\n\n    # Set precision high enough for recurring decimals\n    getcontext().prec = 9\n    \n    # First expression\n    first_expr_top = Fraction(7) / Decimal('-3.333333333')  # 7 divided by -3.3 recurring\n    first_expr_bottom = Decimal('-0.027') ** (Fraction(1, 3))  # Cube root of -0.027\n    first_expr = first_expr_top / first_expr_bottom\n\n    # Second expression\n    second_expr_top = 2 ** 3 / 4 ** 2  # 2 cubed divided by 4 squared\n    second_expr_bottom = Decimal('0.125') * (Decimal('1.8') - (Decimal('0.2') * 7))  # 0.125 times the difference\n    second_expr = second_expr_top / second_expr_bottom\n\n    # Third expression\n    third_expr_first_part = Decimal('0.1') / Decimal('0.142857142857')  # 0.1 divided by 0.142857 recurring (1/7)\n    third_expr_second_part = 2 * Decimal('0.3')  # 2 times 0.3\n    third_expr = third_expr_first_part + third_expr_second_part\n\n    # Calculate the answer\n    ans = first_expr + second_expr - third_expr\n    \n    # Return the answer as a float\n    return float(ans)\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    # Find the first multiple of 3 that is greater than or equal to 38\n    if 38 % 3 == 0:\n        first_multiple = 38\n    else:\n        first_multiple = (38 // 3 + 1) * 3\n    \n    # Find the last multiple of 3 that is less than or equal to 81\n    last_multiple = 81 - (81 % 3)\n    \n    # Calculate the number of multiples of 3 in the range\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Sum of the sequence from 3 to 10 (inclusive)\n    sum_to_10 = sum(range(3, 11))\n    \n    # Sum of the sequence from 3 to 6 (inclusive), excluding 10\n    sum_from_3_to_6_excl_10 = sum(range(3, 7))\n\n    # The sum of the total sequence is twice the sum from 3 to 10, \n    # minus the sum from 3 to 6 (excluding the number 10)\n    total_sum = 2 * sum_to_10 - sum_from_3_to_6_excl_10\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud.\n    equation1 = Eq(pip, bud + 50)\n\n    # After spending, Pip has 20% and Bud has 25% of their money left.\n    # 20% of Pip's money equals 6/11 of the total leftover money (6 parts out of 6+5)\n    # 25% of Bud's money equals 5/11 of the total leftover money (5 parts out of 6+5)\n    # Setting up the ratio equation: 0.20*pip = (6/11) * (0.20*pip + 0.25*bud)\n    # Simplifying the ratio: 0.20*pip = (6/11) * (0.20*(bud + 50) + 0.25*bud)\n    equation2 = Eq(0.20 * pip, (6 / 11) * (0.20 * (bud + 50) + 0.25 * bud))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones = 78\n    february_sold = (remaining_phones * 2) - 13\n    january_sold = february_sold + 22\n    initial_phones = (january_sold * 2) + 22\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    return 4\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    difference = 50\n\n    pencils = (total_items - difference) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Total amount spent from January to April\n    jan_to_apr = 500 * 4\n    \n    # Total amount spent from May to July\n    may_to_jul = 300 * 3\n    \n    # Total amount spent in August and September\n    aug_to_sep = 400\n    \n    # Total amount spent from October to December\n    oct_to_dec = 300 * 3\n    \n    # Total amount spent the whole year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Average spent per month over the whole year\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n    \n    total_apples = (boxes * apples_per_box) + apples_from_bud\n    \n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "网络故障，请重试"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            count_23 = count  # Capturing the position when '3' appears in '23'\n\n    return count_23\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1\n\n    return games_played\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z be the final number of marbles for Anna, Betsy, and Charlene respectively.\n    x, y, z = symbols('x y z')\n\n    # According to the problem, the final ratio is given as 2:5:7\n    ratio_equation1 = Eq(x, 2)\n    ratio_equation2 = Eq(y, 5)\n    ratio_equation3 = Eq(z, 7)\n\n    # The sum of final marbles is given as the sum of initial marbles minus transfers\n    sum_equation = Eq(x + y + z, 168 - 15 + 8)\n\n    # Betsy gave 8 marbles to Anna which affects the the final counts\n    transfer1_eq = Eq(x - 8, y + 15)\n    \n    # Charlene gave 15 marbles to Betsy which affects the final counts\n    transfer2_eq = Eq(y + 15 - 8, z)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation1, ratio_equation2, ratio_equation3, sum_equation, transfer1_eq, transfer2_eq), (x, y, z))\n\n    # Calculate Betsy's initial number of marbles before transfers\n    betsy_initial = solutions[y] + 15 + 8  # Add the marbles she was given minus the marbles she gave away\n\n    return betsy_initial\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factors of 2016\n    factors = factorint(2016)\n    \n    # Extract exponents (multiset of prime factors)\n    multiset = []\n    for prime, exponent in factors.items():\n        multiset.extend([prime] * exponent)\n\n    # Generate all possible distinct combinations of four numbers that multiply to 2016\n    from itertools import permutations\n\n    # Determine all unique permutations of the multiset of prime factors\n    distinct_combinations = set(permutations(multiset, 4))\n\n    # Filter out combinations where the ages are not less than 10\n    valid_combinations = []\n    for combination in distinct_combinations:\n        ages = [1, 1, 1, 1]\n        for factor in combination:\n            for i in range(4):\n                # Multiply factors into ages ensuring the age is less than 10\n                # If multiplied age would be 10 or over, move to next age\n                if ages[i] * factor < 10:\n                    ages[i] *= factor\n                    break\n        # Check if the product of ages equals 2016 and if all ages are distinct\n        if sum(ages) < 40 and len(set(ages)) == 4 and all(age < 10 for age in ages):\n            valid_combinations.append(ages)\n\n    # Find the unique sums of ages for all valid combinations\n    sums = {sum(comb) for comb in valid_combinations}\n\n    # Since the ages are distinct and all children are under 10, the answer is unique\n    ans = max(sums)\n\n    return ans\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_left = 3\n    from_right = 7\n    from_front = 7\n    from_back = 4\n    \n    rows = from_front + from_back - 1\n    columns = from_left + from_right - 1\n    \n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, let the total age of two dogs be represented by T.\n    # So, T = 10 (combined age of two dogs four years ago)\n    T = 10\n    \n    # In each year following, each dog gets 1 year older, so for 2 dogs that's 2 years together.\n    # Four years have passed, so we add 4 * 2 years to the total age.\n    T += 4 * 2\n    \n    # We are asked to find out the combined age in 2 years.\n    # So we add another 2 * 2 years to account for two more years.\n    T += 2 * 2\n    \n    return T\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    ten_pence = symbols('ten_pence')\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n\n    # Equation: total value in pence should equal £15.75\n    equation = Eq((5 * five_pence) + (10 * ten_pence) + (20 * twenty_pence), 1575)\n\n    # Solve the equation\n    solutions = solve(equation, ten_pence)\n\n    # Calculate the number of 20 pence coins\n    num_twenty_pence = 2 * solutions[0]\n\n    return int(num_twenty_pence)\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    # Let 'b' be the number of boys and 'g' be the number of girls in the family\n    from sympy import symbols, Eq, solve\n    \n    # Create symbolic variables for boys and girls\n    b, g = symbols('b g')\n    \n    # Since each boy has as many sisters as brothers, the number of sisters (which is the number of girls minus one) \n    # is equal to the number of brothers (which is the number of boys minus one).\n    equation1 = Eq(b - 1, g - 1)\n    \n    # Since each girl has half as many sisters as brothers,\n    # the number of sisters (which is the number of girls minus one) is half the number of brothers (which is the number of boys).\n    equation2 = Eq(g - 1, b / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Total number of children is the sum of boys and girls\n    total_children = solutions[b] + solutions[g]\n    \n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Speed in the first 30 minutes\n\n    # Distance = Speed * Time, converting minutes to hours by dividing by 60\n    distance_first_30 = x * (30 / 60)\n    distance_second_30 = (x - 20) * (30 / 60)\n    distance_last_30 = (x + 10) * (30 / 60)\n\n    # Sum of distances should be equal to the total distance\n    total_distance = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    solution = solve(total_distance, x)\n    \n    return solution[0]  # Only one solution is expected\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_ratio = 1 - 3/5\n    remaining_weight = 60  # grams\n    original_weight = remaining_weight / remaining_ratio\n    return original_weight\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_number = 96\n    base6_number = ''\n    \n    while base10_number > 0:\n        remainder = base10_number % 6\n        base10_number //= 6\n        base6_number = str(remainder) + base6_number\n    \n    return base6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "from itertools import combinations\n\ndef solution():\n    total_apples = 27\n    children = 5\n    # As we need at least one apple per child and each child\n    # must have a different number of apples, we start with\n    # the smallest distribution that satisfies these constraints\n    # Example: 1, 2, 3, 4, ..., (children-1)\n    # Then add the remaining apples to the largest number\n    min_distribution = sum(range(1, children))\n    remaining_apples = total_apples - min_distribution\n    \n    # Since we're asked for the least possible number for the child\n    # with the most apples, this child will get the (children-1)\n    # apples from the initial distribution plus all the remaining apples\n    least_possible_for_most = (children - 1) + remaining_apples\n    \n    return least_possible_for_most\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    total_bill = number_of_people * total_cost_per_person\n    total_tip = total_bill * tip_percentage\n    total_payable = total_bill + total_tip\n    note_given = 50\n    \n    change = note_given - total_payable\n    \n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    # There are 60 seconds in a minute\n    return 60\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    distance_per_day = 4 - 2\n    well_depth = 10 - 4  # We subtract the day's progress on the final day\n\n    days = (well_depth + distance_per_day - 1) // distance_per_day\n    \n    # We need to add one more day for the snail to climb out on the last day\n    days += 1\n\n    return days\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    total_sum = 25\n    num_numbers = 7\n    all_numbers = range(1, total_sum)\n    for combo in combinations(all_numbers, num_numbers):\n        if sum(combo) == total_sum and len(set(combo)) == num_numbers:\n            ways.append(combo)\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic chooses three bars at random,\n    # and is not found in two of them, there is a 100% chance\n    # they are at the third bar (assuming they must be at one of the bars).\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (5 / 6) * base_number\n    return result\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows = symbols('cows')\n    # Total amount of grass the pasture can grow is the same regardless the number of cows\n    # Let G be the total amount of grass the pasture can grow in a given time\n\n    # 120 cows eat up G in 12 weeks: 12 * 120 = G\n    # 150 cows eat up G in 8 weeks: 8 * 150 = G\n    # We want to find how many cows (x) can eat up G in 6 weeks: 6 * x = G\n\n    # Since G is the same for both scenarios, we can set the two equations equal to each other and solve for x\n    equation1 = Eq(12 * 120, 6 * cows)\n    equation2 = Eq(8 * 150, 6 * cows)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), cows)\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To ensure a win, Jason needs to play in such a way that he leaves a multiple of 4 marbles for Belinda\n    # After each of Jason's turns because Belinda can take at most 3 marbles.\n    # Working backwards from 26, if Jason leaves Belinda with 25, 24, or 23 marbles,\n    # Belinda can take 3, 2, or 1 marble(s) respectively, leaving Jason with a multiple of 4.\n    # Hence, Jason should take 2 marbles in his first turn to leave 24 marbles,\n    # which is a multiple of 4. Jason can then always take the number of marbles that\n    # keeps the total marbles left as a multiple of 4 after Belinda's turn.\n    # Example sequence: Jason 2, Belinda 3 (Total 21), Jason 1, Belinda 3 (Total 17),\n    # Jason 1, Belinda 3 (Total 13), Jason 1, Belinda 3 (Total 9),\n    # Jason 1, Belinda 3 (Total 5), Jason 1, Belinda 3 (Total 1), Jason wins.\n\n    return 2\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime(\"%d/%m/%Y\")\n    \nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost_7_pencils_7_markers = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return int(total_cost_7_pencils_7_markers)\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    # Each volunteer plants 4 trees, 5 trees left.\n    equation1 = Eq(volunteers * 4 + 5, trees)\n\n    # Each volunteer plants 7 trees, one volunteer has nothing to plant.\n    equation2 = Eq(trees, (volunteers - 1) * 7)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions[volunteers], solutions[trees]\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 55\n    \n    # Start with an assumption that there's at least one layer of boys and one of girls\n    layer = 1\n    while True:\n        boys = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        girls = (layer * 2) ** 2 - ((layer - 1) * 2) ** 2\n\n        if boys - girls == boys_more_than_girls:\n            total_students = (layer * 2 + 1) ** 2\n            break\n        \n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # Let x be the initial number of stickers in Bag A\n    # Then 270 - x will be the initial number of stickers in Bag B\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation representing the total number of stickers\n    equation1 = Eq(x + (270 - x), 270)\n    # After moving 56 stickers from Bag A to Bag B, Bag A has x-56 stickers\n    # Bag B has (270-x) + 56 stickers\n    # The ratio of stickers in Bag B to Bag A is 3:2\n    equation2 = Eq((270 - x + 56) / (x - 56), 3/2)\n\n    # Solving the equations to find x\n    solution = solve((equation1, equation2), (x))\n  \n    return solution[x]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # We have the proportion 10/x = 14/21.\n    # Solve for x by cross multiplying\n    x = 10 * 21 / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    first_term = 5\n    common_difference = 6\n    current_term = first_term\n\n    # Since the sequence is arithmetic, each term increases by the common difference.\n    # We need to find out the number that should come after 41.\n    \n    # Calculate the term number for 41 in the sequence\n    term_number = (41 - first_term) // common_difference + 1\n    \n    # Calculate the next term by adding one more term to the term number and\n    # calculate the value of that term\n    next_term = first_term + common_difference * term_number\n    \n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "import math\n\ndef solution():\n    total_children = 74\n    bars_per_packet = 8\n\n    packets_needed = math.ceil(total_children / bars_per_packet)\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n    \n    num = 2  # Start checking from 2 as 1 is not a perfect number\n    \n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_no = 10\n    last_term = 31\n    common_difference = 28 - 25\n    \n    first_term = last_term - (term_no - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    boxes_needed = (total_cakes + cakes_per_box - 1) // cakes_per_box  # Use ceil division to handle any extra cakes that require an additional box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    sweets_for_sister = 6\n    total_friends = 6\n    sweets_lucy_has = 30\n\n    sweets_given_away = sweets_lucy_has - sweets_for_sister\n    sweets_per_friend = sweets_given_away // total_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2 / 5\n    \n    # Equation representing total muffins before selling\n    equation1 = Eq(lovelle + makayla, total_muffins)\n    \n    # Equation representing equal muffins after selling\n    equation2 = Eq(lovelle - lovelle_sold, makayla - (makayla * makayla_sold_fraction))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variable for initial amount of money Irene had\n    money = symbols('money')\n\n    # Equation representing the total cost of the book and the bag\n    equation = Eq((1/4)*money + (2/7)*money, 225)\n\n    # Solve for the amount of money Irene had initially\n    solution = solve(equation, money)\n\n    return solution[money]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    total = 30\n    count = 0\n    for number in range(1, total):\n        count += 1\n        total -= number\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # We will use the worst case scenario before getting 10 cards of the same color.\n    # This is done by taking just below 10 for each color, i.e.,\n    # 9 from the color with 16 cards,\n    # 8 from color with 12 cards,\n    # 4 (all) from the color with 4 cards, as we cannot take 9 from a color with less than 10 cards\n    # and for 8 cards color, we have to take all 8 because we can't get to 9 neither.\n\n    # So we have 9 + 8 + 4 + 8 = 29\n    # Now, to ensure we have 10 of the same color, we take one more card.\n    # This card will definitely be of the color from which we already have 9 cards.\n\n    return 29 + 1  # The card dealer will take at least 30 cards\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    gap = 1.1\n    number_of_daffodils = 8\n    number_of_gaps = number_of_daffodils - 1\n    total_length = (number_of_gaps * gap) + (2 * 0)  # Daffodil width is considered negligible\n    \n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    num_pieces = 30\n\n    length_per_piece = total_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # Ensure x2 is greater than x1\n            x3 = 9 - (x1 + x2)\n            if x3 > x2:  # Ensure x3 is greater than x2 and x1\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    jane_drinks = total_juice / (1 + 1.5)\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48  # meters\n    speed = 8  # meters per minute\n    minutes = distance // speed\n    \n    # Checking if Auntie Lina's calculation is correct\n    if minutes == 5:\n        return True\n    else:\n        # Returns the correct number of minutes\n        return minutes\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways_with_0_boys = comb(5, 4)\n    total_ways = comb(12, 4)\n    ways_with_at_least_1_boy = total_ways - total_ways_with_0_boys\n\n    return ways_with_at_least_1_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = (1/4) * 16\n    one_half_of_x = (1/2) * one_fourth_of_16\n    ans = one_half_of_x * 2\n    return ans\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30  # Pears and strawberries are considered fruits\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let's assume x is the total amount of money Bud had initially\n    # Then, she spent x/4 on a book\n    # She had 3x/4 of the money left\n    # She spent 2/5 of the remaining money on a bag, which cost £60\n    # The equation for the cost of the bag can be written as (3x/4) * (2/5) = 60\n    \n    # Simplify the equation to find x\n    x = 60 * 5 / 3 * 4 / 2\n\n    return x\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits = 157\n    total_pages = 0\n    digit_usage = 0\n\n    # For each digit length (1 for 1-9, 2 for 10-99, 3 for 100-999, etc.)\n    for digit_length in range(1, digits + 1):\n        # Calculate the number of pages that can have this digit length\n        start_page = 10**(digit_length - 1)\n        end_page = (10**digit_length) - 1\n        page_count = end_page - start_page + 1\n        \n        # Determine the number of digits needed for those pages\n        required_digits = page_count * digit_length\n        \n        # If adding these pages would exceed the total digit usage, \n        # find the exact number of pages that can be added.\n        if digit_usage + required_digits > digits:\n            remaining_digits = digits - digit_usage\n            additional_pages = remaining_digits // digit_length\n            total_pages += additional_pages\n            break\n        else:\n            # Add the pages and their digit usage if it doesn't exceed the total\n            total_pages += page_count\n            digit_usage += required_digits\n            \n    return total_pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate over odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # The total distance covered by peach trees is equal to the distance between trees\n    # multiplied by the number of gaps between the trees (which is one less than the number of trees)\n    # plus the width of one tree (assuming the length of a tree is negligible, we take it as 0)\n    total_distance_peach_trees = (41 - 1) * 3\n\n    # Now we need to calculate the number of lamp posts. Since there is one at each end,\n    # we start with 2 lamp posts, and then add the number of lamp posts in between.\n    # The number of lamp posts in between is the total distance divided by the distance between lamp posts.\n    number_of_lamp_posts = 2 + (total_distance_peach_trees // 8)\n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 72 + 1):\n        if 72 % unit_price == 0:  # check if it's an integer price\n            total_price = unit_price * 72\n            if str(total_price)[1:4] == '679':\n                return unit_price\n    return None\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    candies = symbols('candies')\n    students_B = symbols('students_B')\n\n    # Class A needs 20 more candies for 4 each, so total candies is 4 * 2 * students_B + 20\n    # Class B has 16 candies left over for 6 each, so total candies is 6 * students_B - 16\n    # Since the number of candies is the same, we can equate the two expressions.\n    eq1 = Eq(4 * 2 * students_B + 20, candies)\n    eq2 = Eq(6 * students_B - 16, candies)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (candies, students_B))\n\n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40          # in meters per second\n    \n    time = train_length / speed  # time in seconds\n    \n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i % 10 + i // 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    # Let p be the number of potted plants\n    # Given that there are 21 intervals, and there is a potted plant on either side of each interval\n    # therefore, the number of potted plants is one more than the number of intervals\n    p = 21 + 1\n    return p\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remainder = total_savings - spent_on_dvd\n    spent_on_book = remainder * 0.25\n    left = remainder - spent_on_book\n    return left\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    for year in range(3):\n        # Rabbits multiply by 3 every year\n        rabbits *= 3\n        # Wolves eat half the population of rabbits\n        rabbits /= 2\n\n    return int(rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Speeds: s1 and s2\n    s1 = 60\n    s2 = 30\n\n    # Time to travel 1 mile at each speed\n    t1 = 1 / s1\n    t2 = 1 / s2\n\n    # Total distance and total time\n    total_distance = 1 + 1\n    total_time = t1 + t2\n\n    # Average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    return (12 // 1.4) + 1  # Division to find the base number of times, +1 to exceed £12\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day_candies = 2\n    day_to_find = 4\n    candies_eaten = first_day_candies * (2 ** (day_to_find - 1))\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the natural number we're looking to find, and a be the remainder when dividing 290.\n    x, a = symbols('x a', integer=True)\n\n    # We set up the equations according to the problem statement.\n    equation1 = Eq(290 % x, a)\n    equation2 = Eq(235 % x, a + 2)\n    equation3 = Eq(200 % x, a + 5)\n\n    # We want the natural number greater than 1, so we limit x.\n    solutions = solve((equation1, equation2, equation3), (x, a))\n    for sol in solutions:\n        if sol[x] > 1:\n            return sol[x]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earning = 70\n    days_worked = 6  # From Monday to Saturday\n\n    total_earnings = average_daily_earning * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    # Let x be the smaller angle\n    # Since one angle is two times larger than the other\n    # The other angle will be 2x\n    # Sum of angles in a triangle is 180 degrees\n    # One angle is 90 degrees (right angle)\n    # So the sum of the other two angles will be 180 - 90\n    smaller_angle = (180 - 90) / 3\n    larger_angle = 2 * smaller_angle\n    \n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    # Try all permutations of the unique digits 0-9 for the letters P, I, S\n    for p, i, s in permutations(range(10), 3):\n        # The letter I cannot be 0 as it is the leading digit in IS\n        if i == 0:\n            continue\n        \n        is_num = 10 * i + s\n        pi_num = 10 * p + i\n        \n        # Check the multiplication condition\n        if 4 * is_num == pi_num:\n            return pi_num\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    num_members = 9\n    # The middle term is also the average in case of consecutive numbers.\n    middle_age = total_sum // num_members\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # Average sunshine for Monday to Saturday\n    average_mon_to_sat = 3\n\n    # Total sunshine hours from Monday to Saturday\n    total_sunshine_mon_to_sat = average_mon_to_sat * 6\n\n    # Sunshine hours on Sunday\n    sunshine_sunday = 10\n\n    # Total sunshine hours for the whole week\n    total_sunshine_week = total_sunshine_mon_to_sat + sunshine_sunday\n\n    # Average sunshine for the whole week\n    average_whole_week = total_sunshine_week / 7\n\n    return average_whole_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # in m/min\n    running_speed = 2 * walking_speed  # 2 times the walking speed\n    walking_time = 24  # the time it takes to walk to school in minutes\n\n    # Calculate the total distance to school\n    total_distance = walking_speed * walking_time\n\n    # Distance covered by walking and running is half of the total distance each\n    walking_distance = total_distance / 2\n    running_distance = total_distance / 2\n\n    # Calculate time taken to walk and run half the distance\n    time_walking_half = walking_distance / walking_speed\n    time_running_half = running_distance / running_speed\n\n    # Total time taken for half walk and half run\n    total_time = time_walking_half + time_running_half\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # The number of intervals between trees is one less than the number of trees\n    num_intervals = 79 - 1  # because there are no trees in front of the school or her house\n\n    # The total length of the road is 320m\n    road_length = 320\n\n    # The distance between each tree is the road length divided by the number of intervals\n    distance_between_each_tree = road_length / num_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_who_saw_movie = boys * 0.50\n    girls_who_saw_movie = girls * 0.60\n    total_pupils_who_saw_movie = boys_who_saw_movie + girls_who_saw_movie\n    return total_pupils_who_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother.\n    gave_mother = savings / 3\n\n    # She then bought some dresses for $177 and spent $129 on earrings.\n    spent = 177 + 129\n\n    # The amount left was 1/2 of what she gave her mother.\n    left = gave_mother / 2\n\n    # The remaining savings after spending on dresses and earrings is the savings minus what she spent.\n    remaining_savings = savings - spent\n\n    # Set up the equation: remaining savings equals to the left amount.\n    equation = Eq(remaining_savings, left)\n\n    # Solve the equation to find out the savings.\n    solutions = solve(equation, savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    ways = 0\n    for basket1 in range(7):\n        for basket2 in range(7 - basket1):\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    \n    lengths_cut = total_length // cut_length\n    remaining_length = total_length % cut_length\n    \n    return remaining_length\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + (3 / 100)\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = (teams * (teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    total_sum = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            total_sum += N\n    return total_sum\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n    \n    for day in range(1, 10):\n        workers = day\n        skirts_today = workers * skirts_per_worker_per_day\n        total_skirts += skirts_today\n    \n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if (chickens * 2) + (cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 14 - 11\n    possible_numbers = list(range(30, 61))\n\n    ans = [num for num in possible_numbers if (num - first_term) % common_difference == 0]\n\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    count = 0\n    num = 1\n    while count < 2023:\n        num_str = str(num)\n        num_length = len(num_str)\n        # If adding this number's digits will not exceed desired index\n        if count + num_length >= 2023:\n            return int(num_str[2023 - count - 1])\n        # Add number of digits to count\n        count += num_length\n        num += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    total_income = 150000\n    first_50k_tax = 0.08 * 50000\n    remaining_income = total_income - 50000\n    tax_above_50k = (0.08 + T) * remaining_income\n\n    # Set up the equation for the total tax paid\n    tax_equation = Eq(first_50k_tax + tax_above_50k, 15000)\n\n    # Solve for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    scored_points = 66\n    questions_answered = total_questions - 1\n\n    for correct_answers in range(questions_answered + 1):\n        incorrect_answers = questions_answered - correct_answers\n        points = correct_answers * 4 - incorrect_answers * 2\n        if points == scored_points:\n            return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Rachel's and Alice's original amount of candy\n    rachel, alice = symbols('rachel alice')\n\n    # Create the equation based on the given conditions\n    # 1. If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # 2. If both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the equations for the amounts of candy\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total amount of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n    \n    min_boys_per_day = boys_in_club // days_in_january\n    if boys_in_club % days_in_january != 0:\n        min_boys_per_day += 1\n    \n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    count = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i != j and j != k and i != k and i in [0,2,3] and j in [0,2,3] and k in [0,2,3]:\n                    if i != 0:  # Three-digit numbers cannot start with 0\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_space_length = 5 * (31 + 1)\n    total_length = first_car_length + other_cars_length + total_space_length\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given values for the 7th, 8th and 9th terms\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n    \n    # Calculate common difference (d) of the arithmetic sequence\n    common_difference = eighth_term - seventh_term\n\n    # Calculate the first term (a) using the formula: a_n = a + (n - 1) * d\n    # For the 7th term: 105 = a + (7 - 1) * d\n    first_term = seventh_term - (7 - 1) * common_difference\n    \n    # Calculate the 100th term using the formula: a_n = a + (n - 1) * d\n    # For the 100th term: a_100 = a + (100 - 1) * d\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n\n    remaining_chocolates = total_chocolates - chocolates_given_away\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '3', '5', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        # Convert the tuple to a string for easier checking\n        lineup = ''.join(p)\n        if lineup.index('A') > lineup.index('B') and lineup.index('A') < lineup.index('C'):\n            if 'DE' in lineup or 'ED' in lineup:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) // sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost = 7 * 73  # cost in pence\n    cakes_cost = 9 * 113    # cost in pence because £1.13 is 113p\n    \n    total_cost_pence = biscuits_cost + cakes_cost   # total cost in pence\n    total_cost_pounds = total_cost_pence / 100      # convert pence to pounds\n    \n    change = 20 - total_cost_pounds  # change from a £20 note\n    return round(change, 2)          # round the result to 2 decimal places\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    # Last week's length is today's length divided by (1 + growth_rate)\n    last_week_length = current_length / (1 + growth_rate)\n    return last_week_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of stickers Peter had initially as 'p'.\n    # According to the problem, Sam initially had 'p + 40' stickers.\n    p = symbols('p')\n    \n    # After Sam gave 20% of his stickers to Peter, Sam has 80% of his own stickers left: 0.8 * (p + 40)\n    # Peter now has all of his stickers plus the 20% he received from Sam: p + 0.2 * (p + 40)\n    \n    # Peter then gives 25% of his current stickers to Sam: 0.25 * (p + 0.2 * (p + 40))\n    # After the exchange, Sam has '0.8 * (p + 40)' + '0.25 * (p + 0.2 * (p + 40))' and Peter has '0.75 * (p + 0.2 * (p + 40))'.\n    \n    # Finally, according to the problem, Sam had 96 stickers more than Peter after the exchange,\n    # so we model this with the following equation:\n    final_sam = 0.8 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))\n    final_peter = 0.75 * (p + 0.2 * (p + 40))\n    equation = Eq(final_sam, final_peter + 96)\n\n    # Solve the equation\n    num_stickers_peter = solve(equation, p)\n\n    return num_stickers_peter[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms  # Correct way to find combinations of tops and bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time when lunch finished\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Total time spent before lunch finished (10 + 20 + 20 minutes)\n    total_minutes_before_lunch = 10 + 20 + 20\n    \n    # Calculate the time Benson reached home\n    time_reached_home = lunch_finished_time - timedelta(minutes=total_minutes_before_lunch)\n    \n    return time_reached_home.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time = 12 * 60 + 40  # convert 12:40 p.m. to minutes past 12:00 a.m.\n    stay_duration = 2 * 60 + 40  # convert 2 hours and 40 minutes to minutes\n    leave_time = arrival_time + stay_duration  # calculate the leave time in minutes past 12:00 a.m.\n\n    leave_hour = leave_time // 60  # convert to hours\n    leave_minute = leave_time % 60  # get the remaining minutes\n\n    # Since Natalie leaves after noon, we might need to adjust the leave_hour for 12-hour time format\n    if leave_hour > 12:\n        leave_hour -= 12\n\n    # Place in tuple to return as (hour, minute)\n    ans = (leave_hour, leave_minute)\n\n    return ans\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # The 3-digit numbers cannot start with 0, so there are 3 options for the first digit,\n    # 3 options for the second digit (excluding the one picked for the first digit),\n    # and 2 options for the third digit (excluding the two picked already).\n    # Hence we can form 3! = 3 * 2 * 1 = 6 3-digit numbers.\n    three_digit_numbers = 3 * 2 * 1\n\n    # For the 4-digit numbers, all four digits must be used but can be in any order,\n    # so we have 4! permutations, but we have to subtract the permutations\n    # that start with 0. There are 3! such permutations.\n    four_digit_numbers = factorial(4) - factorial(3)\n\n    ans = three_digit_numbers + four_digit_numbers\n    return ans\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 2\n    while True:\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6 + 1/2\n    return ans / (1/2)\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    num_terms = 14\n    first_term = 5\n    common_diff = 3\n    last_term = first_term + (num_terms - 1) * common_diff\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def count_nines_in_number(n):\n    return str(n).count('9')\n\ndef solution():\n    num_nines, page = 0, 0\n    while num_nines < 181:\n        page += 1\n        num_nines += count_nines_in_number(page)\n    return page - 1  # Subtract one because we need the last page number not to exceed 181 nines.\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the original number of crystals Jason had\n    x = symbols('x')\n    # After selling to Yvonne, he had x - (10 + x / 2) left, then mines 20 more, then sells 14.\n    # Finally, he has 35 crystals.\n    equation = Eq(x - (10 + x / 2) + 20 - 14, 35)\n    original_crystals = solve(equation, x)\n    return original_crystals[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Since every cycle of the pattern has 2 grey rabbits\n    # Find the number of cycles by dividing the number of grey rabbits by 2\n    cycles = 14 // 2\n    \n    # Calculate the total number of rabbits by adding up each color in the cycle\n    rabbits = cycles * (1 + 2 + 2)  # 1 black, 2 white, 2 grey\n    \n    # Since there might be a leftover grey rabbit if the division has a remainder,\n    # we must add another full cycle to account for it\n    if 14 % 2 == 1:\n        rabbits += (1 + 2 + 2)\n\n    return rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i != 0 and i != j and j != k and i != k:\n                    three_digit_numbers.append(int(f\"{i}{j}{k}\"))\n\n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    num_students_A = 12\n    num_students_B = 15\n    num_students_C = 18\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "def solution():\n    from itertools import permutations\n    \n    # Digits used for the password\n    digits = ['1', '2', '3', '4']\n    \n    # Count the number of valid permutations for even 4-digit numbers\n    count = 0\n    \n    for p in permutations(digits, 4):\n        # Check if the last digit is even\n        if int(p[3]) % 2 == 0:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    n = 180\n    count = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 9 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return int(total_age)\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n\n    solution = solve(equation, u)\n\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # Assuming interest is compounded annually, n = 1\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Convert 2 pounds to pence\n    total_pence = 200\n    \n    # Calculate the maximum number of sweets that can be bought in set of three\n    sweets_in_set_of_three = total_pence // 30 * 3\n    \n    # Calculate remaining pence after buying sweets in set of three\n    remaining_pence = total_pence % 30\n    \n    # Calculate additional sweets that can be bought with the remaining pence\n    additional_sweets = remaining_pence // 12\n    \n    # Total maximum sweets Roma can buy\n    total_sweets = sweets_in_set_of_three + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_7 = 7\n    may_age_10 = 10\n    kenny_age_diff = 2\n\n    # Let the age of Kenny's younger brother be 'b'\n    # Then Kenny's age will be 'b + kenny_age_diff'\n    # At the time when May is 10, sum of ages of Kenny and his brother will be 3 times May's age\n    # (b + b + kenny_age_diff) at May's age 10 = 3 * may_age_10\n    \n    b = symbols('b')\n    equation = Eq((b + b + kenny_age_diff), 3 * may_age_10)\n    brother_age = solve(equation, b)[0]\n    kenny_age = brother_age + kenny_age_diff\n    \n    # Kenny is currently (kenny_age - (may_age_10 - may_age_7)) years old\n    # May is currently may_age_7 years old.\n    # We need to find the difference in their current ages.\n    kenny_current_age = kenny_age - (may_age_10 - may_age_7)\n    age_difference = kenny_current_age - may_age_7\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # We have to place at least 1 ball in each box, so we start by placing 7 balls (1 in each)\n    remaining_balls = 10 - 7\n\n    # The problem now reduces to placing the remaining 3 balls in 7 boxes\n    # which is similar to finding combinations with repetitions.\n    # This can be calculated using the formula for combinations with repetitions: C(n + r - 1, r)\n    # where n is the number of boxes and r is the remaining balls\n    ans = comb(remaining_balls + 7 - 1, remaining_balls)\n\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # The only loosing position for the first player is when number of candies is a multiple of 3.\n    # In our case, with 10 candies, Felix can ensure victory going first.\n    # He can eat 1 candy first, which leaves 9 candies.\n    # No matter if John eats 1 or 2 candies, Felix can always eat in such way to leave a multiple of 3 candies\n    # after John's turn, ensuring that John is in a loosing position.\n\n    # Determine if the number of candies is a multiple of 3\n    candies = 10\n    if candies % 3 == 0:\n        # Felix should go second to ensure victory\n        return (\"Second\", \"No strategy needed, Felix will win by default\")\n    else:\n        # Felix should go first and ensure that after each round number of candies left is a multiple of 3.\n        return (\"First\", \"Eat 1 candy then ensure a multiple of 3 candies after each of John's turns\")\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the total number of litres needed to fill the tank\n    # 5-litre pail overflow by 4 litres, so the tank capacity is x = 5n - 4\n    # 3-litre pail needs an extra 4 pails, so the tank capacity is also x = 3(m + 4)\n    # Here, n and m are positive integers representing the number of pails used.\n    # We need to solve for x in both equations\n\n    for n in range(1, 100):  # Assuming a reasonable upper limit for n\n        tank_capacity_5 = 5 * n - 4\n        for m in range(1, 100):  # Assuming a reasonable upper limit for m\n            tank_capacity_3 = 3 * (m + 4)\n            if tank_capacity_5 == tank_capacity_3:\n                return tank_capacity_5\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length // pipe_length\n    \n    # Check if a partial pipe is needed for any remaining length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n        \n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3 = 0\n    page = 0\n    while count_3 < 28:\n        page += 1\n        count_3 += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # 15.55 in minutes\n    second_bus_time = 16 * 60 + 35  # 16.35 in minutes\n\n    # If you are 4 minutes late for the first bus\n    arrival_time = first_bus_time + 4\n\n    # Time to wait for the second bus\n    wait_time = second_bus_time - arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    result = 456 - (170 - 144)\n    return result\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_students = 152\n    boys, girls = symbols('boys girls')\n\n    # Equation representing removal of 1/11 of boys and 5 girls\n    equation = Eq(boys - boys/11, girls - 5)\n\n    # Total number of students is the sum of boys and girls\n    total_equation = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solution_dict = solve((equation, total_equation), (boys, girls))\n    \n    # Return the original number of boys\n    return solution_dict[boys]\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_pages_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_pages_next_four_days * 4) + pages_last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number = solve_congruence(*congruences)\n\n    # We want a three-digit number less than 200, and the solutions provided\n    # by solve_congruence is the smallest solution that satisfies all congruences\n    # We need to adjust it to fit our constraints by subtracting multiples of lcm(4, 5, 9).\n    while number[0] >= 200:\n        number = (number[0] - 180, number[1])\n\n    return number[0]\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5  # The initial total amount in cents\n    brother_amounts = {total_amount // 2 - coin for coin in [50, 20, 10, 5]}\n    zoey_amounts = {total_amount - coin for coin in [50, 20, 10, 5]}\n    lost_coin = (zoey_amounts - brother_amounts).pop()  # The coin that was lost\n\n    return lost_coin\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let's represent the total number of students as x, the number of rooms as n.\n    # We can set up two equations based on the problem:\n    # If 4 students live in one room, there will be 6 students with no room to live:\n    # x = 4n + 6  -->  Equation (1)\n    # If 5 students live in one room, there will be 1 room without students:\n    # x = 5(n - 1)  -->  Equation (2)\n\n    # We now equate equation (1) and equation (2) and solve for n:\n    # 4n + 6 = 5n - 5\n    # Then, n = 11 (number of rooms)\n\n    # Using equation (1) to calculate x:\n    # x = 4n + 6\n    n = 11\n    x = 4 * n + 6\n    \n    return x\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        underline_times = (number % 2 == 0) + (number % 3 == 0) + (number % 4 == 0)\n        if underline_times == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    \n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_after_removal = 6 * 10\n    removed_number = total_initial - total_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people // 3\n    people_still_at_party = total_people - people_left\n\n    return people_still_at_party\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    # intervals for each line in minutes\n    interval_A = 15\n    interval_B = 12\n    interval_C = 8\n\n    # next time trains from A, B, C will arrive together after 10:00 am\n    next_arrival_interval = lcm(interval_A, interval_B, interval_C)\n\n    # starting time at 10:00 am in minutes (10 hours * 60 minutes)\n    start_time = 10 * 60\n    # next arrival time in minutes\n    next_arrival_time = start_time + next_arrival_interval\n\n    # convert next arrival time back to hours and minutes\n    hours = next_arrival_time // 60\n    minutes = next_arrival_time % 60\n\n    # returning hours and minutes as a tuple (hours, minutes)\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    lorries_needed = (workers + lorry_capacity - 1) // lorry_capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # If the average of 4 of the 5 numbers is given, then the sum of those 4 numbers is 4 times the average.\n    sums_of_four = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    # Now we calculate the total sum of all 5 numbers - this should be the same for all cases.\n    # Since all other 4-number combinations include the total sum, we can find this by adding the five sums\n    # and then dividing by 4 (as each number has been counted 4 times).\n    total_sum_of_five = sum(sums_of_four) // 4\n    # The largest number will be the total sum of all 5 numbers minus the smallest sum of the 4 numbers.\n    largest_number = total_sum_of_five - min(sums_of_four)\n    \n    return largest_number\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    total_swimmers = 30\n    total_cyclists = 35\n    total_table_tennis_players = 42\n\n    # By Inclusion-Exclusion Principle\n    # At least one student in all three sports will be\n    # (total_swimmers + total_cyclists + total_table_tennis_players) - total_students\n    # But, since this can be greater than total_students, the least number will be this value minus\n    # the first to exceed the total_students\n    min_all_three = total_swimmers + total_cyclists + total_table_tennis_players - 2 * total_students\n\n    return min_all_three\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    factor = 3999 * 2014\n    decimal_part = 0.2014 * 3999 + 3999.3999\n    result = (factor + decimal_part) / 12.0012\n    return result\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # time in seconds\n    length = 360  # length of the train in meters\n\n    # Speed = Distance / Time\n    speed = length / time\n\n    return speed\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    accumulated_distance = 0\n    days = 0\n\n    while accumulated_distance < total_distance:\n        days += 1\n        accumulated_distance += day_climb\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_penality = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_penality == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # The worst case scenario would be that we have to consider drawing all marbles of the most plentiful color first.\n    # So, we first draw all red marbles. That's 12.\n    # But we still haven't guaranteed 4 different marbles, because we've only drawn red.\n    # Next, we draw all blue marbles. That's 9 more, for a total of 12 + 9 = 21.\n    # We still haven't guaranteed 4 different marbles, because we've got red and blue marbles.\n    # Next, we draw all yellow marbles. That's 8 more, for a total of 12 + 9 + 8 = 29.\n    # Still only have red, blue, and yellow marbles.\n    # To guarantee that we have 4 marbles of different colors, we need to draw one more, which would certainly be green.\n    # So the answer is 29 + 1 = 30\n    return 30\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie can choose from any of the restaurant types\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    # Total choices are the sum of the different restaurant types\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for n in range(1, 50):  # Assume there are less than 50 people for simplicity\n        if (10 + (n // 2) * 2) % n == 24 % n:\n            return n\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[-1] if possible_ages else None\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):  # Loop over all 2-digit numbers\n        if 75 % i == 0 and i % 6 == 3:  # Check if i is a factor of 75 and gives remainder 3 when divided by 6\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    for num in range(10, 100):\n        if num - 41 == 50:\n            correct_diff = num - 14\n            return correct_diff\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(40, 21, -2)])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4\n    apples_left = 20\n\n    total_apples = justin_ate + sisters_ate + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total = 0\n    \n    # Case 1: Numbers with 4 digits between 3267 and 5120\n    # The 1000s digit can be 3, 4, or 5; since 6 is too high.\n    for thousands in [3, 4, 5]:\n        # Using the concept of 'filling places', we have to choose and arrange\n        # 3 more digits from the remaining 5 digits.\n        # Choices for hundreds digit (where we choose one digit out of the remaining 5)\n        for hundreds in range(5):\n            # Choices for tens digit (choosing one out of the remaining 4)\n            for tens in range(4):\n                # Choices for units digit (the last remaining 3)\n                total += 3\n    \n    # Case 2: Numbers with 3 digits, all numbers between 1000 and 3267 are valid\n    # The 1st digit can be 1, 2, or 3; since we're looking at 3-digit numbers starting at 1000\n    for thousands in [1, 2, 3]:\n        # For the 2nd digit we choose one out of the remaining 5 digits\n        for hundreds in range(5):\n            # For the 3rd digit we choose one out of the remaining 4 digits\n            # and arrange them. For each choice of the first 2 digits, we can\n            # arrange the next digit in 4 ways, and the last digit in 3 ways.\n            total += 4 * 3\n    \n    # Case 3: Numbers with 2 digits, all numbers between 10 and 99 using given digits are valid\n    # The 1st digit can be 1, 2, 3, 4, 5 or 6, the 2nd digit can be any of the remaining five\n    total += 6 * 5\n    \n    # Case 4: Numbers with 1 digit, all single digit numbers are valid\n    # There are 6 possibilities (1, 2, 3, 4, 5, 6)\n    total += 6 \n    \n    return total\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    initial_amount = 5000\n    final_amount = 7320.5\n    years = 4\n\n    rate = (final_amount / initial_amount) ** (1/years) - 1\n\n    return rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let the original number of rows (and columns) be n\n    # The original number of soldiers is n * n\n    # After adding 31 soldiers, one row and one column are added\n    # The new number of soldiers is (n + 1) * (n + 1)\n    # The difference between the new and the original number of soldiers is 31\n    # We have the equation: (n + 1) * (n + 1) = n * n + 31\n\n    # We can reformulate this equation as:\n    # n^2 + 2n + 1 = n^2 + 31\n    # 2n + 1 = 31\n    # 2n = 30\n    # n = 15\n    # The total number of soldiers now is (n + 1) * (n + 1)\n    \n    n = 15\n    total_soldiers = (n + 1) * (n + 1)\n    return total_soldiers\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return round(ans, 2)\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return abs(percent_change)\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80        # minutes in 1 hour and 20 minutes\n    \n    num_pictures = total_time // time_per_picture\n    \n    return num_pictures\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    total_seconds = seconds_per_minute * minutes\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    books_and_stationery = 0.20 * total_money\n    transport = (total_money - books_and_stationery) / 4\n    food = 3 * transport\n    savings = food - 6\n    \n    savings_percent = (savings / total_money) * 100\n    return savings_percent\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    children = 6  # Ann + 5 other children\n    minimum_apples_per_child = 1\n\n    # Subtract the minimum apples for the other five children\n    remaining_apples = total_apples - (minimum_apples_per_child * (children - 1))\n\n    # The remaining apples can all go to Ann\n    return remaining_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the digits\n    digits = [1, 3, 5, 6, 7, 8, 9]\n    permutations_of_digits = permutations(digits)\n    \n    for perm in permutations_of_digits:\n        # Construct the first number\n        first_number = 100 * perm[0] + 10 * perm[1] + perm[2]\n        # Construct the second number\n        second_number = 100 * perm[3] + 10 * perm[4] + perm[5]\n        # Check if the second number is twice the first number\n        if second_number == 2 * first_number:\n            # Construct the third number\n            third_number = 100 * perm[6] + 10 * perm[5] + perm[4]\n            # Check if the third number is four times the first number\n            if third_number == 4 * first_number:\n                return third_number  # Found the correct third number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    pants_outfits = shirts * pants * shoes\n    dress_outfits = dresses * (shoes + heels)\n\n    ans = pants_outfits + dress_outfits\n    return ans\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total buttons\n    equation1 = Eq(james + nina, 22)\n\n    # After Nina gives James 4 buttons, they have the same amount\n    equation2 = Eq(james + 4, nina - 4)\n\n    # Nina has more buttons than James\n    equation3 = Eq(nina > james, True)\n\n    solutions = solve((equation1, equation2), (james, nina), dict=True)\n\n    # Filter only valid solutions where Nina has more buttons\n    valid_solutions = [sol for sol in solutions if sol[nina] > sol[james]]\n\n    # Only one valid solution expected\n    if len(valid_solutions) == 1:\n        return valid_solutions[0][nina]\n    else:\n        raise Exception('Multiple or no valid solutions')\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        for j in range(1, i):\n            ans += j / i\n    ans += 1  # Adding the term 1 explicitly as it is not included in the loop\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_score = 4\n    incorrect_score = -2\n    total_score = 29\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * correct_score + incorrect * incorrect_score\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_sum = sum([int(digit) for digit in '12345'])\n    full_patterns = 52 // 5\n    remaining_digits = 52 % 5\n\n    total_sum = full_patterns * pattern_sum + sum([int('12345'[i]) for i in range(remaining_digits)])\n\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n    number_of_kites = total_paper_available / paper_needed_per_kite\n    return int(number_of_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320  # in meters\n    distance_between_each_tree = total_distance / (total_trees + 1)\n    \n    return distance_between_each_tree\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert everything to grams\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Calculate the mass of the pack of sand\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Calculate the difference in mass\n    diff_mass_g = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the difference back to kg and g\n    diff_mass_kg = diff_mass_g // 1000\n    diff_mass_g = diff_mass_g % 1000\n\n    # Return the result as a string in format \"xkg yg\"\n    ans = f\"{diff_mass_kg}kg {diff_mass_g}g\"\n    return ans\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Given: 10 fish for 4 rabbits\n    fish_to_rabbit_ratio = 10 / 4\n\n    # Given: 5 rabbits for 6 packs of wheat\n    rabbit_to_wheat_ratio = 5 / 6\n\n    # Calculate the ratio of fish to packs of wheat by multiplying the two ratios\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Given: Dennis wants 12 packs of wheat\n    required_wheat_packs = 12\n\n    # Calculate the number of fish Owen should give for 12 packs of wheat\n    fish_for_required_wheat = fish_to_wheat_ratio * required_wheat_packs\n\n    return fish_for_required_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(54, 5)   # Convert 10 4/5 to an improper fraction\n    short_rod_length = Fraction(3, 10)\n    \n    num_short_rods = total_length / short_rod_length\n\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_for_30_laptops = 30\n\n    cost_without_deal = 20 * single_laptop_cost\n    cost_per_laptop_on_deal = deal_cost / deal_for_30_laptops\n    cost_with_deal = 20 * cost_per_laptop_on_deal\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # The highest common factor is 75, which is 3 * 5^2\n    # Knowing that both M and N only have prime factors 3 and 5,\n    # M = 3^a * 5^b and N = 3^c * 5^d where a, b, c, and d are non-negative integers\n    # The number of factors of a number is equal to the product of (exponent + 1) for each prime factor\n    # Since the HCF of M and N is 75, 3^1 * 5^2 must be in both M and N's prime factorization\n\n    # Start with the HCF 75 which is 3^1*5^2 and find all combinations for M having 12 factors\n    M_factors = []\n    for a in range(2):  # 3's exponent can only be 1 or 2 because 3^(3) would already give 12 factors\n        for b in range(5):  # 5's exponent can be from 2 to 5 because we need to have a total of 12 factors\n            if (a + 1) * (b + 3) == 12:  # since HCF has 5^2, we start b's count from 2 hence b+3\n                M_factors.append((a, b + 2))\n\n    # Find all combinations for N having 10 factors\n    N_factors = []\n    for c in range(2):  # Similar reasoning as for M\n        for d in range(5):  # Similar reasoning as for M\n            if (c + 1) * (d + 3) == 10:\n                N_factors.append((c, d + 2))\n\n    # Find possible values for M and N with the found factors\n    M_values = [3**a * 5**b for a, b in M_factors]\n    N_values = [3**c * 5**d for c, d in N_factors]\n\n    # Since HCF of M and N is 75, no two pairs (a, b) and (c, d) should have either a > 1 or c > 1 at the same time\n    # so that the common factor does not exceed 75. So we find non-overlapping pairs.\n    valid_pairs = []\n    for M_value in M_values:\n        for N_value in N_values:\n            if M_value % 75 == 0 and N_value % 75 == 0:\n                valid_pairs.append((M_value, N_value))\n\n    # The sum of M and N would be the sum of the elements of any valid pair\n    ans = sum(valid_pairs[0])\n    return ans\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total number of ways to arrange the singing performances\n    singing_ways = factorial(6)\n    \n    # There are 5 slots between the singing performances and \n    # 2 additional slots at the start and the end, which gives us 7 slots for dancing\n    # However, we can only choose 4 out of these 7 slots for the dancing performances\n    dancing_slots = 7\n    dancing_ways = factorial(dancing_slots) // (factorial(4) * factorial(dancing_slots - 4))\n    \n    # The total number of ways to arrange the performances\n    # is the product of the number of ways to arrange singing and dancing performances\n    total_ways = singing_ways * dancing_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 35 / 100\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    total_earnings = hourly_wage * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    jenny_result = -14\n    incorrect_operation = -26\n    correct_operation = 26\n\n    original_number = jenny_result - incorrect_operation\n    correct_result = original_number + correct_operation\n\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5*x), 1)\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_m = 4\n    ratio_k = 5\n\n    kelly_height = (matthew_height / ratio_m) * ratio_k\n    \n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    ans = 35 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    dividend = 689\n    divisor = 13\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    # Iterate through possible values of a and b\n    for a in range(1, 10):  # a cannot be 0 as it is the leftmost digit of a two-digit number\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    students = 6\n    monitors = 2\n    ways = comb(students, monitors)\n    return ways\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    count = 0\n    for i in range(1, 50):  # Assuming the class size is less than 50 for each direction\n        for j in range(1, 50):  # Assuming the class size is less than 50 for each direction\n            if i * j >= 4:  # Since Mike is the 2nd in line, there needs to be at least 4 students\n                if (i - 1) % (j - 1) == 0:\n                    count = i * j\n                    return count\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Loop through all possible scores for one team at half-time\n    for team1_ht in range(4):\n        # Loop through all possible scores for the other team at half-time\n        for team2_ht in range(3):\n            # The half-time scores must be less than or equal to the final score\n            if team1_ht <= 3 and team2_ht <= 2:\n                # The second half scores are derived by subtracting half-time scores from the final score\n                team1_second_half = 3 - team1_ht\n                team2_second_half = 2 - team2_ht\n                # Check if the second half scores are non-negative\n                if team1_second_half >= 0 and team2_second_half >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    result = 85 / 100 * 400\n    return result\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    bud_fraction = 2/5  # Since Pip ate 3/5, Bud gets 2/5\n    total_sweets = bud_sweets / bud_fraction\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Since 20 pupils can't swim and they are equally split, 10 boys and 10 girls can't swim\n    non_swimming_girls = 10\n    non_swimming_boys = 10\n\n    # 3/8 of the girls and 3/5 of the boys can swim\n    # So, the number of swimming girls is 3/8 * g, and that leaves 5/8*g can't swim, which we know is 10.\n    # Similarly, the number of swimming boys is 3/5 * b, and that leaves 2/5*b can't swim, which we know is 10.\n\n    # Create the equation system\n    equation1 = Eq((5/8) * g, non_swimming_girls)\n    equation2 = Eq((2/5) * b, non_swimming_boys)\n\n    # Solve the system\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total pupils in the class is the sum of boys and girls\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    target = 6 * 5\n    percent_of_40 = (target / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_of_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_mandy_wants = 5\n\n    cost_per_cup = cost_of_3_cups / number_of_cups_initially\n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n\n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_houses = 5\n    small_houses = 9\n    total_rabbits = 38\n    big_house_capacity = 4\n\n    rabbits_in_big_houses = big_houses * big_house_capacity\n    rabbits_in_small_houses = total_rabbits - rabbits_in_big_houses\n    small_house_capacity = rabbits_in_small_houses // small_houses\n\n    return small_house_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    number_of_days = 7  # from Monday to Sunday\n\n    total_earnings = average_earnings_per_day * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 9, 2))\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n    \n    ans = count_ways(6)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_per_month = 15\n    months = 5  # From March to July inclusive\n\n    total_pizzas = average_per_month * months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_numbers = 21 + 22 + 23\n    factor = sum_numbers // (2 * 3)\n    return factor\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    current_speed = 3\n    distance_upstream = 150\n\n    effective_speed_upstream = speed_in_still_water - current_speed\n    time_taken = distance_upstream / effective_speed_upstream\n\n    return time_taken\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Solve the congruences\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    # Conversion of currency from pounds to pence\n    conversion_factor = 100\n\n    # Set up the system of equations\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n    \n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1 if i % 4 > 1 else 1) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit in 9^5 will be the same as 9^(any power) since the pattern repeats every 4\n    # That means, regardless of the power, the ones digit will always be 9's ones digit which is 9\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be Claire's current age\n    c = symbols('c')\n    \n    # Equation representing the situation:\n    # In 6 years, Claire's age will be (current_age + 6)\n    # This age should be 3 times her current age: 3 * current_age\n    equation = Eq(c + 6, 3 * c)\n\n    # Solving for Claire's current age\n    current_age = solve(equation, c)[0]\n\n    # Claire's age two years from now is current_age + 2\n    age_in_two_years = current_age + 2\n\n    return age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let the variable \"actual_duration\" represent the time it should have taken (in minutes)\n    from sympy import symbols, Eq, solve\n    \n    actual_duration = symbols('actual_duration')\n\n    # Equation:\n    # actual_duration * 11/12 = actual_duration - (15 - 5)\n    # The train was 15 minutes late and arrived 5 minutes late,\n    # so it made up for 10 minutes in total.\n    \n    equation = Eq(actual_duration * 11/12, actual_duration - 10)\n    \n    # Solve the equation for the actual duration\n    actual_duration_solution = solve(equation, actual_duration)\n    \n    return actual_duration_solution[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    return (4/15) - (7/10) + (11/15) - (3/10)\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # There are 4 red, 7 green, 6 blue, and 2 orange marbles.\n    num_red = 4\n    num_green = 7\n    num_blue = 6\n    num_orange = 2\n\n    # We need to have at least one of each color. According to the Pigeonhole Principle,\n    # if we draw one less than the number of marbles of all but the largest color, we might\n    # still only have 3 colors. So we need to draw marbles equal to:\n    # the sum of marbles of all colors EXCEPT the largest one (since we're looking for the worst case)\n    # plus one more to ensure we have the largest color as well.\n    draw_red_green_blue = num_red + num_green + num_blue  # sum of all but the largest color (green)\n\n    # We draw all but one from the other colors and one more to guarantee the last color.\n    ans = draw_red_green_blue + 1  # plus one to ensure we have a green marble\n\n    return ans\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = 1\n    daytime = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        daytime += 1\n        distance_climbed += day_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_distance\n        \n    return daytime\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Total books to be divided\n    total_books = 19\n    \n    # Each kid must get at least one book. So we give each kid one book first.\n    books_left = total_books - 4\n    \n    # Now, we need to find the number of ways to distribute the remaining books among 4 kids.\n    # This is equivalent to putting books_left indistinguishable objects into 4 distinguishable boxes,\n    # which is a problem of distributing indistinguishable objects into distinguishable boxes.\n    # The formula for this is combinations with repetition, given by:\n    # (n+k-1) choose (k-1), where n is the number of objects and k is the number of boxes.\n    ways = factorial(books_left + 4 - 1) // (factorial(books_left) * factorial(4 - 1))\n    \n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Coins in UK: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), £2 (200p)\n    # Since Susan needs to receive change for 44p, she must pay with a coin or a combination of coins that equals\n    # an amount more than 44p and the bus driver needs to return the least number of coins possible.\n    # Let's start by assuming Susan pays with the next biggest coin, 50p, which would result in 6p change.\n\n    # Coins needed to pay 50p and get 6p change: 2 coins (50p paid, 5p and 1p change)\n    coins_paid = 1  # Susan pays with one coin\n    coins_change = 2  # 5p + 1p\n    total_coins = coins_paid + coins_change\n\n    return total_coins\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 0\n    for case1 in range(1, 6):\n        for case2 in range(1, 6 - case1):\n            case3 = 6 - case1 - case2\n            if case3 > 0:\n                ways += 1\n    ans = ways\n    return ans\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4*i+2)**2 - (4*i)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n\n    gallons_needed = order_cups / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2  # Pip and Bud themselves\n\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n    return total_people\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m, t, v be the number of motorbikes, tricycles, and vans respectively\n    m, t, v = symbols('m t v')\n\n    # A motorbike has 2 wheels, a tricycle has 3 wheels, and a van has 4 wheels\n    # Total wheels: 2*m + 3*t + 4*v = 101 (Total sum of wheels)\n    # Motorbikes and vans have 35 more wheels than tricycles: 2*m + 4*v = 3*t + 35\n    # Tricycles and vans have 13 more wheels than motorbikes: 3*t + 4*v = 2*m + 13\n\n    # System of equations derived from the problem statement\n    equation1 = Eq(2*m + 3*t + 4*v, 101)\n    equation2 = Eq(2*m + 4*v, 3*t + 35)\n    equation3 = Eq(3*t + 4*v, 2*m + 13)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Calculating the difference between the number of motorbikes and vans\n    motorbikes_vans_difference = solutions[m] - solutions[v]\n\n    return motorbikes_vans_difference\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    nums = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total_sum = average * 8\n    sum_known = sum(nums)\n    sum_pq = total_sum - sum_known\n    max_diff = 6\n    \n    for p in range(sum_known + 1, sum_pq):\n        q = sum_pq - p\n        if max(nums + [p, q]) - min(nums + [p, q]) == max_diff and p < q:\n            return q\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the amounts of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Tank D contains 41 liters\n    D = 41\n    \n    # Create the system of equations based on the problem description\n    # Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(A, 5 * B)\n    # Tank B contains 5 more liters of water than Tank C\n    equation2 = Eq(B, C + 5)\n    # The total amount of water in Tank C and Tank D is equal to Tank A\n    equation3 = Eq(C + D, A)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # We are interested in the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 298\n\n    n = ((nth_term - first_term) / common_difference) + 1\n    return int(n)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # Number of students who like football is 3 times those who like both sports\n    football = 3 * x\n\n    # Number of students who like basketball is 4 times those who like both sports\n    basketball = 4 * x\n\n    # Number of students who like at least one sport is total students minus those who like both sports\n    at_least_one = 36\n\n    # Applying the inclusion-exclusion principle\n    # Total = football + basketball - both\n    equation = Eq(football + basketball - x, at_least_one)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The given remainders and moduli form a system of congruences:\n    # x ≡ 3 (mod 7)\n    # x ≡ 7 (mod 11)\n    # x ≡ 9 (mod 13)\n\n    # Let's use the Chinese Remainder Theorem to find the smallest such number\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # The smallest positive integer solution is the one we want\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    speed_adam = 60  # km/h\n    speed_jacob = 80  # km/h\n    \n    time_jacob = 3  # hours\n    time_adam = 3 + 0.5  # hours (3 hours + 30 minutes)\n    \n    # Distance traveled by Jacob until he reached home\n    distance_jacob = speed_jacob * time_jacob\n    \n    # Distance traveled by Adam when Jacob reached home\n    distance_adam_when_jacob_home = speed_adam * time_jacob\n    \n    # Remaining distance Adam traveled to reach home\n    distance_adam_remaining = speed_adam * 0.5\n    \n    # Total distance traveled by Adam to reach home\n    distance_adam = distance_adam_when_jacob_home + distance_adam_remaining\n    \n    # Sum of the distances traveled by Adam and Jacob is the distance between their homes\n    distance_apart = distance_adam + distance_jacob\n\n    return distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    term_number = 21\n    \n    nth_term = first_term + (term_number - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "def solution():\n    from math import factorial as fact\n\n    def nCr(n, r):\n        return fact(n) // (fact(r) * fact(n - r))\n    \n    # There are 31 days in January, 28 days in February (since 2014 is not a leap year), and 31 days in March\n    total_days = [31, 28, 31]\n    \n    # For the eight-digit representation: yyyy mm dd\n    # There are two '2's from the year (2014), which means we need to find the ways to arrange\n    # two '0's, two '1's, and one '2' (since two '2's are already from the year part) in the remaining five places (mmdd)\n\n    # Possible days and months combinations where we do not need to add extra 0:\n    # (Without loss of generality, we pick the day first and then the month, as the month will always\n    # have a leading digit that is non-zero, except for October)\n    count = 0\n    for day in range(1, total_days[0] + 1):  # January\n        if day < 10:  # for days 1 to 9 which need one extra '0' in 'dd' to form a 2 digit number\n            # 4 places left to arrange two '1's, one '0', and one '2'\n            count += nCr(4, 2) * nCr(2, 1)\n        else:\n            # day is from 10 to 31, already contains one '1', so 4 places left to arrange two '0's and two '2's\n            first_digit = day // 10\n            if first_digit == 1 or first_digit == 2:\n                # one place is taken by '1' or '2', so 3 places left to arrange the other three numbers\n                count += nCr(3, 2) * nCr(1, 1)\n                \n    for month in range(1, 3):  # February and March\n        total_days_in_month = total_days[month]\n        for day in range(1, total_days_in_month + 1):\n            if day < 10 and month == 1:  # February with one leading '0'\n                # 4 places left to arrange two '1's, one '0', and one '2'\n                count += nCr(4, 2) * nCr(2, 1)\n            elif day >= 10:\n                # day is from 10 to 28/31, already contains one '1', so 4 places left to arrange two '0's and two '2's\n                first_digit = day // 10\n                if first_digit == 1 or first_digit == 2:\n                    # one place is taken by '1' or '2', so 3 places left to arrange the other three numbers\n                    count += nCr(3, 2) * nCr(1, 1)\n\n    return count\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_multiply(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_multiply(custom_multiply(custom_multiply(1, 2), 3), 4)\n    result = custom_multiply(result, 5)\n    return int(result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "from sympy import divisors\n\ndef solution():\n    num = 252\n    factors = divisors(num)\n    return len(factors)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using the Pigeonhole Principle, the minimum number in the fullest layer can be obtained\n    # by dividing total_cakes by total_layers and then adding 1 to the quotient\n    # because one of the layers has to have at least one more cake than the average\n\n    max_cakes_in_layer = (total_cakes // total_layers) + (total_cakes % total_layers > 0)\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    total_cost = 0.91\n    gst_rate = 0.07  # 7%\n\n    cost_before_gst = total_cost / (1 + gst_rate)\n\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case we grab all different before getting two of the same\n    num_blue = 2\n    num_yellow = 2\n    marbles_needed = (num_blue + num_yellow) - 1\n    return marbles_needed\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    weight1 = 2.49 * kg_to_g  # Convert kg to g\n    weight2 = 670  # Already in grams\n    weight3 = (3 * kg_to_g) + 80  # Convert kg to g and add additional grams\n\n    total_weight_in_g = weight1 + weight2 + weight3  # Sum of all weights in grams\n\n    return total_weight_in_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple (LCM) of their lap times\n    meet_time = lcm(ashley_time, ben_time, charlie_time)\n\n    # Convert the meet time in seconds to hours and minutes\n    meet_time_in_minutes, meet_time_in_seconds = divmod(meet_time, 60)\n    hours, minutes = divmod(meet_time_in_minutes, 60)\n\n    # Adding the time they will meet to the starting time, which is 10:00 am\n    start_hour = 10\n    start_minute = 0\n\n    final_hour = (start_hour + hours) % 24  # Account for 24-hour clock\n    final_minute = (start_minute + minutes)\n\n    # Format the final hour and minute to obtain the time they meet\n    meeting_time = \"{:02d}:{:02d}\".format(final_hour, final_minute)\n\n    return meeting_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_minutes = 60  # 1 hour is 60 minutes\n    cycling_fraction = 1/3\n    cycling_time = total_minutes * cycling_fraction\n    jogging_time = total_minutes - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # Sequence: 22, 18, 14, 10, 6, 2\n    # Common difference (d) can be calculated as:\n    d = 18 - 22  # or 14 - 18 or 10 - 14, etc.\n    \n    # The last term (2) minus the common difference gives the next term (n)\n    n = 2 + d  # Since we are going backwards, we need to add the negative difference\n\n    return n\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Since all children should get a different number of apples with at least one for each, \n    # the least amount of apples we can distribute to the first five children is 1, 2, 3, 4, and 5.\n    # This is a total of 1+2+3+4+5 = 15 apples.\n    \n    # We have 30 apples in total, so after distributing the minimum to the first five,\n    # the sixth child can get the rest.\n    least_distributed_to_five = sum(range(1, 6))\n    \n    # The maximum number of apples for the sixth child\n    max_apples_sixth_child = 30 - least_distributed_to_five\n    \n    return max_apples_sixth_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_mpg = 72.8\n    tom_additional_gallons = 6 + 3/4\n\n    # Calculate the amount of petrol Sam's car consumed\n    sam_gallons = distance / sam_mpg\n\n    # Calculate the amount of petrol Tom's car consumed\n    tom_gallons = sam_gallons + tom_additional_gallons\n\n    # Calculate Tom's average consumption rate (mpg)\n    tom_mpg = distance / tom_gallons\n\n    return tom_mpg\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart can try to avoid getting 2 M&M's of the same color.\n    # To ensure he gets 2 of different colors, he needs to consider the worst-case scenario.\n    # That is, he could get all chips of the most abundant color first (in this case, brown).\n    # After that, he will need to take one more to ensure he gets one of a different color.\n    # So, he will take all 5 brown ones, and 1 more (either red or yellow) to guarantee 2 different colors.\n    \n    most_abundant_color_chips = 5  # Brown chips\n    # Take 1 more chip after all brown ones to ensure 2 different colors\n    total_chips_needed = most_abundant_color_chips + 1\n    \n    return total_chips_needed\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has two choices for shirts and two choices for skirts\n    # According to the Principle of Multiplication, we multiply the number of choices\n    num_shirts = 2\n    num_skirts = 2\n    total_outfits = num_shirts * num_skirts\n\n    return total_outfits\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The pattern is that each number is multiplied by 3 to get the next number.\n    # 1 * 3 = 3\n    # The next number in the sequence should be 3 * 3.\n    next_number = 3 * 3\n    return next_number\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given the 7th, 8th, and 9th terms of the sequence\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n    \n    # Calculate common difference of arithmetic sequence\n    common_difference = eighth_term - seventh_term\n    \n    # Calculate the first term using the 7th term and common difference\n    first_term = seventh_term - (7 - 1) * common_difference\n    \n    # Calculate the 100th term using the first term and common difference\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert decimal numbers 45 and 66 to base 7\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    \n    # Add the two numbers in base 10\n    sum_base_10 = num1 + num2\n    \n    # Convert the sum back to base 7\n    if sum_base_10 == 0:\n        return '0'\n    base7 = []\n    while sum_base_10 > 0:\n        base7.append(str(sum_base_10 % 7))\n        sum_base_10 //= 7\n    ans = ''.join(reversed(base7))\n    \n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # let the original number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio is 1:2, so we set up the equation (3x - 48) / 5x = 1/2\n    # Solve for x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x - 48) / (5*x), 1/2)\n    x_value = solve(equation, x)[0]\n\n    # The number of lemons originally is 5x\n    lemons_original = 5 * x_value\n\n    return lemons_original\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Each animal's daily consumption rate\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n    \n    # Total daily consumption rate\n    total_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Total bales of hay\n    total_bales = 22\n\n    # Number of days the bales will last\n    days = total_bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5 / 8) * 160\n    return result\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let the mother's current age be M and the daughter's current age be D.\n    # We're given two conditions:\n    # 1. M + (M - D) = 75, which simplifies to 2M - D = 75\n    # 2. M - D = D - 3, which simplifies to M - 2D = -3\n\n    # Using these two equations, we can set up a system of linear equations and solve for M and D.\n    from sympy import symbols, Eq, solve\n\n    M, D = symbols('M D')\n\n    eq1 = Eq(2 * M - D, 75)\n    eq2 = Eq(M - 2 * D, -3)\n\n    solutions = solve((eq1, eq2), (M, D))\n\n    return solutions[M]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for d1 in permutations('2014', 4):\n        for month in range(1, 13):\n            for day in range(1, 32):\n                # Check if the day and month are valid together\n                if month == 2 and day > 28:\n                    continue\n                if month in [4, 6, 9, 11] and day > 30:\n                    continue\n\n                # Form the date string\n                date = ''.join(d1) + f'{month:02d}' + f'{day:02d}'\n\n                # Count the occurrence of 0, 1, and 2 \n                if date.count('0') == date.count('1') == date.count('2'):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # The worst-case scenario is that Isabella picks all the green and yellow apples first. \n    green = 11\n    yellow = 7\n    red_needed = 3\n\n    # She needs to pick all the green and yellow apples,\n    # and then she will surely get 3 red apples on her next 3 picks.\n    apples_to_take = green + yellow + red_needed\n\n    return apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*(x+2), 51+2*(x-1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200.0\n    final_value = 204.0\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed_pupils = 21\n    total_girls = 16\n\n    # As we need the smallest number of right-handed girls, the remaining pupils must all be right-handed boys.\n    # Therefore, we subtract the number of right-handed pupils from the total number of pupils to find the number of left-handed pupils.\n    left_handed_pupils = total_pupils - right_handed_pupils\n\n    # The number of left-handed girls must be at most the total number of girls.\n    # So, the smallest number of right-handed girls will be the total number of girls minus the number of left-handed pupils.\n    smallest_right_handed_girls = max(0, total_girls - left_handed_pupils)\n\n    return smallest_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    initial_price = 6400\n    discount_rate = 0.80\n    savings = initial_price / (1 - discount_rate)\n    return savings - initial_price\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament, every team plays against every other team once.\n    # Hence, the number of games played is the combination of 6 teams taken 2 at a time.\n    num_games = (6 * 5) // 2\n\n    # In each game, there are 2 points to be distributed (either two to the winner,\n    # or one to each in the case of a tie). So, the total number of points distributed\n    # over all games is double the number of games.\n    total_points = 2 * num_games\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_children = 45\n    children_per_minibus = 8\n\n    minibuses_needed = -(-total_children // children_per_minibus)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # The scenario is the worst case scenario for drawing one of each color.\n    # Since she might draw all marbles of other colors before getting one of each.\n\n    # Therefore, draw the maximum number of marbles of each color minus one,\n    # and then add 1 to ensure the fourth color.\n\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Draw all but one from red, green, blue and then one orange.\n    marbles_drawn = (red - 1) + (green - 1) + (blue - 1) + 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    factor_5_count = 0\n    while factor_5_count < 28:\n        temp_n = n\n        while temp_n % 5 == 0:\n            factor_5_count += 1\n            temp_n //= 5\n        n += 1\n    return n - 1  # Subtract 1 because we added 1 at the end of the loop\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(1, 42))  # 41 is our upper bound for 3a + 7b, so we only consider primes less than 41.\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet = 1\n    win_amount = 10\n\n    # enumerate all possible outcomes for two dice\n    outcomes = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if (die1 + die2) > 10:\n                outcomes += 1\n\n    # calculate probability of winning\n    probability_win = outcomes / (6 * 6)\n\n    # calculate expected win per roll\n    expected_win = probability_win * (win_amount - bet) - (1 - probability_win) * bet\n    \n    # expected loss is negative of expected win\n    expected_loss = total_rolls * -expected_win\n    \n    return expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    girls, girls_swim, girls_not_swim, boys, boys_swim, boys_not_swim = symbols(\n        'girls girls_swim girls_not_swim boys boys_swim boys_not_swim'\n    )\n    \n    # The ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49.\n    # The number of boys who can swim is 120 less than the number of boys who cannot swim.\n    # There are 90 more boys than girls in the school.\n    # There are 1690 pupils in the school.\n    equation1 = Eq(girls_not_swim / girls_swim, 49 / 31)\n    equation2 = Eq(boys_swim, boys_not_swim - 120)\n    equation3 = Eq(boys, girls + 90)\n    equation4 = Eq(girls + boys, 1690)\n    equation5 = Eq(girls, girls_swim + girls_not_swim)\n    equation6 = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solve the system of equations\n    solutions = solve(\n        (equation1, equation2, equation3, equation4, equation5, equation6),\n        (girls, girls_swim, girls_not_swim, boys, boys_swim, boys_not_swim)\n    )\n\n    # Total pupils who cannot swim is the sum of girls who cannot swim and boys who cannot swim\n    total_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    remaining_after_phone = 1 - (740 / (1 - 0.75))\n    salary = 740 / remaining_after_phone\n    return salary\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 4]\n    perm = permutations(digits)\n\n    return len(list(perm))\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible 4-digit numbers that can be displayed on the clock using 0, 1, 2, 3\n    possible_times = set(int(''.join(p)) for p in permutations('0123', 4) if int(p[2]) < 6)\n    \n    # Convert current time to minutes\n    current_time = 2 * 60 + 31  # 02:31 in minutes\n    \n    # Find the next time where all digits 0, 1, 2, 3 appear together again\n    next_time = min(time for time in possible_times if time > current_time)\n    \n    # Calculate the difference in minutes\n    ans = next_time - current_time\n    \n    return ans\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_of_4pc = 7\n    cost_of_6pc = 8.5\n\n    cost_per_pc_4pc = cost_of_4pc / 4\n    cost_per_pc_6pc = cost_of_6pc / 6\n\n    if cost_per_pc_4pc < cost_per_pc_6pc:\n        ans = \"4pc is a better buy\"\n    elif cost_per_pc_4pc > cost_per_pc_6pc:\n        ans = \"6pc is a better buy\"\n    else:\n        ans = \"Both are equally good\"\n\n    return ans\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100\n    original = after_class * 2\n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    initial_condition = Eq(lynn, mary)\n    spending_condition = Eq(mary - 58, 3 * (lynn - 160))\n\n    solutions = solve((initial_condition, spending_condition), (lynn, mary))\n\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "网络故障，请重试"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    total_weight_without_apples = 280\n    number_of_apples_removed = 3\n    number_of_apples_in_basket = 5\n\n    weight_of_removed_apples = total_weight_with_apples - total_weight_without_apples\n    weight_of_one_apple = weight_of_removed_apples / number_of_apples_removed\n    weight_of_basket = total_weight_with_apples - (weight_of_one_apple * number_of_apples_in_basket)\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3 / 7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3 / 8) * remaining_after_monday\n    remaining_grapes = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3 / 4\n    num_small_bags = remaining_grapes / small_bag_weight\n\n    return int(num_small_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    remaining_tickets = 28\n    sold_percentage = 0.60\n\n    total_tickets = remaining_tickets / (1 - sold_percentage)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    # Given in the problem\n    quotient = 27\n    remainder = 9\n\n    # The minimum divisor must be greater than the remainder,\n    # otherwise the same quotient could be achieved with a smaller one.\n    # hence the minimum divisor must be at least remainder + 1\n    divisor = remainder + 1\n\n    # Formula for dividend: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jerry, devi = symbols('jerry devi')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (jerry, devi))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_subtrahend in range(10):\n        for ones_subtrahend in range(10):\n            for tens_minuend in range(10):\n                for ones_minuend in range(10):\n                    minuend = tens_minuend * 10 + ones_minuend\n                    subtrahend_mistake = (tens_subtrahend + 2) * 10 + (ones_subtrahend - 1)\n                    subtrahend_correct = tens_subtrahend * 10 + ones_subtrahend\n                    \n                    if minuend - subtrahend_mistake == 36:\n                        correct_difference = minuend - subtrahend_correct\n                        return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    \n    equation = Eq(5 * number - 4, 41)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    num_jugs = -(-total_ml // jug_capacity)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    numerator = 100\n    denominator = 97\n    term = numerator / denominator\n    ans = term\n    while numerator > 4:\n        numerator -= 1\n        denominator -= 1\n        term *= (numerator / denominator)\n        ans += term\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    total_matches = 220\n\n    weight_of_all_matches = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_all_matches / total_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n\n    # Let's say all animals are birds with 2 legs, compute the excess legs\n    # Assuming all animals are birds (2 legs each), total legs would be 1300 * 2\n    total_bird_legs = total_animals * 2\n    excess_legs = total_legs - total_bird_legs\n\n    # Since cows have 4 legs, for each cow, there are 2 \"excess\" legs\n    # Therefore, the number of cows is the total excess legs divided by 2\n    num_cows = excess_legs // 2\n\n    return num_cows\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    num = 96\n    factors_count = sum(1 for i in range(1, num + 1) if num % i == 0)\n    return factors_count\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 2 != 0 and number % 9 == 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # Initial number of balls (49 red and 1 blue)\n    target_percentage = 0.9  # 90%\n    blue_ball = 1  # There is only 1 blue ball\n\n    # Let x be the number of red balls to remove.\n    # After removing x red balls, the total number of balls becomes total_balls - x.\n    # We want the number of remaining red balls (49 - x) to be 90% of the total balls.\n    # Therefore, the equation is: (49 - x) / (total_balls - x) = target_percentage\n    # Solve for x.\n\n    for x in range(49):\n        if (49 - x) / (total_balls - x) == target_percentage:\n            return x\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    ben_pens = jenny_pens - pens_given_to_ben\n    \n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_trees = 2\n    distance_between_lamp_posts = 10\n    number_of_trees = 21\n    total_distance = (number_of_trees - 1) * distance_between_trees\n\n    num_lamp_posts = (total_distance // distance_between_lamp_posts) + 1\n\n    return int(num_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    mass1, mass2 = 500, 500  # Mass of the cars in kg\n    velocity1, velocity2 = 20, 30  # Velocities of the cars in m/s\n\n    # Since the cars lock bumpers and stick together, the momentum before and after collision is conserved.\n    # Let v_x and v_y be the velocity components of the combined mass after the collision.\n\n    v_x, v_y = symbols('v_x v_y')\n    \n    # Conservation of momentum in the x-direction (due west)\n    equation1 = Eq(-mass1 * velocity1, (mass1 + mass2) * v_x)  # Negative sign because west is the negative x direction\n\n    # Conservation of momentum in the y-direction (due north)\n    equation2 = Eq(mass2 * velocity2, (mass1 + mass2) * v_y)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (v_x, v_y))\n\n    # The velocity of the resulting mass is the vector sum of the individual components.\n    result_velocity = sqrt(solutions[v_x]**2 + solutions[v_y]**2)\n\n    return result_velocity.evalf()\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # Equation 1: 5 laptops + 4 DVD players = 14438\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    \n    # Equation 2: 1 laptop + 1 DVD player = 2960\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    types_of_handbags = sizes * colors\n    return types_of_handbags\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original average weight\n    # Let n be the original number of people in the group\n    x, n = symbols('x n')\n    \n    # Equation 1: Before Aaron joined\n    original_total_weight = n * x\n    \n    # Equation 2: After Aaron joined, the new average is 61 kg\n    equation1 = Eq((original_total_weight + 45) / (n + 1), 61)\n    \n    # Equation 3: After Ben joined, the new average is 62 kg\n    equation2 = Eq((original_total_weight + 45 + 71) / (n + 2), 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):  # Three different digits\n        s, o, n = perm\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money:\n            return e  # Value of one triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # j must be greater than i to avoid repetition\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    num_full_patterns = 2000 // len(pattern)\n    remainder = 2000 % len(pattern)\n\n    sum_full_patterns = sum(pattern) * num_full_patterns\n    sum_remainder = sum(pattern[:remainder])\n\n    return sum_full_patterns + sum_remainder\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let h be the number of hours passed since midnight\n    # Then (12 - h) is the number of hours remaining until noon\n    # According to the problem, h = 2 * (12 - h)\n    # Solve the equation for h\n    for h in range(1, 12):\n        if h == 2 * (12 - h):\n            return h\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # In the worst case, Sheila takes out 3 blue balls, 3 orange balls, and 2 yellow balls without getting 4 of the same color.\n    # After this, any next ball she takes out must result in 4 balls of the same color.\n    # So she needs to take out 3 (blue) + 3 (orange) + 2 (yellow) + 1 (the next ball) = 9 balls.\n\n    ans = 3 + 3 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    weight_oranges_kg = 4.1\n    price_mangoes_per_kg = 2.3\n    weight_mangoes_kg = 2\n\n    total_cost_oranges = price_oranges_per_kg * weight_oranges_kg\n    total_cost_mangoes = price_mangoes_per_kg * weight_mangoes_kg\n\n    total_cost = total_cost_oranges + total_cost_mangoes\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    part1 = (45 / 9) * (100 / 10)\n    part2 = (23 - 19)\n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    total = sum(numbers)\n    mean = 5\n    number_count = len(numbers) + 1  # including 'a'\n    sum_with_a = mean * number_count\n    a = sum_with_a - total\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of days B will take to finish the remaining job\n    days_B = symbols('days_B')\n\n    # Define the work done by one full job as 1\n    full_job = 1\n\n    # Calculate the proportion of work A does per day\n    work_A_per_day = full_job / 15\n\n    # Calculate the proportion of work B does per day\n    work_B_per_day = full_job / 10\n\n    # Calculate the work done by A and B together in 4 days\n    work_done_4_days = 4 * (work_A_per_day + work_B_per_day)\n\n    # Calculate the remaining work after 4 days\n    remaining_work = full_job - work_done_4_days\n\n    # Find in how many days B can finish the remaining work\n    equation = Eq(work_B_per_day * days_B, remaining_work)\n    days_B_solution = solve(equation, days_B)\n    \n    return days_B_solution[0]\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    base = sum(range(1, 14))  # The base sum from 1 to 13\n    return 2 * base - 13  # Double the base sum and subtract the repeating 13 in the middle\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    reduction_percentage = (reduction_amount / original_price) * 100\n\n    return reduction_percentage\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_students = 0\n    for boys_edge in range(2, 100, 2):  # Starting from 2 and considering only even numbers as edges.\n        boys = boys_edge * boys_edge  # Total boys in the square layer.\n        girls_edge = boys_edge - 1  # Girls are in the adjacent inner layer.\n        girls = girls_edge * girls_edge if girls_edge > 0 else 0  # Avoid negative values for girls.\n        if boys - girls == 52:  # The condition given in the problem.\n            total_students = boys + girls  # Sum of boys and girls.\n            break  # Once found, no need to continue the loop.\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # Import math module for logarithm and ceiling function\n    import math\n    \n    # Total number of bottles\n    total_bottles = 1000\n    \n    # Calculate the minimum number of test tubes required using logarithm base 2\n    # We use ceil to round up to the nearest whole number because we can't have a fraction of a test tube\n    min_test_tubes = math.ceil(math.log(total_bottles, 2))\n    \n    return min_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    n = 100  # Start with the smallest three-digit number\n    while True:\n        if n % 5 == 1 and n % 6 == 1 and n % 7 == 1:\n            return n\n        n += 1  # Increment n until we find the solution\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres = 2.5\n    mililitres_per_litre = 1000\n    n = litres * mililitres_per_litre\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    # Work backwards from the remaining sweets\n    remaining_after_day4 = 6  # After eating on the fourth day\n    \n    # Reverse the process of the fourth day\n    before_eating_day4 = remaining_after_day4 * (1 / (1 - 1/4))\n    \n    # Reverse the process of the third day\n    before_eating_day3 = before_eating_day4 * (1 / (1 - 1/5))\n    \n    # Reverse the process of the second day\n    before_eating_day2 = before_eating_day3 * (1 / (1 - 1/6))\n    \n    # Reverse the process of the first day\n    initial_sweets = before_eating_day2 * (1 / (1 - 1/7))\n    \n    return initial_sweets\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total number of cookies.\n    total_cookies = symbols('total_cookies')\n    \n    # Charlene kept half of the cookies plus 8.\n    charlene_kept = (total_cookies / 2) + 8\n    \n    # Emerald got the remaining part.\n    emerald_got = total_cookies - charlene_kept\n    \n    # Emerald ate a third of what she got plus 4.\n    emerald_ate = (emerald_got / 3) + 4\n    \n    # Emerald gave the remaining cookies to Hebe.\n    hebe_got = emerald_got - emerald_ate\n    \n    # Hebe ate a quarter of what she got, and had 42 left.\n    hebe_ate = hebe_got / 4\n    hebe_left = hebe_got - hebe_ate\n    \n    # Creating an equation based on Hebe having 42 cookies left.\n    equation = Eq(hebe_left, 42)\n\n    # Solving for the total number of cookies.\n    solutions = solve(equation, total_cookies)\n\n    # Returning the number of total cookies.\n    return solutions[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # n * (n - 1) = total matches * 2\n    # Because each team plays with each other team twice, we need to divide by 2\n    total_matches = 30\n    \n    # Now we try to find n such that n * (n - 1) / 2 = total matches\n    # We will iterate over possible number of teams until we find the correct number\n    n = 1\n    while (n * (n - 1)) / 2 != total_matches:\n        n += 1\n        # If n becomes too large, we stop the loop to avoid infinite loops\n        if n > total_matches:\n            return \"No solution found\"\n\n    return n\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_sets = 3600\n    sets_per_5_days = 720\n    days_per_set = 5 / sets_per_5_days\n    total_days_needed = days_per_set * total_sets\n    return total_days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Function to calculate Fibonacci number which corresponds to number of ways to reach a certain step.\n    def fib(n):\n        a, b = 0, 1\n        for i in range(n):\n            a, b = b, a + b\n        return a\n        \n    # Total ways to reach the 5th step\n    ways_to_5th = fib(6)  # Added one because fib(6) is actually the 5th step (fib sequence is 0-indexed)\n    \n    # Total ways to reach the 10th step from the 5th\n    ways_from_5th_to_10th = fib(6)  # Because there are 5 steps left from the 5th to 10th step and we use fib(6)\n\n    # The total number of different ways to climb the stairs\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the three numbers\n    first_number, second_number, third_number = symbols('first_number second_number third_number')\n\n    # Define the equations based on the problem\n    equation1 = Eq(first_number, second_number + 1099)\n    equation2 = Eq(third_number, second_number - 877)\n    equation3 = Eq(first_number + second_number + third_number, 7656)\n\n    # Use sympy to solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_number, second_number, third_number))\n\n    return solutions[second_number]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 45\n    \n    equation = Eq(girls, 3 * boys - 21)\n    \n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    numbers = [2, 2, 2, 3, 8, 5, 5, 25]\n    product = 1\n    for number in numbers:\n        product *= number\n\n    count_zero = 0\n    while product % 10 == 0:\n        count_zero += 1\n        product //= 10\n\n    return count_zero\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # 7^2 = 49 and 8^2 = 64, but we need square numbers between 40 and 50\n        n = i**2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150\n    water_per_cup = 40\n    cups_poured = 3\n    water_left = initial_water - water_per_cup * cups_poured\n    return water_left\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, lambs have 4 legs each\n    duckling_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    \n    # Calculate the remaining legs after ducks and geese\n    remaining_legs = 36 - (duckling_legs + baby_geese_legs)\n    \n    # Since each lamb has 4 legs, divide the remaining legs by 4 to find the number of lambs\n    num_lambs = remaining_legs // 4\n    \n    return num_lambs\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the items\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Equations based on the given information\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_age, sister_age = symbols('alice_age sister_age')\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice_age, 2 * sister_age)\n    # In 10 years' time, their total age will be 53 years old\n    equation2 = Eq(alice_age + 10 + sister_age + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice_age, sister_age))\n\n    return solutions[alice_age]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for consecutive natural numbers\n    n = symbols('n', integer=True, positive=True)\n\n    # Create equation for the product of four consecutive numbers\n    equation = Eq(n * (n + 1) * (n + 2) * (n + 3), 3024)\n\n    # Solve for n\n    solutions = solve(equation, n)\n\n    # Filter positive solutions and find the largest number\n    solutions = [sol for sol in solutions if sol.is_real and sol > 0]\n    largest_n = max(solutions) + 3  # We add 3 because we want the largest of the four numbers\n\n    return largest_n\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan_cards, bob_cards = symbols('alan_cards bob_cards')\n    equation1 = Eq(bob_cards, alan_cards + 15)\n    equation2 = Eq(bob_cards + 25, 3 * alan_cards)\n\n    solutions = solve((equation1, equation2), (alan_cards, bob_cards))\n\n    return solutions[alan_cards]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Find the least common multiple of the pack sizes\n    common_pack_size = lcm(6, 8, 9, 15)\n    \n    # Calculate how many packs of the common_pack_size he needs\n    packs_needed = -(-1000 // common_pack_size)\n    \n    # Calculate the total number of packs for each type\n    total_packs = packs_needed * 4  # Since he buys an equal number of each type\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    students = 10\n    handshakes = students * (students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    first_recurring = '11992517'\n    second_recurring = '34567'\n    \n    # Note: Since we are looking for the nth digit and the repeating patterns have different lengths,\n    # we only need to compare the nth digit in the repeating sequences when they align.\n    # To do that, we iterate and find the indexes where they align.\n\n    # We start with index 1 because the problem description specifies the decimal part\n    i = 1\n    while True:\n        # The repeating digits are at positions corresponding to the modulus of (i - 1)\n        first_index = (i - 1) % len(first_recurring)\n        second_index = (i - 1) % len(second_recurring)\n        \n        # Compare the digits at the current position\n        if first_recurring[first_index] == second_recurring[second_index] == '7':\n            return i\n        i += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    \n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    \n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100 * 90) - (90 / 100 * 20)\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # in grams\n    \n    water_weight = (water_ratio * orange_weight) / orange_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    desired_average = 8.5\n    total_scores_needed = desired_average * 5\n    current_total = sum(scores)\n    score_needed = total_scores_needed - current_total\n    return score_needed\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000\n    total_interest = 816\n    interest_rate = symbols('r')\n\n    # Using the compound interest formula A = P(1 + r/n)^(nt)\n    # Since the interest is compounded annually, n = 1\n    # for two years, t = 2. \n    # We have total interest I = A - P, and since A = P + I, we substitute A = 10000 + 816\n    # Thus, the formula becomes: 10816 = 10000(1 + r)^2\n\n    equation = Eq(principal * (1 + interest_rate)**2, principal + total_interest)\n\n    solutions = solve(equation, interest_rate)\n\n    # Assuming the interest rate is positive and the bank didn't lose money,\n    # filtering out the positive solution\n    positive_solution = [sol for sol in solutions if sol > 0]\n\n    # Converting the decimal interest rate to percentage\n    interest_rate_percent = positive_solution[0] * 100\n\n    return interest_rate_percent.evalf()\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Johnny's incorrect step: He should have multiplied the quotient by the divisor, not the remainder\n    correct_product = quotient * divisor\n    \n    # Adding the remainder to the correct product to find the dividend\n    dividend = correct_product + remainder\n    \n    # Now check if the division is correct with the computed dividend:\n    # dividend ÷ divisor should give quotient and remainder 2\n    correct_quotient = dividend // divisor\n    correct_remainder = dividend % divisor\n    \n    # Check if Johnny's quotient and remainder match the correct ones\n    if correct_quotient == quotient and correct_remainder == remainder:\n        correct = True\n    else:\n        correct = False\n\n    # Return if Johnny's answer correct and the correct dividend if not\n    return (correct, dividend) if not correct else (correct, None)\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let's denote the original number as x\n    # According to the problem statement, if we double x and then add 7, we get 43\n    # So the equation is: 2 * x + 7 = 43\n\n    # In order to find x, we perform the inverse operations on 43\n    # First, we subtract 7, and then we divide the result by 2\n\n    # Subtract 7 from 43\n    result_after_subtracting = 43 - 7\n\n    # Now divide by 2 to get the original number\n    original_number = result_after_subtracting / 2\n\n    # Return the result\n    return original_number\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # total number of pages\n    total_pages = 550\n\n    # pages read on the first day\n    first_day_pages = 30\n\n    # pages read on the last day\n    last_day_pages = 70\n\n    # Because Jason reads an arithmetic sequence of pages, we can calculate the number of days he reads using the formula for the sum of an arithmetic series:\n    # total_pages = (first_day_pages + last_day_pages) / 2 * number_of_days\n    # We also know that:\n    # last_day_pages = first_day_pages + (number_of_days - 1) * d\n    # where d is the common difference we are looking to find\n    # We can express the number of days (number_of_days) in terms of d and then solve for d\n\n    # Rearrange the formula for last_day_pages to express number_of_days:\n    # number_of_days = ((last_day_pages - first_day_pages) / d) + 1\n\n    # Substitute this into the total_pages formula to get a single equation in terms of d:\n    # total_pages = ((2 * first_day_pages + ((last_day_pages - first_day_pages) / d) * d) / 2) * (((last_day_pages - first_day_pages) / d) + 1)\n\n    # After simplifying and solving for d, we get:\n    # total_pages = (first_day_pages + last_day_pages) / 2 * (((last_day_pages - first_day_pages) / d) + 1)\n\n    # Clearing the fractions, we get:\n    # 2 * total_pages = (first_day_pages + last_day_pages) * (((last_day_pages - first_day_pages) / d) + 1)\n    # 2 * total_pages = (first_day_pages + last_day_pages) * (last_day_pages - first_day_pages + d) / d\n    # 2 * d * total_pages = (first_day_pages + last_day_pages) * (last_day_pages - first_day_pages + d)\n\n    # We need to find d such that it is an integer and satisfies the above equation.\n    # We can use a brute force approach to find the common difference (d).\n\n    # Try every possible d from 1 up to the last_day_pages - first_day_pages\n    for d in range(1, last_day_pages - first_day_pages + 1):\n        if 2*total_pages == (first_day_pages + last_day_pages)*(last_day_pages - first_day_pages + d)/d:\n            return d\n\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Hannah be x cm/s\n    hannah_speed = symbols('hannah_speed')\n\n    # Since the speed ratio is inverse of the time ratio and Peter is 15 cm/s faster than Hannah\n    equation = Eq((hannah_speed + 15) / hannah_speed, 3 / 4)\n    \n    # Solve for hannah_speed\n    hannah_speed_value = solve(equation, hannah_speed)\n\n    return hannah_speed_value[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of initial coins be x\n    # Let the number of initial fifty-cent coins be (2/7)*x\n    # Let the number of initial one-dollar coins be x - (2/7)*x = (5/7)*x\n    x = symbols('x')\n    \n    # After receiving the coins from his mother, Owen has:\n    # (2/7)*x + (5*2) fifty-cent coins and (5/7)*x + 10 one-dollar coins\n    # But it's given that in the end, he had twice as many one-dollar coins as fifty-cent coins\n    \n    # Equation: 2 * [(2/7)*x + 10] = (5/7)*x + 10 + (5*2)\n    equation = Eq(2 * ((2/7) * x + 10), (5/7) * x + 10 + (5*2))\n    \n    # Solving for x to find the initial total number of coins\n    initial_total = solve(equation, x)\n    return initial_total[0]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_minutes = 90\n    multiple_choices_minutes = 23\n    fill_in_blank_minutes = 35\n\n    short_answers_minutes = total_minutes - multiple_choices_minutes - fill_in_blank_minutes\n\n    return short_answers_minutes\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850\n    speed = 30\n    time = 45\n    \n    tunnel_length = (speed * time) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n\n    # The maximum number of regions that can be created with n circles is given by\n    # the recursive formula: R(n) = R(n - 1) + n, where R(0) = 1.\n    # This is because each new circle can intersect every other circle at most 2 times,\n    # creating n additional regions.\n    max_regions = 1  # Starting with one region without any circles\n\n    for i in range(1, circles + 1):\n        max_regions += i\n\n    # Each line can intersect existing regions, creating additional regions equal to the number of lines\n    max_regions += line\n\n    return max_regions\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4]\n    ways = 0\n    \n    for perm in permutations(entrances, 3):\n        if perm[0] != perm[1]:  # Joe and Mike cannot join the same entrance\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    # Kenneth's total pocket money\n    total_money = 55\n\n    # Kenneth's savings\n    savings = 32.5\n\n    # Money spent on food and transportation\n    spent_total = total_money - savings\n\n    # Let the amount spent on transportation be x, so the amount spent on food is 2x\n    # Hence we get the equation: x + 2x = spent_total\n    # Solving for x gives us the amount spent on transportation\n    transportation = spent_total / 3\n\n    # The amount spent on food is twice the amount on transportation\n    food = 2 * transportation\n\n    # Return the amount spent on food\n    return food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed service fee\n    service_fee = 4\n    # Rate for the first 3 tons\n    initial_rate = 4\n    # Rate for each additional ton\n    additional_rate = 3\n    # Total money Irene can spend\n    total_money = 109\n\n    # Total cost for the first 3 tons\n    initial_cost = service_fee + (3 * initial_rate)\n    # Money left for additional tons\n    money_for_additional_tons = total_money - initial_cost\n\n    # Calculate maximum additional tons she can use\n    additional_tons = money_for_additional_tons // additional_rate\n\n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n\n    return int(total_tons)\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    return (45 + 13)\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    equation1 = Eq(bala, daniel + 320)\n    equation2 = Eq(bala, 1/2 * (amelia + carl + daniel))\n    equation3 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n\n    smallest_dividend = quotient * (smallest_divisor + 1) + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time it takes for the lazy gardener to mow the lawn alone.\n    # Quick gardener's work rate is 1/12 lawns per hour.\n    # Lazy gardener's work rate is 1/x lawns per hour.\n    # Together, their work rate is 1/8 lawns per hour.\n\n    # The work rates add up when they work together:\n    # 1/12 + 1/x = 1/8\n\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq(1/12 + 1/x, 1/8)\n    solution = solve(equation, x)\n\n    # Return the time it takes for the lazy gardener to mow the lawn alone:\n    return solution[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples - apples / 3 + oranges - oranges / 2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits.evalf()\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0\n    number_of_girls = 3\n    candy_per_girl = total_candy // number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had at first\n    # After Belinda gave 7 tomatoes to Matthew, they have the same number of tomatoes\n    # Belinda had 36 tomatoes at first, so after giving away 7, she has 36 - 7 tomatoes left\n    # Therefore, we have the equation:\n    # x + 7 = 36 - 7\n    # Solving for x gives us the number of tomatoes Matthew had at first\n    x = (36 - 7) - 7\n    return x\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining = 5*x\n    \n    # Setting up the equation:\n    # Initial amount = Cost of dresses + Cost of skirts + Remaining amount\n    equation = Eq(initial_amount, dress_cost*x + skirt_cost*x + remaining)\n    \n    # Solving for x:\n    solved_value = solve(equation, x)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - floor(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # Green line train interval in minutes\n    red_line_interval = 6    # Red line train interval in minutes\n    start_time = 5 * 60      # Start time in minutes (5 am)\n\n    # Calculate least common multiple (LCM) to find the next same departure time\n    from math import lcm\n    interval_lcm = lcm(green_line_interval, red_line_interval)\n\n    # Calculate the next departure time in minutes since midnight\n    next_departure_time = start_time + interval_lcm\n\n    # Convert the time into hours and minutes\n    hours = next_departure_time // 60\n    minutes = next_departure_time % 60\n\n    return f\"{hours}:{str(minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    prod = 1\n    sum_seq = 0\n    for i in range(1, 15):\n        if i % 2 == 1 or i == 2:\n            prod *= i\n        sum_seq += prod\n\n    ans = sum_seq\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990  # capacity in milliliters\n    jug_half_full = jug_capacity_ml / 2  # half of the jug capacity\n    num_cups = 3  # number of cups\n\n    capacity_per_cup_ml = jug_half_full / num_cups  # capacity of each cup in milliliters\n\n    return capacity_per_cup_ml\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    trees = 101\n    distance_per_tree = 3\n    time_walking_trees = 3 * 60  # convert minutes to seconds\n    \n    # Calculate the distance Olivia walks from the first tree to the 101th tree\n    distance_walking_trees = (trees - 1) * distance_per_tree\n    \n    # Calculate walking speed in meters per second\n    walking_speed = distance_walking_trees / time_walking_trees\n    \n    # Calculate the time it takes for Olivia to reach home from school\n    distance_to_home = 4000\n    time_to_home = distance_to_home / walking_speed\n    \n    return time_to_home / 60  # convert seconds back to minutes\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n    \n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n    \n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    cost_for_five_bananas = 5 * solutions[banana]\n\n    return cost_for_five_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)  # Round to the nearest 1000\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    def square_sum(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    sum_of_squares = square_sum(124 // 4) - square_sum((4 // 4) - 1)\n    return 4**2 * sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen traded 5 fish for 2 rabbits: 1 rabbit = 5/2 fish\n    # Oscar traded 4 rabbits for 7 packs of wheat: 1 pack of wheat = 4/7 rabbits\n    # Therefore, 1 pack of wheat = (5/2) * (4/7) fish = 10/7 fish\n    # For 14 packs of wheat: 14 * (10/7) fish = 20 fish\n\n    fish_for_one_pack_of_wheat = (5/2) * (4/7)\n    fish_for_fourteen_packs_of_wheat = 14 * fish_for_one_pack_of_wheat\n\n    return int(fish_for_fourteen_packs_of_wheat)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import product\n\ndef solution():\n    # There are 3 entrances and 4 people, so each of the initial states can range from 1 to 3\n    states = list(product(range(1, 4), repeat=4)) \n\n    # Filter out the states where all three entrances are not used\n    valid_states = [state for state in states if len(set(state)) == 3]\n\n    # Count the number of valid states\n    count = len(valid_states)\n\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial total number of animals as 'total'.\n    # Let 'c' be the initial number of cows, and 'g' be the initial number of goats.\n    total, c, g = symbols('total c g')\n\n    # We are given that 65% of the initial total were cows, so the number of goats was 35% of total.\n    equation1 = Eq(c, 0.65 * total)\n    equation2 = Eq(g, 0.35 * total)\n\n    # When 240 more animals were added, the cows became 85% of the new total.\n    equation3 = Eq(c + 240, 0.85 * (total + 240))\n\n    # It was also given that the number of goats doubled.\n    equation4 = Eq(g * 2, total + 240 - (c + 240))\n\n    # Solving these equations will give us the values for 'total', 'c', and 'g'.\n    solutions = solve((equation1, equation2, equation3, equation4), (total, c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    justin_age = solve(equation, justin)\n\n    return justin_age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    \n    total_time = time_per_drawing * number_of_drawings\n    \n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 100:\n        return num\n        num += 4 * 5 * 6\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    num1 = 2.6\n    num2 = 4.8\n    mid_number = (num1 + num2) / 2\n    return mid_number\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        total_cost -= 15\n    elif total_cost >= 20:\n        total_cost -= 4\n\n    return total_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    books_in_six_cases = books_per_case * 6\n    return books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as fact\n    \n    # Number of ways to arrange two boys at the ends\n    boy_arrangements = fact(2)\n    \n    # Number of ways to arrange three girls in the middle\n    girl_arrangements = fact(3)\n    \n    # Total arrangements using multiplication principle\n    total_arrangements = boy_arrangements * girl_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]  # ages of Jason, Adam, and Tom respectively\n    ages.sort()  # sorting to ensure the youngest to oldest order\n    \n    # Tom is the oldest and his age is a multiple of 3, so let's find Tom's age first\n    for age in reversed(ages):\n        if age % 3 == 0:\n            toms_age = age\n            break\n    \n    # Jason is younger than Tom and Adam is not the youngest, so Adam's age is the one left\n    ages.remove(toms_age)  # remove Tom's age to find Adam's\n    adams_age = ages[1]  # middle value after removing Tom's age\n    \n    return adams_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # We need to consider the worst case according to the Pigeonhole Principle\n    # If we take all 5 of one color, then take all other 5 of different color,\n    # we need just 1 more to guarantee that we now have all three colors.\n    worst_case = 5 + 5 + 1\n    return worst_case\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number_str = '2023'\n    n = 1\n    while True:\n        num = int(number_str * n)\n        if num % 11 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    apples_to_distribute = 28\n    # Assuming Avril gets the most, we need to minimize the apples for the others\n    # 5 other children can get 1, 2, 3, 4, and 5 apples which is minimal distribution\n    # with no two of them getting the same number of apples.\n    minimal_apples_for_others = sum(range(1, 6))\n    # Now subtract the minimal distribution from the total to find out the maximal\n    # amount Avril can get.\n    max_apples_for_avril = apples_to_distribute - minimal_apples_for_others\n    return max_apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blacktriangle, blacksquare, circle, diamond = symbols('blacktriangle blacksquare circle diamond')\n\n    equation1 = Eq(blacktriangle + blacktriangle, blacksquare)\n    equation2 = Eq(blacksquare + blacktriangle, circle)\n    equation3 = Eq(diamond, circle + blacksquare + blacktriangle)\n\n    solutions = solve((equation1, equation2, equation3), (blacktriangle, blacksquare, circle, diamond))\n\n    return solutions[diamond] / solutions[blacktriangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n\n    cost_of_laptop = total_money * fraction_spent\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed is 2 m/s\n    jocye_lori_ratio = 3 / 2  # Jocye's speed to Lori's speed ratio is 3:2\n    jocye_speed = lori_speed * jocye_lori_ratio  # Calculate Jocye's speed\n    time = 10  # Jocye runs for 10 seconds\n    distance_jocye_runs = jocye_speed * time  # Calculate the distance Jocye can run in 10 seconds\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_count = 2\n    new_count = original_count + 1\n    \n    total_original = original_average * original_count\n    total_new = new_average * new_count\n    \n    new_number = total_new - total_original\n    \n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original amount of money Lisa had, and y be the amount Ken gave to Lisa\n    x, y = symbols('x y')\n\n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(x + 15, x + y)\n\n    # After giving y dollars, Ken had $21 less than Lisa\n    equation2 = Eq((x + 15) - y, x + y - 21)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # y is the amount Ken gave to Lisa\n    return solutions[y]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Worst case scenario to not get a red marble is to get all blue and orange marbles\n    max_non_red_marbles = 18 + 8  # Total number of blue and orange marbles\n    # To ensure getting 2 red marbles, we take out all non-red marbles plus 2 more,\n    # which will be red ones since they are the only ones left.\n    marbles_to_take = max_non_red_marbles + 2  # The two red marbles that are needed\n    return marbles_to_take\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta \n\ndef solution():\n    # Time when Hannah left school.\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    # Time when Hannah caught the bus.\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    # Time taken by the bus trip in minutes.\n    bus_trip_minutes = 18\n    # Time when Hannah got in home.\n    home_arrival = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate walking time before the bus trip.\n    walking_before_bus = (catch_bus - leave_school).total_seconds() / 60\n    # Calculate walking time after the bus trip.\n    walking_after_bus = (home_arrival - (catch_bus + timedelta(minutes=bus_trip_minutes))).total_seconds() / 60\n    \n    # Total walking time is the sum of both walking periods.\n    total_walking_time = walking_before_bus + walking_after_bus\n    \n    return int(total_walking_time)\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n    difference = largest_num - smallest_num\n    return difference\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    \n    for i in range(1, 31):\n        # A student ends up facing the teacher if they turn around an even number of times\n        # Turning around for multiples of 2 (once) and multiples of 3 (another time if it's also a multiple of 3)\n        if i % 2 == 0 and i % 3 == 0:\n            # If i is a multiple of both 2 and 3, it means the student will have turned around twice\n            # and thus will be facing the teacher in the end.\n            facing_teacher += 1\n        elif i % 2 != 0 and i % 3 != 0:\n            # If i is not a multiple of 2 or 3, the student won't turn around and will be facing the teacher\n            facing_teacher += 1\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    solved_values = solve(equation, x)\n\n    # There might be multiple solutions including complex numbers\n    # We are interested in the real positive solution\n    ans = [sol.evalf() for sol in solved_values if sol.is_real and sol >= 0]\n\n    return ans[0] if ans else None  # Return the first real positive solution if exists\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6\n\n    # Let the number of cookies eaten on the first day be x.\n    # Then the total number of cookies eaten over 5 days is:\n    # x + (x + difference) + (x + 2*difference) + ... + (x + (days - 1)*difference)\n\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    # Here, n = days, first_term = x, last_term = x + (days - 1)*difference\n    # We know the sum of the series (total_cookies), so we solve for x:\n    # total_cookies = days/2 * (2*x + (days - 1)*difference)\n\n    # Rearranging the above equation to solve for x we get:\n    # x = (total_cookies * 2 / days - (days - 1)*difference) / 2\n\n    first_day_cookies = (total_cookies * 2 / days - (days - 1) * difference) / 2\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the total number of elements in the sequence after writing all the 8s\n    total_elements = sum(range(2, 9))  # From two 1s to eight 8s\n\n    # The median is the middle element in an ordered sequence\n    # If the number of elements is odd, the median is the middle number\n    # If the number of elements is even, the median is the average of the two middle numbers\n    # For this sequence, the number of elements is even (since 2+3+4+5+6+7+8 = 35, which is odd,\n    # and then multiplied by two median values will be considered due to the nature of the sequence)\n    \n    halfway_point = total_elements / 2  # This is the position of the median number\n    \n    # Now we need to find out which number corresponds to the median position\n    # We do this by accumulating the counts of each number till we reach or pass the halfway point\n    number_count = 0\n    for i in range(1, 9):\n        prev_count = number_count\n        number_count += i + 1  # Increment counts of each number according to the pattern\n        if number_count >= halfway_point:\n            # If passing halfway point, the median number is i\n            # But since the number of elements is even, we also take the next number which is also i\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    first_term = 10\n    fourth_term = 25\n    n = 25  # Total number of rows\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence\n    last_term = first_term + (n - 1) * common_difference\n    \n    # Calculate the sum of the arithmetic sequence using the formula for the sum of the first n terms\n    total_athletes = (n * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # initially the probability of the car being behind any of the three gates is 1/3.\n    # When the host opens a door with a goat, the probability of the car being behind the initially chosen gate (gate 1) remains 1/3.\n    # However, the probability is now redistributed between the remaining closed doors.\n    # Since one of the remaining doors must have the car and one door has been revealed to have a goat, the probability that the car is behind gate 2 is now 1 - 1/3 = 2/3.\n    return \"gate 2\"\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 / 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    times = 6\n    x = symbols('x')  # This represents x dollars spent each time\n    total_spent = times * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote David's original sum of money as 'x'.\n    x = symbols('x')\n\n    # David spent 75 dollars on CDs.\n    cd_expense = 75\n\n    # He was left with x - cd_expense.\n    remaining_after_cd = x - cd_expense\n\n    # He spent 1/4 of the remaining money on batteries.\n    battery_expense = remaining_after_cd / 4\n\n    # He was left with remaining_after_cd - battery_expense.\n    remaining_after_battery = remaining_after_cd - battery_expense\n\n    # Given that remaining_after_battery is 1/3 of the original sum of money.\n    # This gives us the equation:\n    equation = Eq(remaining_after_battery, x / 3)\n\n    # Solve the equation to find the value of 'x'.\n    solutions = solve(equation, x)\n\n    # Return the solution for 'x', which is David's original sum of money.\n    return solutions[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Number of Pokemon caught by one trainer in one minute\n    rate_per_trainer_per_minute = 7 / 7 / 7\n    \n    # Number of Pokemon needed to catch in 49 minutes\n    total_pokemon = 49\n\n    # Number of minutes available\n    total_minutes = 49\n    \n    # Total rate needed to catch 49 Pokemon in 49 minutes\n    required_rate = total_pokemon / total_minutes\n\n    # Number of trainers needed\n    num_trainers = required_rate / rate_per_trainer_per_minute\n\n    return int(num_trainers)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from itertools import permutations\n\ndef solution():\n    total_books = 7\n    students = 3\n    # Calculating all possible permutations of 7 books taken 3 at a time\n    all_permutations = permutations(range(total_books), students)\n    # Since permutation gives us all ordered arrangements, we count them\n    count = len(list(all_permutations))\n    return count\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    num_people = 13  # Tommy and his 12 friends\n    minutes_each = 142\n    total_time = num_people * minutes_each\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Since the number is a repetition of '928', we can analyze the pattern.\n    # A single '928' has a sum of digits equal to 9 + 2 + 8 = 19.\n    # This sum of digits leaves a remainder of 1 when divided by 9.\n    # Thus each repetition of '928' will contribute a remainder of 1.\n\n    # The 99-digit number will have '928' repeated 33 times (since 99/3 = 33).\n    # Hence, if each '928' contributes a remainder of 1, 33 repetitions will\n    # contribute a remainder of 33*1 = 33 when divided by 9.\n\n    # However, we need the remainder when 33 is divided by 9, not 33 multiplied by the remainder of '928'.\n    remainder_of_repeated_section = 33 % 9\n\n    return remainder_of_repeated_section\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    oplus = symbols('oplus')\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    solution = solve(equation, oplus)\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, c with a <= b <= c\n    # Given the sum of three numbers is 56\n    total_sum = 56\n    \n    # Given the average of the smallest two numbers is 14\n    # Therefore, sum of smallest two numbers a + b = 14 * 2\n    sum_smallest_two = 14 * 2\n    \n    # Given the average of the largest two numbers is 22\n    # Therefore, sum of largest two numbers b + c = 22 * 2\n    sum_largest_two = 22 * 2\n    \n    # We can find the median by calculating the individual sums:\n    # a + b + c = total_sum\n    # (a + b) + c = total_sum and from that c = total_sum - (a + b)\n    # a + (b + c) = total_sum and from that a = total_sum - (b + c)\n    # Therefore, the median b = total_sum - (a + c) \n    # b = total_sum + sum_smallest_two - sum_largest_two\n    median_b = total_sum - (sum_largest_two - sum_smallest_two)\n    \n    return median_b\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_num = min(numbers, key=lambda x: abs(x - target))\n    return closest_num\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let's denote the number of bars both bought as 'n'\n    \n    # Eliot pays with three £1 coins which amounts to 300p (since 1 £ = 100p) and buys bars for 12p each\n    # This gives us the first equation: 12 * n + change = 300\n    \n    # Maya pays with four £1 coins which amounts to 400p and buys bars for 17p each\n    # This gives us the second equation: 17 * n + change = 400\n    \n    # Both of them receive the same amount of change, so the change from both equations must be the same:\n    # Hence, 12 * n + change = 17 * n + change = 300p for Eliot and 400p for Maya respectively\n    \n    # Since the change is the same, we subtract the costs from the total amount paid to get the change and set them equal:\n    # 300 - 12 * n = 400 - 17 * n\n    \n    # Rearrange the equation to find 'n'\n    # 5 * n = 100\n    # n = 100 / 5\n    n = 100 // 5 # Using integer division since they cannot buy a fraction of a bar\n    \n    return n\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5, 7]\n    all_combinations = list(permutations(digits, 4))\n    \n    even_numbers = [int(''.join(map(str, comb))) for comb in all_combinations if comb[-1] % 2 == 0]\n    \n    return min(even_numbers)\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    container_capacity = 2\n\n    num_containers = total_juice / container_capacity\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    eq1 = 66 * 2 + 66 * 3\n    eq2 = 66 * 5\n    \n    return eq1 == eq2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    base_rate = 2.5\n    additional_rate = 1.2\n    additional_distance = distance - 1.8\n    total_cost = 8.5\n    \n    cost_eq = Eq(base_rate + additional_rate * additional_distance, total_cost)\n    \n    distance_solution = solve(cost_eq, distance)\n\n    return distance_solution[0]\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Assume x students get at least 3 apples each,\n    # then at least 3x apples are distributed to these x students.\n    # Since there are 80 apples, we have 3x <= 80.\n    # We solve for the largest possible x such that this inequality holds true.\n\n    # Since each of those students must get at least 3 apples,\n    # we will distribute 3 apples to each student and see how many\n    # students we can have before running out of apples.\n    \n    max_students = 80 // 3  # Using floor division to determine the maximum possible students\n    \n    # However, there might be some apples left after distributing 3 to each student.\n    # We check if there are leftovers that is at least 3, that would imply one more student could get 3 apples.\n    \n    leftover_apples = 80 % 3  # Modulo to find the remainder\n    \n    # If the leftover is at least 3, it can be given to one more student, thus increasing the count by 1.\n    if leftover_apples >= 3:\n        max_students += 1\n    \n    return max_students\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n    \n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolate = 8\n    original_chocolate = received_chocolate * 2\n    return original_chocolate\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // capacity_big_car\n    small_cars_needed = girls_in_small_cars // capacity_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_years = 100\n\n    combined_age_now = mother_age + father_age + julia_age\n    years_until_100 = total_years - combined_age_now\n\n    return years_until_100\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_in_pound = 16\n    pounds_in_kg = 2.2\n    weight_ounces = 56\n\n    weight_pounds = weight_ounces / ounces_in_pound\n    weight_kg = weight_pounds / pounds_in_kg\n\n    return round(weight_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    sum_to_80 = (80 + 5) * (80 - 5 + 1) // 2  # Sum from 5 to 80\n    sum_to_4 = (4 + 1) * (4 - 1 + 1) // 2     # Sum from 1 to 4, which we subtract twice (beginning and end)\n    # Each number from 5 to 79 appears twice, so we double the sum_to_80 and then subtract sum_to_4 once\n    ans = 2 * sum_to_80 - sum_to_4\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    digits = '123456789'\n    for perm in permutations(digits):\n        a, b, c, d, e, f, g, h, i = map(int, perm)\n        A = (a*100 + b*10 + c) + (b*100 + c*10 + d) + (c*100 + d*10 + e) + \\\n            (d*100 + e*10 + f) + (e*100 + f*10 + g) + (f*100 + g*10 + h) + \\\n            (g*100 + h*10 + i)\n        \n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    discounted_price = 32\n    further_discount = 4\n    final_price = discounted_price - further_discount\n    \n    original_price = discounted_price / (1 - 0.20)\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    fixed_positions = 3  # A, B, C have fixed relative positions\n\n    # Calculate arrangements for A, B, C\n    abc_arrangements = factorial(fixed_positions)\n\n    # Calculate arrangements for the remaining two people multiplied by\n    # the arrangements for A, B, C\n    arrangements = factorial(total_people - fixed_positions) * abc_arrangements\n\n    return arrangements\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum_ = 0\n    term = 2019\n    for i in range(3, 2012, 7):\n        sum_ += term / (i * (i + 7))\n    return sum_\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_seq = (first_term + last_term) * num_terms // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (x // 10 - x % 10) ** 2\n\n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_possible_numbers = sorted(set([''.join(p) for p in permutations(digits, 6) if p[0] != '0']))\n    return int(all_possible_numbers[504])\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    digits = ['0', '2', '3']\n    \n    three_digit_numbers_count = 0\n    \n    # First digit should not be '0'\n    for first in digits[1:]:\n        for second in digits:\n            for third in digits:\n                # Avoid repetition of digits\n                if second != first and third != first and third != second:\n                    three_digit_numbers_count += 1\n    return three_digit_numbers_count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    total_students = 36\n    class_avg = 89\n    girls_avg = 88\n    boys_avg = 91\n\n    # Let's denote the number of girls as g and the number of boys as b\n    # We know that g + b = total_students and that girls_avg*g + boys_avg*b = class_avg*total_students\n    # We can solve these equations to find g\n\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')\n    equation1 = Eq(g + b, total_students)\n    equation2 = Eq(girls_avg*g + boys_avg*b, class_avg*total_students)\n\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_rate = 1 / 40\n    # Bob's work rate per day\n    bob_rate = 1 / 60\n    # Combined work rate per day when both are working\n    combined_rate = alice_rate + bob_rate\n    # Work to be done is a full job\n    total_work = 1\n\n    # If they finish by the end of the 27th day with combined work rate\n    work_done_in_27_days = 27 * combined_rate\n    \n    # If work done is the whole job, Alice didn't take a day off\n    # Otherwise, calculate the days Alice took off\n    if work_done_in_27_days >= total_work:\n        days_off = 0\n    else:\n        # Work left after 27 days of combined work\n        remaining_work = total_work - work_done_in_27_days\n        # Number of days Alice needs to complete the remaining work alone\n        days_alice_needs_to_work_alone = remaining_work / alice_rate\n        # Days Alice took off is the remaining days minus the days she actually worked alone\n        days_off = 27 - days_alice_needs_to_work_alone\n\n    return int(days_off)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the different colored balls\n    red, white, black = symbols('red white black')\n\n    # Given ratios of balls\n    ratio_red_to_white = Eq(red, white / 2)\n    ratio_white_to_black = Eq(white, 3*black / 4)\n\n    # Total number of balls\n    total_balls = Eq(red + white + black, 136)\n\n    # Solve the system of equations\n    solutions = solve((ratio_red_to_white, ratio_white_to_black, total_balls), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a7 = 105  # 7th term\n    a9 = 135  # 9th term\n    n = 100   # Desired term number\n\n    # Formula to find the common difference: d = a[n] - a[n-2] / 2\n    d = (a9 - a7) // 2\n\n    # Formula to find the nth term: a[n] = a[1] + (n-1) * d\n    a1 = a7 - (7 - 1) * d\n   \n    a100 = a1 + (n - 1) * d\n\n    return a100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Since we want to be sure that we have at least one matching pair,\n    # we consider the worst-case scenario.\n    # If we take one red sock and one blue sock, we are not yet sure of having a matched pair.\n    # The worst case happens when we take one of each color alternatively.\n    # After taking 4 of one color (4 moves), the next sock we take must match one of the previous socks.\n    # So we need to take 4 socks of one color and 1 more sock to be sure of having a matching pair.\n    return 4 + 1\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    number_of_dogs = 3\n\n    # Each dog has aged 4 years since 4 years ago\n    # Combine current age of dogs\n    combined_current_age = combined_age_4_years_ago + (4 * number_of_dogs)\n\n    # In 2 more years, each dog will be 2 years older\n    future_combined_age = combined_current_age + (2 * number_of_dogs)\n\n    return future_combined_age\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11**2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Original ratio equation\n    equation1 = Eq(ryan / audrey, 2/7)\n\n    # New ratio after transactions\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    minute_angle = 6 * minute\n    hour_angle = (360 / 12) * (hour % 12) + (30 * minute / 60)\n    angle = abs(hour_angle - minute_angle)\n    angle = min(angle, 360 - angle)\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4  # 5 apples each for 4 sisters\n    apples_left = 20\n\n    initial_apples = justin_ate + sisters_ate + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # Total number of beads\n    total_beads = 65\n    # Pattern length in terms of bead count\n    pattern_length = 3 + 2 + 2 # Black + White + Red beads\n    # Count of black beads in one full pattern\n    black_beads_in_pattern = 3\n    \n    # Compute how many full patterns fit into the total number of beads\n    full_patterns = total_beads // pattern_length\n    \n    # Compute remaining beads after accounting for full patterns\n    remaining_beads = total_beads % pattern_length\n    \n    # Start with the count of black beads after all full patterns\n    black_beads = full_patterns * black_beads_in_pattern\n    \n    # Add extra black beads if remaining beads contain black ones\n    black_beads += min(remaining_beads, 3)\n    \n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    school_time = datetime.strptime('7:45', '%H:%M')\n    wake_up_time = school_time - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([(60 - i) if i % 4 < 2 else -(60 - i) for i in range(60)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let c represent the number of chickens, d represent the number of ducks, and w represent the number of cows.\n    # Given that the number of chickens is equal to the number of ducks, c = d\n    # Each chicken and each duck have 1 head and 2 legs. Each cow has 1 head and 4 legs.\n    # We have two equations based on the problem statement:\n    # c + d + w = 51 (total heads)\n    # 2c + 2d + 4w = 160 (total legs)\n    \n    # Since c = d, we can simplify the equations:\n    # 2c + w = 51\n    # 4c + 4w = 160\n    \n    # Now we solve the linear equations to find the number of chickens (c) and cows (w).\n    \n    # To eliminate w from the equations, multiply the first equation by 4 and subtract the second equation:\n    # 8c + 4w = 204\n    # 4c + 4w = 160\n    # Subtracting these we get 4c = 44\n    \n    # Solve for c, the number of chickens\n    c = 44 // 4\n    \n    return c\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                total = c1 + c2 + c3\n                totals.add(total)\n    return len(totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    people = ['Joe', 'Mike', 'Tina']\n    entrances = [1, 2, 3, 4]\n\n    total_ways = 0\n    for perm in permutations(people):\n        for e1 in entrances:\n            for e2 in entrances:\n                if e1 != e2:\n                    for e3 in entrances:\n                        if e3 != e1 and e3 != e2:\n                            if ('Joe' in perm and 'Mike' in perm):\n                                joe_index = perm.index('Joe')\n                                mike_index = perm.index('Mike')\n                                if joe_index < mike_index and e1 == e2:\n                                    continue\n                                elif mike_index < joe_index and e2 == e1:\n                                    continue\n                            total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice * (1/5)\n    abigail_drink = 200\n    anna_drink = 120\n\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    ans = (percentage / 100) * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22  # to the nearest hour\n    total_time_hours = (time_days * 24) + time_hours  # convert days to hours and add the additional hours\n\n    average_speed = total_distance / total_time_hours  # calculate average speed in nautical miles per hour\n\n    return round(average_speed)  # round to the nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first fruit punch in liters\n    concentration1 = 40 / 100  # fruit juice concentration of first fruit punch\n\n    volume2 = 3  # volume of second fruit punch in liters\n    concentration2 = 70 / 100  # fruit juice concentration of second fruit punch\n\n    # Calculate the total volume of the mixture\n    total_volume = volume1 + volume2\n\n    # Calculate the total amount of fruit juice\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    # Calculate the concentration of the new mixture\n    new_concentration = (total_fruit_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    start = (50 // 11) + 1  # first multiple after 50\n    end = 150 // 11  # last multiple before 150\n\n    return end - start + 1\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of women be W and men be M\n    W, M = symbols('W M')\n\n    # After 36 women left, the number of women became W - 36\n    # Which is 3/5 the number of men M\n    equation1 = Eq(W - 36, 3/5 * M)\n\n    # After 48 men boarded the second bus, the number of men became M - 48\n    # Now the number of men equals the number of women\n    equation2 = Eq(M - 48, W - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (W, M))\n\n    # Calculate the total number of people at the bus stop initially\n    total_people = solutions[W] + solutions[M]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_after_giving_to_sister = initial_stamps - 339\n    stamps_after_buying = stamps_after_giving_to_sister + 455\n    stamps_in_the_end = stamps_after_buying - 777\n    return stamps_in_the_end\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    bella_front = 15\n    albert_behind = 12\n    albert_bella = 1 + 1  # Both Albert and Bella\n\n    total_people = bella_front + albert_behind + albert_bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(20, 30))\n    ans = primes[0]  # Since we just need to write down one prime number in that range\n    return ans\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let fatouma's current age be x\n    fatouma = symbols('fatouma')\n\n    # Write the equation according to the problem statement\n    # In two years, Fatouma's age will be fatouma + 2\n    # Five years ago, Fatouma's age was fatouma - 5\n    # In two years' time, she will be twice as old as she was five years ago\n    equation = Eq(fatouma + 2, 2 * (fatouma - 5))\n\n    # Solve the equation\n    solution = solve(equation, fatouma)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    solutions = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                solutions.append((x1, x2, x3))\n                count += 1\n    return count, solutions\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "from math import ceil\n\ndef solution():\n    tallest_height = 132\n    shortest_height = 124\n    num_of_same_height = 4\n    \n    # Calculate minimum class size using Pigeonhole Principle\n    num_of_heights = tallest_height - shortest_height + 1\n    class_size = num_of_same_height * (num_of_heights - 1) + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To win, Fred must leave George with 4n + 1 oranges after his first turn.\n    # If Fred can do this, he can always mirror George's moves to leave 4 oranges\n    # after George's turn, and then Fred takes the last 3.\n    # Since the total number of oranges is 15, Fred needs to take (15 - 1) % 4 oranges.\n\n    oranges_to_take = (15 - 1) % 4\n    return oranges_to_take\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    total_go = 42\n    total_checkers = 55\n    total_chess = 33\n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    all_three = 5\n\n    # Using Inclusion-Exclusion Principle\n    total_students = (total_go + total_checkers + total_chess) - \\\n                     (go_and_checkers + go_and_chess + checkers_and_chess) + \\\n                     all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    target_sum_age = 48\n    \n    # Since both Oliver and Lin age by 1 each year, the sum of their ages increases by 2 each year.\n    # The difference between their current sum of ages and the target sum of ages can help us find the number of years.\n    current_sum_age = oliver_age_now + lin_age_now\n    difference = target_sum_age - current_sum_age\n    \n    # The number of years later when their sum of ages will be 48 is equal to the difference divided by 2 \n    # (since the sum of their ages increases by 2 each year).\n    number_of_years = difference // 2\n    \n    return number_of_years\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    poles = 40\n    distance_between_poles = 3\n\n    # Since there are no poles right outside her school and house, subtract 2 from the total number of poles (for the start and end)\n    total_distance = (poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 245\n    factors = factorint(245)\n    \n    # To make 245p a perfect cube, each prime factor's power when multiplied by p\n    # must be a multiple of 3 (since a cube of a number n is n^3)\n    p = 1\n    for prime, power in factors.items():\n        required_power = 3 - (power % 3)  # Additional power required to make it a multiple of 3\n        if required_power != 3:  # We don't want to multiply by prime^0\n            p *= prime ** required_power\n    \n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for each letter\n    E, S, A, M, O = symbols('E S A M O')\n    \n    # Create the equation as described\n    equation = Eq(E*1001 + S*1010 + 2018, A*10100 + S*1010 + S*100 + M*10 + O)\n    \n    # Define that all symbols are digits and different\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assumptions = [\n        (0 <= E) & (E <= 9),\n        (0 <= S) & (S <= 9),\n        (0 <= A) & (A <= 9),\n        (0 <= M) & (M <= 9),\n        (0 <= O) & (O <= 9),\n        Ne(E, S), Ne(E, A), Ne(E, M), Ne(E, O), \n        Ne(S, A), Ne(S, M), Ne(S, O), Ne(A, M), \n        Ne(A, O), Ne(M, O)\n    ]\n    \n    for perm in itertools.permutations(digits, 5):\n        # Map the permutation to the symbols\n        assignment = {E:perm[0], S:perm[1], A:perm[2], M:perm[3], O:perm[4]}\n        \n        # Check if this assignment satisfies the equation\n        if equation.subs(assignment) and all(assump.subs(assignment) for assump in assumptions):\n            # If a valid solution is found, calculate the required sum\n            return sum(assignment.values())\n            \nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(((-1)**(i+1) * (64 - 2*i) for i in range(10)))\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production_min = this_year_production / 4\n\n    return int(last_year_production_min) + 1\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1\n    present_students = total_students - absent_students\n    attendance_rate = (present_students / total_students) * 100\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    def sum_of_series(n):\n        # In each series, the sum is n(n+1)/2n = (n+1)/2\n        return (n + 1) / 2\n\n    ans = sum(sum_of_series(i) for i in range(2, 2018))\n    return ans\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    amount = 270\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Front to back -> Tim is 4th, which means there are 3 people in front of him\n    rows = 3 + 1  # 1 row for Tim himself\n\n    # Back to front -> Tim is 3rd, which means there are 2 people behind him\n    rows += 2  # Add the people behind Tim to get the total number of rows\n\n    # Left to right -> Tim is 1st, and doesn't affect column count directly\n    # Right to left -> Tim is 4th, which means there are 3 people to his left\n    cols = 3 + 1  # 1 column for Tim himself\n\n    # Now multiply rows and columns to find the total number of band members\n    total_members = rows * cols\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n    \n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x - 100))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_saving = 2.40\n    total_saving_goal = 150\n    \n    days_needed = total_saving_goal / daily_saving\n    weeks_needed = days_needed / 7\n\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    consecutive_sum_14 = sum(range(1, 15))\n    target_sum = consecutive_sum_14 + 2019\n\n    for i in range(1, target_sum):\n        if sum(range(i, i + 8)) == target_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = 6.5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let x be the weight of 1 chicken\n    # Let y be the weight of 1 rabbit\n    # Let z be the weight of 1 kangaroo\n\n    # According to the problem:\n    # 2y = 6x  => y = 3x (Equation 1)\n    # 3z = 4y => z = (4/3)y (Equation 2)\n\n    # Substitute Equation 1 into Equation 2:\n    # z = (4/3) * (3x) => z = 4x\n\n    # Therefore, one kangaroo weighs as much as 4 chickens\n    return 4\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = {\n        'cut_wood': 3,\n        'weave_rope': 1,\n        'dry_wood': 5,\n        'mow_grass': 1,\n        'prepare_food': 1,\n        'soak_grass': 1,\n        'choose_wood': 1\n    }\n\n    # Determine if any tasks can be done concurrently\n    concurrent_tasks = ['cut_wood', 'mow_grass', 'soak_grass', 'choose_wood']  # These tasks could be done concurrently with some of the other tasks\n    other_tasks = ['weave_rope', 'dry_wood', 'prepare_food']  # These tasks must be done one after another\n\n    concurrent_time = max(tasks[t] for t in concurrent_tasks)\n    other_time = sum(tasks[t] for t in other_tasks)\n\n    total_time = concurrent_time + other_time\n\n    return total_time\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    ans = common_factor * sum_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    ashley_age_three_years_ago = ashley_age - 3\n    brothers_age_three_years_ago = ashley_age_three_years_ago - 2\n\n    brothers_current_age = brothers_age_three_years_ago + 3\n\n    return brothers_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle and 7th from the front, so there are 6 people in front of her.\n    # Since she is in the exact middle, there must be 6 people behind her as well.\n    # Hence, the total number of dwarves is the number in front plus the number behind.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n\n    # The total number of dwarves is the sum of those in front and those behind.\n    total_dwarves = dwarves_in_front + dwarves_behind\n    \n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    # Given that each school should have at least 4 students to be counted\n    students_per_school = 4\n    num_students = 100\n\n    # Calculating the maximum number of schools that can participate\n    # using the Pigeonhole Principle.\n    max_schools = num_students // students_per_school\n    remainder = num_students % students_per_school\n\n    # If there is a remainder, we need one more school to accommodate the extra students.\n    if remainder > 0:\n        max_schools += 1\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = ((2018 + i) / 5) % 1\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i * 6) ** (1/3) % 1 == 0 and (i / 6) ** 0.5 % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    faster_train_speed = 48\n    slower_train_speed = 36\n    difference_in_distance = 70\n\n    # Since they start at the same time and meet at the same time,\n    # their travel times are the same.\n    # Let the time be t hours, then:\n    # Distance covered by faster train = faster_train_speed * t\n    # Distance covered by slower train = slower_train_speed * t\n\n    # We know the faster train covers 70 km more\n    # faster_train_speed * t = slower_train_speed * t + 70\n    # t = 70 / (faster_train_speed - slower_train_speed)\n\n    # The total distance between two stations is the sum of distances\n    # covered by both trains when they meet.\n    # So, the total distance = faster_train_speed * t + slower_train_speed * t\n\n    time_to_meet = difference_in_distance / (faster_train_speed - slower_train_speed)\n    total_distance = (faster_train_speed + slower_train_speed) * time_to_meet\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim stands 4th from the front and 3rd from the back\n    rows = 4 + 3 - 1  # Subtract 1 because Tim is counted in both positions\n\n    # Tim stands 4th from the left and 7th from the right\n    columns = 4 + 7 - 1  # Subtract 1 because Tim is counted in both positions\n\n    # Total number of band members is rows * columns\n    total_band_members = rows * columns\n\n    return total_band_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    return lcm(lcm(2, 3), 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, gigi = symbols('lily gigi')  # Lily's and Gigi's wheat in tonnes\n    \n    equation1 = Eq(lily - 36, gigi + 36 + 26)  # If Lily gave Gigi 36 tonnes\n    equation2 = Eq(lily, 8 * gigi)             # Lily's wheat is 8 times Gigi's\n    \n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Original amount Zoey had\n    original_amount = 50 + 20 + 10 + 5\n    \n    # Possible amounts after losing one coin\n    after_losing_50 = original_amount - 50\n    after_losing_20 = original_amount - 20\n    after_losing_10 = original_amount - 10\n    after_losing_5 = original_amount - 5\n    \n    # Checking for each case if the remaining amount is twice as much as her brother's\n    if after_losing_50 % 2 == 0 and after_losing_50 // 2 not in (50, 20, 10, 5):\n        lost_coin = 50\n    elif after_losing_20 % 2 == 0 and after_losing_20 // 2 not in (50, 20, 10, 5):\n        lost_coin = 20\n    elif after_losing_10 % 2 == 0 and after_losing_10 // 2 not in (50, 20, 10, 5):\n        lost_coin = 10\n    elif after_losing_5 % 2 == 0 and after_losing_5 // 2 not in (50, 20, 10, 5):\n        lost_coin = 5\n        \n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize the count of pairs to zero\n    count = 0\n\n    # Iterate through all the possible pairs of numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            # Check if the sum of the numbers in the pair is a multiple of 5\n            if (i + j) % 5 == 0:\n                # If so, increment the count of pairs\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    # Define the excess and shortage for different pieces per friend\n    excess_at_18 = 41\n    shortage_at_23 = 34\n    \n    # Calculate total chocolates by reversing the scenarios given\n    # if giving 18 pieces results in 41 excess, then total chocolate\n    # is (18 friends * 18 pieces) + 41 excess\n    total_chocolates_when_18_given = excess_at_18 + 18 * (excess_at_18 // 18)\n    \n    # Similar calculation for the shortage scenario:\n    # if giving 23 pieces results in 34 shortage, then total chocolate\n    # is (23 friends * 23 pieces) - 34 shortage\n    total_chocolates_when_23_given = 23 * (shortage_at_23 // 23) - shortage_at_23\n    \n    # Since both scenarios are about the same total chocolates,\n    # the amounts should be the same\n    total_chocolates = total_chocolates_when_18_given\n    \n    # Calculate how many friends she has based on previous finding\n    friends_count = total_chocolates // 18\n    \n    # Calculate the remaining chocolates when she gives each friend 20 pieces\n    remaining_chocolates = total_chocolates - (friends_count * 20)\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    equation1 = Eq(chai_seng - rasidah, 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), rasidah * (1 - 3/5) / 2)\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for a in range(1, 10):  # Thousands digit, cannot be 0\n        for b in range(a + 1, 10):  # Hundreds digit, must be larger than thousands digit\n            # Tens digit, must be the sum of thousands and hundreds digit\n            c = a + b\n            if c >= 10 or c <= b:  # Tens digit must be a single-digit and larger than hundreds digit\n                continue\n            d = a + b + c  # Ones digit, must be the sum of the other three digits\n            if d >= 10 or d <= c:  # Ones digit must be a single-digit and larger than tens digit\n                continue\n            if a + b + c + d == 16:  # The sum must be 16\n                return d  # Return ones digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n\n    # Generate all possible two-digit numbers\n    for i in digits:\n        for j in digits:\n            if i != '0' and i != j:  # The first digit cannot be 0 and must be different from the second\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for number_tuple in permutations([2, 4, 6, 8]):\n        number = int(''.join(str(x) for x in number_tuple))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance covered uphill, time taken is 3 hours, speed is 5 mph.\n    distance_uphill = 5 * 3\n\n    # Distance covered downhill, time taken is 2 hours, speed is 10 mph.\n    distance_downhill = 10 * 2\n\n    # Total distance for the whole trip (uphill + downhill).\n    total_distance = distance_uphill + distance_downhill\n\n    # Total time taken for the whole trip (uphill + downhill).\n    total_time = 3 + 2\n\n    # Average speed is calculated as total distance divided by total time.\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Initial cost for the first 5 kWh\n    initial_cost = 2*5\n    # Fixed service fee\n    service_fee = 3\n    # Total cost Susan can afford\n    total_cost = 63\n    \n    # Calculate the cost for the additional kWh usage\n    additional_cost = total_cost - initial_cost - service_fee\n    \n    # Additional kWh usage charged at $1 per kWh\n    additional_kWh = additional_cost\n    \n    # Total kWh Susan can use\n    total_kWh = 5 + additional_kWh\n    \n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    portion = 54 / 63\n    number = portion * 7\n    return int(number)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    students = 1\n    while not (students % 3 == 2 and students % 7 == 6 and students % 11 == 10):\n        students += 1\n    return students\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Reasonable range assumption since a class size would not be very large\n        for students in range(1, 1000):  # Reasonable range for number of students\n            if (boats + 1) * 6 == students and (boats - 1) * 9 == students:\n                return students\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 40 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorization of 4320\n    factors_4320 = factorint(4320)\n    \n    # Since (3/2)^n will cancel out powers of 3 from prime factorization of 4320,\n    # we count how many powers of 3 are there in the prime factorization of 4320.\n    power_of_3 = factors_4320.get(3, 0)\n\n    # The range of possible n values is (0, power_of_3] because for each n,\n    # we can remove one power of 3 from 4320's factorization\n    ans = power_of_3\n    \n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    num_small_boxes = total_cookies // small_box_capacity\n    if total_cookies % small_box_capacity != 0:\n        num_small_boxes += 1\n    return num_small_boxes\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Number of pupils passing each test\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    \n    # Total number of pupils passing at least one test\n    at_least_one_pass = 43\n    \n    # Maximum possible number passing all three tests is the sum of students\n    # passing each test minus twice the number of students passing at least one test,\n    # because the problem asks for the maximum number passing all three tests.\n    all_three_max = (math_pass + science_pass + english_pass) - (2 * at_least_one_pass)\n    \n    # The number cannot be negative, so if the calculation gives negative, the maximum is 0.\n    all_three_max = max(all_three_max, 0)\n\n    return all_three_max\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    punch1 = 20\n    concentration1 = 35 / 100\n    punch2 = 30\n    concentration2 = 60 / 100\n\n    total_punch = punch1 + punch2\n    total_juice = punch1 * concentration1 + punch2 * concentration2\n    \n    concentration_new_mixture = (total_juice / total_punch) * 100\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    b = symbols('b')  # b represents the original amount in warehouse B\n\n    # Equation A after shipping in 12 tons is twice warehouse B after shipping out 16 tons\n    equation = Eq((50 + 12), 2 * (b - 16))\n\n    # Solve the equation\n    solution = solve(equation, b)\n\n    return solution[b]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]  # All prime numbers between 29 and 43\n    return primes[2]  # Since we want the prime number before 41\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    num_boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return num_boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    freq = {char: word.count(char) for char in set(word)}\n    \n    ans = factorial(len(word))\n    for key, value in freq.items():\n        ans //= factorial(value)\n    \n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    for pencils in range(400, 501):\n        if (pencils % 4 == 1) and (pencils % 5 == 2) and (pencils % 7 == 4):\n            return pencils\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    difference = 21 - 11\n    return difference\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = total_amount * (3 / ratio_sum)\n    return bigger_share\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen trades 3 fishes for 1 rabbit: 3 fishes = 1 rabbit\n    # Oscar trades 2 rabbits for 3 packs of wheat: 2 rabbits = 3 packs of wheat\n    \n    # To find how many fishes Owen should give Dennis for a pack of wheat,\n    # we combine the ratios: (3 fishes = 1 rabbit) and (1 rabbit = 3/2 packs of wheat)\n    \n    # Hence the combined ratio will be: 3 fishes = 3/2 packs of wheat\n    # Simplifying, we get the ratio of fishes to packs of wheat:\n    # 3 fishes = 1.5 packs of wheat\n\n    # Therefore, for one pack of wheat, Owen should give Dennis:\n    fishes_per_pack_of_wheat = 3 / 1.5\n    \n    return fishes_per_pack_of_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let's denote the total number of people as p and the number of benches as b.\n    # According to the problem, we can set up two equations:\n    \n    # Equation 1: If 3 people sit on one bench, there are 7 people with no seat.\n    # Hence, the number of people is 3 * b + 7.\n    \n    # Equation 2: If 7 people sit on one bench, there are 3 extra benches left.\n    # Hence, the number of benches is b - 3, and these benches can seat 7 people each.\n    # The number of people is then 7 * (b - 3).\n    \n    # Since the number of people is the same in both scenarios, we can equate the two expressions:\n    # 3 * b + 7 = 7 * (b - 3)\n    \n    # Now we solve for b:\n    b = symbols('b')\n    equation = Eq(3 * b + 7, 7 * (b - 3))\n    b_value = solve(equation, b)[0]\n    \n    # Since we found b, we can compute the total number of people by substituting b back into either equation.\n    # We'll use the first equation here (3 people per bench):\n    p = 3 * b_value + 7\n    \n    return p\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_bottle, juice_mass = symbols('empty_bottle juice_mass')\n\n    equation1 = Eq((5/6) * juice_mass + empty_bottle, 4.6)\n    equation2 = Eq((2/3) * juice_mass + empty_bottle, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_bottle, juice_mass))\n\n    empty_bottle_mass_kg = solutions[empty_bottle]\n    empty_bottle_mass_g = empty_bottle_mass_kg * 1000\n\n    return empty_bottle_mass_g\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x - 3, 19)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # x1 can be 0 through 9\n        for x2 in range(10 - x1):  # x2 can be 0 through what's left after x1\n            # x3 will be what's left after x1 and x2, ranging from 0 to 9 - x1 - x2\n            x3 = 9 - x1 - x2\n            count += 1  # Every unique set of (x1, x2, x3) is a valid split\n    return count\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # 3-digit numbers range from 100 to 999.\n        if i % 2 != 0:  # Check if the number is odd.\n            digits_sum = sum(map(int, str(i)))  # Calculate the sum of digits.\n            if digits_sum == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Given numbers to multiply\n    number1 = 123456789\n    number2 = 987654321\n    \n    # Multiplication out of the Multiplication Table\n    ans = number1 * number2\n    \n    # Return the result\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    num = 1\n    add = 2\n    while True:\n        num += add\n        add += 2\n        if num >= 100:\n            break\n    return num - add\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spend = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n\n    max_books = int(total_spend / book_cost)\n    for books in range(max_books + 1):\n        magazines = (total_spend - (books * book_cost)) / magazine_cost\n        if magazines.is_integer():\n            return int(magazines)\n    return 0\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits_per_length = 9  # start by counting digits for 1-digit numbers\n    length = 1\n    total_digits = 0\n    while total_digits < 1101:\n        total_digits += digits_per_length * length\n        # Increment to the next page number length (e.g., from 9 to 90 for 2 digits)\n        digits_per_length *= 10\n        length += 1\n    # Subtract the last addition, which made the count go over 1101\n    total_digits -= digits_per_length * length\n    \n    # Calculate how many pages we can have of the last length\n    length -= 1 \n    remaining_digits = 1101 - total_digits \n    pages_with_last_length = remaining_digits // length\n    \n    # Calculate number of pages by summing all full sets of pages of each length\n    # plus the pages with the last length\n    number_of_pages = (10**length - 1) // 9 + pages_with_last_length\n    \n    return number_of_pages\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy = 149\n    sister = andy - 38\n    sister_initial = sister - 38\n    return sister_initial\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = 2 * ashley\n    justin = 10 * ashley\n    equation = Eq(justin, crystal + 64)\n\n    solved_values = solve((equation,), (ashley,))\n\n    ashley_pages = solved_values[ashley]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    total_pages = ashley_pages + crystal_pages + justin_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Reasonably assuming the age is below 100\n        age_base10 = str(age) + '0'\n        if int(age_base10) == int(str(age), 3):\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of orchids, tulips, and roses\n    o, t, r = symbols('o t r')\n    \n    # Equation based on the total number of flowers\n    eq1 = Eq(o + t + r, 3616)\n    \n    # Equation based on the ratio of orchids to tulips\n    eq2 = Eq(o/t, 3/5)\n    \n    # Equation based on the number of flowers left after sales\n    eq3 = Eq((1 - 0.4) * o + (1 - 1/5) * t + (1 - 0.25) * r, 2644)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (o, t, r))\n    \n    # Get the number of orchids\n    return solutions[o]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = [i for i in range(10, 100) if i % 7 == 0 and 7007 % i == 0]\n    sum_of_multiples = sum(factors)\n    return sum_of_multiples\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # There are 7 people and 8 seats, but the order is the same if rotated.\n    # Fix one person (to break the rotation symmetry) and arrange the other 6.\n    ans = factorial(6)\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Number of ways to split n identical items into k piles is given by the formula:\n    # (n + k - 1) choose (k - 1)\n    from math import comb\n    n = 10  # number of identical pins\n    k = 3   # number of piles\n    return comb(n + k - 1, k - 1)\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = (379 * 0.00038) + (159 * 0.00621) + (3.79 * 0.121)\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given values\n    cost_of_1_cookie = 9\n    cost_of_5_cookies = 5 * cost_of_1_cookie  # the cost of 5 cookies\n    \n    # cost of 3 cheesecakes = cost of 5 cookies\n    cost_of_3_cheesecakes = cost_of_5_cookies\n    cost_of_1_cheesecake = cost_of_3_cheesecakes / 3\n    \n    # cost of 3 chocolate cakes = cost of 2 cheesecakes\n    cost_of_2_cheesecakes = 2 * cost_of_1_cheesecake\n    cost_of_3_chocolate_cakes = cost_of_2_cheesecakes\n    cost_of_1_chocolate_cake = cost_of_3_chocolate_cakes / 3\n\n    return cost_of_1_chocolate_cake\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    digits = set(range(10))\n    fixed_digits = {2, 0, 1, 9}\n    available_digits = digits - fixed_digits\n    total_sum = sum(fixed_digits)\n    \n    for A in available_digits:\n        for M in available_digits - {A}:\n            for C in available_digits - {A, M}:\n                # Calculate the sum of digits\n                sm = total_sum + A + M + C\n                # Check divisibility by 9\n                if sm % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    equation1 = Eq(mike - valeria, 6 - 22)\n    equation2 = Eq(mike + valeria, 36)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Melissa and her mother's current age\n    melissa, mother = symbols('melissa mother')\n\n    # Melissa's age when she was 8 years old (mother was 32)\n    mother_past = 32\n    melissa_past = 8\n\n    # Age difference between Melissa and her mother\n    age_difference = mother_past - melissa_past\n\n    # Current age relationship\n    equation1 = Eq(mother, 3 * melissa)\n    # Mother's current age based on the past age difference\n    equation2 = Eq(mother, melissa + age_difference)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return int(n)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since the decimal repeats every 6 digits\n    cycle = \"857142\"  # The repeating sequence\n\n    # Summing the digits of the cycle repeated\n    sum_cycle = sum(int(digit) for digit in cycle)\n\n    # There are 58 digits, so there are 58 // 6 full cycles\n    full_cycles = 58 // 6\n\n    # Sum of digits for full cycles\n    sum_full_cycles = sum_cycle * full_cycles\n\n    # Remaining digits to sum after the complete cycles\n    remainder_digits = cycle[:58 % 6] # Taking the remainder of the digits of the cycle\n    sum_remainder = sum(int(digit) for digit in remainder_digits)\n\n    # The sum of the first 58 digits is sum of full cycles and the remainder\n    total_sum = sum_full_cycles + sum_remainder\n    \n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert the recurring decimal to a fraction\n    # Using the formula V = b / (9...90...), where b is the non-repeating part\n    recurring_decimal = 47 / 99\n\n    # The other decimals are already in the non-recurring form\n    d1 = 4.73\n    d2 = 4.77\n    d3 = 4.737\n\n    # Find the minimum value\n    ans = min(recurring_decimal, d1, d2, d3)\n\n    return ans\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    # Joel's action inverse\n    joel_removed = (remaining_plants + 2) * 2\n    # total remaining after Valerie removed plants\n    after_valerie = remaining_plants + joel_removed\n    # Valerie's action inverse\n    valerie_removed = (after_valerie + 3) * 2\n    # total plants in the beginning\n    total_plants = after_valerie + valerie_removed\n    \n    return total_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52  # speed of the train in m/s\n\n    # Duration = (distance travelled by the train to completely clear the tunnel) / speed\n    # Distance travelled = length of train + length of tunnel\n    distance_travelled = train_length + tunnel_length\n\n    # Duration the train takes to completely clear the tunnel\n    duration = distance_travelled / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial number of eggs as x\n    x = symbols('x')\n    \n    # After selling 16 eggs more than half, we have an equation\n    equation1 = Eq(x / 2 - 16, x - (16 + x / 2))\n    \n    # Then the egg-seller sold 7 eggs fewer than half of the remaining eggs\n    remaining = x - (16 + x / 2)\n    equation2 = Eq(remaining / 2 - 7, 18)\n    \n    # Combine equations\n    solutions = solve((equation1, equation2), x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P1, P6 = symbols('P1 P6')\n    \n    # Total number of students\n    equation1 = Eq(P1 + P6, 120)\n\n    # Total number of buckets carried by students\n    equation2 = Eq(2*P6 + (1/2)*P1, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (P1, P6))\n\n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # Heads or tails\n    total_tosses = 2\n    total_outcomes = outcomes_per_toss ** total_tosses\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # Number of football teams\n    num_teams = 5\n    # Number of matches for each team (teams - 1) / 2 since each match involves two teams\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen gives 3 fish for 1 rabbit\n    fish_to_rabbit_ratio = 3  # (3 fish)/(1 rabbit)\n\n    # Oscar gives 2 rabbits for 3 packs of wheat\n    rabbit_to_wheat_ratio = 2 / 3  # (2 rabbits)/(3 wheat)\n\n    # Owen wants to give fish directly for packs of wheat\n    # To find out how many fish for one pack of wheat,\n    # we multiply the two ratios:\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Simplify the fish to wheat ratio to find out how\n    # many fish are needed for one pack of wheat\n    # In this case, to find out how many fish for one pack of wheat,\n    # we take the inverse of the rabbit to wheat ratio,\n    # because we need (1 wheat)/(2 rabbits) * (3 fish)/(1 rabbit)\n    fish_per_pack_wheat = 1 / rabbit_to_wheat_ratio * fish_to_rabbit_ratio\n\n    return fish_per_pack_wheat\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let PA = x, because AB, AC, and AD share the same length in a cube, let's denote them as 'a'\n    x, a = symbols('x a')\n\n    # Write down the Pythagoras equations according to the distances given in the problem\n    equation1 = Eq(x**2 + a**2, 60*sqrt(10)**2)    # Using PB\n    equation2 = Eq(x**2 + a**2 + a**2, 60*sqrt(5)**2)    # Using PC\n    equation3 = Eq(x**2 + a**2 + a**2 + a**2, 120*sqrt(2)**2)    # Using PD\n    equation4 = Eq(3 * a**2, 36*sqrt(7)**2)    # Using PA = AG, the diagonal of the cube\n\n    # We will first solve for 'a' using equation4 as it is only in terms of 'a'\n    a_value = solve(equation4, a)\n\n    # We only need the positive value of 'a' since dimensions cannot be negative\n    a_positive = [val for val in a_value if val > 0][0]\n\n    # Now we can solve for 'x' using any of the first three equations, as they are equivalent for 'x'\n    equation_x = equation1.subs(a, a_positive)\n    x_value = solve(equation_x, x)\n\n    # We only need the positive value of 'x' since distance cannot be negative\n    return [val.evalf() for val in x_value if val > 0][0]\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n    return (count, ways)\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    num_boxes = 66.5 / apples_per_box\n    return int(num_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Generate all possible combinations of 1- to 3-digit numbers using the digits\n    for i in range(1, 4):\n        for p in permutations(digits, i):\n            number = int(''.join(p))\n            if number < 100 and isprime(number):\n                primes.add(number)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator = (3 + 1/3) * 1.9 + 19.5 / (4 + 1/2)\n    denominator = (62/75) - 0.16\n    divider = (3.5 + 4 + 2/3 + 2/15) / (0.5 * (1 + 1/20 + 4.1))\n\n    ans = (numerator / denominator) / divider\n    return ans\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # The division statement appears to be missing the dividend, which would be represented by ~\\uline{~~~~~~~~~~}~.\n    # However, the equation provided by Johnny is incorrect.\n    # Instead of multiplying the remainder by the quotient, he should have multiplied the divisor.\n    # Let's denote the unknown dividend as x.\n    # The correct division should be represented by: x // 4 = 9 and x % 4 = 2\n    # To get the original number (x), we need to use a combination of the quotient and remainder:\n    # Correct working: (quotient * divisor) + remainder = (9 * 4) + 2 = 36 + 2 = 38\n    # Answer: 38\n    # Now we confirm the calculation\n    quotient = 9\n    divisor = 4\n    remainder = 2\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    \n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max buys 1 banana and 2 pears for 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n\n    # Emily buys 1 banana and 1 pear for 62p\n    equation2 = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of students in the canteen initially\n    x = symbols('x')\n\n    # Initial number of boys (40% of x) and girls (60% of x)\n    boys_initial = 0.4 * x\n    girls_initial = 0.6 * x\n\n    # After 16 boys leave and 16 girls enter\n    boys_after = boys_initial - 16\n    girls_after = girls_initial + 16\n\n    # New ratio of boys in the canteen 2/15 of the total number of students\n    equation = Eq(boys_after, (2/15) * (x))\n\n    # Solve for x\n    total_students_initial = solve(equation, x)[0]\n\n    # Calculate the number of girls in the canteen now\n    girls_now = 0.6 * total_students_initial + 16\n\n    return int(girls_now)\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both = (swimming + jogging) - (total_students - neither)\n    return int(both)\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    ticket_quantity = 16\n    ticket_price = 112\n    total_cost = ticket_quantity * ticket_price\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Calculate number of trees by dividing the length of the road by the spacing and add 1 for the tree at the beginning\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate per minute\n    linda_rate = 1 / 5\n    # Cici's rate per minute\n    cici_rate = 1 / 6\n    # Total rate per minute when working together\n    total_rate = linda_rate + cici_rate\n    # Total time given in minutes for 2 hours\n    total_time = 2 * 60\n    \n    # Total problems solved working together\n    total_problems = total_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    amy_gives = (amy_apples - john_apples) / 2 - 4\n    return int(amy_gives)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 10\n    # Combined work rate per day when working together\n    combined_rate = work_rate_a + work_rate_b\n    # Total work done in 4 days\n    work_done = combined_rate * 4\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # Days needed for B to finish the remaining job\n    days_needed_b = remaining_work / work_rate_b\n\n    return days_needed_b\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    \n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for num in range(13, 17):\n        if num % 2 != 0:\n            ans = num\n            return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - late_time % bus_interval\n\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean = 37\n    total_numbers = 10\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return round(total_cost_seven_books, 2)\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    result = tens + tenths + hundredths\n    \n    return result\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq((1/4) * chan, (1/3) * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # One goat equates to 4 rabbits in terms of eating grass.\n    goat_to_rabbit_ratio = 4\n\n    # If 14 goats can feed for 15 days, it means 14 * 15 goat-days of grass is available.\n    goat_days_available = 14 * 15\n\n    # If 70 rabbits can feed for 8 days, then it also represents 70 * 8 rabbit-days of grass available.\n    # Since one goat eats as much grass as 4 rabbits, the pasture has:\n    # grass_available = 70 * 8 / 4 = 14 * 15 goat_days_available\n    # This confirms that the amount of grass available can be measured in either goat-days or rabbit-days\n\n    # Now, we know we have 17 goats and 20 rabbits. The daily consumption for them would be:\n    # daily_goat_consumption + daily_rabbit_consumption\n    # since 1 goat = 4 rabbits, in terms of consumption, and we have 20 rabbits, it translates to:\n    # 17 goats + 20 rabbits = 17 + 20/4 goats in goat consumption per day\n    daily_combined_consumption = 17 + (20 / goat_to_rabbit_ratio)\n\n    # The number of days the pasture can feed the 17 goats and 20 rabbits is:\n    num_days = goat_days_available / daily_combined_consumption\n    return num_days\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each person's erasers\n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha - riley, 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    day_climb = 10\n    night_slide = 1\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < height:\n        day += 1\n        total_climbed += day_climb\n        if total_climbed >= height:\n            break\n        total_climbed -= night_slide\n        night_slide += 1\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    def triangle_operation(a, b):\n        return sum(a * (10**i) for i in range(b))\n    \n    ans = triangle_operation(4, 3)\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_savings = january_savings + february_savings + march_savings\n    num_months = 3\n    mean_savings = total_savings / num_months\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_code = \"0141705021\"\n    devil_code = \"4005220912\"\n\n    angel_dict = {char: angel_code.count(char) for char in set(angel_code)}\n    devil_dict = {char: devil_code.count(char) for char in devil_code}\n\n    if angel_dict == devil_dict:\n        return True\n    else:\n        return False\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for i in range(1, 6):\n        for j in range(1, 6):\n            if i + j == 6 and i != j:\n                count += 1\n    count //= 2  # Divide by 2 to correct for over-counting i,j and j,i as separate cases\n    # Now account for representations of 6 as sums of more than two numbers\n    # 1+1+4 (and its permutations), 1+2+3 (and its permutations)\n    count += 3  # for 1+1+4 (1+4+1, 4+1+1)\n    count += 6  # for 1+2+3 (3+2+1, 2+3+1, 1+3+2, 3+1+2, 2+1+3)\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef solution():\n    # Expressing recurring decimals as fractions\n    a = Fraction(1, 90)  # 0.0(1)\n    b = Fraction(12, 90)  # 0.1(2)\n    c = Fraction(23, 90)  # 0.2(3)\n    d = Fraction(34, 90)  # 0.3(4)\n    e = Fraction(45, 90)  # 0.4(5)\n    f = Fraction(54, 90)  # 0.5(4)\n    g = Fraction(78, 90)  # 0.7(8)\n\n    # Adding fractions to get result\n    result = a + b + c + d + e + f + g\n\n    # Convert the fraction to a float for the final answer\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    # Initialize counter\n    count = 0\n\n    # Iterate over all possible combinations of 3 numbers within the given range\n    for x in range(2017, 2036):\n        for y in range(x + 1, 2036):\n            for z in range(y + 1, 2036):\n                # Check if the sum of the three numbers is divisible by 4\n                if (x + y + z) % 4 == 0:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    min_sheep_in_max_pen = (total_sheep + total_pens - 1) // total_pens\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    average_boys = 16.2\n    total_girls = 27\n    average_girls = 16.7\n    total_students = total_boys + total_girls\n\n    total_age_boys = total_boys * average_boys\n    total_age_girls = total_girls * average_girls\n    total_age_students = total_age_boys + total_age_girls\n\n    mean_age = total_age_students / total_students\n    \n    return mean_age\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n    \n    # Mapping each letter to its corresponding number in 'Angel'\n    angel_map = {letter: num for letter, num in zip(\"ANGEL\", angel)}\n    \n    # Extracting the numbers corresponding to 'Devil' based on the 'Angel' mapping\n    devil_password = ''.join(angel_map.get(letter, '') for letter in \"DEVIL\")\n    \n    # Checking if Andy's input matches the correct 'Devil' password\n    if devil == devil_password:\n        return True  # Andy can unlock the chest\n    else:\n        return devil_password  # Correct 'Devil' password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 6), (8, 13)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 200:\n        num += 6 * 13\n\n    return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye = 6\n    simon = 12\n    taylor = 16\n    \n    least_days = lcm(raye, simon, taylor)\n    \n    return least_days\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # In the worst case, Sara would take out 4 green balls and 4 yellow balls,\n    # remaining with 3 green balls, 1 yellow ball, and 2 red balls in the bag.\n    # To ensure she gets 5 balls of the same colour, she will have to take out\n    # all the remaining balls.\n    # Therefore, she has to take out the 4 green + 4 yellow + 3 green + 1 yellow + 2 red balls.\n    balls_needed = 4 + 4 + 3 + 1 + 2\n\n    return balls_needed\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Split the numbers 89 and 75 into their digits.\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n\n    # Compute the new operation *\n    result = (a * b) + (c * d)\n\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6] # List of temperatures\n    max_temp = max(temperatures) # Find the hottest temperature\n    min_temp = min(temperatures) # Find the coldest temperature\n    return max_temp - min_temp # Calculate the temperature difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_cindy_average = 120\n    doris_height = 126\n\n    total_height = (bob_cindy_average * 2) + doris_height\n    average_height = total_height / 3\n\n    return average_height\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    \n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    destin, nephew = symbols('destin nephew')\n    \n    # Equations based on given conditions\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n    \n    destin_age = solutions[destin]\n    nephew_age = solutions[nephew]\n    \n    # Sum of their ages in 10 years' time\n    sum_in_10_years = (destin_age + 10) + (nephew_age + 10)\n    \n    return sum_in_10_years\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let x be the original number of pies both Mrs. Tan and Mrs. Lim had\n    x = symbols('x')\n    \n    # Formulate the equation based on given conditions\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve the equation for x\n    original_pies = solve(equation, x)[0]\n    \n    return original_pies\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n    boys_average = 20\n    girls_average = 60\n\n    # Let b be the number of boys\n    # The number of girls will be total_pupils - b\n\n    # Total pencils = total_pupils * total_average\n    # Total pencils = boys_average * b + girls_average * (total_pupils - b)\n    # Solve for b\n\n    b = (total_pupils * total_average - total_pupils * girls_average) / (boys_average - girls_average)\n\n    return int(b)\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a')\n    x = sqrt(a) - 2/sqrt(a)\n\n    expr = sqrt(x**2 + 8*x)\n    ans = simplify(expr)\n\n    return ans\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_hour, departure_minute = 6, 35\n    arrival_hour, arrival_minute = 10, 22\n    \n    departure_total_minutes = departure_hour * 60 + departure_minute\n    arrival_total_minutes = arrival_hour * 60 + arrival_minute\n    \n    travel_time_minutes = arrival_total_minutes - departure_total_minutes\n    \n    return travel_time_minutes\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    term_difference = 3\n\n    first_term = term_value - (term_position - 1) * term_difference\n\n    return first_term\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns = 50 // len(pattern)\n    remaining_digits = 50 % len(pattern)\n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_group1 = 3/5\n    sweets_group1 = 6\n\n    students_group1 = (fraction_group1 * total_sweets) / sweets_group1\n\n    remaining_sweets = total_sweets - (students_group1 * sweets_group1)\n    fraction_group2 = 1/4\n    sweets_group2 = 4\n\n    students_group2 = (fraction_group2 * remaining_sweets) / sweets_group2\n\n    remaining_sweets -= (students_group2 * sweets_group2)\n    sweets_group3 = 5\n\n    students_group3 = remaining_sweets / sweets_group3\n\n    total_students = students_group1 + students_group2 + students_group3\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    import itertools\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    for combo in itertools.combinations(numbers, 5):\n        product_candy = 1\n        for candy_card in itertools.combinations(combo, 2):\n            product_candy = candy_card[0] * candy_card[1]\n            product_candice = 1\n            for candice_card in combo:\n                if candice_card not in candy_card:\n                    product_candice *= candice_card\n            if product_candy == product_candice:\n                return list(set(numbers) - set(combo))[0]  # Remaining number not picked\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mass of a chair as c and the mass of a table as t\n    c, t = symbols('c t')\n\n    # According to the problem statement, we have two equations:\n    # 1. The mass of 3 tables is equal to the mass of 4 chairs: 3t = 4c\n    # 2. A table is 2kg heavier than a chair: t = c + 2\n\n    # Set up the equations\n    equation1 = Eq(3 * t, 4 * c)\n    equation2 = Eq(t, c + 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Let's define tom_age as Tom's current age\n    tom_age = 10\n    # The father will be 70 years old when Tom reaches his current age\n    father_age_when_tom_is_fathers_age = 70\n    # The difference in age between Tom and his father is the age the father will be \n    # when Tom is his current age minus Tom's current age\n    age_difference = father_age_when_tom_is_fathers_age - tom_age\n    # So the current age of the father is Tom's age plus this age difference\n    current_father_age = tom_age + age_difference\n    return current_father_age\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # in meters\n    sam_speed = 1     # in meters per second\n    ben_speed = 0.6   # in meters per second\n    total_time = 600  # in seconds (10 minutes)\n\n    # Calculate the relative speed\n    relative_speed = sam_speed + ben_speed  # both are heading towards each other\n\n    # Calculate the time it takes for them to meet\n    time_to_meet = pool_length / relative_speed\n\n    # Calculate the number of meetings\n    num_meetings = total_time // time_to_meet\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30/100\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    cycle = lcm(25, 20)\n    \n    # Since 1st March is the start day, we subtract 1 to get the cycle count starting from zero\n    next_start_day = cycle - 1\n    \n    # March has 31 days\n    month_length = 31\n    \n    # We determine the month and day the cycle restarts\n    month_count = next_start_day // month_length\n    day_of_month = next_start_day % month_length + 1\n    \n    # Assuming March is the 3rd month, we calculate the next month\n    next_month = 3 + month_count\n    return next_month, day_of_month\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    larger_number = 3 + 1/4\n    smaller_number = 1 + 3/4\n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of boys (b) and number of girls (g)\n    b, g = symbols('b g')\n\n    # Boy gets $8, girl gets $5, total is $580\n    equation1 = Eq(8 * b + 5 * g, 580)\n\n    # There are thrice as many boys as girls\n    equation2 = Eq(b, 3 * g)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3  # the first number in the range that leaves a remainder of 3 when divided by 4\n    last_term = 99  # the last number below 100 that leaves a remainder of 3 when divided by 4\n    difference = 4  # the common difference in the arithmetic sequence\n\n    num_terms = ((last_term - first_term) // difference) + 1  # number of terms in the arithmetic sequence\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_numbers = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_numbers)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2 + 1):  # Since it's an isosceles triangle, the two equal sides must be less than half the perimeter.\n        for b in range(1, 12 - 2*a + 1):  # The base can vary taking the remaining length after deducting the two equal sides.\n            if a+b > b and 2*a+b == 12:  # The sum of the lengths of any two sides must be greater than the third side (triangle inequality).\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    # Initialize the start of our search from the largest possible odd number\n    # under 100 (as an arbitrary upper limit), counting downwards\n    for odd_number in range(99, 0, -2):\n        # Try to find three different composite numbers that sum up to the odd number\n        can_be_split = False\n        for i in range(2, odd_number):\n            if odd_number % i == 0:  # Checking for composite i\n                for j in range(2, odd_number - i):\n                    if (odd_number - i) % j == 0:  # Checking for composite j\n                        k = odd_number - i - j\n                        if k > 1 and all(k % m != 0 for m in range(2, int(k**0.5)+1)):\n                            # If k is prime, this combination doesn't work\n                            continue\n                        if i != j and j != k and i != k and k > 1:\n                            # Found three different composite numbers\n                            can_be_split = True\n                            break\n            if can_be_split:\n                break\n        if not can_be_split:\n            # This is the largest odd number that cannot be split\n            # into three different composite numbers\n            return odd_number\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # By the inclusion-exclusion principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    common_factor = gcd(gcd(class_a, class_b), class_c)\n\n    return common_factor\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n    \n    # Using the Inclusion-Exclusion Principle\n    only_passed_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n    \n    return only_passed_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of direct routes from A to D\n    direct_AD = 6\n\n    # Routes from A to B to C to D\n    A_B_C_D = 7 * 5 * 2\n\n    # Routes from A to C to D\n    A_C_D = 4 * 2\n\n    # Total number of routes from A to D\n    total_routes = direct_AD + A_B_C_D + A_C_D\n\n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    original_chocolate = symbols('original_chocolate')\n    equation = Eq(original_chocolate * 0.60 + (255 - original_chocolate) * 0.25, original_chocolate * 0.60)\n    solved = solve(equation, (original_chocolate))\n    remaining_cupcakes = solved[0] * 0.60  # Calculate the remaining cupcakes of one type\n    return remaining_cupcakes\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for current ages of the elder and younger brother\n    elder, younger = symbols('elder younger')\n    \n    # The sum of their current ages is 42\n    equation1 = Eq(elder + younger, 42)\n    \n    # A few years ago, when the elder brother was the age of the younger brother now,\n    # the younger brother was half the elder brother's current age.\n    # Let the number of years ago be 'n'.\n    # At that time, elder's age was 'younger' and younger's age was 'elder / 2'\n    # So, elder - n = younger and younger - n = elder / 2, solving for n gives us:\n    # n = elder - younger\n    # Now, substituting value of n in younger's equation: younger - (elder - younger) = elder / 2\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n    \n    # Solve the system of equations for elder and younger\n    solution = solve((equation1, equation2), (elder, younger))\n    \n    # We're interested in the elder brother's current age\n    elder_age = solution[elder]\n    \n    return elder_age\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    cost_per_pencil = 2\n    num_pencils = 3\n    num_pens = 2\n    total_pencil_cost = cost_per_pencil * num_pencils\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / num_pens\n    return cost_per_pen\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    number_of_cattle = 5\n    days_to_eat = 10\n\n    hay_per_cattle_per_day = total_hay / (number_of_cattle * days_to_eat)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # Find all divisors of 210\n    divs = divisors(210)\n    min_age = 10\n\n    # Iterate over all divisors to find possible ages of children\n    for i in divs:\n        for j in divs:\n            for k in divs:\n                # The ages must be different and less than 10\n                if i < j < k < 10 and i * j * k == 210:\n                    # Update youngest age if a valid combination is found\n                    min_age = min(min_age, i)\n\n    return min_age\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box_capacity = 8\n    num_boxes = total_avocados // per_box_capacity\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3/8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n\n    full_days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts % locusts_per_day\n\n    return remaining_locusts if remaining_locusts > 0 else locusts_per_day\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b = number of boys, g = number of girls\n    # According to the problem statement, we have:\n    # 1/4 * b = 2/5 * g\n    # b + g = 39\n\n    # We can setup the equations as:\n    # (1/4) * b - (2/5) * g = 0\n    # b + g - 39 = 0\n\n    # solving the equations using matrix method\n    from numpy import array, linalg\n\n    A = array([[1 / 4, -2 / 5], [1, 1]])\n    B = array([0, 39])\n\n    solution = linalg.solve(A, B)\n    b, g = solution.round().astype(int)\n\n    # The number of more boys than girls\n    return b - g\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return (12 * 92) + (22 * 82) + (32 * 72)\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the stickers Don originally had and b be the stickers Ben originally had\n    d, b = symbols('d b')\n    \n    # Original ratio equation: d/b = 2/3\n    equation1 = Eq(d/b, 2/3)\n    \n    # New ratio after Don buys 10 stickers and Ben loses 5 stickers: (d+10)/(b-5) = 6/7\n    equation2 = Eq((d + 10)/(b - 5), 6/7)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (d, b))\n    \n    # d contains the number of stickers Don had at first\n    return solutions[d]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of $10 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # equation 1: total number of notes\n    equation1 = Eq(x + y, 116)\n    \n    # equation 2: relationship after spending on the bag\n    spent_10_notes = x * 0.6\n    spent_5_notes = y * 0.25\n    remaining_10_notes = x - spent_10_notes\n    remaining_5_notes = y - spent_5_notes\n    equation2 = Eq(remaining_10_notes, (4/7) * remaining_5_notes)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    x_value = solutions[x]\n    y_value = solutions[y]\n    \n    # calculate the cost of the bag\n    cost = spent_10_notes * 10 + spent_5_notes * 5\n    cost = cost.subs(x, x_value)\n    \n    return cost\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        smallest_number = 25 - remainder\n        return smallest_number\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) / 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # Find the combination of a, b, c that maximizes the product abc\n    # under the constraint a + b + c = 31 (a, b, c are positive integers).\n    # Divide 31 into three parts as evenly as possible\n    # since the product of numbers closer to each other is greater.\n    a = b = c = 31 // 3\n    remainder = 31 % 3\n    \n    # Distribute the remainder to maximize the product\n    if remainder == 1:\n        c += remainder\n    elif remainder == 2:\n        b += 1\n        c += 1\n\n    # The largest product abc\n    max_product = a * b * c\n\n    return max_product\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # Calculate the sum of positive terms: 2 + 4 + 6 + ... + 2016\n    # This is an arithmetic sequence with first term a = 2, common difference d = 2\n    # Last term l can be found using the formula for the nth term of an arithmetic sequence: a + (n - 1) * d = l\n    # l = 2016, so we solve for n: 2 + (n - 1) * 2 = 2016 -> (n - 1) * 2 = 2014 -> (n - 1) = 1007 -> n = 1008\n    positive_terms = 1008\n    sum_of_positive = (positive_terms / 2) * (2 + 2016)  # Sum of an arithmetic series formula: n/2 * (first_term + last_term)\n    \n    # Calculate the sum of negative terms: -3 - 5 - 7 - ... - 2015\n    # This is an arithmetic sequence with first term a = -3, common difference d = -2\n    # Last term l can be found using the formula for the nth term of an arithmetic sequence: a + (n - 1) * d = l\n    # l = -2015, so we solve for n: -3 + (n - 1) * (-2) = -2015 -> (n - 1) * (-2) = -2012 -> (n - 1) = 1006 -> n = 1007\n    negative_terms = 1007\n    sum_of_negative = (negative_terms / 2) * (-3 - 2015)  # Sum of an arithmetic series formula: n/2 * (first_term + last_term)\n    \n    # Total sum\n    total_sum = sum_of_positive + sum_of_negative\n    return total_sum\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_received = 100 - (lena_had_initially - lena_gave_away)\n\n    return lena_received\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    sum_of_products = 0\n    for i in range(1, 21, 2):\n        sum_of_products += i * (i + 2)\n    return sum_of_products\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Calculate factorial for n\n    def fact(n):\n        return factorial(n)\n\n    # Total arrangements without any restrictions\n    total_arrangements = fact(7)\n\n    # Arrangements where twin boys are next to each other\n    # Consider the twin boys as one unit, so we have 6 units to arrange\n    boys_together = fact(6)\n\n    # Arrangements where triplet girls want to stand together\n    # Consider the triplet girls as one unit, so we have 5 units to arrange\n    # We also need to consider the different arrangements of the triplet sisters within their unit\n    girls_together = fact(5) * fact(3)\n\n    # Arrangements where both conditions are met\n    # Since the boys cannot be together, it's already accounted for in girls_together arrangements\n    both_conditions = girls_together\n\n    # Total valid arrangements\n    valid_arrangements = total_arrangements - both_conditions\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # The trees are planted at the ends of the road, so we add an additional tree.\n    # We divide the road length by the tree spacing to find out how many trees are there between the ends.\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            candidate_number = int(f\"21{x}{y}35\")\n            if candidate_number % 99 == 0:\n                return candidate_number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Calculating the minimum number of students using the Pigeonhole Principle\n    min_students_most_born = (total_students + days_in_week - 1) // days_in_week\n\n    return min_students_most_born\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    max_fridays = (55 // 7) + 1  # Every week has a Friday, so we add one more.\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1/2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percent_wearing_glasses = 20\n    total_girls = 25\n\n    num_girls_wearing_glasses = (percent_wearing_glasses / 100) * total_girls\n\n    return int(num_girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2*3*4*5*8*9  # Least common multiple of 2, 3, 4, 5, 6, 8, 9 (ignoring redundant factors)\n\n    # The number N must be in the form of lcm*k + 5 to have a remainder of 5 when divided by 7\n    k = 1\n    while True:\n        N = lcm * k + 5\n        if N % 7 == 5:\n            return N\n        k += 1\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils // 5  # 1/5th are away\n    pupils_going = total_pupils - pupils_away\n    return pupils_going\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3\n    songs_per_child = 2\n    total_children = 50\n    \n    total_time = time_per_child_per_song * songs_per_child * total_children\n    return total_time\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return \"0.3\" if 0.3 > 0.25 else \"25%\"\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n\n    return total_money\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n\n    # Calculate the years using the formula: A = P(1 + rt)\n    # where A is final_amount, P is principal, r is interest_rate, and t is time in years.\n    # We rearrange the formula to solve for t: t = (A/P - 1) / r\n    years = (final_amount / principal - 1) / interest_rate\n\n    # Bella's claim\n    bella_claim = 5\n    # Check if Bella is right or wrong and return the actual years if she is wrong\n    if years == bella_claim:\n        return \"Bella is right\"\n    else:\n        return int(years)  # Return an integer as the number of years\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of each mug\n    mug_cost = 3.50 / 5\n    # Cost of each pen\n    pen_cost = 6.80 / 8\n\n    # Total cost of 7 mugs\n    total_mug_cost = mug_cost * 7\n    # Total cost of 5 pens\n    total_pen_cost = pen_cost * 5\n\n    # Total cost of 7 mugs and 5 pens\n    total_cost = total_mug_cost + total_pen_cost\n\n    # Money given\n    money_given = 10\n\n    # Change from £10\n    change = money_given - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    weight_with_apples = 580\n    weight_without_3_apples = 280\n    number_of_apples_taken_out = 3\n\n    # Since the 3 apples are taken out and the remaining weight is 280g,\n    # we can calculate the total weight of the 3 apples.\n    weight_of_3_apples = weight_with_apples - weight_without_3_apples\n\n    # If the weight of 5 apples and the basket is 580g, \n    # and the weight of 3 apples is weight_of_3_apples,\n    # then we can find the weight of the basket by subtracting \n    # the weight of 2 apples from weight_without_3_apples,\n    # because weight_without_3_apples actually includes the weight of the basket and 2 apples.\n    weight_per_apple = weight_of_3_apples / number_of_apples_taken_out\n    weight_of_basket = weight_without_3_apples - (2 * weight_per_apple)\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # least common multiple of 3 and 7\n    ans = lcm\n    while str(ans)[-1] != '2':  # Check if the number ends with a 2\n        ans += lcm\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n    \n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_of_weeks = 2\n    total_days = days_in_a_week * num_of_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position_difference = 10**2 - 10**(-1)\n    value_difference = 3 * position_difference\n    return value_difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2**17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Initialize the largest number that cannot be obtained\n    largest_cannot_be_made = None\n\n    # Starting from 1, check all totals to see if they can be made with 4z and 5z coins\n    total = 1\n    while True:\n        can_be_made = False\n        # Check if total can be made using 4z coins for x and 5z coins for y \n        for x in range(total // (4*1) + 1):\n            for y in range(total // (5*1) + 1):\n                if 4 * x + 5 * y == total:\n                    can_be_made = True\n                    break\n            if can_be_made:\n                break\n\n        if not can_be_made:\n            largest_cannot_be_made = total\n            break\n\n        total += 1\n\n    return largest_cannot_be_made\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    max_d = 1001\n    while True:\n        if all((max_d * i) % 10 == 1 for i in range(1, 11)):\n            break\n        max_d -= 1\n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    years_passed_since_then = 5 + 3\n    combined_future_age = combined_age_5_years_ago + 2 * years_passed_since_then  # Both Claire and Daniel age\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            if ((108200 + 10*a + b) % 12 == 0):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    # 3 apples and 4 pears weigh 1.81 kg\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    # 5 apples and 2 pears weigh 1.71 kg\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    # Use the solutions to find the weight of 4 apples and 4 pears\n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight.evalf()\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rates of John, Jonah, and Angus' work per hour as j, jo, and a, respectively.\n    j, jo, a = symbols('j jo a')\n\n    # Equation for all three working together, where 1/j + 1/jo + 1/a = 1/27 (since they take 27 hours to finish the job)\n    eq1 = Eq(1/j + 1/jo + 1/a, 1/27)\n\n    # Equation for Jonah and Angus working together, where 1/jo + 1/a = 1/36\n    eq2 = Eq(1/jo + 1/a, 1/36)\n\n    # We need to calculate for John's rate of work per hour, so let's use the equations we have to solve for j.\n    solutions = solve((eq1, eq2), (j, jo, a))\n\n    # John's time to build the wall on his own is the reciprocal of his rate of work per hour\n    john_time = 1 / solutions[j]\n    \n    return john_time\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n\n    for boys in range(total_students+1):\n        girls = total_students - boys\n        if boys - (boys / 11) == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    boxes_bought = total_pencils // pencils_per_box\n\n    return boxes_bought\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_laid_eggs = 50\n    maturation_period = 30\n    total_days = 40\n\n    # After 30 days, the first batch of eggs laid will become adults\n    # For the remaining 10 days, new eggs will be laid but won't become adults\n    # The number of new adult fleas will be the number laid in the first 30 days\n\n    new_adults = daily_laid_eggs * maturation_period\n    return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    missing_number = (7 * 3) + 24\n    return missing_number\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    French_speakers = 15\n    Japanese_speakers = 12\n    Italian_speakers = 13\n\n    French_Japanese_speakers = 5\n    French_Italian_speakers = 3\n    Japanese_Italian_speakers = 2\n\n    All_three_speakers = 1\n\n    total = (French_speakers + Japanese_speakers + Italian_speakers \n             - French_Japanese_speakers - French_Italian_speakers - Japanese_Italian_speakers\n             + All_three_speakers)\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3 / 4\n    litres_of_water = total_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    number_of_rows = 22\n\n    ans = number_of_rows / 2 * (2 * first_term + (number_of_rows - 1) * common_difference)\n\n    return int(ans)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_amount = story_books + magazines\n    return total_amount\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # Assuming M = 50000 + abcd, where abcd is a four-digit number\n    # N = abcd5 = 10 * abcd + 5\n    # M - N = (50000 + abcd) - (10 * abcd + 5) = 22122\n\n    # This simplifies to 50000 - 5 = 9 * abcd = 22122\n    abcd = (22122 + 5) / 9\n\n    return int(abcd)\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 21 * 286 + 21\n    den1 = 286\n    frac1 = Fraction(num1, den1)\n    \n    num2 = 6 * 2530 + 647\n    den2 = 2530\n    frac2 = Fraction(num2, den2)\n    \n    num3 = 1 * 2829 + 1370\n    den3 = 2829\n    frac3 = Fraction(num3, den3)\n    \n    # Perform the calculations\n    result = frac1 / frac2 * frac3\n    \n    # Convert the result to a mixed number\n    whole = result.numerator // result.denominator\n    frac_part = Fraction(result.numerator - whole * result.denominator, result.denominator)\n    \n    return whole, frac_part\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 0.30 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # Sam's total money in pounds\n    pencil_cost = 0.38  # Cost of pencil in pounds\n    ruler_cost = 0.59   # Cost of ruler in pounds\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n    return remaining_money\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    total_candy = 140\n    # Prime factorization of 140: 2^2 * 5 * 7\n    # The piles must have an odd number of candies, so exclude the factor of 2.\n    # This means we're distributing the odd part, which is 5 * 7 = 35 candies.\n    # For each odd factor (including 1), there's a corresponding even factor that pairs with it to make 140.\n    # So we just need the count of odd divisors of 35.\n    # 35 has 1, 5, 7, 35 as its divisors - all of which are odd.\n    # Therefore, there are 4 ways to distribute the candies into piles with an odd number of candies.\n\n    # If you wanted to generalize this and not hard-code the divisors, you could do:\n    odd_part = 35\n    \n    def count_odd_divisors(n):\n        count = 0\n        for i in range(1, n+1, 2): # step by 2 to ensure we only consider odd numbers\n            if n % i == 0:\n                count += 1\n        return count\n    \n    return count_odd_divisors(odd_part)\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    return sum(range(1, 21))\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Given dimensions of the cuboid\n    length = 6\n    width = 10\n    height = 12\n\n    # The cuboid is cut into 720 equal small cubes, so each side is cut into\n    # the cube root of 720 = 6 * 6 * 20. Since we know the cuboid dimensions,\n    # we can determine the cuts for each dimension to get each small cube's dimension\n    small_cube_edge = min(length, width, height) // 6\n\n    # Calculate the number of small cubes along each dimension of the cuboid\n    num_cubes_length = length // small_cube_edge\n    num_cubes_width = width // small_cube_edge\n    num_cubes_height = height // small_cube_edge\n\n    # For each face, the number of small cubes with exactly one painted pink face \n    # is the number of cubes on the inside (not including the edges)\n    # So we subtract the edges (2 times the number of cubes in one edge)\n    # and multiply by the number of cubes on the other dimension. Since each face\n    # has two dimensions, this is done for each combination of dimensions.\n    pink_cubes_one_face = ((num_cubes_length - 2) * (num_cubes_width - 2) + \n                           (num_cubes_length - 2) * (num_cubes_height - 2) + \n                           (num_cubes_width - 2) * (num_cubes_height - 2)) * 2\n\n    # Return the final count\n    return pink_cubes_one_face\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet has 4 pages\n    # The third sheet contains pages 9, 10, 11, 12\n    sum_of_pages = 9 + 10 + 11 + 12\n    return sum_of_pages\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Star and Nini's work rates\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # Star works for 5 hours and then Nini works for 20 hours to finish 1 job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    \n    # Star works for 20 hours and then Nini works for 8 hours to finish 1 job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n    \n    # Solve the two equations to find the rates of work for Star and Nini\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # The time it takes for Nini to finish the job by herself is the reciprocal of her work rate\n    time_for_nini_alone = 1 / solutions[nini_rate]\n\n    return time_for_nini_alone\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    num_girls = total_students * fraction_girls\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    apples_per_watermelon = watermelon_to_peaches * peaches_to_apples\n    return apples_per_watermelon\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_number = 0\n    while total_digits < 933:\n        page_number += 1\n        if page_number < 10:\n            total_digits += 1\n        elif page_number < 100:\n            total_digits += 2\n        elif page_number < 1000:\n            total_digits += 3\n    return page_number\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice = 30 * 5\n    total_orange_juice = 50 * 3\n    total_peach_juice = 20 * 10\n    \n    total_cost = total_apple_juice + total_orange_juice + total_peach_juice\n    total_cups = 30 + 50 + 20\n    \n    average_cost_per_cup = total_cost / total_cups\n    \n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 92):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert 9:15pm to minutes\n    end_time = (11 * 60) + 6    # Convert 11:06pm to minutes\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys_more = 32\n    total_students = 0\n    n = 1  # Start from a 1x1 square which will have only boys\n    while True:\n        # Calculate boys for the current n\n        boys = (2 * n - 1) ** 2\n        # Calculate girls for the current n\n        girls = (n - 1) ** 2\n        # Check if the difference matches the condition\n        if boys - girls == boys_more:\n            # Total students = boys + girls\n            total_students = boys + girls\n            break\n        n += 1\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let the divisor be D, so the dividend will be 29*D + 11\n    # It's given that D + (29*D + 11) = 431\n    # Solving for D we get D + 29*D = 420\n    # So, D = 420 / 30\n    divisor = 420 // 30\n    dividend = 29 * divisor + 11\n    # The difference between the dividend and the divisor\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_that_play_violin = 12.5\n    number_of_violin_players = 11\n\n    total_pupils = (number_of_violin_players * 100) / percentage_that_play_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    price_per_chocolate = 50\n    C = price_per_chocolate * n\n    return C\n\nans = solution(n)  # 'n' should be replaced with the actual number of chocolate bars when calling the function."
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    # Let x be the number of each type of coin\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Equation for the total sum of money\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Total number of coins is 4 times x (for 4 types of coins)\n    total_coins = 4 * solution[0]\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    # original equations\n    equation1 = Eq(apples + pears, 105)\n    equation2 = Eq((2/3) * apples, (5/6) * (3/5) * pears)  # after selling equations\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] / 3\n    pears_sold = (2/5) * solutions[pears]\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total chocolates\n    total_chocolates = 20\n    # Total soft-centres\n    soft_centres = 16\n    # Total plain chocolates\n    plain_chocolates = 8\n    \n    # Since there are more soft-centres than plain chocolates, all plain chocolates can have soft-centres.\n    # However, there must be some milk chocolates with soft-centres as well. Therefore, the minimum number\n    # of plain chocolates with soft-centres is the total number of soft-centres minus the number of milk chocolates.\n    min_plain_soft_centres = soft_centres - (total_chocolates - plain_chocolates)  # 16 - 12 = 4\n    \n    # The maximum number of plain chocolates with soft-centres is the number of plain chocolates itself,\n    # assuming all plain chocolates have soft-centres.\n    max_plain_soft_centres = plain_chocolates  # 8\n    \n    # Return the minimum and maximum number of plain chocolates with soft-centres\n    return (min_plain_soft_centres, max_plain_soft_centres)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils and y be the total number of stickers\n    x, y = symbols('x y')\n\n    # Equation 1: If Mr Ya gives 13 stickers to each pupil, he will have an excess of 190 stickers\n    equation1 = Eq(y, 13*x + 190)\n    \n    # Equation 2: If Mr Ya gives 17 stickers to each pupil, he will have an excess of 50 stickers\n    equation2 = Eq(y, 17*x + 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Get the number of stickers\n    return solutions[y]\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of pens of each color in both boxes\n    blue_pens_A = blue_pens_B = 10\n    red_pens_A = red_pens_B = 15\n    black_pens_A = black_pens_B = 20\n    green_pens_A = green_pens_B = 25\n\n    # After moving 20 pens from Box A to Box B, we need to ensure there are\n    # at least 15 pens of each color in Box A. To simplify the problem,\n    # since the operation will be the same for each color, we only need to look\n    # at one color and multiply the result by 4 (since there are 4 colors).\n\n    # We only need to consider the scenario where a color has exactly 15 pens,\n    # because if we can solve for this case, the conditions will also be met\n    # for the colors that originally had more than 15 pens.\n\n    # Start with one color (blue for example), after moving 20 pens to B,\n    # box A has 10 blue pens. We need to move enough pens back to A to make\n    # it at least 15. So we will move back (15 - 10) = 5 blue pens.\n    \n    pens_to_return = (15 - 10) * 4  # Multiply by 4 for all colors\n\n    return pens_to_return\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B first, so the new count is:\n    # Stack A: 20 stones, Stack B: 16 stones\n\n    # Jerry should always aim to leave an even number of stones in both stacks combined.\n    # This ensures that Tom can never win in his next turn, and Jerry can always match\n    # Tom's move to maintain evenness until Jerry wins.\n\n    # To ensure the total count of stones is even after Jerry's first move,\n    # it is now 20 + 16 = 36, which is already even.\n    # Jerry should aim to keep it even.\n\n    # Since Tom took from Stack B, Jerry should also take from Stack B.\n    # Jerry on his turn should take 1 stone from Stack B to make the stones even\n    # Therefore, after Jerry's turn, the counts will be:\n    # Stack A: 20, Stack B: 15 (35 total, which is odd)\n    # This forces Tom's next move to create an even total after his turn, which Jerry can again match.\n\n    return (1, \"B\")\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Equation for ratio A:B:C = 4:5:6\n    equation1 = Eq(4 * B, 5 * A)\n    equation2 = Eq(5 * C, 6 * B)\n\n    # Equation for C is greater than A by 10\n    equation3 = Eq(C, A + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Sum of A, B, and C\n    sum_ABC = solutions[A] + solutions[B] + solutions[C]\n\n    return sum_ABC\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C, and D as a single entity since they are always together\n    # So we have 9 entities in total to arrange\n    entities = 9\n\n    # The group of A, B, C, and D can be arranged in 4! ways\n    group_arrangements = factorial(4)\n\n    # The 9 entities (8 single students + 1 group) can be arranged in 9! ways\n    total_arrangements = factorial(entities)\n\n    # Multiply the arrangements of the group and the total entities\n    ans = group_arrangements * total_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total points available from all games\n    total_points = (6 * 5) // 2 * 2  # each of the 6 students plays 5 games, 2 points a game\n    # Sum of points already known\n    known_points = 7 + 6 + 5 + 4 + 3\n    # Points for the remaining student\n    remaining_points = total_points - known_points\n    \n    return remaining_points\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n\n    n = 2 * total_players // (first_line + last_line)  # n * (first + last) / 2 = total\n\n    difference = (last_line - first_line) // (n - 1)\n\n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2,3), (2,5), (2,7)]\n    num, _ = solve_congruence(congruences)\n    \n    while num < 100:\n        num += 3*5*7\n    \n    return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # masses in grams\n    max_mass = max(masses)\n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from math import comb\n\n    # Total days\n    total_days = 1000\n    # Total thefts\n    total_thefts = 2\n    # Dog barks in a week\n    barks_per_week = 3\n    # Weeks in 1000 days\n    weeks = total_days / 7\n    # Total times the dog barks in 1000 days\n    total_barks = weeks * barks_per_week\n    # Probability of barking when theft occurs\n    p_bark_theft = 0.9\n    # Probability of theft occurring on any given day\n    p_theft = total_thefts / total_days\n\n    # Probability of the dog barking during the theft\n    ans = p_bark_theft * p_theft * total_barks / total_thefts\n\n    return ans\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio\n    equation1 = Eq(A / B, 5 / 3)\n\n    # New ratio after 10 grams transfer: new_A = A - 10, new_B = B + 10\n    equation2 = Eq((A - 10) / (B + 10), 7 / 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total weight\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    number_of_girls = total_children * fraction_girls\n    number_of_boys = total_children - number_of_girls\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return int(solutions[stickers])\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Here, the smallest possible difference would be between consecutive integers formed \n    # by ordering the digits 1 to 9. Due to the nature of the problem we can fix one number \n    # at its least (123456789) and find the next possible larger number.\n    \n    # The next possible number is simply the smallest nine-digit number \n    # achieved by swapping the last two digits of the lowest number.\n    num1 = 123456789\n    num2 = 123456798\n    \n    # The difference is the 2nd smallest minus the smallest number.\n    ans = num2 - num1\n    \n    return ans\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls', integer=True)\n\n    # Equation representing the initial difference in number of boys and girls\n    equation1 = Eq(girls - boys, 65)\n    \n    # Equation representing the situation after some boys and girls left the hall\n    equation2 = Eq((1 - 2/5) * boys, (1 - 3/7) * girls)\n\n    # Solve the equations to find the number of boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of students left in the hall\n    # after the specified fractions of boys and girls have left for recess\n    total_left = (1 - 2/5) * solutions[boys] + (1 - 3/7) * solutions[girls]\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    # Total number of students\n    total_students = 1690\n\n    # 90 more boys than girls\n    girls = (total_students - 90) / 2\n    boys = girls + 90\n\n    # Ratio of girls swimming (G_swim) to girls not swimming (G_nswim) is 31 : 49\n    G_swim_ratio = 31\n    G_nswim_ratio = 49\n    G_swim = girls * (G_swim_ratio / (G_swim_ratio + G_nswim_ratio))\n    G_nswim = girls - G_swim\n\n    # Number of boys who can swim (B_swim) is 120 less than those who cannot swim (B_nswim)\n    B_swim = boys - 120\n    B_nswim = boys - B_swim\n\n    # Total number of students who cannot swim is the sum of girls and boys who cannot swim\n    students_not_swimming = G_nswim + B_nswim\n\n    return int(students_not_swimming)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    arrangements = factorial(num_kids)\n\n    return arrangements\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Since Mike's position is always the 2nd in line in a square array,\n    # the position has to be at (2,2) from the top-left corner,\n    # which means the array must be at least of size 3x3.\n    # To make it the 2nd from right to left and bottom to top,\n    # the array must be a 3x3 square.\n    # Any square larger than 3x3 will not have Mike's position as the 2nd\n    # when counting from rights to left and bottom to top.\n    # Therefore, Mike's class must have a 3x3 square array of desks and chairs.\n\n    num_students = 3 * 3 # Total number of students in the class\n\n    return num_students\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let x be the number of years it will take for the sum of their ages to be 40\n    # current sum is 22, so we need to add 40 - 22 to the sum\n    \n    # Every year, each person gets one year older, so the sum of their ages increases by 2 each year\n    # x * 2 = (40 - 22)\n    \n    x = (40 - 22) // 2  # Using integer division since we expect x to be an integer\n    \n    return x\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let the total number of bricks at first be x\n    # According to the problem, we have the following steps:\n    # First trip: (x / 2) - 26 bricks\n    # Number of bricks remaining after first trip: x - ((x / 2) - 26)\n    # Second trip: ((x - ((x / 2) - 26)) / 2) + 11 bricks\n    # Number of bricks remaining after second trip: x - ((x / 2) - 26) - (((x - ((x / 2) - 26)) / 2) + 11)\n    # On the third trip, they moved 68 bricks.\n    # Finally, 25 bricks were still unmoved.\n    # So, the equation based on the total bricks left after all trips is:\n    # x - ((x / 2) - 26) - (((x - ((x / 2) - 26)) / 2) + 11) - 68 = 25\n\n    # Solving this equation to find the initial number of bricks x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    first_trip = (x / 2) - 26\n    remaining_after_first = x - first_trip\n    second_trip = (remaining_after_first / 2) + 11\n    remaining_after_second = remaining_after_first - second_trip\n    # After moving 68 bricks on the third trip and 25 left, we get our equation\n    equation = Eq(remaining_after_second - 68, 25)\n    \n    # Solve the equation for x\n    result = solve(equation, x)\n    \n    # Since we want to return the result as an integer\n    return result[0]\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to hold the number of ways to reach each step\n    ways_to_climb = {i: 0 for i in range(11)}\n    ways_to_climb[0] = 1  # There's 1 way to stay on the ground (step 0)\n\n    # Start from the first step and compute the number of ways\n    # to get there using either 2 or 3 steps from previous steps\n    for step in range(1, 11):\n        # If Peter is within 2 steps from this step, add the number of ways to get to step-2\n        if step >= 2:\n            ways_to_climb[step] += ways_to_climb[step - 2]\n        # Similarly, if Peter is within 3 steps from this step, add the number of ways to get to step-3\n        if step >= 3:\n            ways_to_climb[step] += ways_to_climb[step - 3]\n\n    # The answer is the number of ways to reach the 10th step\n    return ways_to_climb[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for thousands in range(1, 10):  # The first digit can't be 0\n        for hundreds in range(10):  # The rest can be 0-9\n            for tens in range(10):\n                for ones in range(10):\n                    original_number = (thousands * 1000) + (hundreds * 100) + (tens * 10) + ones\n                    new_number = (ones * 1000) + (thousands * 100) + (hundreds * 10) + tens\n                    if new_number - original_number == 5877:\n                        return original_number\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    minimum_dividend = quotient + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    n = 4  # \"1998\" has 4 digits\n    num = int(\"1998\")\n    while num % 33 != 0:\n        n += 4  # we append \"1998\", which has 4 digits\n        num = int(str(num) + \"1998\")\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_number = group_number\n    second_number = group_number ** 2\n    third_number = group_number ** 3\n\n    sum_of_numbers = first_number + second_number + third_number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    num_rounds = total_distance / distance_per_round\n    return int(num_rounds)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_per_line = 3\n    girls_per_line = 2\n    total_boys = 42\n\n    # Calculate the number of lines needed for 42 boys.\n    lines = total_boys / boys_per_line\n\n    # Calculate the number of girls based on the number of lines.\n    total_girls = lines * girls_per_line\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    # Starting from the smallest three-digit number and continuing until we find a suitable number\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(candice, 5 * elly)\n    equation2 = Eq(elly, doris + 6)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion statement: 10/x = 14/21\n    # Cross Multiply to find x: 10*21 = 14*x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 6 == 0 and number % 9 == 0 and str(number).endswith('0'):\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # 7 tens is 70\n    correct_answer = original_number + tens_to_add\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    max_sum = 27\n    count = 1  # start with the number 27 itself\n    while max_sum > 0:\n        max_sum -= count\n        count += 1\n    return count - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 3 * 100  # convert meters to centimeters\n    piece1 = 147\n    piece2 = 32.5\n    piece3 = 67\n    piece4 = total_length_cm - (piece1 + piece2 + piece3)\n    return piece4\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    pass_fail = list(product([1, 0], repeat=3))  # All combinations of passing (1) and failing (0)\n    outcomes = {sum(combination): 1 for combination in pass_fail}  # Initialize dictionary with all possible sums\n\n    for combination in pass_fail:\n        prob = 1\n        for i, result in enumerate(combination):\n            prob *= probabilities[i] if result == 1 else (1 - probabilities[i])\n        outcomes[sum(combination)] *= prob\n    \n    # Find the number of people with highest probability to pass\n    most_likely_pass_count = max(outcomes, key=outcomes.get)\n    \n    return most_likely_pass_count\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves = total_papers // interval\n    return leaves\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Starting with the first term being 1\n    for i in range(2, 11):\n        ans += (1/i) * i  # Adding each fraction i times\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watches, caps = symbols('watches caps')\n    original_ratio_watches = 8\n    original_ratio_caps = 11\n    new_ratio_watches = 12\n    new_ratio_caps = 11\n    caps_sold = 88\n\n    # Equation based on the initial ratio\n    equation1 = Eq(watches / caps, original_ratio_watches / original_ratio_caps)\n    # Equation based on the new ratio after selling caps\n    equation2 = Eq(watches / (caps - caps_sold), new_ratio_watches / new_ratio_caps)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (watches, caps))\n\n    return solution[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    time_per_interval = 30 / 5\n    total_time = time_per_interval * 9\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):  # First digit cannot be 0\n        for D in range(1, 10, 4):  # First digit is 1/4 of last digit and D must be multiple of 4\n            if A == (D // 4):  # Ensuring first condition of 1/4 relation\n                for B in range(1, 10):\n                    if B == A - 1:  # Second digit is 1 less than the first\n                        for C in range(1, 10):\n                            if len(set([A, B, C, D])) == 4:  # All digits must be different\n                                ABCD = (1000 * A) + (100 * B) + (10 * C) + D\n                                DCBA = (1000 * D) + (100 * C) + (10 * B) + A\n                                if ABCD * 4 == DCBA:  # The condition of multiplicatoin with 4\n                                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 105  # convert 1.05m to cm\n    longer_piece = 2 * (total_length_cm / 3)  # since one piece is twice as long as the other\n\n    return longer_piece\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    gallon_to_litres = 4.55\n    \n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * gallon_to_litres\n    total_cost = litres_used * cost_per_litre\n    \n    return total_cost\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Since Jack needs to ensure he wins, he should leave a multiple of 12 coins after his first move.\n    # This forces Ken into a cycle Jack can control, as any move Ken makes can be countered by Jack \n    # to keep the remaining pile as a multiple of 12.\n    # Therefore, Jack wants to leave 2015 as a multiple of 12 after his first move.\n\n    coins_total = 2015\n    coins_to_pick = (coins_total - 1) % 12 + 1\n\n    return coins_to_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0\n    # We also have the point (4, 8) which would satisfy the equation y = mx + 0\n    # Solving for m using the given point\n    x = 4\n    y = 8\n    m = y / x\n    \n    # We know b = 0, so the final equation is y = mx\n    equation = f\"y = {m}x\"\n    \n    return equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    pattern_length = 5  # Length of the repeating pattern (●○●○○)\n    white_balls_in_pattern = 3  # Number of white balls in the pattern\n\n    # Calculate the number of complete patterns\n    complete_patterns = 92 // white_balls_in_pattern\n\n    # Calculate the total number of balls from complete patterns\n    total_balls_from_complete_patterns = complete_patterns * pattern_length\n\n    # Calculate remaining white balls\n    remaining_white_balls = 92 % white_balls_in_pattern\n\n    # Map the remaining balls to the pattern to identify how many additional balls there are\n    additional_balls = 0\n    for i in range(pattern_length):\n        if i % 2 != 0:  # Positions 1, 3, 4 (0-indexed) in the pattern are white balls\n            if remaining_white_balls == 0:\n                break\n            remaining_white_balls -= 1\n        additional_balls += 1\n\n    # Calculate total number of balls\n    total_balls = total_balls_from_complete_patterns + additional_balls\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"  # Format time with leading zeros\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def num_of_ones(n):\n        return str(n).count('1')\n    \n    ans = num_of_ones(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Since there are three youngest dwarfs, using the Arithmetic Sequence Sum formula where n = 3:\n    # Sum = n/2 * (2a + (n-1)d)\n    # where a is the first term, d is the common difference (which is 1 year as the dwarfs were born in consecutive years)\n    # Given that Sum = 42\n    # 42 = 3/2 * (2x + (3-1)*1)\n    # 42 = 3/2 * (2x + 2)\n    # 42 = 3 * (x + 1)\n    # 42/3 = x + 1\n    # 14 = x + 1\n    # Thus, x = 13\n    youngest_age = 42 / 3 - 1\n\n    # Age of the oldest one would then be:\n    # oldest_age = youngest_age + 6 (since there are 7 dwarfs born in consecutive years)\n    oldest_age = youngest_age + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n\n    # Convert mm to cm\n    shortened_length_cm = shortened_length_mm / 10\n    new_length_cm = original_length_cm - shortened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    # Let's denote John's initial number of stickers as j\n    # Sam's initial number of stickers can be represented as 7x\n    # Peter's initial number of stickers can be represented as 5x\n    # John, after receiving stickers, has 1.8j stickers\n    # Sam, after giving stickers, has 7x - 0.2 * 7x\n    # Peter, after giving stickers, has 5x - 0.2 * 5x\n    # The equation can be set up based on:\n    # (Sam's final stickers) = (John's final stickers) + 20\n    # (John's final stickers) = John's initial + 20% from both Sam and Peter\n    # We have two equations as follows:\n    # (7x - 0.2 * 7x) = 1.8j + 20 <=> 5.6x = 1.8j + 20 (1)\n    # 1.8j = j + 0.2 * 7x + 0.2 * 5x <=> 1.8j = j + 1.4x + x <=> 0.8j = 2.4x (2)\n    # We can solve Equations (1) and (2) to find x which represents Peter's initial stickers\n\n    from sympy import symbols, Eq, solve\n\n    x, j = symbols('x j')\n    equation1 = Eq(5.6*x, 1.8*j + 20)\n    equation2 = Eq(0.8*j, 2.4*x)\n\n    solutions = solve((equation1, equation2), (x, j))\n    \n    # Peter's initial number of stickers is represented by 5x\n    peter_initial_stickers = 5 * solutions[x]\n    return peter_initial_stickers\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Calculate the time spent on each part of the race\n    time_first_part = 420 / 7  # Time = Distance / Speed\n    time_middle_part = 620 / 5\n    time_last_part = (1200 - 420 - 620) / 8\n\n    # Sum the times to get the total time spent\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    total_tests = 4\n    current_average = 89\n    desired_average = 95\n    \n    # Paul's total current score\n    current_score = total_tests * current_average\n    \n    # Initialize more tests needed to zero\n    more_tests_needed = 0\n    \n    # Keep adding new tests until the average reaches at least 95\n    while True:\n        # Calculate new average\n        new_average = (current_score + 100 * more_tests_needed) / (total_tests + more_tests_needed)\n        \n        # Check if the desired average is reached\n        if new_average >= desired_average:\n            break\n        \n        # Increment the number of additional tests needed if the desired average is not reached\n        more_tests_needed += 1\n\n    return more_tests_needed\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    two_notes, ten_notes = symbols('two_notes ten_notes')\n\n    # The total number of notes\n    equation1 = Eq(two_notes + ten_notes, 72)\n\n    # The condition after spending\n    equation2 = Eq(ten_notes - 0.9 * ten_notes, 2 * (two_notes - 0.75 * two_notes))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (two_notes, ten_notes))\n\n    # Calculate the number of $2 and $10 notes\n    num_two_notes = solutions[two_notes]\n    num_ten_notes = solutions[ten_notes]\n\n    # Calculate the amount spent on the gift\n    amount_spent = 0.9 * num_ten_notes * 10 + 0.75 * num_two_notes * 2\n\n    return amount_spent\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Rates at which the hoses fill the pool (pool/hour)\n    equation1 = Eq(1/A + 1/B, 1/9)\n    equation2 = Eq(1/A + 1/C, 1/12)\n    equation3 = Eq(1/B + 1/C, 1/18)\n\n    rates = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Total rate when all hoses are turned on\n    total_rate = rates[A] + rates[B] + rates[C]\n\n    # Time taken when all three hoses are turned on\n    time_taken = 1 / total_rate\n\n    return time_taken.evalf()\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since we want to be sure that at least 2 markers are the same color,\n    # we must consider the worst-case scenario following the pigeonhole principle,\n    # which means we need to pick at least one of each color first.\n    # There are three colors, so after picking one of each, we have:\n    one_of_each_color = 3\n\n    # If we pick one more marker after picking one of each,\n    # we will definitely have two markers of the same color.\n    # So we need to pick one more marker to ensure this.\n    one_more_to_ensure_pair = 1\n\n    # The fewest number of markers to ensure at least two of the same color:\n    min_markers = one_of_each_color + one_more_to_ensure_pair\n\n    return min_markers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for five_dollar_notes in range(59):\n        two_dollar_notes = 58 - five_dollar_notes\n        if (5 * five_dollar_notes + 2 * two_dollar_notes) == 164:\n            return five_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    a7, a8, a9 = 105, 120, 135\n    common_difference = a8 - a7  # Assuming the sequence is arithmetic\n    # Formula to find the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We know a7, so to find a1: a1 = a7 - (7 - 1) * d\n    a1 = a7 - (7 - 1) * common_difference\n    # Now find a_100:\n    a100 = a1 + (100 - 1) * common_difference\n    return a100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent_on_cupcakes = 187.5\n    price_cupcake_to_muffin_ratio = 3\n\n    # Let's denote the total money Cellina had originally as 'total_money'.\n    # She spent 5/9 of her money on 36 cupcakes and 32 muffins. \n    # She used another 1/6 of her money to buy more cupcakes.\n\n    # The money spent on 36 cupcakes at first is 5/9 of total_money minus\n    # the money spent on 32 muffins, which is at the price of thrice as much as that for muffins.\n    # We also know that she later used 1/6 of total_money to buy more cupcakes. That means:\n    # total_spent_on_cupcakes = 5/9 * total_money - price_per_muffin * 32 * 3 + 1/6 * total_money\n\n    # From here, we can express 'total_money' in terms of 'price_per_muffin' as follows:\n    # total_money = total_spent_on_cupcakes / (5/9 + 1/6 - 32 * 3 * price_per_muffin)\n\n    # But we don't know 'price_per_muffin' yet. To find this out, we use the fact that\n    # price_per_cupcake = 3 * price_per_muffin and Cellina bought 36 cupcakes with 5/9 of her money.\n    # So 36 * 3 * price_per_muffin = 5/9 * total_money\n\n    # Hence, from the above equation, we can solve for 'price_per_muffin':\n    price_per_muffin = total_spent_on_cupcakes / (36 * price_cupcake_to_muffin_ratio + 32)\n\n    # Once we have 'price_per_muffin', we can calculate the amount spent on muffins:\n    money_spent_on_muffins = price_per_muffin * 32\n\n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # As each box must contain at least 2 marbles and each box should contain a different number, \n    # except for two which have the same number, we consider the smallest even numbers:\n    # Starting with 2, the sequence of even numbers would be: 2, 4, 6, 8, 10, ...\n    # We have to find the smallest amount for 10 boxes with one repeated number.\n\n    # Initialize list of marbles for the first 9 distinct boxes, starting from 2, 4, ..., 18.\n    marbles = [i for i in range(2, 19+1, 2)]\n\n    # The 10th box will have the same number of marbles as the 1st box since we need one pair of boxes with the same amount.\n    # We add the smallest number to it, which is 2.\n    marbles.append(2)\n\n    # Calculate the total number of marbles, which is the sum of the list 'marbles'.\n    total_marbles = sum(marbles)\n\n    return total_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    total_sum = sum(range(1, 10)) + sum(range(4, 9))\n    return total_sum\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    # Since sprinklers are installed in the middle of each two parterres,\n    # one less sprinkler is needed than the number of parterres.\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    first_number = 387\n    second_number = 729\n\n    average = (first_number + second_number) / 2\n\n    return int(average)\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Therefore, they are left with 80% of their stickers\n    equation2 = Eq(marry - 0.2 * marry, charlotte_final + 20)\n    equation3 = Eq(alexis - 0.2 * alexis, charlotte_final)\n\n    # Charlotte's stickers increased by 80%\n    equation4 = Eq(charlotte_final, charlotte_initial + 0.8 * charlotte_initial)\n\n    # Merge equations 2 and 3, as they are same after taking 20% from both Marry and Alexis\n    equation5 = Eq(0.8 * marry, 0.8 * alexis + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation4, equation5), (marry, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total length of the road\n    x = symbols('x')\n\n    # The first day paved distance is given as 8 (in thousand feet)\n    first_day = 8\n\n    # The second day paved distance is 4 thousand feet more than 1/6 of the total road\n    second_day = (1/6) * x + 4\n\n    # Together, first day and second day paved 5/12 of the total road\n    equation = Eq(first_day + second_day, (5/12) * x)\n\n    solution = solve(equation, x)\n\n    # Since we get the total road length in thousand feet, we just return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let x be the total number of bottle caps before giving away any.\n    # After giving away 440 bottle caps, Justin has 5/9 of his collection left.\n    # This means he gave away 4/9 of his collection, which is equal to 440 bottle caps.\n    # So we can write the equation: (4/9) * x = 440\n    # To find x, we solve for x: x = (440 * 9) / 4\n    total_caps = (440 * 9) // 4\n    return total_caps\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perim = 2 * (144 + 204) - 4  # Subtracting 4 because we already have wheat on each corner\n    distance = perim / (116 - 1) # Subtracting 1 because we start counting from the second wheat\n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    n = 1\n    while True:\n        multiple = 35 * n\n        if str(multiple).endswith('35') and sum([int(digit) for digit in str(multiple)]) == 35:\n            return multiple\n        n += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sunny, rainy = symbols('sunny rainy')\n    \n    equation1 = Eq(sunny + rainy, 8)           # The number of sunny and rainy days combined is 8 days\n    equation2 = Eq(20 * sunny + 12 * rainy, 112)  # Total nuts collected from the sunny and rainy days\n    \n    solutions = solve((equation1, equation2), (sunny, rainy))\n    \n    return solutions[rainy]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # prices in pence\n    price_1 = 15\n    price_2 = 28\n    price_5 = 60\n\n    # amounts of bottles\n    num_bottles = 17\n\n    # start with the smallest amount of money (set high to ensure it will be beaten by any legitimate total)\n    smallest_amount = float('inf')\n\n    # calculate combinations of packs using brute force\n    for pack5 in range(num_bottles // 5 + 1):\n        for pack2 in range((num_bottles - 5 * pack5) // 2 + 1):\n            pack1 = num_bottles - 5 * pack5 - 2 * pack2\n            total_price = pack5 * price_5 + pack2 * price_2 + pack1 * price_1\n            if total_price < smallest_amount:\n                smallest_amount = total_price\n\n    # convert from pence to pounds\n    smallest_amount_in_pounds = smallest_amount / 100\n\n    return smallest_amount_in_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # Starting with 4 players, we need to determine the number of rounds until one player remains.\n    num_players = 4\n    rounds = 0\n    \n    # Keep dividing the number of players by 2 until 1 player remains.\n    while num_players > 1:\n        num_players /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Using the pigeonhole principle\n    pigeons_at_least = (total_pigeons + total_cages - 1) // total_cages\n    \n    return pigeons_at_least\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    # Number of kids who correctly answered the first question\n    first_question_correct = 10\n    # Number of kids who correctly answered the second question\n    second_question_correct = 15\n    # Number of kids who correctly answered both questions\n    both_questions_correct = 7\n\n    # Calculate number of kids who only answered one question correctly\n    only_one_question_correct = (first_question_correct - both_questions_correct) + \\\n                                (second_question_correct - both_questions_correct)\n    \n    return only_one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    ans = (end_date - start_date).days + 1  # Including both start and end date\n    return ans\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)  # After Rachel gives Alice 10 pieces of candy\n    equation2 = Eq((rachel - 8) / 3, alice - 8)  # After they both eat 8 pieces\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5  # time in seconds to pass the tree\n\n    # Distance = Speed * Time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the original expression without parentheses\n    original_expression = \"285+15/5-2\" \n\n    # Use eval to evaluate the expression outcomes for different arrangements of parentheses\n    results = set()\n    results.add(eval(original_expression)) # No parentheses\n    \n    # Different parenthesis arrangements\n    results.add(eval('(285+15)/5-2')) # One pair enclosing the first two elements\n    results.add(eval('285+(15/5-2)')) # One pair enclosing the last two elements\n    results.add(eval('(285+15)/(5-2)')) # One pair for the first two and one for the last two (two pairs)\n    results.add(eval('(285)+(15/5)-2')) # Redundant parentheses around the first element\n    results.add(eval('285+(15/5)-(2)')) # Redundant parentheses around the last element\n    results.add(eval('285/((15/5)-2)')) # Enclosing the last division and subtraction (not changing the sequence)\n    results.add(eval('285/(15/(5-2))')) # Inner pair changes the division sequence\n    \n    # Return the count of unique results\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Total mushrooms gathered\n    total = Eq(first_hour + second_hour, 40)\n    # If he gathered 26 more mushrooms in the first hour...\n    equal_amount = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total, equal_amount), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    max_brush_cost = 9\n    towel_cost = 10\n    brush_cost = 3\n    total_cost = 59\n\n    # Find the maximum number of brushes Bud can buy without spending £10 or more\n    max_brushes = max_brush_cost // brush_cost\n\n    for brushes in range(max_brushes + 1):\n        if (total_cost - brushes * brush_cost) % towel_cost == 0:\n            return brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Let x be the number of teddy bears made on the first day\n    # Then the number of teddy bears made on each of the following days are:\n    # x, x+2, x+4, x+6, x+8\n    # The sum of these amounts is the total number of teddy bears made in 5 days, which is 35\n    total_bears = 35\n    num_days = 5\n    sum_formula = (num_days / 2) * (2 * x + (num_days - 1) * 2)\n    # We now solve for x using the sum of an arithmetic sequence formula:\n    # total_bears = (num_days / 2) * (2 * x + (num_days - 1) * 2)\n    # The equation becomes 35 = (5 / 2) * (2 * x + 8)\n    # Multiply both sides by 2 to simplify the equation\n    # 70 = 5 * (2 * x + 8)\n    # Divide by 5\n    # 14 = 2 * x + 8\n    # Subtract 8 from both sides\n    # 6 = 2 * x\n    # Divide by 2\n    # 3 = x\n    x = (total_bears * 2 / num_days - (num_days - 1) * 2) / 2\n    # The number of teddy bears made on the fifth day is x + 2 * (5 - 1), this gives us\n    fifth_day_bears = x + 2 * (num_days - 1)\n    return fifth_day_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    initial_number = (final_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n\n    ans = Fraction('0.49').limit_denominator()\n\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "from itertools import permutations\n\ndef solution():\n    digits = '018'\n    perm = permutations(digits, 3)\n    valid_numbers = [int(''.join(p)) for p in perm if p[0] != '0']\n    return len(valid_numbers)\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # The number of pink and grey marbles\n    pink = 9\n    grey = 7\n    # In the worst case scenario, you would draw all of the pink and grey marbles.\n    # To ensure that the next marble is blue, you would need to draw one more marble\n    marbles_drawn = pink + grey + 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from sympy import primerange, isprime\nfrom itertools import permutations\n\ndef solution():\n    primes = list(primerange(1, 9))\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(isprime(perm[i]+perm[i+1]) for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    return (3 / 10) / (6 / 7) * 100\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the difference between boys and girls.\n    equation1 = Eq(boys, girls - 30)\n    \n    # Equation representing the boys and girls remaining after some left for recess\n    equation2 = Eq((1 - 3/5) * boys, (1 - 5/8) * girls)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of frogs and dragonflies\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    # Equation 1: initially, the amount of frogs is 9 more than that of dragonflies\n    equation1 = Eq(frogs_initial, dragonflies_initial + 9)\n    \n    # Equation 2: after turning, there are 11 frogs and 10 dragonflies in total\n    equation2 = Eq(frogs_initial - (11 - 10), dragonflies_initial + (11 - 10))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(0, 100):  # Assumption: the missing number is a natural number less than 100\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Let x, y, z represent the hourly work rate of workers A, B, and C respectively\n    # x + y = 1/3\n    # y + z = 1/4\n    # x + z = 1/8\n    # We want to find the value of 1/(x + y + z)\n\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 1/3)\n    equation2 = Eq(y + z, 1/4)\n    equation3 = Eq(x + z, 1/8)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # We need to find the total rate of work when all three workers are working together\n    total_rate = solutions[x] + solutions[y] + solutions[z]\n    # The time it takes for all three together to complete the job is the reciprocal of the total rate\n    time_for_all_three = 1 / total_rate\n\n    return time_for_all_three\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(1, 101):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # There are three operations, resulting in two pairs of possible brackets.\n    # First, compute the result without any brackets - baseline.\n    baseline = 285 + 15 / 5 - 2\n\n    # Initialize a set to store unique results.\n    results = set()\n\n    # Add the baseline result first.\n    results.add(baseline)\n\n    # First pair of brackets possibility: (285 + 15) / 5 - 2\n    results.add((285 + 15) / 5 - 2)\n\n   # Second pair of brackets possibility: 285 + (15 / 5) - 2\n    # This is same as the baseline. No need to add to results.\n\n    # Third pair of brackets possibility: 285 + 15 / (5 - 2)\n    results.add(285 + 15 / (5 - 2))\n\n    # Fourth pair of brackets possibility: (285 + 15 / 5) - 2\n    # This is same as the baseline. No need to add to results.\n\n    # Fifth pair of brackets possibility: 285 + (15 / 5 - 2)\n    results.add(285 + (15 / 5 - 2))\n\n    # Sixth pair of brackets possibility: 285 + 15 / (5 - 2)\n    # This is the same as the third pair. No need to add to results.\n\n    # Seventh possibility: (285 + 15) / (5 - 2)\n    results.add((285 + 15) / (5 - 2))\n\n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation based on sugar content: 2 kg of 45% sugar water + x kg of 15% sugar water = (2 + x) kg of 25% sugar water\n    equation = Eq(2 * 0.45 + x * 0.15, (2 + x) * 0.25)\n\n    # Solve the equation for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define two symbols for the number of coins Johnson (J) and Vicky (V) have\n    J, V = symbols('J V')\n\n    # Equation 1: Total coins they have together\n    equation1 = Eq(J + V, 48)\n\n    # Equation 2: If Johnson gives Vicky 8 coins, Vicky will have 2 coins less than Johnson\n    equation2 = Eq(V + 8, J - 8 - 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (J, V))\n\n    # Johnson's coins to start with\n    return solutions[J]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kids, candies = symbols('kids candies')\n\n    # If every kid eats 18 candies, 12 more candies are needed:\n    eq1 = Eq(kids * 18, candies + 12)\n\n    # If every kid eats 15 candies, the candies are just enough for kids + 2:\n    eq2 = Eq(kids * 15, candies - (15 * 2))\n\n    # Solve the two equations simultaneously to find the number of candies\n    solutions = solve((eq1, eq2), (kids, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls = 3 / 2  # 3 boys for every 2 girls\n    girls = (boys / boys_to_girls)\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Calculate the sum S\n    S = sum(int('2' * i) for i in range(1, 2018))\n    # Modulo operation to extract the last 5 digits\n    last_five_digits = S % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Using algebra to solve the problem:\n    # Let x be the number Sara thought of.\n    # According to the problem (x + 6) * 7 = 77\n    # Solving for x gives x = (77 / 7) - 6\n    ans = (77 / 7) - 6\n    return ans\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of cookies Sam and Tim originally had\n    sam, tim = symbols('sam tim')\n\n    # Create equations based on the problem statement\n    # Equation 1: Sam and Tim had 1170 cookies in total initially\n    equation1 = Eq(sam + tim, 1170)\n    \n    # Equation 2: After Sam ate 1/4 of her cookies and Tim bought 1/5 more cookies,\n    # Sam had 663 fewer cookies than Tim\n    # This translates to: sam - (1/4)*sam + tim + (1/5)*tim = 663\n    # or, equivalently, (3/4)*sam + (6/5)*tim = 663\n    equation2 = Eq((3/4)*sam + (6/5)*tim, 663 + (1/4)*sam)\n\n    # Solve the system of equations for sam and tim\n    solutions = solve((equation1, equation2), (sam, tim))\n    \n    # Calculate the number of cookies Sam ate, which is 1/4 of the amount she had initially\n    sam_cookies_eaten = solutions[sam] / 4\n    \n    return sam_cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % i == 1 for i in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let's denote the number of stamps Sally gave to Ting as x.\n    # After giving x stamps, Sally has 40 - x stamps.\n    # Ting has 32 + x stamps.\n    # The ratio of Sally's to Ting's stamps is 1:2, so we can set up an equation.\n    \n    # (40 - x) / (32 + x) = 1 / 2\n    # Cross-multiply to clear the fraction:\n    # 2 * (40 - x) = 1 * (32 + x)\n    # 80 - 2x = 32 + x\n    # 80 - 32 = 2x + x\n    # 48 = 3x\n    # x = 48 / 3\n    x = 48 // 3  # integer division since number of stamps must be an integer\n    \n    # Now we can find the number of stamps Ting has in the end,\n    # which is 32 (original) + x (received from Sally).\n    ting_stamps = 32 + x\n    \n    return ting_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry can complete the job in 18 hours, so his work rate is 1/18 of the job per hour\n    jerry_rate = 1 / 18\n    \n    # Together, Tom and Jerry can complete the job in 6 hours, so their combined work rate is 1/6 of the job per hour\n    combined_rate = 1 / 6\n    \n    # Tom's work rate is the difference between the combined rate and Jerry's rate\n    tom_rate = combined_rate - jerry_rate\n    \n    # The time it takes for Tom to complete the job by himself is the reciprocal of his work rate\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # David walks for 10 minutes at 150 m/min and t minutes at 200 m/min\n    # The total distance walked is 3700\n    equation = Eq(150 * 10 + 200 * t, 3700)\n\n    # Solve for t\n    t_solution = solve(equation, t)\n\n    # Total time spent walking is 10 minutes plus t minutes\n    total_time = 10 + t_solution[0]\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candies = 9\n    lily_candies = 7\n    total_candies = sissy_candies + lily_candies\n    return total_candies\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    money_to_spend = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    bonus_sweets_condition = 2 # One sweet for every two packets bought\n\n    # Calculate the number of packets that can be bought with $20\n    packets_bought = money_to_spend // price_per_packet\n    \n    # Calculate the total number of sweets from the packets bought\n    total_sweets = packets_bought * sweets_per_packet\n    \n    # Calculate the number of bonus sweets\n    bonus_sweets = packets_bought // bonus_sweets_condition\n    \n    # Calculate the maximum number of sweets\n    max_sweets = total_sweets + bonus_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Start from the scenario where distribution is as equal as possible\n    candies = 88\n    children = 8\n    \n    # At least one candy for each child, so subtract 8 from candies\n    candies -= children\n\n    # Distribute candies starting from 1 up to 7 extra candies for children in increasing order\n    # Once we hit a point where we cannot add more without making it non-unique, we stop\n    # Since we cannot have two children with same number of candies, the sequence of extra candies\n    # would be 0, 1, 2, ..., n; we want to find that n\n    extras = 0\n    while (extras * (extras + 1)) // 2 <= candies:\n        extras += 1\n\n    # We subtract 1 since we should stop at the point just before it becomes non-unique\n    extras -= 1\n    \n    # The least number of pieces the child with most pieces can get is the base number \n    # plus the maximum extra due to the unique distribution constraint.\n    most_pieces = (candies // children) + 1 + extras\n    \n    # The most_pieces is the sum of base number (11 after the initial subtraction) and the max extra \n    # we could add while keeping the distribution unique.\n    return most_pieces\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total = pink + purple + orange\n\n    # Current probability of picking a pink counter\n    current_prob_pink = pink / total\n    \n    # We want to double this probability\n    desired_prob_pink = 2 * current_prob_pink\n    \n    # Find the total number of counters needed for the new probability\n    total_needed = pink / desired_prob_pink\n    \n    # Calculate how many extra counters should be added (None of them should be pink)\n    extra_counters = total_needed - total\n    \n    return int(extra_counters)\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g = symbols('g')  # Let g represent the number of girls\n    b = g * 1.40      # b represents the number of boys, which was 40% more than the number of girls\n\n    # After 24 boys and 24 girls left the gathering\n    # the number of boys was 50% more than the number of girls\n    equation = Eq((b - 24) / (g - 24), 1.50)\n\n    # Solve the equation to find the number of girls first\n    g_value = solve(equation, g)[0]\n\n    # Calculate the number of boys using the number of girls\n    b_value = g_value * 1.40\n\n    return int(b_value)\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    num_zeroes = 0\n    \n    while n > 0:\n        n //= 5\n        num_zeroes += n\n    \n    return num_zeroes\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case scenario:\n    # She picks 3 different colors first which is 3 socks\n    # Then she can pick one more sock, which is guaranteed to match one of the 3 already picked (4th sock)\n    # At this point, she has 1 pair and 2 single socks of different colors\n    # To ensure a second pair, she picks 3 more socks (potentially one of each color again)\n    # If none of these 3 form a pair, she will have 6 socks, 2 of each color\n    \n    # Following that, the next sock she picks MUST complete a pair (7th sock)\n    # At this point, she has 2 pairs and 1 single sock of the last color\n    # To guarantee another pair of the same color, she needs to pick 2 more socks of the last color (total 9th sock)\n    socks_needed = 3 + 1 + 3\n    return socks_needed\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let the original number of cupcakes (and muffins) be x.\n    x = symbols('x')\n\n    # After selling, the number of cupcakes left is x - 60.\n    # The number of muffins left is x - 12.\n    # According to the problem, the muffins left is twice the number of cupcakes left.\n    equation = Eq((x - 12), 2 * (x - 60))\n\n    # Solve the equation for x.\n    num_cupcakes_muffins = solve(equation, x)\n\n    return num_cupcakes_muffins[0] * 2  # Multiply by 2 because we need the total of cupcakes and muffins.\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let Helen's pocket money per day be x.\n    # Then, George's pocket money per day is x + 3.\n\n    # Each of them spends $5 a day, so Helen saves (x - 5) a day\n    # and George saves ((x + 3) - 5) a day.\n\n    # When Helen has saved $60, She has saved it for 60 / (x - 5) days\n    # In the same number of days, George would have saved 90 more than Helen\n    # So the equation is: ((x - 2) * 60 / (x - 5)) - 60 = 90\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    helen_saves_per_day = (x - 5)\n    george_saves_per_day = ((x + 3) - 5)\n\n    # Set up the equation for the total savings for each and solve for x\n    equation = Eq((george_saves_per_day * (60 / helen_saves_per_day)) - 60, 90)\n    helen_pocket_money = solve(equation, x)\n\n    # There might be multiple solutions, but we are interested only in the positive one,\n    # as pocket money can't be negative\n    for money in helen_pocket_money:\n        if money > 0:\n            return money\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 1.5\n    round_trip_time = shanghai_to_la + la_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    # Before Lisa gives Eddi $4\n    equation1 = Eq(eddi / wiya, 3/2)\n\n    # After Lisa gives Eddi $4\n    equation2 = Eq((eddi + 4) / wiya, 8/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a, d = symbols('a d')\n    \n    # Based on the given information, we create two equations\n    # The 9th term is a + 8d, the 15th term is a + 14d\n    # The 9th term is 18 more than the 15th term: a + 8d = a + 14d + 18\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # The sum of the 20th term and the 12th term is 88\n    # The 20th term is a + 19d and the 12th term is a + 11d: a + 19d + a + 11d = 88\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, d))\n\n    # Get the first term 'a' and the common difference 'd'\n    a_val, d_val = solutions[a], solutions[d]\n    \n    # To find the 32nd term, a + 31d\n    term_32 = a_val + 31*d_val\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of the first 30 natural numbers\n    sum_1_to_30 = sum(range(1, 31))\n    \n    # Since the sequence is symmetric, the sum of the entire sequence is double the sum from 1 to 30,\n    # minus the middle term (30) to avoid double-counting it\n    ans = 2 * sum_1_to_30 - 30\n    \n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n    \n    both_classes_students = sport_class_students + reading_class_students - total_students\n    \n    return both_classes_students\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance Linda drove at 40km/h\n    distance_first_part = 2 * 40\n    # Time taken to drive 280km at 70km/h\n    time_second_part = 280 / 70\n    # Total distance driven\n    total_distance = distance_first_part + 280\n    # Total time taken\n    total_time = 2 + time_second_part\n    # Average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for penpals_3pages in range(total_penpals + 1):\n        penpals_4pages = total_penpals - penpals_3pages\n        if penpals_3pages * 3 + penpals_4pages * 4 == total_pages:\n            return penpals_3pages\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    ans = minutes / 60\n    return ans\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    value_of_8 = (number // 1000) % 10 * 1000\n    return value_of_8\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days = lcm(25, 20)\n    return days\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Total number of dancing performances\n    d = 4\n    # Total number of singing performances\n    s = 6\n    # There are 5 possible slots to place the dancing performances between the singing performances\n    # (before the first, between the first and second, and so on, until after the last).\n    slots = s - 1 + 2  # Adding 2 for the slots at the beginning and end\n\n    # We can choose 4 slots where the dancing performances can go\n    # This is a combination problem: C(slots, d)\n    ways_to_place_dancing = factorial(slots) // (factorial(d) * factorial(slots - d))\n\n    # Now, we need to consider that each set of dancing and singing performances \n    # can be arranged among themselves. That's a permutation problem for each.\n    # For singing (s! ways) and for dancing (d! ways)\n    perm_singing = factorial(s)\n    perm_dancing = factorial(d)\n\n    # The result is the combination of slots times the permutation of each type of performance\n    total_ways = ways_to_place_dancing * perm_singing * perm_dancing\n\n    return total_ways\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Calculate A using the defined new operation Δ\n    A = 1\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n    \n    # Now, caculate a0 by subtracting the other a_i's from A\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Convert the fraction to its simplest form by finding the gcd of numerator and denominator\n    from math import gcd\n    numerator = int(a0.as_integer_ratio()[0])\n    denominator = int(a0.as_integer_ratio()[1])\n    common_divisor = gcd(numerator, denominator)\n    \n    # Simplify the fraction\n    m = numerator // common_divisor\n    n = denominator // common_divisor\n\n    # Return the sum m + n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    from itertools import permutations\n\n    # All digits from 0 to 9\n    digits = '0123456789'\n\n    # Iterate through all the permutations of these 4 digits.\n    for perm in permutations(digits, 4):\n        number = ''.join(perm)\n\n        # Check against the first clue\n        if sum(a == b for a, b in zip(number, '8765')) == 0 and \\\n            sum(a in '8765' for a in number) == 2:\n            # Check against the second clue\n            if sum(a == b for a, b in zip(number, '1023')) == 0 and \\\n                sum(a in '1023' for a in number) == 2:\n                # Check against the third clue\n                if sum(a == b for a, b in zip(number, '8642')) == 2 and \\\n                    sum(a in '8642' for a in number) == 2:\n                    # Check against the fourth clue\n                    if all(a not in number for a in '5430'):\n                        return int(number)  # This is the number we're looking for.\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # numbers from 100 to 999\n\n    # Count numbers with no '7's (to subtract later)\n    numbers_without_sevens = 8 * 9 * 9  # choices for hundreds, tens and units place\n\n    # Count numbers with exactly one '7' (to subtract later)\n    one_seven_in_hundreds = 1 * 9 * 9  # '7' in hundreds place\n    one_seven_in_tens = 8 * 1 * 9  # '7' in tens place, no '7' in hundreds\n    one_seven_in_units = 8 * 9 * 1  # '7' in units place, no '7' in hundreds or tens\n    numbers_with_one_seven = one_seven_in_hundreds + one_seven_in_tens + one_seven_in_units\n\n    # Subtract numbers with no '7's and exactly one '7' from total\n    at_least_two_sevens = total_three_digit_numbers - numbers_without_sevens - numbers_with_one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    # Mistaken operation\n    mistaken_eq = Eq(x / 4 - 25, 2021)\n    \n    # Solve for x (the original number)\n    mistaken_solution = solve(mistaken_eq, x)[0]\n    \n    # Correct operation\n    correct_answer = mistaken_solution * 4 + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n\n    numbers = [75, 56, 12, 105]\n    # Count the factors of 2 and 5, as 10 is made up of 2 * 5\n    twos = sum(count_factors(n, 2) for n in numbers)\n    fives = sum(count_factors(n, 5) for n in numbers)\n\n    # The number of zeros at the end of the product will be\n    # the minimum of the count of twos or fives\n    ans = min(twos, fives)\n\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna_books = symbols('donna_books')\n    chloe_books = donna_books * 4\n    equation = Eq(chloe_books - donna_books, 816)\n    books_donna = solve(equation, donna_books)\n    return books_donna[0]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((x + 4) / 8, 3)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    children, adults = symbols('children adults')\n    girls, boys = symbols('girls boys')\n\n    # Equations based on the problem description\n    equation1 = Eq(adults, 3 * children)     # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)          # twice as many boys as girls\n    equation3 = Eq(children, boys + girls)   # all children are either boys or girls\n    equation4 = Eq(adults - girls, 176)      # there were 176 more adults than girls\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (children, adults, girls, boys))\n\n    # Calculate the total number of people\n    total_people = solutions[children] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # Get the last digit of the base, which is 9\n    power = 99\n    ones_digit = pow(base, power, 10)  # Compute 9^99 mod 10\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 194):\n        if isprime(a):\n            for b in range(2, 194):\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # We want 'a' to be between 1 and 9 since 'ab' cannot be 0\n        for b in range(0, 10):  # 'b' can be between 0 and 9\n            if (10 * a + b) * 7 == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Use the Chinese Remainder Theorem to find the smallest solution\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2 * banana + 3 * apple, 1.5)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # 3 construction workers build 14 houses in 4 days\n    workers = 3\n    houses_built = 14\n    days_taken = 4\n\n    # Find houses built per worker per day\n    houses_per_worker_per_day = (houses_built / workers) / days_taken\n\n    # Calculate houses built by 9 workers in 2 days\n    new_workers = 9\n    new_days = 2\n    new_houses_built = houses_per_worker_per_day * new_workers * new_days\n\n    return int(new_houses_built)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    f12_15 = gcd(12, 15)\n    ans = gcd(f12_15, 60)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from itertools import permutations\n\n    ages = list(range(1, 29))\n    min_product = float('inf')\n\n    for perm in permutations(ages, 3):\n        if sum(perm) == 28 and (perm[0] - 10 == perm[2]) and len(set(perm)) == 3:\n            product = perm[0] * perm[1] * perm[2]\n            if product < min_product:\n                min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    children_fraction = 2/5\n    women_fraction = 1/4\n    men_fraction = 1 - (children_fraction + women_fraction)\n\n    children = children_fraction * total_people\n    men = men_fraction * total_people\n\n    equation = Eq(children - men, 20)\n\n    total_people_solution = solve(equation, total_people)\n\n    return total_people_solution[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_ball = symbols('cost_per_ball')\n    total_money = symbols('total_money')\n\n    # If Adam buys 5 balls, he has $15 left\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    # If Adam buys 8 balls, he needs $12 more\n    equation2 = Eq(8 * cost_per_ball - total_money, 12)\n\n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n    cost = solutions[cost_per_ball]\n\n    return cost\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        for b in range(a + 1, 1000):\n            if a != b and a % 75 == 0 and b % 75 == 0:\n                str_a, str_b = str(a), str(b)\n                common_digits = sum(1 for x, y in zip(str_a, str_b) if x == y)\n                if 2 in [str_a.count(digit) for digit in str_a] or \\\n                        2 in [str_b.count(digit) for digit in str_b]:\n                    if common_digits >= 1 and a + b > max_sum:\n                        max_sum = a + b\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # Height after the second bounce\n    height_after_second_bounce = 9\n\n    # Each bounce goes up to 1/3 of the previous height,\n    # So to find the height after the first bounce, multiply by 3\n    height_after_first_bounce = height_after_second_bounce * 3\n\n    # To find the initial height, again multiply by 3\n    initial_height = height_after_first_bounce * 3\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    denominator1 = 2/25\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculate the second complex fraction\n    numerator2 = 2 - (2/3)\n    denominator2 = 8/3\n    complex_fraction2 = numerator2 / denominator2\n\n    # Calculate the final result\n    ans = complex_fraction1 + complex_fraction2\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Lee's work rate per hour\n    lee_rate = symbols('lee_rate')\n    # Nancy's work rate per hour\n    nancy_rate = symbols('nancy_rate')\n    \n    # They finish the job together in 10 hours, so their combined work rate equals 1 job/10 hours\n    equation1 = Eq(lee_rate + nancy_rate, 1/10)\n    \n    # Lee types for 6 hours, and then Nancy types for 20 hours to complete 1 job\n    equation2 = Eq(6 * lee_rate + 20 * nancy_rate, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n    \n    # Calculate how long it would take Nancy to finish the job by herself: 1 job / her rate\n    nancy_time = 1 / solutions[nancy_rate]\n    \n    return nancy_time\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    average_score = 90\n    difference_in_average = 7\n\n    total_marks = total_pupils * average_score\n    average_A = average_score - (difference_in_average * 30 / total_pupils)\n    average_B = average_A + difference_in_average\n\n    return average_B\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Denominator parts as separate variables\n    part1 = 2007 * 2008\n    part2 = 2008 * 2009\n    part3 = 2009\n    \n    # The entire denominator when combined\n    common_denominator = part1 * part2 * part3\n\n    # The numerator will be the sum of the common denominominator divided by each part\n    numerator = common_denominator // part1 + common_denominator // part2 + common_denominator // part3\n    \n    # Now flip the fraction to find the value\n    ans = common_denominator / numerator\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):  # Jeremy has 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy has 3 twenty-pence coins\n            for fifty_pence in range(2):  # Jeremy has 1 fifty-pence coin\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    if students % boat_capacity == 0:\n        num_boats = students // boat_capacity\n    else:\n        num_boats = (students // boat_capacity) + 1\n    \n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    term1 = 250250\n    term2 = 250249\n    term3 = 250251\n\n    ans = (term1 ** 2) - (term2 * term3)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people_in_line = 30\n    people_in_front_of_mark = total_people_in_line - people_behind_mark - 1\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for i in range(1, 201):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4.\n    for J in range(10):\n        if (int(f\"6{J}\") % 4) == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair_cost, table_cost = symbols('chair_cost table_cost')\n    equation1 = Eq(5 * table_cost + 12 * chair_cost, 720)\n    equation2 = Eq(table_cost, chair_cost + 25)\n\n    solutions = solve((equation1, equation2), (chair_cost, table_cost))\n\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one apple and one peach\n    cost_apple, cost_peach = symbols('cost_apple cost_peach')\n\n    # Create equations based on the provided information\n    equation1 = Eq(4 * cost_apple + 3 * cost_peach, 10)\n    equation2 = Eq(4 * cost_apple + 6 * cost_peach, 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_apple, cost_peach))\n\n    return solutions[cost_peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    result = 66\n    subtracted_result = result / 6\n    original_number = subtracted_result - 7\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a, b, x = symbols('a b x')\n    # Given operation\n    operation = 5*a - 2*b\n    # Equation based on the given operation and values\n    equation = Eq(operation.subs(a,9), 33)\n    # Solve for x\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_squares = lambda n: n * (n + 1) * (2 * n + 1) // 6\n    sum_cubes = lambda n: (n * (n + 1) // 2) ** 2\n\n    ans = sum([i * (i + 1)**2 for i in range(24)])  # 0 to 23 terms\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360\n    \n    # Ratio of time spent going up to going down is 5:4\n    up_ratio = 5\n    down_ratio = 4\n    total_ratio = up_ratio + down_ratio\n    \n    # Calculate time spent going up and going down\n    time_up = (up_ratio / total_ratio) * total_time\n    time_down = (down_ratio / total_ratio) * total_time\n    \n    # Speeds relation: let the speed going down be v, so speed going up is v-10\n    # Let the speed going down be v\n    # Distance = Speed * Time\n    # Distance up = Distance down because it's the same path.\n    # (v - 10) * time_up = v * time_down => v * time_down = (v - 10) * time_up\n    # => v * time_down = v * time_up - 10 * time_up \n    # => v = 10 * time_up / (time_down - time_up)\n    \n    v_down = 10 * time_up / (time_down - time_up)\n    v_up = v_down - 10\n    \n    # Total distance cycled is the sum of the distance up and down\n    distance_up = v_up * time_up\n    distance_down = v_down * time_down\n    total_distance = distance_up + distance_down\n    \n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\nfrom datetime import datetime, timedelta\n\ndef solution():\n    packet_a = 25\n    packet_b = 20\n    \n    # Calculate least common multiple\n    days_to_next_cycle = lcm(packet_a, packet_b)\n    \n    # Starting date\n    start_date = datetime(year=2023, month=3, day=1)\n    \n    # Next start date\n    next_start_date = start_date + timedelta(days=days_to_next_cycle)\n    \n    return next_start_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    initial_watermelons = 94\n    initial_pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    ratio = 3\n\n    for days in range(1, min(initial_watermelons, initial_pineapples) + 1):\n        watermelons_left = initial_watermelons - watermelons_per_day * days\n        pineapples_left = initial_pineapples - pineapples_per_day * days\n        if pineapples_left == ratio * watermelons_left:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each person sends a card to each other person, but not to themselves\n    cards_sent_per_person = num_friends - 1\n    # Since each handshake is between two people, we should divide by 2\n    total_cards_sent = (num_friends * cards_sent_per_person) // 2\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tom's current age and Jerry's current age\n    tom, jerry = symbols('tom jerry')\n\n    # Tom will be twice his age in 4 years from now\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the system of equations for Tom and Jerry's ages\n    ages = solve((equation1, equation2), (tom, jerry))\n    tom_age = ages[tom]\n    jerry_age = ages[jerry]\n\n    # Calculate in how many years from now will Jerry's age be doubled\n    years = symbols('years')\n    equation3 = Eq(jerry + years, 2 * jerry)\n\n    # Solve for the number of years\n    years_to_double_jerry = solve(equation3, years)\n\n    return years_to_double_jerry[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Time the bus leaves after Aiden arrives\n    aiden_arrival_time = (9 * 60) + 22  # Convert 9:22 AM to minutes\n    bus_interval = 35  # Bus leaves every 35 minutes\n    \n    # Time of the first bus of the day (assuming it starts at or before Aiden's arrival time)\n    first_bus_time = aiden_arrival_time - (aiden_arrival_time % bus_interval)\n    \n    # Time the next bus arrives after Aiden\n    next_bus_time = first_bus_time + bus_interval\n    # How long Aiden has to wait for the next bus\n    wait_time = next_bus_time - aiden_arrival_time\n    \n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    meeting_time = 5\n    \n    # Distance = Speed x Time\n    # The total distance is the sum of the distances each person walks\n    total_distance = (eddie_speed + brother_speed) * meeting_time\n    \n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    current_year = 2017\n    father_age = 31\n\n    while True:\n        current_year += 1\n        my_age = current_year - 2017 + 7\n        brother_age = current_year - 2017 + 5\n        mother_age = current_year - 2017 + 29\n        father_age += 1\n\n        if isprime(my_age) and isprime(brother_age) and isprime(mother_age) and isprime(father_age):\n            return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n    \n    after_discount = original_price * (1 - discount)\n    final_price = after_discount * (1 + increase)\n    \n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # Each segment between two lamp posts has 3 flowers\n    flowers_per_segment = 3\n    \n    # Jamie planted 30 flowers in total\n    total_flowers = 30\n    \n    # Calculate the number of segments between lamp posts\n    # which is also the number of lamp posts minus 1\n    num_segments = total_flowers // flowers_per_segment\n    \n    # The total length of the road\n    road_length = 50\n    \n    # Calculate the distance between every 2 lamp posts\n    distance = road_length / (num_segments + 1)\n    \n    return distance\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given = 15 * 8\n    books_packed = total_books - books_given\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    eq1 = Eq(lora + mother, 44)\n    eq2 = Eq(mother, 3 * lora)\n\n    solutions = solve((eq1, eq2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    # The pattern of unit digits for powers of 4 is 4, 6, 4, 6, ..., which repeats every 2 steps.\n    # Since 2008 is even, the unit digit will be the same as 4^2\n    power_pattern_cycle = 2\n    power_remainder = 2008 % power_pattern_cycle\n\n    if power_remainder == 0:\n        unit_digit = (base_unit_digit ** 2) % 10\n    else:\n        unit_digit = base_unit_digit\n\n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009  # Number representing ninety thousand and nine\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the audio shop (H to A), bookshop (H to B), and chapel (H to C)\n    paths_H_A = 6\n    paths_H_B = 4\n    paths_H_C = 5\n\n    # Number of paths from the audio shop, bookshop, and chapel to school (A to S, B to S, C to S)\n    paths_A_S = 2\n    paths_B_S = 2\n    paths_C_S = 3\n\n    # Total number of paths from home to school through each shop\n    paths_H_S = (paths_H_A * paths_A_S) + (paths_H_B * paths_B_S) + (paths_H_C * paths_C_S)\n    \n    return paths_H_S\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let A, B, and C represent the weights of Adam, Ben, and Carl respectively.\n    # According to the problem:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Summing all three equations gives us 2A + 2B + 2C = 102 + 97 + 93\n    # Therefore, A + B + C = (102 + 97 + 93) / 2 which is the total weight\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_time_minutes = (12 * 60) + 40  # convert 12.40 pm to minutes\n    stay_duration_minutes = (2 * 60) + 40  # convert 2 hours and 40 minutes to minutes\n\n    leave_time_minutes = arrival_time_minutes + stay_duration_minutes\n\n    leave_time_hours = leave_time_minutes // 60\n    leave_time_minutes = leave_time_minutes % 60\n\n    # Adjust for the 24-hour clock if the time is beyond 12:00 PM\n    if leave_time_hours > 12:\n        leave_time_hours -= 12\n        period = \"PM\"\n    else:\n        period = \"AM\"\n\n    leave_time = f\"{leave_time_hours:02d}:{leave_time_minutes:02d} {period}\"\n    return leave_time\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3  # one third of the coins are £1 coins\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins  # remaining are 20p coins\n\n    total_value = one_pound_coins * 1 + fifty_p_coins * 0.50 + twenty_p_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    # Equation representing total amount before purchases\n    total_before_purchase = Eq(benson + clive, 705)\n    \n    # Equation representing equality after purchases\n    equal_after_purchase = Eq(benson - 34, clive - 63)\n    \n    # Solving the system of equations\n    solutions = solve((total_before_purchase, equal_after_purchase), (benson, clive))\n    \n    # Clive's amount at first\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle_sticks = 49\n    received_sticks = 11\n    eddie_initial_sticks = belle_sticks + received_sticks * 2\n\n    return eddie_initial_sticks\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamp_posts = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between_lamp_posts\n\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, kofi = symbols('john kofi')\n    \n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 3)\n    \n    solutions = solve((equation1, equation2), (john, kofi))\n    \n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_per_person = total_tea // 2\n    tea_to_give = tea_per_person - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '246'\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    # let n be the number of normal rabbits and s be the number of special rabbits\n    from sympy import symbols, Eq, solve\n\n    n, s = symbols('n s')\n    # equation for the heads: 1 head per normal rabbit and 3 heads per special rabbit\n    equation1 = Eq(n + 3 * s, 53)\n    # equation for the feet: 4 feet per normal rabbit and 2 feet per special rabbit\n    equation2 = Eq(4 * n + 2 * s, 102)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, s))\n\n    # Return the total number of rabbits\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    cost_for_13_bananas = cost_per_banana * 13\n    change = (10 * 100) - cost_for_13_bananas  # converting pounds to pence (£10 to 1000p)\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum_odd = sum(range(1, 101, 2))\n    sum_even = sum(range(2, 101, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # The decimal form of 1/70 repeats every 6 digits after the decimal point\n    # These digits are: 0.014285 714285...\n    recurring_pattern = '014285'\n    \n    # The 500th digit after the decimal point\n    # We use modulo to find the position in the recurring pattern\n    position = (500 - 1) % len(recurring_pattern) \n    \n    # Return the digit at that position as an integer\n    ans = int(recurring_pattern[position])\n    \n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    neelesh_sweets_before_eating = neelesh_sweets_after_eating + 1\n    fraction_given = 1/6\n    ayesha_total_sweets = neelesh_sweets_before_eating / fraction_given\n    ayesha_sweets_left = ayesha_total_sweets - neelesh_sweets_before_eating\n\n    return ayesha_sweets_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define weight variables for copper ball (c) and iron ball (i).\n    c, i = symbols('c i')\n\n    # Set up two equations based on the given information.\n    equation1 = Eq(8*c + 9*i, 135)\n    equation2 = Eq(6*c + 3*i, 75)\n\n    # Solve the equations to find the weights of one copper ball and one iron ball.\n    solutions = solve((equation1, equation2), (c, i))\n    \n    # Retrieve the weight of one copper ball.\n    return solutions[c]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1/(i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1/(i * (31 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    number_of_males = total_adults * fraction_male\n    return int(number_of_males)\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of gummy bears and y the initial number of lollipops\n    x, y = symbols('x y')\n\n    # Original ratio equation: x / y = 5 / 7\n    equation1 = Eq(x / y, 5 / 7)\n\n    # New ratio equation with 120 pieces added to each pile: (x + 120) / (y + 120) = 4 / 5\n    equation2 = Eq((x + 120) / (y + 120), 4 / 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total pieces of candy now: x + y + 120 each\n    total_candies_now = solutions[x] + solutions[y] + 120 * 2\n\n    return total_candies_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_a = 80\n    box_c = symbols('box_c')\n    box_b = 2 * box_c\n    total_marbles = 560\n    \n    equation = Eq(box_a + box_b + box_c, total_marbles)\n    solutions = solve(equation, box_c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_in_stone = 15\n    andrew_weight_in_pounds = 275\n    pounds_per_stone = 14\n    \n    david_weight_in_pounds = david_weight_in_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_in_pounds - david_weight_in_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    last_shown = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sequence = [5, 15, 17, 23]\n    repetitions = 3\n    sum_sequence = sum(sequence)\n    total_sum = sum_sequence * repetitions\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert base 3 numbers to base 10\n    num1 = int(str(12101), 3)\n    num2 = int(str(2210), 3)\n\n    # Perform subtraction in base 10\n    result_base10 = num1 - num2\n\n    # Convert the result from base 10 back to base 3\n    result_base3 = ''\n\n    while result_base10:\n        result_base3 = str(result_base10 % 3) + result_base3\n        result_base10 //= 3\n\n    # If the result is an empty string, it means the result was 0\n    if not result_base3:\n        result_base3 = '0'\n\n    return int(result_base3)\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    excluded = set() # Set to keep track of numbers that differ by 5\n    max_n = 0\n    for i in range(1, 21):\n        if i not in excluded:\n            max_n += 1\n            # Exlude all numbers that differ by 5 from i\n            for j in range(i + 5, 21, 5):\n                excluded.add(j)\n    return max_n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')\n    \n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n    \n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for John's current age and his mother's current age\n    john_age, mother_age = symbols('john_age mother_age')\n    \n    # Create the equation based on the problem statement\n    # John's age in 8 years is equal to his mother's age 20 years ago\n    equation1 = Eq(john_age + 8, mother_age - 20)\n    \n    # Since at some point, John's mother was 5 times as old as John,\n    # we set up the equation to reflect this relationship\n    # We introduce a new variable, age_diff, for the difference in their ages.\n    age_diff = symbols('age_diff')\n    equation2 = Eq(mother_age - john_age, age_diff)\n\n    # When John is age_diff years old, his mother is 5 * age_diff\n    equation3 = Eq(5 * age_diff, mother_age)\n    \n    # Now, solve the three equations\n    solutions = solve((equation1, equation2, equation3), (john_age, mother_age, age_diff))\n\n    # Extract the solution for John's age when his mother was 5 times his age\n    john_age_when_mother_5_times = solutions[age_diff]\n    \n    return john_age_when_mother_5_times\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    num = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denom = ((2017 + 1/3) - 2016.875) * 17\n    result = (num / denom) * (3 + 23/32)\n    \n    return result\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for b in range(1, 10):\n        for one in range(10):\n            total_pencils = int(f\"{b}{one}\")\n            if total_pencils % 44 == 0:\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n                \nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n    \n    # Adding the information about the total amount collected could lead to a solution, \n    # but since it's not provided, the problem is under-specified.\n    # We can solve for Reema in terms of Romily's collection.\n    \n    solutions = solve(equation, reema)\n    \n    return solutions[reema]\n\n# Since we cannot determine the exact amount collected by Reema without additional information, \n# we denote Reema's collection in terms of Romily's collection.\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ben, allison, eunice = symbols('ben allison eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (ben, allison, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n\n    # function to find the smallest number by which 28 must be multiplied to form a perfect square\n    def smallest_multiplier(n):\n        factors = {}  # Dictionary to store prime factors and their powers\n\n        # Find prime factors and their powers\n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                n //= i\n                if i in factors:\n                    factors[i] += 1\n                else:\n                    factors[i] = 1\n            i += 1\n        if n > 1:\n            factors[n] = 1\n        \n        # Calculate the product of factors raised to half the odd power\n        multiplier = 1\n        for factor, power in factors.items():\n            if power % 2 != 0:\n                multiplier *= factor\n        \n        return multiplier\n\n    # Find the smallest number that 28 must be multiplied by to get a perfect square\n    ans = smallest_multiplier(28)\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    # Include posts at both ends of the field\n    num_posts = field_length//post_interval + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Tom's lap time (in minutes)\n    tom_time = 24\n    # William's lap time (in minutes)\n    william_time = 8\n\n    # Least Common Multiple (LCM) of 24 and 8 gives the time at which they meet\n    def lcm(x, y):\n        if x > y:\n            greater = x\n        else:\n            greater = y\n        while True:\n            if greater % x == 0 and greater % y == 0:\n                lcm = greater\n                break\n            greater += 1\n        return lcm\n\n    ans = lcm(tom_time, william_time)\n    return ans\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):        # a must be from 1 to 9 as it's the first digit of a two-digit number\n        for b in range(10):       # b must be from 0 to 9\n            if 8 * (10 * a + b) == 3 * (10 * b + a):  # Checking the given condition after decoding place values\n                return 10 * a + b  # Return the number ab as per place value\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return 612 // 34 * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positives = [10, 20, 30, 50, 60, 70]\n    negatives = [6, 16, 26, 46, 56, 66]\n    ans = sum(positives) - sum(negatives)\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Benson finished lunch at 2:50 pm\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # He spent 20 minutes eating\n    lunch_duration = timedelta(minutes=20)\n\n    # He watched TV for 20 minutes before lunch\n    tv_duration = timedelta(minutes=20)\n\n    # He played for 10 minutes after reaching home\n    play_duration = timedelta(minutes=10)\n\n    # Calculate the time he started lunch\n    lunch_start_time = lunch_end_time - lunch_duration\n\n    # Calculate the time he started watching TV\n    tv_start_time = lunch_start_time - tv_duration\n\n    # Calculate the time he reached home\n    home_arrival_time = tv_start_time - play_duration\n\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Consider A and B as a single entity as they have to be next to each other.\n    num_entities = 5  # A&B, C, D, E, F\n    arrangements_entities = factorial(num_entities)\n    \n    # A and B can switch places within their entity.\n    switch_ab = factorial(2)\n    \n    # Total number of ways\n    total_ways = arrangements_entities * switch_ab\n    \n    return total_ways\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    \n    for year in range(years):\n        initial_rabbits = 5 * (initial_rabbits) / 2  # 5 times birth rate and half die\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y = 6 * x\n    return y\n\nx = symbols('x')\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):\n        if (number % 4 == 3) and (number % 5 == 3):\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    # Let j be the weight of Jessie\n    # According to the problem, Buzz is 3 times as heavy as Jessie and also 450g heavier.\n    # This means 3j = j + 450\n    # Solving for j we get j = 450 / 2\n\n    jessie_weight = 450 / 2\n    buzz_weight = 3 * jessie_weight  # Buzz is three times as heavy as Jessie\n\n    return buzz_weight\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of steps of the escalator as \"x\".\n    # Let \"y\" be the speed of the escalator steps per second.\n    x, y = symbols('x y')\n\n    # When Peter walks at 1 step per second:\n    equation1 = Eq(x, 10 * (1 + y))\n\n    # When Peter walks at 2 steps per second:\n    equation2 = Eq(x, 16 * (2 + y))\n\n    # Now we solve the system of equations to find the number of steps \"x\".\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the number of steps from the solutions.\n    return solutions[x]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, (3 / 5) * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_class_size = total_sweets // min_sweets_per_student\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Given 246 * 135 = 33210\n    # Need to find 248 * 135\n    # Notice that 248 = 246 + 2\n    # Therefore, 248 * 135 = (246 * 135) + (2 * 135)\n    given_product = 33210\n    increment = 2 * 135\n    \n    ans = given_product + increment\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_values = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    difference = 30     # James is 30 cm shorter than Mark\n    mark_height = james_height + difference  # Calculate Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    jon, miguel = symbols('jon miguel')\n    eq1 = Eq(jon, miguel + 0.3 * miguel)\n    eq2 = Eq(jon + miguel, 46)\n\n    sol = solve((eq1, eq2), (jon, miguel))\n    \n    return sol[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Since it has to be even and less than the tens digit, it can only be 2 or 4\n        for tens in range(hundreds + 1, 10, 2):  # It has to be even and greater than the hundreds digit\n            ones = 2 * hundreds  # Ones digit is twice the hundreds digit\n            if ones > 9 or tens % 2 != 0:  # Ensure ones is a valid digit and tens is even\n                continue \n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:  # Check divisibility by 2 and 9\n                return number\n                \nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # sally and Ken had some chocolates in the ratio of 5:7\n    equation1 = Eq(sally/ken, 5/7)\n\n    # Ken gave 24 chocolates to Sally\n    sally += 24\n    ken -= 24\n\n    # In the end, Sally had twice as many chocolates as Ken\n    equation2 = Eq(sally, 2*ken)\n\n    # Solve the system of equations\n    result = solve((equation1, equation2), (sally, ken))\n\n    return result[ken]\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, notebook = symbols('pencil notebook')\n    \n    equation1 = Eq(5*pencil + 6*notebook, 17)\n    equation2 = Eq(8*pencil + 6*notebook, 20)\n    \n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    return solutions[pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    first_segment_rate = 5\n    second_segment_rate = 8\n    third_segment_rate = 15\n\n    # Calculate hours in first paid segment (up to 50 hours)\n    first_segment_hours = min((bill - 0) // first_segment_rate, 10) \n\n    # Reduce the bill by the payment of the first segment\n    bill -= first_segment_hours * first_segment_rate\n\n    # Calculate hours in second paid segment (from 50 to 60)\n    second_segment_hours = min((bill - 0) // second_segment_rate, 10)\n\n    # Reduce the bill by the payment of the second segment\n    bill -= second_segment_hours * second_segment_rate\n\n    # Calculate hours in third segment (after 60 hours)\n    if bill > 0:\n        third_segment_hours = bill // third_segment_rate\n    else:\n        third_segment_hours = 0\n    \n    # Sum up all hours including free hours and paid hours\n    total_hours = free_hours + first_segment_hours + second_segment_hours + third_segment_hours\n\n    return total_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n    \n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_square = 4\n    sides_triangle = 3\n    \n    ans = (sides_square * 2) - sides_triangle\n    return ans\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percent = 12\n    new_pay = original_pay + (original_pay * increase_percent / 100)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    # Initialize the total digits and current count of pages\n    total_digits = 1014\n    digits_per_length = 9\n    page_count = 0\n    i = 1  # Digits per page number\n\n    # Calculate the number of pages for 1-digit, 2-digit, 3-digit page numbers and so on\n    while total_digits > i * digits_per_length:\n        total_digits -= i * digits_per_length\n        page_count += digits_per_length\n        i += 1\n        digits_per_length *= 10\n\n    # Calculate the remaining pages using the remaining digits\n    page_count += total_digits // i\n\n    return page_count\n\n# Calculate the final answer\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    diff = joanna_total - amy_total\n\n    return diff\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    equation = Eq((57 + magic_number), 4 * (9 + magic_number))\n    \n    sol = solve(equation, magic_number)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_males = 7\n    total_females = 6\n    total_students = total_males + total_females\n    \n    # Ways to choose 1 teacher from 2, and 4 students in any combination from 13 (if there's no restriction on gender)\n    all_combinations = comb(total_teachers, 1) * comb(total_students, 4)\n    \n    # Ways to choose 1 teacher from 2, and 4 male students (no female student in the committee)\n    all_male_combinations = comb(total_teachers, 1) * comb(total_males, 4)\n    \n    # Subtracting the all male combinations from all possible combinations to ensure at least one female\n    return all_combinations - all_male_combinations\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - (6 * i - 4) for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n\n    # Calculate common difference using the formula:\n    # term_n = term_1 + (n - 1) * d\n    # where term_n is the nth term, term_1 is the first term, and d is the common difference\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n\n    # Calculate the 12th number using the formula for an arithmetic sequence:\n    # term_n = term_1 + (n - 1) * d\n    twelfth_number = tenth_number + (12 - 10) * common_difference\n\n    return twelfth_number\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of all variables in it.\n    degree_of_x = 3  # Since we have x^3\n    # Degree of monomial is given as 5.\n\n    # Let's denote the degree of y as 'deg_y', which would be 2n since y has an exponent of 2n.\n    # We know the following relation holds for the degree of the monomial: degree_of_x + deg_y = degree_of_monomial\n    # That is: 3 + 2n = 5\n\n    # Solving for n:\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    total_cups = 45\n\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n\n    return total_milk + total_tea\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    score = 17\n    total_marks = 20\n    percentage = (score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the cost of one book in pounds.\n    b = symbols('b')\n\n    # Creating equation based on the given information.\n    sarah_total = 8 * b + 3 * 0.40\n    rebecca_total = 3 * b + 8 * 0.40\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n\n    # Solving for the cost of one book.\n    book_cost = solve(equation, b)\n\n    return book_cost[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of gummy bears bought by each girl\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Define equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)  # Angela buys two more gummy bears than Bernice\n    equation2 = Eq(bernice, candice + 8) # Bernice buys eight more gummy bears than Candice\n    # Together they spend £3.42, which is 342 pence. Each gummy bear costs 6 pence\n    equation3 = Eq(angela * 6 + bernice * 6 + candice * 6, 342)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    median_value = 20\n    # Since there are 10 numbers, the median is the average of the 5th and 6th terms\n    n_plus_7 = median_value - 0.5  # 5th term\n    n_plus_8 = median_value + 0.5  # 6th term\n    \n    # Now, solve for n\n    n = n_plus_7 - 7\n    \n    # Calculate the mean\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean_value = sum(numbers) / len(numbers)\n    \n    return mean_value\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # let x be the weight of the lightest apple\n    # let z be the weight of the heaviest apple\n    # let y be the weight of the remaining apple\n    \n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams.\n    # Equation for this condition: (x + y) / 2 = 70 => x + y = 140\n    \n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams.\n    # Equation for this condition: (y + z) / 2 = 105 => y + z = 210\n    \n    # Total weight of the three apples: x + y + z\n    # Subtract the two equations: (y + z) - (x + y) = 210 - 140 => z - x = 70\n\n    # Weight difference between the heaviest and lightest apple\n    weight_difference = 70\n\n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    for i in range(1, 59):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n    num_containers = total_volume / per_container_volume\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    # Total handshakes for n members is n*(n-1)/2\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Handshakes that didn't happen is for the 4 members who didn't shake 3 hands each\n    missed_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n    actual_handshakes = total_handshakes - missed_handshakes\n\n    return actual_handshakes\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # This is a classic case of solving an alphametic puzzle where the letters form numbers in a vertical operation.\n    # We'll use the itertools.permutations to find the possible combinations of numbers and check the correct one.\n    from itertools import permutations\n\n    # All possible digits for each letter\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm[:5], 0, perm[5], perm[6]\n        \n        # Construct the numbers SEND, MORE, and MONEY from the permutation\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        \n        # Check if it makes a valid equation: SEND + MORE = MONEY\n        if send + more == money:\n            # Make sure S and M are not zero\n            if s != 0 and m != 0:\n                return send\n\n    return None\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for digit in range(1, 10):\n        if int(str(digit) + '0') - digit == 27:\n            return digit\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    a = 2  # First term\n    d = 4  # Common difference\n    n = 11  # The 11th student\n\n    # Formula for the nth term of an arithmetic sequence: a_n = a + (n - 1) * d\n    ans = a + (n - 1) * d\n\n    return ans\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob is always the 3rd in line regardless of the direction,\n    # the array must be a 3x3 square so that Bob is at the center.\n    # In a 3x3 square, there are 9 positions in total.\n    \n    # Total number of animals including Bob\n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # One cent coins in stack 1, two cent coins in stack 2, and five cent coins in stack 3\n    x, y, z = symbols('x y z')  # x, y, z are the number of coins in each stack respectively\n\n    # Height of stacks ratio relationship\n    equation1 = Eq(6*x, 5*y)  # stack of 6 one-cent coins same as 5 two-cent coins\n    equation2 = Eq(4*x, 3*z)  # stack of 4 one-cent coins same as 3 five-cent coins\n\n    # Total number of coins used\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculating the total value of the coins\n    value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n\n    return value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of gaps between plum trees is one less than the number of trees\n    plum_tree_gaps = 41 - 1\n    # Total distance spanned by the plum trees\n    plum_tree_distance = plum_tree_gaps * 4\n    # Number of pine tree intervals that fit in this distance\n    pine_tree_intervals = plum_tree_distance // 5\n    # Number of pine trees is one more than the number of intervals\n    pine_trees = pine_tree_intervals + 1\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * (100 // 11 + 1)\n    largest_multiple = 11 * (300 // 11)\n\n    ans = smallest_multiple + largest_multiple\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 12 * 4000\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')  # A for container A's initial value, B for container B\n    \n    # A had 350mL more water than B initially\n    equation1 = Eq(A, B + 350)\n    # After spilling 500mL, B had twice as much water as A\n    equation2 = Eq(B, 2 * (A - 500))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and blue_pens.is_integer() and red_pens.is_integer() and green_pens % 5 == 0:\n            max_red_pens = max(max_red_pens, red_pens)\n\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    spent_on_books = 0.25 * initial_amount\n    remaining_after_books = initial_amount - spent_on_books\n    spent_on_dvd = 0.20 * remaining_after_books\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Start from the largest 6-digit number and go down to the first 6-digit number\n    for num in range(999999, 100000 - 1, -1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Check if the number is divisible by 6\n            if num % 6 == 0:\n                return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_eat = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_to_eat\n    \n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83\n    shortage_cm = 10\n    shortage_m = shortage_cm / 100  # Convert centimeters to meters\n    garage_piece_m = desired_length_m - shortage_m\n    return garage_piece_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We set x to represent the initial number of marbles Wei Yan had.\n    x = symbols('x')\n\n    # After giving away 3/8 of his marbles, he has 5/8 of his marbles left.\n    remaining_after_friends = 5/8 * x\n    \n    # Then, he gave away 5/7 of the remaining marbles to his brother.\n    remaining_after_brother = 2/7 * remaining_after_friends\n    \n    # His cousin gave him 408 marbles.\n    final_count = remaining_after_brother + 408\n    \n    # In the end, he had twice as many marbles as he had at first.\n    equation = Eq(final_count, 2 * x)\n    \n    # Solve for x.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    # Pattern observed: 8, 8, 3, 3, 2, 5 repeats every 6 numbers\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n\n    # Total full patterns within 41 numbers\n    full_patterns = 41 // pattern_length\n\n    # Numbers left after full patterns\n    remaining_numbers = 41 % pattern_length\n\n    # Sum of full patterns\n    sum_full_patterns = sum(pattern) * full_patterns\n\n    # Sum of remaining numbers\n    sum_remaining = sum(pattern[:remaining_numbers])\n\n    # Total sum\n    total_sum = sum_full_patterns + sum_remaining\n\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    fraction = 2 / 7\n    total = 315\n    ans = fraction * total\n    return ans\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_pence in range(0, 47, 2):\n        for five_pence in range(0, 47, 5):\n            if two_pence + five_pence == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    fraction_needles = 4 / 5\n    \n    # Pins left after selling\n    pins_left = total_pins_needles - sold_pins\n    \n    # Needles left after selling 4/5 of them\n    needles_before = total_pins_needles - sold_pins\n    needles_left = needles_before * (1 - fraction_needles)\n    \n    # Assume Paul's calculation is correct and verify\n    pauls_needles_left = 455\n    if needles_left == pauls_needles_left:\n        is_paul_correct = True\n    else:\n        is_paul_correct = False\n        \n        # Find the correct number of needles left\n        total_needles = needles_before + pauls_needles_left * fraction_needles\n        correct_needles_left = total_needles * (1 - fraction_needles)\n    \n    return correct_needles_left if not is_paul_correct else pauls_needles_left, is_paul_correct\n\nans, is_paul_correct = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's age at his 14th birthday\n    brian_age = 14\n    # Father's age at Brian's 14th birthday\n    father_age = 41\n    \n    # The time when their ages are reverse of each other again\n    next_time = 0\n\n    # Keep checking for the next reverse age until they are found\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age)[::-1].zfill(2):\n            next_time = brian_age\n            break\n\n    return next_time\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # Divide by 6 to account for permutations of piles\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = round(654876, -2)\n    num2 = round(279745, -2)\n    est_diff = num1 - num2\n    return est_diff\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    ways = 0\n    for i in range(1, 8):  # iterate from 1 to 7\n        for j in range(i, 8):  # iterate from i to 7 (avoid duplicate pairs) \n            if i + j == 8:  # find a valid pair that sums up to 8\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    train_length = 480  # meters\n\n    # Speed = Distance / Time\n    speed_m_per_s = train_length / time_seconds\n    # Convert meters per second to kilometers per hour (1 m/s = 3.6 km/h)\n    speed_km_per_h = speed_m_per_s * 3.6\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2/5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between = 8\n    # Subtract one from the number of lampposts to find the number of intervals\n    num_intervals = num_lampposts - 1\n    # Multiply the number of intervals by the distance between each lamppost\n    road_length = num_intervals * distance_between\n    \n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) // (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_students = 40\n    students_failed = 14\n\n    percentage_failed = (students_failed / total_students) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            erased_sum += num\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n\n    total_combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return total_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # For the first classroom, the warden could get the correct key in one of 10 tries.\n    first_classroom = 10\n    # For the second classroom, there are 9 keys left, so one of 9 tries.\n    second_classroom = 9\n    # Follow this pattern until the last classroom, where there will be only one key left.\n    last_classroom = 1\n\n    # The maximum number of tries is the sum of the series 10 + 9 + 8 + ... + 1\n    ans = sum(range(first_classroom, last_classroom-1, -1))\n\n    return ans\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_poppers = (153 // 12) * 12\n    poppers_left = 153 - total_poppers\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The pattern of ones digit of powers of 7 repeats every 4 steps: 7, 9, 3, 1\n    # To find the ones digit of the 2023th power of 7, we find the remainder\n    # when 2023 is divided by 4 (because the pattern repeats every 4 numbers)\n    pattern_index = 2023 % 4\n    \n    # Now match the pattern_index to the ones digit of 7's power\n    if pattern_index == 1:\n        ones_digit = 7\n    elif pattern_index == 2:\n        ones_digit = 9\n    elif pattern_index == 3:\n        ones_digit = 3\n    else:  # if pattern_index == 0\n        ones_digit = 1\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create the initial long number as a string of concatenated numbers\n    long_number = ''.join(str(i) for i in range(1, 31))\n\n    # Since we want the smallest number after removing 46 digits,\n    # we should start removing from the left, prioritizing the removal of higher digits\n    # 46 digits removed means we keep only len(long_number) - 46 digits\n    num_to_keep = len(long_number) - 46\n\n    # Keep the first num_to_keep digits to form the smallest number\n    smallest_number = long_number[:num_to_keep]\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number % 5 == 3) and (number % 6 == 2) and (number % 7 == 1):\n            return number\n            \nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number\n    least_5_digit_palindrome = int(\"10001\")\n\n    # The greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # The difference between the two\n    diff = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return diff\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    # Let's denote the fraction of girls as g\n    # Since three quarters of the club are girls, and the remaining quarter are boys:\n    # 3g = boys => g = boys / 3\n\n    girls_fraction = 1 / 3\n    # Now we can find the total number of girls, which is girls_fraction multiplied by the number of boys\n    girls = boys / girls_fraction\n\n    return int(girls)\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1 / 8 - 1 / 9 + 1 / 10 - 1 / 11\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 10  # Set precision high enough for intermediate calculations\n\n    # Convert repeating decimals to Decimal\n    neg_133_repeating = Decimal(-13).quantize(Decimal('1.000')) - Decimal(1) / Decimal(3)\n    pos_409_repeating = Decimal(4).quantize(Decimal('1.000')) + Decimal(9) / Decimal(99)\n    pos_111_repeating = Decimal(11).quantize(Decimal('1.000')) + Decimal(1) / Decimal(9)\n\n    # Calculate the expression\n    numerator = (neg_133_repeating ** (Decimal(1) / Decimal(3))) * (pos_409_repeating ** 2)\n    denominator = Decimal('59.24') - pos_111_repeating.sqrt()\n    result = numerator / denominator\n\n    # Round to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    target_sum = 60\n    years_later = (target_sum - (sara_age + lucy_age)) // 2\n\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    return (6 * 2) + (9 * 3)\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_price = 15.49\n    paid_amount = 16  # paying with a single £1 coin gives no change, so we start at 16\n    while (paid_amount - book_price) % 1 != 0:  # Looking for whole number change\n        paid_amount += 1\n    change = paid_amount - book_price\n    return change\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    ans = sum(99 + i * 2 - (100 + i * 2) for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    mixed_number = 201 + 1/7\n    result = mixed_number / 8\n    A = result - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of footballs and basketballs\n    F, B = symbols('F B')\n    \n    # Equation representing the initial ratio of footballs to basketballs\n    equation1 = Eq(F, 2/5 * B)\n    \n    # Equation after selling 16 basketballs where the ratio of footballs to basketballs is 2/3\n    equation2 = Eq(F, 2/3 * (B - 16))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (F, B))\n    \n    # Calculate the total number of footballs and basketballs at first\n    total = solutions[F] + solutions[B]\n\n    return total\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's equation: 1.50 = 2*banana + 3*apple\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n\n    # Beth's equation: 1.45 = 3*banana + 2*apple\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # The cost for 1 banana and 1 apple\n    cost = solutions[banana] + solutions[apple]\n    \n    return cost\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n    \n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    equation2 = Eq(older_current + (younger_current - older_current), 27)\n    \n    solutions = solve((equation1, equation2), (older_current, younger_current))\n    \n    return solutions[older_current]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take out at least one glove of each color to try and get a single pair.\n    # Since there are 5 colors, she will take out 5 gloves (one of each color).\n    \n    # After she has one glove of each color, she must take out one more glove to ensure\n    # that she has at least a pair of one color (pigeonhole principle).\n    # So she needs to take out 5 (one of each color) + 1 (to guarantee a pair).\n    return 5 + 1\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -(-30 // 8) * 8  # Ceiling division to find the first multiple of 8\n    last_multiple = 82 // 8 * 8       # Floor division to find the last multiple of 8\n    \n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    sam, peter = symbols('sam peter')\n\n    # Original count: Sam has 40 more stickers than Peter\n    original_sam = peter + 40\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = original_sam * 0.20\n    sam_after_giving = original_sam - sam_gives\n    peter_after_receiving = peter + sam_gives\n\n    # Peter gives 25% of his stickers to Sam\n    peter_gives = peter_after_receiving * 0.25\n    peter_final = peter_after_receiving - peter_gives\n    sam_final = sam_after_giving + peter_gives\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final, peter_final + 96)\n\n    # Solve the system of equations\n    ans = solve((equation, Eq(original_sam, sam)), (sam, peter))\n\n    return ans[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    new_price_after_increase = original_price * (1 + increase_rate)\n    final_price_after_decrease = new_price_after_increase * (1 - decrease_rate)\n\n    return final_price_after_decrease\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    total_time_in_hours = 7.2 / 60  # convert minutes to hours\n\n    # Relative speed when teacher running towards the head of the team\n    speed_towards = 12 + 8  # km/h\n    # Relative speed when teacher returning to the end\n    speed_return = 12 - 8  # km/h\n\n    # Let the distance from the end to the head of the team be x km\n    # Time = distance/speed\n    # Total time is the time towards plus the time return\n    # total_time_in_hours = (x/speed_towards) + (x/speed_return)\n    # Solve for x\n    x = (total_time_in_hours * speed_return * speed_towards) / (speed_towards + speed_return)\n\n    return x\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_2_years_ago = flora_age_now - 2\n    father_age_2_years_ago = 9 * flora_age_2_years_ago\n    father_age_now = father_age_2_years_ago + 2\n    \n    return father_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 people and in a round-robin tournament, each player plays every other player once\n    games_per_group = (4 * (4 - 1)) // 2\n    total_group_games = games_per_group * 4  # Since there are 4 groups\n\n    # Calculate the number of games in the knockout stage\n    # There are 8 contestants, and each round halves the number of contestants remaining\n    # 8 -> 4 (Quarterfinals), 4 -> 2 (Semifinals), 2 -> 1 (Final), and a third-place playoff\n    knockout_games = 8 - 1 + 1  # The +1 accounts for the third-place playoff\n\n    # Total games is the sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for number in range(8, 86):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remains = 3\n    # Ken took 1 less than half of the remaining pieces, so reverse the operation\n    before_ken = remains * 2 + 1\n\n    # Nini took 3 more than half of the remaining pieces, so reverse it\n    before_nini = (before_ken + 3) * 2\n\n    # Ivy took 2 less than half of the pieces left, so reverse it\n    before_ivy = (before_nini + 2) * 2\n\n    # Eddie took 1 more than half of the pieces, so reverse it\n    initial_candy = (before_ivy + 1) * 2\n\n    return initial_candy\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # 5 days of climbing 7 meters plus 3 meters on the 6th day\n    total_days = 6  # 6 days in total including the 6th day\n    remaining = 18 - total_climbed  # remaining distance after 6 days\n    slide_down = 7 - (remaining / (total_days - 1))  # slide down distance\n    \n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    unique_permutations = set(permutations('CYZZ'))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be x\n    # Then the number of girls is 3x\n\n    # Each girl took 2 paintbrushes\n    # Each boy took 3 paintbrushes\n\n    # Total paintbrushes taken by girls = 2 * (3x) = 6x\n    # Total paintbrushes taken by boys = 3 * x = 3x\n\n    # Total paintbrushes = 99\n    # So, 6x + 3x = 99\n    # 9x = 99\n\n    # Divide both sides by 9\n    x = 99 // 9\n\n    # The number of girls is 3 times the number of boys, therefore:\n    girls = 3 * x\n\n    return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 16\n    C_students = 20\n\n    # Find the greatest common divisor (GCD) for the three numbers\n    gcd_ab = gcd(A_students, B_students)\n    gcd_abc = gcd(gcd_ab, C_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all measurements to centimeters for comparison\n    height_m = 5 * 100                  # 5 meters to cm\n    height_cm = 120                     # already in cm\n    height_mm = 50 / 10                 # 50 mm to cm\n    height_feet = 8 * 30.48             # 8 feet to cm (approximate conversion)\n    \n    # Average height for a school-aged child could be around 120cm to 160cm\n    # Let's use this range to determine which might be a correct estimation\n    min_height_cm = 120\n    max_height_cm = 160\n    \n    if min_height_cm <= height_m <= max_height_cm:\n        correct_height = '5m'\n    elif min_height_cm <= height_cm <= max_height_cm:\n        correct_height = '120cm'\n    elif min_height_cm <= height_mm <= max_height_cm:\n        correct_height = '50mm'\n    elif min_height_cm <= height_feet <= max_height_cm:\n        correct_height = '8 feet'\n    else:\n        correct_height = None\n    \n    return correct_height\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count_3 = 0\n    for num in range(2, 51, 2):  # even numbers from 2 to 50\n        count_3 += str(num).count('3')\n    return count_3\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100\n    return value_in_pence\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance from home to office be d km.\n    # Let the correct time to reach the office be t hours.\n    \n    # Speed = Distance / Time\n    # Time = Distance / Speed\n    \n    # When Mike is 20 minutes late, time taken is t + 1/3 hour (20 minutes = 1/3 hour)\n    # t + 1/3 = d / 4 (since the speed is 4 km/h)\n    \n    # When Mike is 10 minutes early, time taken is t - 1/6 hour (10 minutes = 1/6 hour)\n    # t - 1/6 = d / 6 (since the speed is 6 km/h)\n    \n    # Now, we have two equations:\n    # d = 4 * (t + 1/3)\n    # d = 6 * (t - 1/6)\n    \n    # Equating the expressions for d:\n    # 4 * (t + 1/3) = 6 * (t - 1/6)\n    # Dividing the whole equation by 2 to simplify\n    # 2 * (t + 1/3) = 3 * (t - 1/6)\n    # 2t + 2/3 = 3t - 1/2\n    # t = 7/6 (Solving the equation for t)\n    \n    # Substitute the value of t in one of the equations:\n    # d = 4 * (7/6 + 1/3)\n    # d = 4 * (7/6 + 2/6)\n    # d = 4 * (9/6)\n    # d = 4 * 1.5\n    d = 4 * 1.5\n\n    return d\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_all = 82\n\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    # Find the least common multiple (LCM) of 2, 3, and 5\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = 121 - 124\n    nth_term = first_term + (15 - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fish in the pond.\n    x = symbols('x')\n\n    # The proportion of marked fish in the second catch should be the same as the proportion of total fish.\n    equation = Eq(25 / 200, 100 / x)\n\n    # Solving for x gives us the estimated number of fish in the pond.\n    estimated_fish = solve(equation, x)\n\n    return estimated_fish[0]\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15  # total rabbit-days the pile of food can last\n    days_for_20_rabbits = total_food / 20\n    \n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n    \n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n    \n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wakeup_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = wakeup_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78 // 2 + 1):\n        remaining_weight = 77 - 2 * two_gram_weights\n        if remaining_weight % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    sum_to_n = lambda n: (n * (n + 1) // 2) ** 2\n    sum_to_20 = sum_to_n(20)\n    sum_to_9 = sum_to_n(9)\n    \n    ans = sum_to_20 - sum_to_9\n    \n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2\n    fraction = 1 / 2\n    quarters_in_one = 4\n    quarters = (whole_number + fraction) * quarters_in_one\n    return int(quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    num_assignments = 5\n    average_score = 90\n    known_scores = [96, 85, 89, 92]\n    total_known_scores = sum(known_scores)\n    \n    total_for_all_assignments = average_score * num_assignments\n    score_on_fifth_assignment = total_for_all_assignments - total_known_scores\n    \n    return score_on_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 5 == 4 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure 5 different colors with at least 10 pencils of each,\n    # we can draw the maximum number of pencils from 4 colors without reaching 10 for each.\n    # This would be 9 pencils from each of the 4 colors.\n    max_pencils_without_5_colors = 4 * 9\n\n    # After this, drawing one more pencil would ensure at least 10 pencils of the 5th color.\n    min_pencils_for_5_colors = 10\n\n    # So the minimum number of pencils to draw is:\n    minimum_pencils_drawn = max_pencils_without_5_colors + min_pencils_for_5_colors\n    return minimum_pencils_drawn\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    per_coach = 34\n\n    # Determine the number of full coaches required\n    full_coaches = pupils // per_coach\n\n    # Check if there is a need for an additional coach for the remaining pupils\n    if pupils % per_coach > 0:\n        full_coaches += 1\n\n    return full_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Original ratio: Pip : Bud = 4 : 7\n    equation1 = Eq(pip/bud, 4/7)\n\n    # After giving Bud 5 sweets: Pip : Bud + 5 = 8 : 15\n    equation2 = Eq(pip/(bud + 5), 8/15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field\n    # Since there is a wheat at every corner, we have to subtract the 4 corner wheats\n    # from the total wheats when calculating the distances between the wheats.\n    number_of_intervals = 116 - 4\n    # The distance between the wheats is the perimeter divided by the number of intervals\n    distance_between_wheat = perimeter / number_of_intervals\n    return distance_between_wheat\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5_power_20 = (5 ** 20) % 10\n    last_digit_7_power_30 = (7 ** 30) % 10\n    ans = (last_digit_5_power_20 * last_digit_7_power_30) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    length1 = 39\n    length2 = 52\n\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    total_pupils = 1690\n    boys_more_than_girls = 90\n\n    # Let the number of girls be g, the number of boys will then be g + 90\n    # g + (g + 90) = 1690\n    g = (total_pupils - boys_more_than_girls) // 2\n    b = g + boys_more_than_girls\n\n    # The ratio of girls who can swim to those who can't is 31:49, let's consider the total parts for girls be 80\n    # 31 + 49 = 80 parts\n    girls_swim = (g * 31) // 80\n    girls_cannot_swim = g - girls_swim\n\n    # Boys who can swim are 120 less than boys who cannot. Let x be the number of boys who can't swim\n    # x - 120 = boys who can swim\n    # (x - 120) + x = b\n    boys_cannot_swim = (b + 120) // 2\n\n    # Total pupils who cannot swim\n    cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return cannot_swim\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote A as the score for an A grade and B as the score for a B grade.\n    A, B = symbols('A B')\n\n    # We are given two equations:\n    # Simon's score: 4A + 4B = 36\n    # Peter's score: 2A + 3B = 22\n    equation1 = Eq(4 * A + 4 * B, 36)\n    equation2 = Eq(2 * A + 3 * B, 22)\n\n    # Solve the equations to find the values for A and B.\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Extract the score values for A and B grades.\n    A_score = solutions[A]\n    B_score = solutions[B]\n\n    # Calculate the score for someone with three A grades and five B grades using the found score values for A and B.\n    score = 3 * A_score + 5 * B_score\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    num_people = 2  # Joe and his friend\n    squares_per_person = total_squares / num_people\n    return squares_per_person\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    result = 999 / 2\n    return result\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # Smallest prime number\n    B = 4  # Smallest composite number\n    C = 1  # Neither prime number nor composite number or zero\n    D = A - 2  # 2 less than the smallest prime number (will be 0, given that 2 is the smallest prime)\n    E = 9  # Largest composite number up to 10\n    F = 5  # Only has factors 1 and 5\n    G = 8  # Greatest factor of 8 itself\n    H = 6  # Lowest multiple of 6\n\n    phone_number = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n    return int(phone_number)\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n\n    # Try all possible combinations of 3 prime numbers\n    for a in prime_numbers:\n        for b in prime_numbers:\n            for c in prime_numbers:\n                if a != b and b != c and a != c:  # All numbers different\n                    if not (a + b == c or a + c == b or b + c == a):  # A's statement\n                        if a > 1 and b - 1 > 1 and a != b - 1 and abs(b - 1 - a) == 7:  # B's statement\n                            if 2 * c + a == b or 2 * c + b == a or a + b == 2 * c:  # C's and Teacher's statements\n                                return a + b + c  # Sum of the three numbers\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    equation1 = Eq(marry, alexis * (7/5))\n    equation2 = Eq(charlotte * 0.8, marry * 0.2 + alexis * 0.2)\n    equation3 = Eq(marry - 20, charlotte + marry * 0.2)\n\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n    return solutions[alexis]\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    ans = seconds_in_a_day * (1 / 4) * (1 / 6) * (1 / 8)\n    return int(ans)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    # Create a list of the given digits\n    digits = ['2', '2', '2', '3', '3']\n    \n    # Find all permutations of the four digit numbers\n    all_permutations = set(permutations(digits, 4))\n    \n    # Calculate the number of unique permutations\n    count = len(all_permutations)\n    \n    return count\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Loop over possible four-digit numbers where the\n    # thousands digit is the same as the units digit\n    for i in range(1, 10):  # Thousands and Units digit\n        for j in range(0, 10):  # Tens digit\n            for k in range(0, 10):  # Hundreds digit\n                # Construct the number described by Pip\n                pip_number = int(f\"{i}{k}{j}{i}\")\n                # Construct Bud's number\n                bud_number = int(f\"{i}{j}{k}{i}\")\n                # Check if the sum of both numbers is 5510\n                if pip_number + bud_number == 5510:\n                    return pip_number  # Return the result if the condition is fulfilled\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Total amount of grass production is the same in both scenarios.\n    # Let's define the total amount of grass as 'grass'.\n    # 'grass' can feed 25 cows for 10 days so grass = 25 * 10\n    # Similarly, 'grass' can feed 15 cows for 20 days so grass = 15 * 20\n    # Therefore, 25 cows * 10 days = 15 cows * 20 days\n    # From this, we can find out how many cows can be fed for 50 days.\n    \n    cows_for_25_days = 25 * 10\n    grass = cows_for_25_days  # This is the total amount of grass available\n    cows_for_50_days = grass / 50  # We want to know how many cows can be fed for 50 days\n    \n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    days = 1\n    \n    while total_pages > days * (days + 1) / 2:\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio equation\n    original_ratio_eq = Eq(3 * lemons, 5 * oranges)\n\n    # New ratio equation after selling 48 oranges\n    new_ratio_eq = Eq(oranges - 48, 2 * lemons)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio_eq, new_ratio_eq), (oranges, lemons))\n\n    # Return the number of lemons in the basket at first\n    return solutions[lemons]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # Eddie and his parents can be considered as a single entity when they stand together.\n    # So, we have to arrange that single entity and the remaining family members.\n    \n    # Assuming Eddie's family consists of 'n' members including him and his parents.\n    # n - 3 represents the other family members excluding Eddie and his parents.\n    \n    # First calculate the number of ways to arrange the single entity of Eddie and his parents\n    # in the line of 'n-3' other family members. They can stand in any of the 'n-2' positions (between members or at the ends).\n    \n    # In each of these 'n-2' positions, Eddie and his parents can be arranged among themselves in 3! ways.\n    \n    n = 5  # Total family members including Eddie and his parents\n    num_ways_single_entity = n - 2 # One position for Eddie and his parents as a single entity, and n-3 for the rest.\n    num_ways_eddie_and_parents = factorial(3) # Eddie and his parents can arrange among themselves in 3! ways.\n    \n    # Apply the principle of multiplication\n    total_ways = num_ways_single_entity * num_ways_eddie_and_parents\n    \n    return total_ways\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    \n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first day is 1/3 of second day\n    third_day = (5 / 3) * second_day  # Third day is 5/3 of second day\n    total_watermelons = first_day + second_day + third_day\n    return total_watermelons\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the 3 math books as one unit, and the 2 English books as another unit\n    # Then there are total 3(other books) + 1(math books unit) + 1(English books unit) = 5 units to arrange\n    units_arrangement = factorial(5)\n\n    # The math books can be arranged among themselves in 3! ways\n    math_books_arrangement = factorial(3)\n    \n    # The English books can be arranged among themselves in 2! ways\n    english_books_arrangement = factorial(2)\n\n    # Multiply the number of ways to arrange units with internal arrangements of math and English books\n    total_arrangements = units_arrangement * math_books_arrangement * english_books_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_percent = 0.30\n    extra_discount = 100\n    tax_percent = 0.10\n\n    # Calculate the price after the initial discount\n    discounted_price = original_price * (1 - discount_percent)\n\n    # Apply the extra discount for being a store member\n    final_price_before_tax = discounted_price - extra_discount\n\n    # Add the sales tax to the final selling price\n    final_price = final_price_before_tax * (1 + tax_percent)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n    \n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes = 250 / flour_per_cake\n    return int(cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Work rate of Ivy per day\n    rate_ivy = 1 / 24\n    # Work rate of Kevin per day\n    rate_kevin = 1 / 20\n\n    # Total work done by Ivy in 12 days\n    work_done_ivy = rate_ivy * 12\n\n    # Remaining work to be done by Kevin\n    remaining_work = 1 - work_done_ivy\n\n    # Time taken by Kevin to do the remaining work\n    time_taken_kevin = remaining_work / rate_kevin\n\n    # Kevin's actual working days if he had worked every day\n    kevin_work_days = 12 / 2\n\n    # Days Kevin takes off\n    days_off = kevin_work_days - time_taken_kevin\n\n    return days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Ophelia had 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After Penelope bought 21 more diamonds, she had 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition_students = 30\n    art_competition_students = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = (maths_competition_students + art_competition_students) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n\n    return people_on_train_before\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Worst case scenario: Cindy grabs as many different socks before getting a pair\n    # She could grab all 4 red socks or all 4 black socks without getting a pair.\n\n    # To ensure she gets at least one pair, she must grab one more after\n    # grabbing all 4 of one color.\n    \n    # 4 of one color + 1 (to ensure a pair)\n    num_socks_to_ensure_pair = 4 + 1\n\n    return num_socks_to_ensure_pair\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    total_statues = 9\n    arrange_statues = 4\n\n    # The number of ways to arrange k items out of n is given by n! / (n-k)!\n    ans = factorial(total_statues) // factorial(total_statues - arrange_statues)\n\n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    initial_price = 10  # price in pence\n    final_price = 100   # price in pence, £1.00 is equal to 100p\n\n    increase = final_price - initial_price\n    percentage_increase = (increase / initial_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_percent = 8\n    final_cost = bracelet_cost + (bracelet_cost * gst_percent / 100)\n    return final_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bicycles, tricycles = symbols('bicycles tricycles')\n    \n    # Total number of tricycles and bicycles is 300\n    equation1 = Eq(bicycles + tricycles, 300)\n    \n    # Total number of tricycle wheels is 180 more than total number of bicycle wheels\n    # Bicycles have 2 wheels each, tricycles have 3 wheels each\n    equation2 = Eq(3 * tricycles - 2 * bicycles, 180)\n    \n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n    \n    return solutions[bicycles]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return round(initial_deposit, 2)\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Number of grey rabbits in the repeating pattern:\n    grey_per_pattern = 2\n    # Total number of rabbits in the repeating pattern (1 black, 2 white, 2 grey):\n    total_per_pattern = 1 + 2 + 2\n\n    # Given that there are 14 grey rabbits:\n    grey_rabbits = 14\n    # Calculate the number of full patterns (7 patterns, since 14 grey rabbits correspond to 7 full patterns of 2 grey rabbits each):\n    full_patterns = grey_rabbits // grey_per_pattern\n\n    # Calculate the total number of rabbits corresponding to the full patterns:\n    total_rabbits_full_patterns = full_patterns * total_per_pattern\n\n    # Calculate the number of remaining grey rabbits after considering full patterns:\n    remaining_grey = grey_rabbits % grey_per_pattern\n    \n    # If there are any remaining grey rabbits, we need to add an extra pattern to accommodate them:\n    if remaining_grey > 0:\n        total_rabbits_full_patterns += total_per_pattern\n\n    # Return the total number of rabbits:\n    return total_rabbits_full_patterns\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_factor\n\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    divisor = 27 + 1  # Because the quotient is 27, the next possible divisor is 27 + 1.\n    remainder = 9\n    dividend = (divisor * 27) + remainder  # The minimum dividend can be calculated using the formula (divisor * quotient) + remainder.\n\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015**2 - (2016 * 2014)\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped_biscuits = 20\n    chocolate_foil_wrapped = 15\n    neither_choco_nor_foil = 9\n\n    chocolate_biscuits = chocolate_foil_wrapped + neither_choco_nor_foil - (foil_wrapped_biscuits - chocolate_foil_wrapped)\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for original speed and time\n    original_speed, original_time = symbols('original_speed original_time')\n    \n    # If speed increases by 25%, time decreases by 20 minutes\n    equation1 = Eq(original_speed * 1.25, original_speed * original_time / (original_time - 20/60))\n    \n    # If speed decreases by 45 m/min, time increases by 75%\n    equation2 = Eq(original_speed - 45, original_speed * original_time / (original_time * 1.75))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_speed, original_time))\n    \n    # Distance is original_speed * original_time\n    distance = solutions[original_speed] * solutions[original_time]\n    \n    return distance.evalf()\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    # Extract the digits for thousandths, hundredths, tenths, and ones place\n    thousandths = 9\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    # Construct the number with 3 decimal places\n    number = ones + tenths * 0.1 + hundredths * 0.01 + thousandths * 0.001\n\n    # Round off the number to one decimal place \n    rounded_number = round(number, 1)\n\n    # Check if Tongtong's answer is correct\n    is_correct = (rounded_number == 9764.0)\n    correct_answer = rounded_number if not is_correct else \"Tongtong is correct\"\n\n    return correct_answer\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n    sold_to_yvonne = (initial_crystals / 2) + 10\n    mined_in_singapore = 20\n    sold_to_cherlyn = 14\n    final_crystals = 35\n\n    # Set up the equation based on the problem statement:\n    # Jason's initial crystals - sold to Yvonne + mined in Singapore - sold to Cherlyn = final crystals\n    equation = Eq(initial_crystals - sold_to_yvonne + mined_in_singapore - sold_to_cherlyn, final_crystals)\n\n    # Solve for the number of initial crystals Jason had:\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]  # we expect only one solution for this problem\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of factors of 10 in the product\n    # Factors of 10 are created by pairs of 2 and 5\n\n    # Since we have 15 fives and 10 twos, and we need both a two and a five to make a ten,\n    # the maximum number of tens we can create is limited by the lesser of the two, which is 10\n    # Therefore, there will be 10 pairs of 2 and 5, resulting in 10 zeros at the end of the product A\n\n    num_zeros = min(15, 10)  # Since the number of twos is less, it limits the count\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    olaf, anna = symbols('olaf anna')\n\n    # Set up the equations based on the problem\n    # Equation 1: Initially, Olaf has thrice as many carrots as Anna\n    equation1 = Eq(olaf, 3 * anna)\n    # Equation 2: After giving away 335 carrots, Anna has twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    all_permutations = permutations(digits)\n    count = 0\n    \n    for perm in all_permutations:\n        for i in range(1, len(perm)):\n            # Insert the decimal point between two digits\n            with_decimal = perm[:i] + ('.',) + perm[i:]\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    # Bala is directly behind Ali, so we don't count Bala separately\n    total_people = people_in_front_of_Ali + 1 + people_behind_Bala\n    \n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Using the principle of inclusion-exclusion\n    # Total = Black Dodges + Blue Fords - Blue Dodges (since Blue Dodges are counted in both Black Dodges and Blue Cars)\n    # Find Blue Dodges:\n    # Blue Dodges = Blue Cars - Blue Fords\n    # Since Blue Dodges are Dodges and there are Black Dodges, Blue Dodges can also be found by:\n    # Blue Dodges = Total Dodges - Black Dodges\n    # Total Dodges = Total Cars - Fords\n    # Therefore, Blue Dodges = Total Cars - Fords - Black Dodges\n\n    total_dodges = total_cars - fords\n    blue_dodges = total_dodges - black_dodges\n    blue_fords = blue_cars - blue_dodges\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert pounds to pence\n    number_of_plants = budget_pence // plant_cost_pence\n\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if all(num % i == 0 for num in (A, B, C, D) for i in range(2, num)):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13  # Total number of balls of all colors\n    # According to the Pigeonhole Principle, to ensure picking at least one of each color,\n    # the magician must pick all but two of the balls (excluding the maximum two color count).\n    # The magician does not need to pick the 9th red or 14th green ball to ensure he has at least one blue ball.\n\n    min_picks = total_balls - 2  # Picking up all but two of the balls\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 11 * 7):  # Since the least common multiple of 11 and 7 is 77, we can limit our search to that range.\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    # We have 50 apples and 8 children, each gets at least one apple.\n    # To find the least number of apples the kid with the most can get,\n    # first give each child one apple so we've distributed 8 apples.\n    remaining_apples = 50 - 8\n\n    # Now we divide the remaining apples by the number of children,\n    # and add one because we want the minimum number the child with the most can have.\n    least_apples_most_kid = (remaining_apples // 7) + 1\n\n    # We add it back the one apple the child initially got.\n    least_apples_most_kid += 1\n\n    return least_apples_most_kid\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_for_correct = 3\n    penalty_for_wrong = 2\n\n    # Let x be the number of correct answers.\n    # Total questions answered is the sum of correct and incorrect answers.\n    # Each incorrect answer gives a penalty, subtracted from correct answer scores.\n\n    # Therefore:\n    # 3x - 2(50 - x) = 125\n    # 3x - 100 + 2x = 125\n    # 5x = 125 + 100\n    # x = 225 / 5\n    correct_answers = (125 + 2*total_questions) // (score_for_correct + penalty_for_wrong)\n\n    return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    ans = gcd(gcd(60, 72), 84)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # The number Eddie stops at after counting to 30\n    stop_number = 10\n    \n    # Eddie counts 30 numbers, and there are 12 numbers on the clock\n    # Using modulo to find the starting point\n    start_number = (stop_number - (30 % 12)) % 12  # Modulo and adjust for 0-based index\n    \n    # Since the clock starts at 1, not 0, we add 1 if start_number is 0,\n    # otherwise, we keep it the same\n    start_number = 12 if start_number == 0 else start_number\n    \n    return start_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]\n    for _ in range(2, 2011):\n        next_num = (seq[-1] + seq[-2]) % 10\n        seq.append(next_num)\n    return seq[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    full_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (full_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        m_squared = sum([2*i - 1 for i in range(1, k + 1)])\n        m = m_squared ** 0.5\n        if m == int(m):\n            return int(m)\n        k += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove at the first speed\n    distance_first_part = 2 * 40\n\n    # Given the remaining distance\n    distance_second_part = 280\n\n    # Total distance driven\n    total_distance = distance_first_part + distance_second_part\n\n    # Time taken for the second part of the trip at the second speed\n    time_second_part = distance_second_part / 70\n\n    # Total time taken for the whole trip\n    total_time = 2 + time_second_part\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards, and Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_product = (423 % 4) * (326 % 4)  # Multiplying remainders\n    remainder_final = remainder_product % 4   # Calculating final remainder\n    return remainder_final\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    snacks_expense = 3\n\n    total_savings = original_amount + (daily_savings * days_saved) - lent_to_brother - snacks_expense\n\n    return total_savings\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    num_cows = 5\n    num_days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = num_cows * num_days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the price of a banana and a represent the price of an apple\n    b, a = symbols('b a')\n    \n    # Ellie's transaction: 2b + 3a = 3\n    eq1 = Eq(2*b + 3*a, 3)\n    \n    # Beth's transaction: 3b + 2a = 4\n    eq2 = Eq(3*b + 2*a, 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, a))\n    \n    # Calculate the total for 10 bananas and 10 apples\n    total = 10 * solutions[b] + 10 * solutions[a]\n    \n    return total\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of oil sold from each bucket\n    sold = symbols('sold')\n    \n    # The initial weight of the oil in the big and small buckets\n    big_bucket_initial = 89\n    small_bucket_initial = 45\n    \n    # After selling 'sold' amount of oil from each bucket\n    big_bucket_final = big_bucket_initial - sold\n    small_bucket_final = small_bucket_initial - sold\n    \n    # Equation representing the condition that the oil in the big one is left with 12 times as much as that in the small one\n    equation = Eq(big_bucket_final, 12 * small_bucket_final)\n    \n    # Solve the equation\n    sold_amount = solve(equation, sold)\n    \n    return sold_amount[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    \n    # Probability that both trains are not late\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability that at least one train is late\n    prob_at_least_one_late = 1 - prob_both_not_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # 10 to 99 inclusive\n    numbers_without_six = 8 * 8  # For each place (tens, ones), 8 options (1-5,7-9)\n    \n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    \n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let x be the total number of visitors\n    # Then 37% of x are men\n    # The ratio of women to children is 4:5 which means\n    # for every 9 parts, 4 are women and 5 are children\n    # The rest 63% of x are women and children\n    # So 37x/100 + 9y = x and y = (63x/100)/9\n    # We have 12 more men than children\n    # Hence (37 / 100) * x - 5y = 12\n\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n\n    # Equations based on the description\n    eq1 = Eq((37 / 100) * x + 9 * y, x)\n    eq2 = Eq((37 / 100) * x - 5 * y, 12)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Find the number of women using 4 parts out of the 9 parts for women and children\n    women = solutions[y] * 4\n\n    return int(women)\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_of_2023_squared = (2023**2) % 10\n    last_digit_of_2_power_2023 = (2**2023) % 10\n    last_digit_sum = (last_digit_of_2023_squared + last_digit_of_2_power_2023) % 10\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruits\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Given equations\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "from math import comb\n\ndef solution():\n    num_lines = 13\n    max_intersections = comb(num_lines, 2)\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = 5 ** 20 % 10\n    last_digit_7s = 7 ** 20 % 10\n    last_digit_expression = (last_digit_5s * last_digit_7s) % 10\n    return last_digit_expression\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total watermelons as 'total'\n    total = symbols('total')\n    \n    # She sold 1/3 on the first day, so she had 2/3 left\n    # She then sold 3/5 of the remaining (2/3), leaving her with (2/3)*(2/5) of her total watermelons\n    # The equation for the final amount of watermelons she had left is then:\n    equation = Eq((2/3)*(2/5)*total, 48)\n    \n    # Solve the equation to find the total watermelons she started with\n    solution = solve(equation, total)\n    \n    # The solution is a list, and we want the first (and only) element\n    return solution[0]\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the cost of a packet of rice\n    cost_of_rice = symbols('cost_of_rice')\n    \n    # Calculate total cost spent on pasta\n    total_cost_pasta = 6 * 95  # in pence\n    \n    # Write the equation based on the total amount spent\n    equation = Eq(6 * 95 + 5 * cost_of_rice, 1170)  # converting £11.70 to pence\n    \n    # Solve the equation for the cost of a packet of rice\n    solution = solve(equation, cost_of_rice)\n    \n    # Get the solution for the cost of a packet of rice\n    return solution[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10, 100):\n        number = int(f'6{i}')\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    AB = CD = 14\n    pi = 22 / 7\n\n    # The perimeter of the figure consists of 2 semicircles and 2 quadrants.\n    # Semicircle perimeter is pi*r and quadrant perimeter is (pi*r)/2\n    # For semicircles, each has a diameter of AB, so radius r is AB/2.\n    # The perimeter of one semicircle is then pi*(AB/2).\n    # But there are two semicircles, so we need to multiply this by 2.\n    \n    # The quadrant is a quarter of a circle, so it has a perimeter of pi*radius/2.\n    # For quadrants, each has a radius of CD, the perimeter of one quadrant is (pi*CD)/2.\n    # But there are two quadrants, so we need to multiply this by 2.\n    \n    # So, the total perimeter is the perimeters of the semicircles plus the perimeters of the quadrants.\n    \n    semicircles_perimeter = 2 * (pi * (AB / 2))\n    quadrants_perimeter = 2 * ((pi * CD) / 2)\n    \n    total_perimeter = semicircles_perimeter + quadrants_perimeter\n    \n    return total_perimeter\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_noodles = 10\n    chosen_noodles = 6\n\n    ways = comb(total_noodles, chosen_noodles)\n\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    total_amount = 1\n    fraction1 = 3 / 4\n    fraction2 = 2 / 5\n\n    result = total_amount * fraction1 * fraction2\n\n    return result\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start from the given fraction 13/10\n    fraction = 13/10 - 1  # Subtract 1 to get the fractional part\n\n    # Now, iteratively resolve the continued fraction part\n    a = int(1 / fraction)\n    fraction = 1 / fraction - a\n    \n    b = int(1 / fraction)\n    fraction = 1 / fraction - b\n    \n    c = int(1 / fraction)\n    \n    # Compute the final expression a + 2b + 3c\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # Let x be the number of days it takes for the lazy decorator to paint the house alone\n    # The rate of work for the energetic decorator is 1/20 per day\n    # The rate of work for the lazy decorator is 1/x per day\n    # Together they can finish 1/12 of the work per day (because it takes them 12 days to paint the house together)\n\n    # The combined work rate of both decorators is the sum of their individual work rates:\n    # 1/20 + 1/x = 1/12\n\n    # Solving for x gives us the number of days the lazy decorator would take to paint the house alone\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/20 + 1/x, 1/12)\n    \n    days_lazy_one = solve(equation, x)\n\n    return days_lazy_one[1] # Since we want the positive number of days\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    n = 15  # number of consecutive numbers\n\n    average = total_sum / n\n    smallest_number = average - (n - 1) / 2  # Based on the formula for the average of consecutive numbers\n    largest_number = average + (n - 1) / 2\n\n    sum_largest_smallest = smallest_number + largest_number\n\n    return int(sum_largest_smallest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    i = 1\n    while True:\n        if i % 4 == 0 and i % 6 == 0:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Let X represent the quotient unknown.\n    # From the given information:\n    # a = 8X + 6, where X is the integer quotient when a is divided by 8, and 6 is the remainder.\n    # b = 8Y + 7, where Y is the integer quotient when b is divided by 8, and 7 is the remainder.\n    # When adding a and b we get:\n    # (a + b) = (8X + 6) + (8Y + 7) = 8(X + Y) + 13\n    # Dividing (a + b) by 8 we obtain a quotient (X + Y) and a remainder of 13 - 8 = 5.\n    # Because 13 is 5 more than a multiple of 8 (13 = 8*1 + 5).\n    # So the remainder when (a + b) is divided by 8 is 5.\n\n    remainder = (6 + 7) % 8\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    skirts = 8\n    blouses = 2\n    cloth_per_skirt = 2.83\n\n    cloth_used_for_skirts = skirts * cloth_per_skirt\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    position = 2019\n    digit_count = 0\n    current_number = 1\n\n    while digit_count < position:\n        digits_in_number = len(str(current_number))\n        if digit_count + digits_in_number >= position:\n            return int(str(current_number)[position - digit_count - 1])\n        digit_count += digits_in_number\n        current_number += 1\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 500 / 1000\n    kitten_mass_kg = 0.6\n    num_kittens = 4\n\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + num_kittens * kitten_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1 # Brothers + Sisters + Mary\n    eggs_bought_per_member = family_members - 1 # Each person buys an egg for every other member, but not for themselves\n\n    total_eggs = family_members * eggs_bought_per_member\n\n    return total_eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime\n\ndef solution():\n    format_time = \"%H:%M\"\n    time_of_leaving = datetime.strptime(\"7:50\", format_time)\n    time_of_arrival = datetime.strptime(\"8:40\", format_time)\n    journey_duration = (time_of_arrival - time_of_leaving).seconds / 60 # in minutes\n    return int(journey_duration)\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Assuming the sequence increases by consecutive numbers\n    diff = 1\n    next_diff = 3  # Increment from 3 to 6 is 3\n    next_term = 15\n\n    # Calculate the next difference and add to the current term to get the next term\n    next_diff += diff\n    next_term += next_diff\n    \n    return next_term\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # Samuel spent 1/6 of his money and an additional $5 on a DVD.\n    money_after_DVD = initial_money - (initial_money / 6) - 5\n\n    # Samuel then spent 2/5 of his remaining money and an additional $12 on magazines.\n    money_after_magazines = money_after_DVD - (2/5) * money_after_DVD - 12\n\n    # Samuel had $24 left.\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve for initial money.\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    # Let the original amount of money Joanne had be x.\n    # After spending 1/5 of her money on a handbag, she is left with 4/5x.\n    # Then Joanne spends 3/5 of the remaining money on a dress, so she's left with 2/5 * 4/5x.\n    # We know that after all the spending, she has 80 left.\n\n    remaining_money = 80\n    original_money = remaining_money / (2/5 * 4/5)\n\n    return original_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_in_bottle = 5\n    remaining_oil = total_oil - oil_in_bottle\n    oil_in_each_tank = remaining_oil / 6\n    return oil_in_each_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    \n    grandpa_current_age = 72\n    johnny_current_age = 8\n    \n    equation = Eq(grandpa_current_age + years, 5 * (johnny_current_age + years))\n    \n    ans = solve(equation, years)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position_from_front = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position_from_front + children_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = 2000  # Initial amount borrowed\n    A = 2519.42  # Amount owed after 3 years\n    n = 3  # Number of years\n    r = symbols('r', real=True)  # Interest rate as a decimal\n\n    # A = P * (1 + r)^n\n    equation = Eq(P * (1 + r)**n, A)\n    \n    interest_rate = solve(equation, r)[0]\n    \n    return round(interest_rate * 100, 1)\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of odd numbers from 1 to 50\n    melvin_sum = sum(range(1, 51, 2))\n    # Sum of even numbers from 1 to 50\n    monica_sum = sum(range(2, 51, 2))\n    # Difference between Monica's and Melvin's sums\n    ans = monica_sum - melvin_sum\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If 20 oranges are given to each, 10 elderly will not receive any oranges.\n    # Let x be the total number of elderly.\n    # Then, 20(x - 10) is the number of oranges required to give 20 to each of the x-10 elderly.\n\n    # If 16 oranges are given to each, she can pack 25 boxes of 2 dozen oranges.\n    # 25 boxes * 2 dozen each = 50 dozen = 50 * 12 oranges = 600 oranges total.\n    # Then, 16x is the number of oranges required to give 16 to each of the x elderly.\n    # Hence, 16x = 600.\n\n    # So we are looking for a number of elderly x such that 20(x - 10) == 16x.\n    # Solve for x from the equation above:\n    # 20x - 200 = 16x\n    # 4x = 200\n    # x = 50\n\n    # Total oranges Janice has is 16x = 600.\n    # Total number of elderly is x = 50.\n\n    # Now, find the maximum number of oranges that can be given to each so that each elderly receives the same number and all the oranges are given out.\n    # Since we know that giving 20 to each will leave 10 without, the maximum number of oranges that each can receive to use all the oranges and ensure each elderly gets some is the HCF (highest common factor) of 600 and 50.\n\n    from math import gcd\n\n    total_oranges = 600  # total number of oranges Janice has\n    total_elderly = 50  # total number of elderly \n\n    # HCF of total_oranges and total_elderly\n    hcf = gcd(total_oranges, total_elderly)\n\n    return hcf\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    m, n, x = symbols('m n x')\n\n    # Equation based on the operation definition\n    operation_def = Eq(5*m + 3*n, m * n)\n\n    # Instance of the operation to find 'x'\n    instance_eq = Eq(5*x + 3*9, 37)\n\n    # Solving for 'x'\n    solutions = solve(instance_eq, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef count_arrangements(n, counts):\n    # Calculate the total permutations for n items\n    num_permutations = factorial(n)\n    # For each unique digit and its count, divide by\n    # the factorial of the count of that digit\n    for count in counts.values():\n        num_permutations //= factorial(count)\n    return num_permutations\n\ndef solution():\n    # Define the count for each digit\n    digit_counts = {'2': 3, '3': 2}\n    # There are 5 digits in total (3 of 2's and 2 of 3's)\n    total_digits = sum(digit_counts.values())\n    # Calculate the total number of 4-digit numbers that can be formed\n    ans = count_arrangements(4, digit_counts) * (total_digits - 4)\n    return ans\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case for not getting 4 balls of the same color:\n    # She takes out 3 blue balls, then 3 orange balls, and then 2 yellow balls.\n    # This is the maximum she can take out without having 4 balls of the same color.\n    # After this, any next ball she takes has to be either blue or orange, giving her 4 of the same.\n    balls_needed = (3 + 3 + 2) + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    weight_after_removal = 27\n    \n    soil_removed_weight = full_weight * removed_soil_fraction\n    empty_wheel_barrow_weight = full_weight - soil_removed_weight - (full_weight - weight_after_removal)\n    \n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tim's cookies and y be Tyler's cookies\n    t, y = symbols('t y')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(t / 6, y * 3 / 8) # 1/6 of Tim’s cookies equal to 3/8 of Tyler’s cookies\n    equation2 = Eq(t, 9 * (y - 96))  # After selling 96 cookies, Tim’s cookies are 9 times Tyler’s remaining cookies\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, y))\n\n    # The total number of cookies at the beginning is t + y\n    total_cookies = solutions[t] + solutions[y]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + vanilla * 2/3 + blueberry * 7/9, 427)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Retrieve number of chocolate cupcakes before selling\n    initial_chocolate = solutions[chocolate]\n    \n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = initial_chocolate / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n    \n    # Least common multiple will give us the interval in minutes\n    # at which trains leave both platforms at the same time\n    interval_minutes = lcm(24, 30)\n    \n    # Add the minutes to the start time (9 a.m.)\n    hours, minutes = divmod(interval_minutes, 60)\n    \n    # Assuming time in hours past midnight; 9 a.m. is 9 hours after midnight\n    start_time_in_hours = 9\n    next_departure_in_hours = start_time_in_hours + hours\n    next_departure_in_minutes = minutes\n    \n    if next_departure_in_minutes >= 60:\n        next_departure_in_hours += 1\n        next_departure_in_minutes -= 60\n    \n    # Convert to 24-hour time format if necessary\n    if next_departure_in_hours >= 24:\n        next_departure_in_hours -= 24\n    \n    return f\"{next_departure_in_hours:02d}:{next_departure_in_minutes:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3 / 4\n    \n    full_tank = part_filled / fraction_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    red_original, white_original = symbols('red_original white_original', real=True, positive=True)\n    red_added = symbols('red_added', real=True, positive=True)\n    white_added = symbols('white_added', real=True, positive=True)\n\n    # Original ratio of red to white marbles\n    eq1 = Eq(red_original / white_original, 3/2)\n\n    # Ratio after Pip adds red marbles\n    eq2 = Eq((red_original + red_added) / white_original, 5/3)\n\n    # Ratio after Bud adds white marbles\n    eq3 = Eq((red_original + red_added) / (white_original + white_added), 5/4)\n\n    # The number of balls put by Bud is 100 more than the number of balls put by Pip\n    eq4 = Eq(white_added, red_added + 100)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (red_original, white_original, red_added, white_added))\n\n    # Since we want to find the number of white balls at first, we select white_original\n    return solutions[white_original]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # We represent the remainder of a division by using the modulo operation in Python (\"%\")\n    remainder_a = 6  # a divided by 8 gives a remainder of 6\n    remainder_b = 7  # b divided by 8 gives a remainder of 7\n\n    # (a + b) modulo 8 gives the remainder when a + b is divided by 8\n    # Adding the remainders of 'a' and 'b' and then taking modulo with 8 gives us the remainder of (a + b)\n    total_remainder = (remainder_a + remainder_b) % 8\n\n    return total_remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    jessica_front = 5\n    judy_behind = 7\n    between_jessica_judy = 1  # Since they are adjacent\n\n    total_desks = jessica_front + between_jessica_judy + judy_behind + 1  # +1 for Judy's desk\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of people before Aaron joined and the original average weight\n    original_number_of_people = symbols('original_number_of_people', integer=True)\n    original_average_weight = symbols('original_average_weight', real=True)\n    \n    # Equation 1: Before Aaron joined\n    # (original_number_of_people * original_average_weight + 45) / (original_number_of_people + 1) = 61\n    \n    # Equation 2: After Aaron, before Ben joined\n    # (original_number_of_people * original_average_weight + 45 + 71) / (original_number_of_people + 2) = 62\n\n    equation1 = Eq((original_number_of_people * original_average_weight + 45) / (original_number_of_people + 1), 61)\n    equation2 = Eq((original_number_of_people * original_average_weight + 45 + 71) / (original_number_of_people + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_number_of_people, original_average_weight))\n\n    return solutions[original_average_weight]\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    from itertools import permutations\n\n    # iterate through all permutations of 0-9 to fill in the blanks\n    for p in permutations(range(10), 5):\n        a, b, c, d, e = p\n        # construct the multiplier, multiplicand and product\n        # with the placeholders replaced by the digits from the permutation\n        multiplier = (a * 10) + b\n        multiplicand = (c * 100) + (d * 10) + e\n        product = multiplier * multiplicand\n        # check if the product has the same digits as the multiplicand\n        # in different order (since we know the product is missing exactly\n        # the same digits as the multiplicand)\n        if sorted(str(product)) == sorted(str(multiplicand)) and a != 0 and c != 0:\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    total_hours = 15  # Total man-hours needed to build the bridge with six people\n    needed_hours = 2   # Desired hours to build the bridge\n\n    # If six people can build the bridge in 15 hours, that's a total of 6 * 15 man-hours of work.\n    # We need to find out how many people working for 2 hours would complete the same amount of work.\n    # So, we calculate people_needed as (6 * total_hours) / needed_hours.\n    people_needed = (6 * total_hours) / needed_hours\n\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_first_n = (n * (n + 1)) // 2\n    return sum_first_n\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    n = meters * 100  # Converting meters to centimeters\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30.00\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    total_spent = sweets + magazine + stickers + pizza + orange_juice\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_balls_removed = 2989\n    \n    while total_balls_removed > 0:\n        # Ming takes out two balls\n        if white_balls >= 2:\n            # If two white balls are taken, add one black ball to Bag A and remove two white balls\n            white_balls -= 2\n            black_balls += 1\n        elif black_balls >= 2:\n            # If two black balls are taken, add one black ball to Bag A and remove two black balls\n            # But in this case, since there is already one black ball added, we can simply remove one black ball\n            black_balls -= 1\n        else:\n            # If one ball of each color is taken, add one white ball to Bag A and remove one white and one black ball\n            # This effectively removes only one black ball\n            black_balls -= 1\n\n        total_balls_removed -= 2\n    \n    # The color of the remaining balls in Bag A is the color with positive count\n    color_remaining = \"white\" if white_balls > 0 else \"black\"\n    balls_remaining = white_balls if white_balls > 0 else black_balls\n\n    return (balls_remaining, color_remaining)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    total = 5\n    count = 0\n    \n    # 5 as the sum of 2 non-zero natural numbers\n    for i in range(1, 5):\n        if total - i > 0:\n            count += 1\n            \n    # 5 as the sum of 3 or more non-zero natural numbers\n    # For 3 numbers: only possible combination is (1,1,3)\n    # For 4 numbers: only possible combination is (1,1,1,2)\n    # For 5 numbers or more, it's not possible because the minimum sum would be > 5\n    count += 2\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for units_digit in range(0, 10):\n        hundreds_digit = units_digit - 2\n        if 1 <= hundreds_digit <= 9:\n            # The tens digit can be any from 0 to 9\n            count += 10\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    total_mass = 91.2\n    ratio = 3\n\n    daughter_mass = total_mass / (1 + ratio)\n    mr_han_mass = ratio * daughter_mass\n\n    return mr_han_mass\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_amount = remaining_after_students / (1 - 0.8)\n    return int(initial_amount)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since there are three students and 25 votes, Samantha must have more\n    # votes than the other two for her to have the most votes.\n    # By the Pigeonhole Principle, we can split the 25 votes among the three.\n    # To find the least number of votes Samantha could have, we want to maximize\n    # the number of votes the other two students can have.\n    # If we assign 8 votes to each of the other two students, we have:\n    # 25 votes - 8 other student 1 - 8 other student 2 = 9 votes for Samantha\n    # This is the least she can have while still having more than the others.\n\n    samantha_votes = 25 - 2 * (25 // 3)\n\n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    \n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n                \n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    \n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value x\n    x = symbols('x')\n\n    # Principal amount\n    P = 6000\n    # Amount after 5 years\n    A = 8029.35\n    # Number of years\n    t = 5\n\n    # Compound interest formula: A = P * (1 + r/n)^(n*t)\n    # Since interest is compounded yearly, n = 1 and the formula simplifies to A = P * (1 + r)^t\n    # We need to find the rate r, which is x/100 in decimal form\n    \n    # Create the equation based on the compound interest formula\n    equation = Eq(A, P * (1 + x / 100)**t)\n\n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Extracting the solution which should be a single value in this case\n    return float(solution[0])\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n\n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000  # There are 1000 grams in a kilogram\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, unread = symbols('read unread')\n\n    # Initial proportion of read to unread\n    equation1 = Eq(read / unread, 1/5)\n\n    # After reading 80 more pages, read pages become 70% of total\n    equation2 = Eq(read + 80, 0.7 * (read + unread))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (read, unread))\n\n    # Total number of pages in the magazine\n    total_pages = solutions[read] + solutions[unread]\n    \n    return total_pages\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Given: 2 books and 3 magazines cost $24.90\n    # Given: 1 book and 1 magazine cost $10\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_room = 45 // 5\n    teachers_room = 6 // 2\n    total_rooms = girls_room + teachers_room\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15_people = 650\n    people_increase = 18 - 15\n\n    flour_per_person = flour_for_15_people / 15\n    flour_for_18_people = flour_per_person * 18\n\n    return flour_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n    \n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n\n    # Iterate through the number, considering all possible cut positions\n    for i in range(1, len(number)):\n        for j in range(i+1, len(number)):\n            # Cut the number into three parts\n            part1 = int(number[:i])\n            part2 = int(number[i:j])\n            part3 = int(number[j:])\n            \n            # Calculate the sum of the parts\n            current_sum =  part1 + part2 + part3\n            \n            # Update the minimum sum if the current sum is smaller\n            min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # x+y=11.63 is the correct sum of two numbers\n    equation1 = Eq(x + y, 11.63)\n    # Oliver's mistake led to one of the numbers becoming ten times smaller, so if x is the smaller number that was shifted:\n    # 0.1*x + y = 5.87 is the incorrect sum due to the decimal shift\n    equation2 = Eq(0.1 * x + y, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Difference between the two original numbers\n    difference = solutions[x] - solutions[y]\n\n    # Return one hundred times the difference\n    return 100 * abs(difference)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000  # there are 1000 millimeters in a meter\n\n    return meters\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let's denote the number of questions CC answered correctly as x.\n    # Then Vivi answered correctly (x + 3) questions since she got 15 more points and each question is worth 10 points.\n    # Therefore, CC got 10x points from correct answers.\n    # CC got -5(10 - x) points from incorrect answers.\n    # Vivi got 10(x + 3) points from correct answers.\n    # Vivi got -5(10 - (x + 3)) points from incorrect answers.\n    # The total points they got is 95.\n\n    # We can set up the equation:\n    # 10x - 5(10 - x) + 10(x + 3) - 5(10 - (x + 3)) = 95\n    # Solving for x will give us the number of questions CC answered correctly.\n\n    for x in range(11): # CC can only answer between 0 and 10 questions correctly\n        if 10*x - 5*(10 - x) + 10*(x + 3) - 5*(10 - (x + 3)) == 95:\n            return x\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Number of members in the science, literature, and math clubs\n    science, literature, math = symbols('science literature math')\n\n    # Ratio equations\n    ratio1 = Eq(science / literature, 9 / 10)\n    ratio2 = Eq(literature / math, 5 / 7)\n    total = Eq(science + literature + math, 99)\n\n    # Solving the system of equations\n    solutions = solve((ratio1, ratio2, total), (science, literature, math))\n    \n    # How many more members in the math club than the literature club\n    more_members = solutions[math] - solutions[literature]\n    \n    return more_members\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # Minimum possible divisor is 1\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Calculate the maximum number of marbles that can be drawn without getting 3 of the same color.\n    # We can draw 2 blue, 2 yellow and 1 red to still not have 3 of the same color.\n    max_without_three_same_color = (2 + 2 + 1)\n\n    # To be sure to get 3 of the same color, we have to draw one more marble.\n    marbles_to_draw = max_without_three_same_color + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Melissa's current age as 'm' and her mother's current age as 'M'.\n    # According to the problem, we have:\n    # M = 3m, which is the second condition given: \"Melissa's mother is three times as old as Melissa now\".\n    # Also, we know that when Melissa was 8, her mother was 32. So,\n    # M - m = 32 - 8 = 24, which comes from the age difference that has not changed over years.\n\n    m, M = symbols('m M') # defining the symbols\n\n    # Now we create equations based on the information provided\n    equation1 = Eq(M, 3 * m) # Mother's age is three times Melissa's age\n    equation2 = Eq(M - m, 24) # The difference in age is constant (32-8)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (m, M))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but the corner flowers are counted on two sides.\n    # Since there are 4 corners, we subtract 4 to avoid double counting.\n    flowers_per_side = 6\n    total_flowers = 4 * flowers_per_side - 4\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut_1 = 4.8\n    cut_2 = 2.73\n\n    remaining_length = original_length - (cut_1 + cut_2)\n    lengths = sorted([cut_1, cut_2, remaining_length])\n\n    longest_piece = lengths[-1]\n    shortest_piece = lengths[0]\n    difference = longest_piece - shortest_piece\n\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # Let's assume Li Yan initially had 1 unit of money\n    # She spent 1/3 on a book, so she had 2/3 left\n    # Then she spends 1/2 of that remainder on a bag, which is 1/2 * 2/3 = 1/3\n    # In total, she spends 1/3 (book) + 1/3 (bag) = 2/3 of her money, leaving 1 - 2/3 = 1/3 of her money unspent\n\n    # However, Thomas added the fractions incorrectly. We should multiply 2/3 (remaining money) by 1/2 (spent on the bag), not add 1/2 to 1/3.\n\n    # The correct calculation for the bag's cost is: remaining_money = 2/3 * initial_money\n    # bag_cost = remaining_money / 2 = (2/3 * initial_money) / 2 = 1/3 * initial_money\n\n    # Since the total cost is both the book and bag combined, we have:\n    # book_cost + bag_cost = (1/3 + 1/3) * initial_money = total_cost\n    # (2/3) * initial_money = total_cost\n    # initial_money = total_cost / (2/3)\n    # initial_money = total_cost * (3/2)\n\n    initial_money = total_cost * (3/2)\n    \n    # Check if Thomas's answer is correct\n    is_correct = initial_money == 156\n\n    return initial_money, is_correct\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)  # Total cost equation\n    equation2 = Eq(basketball - volleyball, 10)  # Price difference equation\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    pattern_length = len(pattern)\n    num_repetitions = 47 // pattern_length\n    remaining_digits = 47 % pattern_length\n    sum_of_full_patterns = sum(map(int, pattern)) * num_repetitions\n    sum_of_remaining_digits = sum(map(int, pattern[:remaining_digits]))\n    total_sum = sum_of_full_patterns + sum_of_remaining_digits\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    price_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = price_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n\n    boys_average = 20\n    girls_average = 60\n\n    # Let the number of boys be x\n    # Then the number of girls is total_pupils - x\n    # Total pencils is the sum of boys' pencils and girls' pencils\n    # which is equal to total_pupils * total_average\n    # boys_average * x + girls_average * (total_pupils - x) = total_pupils * total_average\n    # Solve for x\n\n    x = symbols('x')\n    equation = Eq(boys_average * x + girls_average * (total_pupils - x), total_pupils * total_average)\n    number_of_boys = solve(equation, x)[0]\n\n    return number_of_boys\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_points = 61\n    total_questions = 25\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        points = correct * 4 - incorrect\n        if points == total_points:\n            for j_correct in range(correct):\n                j_incorrect = total_questions - j_correct\n                j_points = j_correct * 4 - j_incorrect\n                if j_points == total_points and j_correct < correct:\n                    return incorrect\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # calculate the total cost for the first 20 cupcakes\n    basic_cost = 20 * 4.5 + 12\n    if basic_cost > 120:\n        # If the cost of 20 cupcakes plus S&H exceeds the bill, less than 20 cupcakes were bought\n        return (120 - 12) // 4.5\n    else:\n        # calculate the cost per cupcake after 20\n        discounted_cupcake_price = 4.5 * 0.8\n        # calculate number of cupcakes over 20\n        additional_cupcakes = (120 - basic_cost) / discounted_cupcake_price\n        return 20 + additional_cupcakes\n    \nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n    \n    solutions = solve((equation1, equation2), (pigs, goats))\n    \n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    additional_pence = 57\n    total_pence = total_pounds * 100 + additional_pence \n    ans = total_pence / 100\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    \n    total_people = people_in_front + position_from_back - 1 # Subtract Rose since she is counted in both positions\n\n    return total_people\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    john_age_in_2_years = john_age_now + 2\n    grandmother_age_in_2_years = grandmother_age_now + 2\n    total_age_in_2_years = john_age_in_2_years + grandmother_age_in_2_years\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original number\n    orig_number = symbols('orig_number')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq((orig_number + 45) / 3, orig_number * 2)\n    \n    # Solve the equation\n    solution = solve(equation, orig_number)\n    \n    # Get the solution\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start with 2 books for each.\n    # 6 books are already distributed, so we have 4 books left to distribute.\n    for x in range(0, 5):  # x represents the additional books the first brother could get.\n        for y in range(0, 5 - x):  # y represents the additional books the second brother could get.\n            # The third brother's books are determined by the rest.\n            z = 4 - x - y\n            # Since the number of books left to distribute (4) is greater or equal to \n            # 0 at each step, and since we're iterating up to 4 for both brothers, \n            # we don't have to check for the non-negativity for the third brother.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # The worst case is that we draw all marbles of one color first,\n    # followed by all of another color, and then another.\n    # Since we need four different colors, the worst case scenario\n    # would be 12 red, 9 blue, 8 yellow and then we would finally\n    # need to draw one of the 3 green marbles to get 4 different colors.\n    # So we sum the largest counts of red, blue, and yellow, and then add one.\n    red = 12\n    blue = 9\n    yellow = 8\n    # we need only one green marble to ensure the fourth color\n    green_needed = 1\n\n    marbles_drawn = red + blue + yellow + green_needed\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it would take the lazy decorator to paint the house on his own\n    x = symbols('x')\n\n    # Productivity equations:\n    # 1/x = work rate of lazy decorator (houses per day)\n    # 1/10 = work rate of energetic decorator (houses per day)\n    # 1/6 = work rate of both together (houses per day)\n\n    # Equation representing the work done together:\n    # (1/x + 1/10) * 6 = 1 (1 house painted in 6 days)\n    equation = Eq((1/x + 1/10) * 6, 1)\n\n    # Solve for x\n    days_lazy = solve(equation, x)[0]\n\n    return days_lazy\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # the number is composed of 19 '5's, one unknown digit, and 19 '9's\n    number_str = '5' * 19 + 'x' + '9' * 19\n    for digit in range(10):\n        # Try each digit from 0 to 9 in the unknown position\n        temp_number_str = number_str.replace('x', str(digit))\n        temp_number = int(temp_number_str)\n        if temp_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom is 10th from the shortest, meaning there are 31 - 10 = 21 children taller than Tom.\n    # The last child is 131 cm tall, and no two children have the same height,\n    # so the heights of the taller children are 131, 130, ..., 131 - 20 (inclusively).\n    # The maximum height that Tom can have is the height just before the 21st child from the end\n    # which is 131 - 21 = 110 cm.\n    max_height_tom = 131 - 21\n    return max_height_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place cannot be 0\n        for ones in range(0, 10):\n            tens = 2 * hundreds\n            if tens >= 10:  # tens place cannot have a value of 10 or greater\n                continue\n            if hundreds == ones + 1 and hundreds + tens + ones == 15:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # There is only one two-digit number with a unit digit of 6 for each ten (16, 26, 36, ..., 96).\n    # The smallest two-digit number with a unit digit of 6 is 16 and the largest is 96.\n    # So we just need to count how many tens there are from 10 to 90.\n    start = 1  # Starting from 10 to 90 (1 represents 10 here)\n    end = 9  # Ending at 90 (9 represents 90 here)\n\n    # The count of numbers will be the same as the count of tens since there's only\n    # one candidate number per ten.\n    count = end - start + 1\n\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books = 30\n    books_given_to_anthea = 4\n\n    # After giving away 4 books, Jason will have\n    jason_books_after_giving = jason_books - books_given_to_anthea\n\n    # Since both have the same number of storybooks after giving,\n    # Anthea's books before receiving are (Jason's after giving) - (books given)\n    anthea_books_before_receiving = jason_books_after_giving - books_given_to_anthea\n\n    # The difference between Jason and Anthea's books at first\n    difference = jason_books - anthea_books_before_receiving\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    # Since we're looking at remainders, we can reduce each number by its remainder when divided by 3 before summing.\n    first = 3 % 3\n    second = 10 % 3\n    for _ in range(2023 - 2):  # We have the first two terms, we need to calculate the next 2021 terms\n        next_term = (first + second) % 3  # Only interested in the remainder when divided by 3\n        first, second = second, next_term\n    return second\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    # Let's denote the numbers after subtraction as n1 and n2\n    # According to the problem, n1 = 208 - magic_number and n2 = 136 - magic_number\n    # It's also given that n1 = 9 * n2\n    # So, 208 - magic_number = 9 * (136 - magic_number)\n    \n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let's denote the number of students as 'n' and the total number of gifts as 'g'.\n    # Given: g = 5n + 3\n    # Given: g = 4n + 9\n    # Therefore, both equations are equal to each other when we set g's value.\n    # 5n + 3 = 4n + 9\n    # Now we can solve this for 'n' (number of students).\n    n = 9 - 3\n\n    return n\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    number = 840\n    factors = factorint(number)\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= (power + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = set(range(1, 9))\n    second_smallest = None\n\n    for perm in permutations(all_digits, 4):\n        num_list = [10 * perm[i] + perm[j] for i in range(4) for j in range(4) if i != j]\n        num_list = list(set(num_list))  # Remove duplicates\n        num_list.sort()\n\n        if len(num_list) == 4 and \\\n           num_list[0] % 10 == 2 * (num_list[0] // 10) and \\\n           num_list[3] % 10 + num_list[3] // 10 == 9 and \\\n           num_list[2] // 10 - num_list[2] % 10 == 5 and \\\n           sum(1 for num in num_list if num % 2 == 1) == 1:\n            second_smallest = num_list[1]\n            break\n\n    return second_smallest\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    # Alan's money to Bella's money ratio condition\n    ratio_condition = Eq(alan / bella, 4 / 3)\n    \n    # Alan has $20 more than Chloe\n    money_difference = Eq(alan, chloe + 20)\n    \n    # Total money condition\n    total_money = Eq(alan + bella + chloe, 200)\n    \n    # Find the solution\n    solutions = solve((ratio_condition, money_difference, total_money), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    total_cost = 7.85 + (1.83 * 2)\n    payment = 20\n    change = payment - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Since Lily and her mother's positions are fixed, we have 3 remaining positions\n    # The number of ways to arrange the 3 family members is the factorial of 3\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n\n    # Calculate number of rows by solving for n in an arithmetic series\n    # last_term = first_term + (n - 1) * difference\n    num_rows = (last_term - first_term) // difference + 1\n\n    # Sum of arithmetic series: n/2 * (first_term + last_term)\n    total_seats = num_rows * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children_part = 3 / 5\n    men_part = 1 / 2\n\n    equation = Eq(children_part * visitors + 140, (1 - children_part) * men_part * visitors)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the initial number of stickers Peter had.\n    p = symbols('p')\n    \n    # Sam had 40 stickers more than Peter at first.\n    s = p + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    s -= s * 0.20\n    p += (p + 40) * 0.20\n    \n    # Peter gave 25% of his stickers to Sam\n    s += p * 0.25\n    p -= p * 0.25\n    \n    # The final difference is 96 stickers\n    equation = Eq(s - p, 96)\n    \n    # Solve the equation\n    solution = solve(equation, p)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_initial = 3\n\n    total_initial = average_initial * num_initial\n    total_final = average_final * (num_initial + 1)\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Sum of the squares of the first n natural numbers\n    sum_square_n = (n * (n + 1) * (2 * n + 1)) // 6\n    # Sum of the squares of the first (first_term - 1) natural numbers\n    sum_square_before_first_term = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    # Correct answer is the difference between the two sums\n    correct_answer = sum_square_n - sum_square_before_first_term\n    # Check if Kimmy's answer is correct\n    is_kimmy_correct = (correct_answer == 1240)\n    return correct_answer, is_kimmy_correct\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    equation1 = Eq(correct + incorrect, 20)  # Total questions\n    equation2 = Eq(correct * 5 - incorrect * 2, 51)  # Total points scored\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of money Amy had as 'x'.\n    x = symbols('x')\n\n    # According to the problem, Amy first spent 6/11 of her money plus $5,\n    # and then she spent 3/10 of the remainder plus $12.\n    money_after_highlighters = x - (6/11) * x - 5\n    money_after_fountain_pens = money_after_highlighters - (3/10) * money_after_highlighters - 12\n\n    # Now, we know that she has $30 left after the two transactions.\n    equation = Eq(money_after_fountain_pens, 30)\n\n    # Solving for 'x' will give us the initial amount of money Amy had.\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    equation1 = Eq(sally/gillian, 2/7)\n    equation2 = Eq((sally + 15)/(gillian + 15), 1/2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n\n    correct_result = mistaken_result + (actual_subtrahend - mistaken_subtrahend)\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    num_customers = 40\n    multiple_of_both = 3 * 4\n\n    customers_with_both_gifts = num_customers // multiple_of_both\n\n    return customers_with_both_gifts\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_per_cake = 4\n    total_kg = 8\n\n    total_apples = total_kg * apples_per_kg\n    number_of_cakes = total_apples // apples_per_cake\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    numerator = (35 / 45) * 9\n    return int(numerator)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    circumference = distance_between_seeds * number_of_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let the number of pieces cut into three parts be x.\n    # Since cutting a piece of paper into three parts results in two more pieces (one cut gives you two pieces, another cut gives you three),\n    # the total increase in the number of pieces is 2x.\n    # Initially there are 10 pieces of paper, and finally there are 16 pieces.\n    # Therefore, the equation we set up is: 10 + 2x = 16\n    # Solving for x gives us the number of pieces cut into three parts.\n    \n    initial_pieces = 10\n    final_pieces = 16\n    increase_per_cut = 2  # each piece cut into three parts increases the total count by 2\n\n    # Setting up the equation initial_pieces + increase_per_cut * x = final_pieces\n    # Simplify the equation to find x\n    x = (final_pieces - initial_pieces) // increase_per_cut\n    \n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    avg_boys = 10\n    total_participants = total_boys + 8\n    avg_participants = 14\n\n    # Calculate the total score of the boys\n    total_score_boys = total_boys * avg_boys\n    \n    # Calculate the total score of all participants\n    total_score_all = total_participants * avg_participants\n    \n    # Calculate the total score of the girls\n    total_score_girls = total_score_all - total_score_boys\n    \n    # Calculate the number of girls\n    total_girls = total_participants - total_boys\n    \n    # Calculate the average score of the girls\n    avg_girls = total_score_girls / total_girls\n    \n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let's denote the side length of the initial square as x.\n    # Therefore, the initial number of students is x^2 + 9.\n    # When we add a row and a column, the square size becomes (x + 1),\n    # and the total number of students needed is (x + 1)^2 = x^2 + 2x + 1.\n    # According to the problem, the difference in the number of students is 16:\n    # (x + 1)^2 - (x^2 + 9) = 16\n    # This simplifies to:\n    # x^2 + 2x + 1 - x^2 - 9 = 16\n    # 2x - 8 = 16\n    # 2x = 24\n    # x = 12\n    # Now we can find the initial number of students:\n    # x^2 + 9 = 12^2 + 9\n\n    x = 12\n    ans = x**2 + 9\n    return ans\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Assuming each of the initial 5 envelopes has x postcards,\n    # then 5x = 50.\n    # Solving for x gives us x = 50 / 5 = 10 postcards per envelope initially.\n\n    # If Lily puts the same number of postcards in each of the 2 new envelopes,\n    # she has to divide the additional postcards by 2.\n    # Since each of the 5 original envelopes has 10, then each of the new envelopes must also have 10.\n    # So the total number of additional postcards that friends gave her is 2 * 10.\n\n    additional_postcards = 2 * 10\n\n    # Total number of postcards:\n    # original postcards + additional postcards\n    total_postcards = 50 + additional_postcards\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Pence values\n    change_in_pence = 250  # Total change in pence\n\n    # We start checking from the largest coin to the smallest\n    for smallest_coin in sorted(coins):\n        sum_of_coins = 0\n        for coin in coins:\n            # If the coin can be a pair and still less than or equal to the change, add it\n            if coin >= smallest_coin and (sum_of_coins + 2 * coin) <= change_in_pence:\n                sum_of_coins += 2 * coin\n            if sum_of_coins == change_in_pence:  # We found the exact change\n                return smallest_coin\n    return None\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cookies = symbols('total_cookies')\n\n    burnt_cookies = (3/5) * total_cookies\n    remaining_cookies = total_cookies - burnt_cookies\n    sold_cookies = (75/100) * remaining_cookies\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    total_solution = solve(equation, total_cookies)\n\n    return total_solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 80 / 100  # converting pence to pounds\n    cost_for_250g = cost_per_100g * (250 / 100)\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    per_container = 4\n\n    num_containers = (total_apples + per_container - 1) // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Loop over all possible numbers with a 9 in the units place\n    for i in range(1, 10000):  # limiting to 5-digit numbers for simplicity\n        original_number = i * 10 + 9\n        new_number = int('9' + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    \n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (1070 + y) % 6 == 0:\n            ans = y\n            break\n    return ans\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    # Start with the lowest 2-digit number that satisfies the first condition\n    for number in range(10, 100):\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    total_students = 6  # Laura, Rita and other 4 students\n    laura_fixed = 1  # Laura must stand in the front\n    positions_for_others = total_students - laura_fixed  # positions available for others\n    rita_cannot_end = positions_for_others - 1  # Rita cannot stand at the end\n\n    # We can first arrange the other 4 students and then insert Rita into any position\n    # except the end, which gives us 4 options for Rita.\n    # The remaining 4 students can be arranged in any order.\n    ways_other_students = factorial(positions_for_others - 1)\n    ways_to_place_rita = rita_cannot_end\n\n    # Total ways is the product of ways to place the other students and ways to place Rita\n    total_ways = ways_other_students * ways_to_place_rita\n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Given that Jerry travels three-sevenths of the distance\n    jerry_ratio = 3/7\n    # Kevin's speed\n    kevin_speed = 80\n    # Jerry travels 2/5 of the road length each hour\n    jerry_speed_ratio = 2/5\n\n    # Let the length of the road be x\n    # Kevin travels four-sevenths of the distance since Jerry travels three-sevenths\n    kevin_ratio = 4/7\n\n    # Since they meet each other at the same time, their speeds are proportional to the distances travelled\n    jerry_speed = jerry_speed_ratio * kevin_speed / kevin_ratio\n\n    # The distance travelled by Jerry is three-sevenths of the total distance\n    # therefore, time taken by Jerry is distance/speed, which is (3/7) * x / jerry_speed\n    # This should equal 1 hour because Jerry travels 2/5 of the road length each hour\n    # so, (3/7) * x / jerry_speed = 1\n    # Solving this for x gives us the length of the road\n    \n    # Calculate the length of the road (x)\n    x = jerry_speed * 7 / 3\n\n    return x\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50_percent = regular_total_price * 0.5\n    additional_discount_20_percent = discount_50_percent * 0.2\n    final_price = discount_50_percent - additional_discount_20_percent\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    number_sold = 88\n    fraction_sold = 4 / 7\n\n    total_apples = number_sold / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    sg_departure = datetime(2023, 8, 24, 5, 0)\n    london_arrival = datetime(2023, 8, 24, 11, 0)\n    # Adjust London's time to Singapore's time by adding 7 hours difference\n    adjusted_london_arrival = london_arrival + timedelta(hours=7)\n    # Calculate the flight duration\n    flight_duration = adjusted_london_arrival - sg_departure\n    # Extract the total hours from the duration\n    total_hours = flight_duration.total_seconds() / 3600\n    return total_hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    boys_average = 20\n    girls_average = 60\n\n    boys = symbols('boys')\n    girls = total_pupils - boys\n\n    equation = Eq(boys * boys_average + girls * girls_average, total_pencils)\n\n    boys_count = solve(equation, boys)[0]\n    return boys_count\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_probability = 0.3\n    draw_probability = 0.1\n    lose_probability = 1 - (win_probability + draw_probability)\n    \n    # Probability of Sally winning exactly one game:\n    # This can happen in two scenarios:\n    # 1. Sally wins the first game and does not win the second (draws or loses)\n    # 2. Sally does not win the first game (draws or loses) and wins the second game\n    \n    # Using Law of Addition:\n    # P(Sally wins exactly one game) = P(Sally wins first AND does not win second) \n    #                                + P(Sally does not win first AND wins second)\n    # Using Law of Multiplication:\n    # P(A and B) = P(A) * P(B)\n    \n    # Calculate each scenario separately\n    win_first_lose_second = win_probability * (1 - win_probability)\n    lose_first_win_second = (1 - win_probability) * win_probability\n    \n    # Add the two scenarios together\n    prob_win_exactly_one = win_first_lose_second + lose_first_win_second\n    \n    return prob_win_exactly_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(1, 10000):  # we assume a reasonable upper limit\n        if (lollipops - 32) % 4 == 0 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    \n    # Find the greatest common divisor (GCD) of the differences\n    from math import gcd\n    d = gcd(diff1, diff2)\n    \n    # The largest possible divisor D would be the same as the GCD of the differences\n    # Since they all give the same remainder when divided by D, the remainder R\n    # must be the original numbers modulo D\n    \n    # Calculate the remainder R using any of the original numbers\n    r = 2010 % d\n    \n    # The largest possible value of D + R\n    return d + r\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = 1 / 13\n    decimal_string = format(decimal, '.3000f')\n    recurring_cycle = decimal_string[2:14]  # \"076923076923\" is the recurring cycle for 1/13\n    position_in_cycle = (2012 - 1) % len(recurring_cycle)\n\n    return int(recurring_cycle[position_in_cycle])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        digits_sum = sum(int(digit) for digit in str(i))  # Sum the digits\n        if digits_sum % 5 == 0:  # Check if the sum is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    \n    original_ratio = Eq(eddi / wiya, 8 / 7)\n    new_ratio = Eq((eddi - 4) / (wiya + 4), 18 / 17)\n    \n    solutions = solve((original_ratio, new_ratio), (eddi, wiya))\n    \n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # red to blue ratio is 5:6, and blue marbles are 72\n    red_marbles = (5 / 6) * blue_marbles\n    # red marbles are twice that of green marbles\n    green_marbles = red_marbles / 2\n    # total marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016.875\n    num4 = 11/3\n    den1 = 2017 + 1/3 - 2016.875\n    den2 = 17\n    num5 = 3 + 23/32\n\n    # Calculate the numerator of the complex fraction.\n    numerator = (num1 * num2) - (num3 * num4)\n\n    # Calculate the denominator of the complex fraction.\n    denominator = den1 * den2\n\n    # Calculate the result of the division.\n    division_result = numerator / denominator\n\n    # Multiply the result by the last mixed number.\n    final_result = division_result * num5\n    \n    return final_result\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    start_delay = 10  # minutes\n\n    # Distance covered by rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n\n    # Time taken by the sea turtle to finish the race\n    turtle_race_time = race_distance / turtle_speed\n\n    # Time taken by the rabbit to finish the race, including sleep\n    rabbit_race_time = start_delay + rabbit_sleep_time + (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n\n    if rabbit_race_time < turtle_race_time:\n        winner = \"rabbit\"\n        time_difference = turtle_race_time - rabbit_race_time\n        distance_difference = turtle_speed * time_difference\n    else:\n        winner = \"turtle\"\n        time_difference = rabbit_race_time - turtle_race_time\n        distance_difference = rabbit_speed * time_difference - rabbit_distance_before_sleep\n\n    return winner, distance_difference\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students originally in Class B\n    x = symbols('x')\n\n    # Class A has original_class_B_students + 47 students\n    class_A = x + 47\n\n    # We want to find the number of students to move from A to B so that A has only 9 more students than B\n    # After moving y students, Class A will have (class_A - y) students\n    # And Class B will have (x + y) students\n    # We set up the equation (class_A - y) = (x + y) + 9\n\n    y = symbols('y')\n    equation = Eq(class_A - y, x + y + 9)\n\n    solution = solve(equation, y)\n\n    return solution[y]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - piece1 - piece2\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    \n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Assume x is the smaller number and y is the larger number\n    # We are given that y - x = 57 and x + y = 77\n    # To find the value of x, we can set up a system of equations\n    # and solve for x.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(y - x, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    return 5 ** 3 # There are 5 odd digits (1, 3, 5, 7, 9) and 3 digit places in numbers from 1 to 999.\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # The hundreds digit must be 1, 2, 3, or 4 because the number is a 3-digit number and the sum of digits is 5\n    for h in range(1, 5):\n        # The tens digit can be 0-4 because the sum of digits is 5 and we've already used some for the hundreds place\n        for t in range(5):\n            # The ones digit must make the sum of the digits equal to 5\n            o = 5 - (h + t)\n            # Check if the ones place is odd and within the 0-9 range\n            if o % 2 == 1 and 0 <= o <= 9:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_in_pounds = 24\n    total_cost_in_pence = total_cost_in_pounds * 100\n    individual_cost_in_pence = total_cost_in_pence / (total_pairs * 2)  # since each pair has 2 avocados\n\n    return individual_cost_in_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # Initialize an empty dictionary that keeps track of the number frequency\n    frequency = {}\n    \n    # Iterate over all possible outcomes of the first die\n    for die1 in range(1, 7):\n        # Iterate over all possible outcomes of the second die\n        for die2 in range(1, 7):\n            # Calculate the sum of both dice\n            total = die1 + die2\n            # Update the frequency dictionary with the total sum\n            if total in frequency:\n                frequency[total] += 1\n            else:\n                frequency[total] = 1\n    \n    # Find the most likely total score\n    most_likely_total = max(frequency, key=frequency.get)\n    \n    return most_likely_total\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    total_students = 36\n    avg_score = 89\n    girls_avg_score = 88\n    boys_avg_score = 91\n    \n    # Let the number of girls be x\n    # Then, the number of boys will be (total_students - x)\n    # The total score for girls will be girls_avg_score * x\n    # The total score for boys will be boys_avg_score * (total_students - x)\n    # The total score for the class will be avg_score * total_students\n\n    # Setting up the equation:\n    # girls_avg_score * x + boys_avg_score * (total_students - x) = avg_score * total_students\n\n    # Let's solve for x (the number of girls)\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    equation = Eq(girls_avg_score * x + boys_avg_score * (total_students - x), avg_score * total_students)\n    num_girls = solve(equation, x)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table sits 12 people, with 3 on each side.\n    # When 8 square tables are put together in a row, the two people at the ends of each internal side\n    # become adjacent to the person at the end of the next table, reducing the number by 2 for each adjacent pair of tables.\n    # Therefore, each pair of tables loses 4 seating positions (2 from each table)\n    # There are 7 pairs of tables when 8 tables are put together\n    # So we subtract the loss of seating positions from the total if they were all standalone tables:\n    \n    people_per_table = 12\n    number_of_tables = 8\n    people_lost_per_pair = 4\n    number_of_pairs = number_of_tables - 1\n\n    total_people_standalone = people_per_table * number_of_tables\n    total_people_lost = people_lost_per_pair * number_of_pairs\n\n    max_people_seated = total_people_standalone - total_people_lost\n    return max_people_seated\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the number of marbles each person has\n    a, b, j, x = symbols('a b j x')\n\n    # equations based on the problem statement\n    equation1 = Eq(a, (b + j + x) / 3 - 30)  # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier  \n    equation2 = Eq(x, 3 * a)                 # Xavier has thrice as many marbles as Andrew\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (a, b, j, x))\n\n    # since we need the sum of marbles for Jeffery and Boris\n    jeffery_and_boris = solutions[b] + solutions[j]\n\n    return jeffery_and_boris\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    current_page = 1\n    digits_used = 0\n\n    while digits_used < total_digits:\n        digits_in_page = len(str(current_page))\n        digits_used += digits_in_page\n        current_page += 1\n\n    return current_page - 1\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, factorint\n\n    # Function to calculate the number of factors for a number\n    def num_factors(n):\n        factors = factorint(n)\n        total = 1\n        for exponent in factors.values():\n            total *= (exponent + 1)\n        return total\n\n    count = 0\n    # Start from the least multiple of 15 and check for number of factors\n    n = 15\n    while True:\n        if num_factors(n) == 15:\n            count += 1\n        # Break if the number becomes too large for practical computation; \n        # adjusts this limit as needed\n        if n > 10**12:\n            break\n        n += 15\n    \n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let's denote the number of rhinos (and deer) as r and the number of ostriches as o.\n    # Since rhinos and deer have the same number and ostriches have heads, we know\n    # r + r + o = 28 (1) -> number of heads\n    # 4r (rhinos legs) + 4r (deer legs) + 2o (ostriches legs) = 88 (2) -> number of legs\n    \n    # From (1): we get 2r + o = 28 (3) -> we can express o = 28 - 2r\n    # Substitute o from (3) to (2): 4r + 4r + 2(28 - 2r) = 88\n    # 8r + 56 - 4r = 88\n    # 4r = 88 - 56\n    # 4r = 32\n    # r = 32 / 4\n    r = 32 // 4\n    \n    return r\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    diff = 52\n    max_side = int(diff**0.5) + 1  # Upper bound of possible side length difference between layers of students and teachers\n    for s in range(1, max_side):\n        if (s**2 - (s - 2)**2) == diff:\n            side_length = s + (s - 2)  # Total side length of the square\n            people = side_length**2\n            return people\n    return None\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100): # A is a 2-digit number\n        for B in range(1000, 10000): # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B-A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "def solution():\n    from math import comb\n\n    total_players = 12\n    players_needed = 6\n\n    ways_to_choose = comb(total_players, players_needed)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original relationship between apples and oranges\n    equation1 = Eq(apples, 5/7 * oranges)\n    \n    # Relationship after buying 12 more oranges\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Since 8 * 80 * 100 = 8^2 * 10 * 8 * 10^2\n    # We simplify it to 8^2 * 10^3\n    # Thus, the box should contain 10^3 to complete the expression\n    ans = 10 ** 3\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # Given fraction\n    numerator = 2014\n    denominator = 37\n    \n    # Subtract the integer part of the fraction (54)\n    integer_part = numerator // denominator\n    remaining_fraction = numerator % denominator\n    \n    # Convert the remaining fraction into its reciprocal (1 / (1 / remaining_fraction))\n    x_denominator = denominator // remaining_fraction\n    \n    # Subtract the integer part to find the next remaining fraction\n    x_integer_part = x_denominator\n    x_remaining_fraction = x_denominator % remaining_fraction\n    \n    # Convert the remaining fraction into its reciprocal to find y\n    y_denominator = remaining_fraction // x_remaining_fraction\n    y_integer_part = y_denominator\n    y_remaining_fraction = y_denominator % x_remaining_fraction\n    \n    # Convert the remaining fraction into its reciprocal to find z\n    z_integer_part = x_remaining_fraction // y_remaining_fraction\n    \n    # The values of x, y, z are the integer parts obtained in the transformations\n    x = x_integer_part\n    y = y_integer_part\n    z = z_integer_part\n    \n    # The sum of x, y and z\n    sum_xyz = x + y + z\n    \n    return sum_xyz\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # The ones digit repeats in a cycle with powers of the base number\n    # Let's find the ones digit for both terms independently and subtract them\n\n    # To find the ones digit of 32^33, we look at the cycle of ones digits for powers of 2\n    # The ones digit cycle for base 2 is [2, 4, 8, 6], and this repeats every 4 powers\n    cycle_2 = [2, 4, 8, 6]\n    ones_digit_32_power_33 = cycle_2[(33 - 1) % 4]  # Subtracting 1 as we start from power 0\n\n    # To find the ones digit of 22^29, we look at the cycle of ones digits for powers of 2\n    # Since the tens digit does not affect the ones digit for powers, we can ignore it\n    # The cycle for base 2 also applies here for the ones digit\n    ones_digit_22_power_29 = cycle_2[(29 - 1) % 4]  # Again, subtracting 1\n\n    # Now we subtract the ones digits to get the result\n    # If subtraction result is negative, add 10 for correct modular result\n    result = ones_digit_32_power_33 - ones_digit_22_power_29\n    result = result if result >= 0 else result + 10\n\n    return result\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_number = 10  # The number on the clock where Eddie stops\n    total_count = 30  # The number Eddie counts up to\n\n    # Since the clock has 12 numbers and Eddie counts up to 30,\n    # We must reduce 30 by multiples of 12 until we have a number less than or equal to 12\n    # This is because the clock repeats every 12 numbers\n    final_position = total_count % 12  # This gives us the offset from 12 o'clock\n\n    # To find the starting position, we calculate the difference from end position\n    # And go backwards by that offset\n    start_position = (end_number - final_position) % 12\n\n    # If the start position is 0, it means Eddie started from 12\n    start_position = 12 if start_position == 0 else start_position\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the quantity of oil sold from each bucket\n    oil_sold = symbols('oil_sold')\n    \n    # The big bucket equation after selling oil: 89 - oil_sold = 12 * (45 - oil_sold)\n    equation = Eq(89 - oil_sold, 12 * (45 - oil_sold))\n    \n    # Solve the equation to find the quantity of oil sold\n    solutions = solve(equation, oil_sold)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    winners = 9\n    amount_per_person = total_jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    price_shoes = 78\n    price_socks = 12\n    siblings_count = 5\n    alien_count = 1\n    legs_per_alien = 5\n\n    total_family_members = siblings_count + alien_count\n    total_legs = total_family_members * legs_per_alien\n    \n    sets_of_shoes = total_legs // 5\n    sets_of_socks = total_legs // 2\n    \n    cost_shoes = sets_of_shoes * price_shoes\n    cost_socks = sets_of_socks * price_socks\n    \n    total_cost = cost_shoes + cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while not (num % 5 == 1 and num % 6 == 1 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n    \n    # Since a, b, c are prime numbers and they appear in the equations as added to constants, \n    # we can calculate their values by subtracting the constants from each side of the equation.\n    a = 31 - 26  # This is the result of 31+a = 26+b equation\n    b = 26 - 20  # This is the result of 26+b = 20+c equation\n    c = 20 - 20  # This is 20+c = 20 which implies c is 0 but since c must be a prime number and prime numbers are > 1:\n    \n    # The first prime number starting from 1 onwards\n    primes = list(primerange(1, 100))\n    c = primes[primes.index(a) + 1]  # To ensure c is the next prime number after a and still satisfy c > b > a\n    \n    # Calculate the product of a, b, and c\n    ans = a * b * c\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Calculate distance based on time and speed\n    # Let x be the distance between the home and the park\n    # Time taken to jog from home to park: x/5 hours\n    # Time taken to jog back from park to home: x/4 hours\n    # Total time taken: x/5 + x/4 = 54/60 hours (since 54 mins is 54/60 hours)\n    \n    # Since the LCM of 4 and 5 is 20, we multiply both sides of the equation by 20\n    # 4x + 5x = 54/60 * 20\n    # 9x = 54/60 * 20\n    # x = (54/60 * 20) / 9\n    # x = 2\n    \n    # Return the distance, which is x\n    return 2\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie = symbols('rennie')\n    joleen = rennie + 5\n    equation = Eq((3/4)*rennie, (2/3)*joleen)\n\n    rennie_pies = solve(equation, rennie)[0]\n    joleen_pies = rennie_pies + 5\n\n    return rennie_pies + joleen_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x\n    # Then the number of girls is x + 8\n    # We know that number of boys + number of girls = total pupils\n    # So, x + (x + 8) = total pupils\n    # Solving for x gives us the number of boys, and adding 8 gives us the number of girls.\n    x = (total_pupils - 8) // 2\n    girls = x + 8\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Using the sympy library to solve equations\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students who like both apples and bananas.\n    x = symbols('x')\n\n    # According to the problem statement, we have:\n    apple_lovers = 3 * x  # The number who like apples is three times those who like both\n    banana_lovers = 5 * x  # The number who like bananas is five times those who like both\n    total_students = 35  # Total number of students\n\n    # Using the inclusion-exclusion principle:\n    # total_students = apple_lovers + banana_lovers - both_lovers\n    # both_lovers is x, and we're also given that everyone likes at least one fruit\n\n    # Create the equation based on the above information\n    equation = Eq(apple_lovers + banana_lovers - x, total_students)\n\n    # Solve the equation for x\n    both_lovers = solve(equation, x)\n\n    # Return the number of students who like both fruits\n    return both_lovers[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    original_weight_kg = 3.5\n    pie_weight_kg = 550 / 1000  # convert grams to kilograms\n    juice_weight_kg = 1050 / 1000  # convert grams to kilograms\n\n    remaining_weight_kg = original_weight_kg - (pie_weight_kg + juice_weight_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as A and B are two-digit and three-digit numbers respectively\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 25 + 6 * A:\n                return A\n    return None  # If no solution found (though the problem guarantees a solution)\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    total_days = 5\n\n    total_chairs = sum(first_day_chairs + common_difference * (day - 1) for day in range(total_days))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    \n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # lee_rate is the rate at which Lee works\n    # nancy_rate is the rate at which Nancy works\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # They finish the job together in 10 hours\n    # Joint work equation: lee_rate*10 + nancy_rate*10 = 1 job\n    equation1 = Eq(lee_rate*10 + nancy_rate*10, 1)\n\n    # Nancy works 20 hours total, Lee works 6 hours\n    # Lee and Nancy finish the job: lee_rate*6 + nancy_rate*20 = 1 job\n    equation2 = Eq(lee_rate*6 + nancy_rate*20, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Time taken for Nancy to finish the job alone is 1/nancy_rate\n    nancy_time_to_finish = 1 / solutions[nancy_rate]\n\n    return nancy_time_to_finish\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Based on the worst case using the pigeonhole principle\n    # You have to take 2 blue + 2 yellow to ensure that you don't have 3 of the same color\n    # then the next marble you take has to give you 3 of the same color no matter what\n    max_blue_yellow = 2 + 2\n    # The next marble you take will be the third marble of the same color\n    next_to_guarantee = 1\n    \n    total_marbles_to_take = max_blue_yellow + next_to_guarantee\n    return total_marbles_to_take\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 13), (-3, 4)]\n    ans, mod = solve_congruence(*congruences)\n    while ans < 100:\n        ans += mod\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n    \n    total_spent = book_price + tshirt_price + pen_price\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let Mary's age be m and her son's age be s.\n    # According to the problem, m + s = 45\n    # After 5 years, Mary's age will be m + 5 and her son's age will be s + 5\n    # Sum of their ages in 5 years' time will be (m + 5) + (s + 5)\n\n    # Current sum of their ages\n    current_sum = 45\n\n    # Sum after 5 years\n    sum_after_5_years = current_sum + (5 * 2)  # Multiply 5 by 2 because both will be 5 years older\n\n    return sum_after_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_in_pence = 7 * 14\n    amount_paid_in_pence = 100  # 1 pound = 100 pence\n    change_in_pence = amount_paid_in_pence - total_cost_in_pence\n\n    return change_in_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for both person's current age\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(sebastian, garrett - 24)    # Sebastian is 24 years younger than Garrett\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))  # In 10 years, Garrett will be thrice as old as Sebastian\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of girls as g and the number of boys as b.\n    g, b = symbols('g b')\n\n    # We have two equations based on the problem statement.\n    # Equation 1: There were 65 fewer boys than girls initially.\n    equation1 = Eq(b, g - 65)\n    # Equation 2: After the given fractions of boys and girls left, the remaining numbers were equal.\n    equation2 = Eq(b - 2/5*b, g - 3/7*g)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Find the number of boys and girls that remained in the hall.\n    remaining_boys = solutions[b] - 2/5 * solutions[b]\n    remaining_girls = solutions[g] - 3/7 * solutions[g]\n    \n    # The total number of students remaining is the sum of remaining boys and girls.\n    total_remaining = remaining_boys + remaining_girls\n\n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_percentage = 6\n    sales_tax_paid = 90\n    sofa_price = (sales_tax_paid * 100) / sales_tax_percentage\n\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    num_days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_person_per_day = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = travel_cost_per_person * num_people\n    total_hotel_cost = hotel_cost_per_person_per_day * num_days * num_people\n    total_spending_money = spending_money_per_person * num_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    nth_term = first_term + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treat the math books, chemistry books, and physics books each as a single unit.\n    num_units = 4  # 1 unit of each subject + 1 singular biology book\n    \n    # Calculate permutations of the units.\n    unit_permutations = factorial(num_units)\n    \n    # Calculate permutations of each subject's books within itself.\n    math_book_permutations = factorial(4)\n    chemistry_book_permutations = factorial(3)\n    physics_book_permutations = factorial(2)\n    biology_book_permutations = factorial(1)  # Not necessary as it's factorial(1) which is 1\n    \n    # Multiply the permutations of placing units with permutations within each unit.\n    total_permutations = (unit_permutations * math_book_permutations *\n                          chemistry_book_permutations * physics_book_permutations *\n                          biology_book_permutations)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ORANGES\")  # Total letters in the word\n    total_vowels = len(\"AEO\")  # Total vowels in the word\n    total_consonants = total_letters - total_vowels  # Total consonants in the word\n    \n    # Total permutations of the letters\n    total_permutations = factorial(total_letters)\n    \n    # Permutations where all vowels are together as one unit\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtract the number of invalid permutations from the total permutations\n    valid_permutations = total_permutations - vowels_together\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    height_in_kilometres = height_in_metres / 1000\n    return height_in_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    total_ways = category1 * category2 * category3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primerange\n\n    # Assign initial values to a, b and c, assuming they are primes less than 31\n    # since 31 is added to a, and the result should still be a reasonable integer (practical prime range).\n    # In the range of primes, we look for such that satisfy the conditions.\n    \n    primes = list(primerange(1, 31))\n    for a in primes:\n        b = 31 + a - 26\n        c = 31 + a - 20\n        if b in primes and c in primes:\n            return a * b * c\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, 13):\n            c = 12 - a - b\n            # Ensure c is non-negative and the triangle inequality holds\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Implementing the winning strategy using the nim-sum (XOR) calculation.\n    \n    # Matches in pile A\n    pile_a = 35\n    # Matches in pile B\n    pile_b = 24\n    \n    # XOR operation to determine the nim-sum\n    nim_sum = pile_a ^ pile_b\n    \n    # If nim-sum is 0, then the second player has the winning strategy.\n    # Otherwise, the first player does.\n    if nim_sum == 0:\n        winner = \"Wei'er\"\n    else:\n        winner = \"Eddie\"\n        \n    # The winning strategy is to always make the nim-sum 0 after your move.\n    strategy = \"Make the nim-sum 0\"\n    \n    return winner, strategy\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # There are 6 people, but the table can be rotated, so we fix one person's position\n    # and arrange the remaining 5 people around the table.\n    \n    ans = factorial(5)  # 5! ways to arrange the remaining 5 people\n\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, melvin, david = symbols('eugene melvin david')\n\n    # Setup the equations based on the problem statement\n    eq1 = Eq(eugene + melvin + david, 260)  # Total stickers before exchanges\n    eq2 = Eq(eugene - 2*melvin, melvin * 2)  # Eugene gives Melvin twice as many stickers as Melvin had\n    eq3 = Eq(melvin - david, david * 2)  # Melvin gives David as many stickers as David had\n    eq4 = Eq(david - eugene, eugene * 2)  # David gives Eugene as many stickers as Eugene had\n    eq5 = Eq(eugene, 46/65 * (eugene + melvin + david))  # Eugene's final ratio\n    eq6 = Eq(melvin, 12/65 * (eugene + melvin + david))  # Melvin's final ratio\n    eq7 = Eq(david, 7/65 * (eugene + melvin + david))    # David's final ratio\n\n    # Now we need to solve the equations to find the initial amount of stickers each person had\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (eugene, melvin, david))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    return sum(range(31, 42))\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum_result = 0\n    for i in range(80, 55, -2):\n        if i % 4 == 0:\n            sum_result -= i\n        else:\n            sum_result += i\n    return sum_result\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Given speeds and distances\n    speed1 = 7  # m/s for the first 280 m\n    speed2 = 5  # m/s for the middle 400 m\n    speed3 = 8  # m/s for the last part of the race\n\n    distance1 = 280  # the first 280 m\n    distance2 = 400  # the middle 400 m\n    distance_total = 800  # total distance\n\n    # Calculate the distance for the sprint stage\n    distance3 = distance_total - (distance1 + distance2)\n\n    # Calculate the time spent on each part of the race\n    time1 = distance1 / speed1  # Time = Distance / Speed for the first part of the race\n    time2 = distance2 / speed2  # for the middle part of the race\n    time3 = distance3 / speed3  # for the sprint stage\n\n    # Calculate the total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(2, 25))\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] + primes[j] == 25:\n                return primes[i] * primes[j]\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of boys and girls be x\n    b, g = symbols('b g')\n    \n    # Original number of boys equals original number of girls\n    equation1 = Eq(b, g)\n    \n    # Halfway through the lesson, the number changed\n    # boys = original boys + 12, girls = original girls - 8\n    # and boys became twice the number of girls\n    equation2 = Eq(b + 12, 2 * (g - 8))\n\n    # Solve the system of equations\n    students = solve((equation1, equation2), (b, g))\n\n    # At first, the total number of students is the sum of boys and girls\n    total_students_at_first = students[b] + students[g]\n\n    return total_students_at_first\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n\n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n\n    time_spent_minutes = end_time_total_minutes - start_time_total_minutes\n    return time_spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Equations based on the question\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    \n    # Remaining cupcakes after selling\n    chocolate_left = chocolate - chocolate / 6\n    vanilla_left = vanilla - 2 * vanilla / 3\n    blueberry_left = blueberry - 7 * blueberry / 9\n    \n    equation3 = Eq(chocolate_left + vanilla_left + blueberry_left, 427)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes = solutions[chocolate]\n    \n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = chocolate_cupcakes / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    num_students = 6\n\n    peaches_per_student_if_evenly_distributed = total_peaches // num_students\n    remaining_peaches = total_peaches % num_students\n\n    most_peaches = peaches_per_student_if_evenly_distributed\n    if remaining_peaches > 0:  # Pigeonhole principle: some student must receive at least one more\n        most_peaches += 1\n\n    return most_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    number1 = 18\n    number2 = 52\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n    total_pages = end_page - start_page + 1\n    return total_pages\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be x\n    # The consecutive numbers are: x, x+1, x+2, x+3, x+4, x+5, x+6\n    # The sum of these numbers is 7x + (1+2+3+4+5+6) which is equal to 140\n    sum_of_consecutive_numbers = 140\n    sum_of_to_be_added_numbers = 1+2+3+4+5+6\n    \n    # Solve for x\n    x = (sum_of_consecutive_numbers - sum_of_to_be_added_numbers) / 7\n    \n    return int(x)\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2 / 9) * 36\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcard_price_pence = 45 # price per postcard in pence\n    stamp_price_pence = 27 # price per stamp in pence\n    quantity = 10 # quantity bought for both postcards and stamps\n\n    total_cost_pence = (postcard_price_pence * quantity) + (stamp_price_pence * quantity) # total cost in pence\n    note_value_pounds = 10 # £10 note value\n\n    total_cost_pounds = total_cost_pence / 100 # converting total cost to pounds\n    change = note_value_pounds - total_cost_pounds # calculating the change from £10\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed, so we are arranging the remaining three.\n    # Total arrangements without restriction for 3 people is 3! (factorial of 3).\n    total_arrangements = 3 * 2 * 1\n\n    # Now we find the restricted arrangements where Tony sits face to face with Claire.\n    # If Claire's seat is fixed and she doesn't face Tony, then there is only 1 way Tony can sit face to face with her.\n    # With Tony's place fixed, there are two possible arrangements for Chantel and Cale, which is 2! (factorial of 2).\n    restricted_arrangements = 2 * 1\n\n    # The total possible arrangements that satisfy the condition is\n    # the total arrangements minus the restricted ones.\n    arrangements = total_arrangements - restricted_arrangements\n\n    return arrangements\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank produces 180 tables in 10 days\n    frank_daily_output = 180 / 10\n\n    # Ryan produces 180 tables in 15 days\n    ryan_daily_output = 180 / 15\n\n    # Difference in their daily output\n    daily_difference = frank_daily_output - ryan_daily_output\n\n    return daily_difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    questions, time = symbols('questions time')\n\n    # If she marked 4 questions per minute, she would leave 5 minutes late\n    equation1 = Eq(questions, 4 * (time + 5))\n    # If she marked 6 questions per minute, she would leave 5 minutes early\n    equation2 = Eq(questions, 6 * (time - 5))\n    \n    # Solve for the number of questions and time\n    solutions = solve((equation1, equation2), (questions, time))\n\n    return solutions[questions]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        numbers = [i, i + 1, i + 2, i + 3, i + 4]\n        for j in range(5):\n            for k in range(j + 1, 5):\n                for l in range(k + 1, 5):\n                    sum_3 = numbers[j] + numbers[k] + numbers[l]\n                    if sum_3 % 37 == 0:\n                        for m in range(5):\n                            for n in range(m + 1, 5):\n                                for o in range(n + 1, 5):\n                                    if len({j, k, l} & {m, n, o}) == 2:\n                                        sum_3_other = numbers[m] + numbers[n] + numbers[o]\n                                        if sum_3_other % 60 == 0:\n                                            return numbers[-1]\n    return None\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    incorrect_deduction = -2\n    total_marks = 79\n\n    # Let x be the number of correct answers\n    # Then the number of incorrect answers would be (total_questions - x)\n\n    # Building the equation:\n    # correct_marks*x + incorrect_deduction*(total_questions - x) = total_marks\n    # 5x - 2*(20 - x) = 79\n    # 5x - 40 + 2x = 79\n    # 7x = 79 + 40\n    # 7x = 119\n    # x = 119 / 7\n    x = (total_marks + incorrect_deduction * total_questions) / (correct_marks - incorrect_deduction)\n\n    return int(x)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_amount_pence = 165 * 100  # Convert pounds to pence\n    price_per_cake = 75  # price of each cake in pence\n    number_of_cakes = total_amount_pence // price_per_cake  # Integer division to find the number of cakes sold\n\n    return number_of_cakes\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remaining_after_restaurant\n    remaining_money = remaining_after_restaurant - spent_on_fees\n    \n    return remaining_money\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Example usage with arbitrary prices for x and y:\nx = 2  # example price of bananas per pound\ny = 3  # example price of oranges per pound\n\nans = solution(x, y)"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    chime_time = 6  # time it takes for 3 chimes\n    additional_chimes = 6 - 3  # chimes needed for 6 pm minus those at 3 pm\n    time_between_chimes = chime_time / (3 - 1)  # time between each of the 3 chimes\n\n    # Total time is time between chimes multiplied by one less than the number of chimes\n    return (6 - 1) * time_between_chimes\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_work_per_hour = 1 / (12 * 8)\n    q_work_per_hour = 1 / (8 * 10)\n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n\n    hours_needed = 1 / combined_work_per_hour\n    days_needed = hours_needed / 8\n\n    return int(days_needed) if days_needed.is_integer() else int(days_needed) + 1\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert meters to centimeters\n    meters_in_cm = 3.2 * 100  # 1 meter = 100 centimeters\n\n    # Calculate the difference\n    difference = meters_in_cm - 30\n\n    return difference\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10  # because we have 10 terms from 1^2 to 10^2\n    sum_squares = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_squares\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 41):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    total_cost = 5 * 56  # total cost in pence\n    money_given = 10 * 100  # converting pounds to pence\n    change = money_given - total_cost  # change in pence\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(120)\n    count = 1\n    for exponent in factors.values():\n        count *= (exponent + 1)\n    return count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    import math\n\n    product = 180\n    sqrt_product = int(math.sqrt(product))\n    for num in range(sqrt_product, 0, -1):\n        if product % num == 0:\n            other_num = product // num\n            return other_num - num\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_midnight = -8\n    temperature_midday = 13\n\n    overall_change = temperature_midday - temperature_midnight\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    # Initialize the answer variable\n    ans = None\n    # Find numbers that are factors of 27\n    factors_of_27 = [i for i in range(1, 28) if 27 % i == 0]\n    # Check which factor is also a multiple of 3 and is between 5 and 15\n    for num in factors_of_27:\n        if num % 3 == 0 and 5 < num < 15:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_weight_durian + total_weight_watermelon\n    \n    average_weight = total_weight / total_fruits\n    \n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    score = 71\n\n    # Tom calculates correct answers with his method (which is wrong)\n    tom_correct = 31\n    # According to Tom's method, wrong answers\n    tom_wrong = total_questions - tom_correct\n\n    # But we need correct values. Suppose x is correct answers.\n    # Then, total questions - x will be wrong answers.\n    # Each correct answer gives 2 points, each wrong answer deducts 1 point.\n    # 2x - (total_questions - x) = score\n\n    # That gives us 3x - total_questions = score\n    # Solving for x gives us correct number of correct answers.\n    correct_answers = (score + total_questions) / 3\n    wrong_answers = total_questions - correct_answers\n\n    # The mistake in Tom's calculation is considering the difference in score to be equal to\n    # the number of wrong answers. While the score difference is affected by 3 points for\n    # each wrong answer, 2 points are being taken for making it right and 1 for marking it wrong.\n\n    return int(wrong_answers)\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, t be the time it takes Max to cover the distance.\n    d, t = symbols('d t')\n\n    # Luca takes 10 more minutes than Max -> Luca's time = t + 10\n    # Luca's speed = d / (t + 10), Max's speed = d / t\n    # speed_luca / speed_max = 2 / 3\n    equation1 = Eq((d / (t + 10)) / (d / t), 2 / 3)\n\n    # Solve the equation to find t\n    solved_time = solve(equation1, t)\n\n    # t is the time for Max. To find Luca's time at his normal speed, we add 10.\n    # Luca's time at double speed would be half of his time at normal speed,\n    # so we take half of (solved_time[0] + 10)\n    luca_time_double_speed = (solved_time[0] + 10) / 2\n\n    return luca_time_double_speed\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n\n    return difference\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1\n    jogging_speed = 6.5  # miles per hour\n    \n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2\n    walking_speed = 4.5  # miles per hour\n\n    # Distance = Speed * Time\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 patterns, each with an 'A'.\n    # The worst case scenario would be drawing all cards except for the 'A's.\n    worst_case_without_A = 13 * 4 - 1  # All cards of each pattern without an 'A'.\n    # We need to draw one additional card to ensure we get an 'A'.\n    at_least_one_A = worst_case_without_A + 1\n    return at_least_one_A\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    \n    for i in range(1, 319):  # Pages 1 to 318\n        count += str(i).count('3')\n    \n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    ship_speed = 33\n    current_speed = 7\n    downstream_speed = ship_speed + current_speed\n    distance = 320\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Assume she initially had 'n' each of pens and pencils.\n    # After giving 5 pencils away, she has n - 5 pencils left.\n    # She had twice as many pens as the pencils left, so she had 2 * (n - 5) pens.\n    # But initially, the number of pens was equal to pencils, which is n.\n    # So we can write the equation as: n = 2 * (n - 5)\n    # We can solve this equation to find the value of 'n'.\n\n    # Let's solve the equation:\n    n = symbols('n')\n    equation = Eq(n, 2 * (n - 5))\n    solution = solve(equation, n)\n\n    # We found the initial number of pens (which is equal to the number of pencils)\n    initial_pens = solution[0]\n\n    # She then bought another 18 pens, so we add 18 to the initial number of pens.\n    final_pens = initial_pens + 18\n\n    # Returning the final number of pens she had.\n    return final_pens\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cuts = 2 * 45  # Total length of wire cut into two 45cm pieces.\n    remaining_length = total_length - cuts  # Remaining length after cutting two 45cm pieces.\n    number_of_40cm_lengths = remaining_length // 40  # Number of 40cm lengths that can be cut from the remaining wire.\n\n    return number_of_40cm_lengths\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 1 / 10\n    proportion_left_handed = 1 / 4\n\n    total_left_handed = left_handed_tennis_players / proportion_left_handed_tennis\n    total_students = total_left_handed / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_made = 80\n    butter_used = 20  # grams\n\n    desired_cookies = 100\n    butter_per_cookie = butter_used / cookies_made\n\n    butter_needed = butter_per_cookie * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime.strptime('10:35 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    ans = arrival_time.strftime('%I:%M %p')\n\n    return ans\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Since each position can be 6, 7, or 8, and each digit can be used more than once,\n    # each position has 3 possibilities.\n    # Therefore, the total number of different three-digit numbers is 3 * 3 * 3\n    ans = 3**3\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    current_number = 1\n    \n    while count_zeros < 100:\n        count_zeros += str(current_number).count('0')\n        if count_zeros >= 100:\n            break\n        current_number += 1\n\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drank_per_week = 9  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank_per_week\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n    \n    interest = principal * rate * time\n    \n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_first_part = 180  # meters per minute\n    time_first_part = 6     # minutes\n    speed_second_part = 120  # meters per minute\n    time_second_part = 8    # minutes\n\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n    total_distance = distance_first_part + distance_second_part\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first number in the sequence be x\n    # The consecutive numbers are then x+1, x+2, ..., x+7 (since there are 8 numbers)\n    # The sum of these numbers is x + (x+1) + (x+2) + ... + (x+7) = 2012\n    # Simplifying this we get 8x + (1+2+...+7) = 2012\n    # The sum of the first 7 positive integers is 28 (7*8/2)\n    # Therefore, 8x + 28 = 2012, solving for x we get:\n    x = (2012 - 28) / 8\n    # The largest number is then x+7\n    largest_number = x + 7\n    return int(largest_number)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    value = (42 / 35) * 100\n    return value\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    initial_ratio = Eq(a, 5/7 * b)\n    new_ratio = Eq(a + 3, 4/5 * (b - 3))\n    \n    solutions = solve((initial_ratio, new_ratio), (a, b))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first\n    # After 5 swaps, she got 4 new bottles (1 more than expected)\n    # Therefore, without the additional bottle, she would have got 4 - 1 = 3 bottles.\n\n    # We know that 3 empty bottles are needed for 1 new bottle.\n    # Since she should have gotten 3 new bottles with her swaps, she must have swapped 3 * 3 = 9 empty bottles.\n\n    # She swapped 5 times, implying that she should have 5 less bottles than she started with, \n    # but since she ended up with 3 bought bottles, she should have 5 - 3 = 2 bottles less.\n    # Which means, x - 2 = 9\n    \n    # Solving the equation x - 2 = 9 gives us x = 11.\n    # Hence, Faye had 11 bottles at first.\n    x = 9 + 2\n    return x\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    n = 1\n    while True:\n        boys = n * n\n        total = boys + 17\n        if int(total**0.5) ** 2 == total:\n            return boys\n        n += 1\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_volume_litres = 40\n    flow_rate_millilitres_per_second = 125\n    total_volume_millilitres = total_volume_litres * 1000\n    \n    time_seconds = total_volume_millilitres / flow_rate_millilitres_per_second\n    \n    return time_seconds\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_average = 1468\n    correct_average = 1462\n    incorrect_entry = 1268\n    correct_entry = 1082\n\n    # Calculate difference introduced by incorrect recording\n    difference = incorrect_entry - correct_entry\n\n    # Calculate number of days based on the difference in averages\n    num_days = difference / (incorrect_average - correct_average)\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # If Mr. Tung cuts a rope into 4 equal parts in 12 minutes,\n    # it means he makes 3 cuts (as the first cut gives 2 pieces, and so on).\n    # Therefore, each cut takes 12/3 = 4 minutes.\n    cut_time_per_piece = 12 / 3\n\n    # To cut a rope into 12 pieces, he needs to make 11 cuts.\n    # So, we calculate the total time by multiplying the time per cut by the number of cuts needed.\n    total_time = cut_time_per_piece * (12 - 1)\n\n    return total_time\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for speed, time, and distance\n    speed, time, distance = symbols('speed time distance')\n    \n    # Time taken if Ivy leaves at 1 PM and arrives at 7 PM\n    original_time = 6\n    # Time taken if Ivy leaves an hour earlier\n    reduced_time = 5\n    \n    # Equation for the original scenario: distance = speed * time\n    equation1 = Eq(distance, speed * original_time)\n    \n    # Equation for the adjusted scenario: distance = (speed + 2) * (time - 1)\n    equation2 = Eq(distance, (speed + 2) * reduced_time)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (speed, distance))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    digits_per_page = 9 * 1 + 90 * 2 + 900 * 3  # Calculate base digits for 1-9, 10-99, 100-999\n    pages = 0\n    if total_digits <= digits_per_page:\n        # Handle 1-9\n        if total_digits <= 9:\n            pages = total_digits\n        # Handle 10-99\n        elif total_digits <= (9 + 90 * 2):\n            pages = 9 + (total_digits - 9) // 2\n            if (total_digits - 9) % 2 != 0:\n                pages += 1\n        # Handle 100-999\n        else:\n            pages = 9 + 90 + (total_digits - 9 - 90 * 2) // 3\n            if (total_digits - 9 - 90 * 2) % 3 != 0:\n                pages += 1\n    else:\n        # If it exceeds, calculate the exact number of digits\n        remaining_digits = total_digits\n        # Calculate for pages 1-9\n        if remaining_digits > 9:\n            pages += 9\n            remaining_digits -= 9\n        else:\n            pages += remaining_digits\n            return pages\n        # Calculate for pages 10-99\n        if remaining_digits > 180:  # 90 pages, each with 2 digits\n            pages += 90\n            remaining_digits -= 180\n        else:\n            pages += remaining_digits // 2\n            return pages\n        # Calculate for pages 100 and beyond\n        pages += remaining_digits // 3\n\n    return pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    # Arithmetic progression properties\n    # a_n = a_1 + (n - 1) * d\n    # a_n is the nth term, a_1 is the first term, and d is the common difference\n    from sympy import symbols, Eq, solve\n\n    a_1, d = symbols('a_1 d')\n\n    # a_9 = a_1 + 8 * d\n    # a_15 = a_1 + 14 * d\n    equation1 = Eq((a_1 + 8 * d) - (a_1 + 14 * d), 18)\n\n    # a_20 = a_1 + 19 * d\n    # a_12 = a_1 + 11 * d\n    equation2 = Eq((a_1 + 19 * d) + (a_1 + 11 * d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a_1, d))\n    a_1_solution = solutions[a_1]\n    d_solution = solutions[d]\n\n    # Find the 32nd term\n    a_32 = a_1_solution + 31 * d_solution\n\n    return a_32\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    term_position = 10\n\n    # Use the arithmetic sequence formula to find the first term: a_n = a_1 + (n-1)*d\n    first_term = tenth_term - (term_position - 1) * common_difference \n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # 4 * (lily_age * marry_age * carol_age) = 2240\n    # Therefore, (lily_age * marry_age * carol_age) = 2240 / 4 = 560\n    # Carol = Marry + 2, Marry = Lily + 1\n    # Substitute Carol and Marry in terms of Lily\n    # (lily_age * (lily_age + 1) * (lily_age + 3)) = 560\n    \n    # We will find the prime factorization of 560 and try to identify three factors\n    # that match the conditions given above.\n    \n    for lily_age in range(1, 560):\n        marry_age = lily_age + 1\n        carol_age = lily_age + 3\n        if lily_age * marry_age * carol_age == 560:\n            return carol_age\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    chewy_equation = (8*x + 8)/2 - 3*(x + 6)\n    correct_equation = simplify(chewy_equation)\n\n    return correct_equation\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * (2/5)\n    purple_flowers = total_flowers * (1/8)\n    return int(red_flowers), int(purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n\n    remainder = number % 9\n    ans = remainder if remainder == 0 else 9 - remainder\n\n    return ans\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    elias_position_from_back = danya_position_from_back - 1\n    total_people = people_in_front_of_elias + elias_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # When splitting 10 identical marbles into 2 piles, \n    # and each pile can contain zero marbles,\n    # there are n + 1 ways to split them, where n is the number of marbles.\n    # This corresponds to (0,10), (1,9), (2,8), ..., (10,0).\n    number_of_marbles = 10\n    num_ways = number_of_marbles + 1\n    return num_ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter = 1.05669 quarts\n    cups_per_quart = 1 / 0.5         # 1 quart = 2 cups (since cup is 0.5 quart)\n    total_cups = liters_to_quarts * cups_per_quart\n\n    return round(total_cups)\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85 + 147  # lengths in centimeters\n    length_m = 2          # length in meters\n    total_length_m = length_m + (length_cm / 100)  # convert centimeters to meters and add\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34 / 100\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    # Assume all are ants with 6 legs\n    total_legs = 64\n    for spiders in range(total_legs//8 + 1):\n        legs_with_spiders = spiders * 8\n        remaining_legs = total_legs - legs_with_spiders\n        if remaining_legs % 6 == 0:\n            ants = remaining_legs // 6\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n\n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # 5 red cars, 9 blue cars, and 4 white cars\n    # To ensure he gets 3 cars of the same colour, he could pick in the worst case:\n    # 2 red cars (not enough for 3 of same color)\n    # 2 blue cars (not enough for 3 of same color)\n    # 2 white cars (not enough for 3 of same color)\n    # At this point, he's picked 2 of each color, so the next car he picks must be the third of one color.\n    # Thus, he needs to pick 2 + 2 + 2 + 1 = 7 cars to be sure to have 3 of the same color.\n\n    return 2*3 + 1\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Given:\n    # After the first bounce, height = 3 * initial_height\n    # After the second bounce, height = 3 * 3 * initial_height\n    # After the third bounce, height = 1/2 * 3 * 3 * initial_height\n    # After the fourth bounce, height = 36 m; which is 1/2 * 1/2 * 3 * 3 * initial_height\n    # So, 1/2 * 1/2 * 3 * 3 * initial_height = 36\n    # => initial_height = 36 / (1/2 * 1/2 * 3 * 3)\n    \n    initial_height = 36 / (0.5 * 0.5 * 3 * 3)\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # Equation representing the sum of the two numbers\n    equation1 = Eq(x + y, 11.63)\n    # Equation representing Oliver's mistake when shifting the decimal\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Getting the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Multiplying the difference by 100\n    return float(difference * 100)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    remaining_amount = initial_amount - amount_spent\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_p = 99\n    total_songs = 12\n    album_price_pounds = 8.99\n    \n    # Convert pounds to pence for consistency\n    album_price_p = album_price_pounds * 100\n\n    # Calculate the cost of buying songs individually\n    total_individual_price_p = total_songs * single_song_price_p\n    \n    # Calculate the savings\n    savings_p = total_individual_price_p - album_price_p\n\n    # Convert pence to pounds for the answer\n    savings_pounds = savings_p / 100\n\n    return savings_pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for i in digits:\n        for j in digits:\n            if i != j:\n                two_digit_numbers.add(i * 10 + j)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        number = int(f\"3{N}3\")\n        if number % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length = 450  # length in meters\n\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # To get the smallest possible difference between the two 5-digit numbers\n    # formed from all the digits 0 to 9, we should try to place the digits in\n    # a way that the two numbers are as close to each other as possible.\n    \n    # The most significant digit has the most impact on the difference, so we\n    # want smaller digits in the most significant position and larger digits\n    # in the least significant position.\n    \n    # Since 0 cannot be the most significant digit of a 5-digit number, we\n    # will use 1 for the first number and 0 and 2 for the second number.\n    \n    # The next significant digit should be as close as possible, so we use 3\n    # for the first number and 4 for the second number, because 2 is already used.\n    \n    # We continue in this manner until all digits are placed:\n    #     First number:  1 3 5 7 9\n    #     Second number: 0 2 4 6 8\n    # We sort the remaining digits (2-9 because 0 and 1 are used) and alternate:\n    num1 = int(\"97531\")\n    num2 = int(\"86420\")\n    \n    # Calculate the difference\n    difference = abs(num1 - num2)\n    \n    return difference\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n\n    concentration = (salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_a_pen = pen_cost / pencil_cost\n\n    return int(pencils_for_a_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Baba = 10\n    Ali_and_Baba = 2\n\n    total_people = people_in_front_of_Ali + Ali_and_Baba + people_behind_Baba\n\n    return total_people\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # Peter gave 25% of his stickers to Sam\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter + 0.20 * sam - 0.25 * peter + 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 1 == 0 and number % 2 == 0 and\n            number % 3 == 0 and number % 4 == 0 and\n            number % 5 == 0 and number % 6 == 0):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    accum = 0\n    for i in range(1, 101):\n        accum += i * (i + 1)\n    return accum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    num_jugs = 4\n    \n    total_water_added = jug_capacity * num_jugs\n    final_water_amount = initial_water + total_water_added\n\n    return final_water_amount\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(1, 10, 2):  # d must be odd to be divisible by 5\n                    for e in range(0, 10, 2):  # e must be even so that the whole number is divisible by 4\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if len(set(str(number))) == 6 and number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                            return number\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    total_days = 3 + 2 + 2\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for n in range(10, 100):\n        reversed_n = int(str(n)[::-1])\n        difference = max(n, reversed_n) - min(n, reversed_n)\n        results.add(difference)\n    return results  # Assuming we want to see the different results\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n    \n    # Total work done in 12 days if both worked together every day\n    total_work_done = 12 * (candy_rate + david_rate)\n    \n    # Days David took off\n    david_days_off = (1 - total_work_done) / david_rate\n    \n    return david_days_off\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is the normal force,\n    # which in this case is equal in magnitude and opposite in direction to the weight of the book\n    # Since weight is a force, its magnitude is expressed in newtons (N).\n    # The book has a weight (mass) of 20N and rest on the table,\n    # hence the table must exert an equal and opposite force to support the book.\n    force_exerted_by_table = 20  # This is the normal force, equal in magnitude to the book's mass\n\n    return force_exerted_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    # Calculate tax for the first $50,000\n    first_tax = 0.05 * 50000\n    # Any amount above $50,000 is taxed at a rate of (8+T)%\n    additional_tax_rate = (0.08 + T / 100) * (140000 - 50000)\n    # The lawyer noticed that the income tax he paid was $15,100\n    # so we set the equation for the total tax paid\n    tax_equation = Eq(first_tax + additional_tax_rate, 15100)\n    # Solve the equation for T\n    tax_solution = solve(tax_equation, T)\n\n    return tax_solution[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    guy_age = y - 3\n    return guy_age\n\nans = solution"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fruits = symbols('fruits')\n\n    # Apples make up 4/5 of the total fruits\n    apples_fraction = 4 / 5\n    # 3/4 of the fruits were removed\n    fruits_removed_fraction = 3 / 4\n    # After removing 3/4, 1/8 of the original apples are left\n    apples_left_fraction = 1 / 8\n    # There are 30 pears left, which is the total pears after 3/4 of the total fruits are removed\n    pears_left = 30\n\n    # Equation representing the left apples fraction after the removal\n    equation1 = Eq(apples_fraction * fruits * (1 - fruits_removed_fraction), apples_left_fraction * fruits)\n    # Equation representing the pears left\n    equation2 = Eq((1 - apples_fraction) * fruits * (1 - fruits_removed_fraction), pears_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (fruits))\n\n    return solutions[fruits]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum number of balls she can take without getting 6 of the same type:\n    # 5 of each type of ball\n    max_without_six = (5 * 3)\n    # So the next ball she takes out will have to be the 6th of at least one type\n    balls_to_get_six = max_without_six + 1\n\n    return balls_to_get_six\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the speed of the ball when it strikes the floor.\n    v = symbols('v')\n    \n    # Constants\n    g = 9.8 # Acceleration due to gravity (m/s^2)\n    h = 5.0 # Height of the table (m)\n    m = 2.0 # Mass of the ball (kg)\n    \n    # Potential energy at the top equals kinetic energy at the bottom\n    # m * g * h = 0.5 * m * v**2\n    # We can cancel out the mass (m) from both sides of the equation\n    # g * h = 0.5 * v**2\n    # Rearrange to solve for v\n    equation = Eq(g * h, 0.5 * v**2)\n    \n    # Solve for v\n    solution = solve(equation, v)\n\n    # We only consider the positive root since speed cannot be negative\n    return max(solution)\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes_made = 6\n\n    time_per_cake = time_for_6_cakes / number_of_cakes_made\n    total_time_for_10_cakes = time_per_cake * 10\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n    \n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # To ensure each kid gets at least one orange, we will give one orange to each kid.\n    # So we are left with 13 - 3 = 10 oranges to divide.\n    # This is a problem of dividing n identical items into r groups,\n    # which is solved by the formula: comb(n + r - 1, r - 1).\n    # Here n is 10 (the remaining oranges) and r is 3 (the kids).\n    n = 10\n    r = 3\n    ans = comb(n + r - 1, r - 1)\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    def is_divisible_by_11(n):\n        # Implements the divisibility rule for 11\n        alternate_sum = sum(int(n[i]) if i % 2 == 0 else -int(n[i]) for i in range(len(n)))\n        return alternate_sum % 11 == 0\n\n    for num in range(10**9):  # a big range to include numbers with digit sum 20\n        if sum(map(int, str(num))) == 20 and is_divisible_by_11(str(num)):\n            return num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or o == 0:  # Skip combinations where S or O is zero\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:  # Check the given condition\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    num_foods = 2  # sandwiches or burgers\n    num_drinks = 3  # coffee, milk, or tea\n    num_desserts = 4  # cake, pudding, ice-cream, or pie\n\n    # Number of ways to choose one item from each category is the product of the number of choices in each category\n    num_ways = num_foods * num_drinks * num_desserts\n\n    return num_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    return 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_needed_for_equal_volume = total_water // 2\n    water_to_transfer_from_A_to_B = water_needed_for_equal_volume - 28\n    return water_to_transfer_from_A_to_B\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the animals\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Find how many pigs weigh as much as 8 elephants\n    pigs_for_8_elephants = 8 * solutions[elephant] / solutions[pig]\n\n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    v0 = 5    # Initial velocity (m/s)\n    theta = 45  # Angle of elevation (degrees)\n    h = 30   # Initial height (meters)\n\n    # Calculate the initial vertical and horizontal velocities\n    theta_rad = math.radians(theta)  # Convert angle to radians\n    v0x = v0 * math.cos(theta_rad)   # Horizontal velocity\n    v0y = v0 * math.sin(theta_rad)   # Vertical velocity\n\n    # Calculate time to reach maximum height and then fall back to ground level\n    t1 = v0y / g  # Time to reach the highest point\n    h_max = h + (v0y ** 2) / (2 * g)  # Maximum height reached\n    # Use the quadratic equation to calculate the total time of flight\n    a = g / 2\n    b = -v0y\n    c = h_max\n    # Since we're looking for the time when the arrow hits the ground, we want the positive root\n    t_total = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n    # Calculate the final vertical velocity right before hitting the ground\n    vfy = v0y - g * t_total  # Final vertical velocity\n\n    # The horizontal velocity remains constant: vfx = v0x\n    vfx = v0x\n\n    # Calculate the final velocity magnitude using Pythagorean theorem\n    vf = math.sqrt(vfx ** 2 + vfy ** 2)\n\n    return vf\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    rate = symbols('r')\n\n    equation = Eq(principal * (1 + rate) ** years, amount)\n    interest_rate = solve(equation, rate)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mangoes_price, lychees_price = symbols('mangoes_price lychees_price')\n    \n    equation1 = Eq(lychees_price, 2 * mangoes_price - 6)\n    equation2 = Eq(24 * mangoes_price + 20 * lychees_price, 1160)\n\n    solutions = solve((equation1, equation2), (mangoes_price, lychees_price))\n\n    return solutions[lychees_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percentage = 60 / 100\n    fraction = 2 / 5\n    whole_number = 75\n\n    ans = percentage * fraction * whole_number\n\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    total_weight_3_boxes = (total_weight_5_boxes / 5) * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Ways to arrange 4 comics among themselves\n    comics_perms = factorial(4)\n    # Ways to arrange 6 fiction books among themselves\n    fiction_perms = factorial(6)\n    # Ways to arrange 2 groups (1 group of comics, 1 group of fictions) on the shelf\n    group_perms = factorial(2)\n    \n    # Total ways is product of possibilities of all individual arrangements\n    total_ways = comics_perms * fiction_perms * group_perms\n    \n    return total_ways\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let x be the number of questions Dora answered correctly\n    # Let y be the number of questions Dora got wrong or skipped\n    # Total questions is 10, so x + y = 10 for Dora\n    # Dora's points are 10x - 5y\n    # Justin's points are 10x - 5y + 15 (Justin got 15 more points than Dora)\n    # Together they got 155 points, so 2*(10x - 5y) + 15 = 155\n    # Simplify the equation: 20x - 10y + 15 = 155\n    # Solve for x: 20x - 10y = 140\n    # Since x + y = 10, we can substitute y = 10 - x into the equation\n    # 20x - 10(10 - x) = 140\n    # 20x - 100 + 10x = 140\n    # 30x = 240\n    # x = 240 / 30\n    # x = 8\n    # Dora answered 8 questions correctly\n\n    x = (155 - 15) // 20\n    return x\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let the total number of candies sold by Class A be A,\n    # and the total number of candies sold by Class B be B.\n    # Since there are 3 groups in Class A and they sold 12 candies on average,\n    # A = 3 * 12\n\n    A = 3 * 12\n\n    # Let the total number of groups in both classes be G (3 groups from Class A and 4 from Class B, so G = 3 + 4 = 7).\n    # The average number of candies sold by these G groups is 8.\n\n    G = 3 + 4   # Total groups from both classes\n    average_total = 8\n\n    # Total candies sold by both classes is then G * average_total:\n    total_candies = G * average_total\n\n    # We're given that the total candies sold by just Class A is A.\n    # Therefore, the total candies sold by Class B is (total_candies - A):\n\n    B = total_candies - A\n\n    # The average number of candies sold by each group in Class B is then B divided by the number of groups in Class B (which is 4):\n\n    average_B = B / 4\n\n    return average_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n    combined_time = 10  # time to finish when working together\n    lee_individual_time = 6  # Lee's individual working hours before Nancy starts\n    nancy_individual_work_time = 20  # Nancy's individual working hours after Lee\n\n    # Equation 1: The sum of their working rates equals the reciprocal of their combined working time\n    equation1 = Eq(lee_rate + nancy_rate, 1 / combined_time)\n\n    # Equation 2: Lee works for 6 hours alone and then Nancy works for 20 hours on the remaining part\n    equation2 = Eq(lee_rate * lee_individual_time + nancy_rate * nancy_individual_work_time, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    nancy_time_to_finish = 1 / solutions[nancy_rate]\n\n    return float(nancy_time_to_finish)\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    def comb(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    def perm(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # There are 5 places to put Ds between Ss, considering both ends: S_D_S_D_S_D_S_D_S\n    # Choosing 4 places out of these 5 to place all Ds\n    places_to_put_dancing = comb(5, 4)\n    \n    # Permutations of singing performances\n    perm_singing = perm(6, 6)\n\n    # Since all Ds are distinct, we also need to find the permutations of dancing performances\n    perm_dancing = perm(4, 4)\n    \n    # Calculate the total number of ways\n    total_ways = places_to_put_dancing * perm_singing * perm_dancing\n\n    return total_ways\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string = 250\n    used_string = 180\n    remaining_string = total_string - used_string\n    pieces = 10\n\n    length_per_piece = remaining_string / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans if ans < 20 else None\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    result = 45 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_doughnuts = 2\n    \n    combinations = comb(num_flavours, num_doughnuts)\n\n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(6, 9), 18)\n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    people = 10\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, solve\n\n    white, milk, dark = symbols('white milk dark')\n    \n    # Set up the equations based on the problem statement\n    ratio_eq = (white/3 - milk/7, white/3 - dark/5)\n    dark_eq = dark - white - 8\n\n    # Solve the equations\n    solutions = solve((ratio_eq, dark_eq), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of students be denoted by 'x'\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x / 4 + 3 + (x - (x / 4 + 3)) / 3 - 3 + 25, x)\n\n    # Solve for 'x'\n    total_students = solve(equation, x)[0]\n\n    return total_students\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to add.\n    red_balls = 5\n    green_balls = 10\n    # We want the probability of getting a green ball to be 1/3.\n    # Probability = number of green balls / total number of balls\n    # (green_balls) / (red_balls + green_balls + x) = 1/3\n    # 3 * green_balls = red_balls + green_balls + x\n    # x = 3 * green_balls - red_balls - green_balls\n    x = (3 * green_balls) - red_balls - green_balls\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    outer_square_side = 6\n    inner_square_side = 3\n    return (outer_square_side // inner_square_side) ** 2\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for number in range(10, 100):  # Start from 10 as it is the smallest two-digit number\n        if number % 3 == 0 and number % 7 == 0:  # Check divisibility by 3 and 7\n            return number  # Return the first number that meets the condition\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # Avril spends 5p which is one-quarter of her money.\n    # So, if 5p is one-quarter, then the whole amount is 4 times 5p.\n    total_money = 5 * 4\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sam and Peter's original amount of stickers\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_to_peter = sam * 0.20\n\n    # Peter gave 25% of the stickers he had after receiving Sam’s stickers\n    peter_to_sam = (peter + sam_to_peter) * 0.25\n\n    # Define the new amounts for Sam and Peter after the exchange\n    new_sam = sam - sam_to_peter + peter_to_sam\n    new_peter = peter + sam_to_peter - peter_to_sam\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(new_sam - new_peter, 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    ones_digit_32_power_33 = (32 ** 33) % 10\n    ones_digit_22_power_29 = (22 ** 29) % 10\n    \n    ans = (ones_digit_32_power_33 - ones_digit_22_power_29) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    max_pages = 1\n    while count_sixes(max_pages) < 18:\n        max_pages += 1\n    max_pages -= 1  # Subtract 1 because we went one page too far\n\n    return max_pages\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given the ratio 4:9 is equivalent to x:81\n    # We can cross multiply to find the value of x\n    x = 4 * 81 / 9\n    \n    return int(x)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    up_after_two_jumps = (2 * jump_up) - slide_down\n    \n    # Calculate the height reached before the final jump\n    height_before_last_jump = total_height - jump_up\n    \n    # Jumps needed to reach or exceed the height before the last jump\n    jumps_needed_before_final = (height_before_last_jump + up_after_two_jumps - 1) // up_after_two_jumps * 2\n    \n    # One final jump to reach the top\n    total_jumps = jumps_needed_before_final + 1\n    \n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2*i)**3 / (2*i * (2*i+1) * (2*i+2)) for i in range(1, 1007)) + 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for number in range(1, 100):\n        if number ** 0.5 == int(number ** 0.5) and (number + 1) % 5 == 0 and number % 16 == 0:\n            return number\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    # This is an arithmetic sequence where the common difference is the change between each term\n    common_difference = 21 - 15  # calculating the common difference which is 6\n    \n    # Getting the last number in the sequence which is 39 and adding the common difference to it\n    next_number = 39 + common_difference  # This will give us the next number in the sequence\n    \n    return next_number\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_mark = -2\n    \n    # Let x be the number of correct answers\n    # The number of incorrect answers, therefore, is total_questions - x\n    \n    # Based on the scoring rule: correct_mark * x + wrong_mark * (total_questions - x) = total_score\n    # Substitute the given numbers: 4 * x - 2 * (80 - x) = 152\n    # Simplify: 4 * x - 160 + 2 * x = 152\n    # Solve for x: 6 * x = 152 + 160\n    # x = 312 / 6\n    # x = 52\n    x = (152 + (wrong_mark * total_questions)) / (correct_mark - wrong_mark)\n    \n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Each person must get an equal part, thus we look for the highest common divisor\n    # between the number of people and the number of sausages\n    from math import gcd\n    # Calculate the greatest common divisor between sausages and people\n    divisor = gcd(16, 24)\n    # The least number of cuts is the number of people divided by gcd minus 1\n    # because the last piece doesn't require a cut\n    ans = (24 // divisor) - 1\n    return ans\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    vowel_count = 3 # A, I, O\n    consonant_count = 4 # R, N, B, W\n\n    # Total permutations of the word RAINBOW\n    total_perms = factorial(total_letters)\n    \n    # Total permutations when vowels are together\n    # Consider the vowels as a single unit: There are (consonant_count + 1) slots for this unit\n    vowels_together = factorial(vowel_count) * factorial(consonant_count + 1)\n    \n    # Subtracting the cases where vowels are together from total permutations\n    return total_perms - vowels_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Equation 1: Wendy is twice as old as Vivien.\n    equation1 = Eq(wendy, 2 * vivien)\n\n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago.\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Calculate and return Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Define symbols for the containers' water volumes\n\n    # Create the equation based on the problem statement\n    equation1 = Eq(A, B + 350)  # A had 350 mL more water than B initially\n    equation2 = Eq(B, 2 * (A - 500))  # B has twice as much water as A after spilling 500 mL from A\n\n    # Solve the equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    a = 39\n    b = 51\n    c = 147\n    # Calculate differences\n    diff_ab = abs(a - b)\n    diff_ac = abs(a - c)\n    diff_bc = abs(b - c)\n    # Greatest common divisor of differences\n    divisor = gcd(gcd(diff_ab, diff_ac), diff_bc)\n    # Loop to find the smallest integer greater than 10\n    for i in range(divisor, 10, -1):\n        if divisor % i == 0 and i > 10:\n            return i\n    return divisor\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle_sentences = 3 * 5  # Lovelle says 3 sentences to each of the other 5 team members\n    other_members_sentences = 5 * 3  # Each of the other 5 team members says 3 sentences to Lovelle\n    total_sentences_involving_lovelle = lovelle_sentences + other_members_sentences\n\n    # 12 members did not speak to Lovelle, so they did not speak to each other as well\n    # Considering that members only speak to Lovelle or they don't speak at all,\n    # the total number of team members is Lovelle, the 5 members she spoke with, and the 12 silent members\n    total_team_members = 1 + 5 + 12\n\n    return total_team_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3/8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Initialize count variable\n    digit_count = 0\n    \n    # Add digit count for pages 1-9 (1 digit each)\n    digit_count += 1 * 9\n    \n    # Add digit count for pages 10-99 (2 digits each)\n    digit_count += 2 * (99 - 9)\n    \n    # Add digit count for pages 100-325 (3 digits each)\n    digit_count += 3 * (325 - 99)\n\n    return digit_count\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_valid_permutations(word):\n    count = 0\n    for perm in set(permutations(word)):\n        if 'TT' not in ''.join(perm):\n            count += 1\n    return count\n\ndef solution():\n    word = 'STATISTIC'\n    total_perms = factorial(len(word))\n    perms_with_two_t_together = factorial(len(word)-1)\n    count_t = word.count('T')\n    count_s = word.count('S')\n    count_i = word.count('I')\n    count_c = word.count('C')\n    count_a = word.count('A')\n\n    # Total possible permutations\n    total_perms = total_perms // (factorial(count_t) * factorial(count_s) * factorial(count_i) * factorial(count_c) * factorial(count_a))\n\n    # Subtract permutations where T's are together using the inclusion-exclusion principle\n    ans = total_perms - perms_with_two_t_together * count_valid_permutations('STATISIC')\n    \n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for base in range(1, 1000):  # Assuming a reasonable upper limit\n        remaining_after_music = base - 2  # Ate 2 during music lesson\n        shared_at_break = remaining_after_music / 3\n        if not shared_at_break.is_integer():\n            continue  # If not integer, not a valid scenario\n        remaining_after_break = 2 * remaining_after_music / 3\n        if remaining_after_break % 4 != 0:\n            continue  # If not divisible by 4, not a valid scenario\n        # If reaches this point, base is a valid number of fruit gums\n        return base\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_per_hour = 50\n\n    hours_needed = total_pieces / average_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah_before, mark = symbols('sarah_before mark')\n    \n    equation1 = Eq(sarah_before, mark + 20)\n    equation2 = Eq(sarah_before + 16, 3 * mark)\n    \n    solutions = solve((equation1, equation2), (sarah_before, mark))\n    \n    return solutions[sarah_before]\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) / 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst case scenario is when each attempt is wrong until the very last possibilities.\n    # At that point, for the first chest, the explorer has tried all 9 keys,\n    # for the second chest, the explorer has tried the remaining 8 keys,\n    # for the third chest, the explorer has tried the remaining 7 keys,\n    # for the fourth chest, the explorer has no choice but to try the last remaining 6 keys.\n    # Sum all the attempts\n    attempts = 9 + 8 + 7 + 6\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern_diffs = [3445 - 2945, 3245 - 3445, 3745 - 3245]\n    next_diff = pattern_diffs[-1] + (pattern_diffs[1] - pattern_diffs[0])\n    missing_number = 3745 + next_diff\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    # Formula for the sum of squares of the first n odd numbers is n * (2n - 1) * (2n + 1) / 3\n    n = (25 + 1) // 2  # There are (25 + 1) // 2 odd numbers from 1 to 25\n    sum_squares = n * (2 * n - 1) * (2 * n + 1) / 3\n    return int(sum_squares)\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n\n    return h_value[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_amount = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, equal_amount), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w represent the number of women and m represent the number of men\n    w, m = symbols('w m')\n\n    # Equation representing 4 times as many women as men\n    equation1 = Eq(w, 4 * m)\n\n    # Equation representing the total number of cupcakes eaten\n    equation2 = Eq(2 * w + 5 * m, 182)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # Number of gaps between the coins is one less than the number of coins\n    num_gaps = 11 - 1\n    # Diameter of each coin\n    diameter = 1.85\n    # The total length of the row of coins is the sum of the diameters of all coins \n    # plus the gaps between them, which is the diameter of 10 coins\n    total_length = (11 * diameter) - (num_gaps * (diameter - diameter))\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n    \n    # Using formula for the sum of an arithmetic sequence: n/2 * (2*a1 + (n-1)*d)\n    sum_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number_to_round = 5345\n    rounded_number = round(number_to_round, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return numerator\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12*(15-9)+24//(10-6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    # The number of arrangements around a circle is given by (n-1)!\n    # since we can fix one person's place and rotate the remaining (n-1)\n    ans = factorial(7)\n\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    difference = night_temp - morning_temp\n    return difference\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    price_per_book = 13\n    books_first_day = 89\n    books_second_day = 11\n    total_cost = (books_first_day + books_second_day) * price_per_book\n    \n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    n = 8  # Number of terms\n    mid_term = n // 2  # Middle term index for splitting into two parts\n    sum_diff = 32  # Given sum difference between first and last four terms\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n    \n    # Sum of an AP (first n terms): n/2 * (2*a + (n-1)*d)\n    eq1 = Eq((mid_term / 2) * (2 * a + (mid_term - 1) * d), ((mid_term / 2) * (2 * a + (n - 1) * d + 2 * a + (n - mid_term - 1) * d)) / 2 - sum_diff)\n    \n    # Solve for d\n    sol = solve(eq1, d)\n    return sol[d]\n    \nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_index = 8  # As we already have 7 numbers (1^2, 2^2, ..., 7^2)\n    next_number = next_index ** 2  # The next number is the square of the next index\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    total_pens = 23 * 42\n    return total_pens\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of ants in Jerome's kitchen\n    x = symbols('x')\n    \n    # Jerome swept 3/4 of the ants into his neighbour's house\n    remaining_ants_after_sweep = x - (3/4) * x\n    \n    # 2/5 of the remaining ants ran out of the kitchen in fear\n    remaining_ants_after_run = remaining_ants_after_sweep - (2/5) * remaining_ants_after_sweep\n    \n    # 185 hungry ants crawled into the kitchen afterwards\n    final_ants = remaining_ants_after_run + 185\n    \n    # In the end, the number of ants was twice the number of ants at first\n    equation = Eq(final_ants, 2 * x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def get_next_number(current):\n        # Generate the next number based on the rule provided\n        next_number = (current * 2) + 4\n        # Remove the hundreds digit if the number is bigger than 100\n        if next_number >= 100:\n            next_number %= 100\n        return next_number\n    \n    current_number = 1\n    # Generate the sequence until we reach the 2022nd number\n    for _ in range(2021):\n        current_number = get_next_number(current_number)\n    \n    # The result is the current number after 2022 iterations\n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    red_flash_rate = 4\n    green_flash_rate = 6\n    total_minutes = 60\n    \n    # Least Common Multiple (LCM) will give us the interval in minutes at which they flash together\n    lcm = (red_flash_rate * green_flash_rate) // math.gcd(red_flash_rate, green_flash_rate)\n    \n    # Flashes per minute at which both lights flash together\n    flashes_per_minute_together = 60 // lcm\n    \n    # Total times they flash together in one hour, including the first and last time\n    ans = flashes_per_minute_together * total_minutes + 1\n    \n    return ans\n\nimport math\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange\n    \n    # Generate a list of prime numbers within a plausible range for this problem.\n    # Since 3a + 7b = 41, and both a and b are primes, we know a < 41/3 and b < 41/7.\n    primes = list(primerange(1, int(41/3) + 1))\n    \n    # Check all combinations of a and b to see which ones satisfy the equation.\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "网络故障，请重试"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    \n    solutions = solve(equation, n)\n\n    # Usually, we are looking for a positive solution in such a context\n    ans = [sol for sol in solutions if sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume = 120 / (1 - 3/5)\n    water_volume = total_volume * (3/5)\n    water_needed = water_volume * 6\n    return water_needed\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # 1 kg = 1000 grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    word = 'EARTH'\n    num_letters = len(word)\n    num_ways = factorial(num_letters)\n    \n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's original speed is 150 feet per minute\n    simon_speed = 150\n    # Simon's friend's speed is 200 feet per minute\n    friend_speed = 200\n    # They walk for 10 minutes\n    time_walked = 10\n\n    # calculate the distance Simon walked before he realized he forgot his book\n    simon_distance_initial = simon_speed * time_walked\n    # calculate the distance Simon's friend walked in the same time\n    friend_distance = friend_speed * time_walked\n\n    # Simon runs back at twice his original speed\n    simon_run_speed = 2 * simon_speed\n    # The time taken for Simon to run back to the school\n    time_run_back = simon_distance_initial / simon_run_speed\n\n    # Two actions are taking place simultaneously:\n    # 1. Simon running back to the school at twice his speed\n    # 2. His friend continues to walk away from the school at her original speed\n\n    # calculate the additional distance his friend walks while Simon runs back to school\n    additional_friend_distance = friend_speed * time_run_back\n\n    # Since Simon returns to the school, the total distance between Simon and his friend is:\n    total_friend_distance = friend_distance + additional_friend_distance\n\n    return total_friend_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 6):\n        s, e, n, d, m, o, r, y = p\n        send = int(s+e+n+d)\n        more = int(m+o+r+e)\n        money = int(m+o+n+e+y)\n        if '0' not in (s, m) and send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = 2 + 2 + 2  # Total identical items of bells, stars and red balls\n    total_decorations = total_bells_stars_balls + 1  # Including the green ball\n\n    # Total arrangements (permute all items as if they are different)\n    total_arrangements = factorial(total_decorations)\n\n    # Divide by factorial of the number of identical items for bells, stars, and red balls\n    arrangements_with_identicals = total_arrangements // (factorial(2) ** 3)\n\n    return arrangements_with_identicals\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Time taken by each person\n    eddie = 1\n    jack = 2\n    rose = 5\n    mary = 10\n\n    # Strategy:\n    # 1. Eddie and Jack cross with the flashlight (2 minutes), Eddie goes back (1 minute).\n    # 2. Rose and Mary cross with the flashlight (10 minutes), Jack goes back (2 minutes).\n    # 3. Eddie and Jack cross again with the flashlight (2 minutes).\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n\n    fastest_crossing_time = eddie + (jack * 2) + rose + mary\n\n    return fastest_crossing_time - (jack + rose)\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # litres\n    container_fraction = 0.25\n    cup_volume_ml = 150  # ml\n    number_of_cups = 14\n\n    container_volume = initial_volume * container_fraction\n    cups_total_volume_litres = (cup_volume_ml * number_of_cups) / 1000  # convert ml to litres\n\n    remaining_water = initial_volume - container_volume - cups_total_volume_litres\n\n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # The number of ways to arrange n people in n seats when no one can sit in their own seat is a derangement.\n    # We use a recursive formula: D(n) = (n - 1) * (D(n - 1) + D(n - 2)), with D(1) = 0, D(2) = 1.\n    \n    def derangement(n):\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        derangement_n_minus_1 = 1  # D(2)\n        derangement_n_minus_2 = 0  # D(1)\n        for i in range(3, n + 1):\n            current_derangement = (i - 1) * (derangement_n_minus_1 + derangement_n_minus_2)\n            derangement_n_minus_2 = derangement_n_minus_1\n            derangement_n_minus_1 = current_derangement\n        return current_derangement\n\n    return derangement(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # The divisibility rule for 99 is that the number must be divisible by both 9 and 11.\n    # For divisibility by 9, the sum of the digits must be divisible by 9.\n    # For divisibility by 11, the difference between the sum of digits in odd positions and the sum of digits in even positions must be divisible by 11.\n    for digit1 in range(10):\n        for digit2 in range(10):\n            if (2 + digit1 + digit2 + 3 + 3 + 5) % 9 == 0:  # Divisibility rule for 9\n                # Applying the 11-divisibility rule to our specific case:\n                if (2 + digit2 + 3) - (digit1 + 3 + 5) in [-11, 0, 11]:  # Divisibility rule for 11\n                    ans = int(f\"2{digit1}{digit2}335\")\n                    return ans\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 7 * (100 // 7 - 1)\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's denote the number of pages Anny writes per day as \"x\", and the total number of pages as \"total\".\n    x, total = symbols('x total')\n\n    # According to the problem:\n    # If she writes at the original rate, the number of pages she writes per day times 8 (days) equals the total pages.\n    equation1 = x * 8 - total\n\n    # If she writes 2 more pages per day, she would finish two days earlier (6 days).\n    equation2 = (x + 2) * 6 - total\n\n    # Now, we have two equations and two unknowns.\n    # We can solve this system of equations to find the value of \"total\".\n    solutions = solve((equation1, equation2), (x, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate per minute\n    pip_rate = 5 / 20\n    # Bud's rate per minute\n    bud_rate = 3 / 15\n    \n    # Total time baking\n    total_time = 40\n    \n    # Total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_time\n    # Total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_time\n    \n    # Total loaves baked by both\n    total_loaves = pip_loaves + bud_loaves\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Let x be the original price\n    # After an increase of 10%, the house is worth £11,000\n    # Therefore, x * 110% = £11,000\n    original_price_after_increase = 11000\n    increase_percentage = 1.10  # 110% or 1.10 times the original\n\n    # Calculate the original price before the increase\n    original_price = original_price_after_increase / increase_percentage\n\n    # Now the house loses 10% of its value after the increase\n    decrease_percentage = 0.90  # 90% or 0.90 times the price after increase\n    current_price = original_price_after_increase * decrease_percentage\n\n    # Calculate profit or loss\n    profit_or_loss = current_price - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To ensure a pair of white socks, Yohan might have to take all red and black socks first.\n    # Number of red socks maximum to be taken is 10\n    # Number of black socks maximum to be taken is 10\n    # He then takes 2 white socks to guarantee a pair of white socks\n    max_socks_without_white_pair = 10 + 10 + 1\n  \n    return max_socks_without_white_pair\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = 12 * a / 4 + 2 * a * 5\n    simplified_expression = simplify(expression)\n    return simplified_expression\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    ans = simplify(expr)\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the initial number of cookies\n    cookies_initial = symbols('cookies_initial')\n\n    # Equation representing the number of cookies left after eating them\n    cookies_left_eq = Eq(cookies_initial - (3/8)*cookies_initial - (1/6)*cookies_initial, 33)\n\n    # Solve for the initial number of cookies\n    solution = solve(cookies_left_eq, cookies_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i+2))\n    sequence.sort()\n    mid_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[mid_index - 1] + sequence[mid_index]) / 2\n    else:\n        median = sequence[mid_index]\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemma_number = symbols('jemma_number')\n\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    solution = solve(equation, jemma_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # year is arbitrary, we only care about the day of the week\n    end_date = datetime(2020, 6, 7)\n    one_day = timedelta(days=1)\n\n    sundays_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 represents Sunday\n            sundays_count += 1\n        current_date += one_day\n\n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of red balls and w be the initial number of white balls\n    r, w, red_pip, white_bud = symbols('r w red_pip white_bud')\n    \n    # Initial ratio of red to white marbles: 3r = 2w\n    initial_ratio = Eq(3 * w, 2 * r)\n    \n    # After Pip adds red balls, the ratio becomes 5:3\n    pip_ratio = Eq((r + red_pip) / w, 5/3)\n    \n    # After Bud adds white balls, the ratio becomes 5:4, and Bud adds 100 more balls than Pip\n    bud_ratio = Eq((r + red_pip) / (w + white_bud), 5/4)\n    bud_added_more = Eq(white_bud, red_pip + 100)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, pip_ratio, bud_ratio, bud_added_more), (r, w, red_pip, white_bud))\n    \n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    num_buckets = barrel_capacity // bucket_capacity\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1/4\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    packets = 25\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for k in range(10):\n        number = int(f'5{k}27{k}')\n        if number % 3 == 0 and number % 4 == 0:\n            return k\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n\n    # Initial ratio: 4x cookies, 3x brownies\n    # Final ratio after giving away 6 brownies: 12y cookies, (3x - 6) brownies\n    # And we know that cookies didn't change so 4x = 12y\n    equation1 = Eq(4*cookies, 3*brownies)\n    equation2 = Eq(12*(cookies/4), brownies - 6)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    return solutions[cookies] + solutions[brownies]\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Assume the work done by one company in one day for building 900m expressway\n    work_per_company_per_day = 900 / (4 * 5)\n\n    # Total work for building 5400m by 6 companies\n    total_work = 5400\n\n    # Work done by one company in one day for building 5400m expressway\n    work_per_six_companies_per_day = work_per_company_per_day * 6\n\n    # Total days needed by 6 companies\n    days_needed = total_work / work_per_six_companies_per_day\n    \n    return days_needed\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Initial purchase: -$10\n    # First sale: +$20\n    # Second purchase: -$30\n    # Second sale: +$40\n    # Total earning: 20 - 10 + 40 - 30\n    earnings = 20 - 10 + 40 - 30\n    return earnings\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam's purchase\n    adam_spent = 93\n    adam_tickets = 6\n    \n    # Calculate the cost per ticket\n    ticket_cost = adam_spent / adam_tickets\n    \n    # Claire's purchase\n    claire_spent = 124\n    \n    # Calculate the number of tickets Claire buys\n    claire_tickets = claire_spent // ticket_cost\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25 + (10 - 1) * 3\n    first_term = nth_term - (10 - 1) * 3\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # The sum of all cards from 1 to 8 is:\n    total_sum = sum(range(1, 9))\n    \n    # Total sum of all cards is 36.\n    # If Player One has a sum of 23, the sum of Player Two's cards is:\n    player_two_sum = total_sum - 23\n    \n    # The maximum value for a single card is 8, let's check if Player Two can have it.\n    # Let's try to allocate the remaining highest cards to Player Two and see if the sum matches.\n    for highest_card in range(8, 0, -1):\n        sum_other_cards = player_two_sum - highest_card\n        remaining_cards = list(range(1, 9))\n        remaining_cards.remove(highest_card)  # remove Player Two's highest card from remaining cards\n        \n        # Iterate over combinations of three cards from the remaining cards.\n        for i in remaining_cards:\n            for j in remaining_cards:\n                for k in remaining_cards:\n                    if i != j and i != k and j != k and (i + j + k) == sum_other_cards:\n                        return highest_card  # The highest card that allows the sum to match.\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, 2 shoes per pair\n    time_per_shoe = 2  # minutes per shoe\n    cobblers = 2  # number of cobblers\n\n    # Each cobbler works simultaneously, so the time is divided\n    total_time = (total_shoes * time_per_shoe) / cobblers\n\n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = -(-total_cookies // cookies_per_packet)  # Ceiling division\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    # Notice that 2019 is a common factor in the numerator.\n    # We factor it out.\n    # Then we see that the denominator can be rewritten as (2019*2020 - 2019 + 2018).\n    # The fraction can thus be simplified because (2019 + 2018) cancel out in the numerator and the denominator.\n    # So the answer is just 1/2019.\n    ans = 1 / 2019\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    total_score = 168\n\n    # Assume all attempted questions are correct, then deduct for each wrong answer\n    correct_answers = total_questions - not_attempted  # All attempted questions are initially considered correct\n    wrong_answers = 0  # Start assuming she didn't answer any question wrongly\n\n    # Calculate the initial score assuming all attempted answers are correct\n    initial_correct_score = 4 * correct_answers\n\n    # While the calculated score is not equal to the total score, adjust the counts of correct and wrong answers\n    while initial_correct_score - wrong_answers * 5 != total_score:  # Subtract 5 for each wrong answer (4 points lost + 1 point deducted)\n        correct_answers -= 1  # One less correct answer\n        wrong_answers += 1  # One more wrong answer\n        initial_correct_score = 4 * correct_answers  # recalculate the score with new correct answer count\n\n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    num_handshakes = comb(num_players, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n\n    dumplings_to_give = luna_dumplings - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # Let x represent the original number\n    two_thirds_of_number = 24\n    # Since two-thirds of the number is 24, the whole number is (24 / (2/3))\n    original_number = two_thirds_of_number * (3/2)\n    # Now, three-quarters of the original number would be (3/4) * original_number\n    three_quarters_of_number = (3/4) * original_number\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_of_odds = sum(range(1, 20, 2))\n    return sum_of_odds\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        B, D, E, C = p\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        if CBCD + CDBC == BDEC and C != 0:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    # Finding LCM of pack sizes to know the number of markers in each complete set\n    from math import lcm\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Calculate the number of sets needed to reach at least 1000 markers\n    num_sets = -(-1000 // pack_lcm)  # Ceil division to get the minimum number of complete sets\n    \n    # Calculate the minimum number of markers Mr Manson has to purchase\n    min_markers = num_sets * pack_lcm\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Total letters in 'CHALLENGE' when vowels AEE are considered one unit: 7 (CHLLNG) + 1 (AEE)\n    total_letters = 7 + 1\n    # Factorial of total letters\n    arrangements_total = factorial(total_letters)\n    \n    # Arrangements for the vowels AEE among themselves\n    vowels_arrangements = factorial(3) // factorial(2)  # 'E' occurs twice, hence factorial(2) for repeats\n\n    # Final answer: arrangements of total units * arrangements of vowels AEE\n    return arrangements_total * vowels_arrangements\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 3 * 450\n    apr_to_jul = 4 * 350\n    aug_to_oct = 1250\n    nov_to_dec = 2 * 400\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_spend = total_spend / 12\n    return average_spend\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    total_cakes = 4 + 1 + 5\n    average_price = total_sales / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    least_dividend = float('inf')\n    for divisor in range(1, remainder):\n        quotient = divisor\n        dividend = divisor * quotient + remainder\n        if dividend < least_dividend:\n            least_dividend = dividend\n    return least_dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n_terms = 12\n\n    nth_term = first_term + (n_terms - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_join_per_minute = 10\n    visitors_check_in_per_entrance = 25\n\n    # Calculate the total number of visitors in the line after 16 minutes\n    total_visitors = visitors_join_per_minute * 16\n\n    # Calculate the check-in rate when there are 2 entrances\n    check_in_rate_with_2_entrances = 2 * visitors_check_in_per_entrance\n\n    # Calculate the time after which there will be no one waiting in the line with 2 entrances\n    time_with_2_entrances = total_visitors / check_in_rate_with_2_entrances\n\n    return time_with_2_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_roots = [i**3 for i in range(1, int((245)**(1/3))+1)]\n    for cube in cube_roots:\n        if (245 * cube) % cube == 0:\n            p = (245 * cube) // cube\n            if int(p**(1/3))**3 == p:\n                return cube\n    return None\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days_needed = total_pages / pages_per_day\n    return days_needed\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, (4/3) * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    total = cars + bikes + lorries\n\n    for lorry_number in range(1, 100):\n        solutions = solve((equation1, equation2.subs(lorries, lorry_number)), (cars, bikes, lorries))\n        if solutions and solutions[cars].is_integer and solutions[bikes].is_integer and solutions[lorries].is_integer:\n            total_vehicles = int(solutions[cars]) + int(solutions[bikes]) + lorry_number\n            if total_vehicles % 2 == 0 and total_vehicles < 100:\n                return int(solutions[cars]), int(solutions[bikes]), lorry_number\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    total_money = 100\n    spent_on_book = total_money * 0.10\n    remaining_after_book = total_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 is 0.3333... recurring\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    effective_climb = climb_distance - slide_distance\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number_after_double = final_number - added_number\n    original_number = original_number_after_double / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_score = sum(scores)\n    num_games = len(scores)\n    mean_score = total_score / num_games\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let o be the original number of oranges and l be the number of lemons\n    o, l = symbols('o l')\n    \n    # Original ratio: o/l = 3/5 => 5o = 3l\n    # New ratio after selling 48 oranges: (o - 48)/l = 1/2 => 2(o - 48) = l\n    equation1 = Eq(5*o, 3*l)\n    equation2 = Eq(2*(o - 48), l)\n    \n    # Solve for o and l\n    solutions = solve((equation1, equation2), (o, l))\n    \n    return solutions[l]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are three types of fruits and students can choose from one, two, or all three types.\n    # Possible combinations for choosing fruits:\n    # 1 fruit: 3 combinations (apple, pear, or cherry)\n    # 2 fruits: 3 combinations (apple+pear, apple+cherry, pear+cherry)\n    # All 3 fruits: 1 combination (apple+pear+cherry)\n    \n    # Total possible unique combinations a student can choose:\n    total_combinations = 3 + 3 + 1\n\n    # By Pigeonhole Principle, with one more than the total combinations,\n    # there will be at least two students that choose the same combination of fruits.\n    students_needed = total_combinations + 1\n\n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2  # chicken or beef\n    sides = 3  # french fries, meshed potato, or broccoli\n    drinks = 5  # sprite, coke, fanta, lemonade, or iced tea\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n    initial_money = spent / fraction_spent\n    return initial_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Define the number of legs for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n    cat_legs = 4\n    \n    # Define the number of each animal excluding cats\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    \n    # Calculate the total number of legs excluding cats\n    total_legs_excluding_cats = (ducks * duck_legs) + (parrots * parrot_legs) + (rabbit * rabbit_legs)\n    \n    # The total number of legs including cats is given as 32\n    # Find the number of legs contributed by the cats\n    cat_legs_total = 32 - total_legs_excluding_cats\n    \n    # Each cat has 4 legs, so divide the total cat legs by 4 to find the number of cats\n    cats = cat_legs_total / cat_legs\n    \n    return int(cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    students_A = 45\n    students_B = 75\n    students_C = 210\n\n    ans = gcd(gcd(students_A, students_B), students_C)\n    \n    return ans\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Judy and her father's ages\n    judy, father = symbols('judy father')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(father, judy + 33)            # Father is 33 years older than Judy\n    equation2 = Eq(judy + father, 63)            # The sum of their ages is 63\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (judy, father))\n\n    # Extract Judy and her father's current ages\n    judy_age_now = ages[judy]\n    father_age_now = ages[father]\n\n    # Assume x years ago Judy's father's age was four times Judy's age\n    x = symbols('x')\n    # Create an equation based on x years ago\n    equation_x = Eq(father_age_now - x, 4 * (judy_age_now - x))\n\n    # Solve the equation for x\n    x_years_ago = solve(equation_x, x)\n\n    return x_years_ago[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(x-1), 9-2*(x+1))\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote yb as younger brother's current age and ob as older brother's current age\n    yb, ob = symbols('yb ob')\n\n    # When the older brother was as old as the younger brother is now, the younger brother was 12\n    # So the difference in age between them is ob - yb\n    equation1 = Eq(yb - 12, ob - yb)\n\n    # When the younger brother becomes as old as the older brother is now, the older brother will be 27\n    equation2 = Eq(ob + (ob - yb), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (yb, ob))\n\n    return solutions[ob]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from sympy import lcm\n\n    # Find the least common multiple of 6, 8, 9 and 15\n    least_common_mult = lcm(6, 8, 9, 15)\n\n    # We need to find the smallest multiple of the LCM that is greater than or equal to 1000\n    multiplier = 1000 // least_common_mult\n    if least_common_mult * multiplier < 1000:\n        multiplier += 1\n\n    return least_common_mult * multiplier\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Set up a variable representing the number of rooms\n    rooms = symbols('rooms')\n    \n    # If there are 4 people in each room and 40 students don't have dormitories, then:\n    # 4 * rooms + 40 = total number of students\n    # If there are 6 people in each room and 24 beds will be vacated, then:\n    # 6 * (rooms - 1) = total number of students (we subtract 1 room because it's not fully occupied)\n    \n    # Setting up the equations\n    equation1 = Eq(4 * rooms + 40, 6 * (rooms - 4))\n    \n    # Solving the equation for the number of rooms\n    solution = solve(equation1, (rooms))\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n    \n    solution_values = solve((equation1, equation2), (A, B))\n    \n    return solution_values[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values in the problem\n    a10 = 23  # 10th term\n    a15 = 38  # 15th term\n    n = 102  # term to find\n\n    # Calculate the common difference\n    # a15 = a10 + (15 - 10) * d -> d = (a15 - a10) / (15 - 10)\n    d = (a15 - a10) / (15 - 10)\n\n    # Apply arithmetic sequence formula to find the nth term: an = a1 + (n - 1) * d\n    # Here, we need to find a1 first using a10: a1 = a10 - (10 - 1) * d\n    a1 = a10 - (10 - 1) * d\n\n    # Now find the 102nd term\n    an = a1 + (n - 1) * d\n\n    return int(an)\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3/5\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n    years_until_jane_is_15 = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(100):\n        if (13 - x) ** 2 == 25:\n            return x\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cp = symbols('cp')  # cost price\n    # 20% above the cost price\n    marked_price = cp + 0.20 * cp\n    # eventually sold at 80% of the selling price\n    selling_price = 0.80 * marked_price\n    # the loss was $40, so selling price is cp - 40\n    equation = Eq(selling_price, cp - 40)\n    \n    cost_price = solve(equation, cp)[0]\n    return cost_price\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = (7 + 3) * 11\n    part2 = 7 + (3 * 11)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    rate_x = 1 / 10  # Tap X can fill the tank in 10 minutes\n    rate_xy = 1 / 6  # Both taps together can fill the tank in 6 minutes\n    rate_y = rate_xy - rate_x  # Calculate the rate at which Tap Y fills the tank\n\n    time_y = 1 / rate_y  # Calculate the time for Tap Y to fill the tank alone\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    ans = (like_apples + like_strawberries - like_both) + like_neither\n    return ans\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Xuanrui and Yaokuan's markers\n    x, y = symbols('x y')\n\n    # Equation 1: Xuanrui and Yaokuan had $708 markers altogether\n    equation1 = Eq(x + y, 708)\n\n    # Equation 2: After transactions, they had an equal number of markers left\n    # Xuanrui gave away 532 markers, Yaokuan sold 3/7 of his markers\n    equation2 = Eq(x - 532, y - (3/7)*y)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Xuanrui's number of markers originally\n    xuanrui_markers = solutions[x]\n\n    return xuanrui_markers\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n    discount_amount = usual_price * (discount_percentage / 100)\n    final_price = usual_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Let x be the number of correct answers\n    for x in range(11): # Eddie can answer from 0 to 10 questions correctly\n        # Calculate the points from correct answers\n        correct_points = x * 6\n        # Calculate the points lost from incorrect answers (10 - x questions wrong)\n        incorrect_points = (10 - x) * (-2)\n        # Check if total points add up to 44\n        if correct_points + incorrect_points == 44:\n            return x\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([1, 2, 6, 24, 120, 720, 5040, 40320])\n    return factorial_sum % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_A = 300 * 0.20\n    sugar_B = 300 * 0.30\n    \n    # Calculate the total volume of the solution after mixing\n    total_solution = 300 + 300\n    \n    # Calculate the total amount of sugar\n    total_sugar = sugar_A + sugar_B\n    \n    # Calculate the concentration of sugar in the mixture\n    concentration = (total_sugar / total_solution) * 100 \n    \n    return concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n\n    total_marbles = 1442\n    ratio = 6\n\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, ratio * ryan)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = sum(str(i).count('4') for i in range(1, 201))\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    rate = 2.50\n    pounds = dollars / rate\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_two_dollar_notes = 175\n    \n    # Let x be the original number of $2-notes, and y be the original number of $10-notes.\n    # We know that x + y = 95 (total number of notes)\n    # When exchanging the $10-notes, each becomes 5 $2-notes, hence we have\n    # x + 5y = 175 (total number of $2-notes after exchanging)\n    \n    # Now we have two equations:\n    # x + y = 95\n    # x + 5y = 175\n    \n    # We can solve for y using these equations:\n    y = (175 - total_notes) / 4  # From the equations: 5y - y = 175 - 95 => 4y = 80\n    x = total_notes - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n\n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + gap_length\n\n    number_of_carriages = (remaining_length // carriage_total_length) + 1\n    \n    return number_of_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    ones_count = (288 // 10) + 1  # Every 10 pages, '8' appears once in the ones place\n    tens_count = (288 // 100) * 10  # Every 100 pages, '8' appears 10 times in the tens place\n    tens_count += (288 % 100) - 79 if (288 % 100) >= 80 else 0  # Additional '8' appearances if the last tens digit is an 8\n    hundreds_count = 0 # No hundreds count since the total pages are less than 800\n\n    # Correcting Bobby's mistake: he counted page 288 as one instance, but it has '8' in both tens and ones places\n    if 288 % 10 == 8 and 288 // 10 - 8 == 28:\n        overlap_count = 1\n    else:\n        overlap_count = 0\n\n    # Subtracting the overlap where '8' is both in tens and ones place for page 288\n    ans = ones_count + tens_count + hundreds_count - overlap_count\n\n    return ans\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Get the number of triangles that are equal to a diamond\n    ans = solutions[diamond] / solutions[triangle]\n\n    return ans\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    # number of questions\n    total_questions = 50\n    # points for correct and wrong answers\n    points_correct = 2\n    points_wrong = -1\n    # total points scored\n    total_scored = 82\n\n    # Shenjia's claimed number of correct answers\n    claimed_correct = 32\n    # Calculate the number of wrong answers if Shenjia's claim is correct\n    claimed_wrong = total_questions - claimed_correct\n    # Calculate the score based on the claim\n    claimed_score = (claimed_correct * points_correct) + (claimed_wrong * points_wrong)\n\n    # Check if the claimed score matches the total scored points\n    if claimed_score == total_scored:\n        return claimed_correct\n    else:\n        # Calculate correct number of answers by iterating through possible correct answers\n        for correct in range(total_questions + 1):\n            wrong = total_questions - correct\n            score = (correct * points_correct) + (wrong * points_wrong)\n            if score == total_scored:\n                return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24*x - 8) % 25 == 0:\n            y = (24*x - 8) // 25\n            if y >= 0:\n                return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # x cannot be zero since it's the first digit\n        for y in range(10):  # y can be any digit\n            A = int(f\"{x}{y}\")\n            B = int(f\"{2}{x}{y}\")\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    price_after_discount = original_price * (1 - discount_rate)\n    final_price = price_after_discount * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_1 = 5 / 2.5\n    price_per_kg_2 = 7.70 / 4\n    if price_per_kg_1 < price_per_kg_2:\n        ans = \"2.5kg for £5\"\n    else:\n        ans = \"4kg for £7.70\"\n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inv\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_number, _ = solve_congruence(*congruences)\n    return least_number\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_fourth_full = 250  # mass when jar is 1/4 full\n    mass_three_fourth_full = 350 # mass when jar is 3/4 full\n\n    # The difference between 3/4 full and 1/4 full gives the mass of half the marmite\n    mass_half_marmite = mass_three_fourth_full - mass_one_fourth_full\n\n    # Mass of the empty jar is mass with 1/4 Marmite minus the mass of 1/4 Marmite\n    mass_empty_jar = mass_one_fourth_full - (mass_half_marmite / 2)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    tree_interval = 10\n\n    # Calculate the number of trees on one side of the road, including at both ends\n    trees_per_side = (road_length // tree_interval) + 1\n\n    # Calculate the total number of trees, considering both sides of the road\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    # lcm (least common multiple) of the distances between red, blue, and green marks\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses - 1) * distance_between_buses + number_of_buses * bus_length\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistaken_operation = Eq(x / 4 - 25, 2021)\n    x_value = solve(mistaken_operation, x)[0]\n    correct_answer = 4 * x_value + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    blocks = 28\n    unit_height = height_of_28_blocks / blocks\n    height_of_42_blocks = unit_height * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for x and y\n    x, y = symbols('x y')\n\n    # Given proportional relationship\n    equation = Eq(x/5, y/3)\n\n    # Solve for y when x is 5\n    y_value_when_x_is_five = solve(equation.subs(x, 5), y)[0]\n\n    # The relationship between x and y is a direct proportional relationship\n    relationship = \"direct\"\n\n    return relationship, y_value_when_x_is_five\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discount_price = selling_price * 0.90  # 10% Christmas discount\n    profit = discount_price - cost_price  # Profit calculation\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        original_students = m**2 + 5\n        new_students = original_students + 18\n        if int(new_students**0.5) == new_students**0.5:\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let denote the sequence as: a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # Given that the fourth number is 6 and the sixth number is 15\n    # We have two equations:\n    # a + 2b = 6     (1)\n    # 3a + 5b = 15   (2)\n    # Solving these two equations gives us a and b\n    \n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    a = Symbol('a')\n    b = Symbol('b')\n\n    # Equation (1): a + 2b - 6 = 0\n    eq1 = a + 2*b - 6\n    # Equation (2): 3a + 5b - 15 = 0\n    eq2 = 3*a + 5*b - 15\n\n    # Solve the equations for a and b\n    solutions = solve((eq1, eq2), (a, b))\n    a_val = solutions[a]\n    b_val = solutions[b]\n\n    # Now using the values of a and b to find the seventh number in the sequence\n    # Seventh number would be (3a+5b) + (3a+5b) + (2a+3b)\n    seventh_number = (3*a_val + 5*b_val) + (2*a_val + 3*b_val)\n\n    return seventh_number\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # Find the greatest common divisor (gcd) between the three class sizes\n    common_gcd = gcd(gcd(class_a, class_b), class_c)\n\n    return common_gcd\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('17:00', '%H:%M')\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_sum = 3 * 25  # The original sum of all three numbers before alteration.\n    new_sum = 3 * 22  # The new sum of all three numbers after alteration.\n    difference = original_sum - new_sum  # The difference in sum after changing one number to 16.\n\n    original_number = 16 + difference  # The original number before alteration.\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 3 and i % 6 == 5:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    return (2 + 3) ** 2 + 4 * 5\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 24  # Rex answered all but one of the 25 questions\n    score_per_correct = 4\n    score_per_incorrect = -2\n    rex_score = 66\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of incorrect answers\n    # Since each correct answer gives 4 points and each incorrect answer subtracts 2,\n    # 4x - 2(total_questions - x) should be equal to Rex's score\n\n    # 4x - 2(24 - x) = 66\n    # 4x - 48 + 2x = 66\n    # 6x = 66 + 48\n    # x = 114 / 6\n    correct_answers = (rex_score + (total_questions * score_per_incorrect)) // (score_per_correct + score_per_incorrect)\n\n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables for corners, edges, and faces\n    v, e, f = symbols('v e f')\n\n    # Using Euler's formula for 3D convex polyhedra: v - e + f = 2\n    euler_formula = Eq(v - e + f, 2)\n\n    # According to the question, e = 3v - 6\n    edges_formula = Eq(e, 3*v - 6)\n\n    # Solve the equations using the two formulas\n    solutions = solve((euler_formula, edges_formula), (v, e, f))\n\n    # Since number of faces is what we want to calculate\n    ans = solutions[f]\n    \n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's sugar amount\n    david_sugar = 800 * 0.05\n    # Eugene's sugar amount\n    eugene_sugar = 200 * 0.30\n    # Felix's sugar amount\n    felix_sugar = 300 * 0.10\n\n    # Total sugar amount\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution weight\n    total_solution = 800 + 200 + 300\n\n    # Concentration of the resulting solution\n    concentration = total_sugar / total_solution\n\n    return concentration * 100  # return as percentage\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = blue_pens + black_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30  # Total volume of the new mixture in litres\n    juice_in_first_punch = 20 * 0.35  # Juice in the first punch in litres\n    juice_in_second_punch = 30 * 0.60  # Juice in the second punch in litres\n    total_juice = juice_in_first_punch + juice_in_second_punch  # Total juice in the mixture in litres\n    percent_concentration = (total_juice / total_volume) * 100  # Percent concentration of juice in the new mixture\n    return percent_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_badges = symbols('initial_badges')\n\n    # Sold 5/7 on the first day, so 2/7 remain\n    remaining_after_first_day = (2/7) * initial_badges\n    \n    # Sold 1/3 of the remaining on the second day\n    remaining_after_second_day = remaining_after_first_day - (1/3) * remaining_after_first_day\n\n    # Made an additional 354 badges\n    final_badges = remaining_after_second_day + 354\n    \n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(final_badges, 3 * initial_badges)\n\n    # Solving the equation\n    solutions = solve(equation, initial_badges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    digits = ['7']\n    min_diff = 4\n\n    # Add the smallest digit that is at most 4 away from 7\n    # To ensure the number is the smallest possible, start by adding\n    # a smaller digit to the hundreds place to the left of '7'.\n    hundreds_digit = max(0, int(digits[0]) - min_diff)\n    digits.insert(0, str(hundreds_digit))\n\n    # Again add the smallest digit that is at most 4 away from 7\n    # This time, adding it to the tens place if not filled yet, or units if tens is already 7.\n    if len(digits) < 3:\n        tens_digit = max(0, int(digits[1]) - min_diff)\n        digits.insert(1, str(tens_digit))\n    \n    # Construct the smallest number from the digits\n    smallest_number = int(''.join(digits))\n    return smallest_number\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "from itertools import permutations\n\ndef solution():\n    angel_num = \"0141705021\"\n    devil_num = \"4005220912\"\n    \n    angel_permutations = set(permutations(angel_num))\n    if tuple(devil_num) in angel_permutations:\n        return True\n    else:\n        correct_password = ''.join(min(angel_permutations))\n        return correct_password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    players = 4\n    games_per_round = players // 2\n    rounds = 0\n\n    while players > 1:\n        players = players // 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_from_A = 266\n    not_from_B = 178\n\n    only_A = total_exhibits - not_from_B\n    only_B = total_exhibits - not_from_A\n    both_A_and_B = only_A + only_B - total_exhibits\n\n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4  # Temperature at noon in degree Celsius\n    temp_drop = 10  # Temperature drop by midnight in degree Celsius\n\n    midnight_temp = noon_temp - temp_drop  # Temperature at midnight\n\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Since we want to guarantee picking one ball of each color,\n    # we must consider the worst-case scenario.\n\n    # We might pick all balls of one color first, which is the largest quantity of balls (13 green balls),\n    # then we might pick all balls of the second most populous color (10 red balls).\n    # At this step, we have picked balls of two colors.\n\n    # To guarantee picking one ball of the remaining color (blue),\n    # which is not already in our selection, we only need to pick 1 more ball.\n    # This is based on the pigeonhole principle.\n\n    worst_case = 13 + 10 + 1  # Balls of green + balls of red + 1 ball of blue\n\n    return worst_case\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for number in range(200, 301):\n        if number % 6 == 3 and number % 7 == 3 and number % 11 == 5:\n            return number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, skirt = symbols('blouse skirt')\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "from sympy import primerange\n\ndef solution():\n    # Loop through available prime numbers less than 100 as a reasonable range to check A and B\n    for A in primerange(1, 100):        \n        # Check if 8A is congruent to 0 or 1 modulo 3, since B is prime and can be 3,\n        # it cannot be congruent to 2 modulo 3 or else (8A - 3B) wouldn't be the multiple of 3\n        if 8 * A % 3 in [0, 1]:\n            for B in primerange(1, 100):\n                # Avoid multiple of 3, besides 3 itself because B must be prime\n                if B == 3 or B % 3 != 0:\n                    if (8 * A - 3 * B) % 3 == 0:\n                        return A\n    return None\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    slump_percentage = 0.10\n\n    original_value = last_year_value / 1.10\n    this_year_value = last_year_value * (1 - slump_percentage)\n    profit_or_loss = this_year_value - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 3 groups of roses, 4 groups of jasmines, and 1 group of daisy\n    # The groups are distinct so we treat each group as a single entity\n    total_groups = 3 + 4 + 1 # Total groups of distinct flowers\n\n    # Number of ways to arrange these groups in a line\n    arrangements_of_groups = factorial(total_groups)\n\n    # Number of ways to arrange flowers within their own groups\n    # For roses and jasmines, since they are of different colors,\n    # each color within the group can be arranged in several ways.\n    arrangements_within_roses = factorial(3)\n    arrangements_within_jasmines = factorial(4)\n\n    # Total arrangements is the product of arranging groups and arranging within groups\n    total_arrangements = arrangements_of_groups * arrangements_within_roses * arrangements_within_jasmines\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import gcd\n\n    a = 1*2*3*4*5*6\n    b = 1*2*3*4*5*6*7*8\n\n    def get_factors(n):\n        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n\n    a_factors = get_factors(a)\n    b_factors = get_factors(b)\n    \n    # Find common factors\n    common_factors = list(filter(lambda x: a % x == 0 and b % x == 0, b_factors))\n\n    return len(common_factors)\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_total = 60\n    count = 0\n    for n in range(1, sum_total + 1):\n        if n * (n + 1) // 2 <= sum_total:\n            count = n\n        else:\n            break\n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Starting from a possible scenario where there are at least 3 pies\n    # Because if each friend received 5 custard pies, George would have 3 left\n    pies = 3\n    while True:\n        # Check if we subtract 3 pies from the total pies and divide by 5 (as each friend gets 5),\n        # we should get a whole number of friends.\n        if (pies - 3) % 5 == 0:\n            # Check if we add 2 pies to the total pies and divide by 6 (as each friend would need 6),\n            # we should also get a whole number of friends.\n            if (pies + 2) % 6 == 0:\n                return pies  # pies is the number of pies George baked\n        pies += 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 20 / 100\n    reduced_price = original_price * (1 - discount)\n\n    return reduced_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_ml_per_min = 20\n    minutes_per_hour = 60\n    ml_per_litre = 1000\n\n    leaked_ml_per_hour = leak_rate_ml_per_min * minutes_per_hour\n    leaked_litres_per_hour = leaked_ml_per_hour / ml_per_litre\n\n    return leaked_litres_per_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        s, e, _ = perm\n        if s == 0:\n            continue\n        see = s * 100 + e * 10 + e\n        eee = e * 111\n        see_plus_see = see + see\n        if see_plus_see == eee:\n            return see\n    return None\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    # Two watermelons and three honeydews cost $48\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    # Each honeydew costs twice as much as each watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Number of colors\n    colors = 3\n    \n    # To ensure at least one pair of the same color, \n    # she needs to draw one more than the number of colors.\n    socks_needed = colors + 1\n    \n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    for i in range(10):\n        if (10 - i) + (i * 3) == 16:\n            return i\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Following the pigeonhole principle, to ensure to get 2 apples of the same color,\n    # one might pick all apples of one color first.\n    # There are 4 red apples and 4 green apples.\n    # Worst case: pick all 4 apples of one color (e.g., red) without getting two of another color (green).\n    # Upon picking the 5th apple, it must be of the same color as one of the previous four (green),\n    # guaranteeing 2 apples of the same color.\n    \n    apples_to_take = 4 + 1  # 4 from one color and 1 from the other\n\n    return apples_to_take\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation = Eq(x**20 * y**15 * z**5, 243)\n    solutions = solve(equation)\n\n    # Considering 243 = 3^5, we can directly deduce x = 3, y = 3, and z = 3\n    x_val = 3\n    y_val = 3\n    z_val = 3\n\n    result = (x_val**8) * (y_val**6) * (z_val**2)\n    \n    return result\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expanding the equation\n    expanded_equation = 5 * (6 * c - 1)  # This is a symbolic representation\n    \n    # Moving all terms to one side\n    equation = expanded_equation + 35  # This is also a symbolic representation\n    \n    # Solving the equation for c where the expanded equation is 30c - 5 and adding 35 to both sides\n    c = (35 + 5) / 30\n    \n    return c\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    # Declare the variables for the price of the book and pencil box\n    book, pencil_box = symbols('book pencil_box')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solution_set = solve((equation1, equation2), (book, pencil_box))\n\n    # We are interested in the price of one pencil box\n    return solution_set[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:\n            product //= 10\n    return int(str(product)[-1])\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Initialize sequence and median\n    sequence = []\n    \n    # Build the sequence up to eight 8s\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    # Sort the sequence for finding the median\n    sequence.sort()\n    \n    # Calculate the length of the sequence\n    n = len(sequence)\n    \n    # Check if the length of the sequence is even or odd\n    if n % 2 == 0:\n        # If even, average the two middle elements\n        median = (sequence[n//2 - 1] + sequence[n//2]) / 2\n    else:\n        # If odd, take the middle element\n        median = sequence[n//2]\n    \n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_six_players = 6 * 150\n    average_height_four_players = 150 - 2\n    total_height_four_players = 4 * average_height_four_players\n    total_height_two_players = total_height_six_players - total_height_four_players\n    average_height_two_players = total_height_two_players / 2\n\n    return average_height_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    paving_per_day = 50\n    days_needed = total_length / paving_per_day\n    return int(days_needed)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # For x, since the product of 42 and x equals to the square of 42\n    # We have the equation: 42*x = 42^2\n    # Therefore, x = 42^2 / 42 = 42\n    x = 42 ** 2 // 42\n    \n    # For y, since the product of 42 and y has all factors' exponents equal to 1\n    # We need to find the number y such that 42y factors into primes with exponent 1\n    # 42 is 2 * 3 * 7, so we just need to multiply it by the missing primes up to 7 to ensure all are unique\n    # which is just 5 and the prime 1 which is not directly included but implies that we don't need other primes\n    y = 5\n\n    # The sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # Number of cattles\n    num_cattles = 8\n    # Days they eat the fodder\n    num_days = 4\n    # Fodder each cattle eats per day\n    fodder_per_day_per_cattle = 10\n\n    # Total fodder in the barn originally\n    total_fodder = num_cattles * num_days * fodder_per_day_per_cattle\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    remaining_marbles = 35\n    marbles_to_nate = 30\n    marbles_to_ollie = 26\n    marbles_given_away = marbles_to_nate + marbles_to_ollie\n    marbles_after_mark = remaining_marbles + marbles_given_away\n\n    # Calculate the original number of marbles before giving away to Mark\n    # Since the remaining is after giving 5/12 away, it means he had 7/12 left\n    original_marbles = marbles_after_mark * (12/7)\n\n    return int(original_marbles)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets for Jess (J) and Jill (K)\n    J, K = symbols('J K')\n\n    # Original ratio of Jill's sweets to Jess' sweets\n    eq1 = Eq(K, 6/5 * J)\n    # After giving away sweets, new ratio\n    eq2 = Eq(K - 8, 4/7 * (J + 8))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (J, K))\n\n    # Total number of sweets\n    total_sweets = solutions[J] + solutions[K]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # total weight of the solution in grams\n    concentration = 0.22  # sugar concentration (22%)\n\n    # since concentration = (weight of sugar) / (total weight of solution)\n    # we have weight of sugar = concentration * total weight of solution\n    sugar_weight = concentration * total_weight\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 100):\n        total_sum += sum(int(digit) for digit in str(number))\n    return total_sum\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one pie, y be the number of pies sold, and z be the number of cakes sold.\n    x, y, z = symbols('x y z')\n\n    # From the given ratios, we can set up the following equations:\n    equation1 = Eq(15*x, 7*(x+13))  # Money ratio for pies to cakes\n    equation2 = Eq(4*y, z)          # Ratio of number of pies to cakes sold\n\n    # Express money collected in terms of x, y and z\n    money_collected = Eq(1848, y*x + z*(x+13))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, money_collected), (x, y, z))\n\n    # We're interested in the number of cakes sold, which is z\n    return solutions[z]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    fraction_given = 1/4\n\n    money_given = total_money * fraction_given\n\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) == int(str(number) + '1') / 3:\n            return number\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Fred's age in years and months\n    age_years = 38\n    age_months = 6\n\n    # Get today's date\n    today = datetime.now()\n    \n    # Calculate Fred's birth year and month\n    birth_year = today.year - age_years\n    birth_month = today.month - age_months\n    \n    # Adjust the birth year and month if the month is negative\n    if birth_month <= 0:\n        birth_year -= 1\n        birth_month += 12\n    \n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the amount of money Hanson had initially\n    m = symbols('m')\n\n    # After spending 1/4 of his money and an additional $3, he has 3/4m - 3 left\n    remaining_after_cds = (3 / 4) * m - 3\n\n    # Then he spent 3/5 of the remaining money and an additional $6\n    remaining_after_batteries = (2 / 5) * remaining_after_cds - 6\n\n    # Given that he was left with $24, we set up the equation\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation for 'm'\n    initial_money = solve(equation, m)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        num = ''.join(perm)\n        if num[0] != '0' and int(num[-1]) % 2 == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    return beads[0] if beads else None\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    ans = 345 * 76\n    return ans\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Let d be the distance between the library and the school\n    # Qiqi's speed is 60 m/min\n    # Weiling's speed is 72 m/min\n    # Weiling starts 2 minutes after Qiqi\n    # Weiling arrives 4 minutes before Qiqi\n    \n    # Time taken by Qiqi = distance / speed (time = d / 60)\n    # Time taken by Weiling = (distance / speed) - 6 (since she starts 2 mins late and arrives 4 mins early, total 6 mins difference)\n    # Thus, d / 60 = (d / 72) + 6\n    \n    # Simplify the equation to find the distance d\n    # 1/60 * d = 1/72 * d + 6\n    # (1/60 - 1/72) * d = 6\n    # (6 - 5) / 360 * d = 6\n    # d / 360 = 6\n    # d = 6 * 360\n    \n    d = 6 * 360\n    return d\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of powers of 9 follows a pattern: 9, 1, 9, 1, ...\n    # 9^1 has a units digit of 9,\n    # 9^2 has a units digit of 1 (since 81 ends in 1),\n    # and this pattern repeats every two powers.\n\n    # Since 2015 is odd, 9^2015 will have a units digit of 9.\n    # Since 2016 is even, 9^2016 will have a units digit of 1.\n\n    # The sum of the units digits is 9 + 1 = 10\n    # Therefore, the units digit of the sum is 0.\n    \n    units_digit = (9 + 1) % 10\n    return units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Total people = 5 men + 3 women = 8\n    men_ways = factorial(5)  # Ways to arrange men in a row\n    # Consider 6 places for 3 women to be placed in between and on either side of the 5 men\n    women_ways = factorial(6) // factorial(6 - 3)\n    \n    ans = men_ways * women_ways\n    return ans\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n    \n    # Check if Candy is correct\n    is_candy_correct = longest_piece_length == 180\n    \n    return longest_piece_length, is_candy_correct\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marc_time = datetime.strptime('11:50', '%H:%M')\n    marc_time_corrected = marc_time + timedelta(minutes=15)  # Correct Marc's slow watch\n    marc_time_in_half_hour = marc_time_corrected + timedelta(minutes=30)  # Time after half an hour\n    \n    george_time = marc_time_in_half_hour - timedelta(minutes=7)  # Adjust for George's fast watch\n\n    return george_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_equation = Eq(30000 * T/100 + (income - 30000) * (T + 3)/100, (T + 1)/100 * income)\n    income_solution = solve((tax_equation, income > 30000), (T, income))\n\n    return income_solution[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    amount = 540\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, solve\n\n    h = symbols('h')\n    equation = 2 * h - h - 25\n\n    result = solve(equation, h)\n\n    return result[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 0\n    jump_up = 3\n    fall_down = 2\n    jumps = 0\n\n    while total_distance < 31:\n        total_distance += jump_up\n        jumps += 1\n        if total_distance >= 31:\n            break\n        # Squirrel falls down after every 3 jumps\n        if jumps % 3 == 0:\n            total_distance -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    marks_per_correct = 5\n    marks_deducted_per_wrong = 1\n    total_marks = 90\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * marks_per_correct - wrong_answers * marks_deducted_per_wrong == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n    combined_rate = rate_a + rate_b\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # You need to ensure to pick at least 1 from all colors except one (the one with the max count)\n    # Then, you need to pick one more from any color to guarantee you have 4 different colors.\n    \n    # The marbles with maximum number among all colors.\n    max_count = max(12, 9, 8, 3)\n    \n    # The sum of the marbles of the other three colors (all except the one with the max count).\n    sum_other_three = (12 + 9 + 8 + 3) - max_count\n    \n    # To ensure 4 different colors, pick all from other three colors plus one more.\n    marbles_needed = sum_other_three + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(0, 101):\n        if number % 3 == 0 and number % 7 == 0:\n            if (number - 2) % 8 == 0:\n                return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate Gigi's age on 15th May 1995\n    gigi_age_in_1995 = 45 - (2002 - 1995)\n\n    # Calculate Jenny's age when Gigi was 22\n    age_diff = gigi_age_in_1995 - 22\n    jenny_age_when_gigi_22 = (22 - age_diff)\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # The common difference\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        count += 1\n        term += difference\n        \n    return count\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(map(int, \"20190406\"))\n    remaining = 9 - (digits_sum % 9)\n    if remaining == 9:\n        return 0\n    else:\n        return remaining\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    number = 0\n    while True:\n        number += 24  # Least common multiple of 3 and 8 is 24\n        if str(number).endswith('2'):\n            break\n    return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        num = int(f\"451{last_digit}\")\n\n        if num % 3 == 0 and num % 5 != 0 and num % 9 != 0:\n            ans = last_digit\n            return ans\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0  # Initialize the count of different ways to 0\n\n    # Since each group must have at least 1 apple and different number of apples,\n    # we can simply count the ways to divide apples between two groups with different quantities.\n    for apples_in_group1 in range(1, total_apples):\n        apples_in_group2 = total_apples - apples_in_group1\n        if apples_in_group1 < apples_in_group2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_still_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    cost_cupcakes = 3 * cupcake_cost\n    cost_cans = total_cost - cost_cupcakes\n    cost_per_can = cost_cans / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of questions answered correctly\n    # Let y be the number of questions answered incorrectly\n    # We have the system of equations:\n    # x + y = 20 (since there are 20 questions in total)\n    # 5x - 2y = 51 (since 5 points are earned for each correct answer \n    # and 2 points are lost for each incorrect one)\n    # We can solve this system for x and y.\n\n    # Import the solve function from sympy\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y = symbols('x y')\n\n    # Define the equations\n    equation1 = Eq(x + y, 20)       # Total questions\n    equation2 = Eq(5*x - 2*y, 51)   # Total points\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of correct answers\n    return solutions[x]\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    first_light = 0.5  # in minutes\n    second_light = 0.75  # in minutes\n    total_time = 9  # in minutes\n    \n    # Convert the total_time to seconds\n    total_time_in_seconds = total_time * 60\n    \n    # Convert the other traffic light times to seconds\n    first_light_in_seconds = first_light * 60\n    second_light_in_seconds = second_light * 60\n    \n    # Calculate the least common multiple for the first two traffic lights\n    lcm_first_second = lcm(int(first_light_in_seconds), int(second_light_in_seconds))\n    \n    # Calculate how much of the period each light must divide into for 3 lights to sync every 9 minutes\n    possible_third_light_times = [lcm_first_second * i for i in range(1, total_time_in_seconds // lcm_first_second + 1) if lcm_first_second * i >= 30]\n    \n    # The shortest possible time for the third light is the first element in the possible_third_light_times list\n    shortest_third_light_time = min(possible_third_light_times)\n    \n    return shortest_third_light_time\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    bus_capacity = 36\n    film_capacity = 36\n\n    # Each member of A took a picture with every member of B, and the total\n    # is divisible by bus_capacity except for 11 members of A.\n    # That means total_pictures = group_A_size * group_B_size is divisible \n    # by bus_capacity after subtracting 11 * group_B_size.\n    \n    # Let's represent the size of group A as multiple of bus_capacity and x extra members:\n    # group_A_size = bus_capacity * a + x where x is the extra members from group A not filling a bus completely\n    \n    # But we know x = 11, since after those 11 members of A combine with the remaining members of B,\n    # they fill up a bus. Hence, the remaining members of B are bus_capacity - 11.\n    \n    # Since both A and B completely fill up whole buses (except for the last one with remnant members\n    # from both groups), it means that group_A_size * group_B_size is divisible by bus_capacity.\n\n    # Assume group_A_size * group_B_size = bus_capacity * n,\n    # where \"n\" is some number that results from full bus groups taking pictures together.\n\n    # We know the last group to take pictures includes the 11 members of A and (bus_capacity - 11)\n    # members of B, which gives 11 * (bus_capacity - 11) pictures.\n\n    last_group_pictures = 11 * (bus_capacity - 11)\n\n    # Since each roll of film can only take 36 pictures, we calculate how many pictures can the last\n    # roll of film take after all pictures are taken. It's the remainder of the last group pictures divided\n    # by film_capacity.\n\n    remaining_pictures = last_group_pictures % film_capacity\n    # The result of how many more pictures can the last roll of film take is then\n    # film_capacity - remaining_pictures because it indicates the unused capacity of the film.\n    more_pictures = film_capacity - remaining_pictures\n\n    return more_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]\n    \n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_count = 8\n\n    total_sum = mean_value * total_count\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 passes, therefore, we're considering paths A -> X -> Y -> A,\n    # where X and Y are among the three other individuals, and X cannot be equal to Y.\n\n    # Since A cannot receive the ball until the last pass,\n    # we only have to consider the choices for X and Y.\n    # For the first pass, A has 3 choices (passing to B, C, or D).\n    # For the second pass, the person who gets the ball from A has 2 choices\n    # (since they can't pass it back to A or to themselves).\n    # The last pass is determined as it must go back to A.\n\n    first_pass_choices = 3  # A can pass to B, C, or D\n    second_pass_choices = 2  # B, C, or D has 2 choices (excluding A and themselves)\n\n    # Total number of different methods is the product of the choices.\n    total_methods = first_pass_choices * second_pass_choices\n    \n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    number_of_girls = 250\n\n    total_weight_g = paper_weight_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000\n\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let x be the length of the second bridge\n    # For the first bridge:\n    # If the front of the line has finished crossing the 9m bridge,\n    # there are still 3m of people on the bridge, so the total distance covered by the front is 9 + 3 = 12m.\n    # It takes 8 seconds, so speed = distance / time = 12 / 8 = 1.5 m/s.\n\n    # For the second bridge:\n    # If the front of the line has finished crossing the second bridge (length x),\n    # there are still 3m of people on the bridge, so the total distance covered by the front is x + 3.\n    # It takes 10 seconds, so speed = distance / time = (x + 3) / 10.\n\n    # Since the speed is the same for both bridges,\n    # 1.5 = (x + 3) / 10\n    # Solve for x:\n    x = (1.5 * 10) - 3\n\n    return x\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum(((2 * i + 2)**2 - (2 * i)**2) for i in range(1, 500))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n\n    # Starting with the cubic root of 2688 to find the middle number of the consecutive even numbers\n    middle_number = round(math.pow(2688, 1/3))\n\n    # Ensuring we start with an even number if the cubic root is odd\n    if middle_number % 2 == 1:\n        middle_number -= 1\n\n    while True:\n        if middle_number * (middle_number - 2) * (middle_number + 2) == 2688:\n            return middle_number + 2  # The largest of the three consecutive even numbers\n        middle_number -= 2\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11, 55)  # Start time in hours, minutes\n    end_time = (13, 40)    # End time in hours, minutes\n\n    # Calculate the total minutes played\n    total_minutes = (end_time[0] * 60 + end_time[1]) - (start_time[0] * 60 + start_time[1])\n\n    return total_minutes\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # There are 11 people on Crystal's left and 7 people on her right in one row.\n    # She is in one row herself, so in one row there are 11 + 1 (Crystal) + 7 people.\n    people_in_one_row = 11 + 1 + 7\n\n    # Since there are 2 rows, we double the number of people in one row to get the total.\n    total_people = people_in_one_row * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(224)\n    count = 1\n    for exponent in factors.values():\n        count *= (exponent + 1)\n    return count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    start_time = 8 * 60 + 30  # Convert 8:30 am to minutes\n    total_lesson_time = 3 * 45  # 3 lessons, 45 minutes each\n    total_moving_time = 2 * 5  # 2 moving periods, 5 minutes each\n    break_start_time = start_time + total_lesson_time + total_moving_time\n\n    # Convert back to hours and minutes\n    hours = break_start_time // 60\n    minutes = break_start_time % 60\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # Hundreds digit cannot be 0\n        for b in range(0, 10):  # Tens digit\n            for c in range(0, 10):  # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    ans = gcd(28, gcd(84, 126))\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of coins Troy and Adam originally had\n    troy, adam = symbols('troy adam')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(troy, 5 * adam)  # Troy had 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more coins, he had 1/3 as many coins as Troy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had originally (before Adam took more coins)\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Since each group must have at least 1 cupcake and different number of cupcakes,\n    # we just need to give one group a certain number and the other will have the rest.\n    \n    # Number of cupcakes Maddy has\n    total_cupcakes = 10\n    # Number of ways to divide the cupcakes\n    count = 0\n    \n    # Loop through the possible number of cupcakes for the first group\n    for cupcakes_group1 in range(1, total_cupcakes):\n        cupcakes_group2 = total_cupcakes - cupcakes_group1\n        \n        # Since we are looking for different numbers of cupcakes in each group,\n        # we don't need to check if cupcakes_group2 is different from cupcakes_group1,\n        # since it always is (cupcakes_group2 is the remainder of the total minus group1).\n        \n        # This way we count all the distributions.\n        count += 1\n        \n    # The number of ways is basically the number of combinations to choose \n    # how many cupcakes one group will have and the other gets the rest.\n    return count\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    total_items = 69\n    wand_card_difference = 17\n\n    equation1 = Eq(wands + cards, total_items)\n    equation2 = Eq(wands, cards + wand_card_difference)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Let x be the total amount of money Hanson had initially\n\n    # After spending 1/4 of his money and an additional $3, Hanson has 3/4x - 3 left\n    first_spend = (3/4) * x - 3\n\n    # He then spends 3/5 of the remaining money and an additional $6, leaving him with $24\n    second_spend = (2/5) * first_spend - 6\n\n    # We set up the equation second_spend = 24 and solve for x\n    equation = Eq(second_spend, 24)\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        product = 1\n        for digit in str(num):\n            product *= int(digit)\n            if product > 8:\n                break\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    even_digits = [0, 2, 4, 6, 8]\n    count = 0\n\n    for i in range(1, 10):\n        for j in range(0, 10):\n            if j != i:\n                for k in even_digits:\n                    if k != i and k != j and i + j + k == 8:\n                        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of 5 dollar notes as x and 10 dollar notes as y\n    x, y = symbols('x y')\n\n    # Given: Jeremy has a total of 57 notes (10s and 5s)\n    total_notes_equation = Eq(x + y, 57)\n\n    # Spent 60% of the 10 dollar notes and 25% of the 5 dollar notes\n    spent_10_notes = 0.60 * y\n    spent_5_notes = 0.25 * x\n\n    # After spending money on a bag, twice as many 10 dollar notes as 5 dollar notes left\n    remaining_10_notes = y - spent_10_notes\n    remaining_5_notes = x - spent_5_notes\n    notes_ratio_equation = Eq(remaining_10_notes, 2 * remaining_5_notes)\n\n    # Solve the equations\n    solutions = solve((total_notes_equation, notes_ratio_equation), (x, y))\n\n    # Calculate the total money spent on the bag\n    total_spent_on_bag = spent_10_notes.subs(y, solutions[y]) * 10 + spent_5_notes.subs(x, solutions[x]) * 5\n    \n    return total_spent_on_bag.evalf()\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # worst case scenario for drawing other colors before getting 5 green\n    worst_case_blue = 5   # all blue beads\n    worst_case_white = 6  # all white beads\n\n    # number of green beads we want is 5, but one more draw might be needed to ensure the 5th green bead\n    green_beads_needed = 5 - 1\n    \n    # total beads to draw for 4 green beads to be sure plus the extra 1 to get the 5th green bead\n    total_draws = worst_case_blue + worst_case_white + green_beads_needed + 1 \n\n    return total_draws\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    # x ≡ 1 (mod 5), x ≡ 1 (mod 6), and x ≡ 0 (mod 11)\n    congruences = [(1, 5), (1, 6), (0, 11)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    # ans will store the smallest such number\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    common_difference = 4\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of plants\n    r = 4  # number of plants to arrange\n\n    # Calculate arrangement using permutations formula P(n, r) = n! / (n - r)!\n    arrangements = factorial(n) // factorial(n - r)\n\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n    \n    # Using Inclusion-Exclusion Principle\n    likes_both = (likes_bananas + likes_apples) - total_people\n    \n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    initial_stickers = final_stickers - stickers_bought + stickers_given\n\n    return initial_stickers\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # In each group of 4, each person plays against 3 others, so 4*(3/2) games per group\n    # due to each game involving 2 people. There are 4 such groups.\n    group_games = 4 * (4 * 3 // 2)\n\n    # Calculate the number of games in the knockout rounds\n    # With single elimination, the number of games is always 1 less than the number of players,\n    # because each game eliminates one player until only the winner remains.\n    knockout_games = (8 - 1) + (4 - 1) + (2 - 1)\n\n    # Total number of games is the sum of group stage games and knockout games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the job alone\n    x = symbols('x')\n    \n    # A is twice as efficient as B, so A takes x/2 days\n    # A can finish the job in 12 days less than B. So, x/2 = x - 12\n    equation = Eq(x/2, x - 12)\n\n    # Solve for x\n    days_B = solve(equation, x)[0]\n\n    # Since A is twice as fast as B, A can finish the job in half the time\n    days_A = days_B / 2\n\n    # A's work rate is 1/days_A and B's work rate is 1/days_B\n    # Together their work rate is 1/days_A + 1/days_B\n    # So the time taken to complete the job together is 1 / (1/days_A + 1/days_B)\n    combined_rate = 1/days_A + 1/days_B\n    days_together = 1 / combined_rate\n\n    return days_together\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pineapple = symbols('apple pineapple')\n\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (apple, pineapple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    equations = [\n        Eq(x % 3, 2),\n        Eq(x % 4, 2),\n        Eq(x % 5, 2),\n        Eq(x % 7, 0)\n    ]\n    ans = solve(equations)\n    \n    return min(ans)\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Given factors\n    factor1 = 15  # 3 * 5\n    factor2 = 21  # 3 * 7\n\n    # The least common multiple of factor1 and factor2 gives us the number\n    number = factor1 * factor2 // math.gcd(factor1, factor2)\n\n    # Sum of factors of a number can be calculated by finding all the factors and summing them\n    factors_sum = sum(set(factor for i in range(1, int(number ** 0.5) + 1) if number % i == 0 for factor in (i, number // i)))\n\n    return factors_sum\n\nimport math\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    matthew_tomatoes = belinda_tomatoes - belinda_gave - (belinda_tomatoes // 2)\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = 50 / 100\n    new_rate = original_rate * (1 + efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n    \n    # The difference between the two numbers\n    difference = abs(2012 - 1274)\n    \n    # Calculate the gcd which is the highest possible D\n    D = gcd(2012, 1274)\n    \n    # Since D divides both numbers with the same remainder, that remainder should be 2012 modulo D\n    R = 2012 % D\n    \n    # We need to find the largest possible value of D - R\n    ans = D - R\n    \n    return ans\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    total_animals = 7\n    total_legs = 20\n\n    for rabbits in range(total_animals + 1):\n        ducks = total_animals - rabbits\n        if (rabbits * 4 + ducks * 2) == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We want to find a number that when divided by 5, 6, or 7 leaves a remainder of 1.\n    # This can be expressed by the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5 / 7) * initial_amount\n    remainder = initial_amount - given_to_grace\n    given_to_evelyn = (1 / 9) * remainder\n    left_over = remainder - given_to_evelyn\n    \n    return left_over\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "def solution():\n    from itertools import permutations\n\n    # The ten digits from 0 to 9\n    digits = '0123456789'\n\n    # Find all permutations of the 9 digits excluding the given first digit '8'\n    perms = permutations('012345679')\n\n    # Iterate through the permutations\n    for perm in perms:\n        perm = '8' + ''.join(perm)  # Add the given first digit '8' to the beginning\n        is_divisible = True\n        # Check the divisibility for the first 9 digits\n        for i in range(2, 11):\n            if int(perm[:i]) % i != 0:\n                is_divisible = False\n                break\n        \n        # If all conditions are met, this is our number\n        if is_divisible:\n            return int(perm)\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # 4 raised to any exponent has a cycle of 2 in its last digit where it alternates between 6 and 4.\n    # Since 2009 is odd, the last digit of 4^2009 is 4.\n\n    # 6 raised to any positive exponent always has 6 as its last digit.\n    # Hence, the last digit of 6^2010 is 6.\n\n    # Therefore, the last digit of 4^2009 + 6^2010 is 4 + 6 which is 0.\n    last_digit_of_sum = (4 + 6) % 10  # 0\n    return last_digit_of_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 64, 2):  # Start from 0 to 63 with steps of 2 grams.\n        for five_gram_weights in range(0, 64, 5):  # Start from 0 to 63 with steps of 5 grams.\n            if two_gram_weights + five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n    \n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Total number of numbers to be written on the blackboard.\n    total_numbers = 52\n    \n    # Legal moves that can be made by each player on their turn.\n    legal_moves = [1, 3, 4, 6]\n\n    # We initialize a list that tells us if the position is winning (True) or losing (False).\n    dp = [False] * (total_numbers + 1)\n    \n    # The positions from where the game cannot continue and player loses are losing positions.\n    dp[0] = False\n\n    # For every position, we compute if it's a winning or losing position by checking the state of the game\n    # after making a legal move.\n    for i in range(1, total_numbers + 1):\n        for move in legal_moves:\n            if i - move >= 0 and not dp[i - move]:\n                dp[i] = True\n                break\n    \n    # Betty wants to be the first to make move to a losing position for Abby.\n    # Final answer should indicate if the initial position (52) is winning and the strategy that leads to that.\n    if dp[total_numbers]:\n        ans = (\"First\", \"Betty should ensure that after her move, \"\n               \"there are a multiple of 14 numbers left for Abby to play.\")\n    else:\n        ans = (\"Second\", \"No strategy, as Betty cannot force a win if Abby plays optimally.\")\n    \n    return ans\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    A, B, C = symbols('A B C')\n\n    # Create the equations based on the problem statement\n    # If A and C are on, we have 18 tons from A\n    # If B and C are on, we have 27 tons from B\n    # The flow rate of B is twice that of A\n    equation1 = Eq(A + C, A + 18)\n    equation2 = Eq(B + C, B + 27)\n    equation3 = Eq(B, 2 * A)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the capacity of the pool based on the flow rate of A and the additional 18 tons when A and C are on\n    capacity = solutions[A] + 18\n\n    return capacity\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n\n    # Rex did not attempt 1 question, so he attempted 24 questions\n    attempted_questions = total_questions - 1\n\n    for correct in range(attempted_questions + 1):\n        incorrect = attempted_questions - correct\n        score = (correct * points_correct) + (incorrect * points_incorrect)\n        if score == 66:\n            return correct\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) * 2 - 20\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # There are 5 choices for the first letter,\n    # 4 remaining choices for the second letter,\n    # 3 remaining choices for the third letter, and\n    # 2 remaining choices for the last letter.\n    ways = 5 * 4 * 3 * 2\n    return ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let's use the formula for the sum of an arithmetic sequence:\n    # Sum of first n terms S_n = n/2 * (2a + (n - 1)d)\n    # where a is the first term and d is the common difference.\n    \n    # We're given S_8 = 32 and S_22 = 44, which result in two equations:\n    # 32 = 8/2 * (2a + (8 - 1)d) => 4 * (2a + 7d) = 32\n    # 44 = 22/2 * (2a + (22 - 1)d) => 11 * (2a + 21d) = 44\n\n    # From equation (1):\n    # 8a + 28d = 32\n    # Dividing both sides by 4:\n    # 2a + 7d = 8 ... (1)\n\n    # From equation (2):\n    # 22a + 231d = 44\n    # Dividing both sides by 11:\n    # 2a + 21d = 4 ... (2)\n\n    # Now, let's solve the two equations (1) and (2) for a and d:\n    # Subtract equation (2) from equation (1):\n    # (2a + 7d) - (2a + 21d) = 8 - 4\n    # -14d = 4\n    # d = -4 / 14\n    # d = -2 / 7\n\n    # Substitute the value of d in equation (1):\n    # 2a + 7(-2 / 7) = 8\n    # 2a - 2 = 8\n    # 2a = 8 + 2\n    # 2a = 10\n    # a = 10 / 2\n    # a = 5\n\n    # Now we have a and d, we can find the sum of the first 15 terms:\n    # S_15 = 15/2 * (2a + (15 - 1)d)\n    # S_15 = 15/2 * (10 + (15 - 1)(-2 / 7))\n    # S_15 = 15/2 * (10 - 14 * 2 / 7)\n    # S_15 = 15/2 * (10 - 4)\n    # S_15 = 15/2 * 6\n    # S_15 = 15 * 3\n    # S_15 = 45\n    return 45\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Let's try possible numbers of meatballs per student starting from 1 upward\n    meatballs_per_student = 1\n    while True:\n        # total meatballs is meatballs per student times the number of students plus the remaining meatballs\n        total_meatballs_with_20_left = meatballs_per_student * (meatballs_per_student + 20) \n        total_meatballs_with_10_left = (meatballs_per_student + 1) * meatballs_per_student + 10\n        \n        # these two totals must be the same because only one extra student got meatballs\n        if total_meatballs_with_20_left == total_meatballs_with_10_left:\n            return meatballs_per_student\n\n        meatballs_per_student += 1\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_value = 9.32\n    increase_fraction = 1 / 10\n\n    ans = original_value + (original_value * increase_fraction)\n\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    day1_completed = (total_questions / 2) + 7\n    day2_completed = ((total_questions - day1_completed) / 2) - 5\n    day3_completed = 23\n\n    # equation for the sum of questions completed over the three days equal to total\n    equation = Eq(day1_completed + day2_completed + day3_completed, total_questions)\n\n    ans = solve(equation, total_questions)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    elif fraction_value < decimal_value:\n        ans = \"0.17 is larger\"\n    else:\n        ans = \"They are equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_capacity_ml = 1000  # 1 litre = 1000 ml\n    cup_capacity_ml = 200\n    cups_filled = 3\n\n    water_used = cup_capacity_ml * cups_filled\n    water_left = jug_capacity_ml - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_diff = fifteenth_term - tenth_term\n    common_difference = term_diff / (15 - 10)\n\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # A light will be toggled for each of its divisors\n    # Only lights which have an odd number of divisors (and thus are toggled an odd number of times) will be on\n    # This occurs only for perfect squares, since all other numbers have divisors in pairs (except for 1)\n    # So we need to count the number of perfect squares up to 250\n    ans = 0\n    for i in range(1, 251):\n        if i**0.5 == int(i**0.5):\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Total problems in each test\n    test1_problems = 10\n    test2_problems = 20\n    test3_problems = 30\n    \n    # Lizzie's score in each test\n    test1_score = 0.20 * test1_problems\n    test2_score = 0.80 * test2_problems\n    test3_score = 0.90 * test3_problems\n    \n    # Total score over all tests\n    total_score = test1_score + test2_score + test3_score\n    \n    # Total problems over all tests\n    total_problems = test1_problems + test2_problems + test3_problems\n    \n    # Overall percentage score\n    overall_percentage = (total_score / total_problems) * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Given the number of bricks needed using 6 dm side length bricks\n    bricks_6dm = 80\n    \n    # Calculate the area of one 6 dm side length brick in square centimeters\n    area_6dm = (6 * 10) ** 2  # side length in cm\n    \n    # Total area to cover in square centimeters using 6 dm side length bricks\n    total_area = bricks_6dm * area_6dm\n    \n    # Given area of the smaller brick\n    area_64cm = 64\n    \n    # Calculate the number of 64 cm^2 bricks needed\n    bricks_64cm = total_area / area_64cm\n    \n    return int(bricks_64cm)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for cost of water bottle and bag of fruit\n    water, fruit = symbols('water fruit')\n\n    # Given: 2 water bottles and 3 fruit bags cost £2.55\n    # Convert £2.55 to pence for easier calculations: 1 pound = 100 pence\n    equation1 = Eq(2 * water + 3 * fruit, 255)\n\n    # Given: A bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(water, fruit + 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    # We want the cost of a bag of fruit\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    greatest_num = 0\n\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            greatest_num = max(greatest_num, num)\n\n    return greatest_num\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of roses and d be the number of daisies originally in the park.\n    # Let m be the number of months passed and x be the number of roses and daisies planted each month.\n    r, d, m, x = symbols('r d m x')\n    \n    # Total flowers equation at the start: r + d = 300\n    equation1 = Eq(r + d, 300)\n    \n    # Roses after few months: r + m * x = 280\n    equation2 = Eq(r + m * x, 280)\n    \n    # Daisies after few months: d + m * x = 180\n    equation3 = Eq(d + m * x, 180)\n    \n    # Since the number of flowers planted every month is the same for both roses and daisies,\n    # and total flowers after few months should be (280 roses + 180 daisies), we know the total should be 460.\n    # We can then disregard m and x since we're given their sum.\n    # We use this info to eliminate m and x. Every month, the amount of roses and daisies increases by the same amount,\n    # so we need to find the current difference and calculate the initial amount based on that.\n    \n    # Current difference between roses and daisies: 280 - 180 = 100\n    current_difference = 280 - 180\n    \n    # Initial difference between roses and daisies should be the same since same amount of roses and daisies are planted each month.\n    # r - d = 100\n    equation4 = Eq(r - d, 100)\n    \n    # Solve the system of two equations to find r (roses originally in the park).\n    solutions = solve((equation1, equation4), (r, d))\n    \n    return solutions[r]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # let's assume number of boys = b\n    # then number of girls = b + 30\n    # b + (b + 30) = 500\n    # 2*b + 30 = 500\n    # 2*b = 470\n    # b = 235\n    # number of girls = b + 30\n    number_of_girls = 235 + 30\n    return number_of_girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    for i in range(2, int(91**0.5) + 1):\n        if 91 % i == 0:\n            return False  # Returns False if 91 is divisible by i, meaning it is not prime\n    return True  # Returns True if 91 is prime (this will not be reached in this case)\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    import math\n\n    # Calculate the number of digits of A\n    # Using the fact that the number of digits of a number N is floor(log10(N)) + 1\n\n    # A = 4^(2018) * 25^(2018)\n    # log10(A) = log10(4^(2018) * 25^(2018)) = 2018*log10(4) + 2018*log10(25)\n    log10_A = 2018 * math.log10(4) + 2018 * math.log10(25)\n\n    # The number of digits is floor(log10(N)) + 1\n    num_digits_A = math.floor(log10_A) + 1\n\n    return num_digits_A\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    return comb(5, 3)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    # Profit percent scenario 1\n    selling_price_1 = 6500\n    profit_percent_1 = 30  # given profit percent\n    \n    # Calculating cost price for scenario 1\n    cost_price_1 = selling_price_1 / (1 + profit_percent_1 / 100)\n    \n    # Profit amount scenario 2\n    profit_amount_2 = 5000\n    \n    # Calculating selling price for scenario 2\n    selling_price_2 = cost_price_1 + profit_amount_2\n    \n    # Calculating profit percentage for scenario 2\n    profit_percent_2 = (profit_amount_2 / cost_price_1) * 100\n    \n    return profit_percent_2\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # equation representing the statement\n    # (1 - 1/5)x - 80 = 0.3x\n    equation = Eq((1 - 1/5) * x - 80, 0.3 * x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Calculate the number of apples he had in the end (30% of the total)\n    apples_in_the_end = 0.3 * solution[0]\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since each pile has at least 1 ball, we start with 1 ball in each.\n    for x1 in range(1, 10 - 2):\n        for x2 in range(1, 10 - x1 - 1):\n            x3 = 10 - x1 - x2\n            # Piles should have different numbers of balls.\n            if x1 != x2 and x1 != x3 and x2 != x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # x2 must be greater than x1 to be different\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # x3 must be greater than x2 to be different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    emily_position = 25\n    danny_position_behind = 16\n    danny_and_emily = 2\n    \n    total_people = emily_position + danny_position_behind + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    number_of_pieces = 2\n\n    length_of_each_piece = length_of_wood / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1 / 5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3 / 4)\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_m_factor = 1000\n    km_value = 1.5\n    m_value = km_value * km_to_m_factor\n    return m_value\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_of_eight = total_sum - 180\n    average_of_eight = sum_of_eight / 8\n    return average_of_eight\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for three types of orchids\n    purple, yellow, white = symbols('purple yellow white')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(purple, 2 * yellow)  # Ben has twice as many purple orchids as yellow\n    equation2 = Eq(yellow, 3 * white)   # Ben has 3 times as many yellow orchids as white\n    equation3 = Eq(white + 28, 38)      # There are 38 red and white orchids, and 28 of them are red\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (purple, yellow, white))\n\n    # calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + 28\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let's denote the first of the seven consecutive even numbers as 'n'.\n    # Then the seven consecutive even numbers are n, n+2, n+4, n+6, n+8, n+10, n+12\n    # According to the problem, the fourth number (n+6) is larger than one-third of the sum of the first and seventh numbers by 6.\n    # So, we have the equation: (n+6) = (1/3)*(n + n+12) + 6\n    # Simplifying the equation we get: (n+6) = (1/3)*(2*n + 12) + 6 -> (n+6) = (2/3)*n + 4 + 6 -> (n+6) = (2/3)*n + 10\n    # Now we solve for 'n': (1/3)*n = 4 -> n = 12\n    # Now we calculate the sum of these seven numbers: 12 + (12+2) + (12+4) + (12+6) + (12+8) + (12+10) + (12+12)\n    \n    n = 12\n    sum_of_numbers = sum(n + 2 * i for i in range(7))\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length = 45\n    distance = 9\n\n    # plus 1 because the tree is planted at both ends\n    trees_per_side = (length // distance) + 1\n\n    # Trees are planted on two sides\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    nth_term = first_odd + (20 - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny = 194\n    amber = 5 * johnny\n    remaining = 65\n    total = johnny + amber + remaining\n    return total\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boys_diff_girls = 31\n    total_students = 0\n    x = 1\n    \n    while True:\n        boys = (x * 4) + (x - 2) * 4 if x > 1 else 1\n        girls = ((x - 2) * 4) + (x - 4) * 4 if x > 3 else 0\n        diff = boys - girls\n        \n        if diff == boys_diff_girls:\n            total_students = (x ** 2) + ((x - 2) ** 2) if x > 1 else 1\n            break\n        x += 2\n\n    return total_students\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_paid = lily_book_price + amy_book_price\n    return total_paid\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    interior_angle = ((num_sides - 2) * 180) / num_sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    s = sum(int('5' * i) for i in range(1, 21))\n    ans = s % 10000\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # It takes 2 men 3 days to build 1 wall\n    men_days_per_wall = 2 * 3  # Total man-days to build one wall\n    \n    # Define x to be the number of such walls and y to be the number of men\n    x, y = symbols('x y')\n    \n    # Now calculate how many days it would take y men to build x walls\n    # We multiply men_days_per_wall by x because we want to build x walls\n    days_to_build_x_walls = (men_days_per_wall * x) / y\n    \n    return days_to_build_x_walls\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 0.25\n    fraction_women = 1/5\n\n    men = total_people * percent_men\n    women = total_people * fraction_women\n\n    children = total_people - men - women\n    \n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked_shirts = symbols('checked_shirts')\n    white_shirts = 7 * checked_shirts\n    total_shirts = checked_shirts + white_shirts\n\n    equation = Eq(total_shirts, 72)\n    solution = solve(equation, checked_shirts)\n\n    white_shirts_sold = 7 * solution[0]\n    return white_shirts_sold\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    \n    # Find the number less than 100\n    while number >= 100:\n        number -= 3*4*5\n    \n    return number\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # Start with the largest 3-digit number that is odd\n    max_number = 999\n    \n    # Iterate backwards from 999 to find the largest 3-digit number\n    # that meets all the criteria\n    for num in range(max_number, 99, -1):\n        if num % 2 == 1 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    nums = [72, 60, 48, 36, 24, 12]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Since no picture is provided, I cannot generate a specific solution for the given pattern.\n    # Normally, to solve these questions, one needs to analyse the given figure,\n    # find the relationship or rule, and then apply the mathematical relation to find the value.\n    \n    # Here is a template that could be used once the pattern in the image is known:\n    \n    # def find_pattern_value(image_details):\n    #     # Analyze the pattern and implement the logic to find the value for the given image details\n    #     # This could involve finding a mathematical formula that describes the change in the pattern.\n    #     pass\n    \n    # value_of_pattern = find_pattern_value(picture_details)\n    # return value_of_pattern\n    \n    # Since I cannot see the image, I'll return None for now. Please provide the pattern details or image.\n    return None\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # The maximum number of draws that might not result in 2 balls of the same colour\n    # can be calculated as maximum unique draws of each color, which is drawing \n    # one ball less than the number that guarantees duplicates for each color.\n    # White (8), Red (7), Green (5)\n    # Drawing 7 white, 6 red, and 4 green will not guarantee duplicates.\n    max_unique_draws = (8 - 1) + (7 - 1) + (5 - 1)\n\n    # So to ensure getting at least 2 balls of the same colour, draw one more.\n    draws_to_ensure_duplicate = max_unique_draws + 1\n\n    return draws_to_ensure_duplicate\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, 390)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    initial_temp = 17\n    final_temp = -2\n\n    drop_in_temperature = initial_temp - final_temp\n\n    return drop_in_temperature\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_when_tom_reaches_fathers_age = 70\n    \n    father_age_now = father_age_when_tom_reaches_fathers_age - (father_age_when_tom_reaches_fathers_age - tom_age_now)\n    \n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n    total_votes = 400\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Average spending from January to April (4 months)\n    jan_to_apr_avg = 300\n    jan_to_apr_total = jan_to_apr_avg * 4\n    \n    # Average spending from May to July (3 months)\n    may_to_jul_avg = 250\n    may_to_jul_total = may_to_jul_avg * 3\n    \n    # Total spending from August to September (2 months)\n    aug_to_sep_total = 750\n    \n    # Average spending from October to December (3 months)\n    oct_to_dec_avg = 300\n    oct_to_dec_total = oct_to_dec_avg * 3\n    \n    # Total spending for the entire year\n    total_spending = jan_to_apr_total + may_to_jul_total + aug_to_sep_total + oct_to_dec_total\n    \n    # Average spending for the year (12 months)\n    yearly_avg = total_spending / 12\n\n    return yearly_avg\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Starting time in hours and minutes\n    start_time = datetime.strptime('0735', '%H%M')\n    # Duration of the train journey\n    train_duration = timedelta(hours=1, minutes=35)\n    # Duration of the walk\n    walk_duration = timedelta(minutes=40)\n    # Calculate the arrival time at work\n    arrival_time = start_time + train_duration + walk_duration\n    # Format the arrival time in hours and minutes\n    return arrival_time.strftime('%H%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(200):\n        if sum(int(digit) for digit in format(N, '4')) == 5 and \\\n           sum(int(digit) for digit in format(N, '6')) == 8 and \\\n           sum(int(digit) for digit in format(N, '8')) == 9:\n            possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 3 choices for the first digit (2, 3, or zero but cannot be zero as it's a three-digit number),\n    # 3 choices for the second digit, and 3 choices for the third digit.\n    # Total number of different three-digit numbers = choices for first digit * choices for second digit * choices for third digit\n    num_choices_first_digit = 2 # (2 or 3, but not 0)\n    num_choices_second_digit = 3 # (0, 2, or 3)\n    num_choices_third_digit = 3 # (0, 2, or 3)\n    \n    total_numbers = num_choices_first_digit * num_choices_second_digit * num_choices_third_digit\n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_six_hotdogs = 1.10\n    cost_twelve_hotdogs = (cost_six_hotdogs / 6) * 12\n    return cost_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    total_pence = 200  # £2 = 200p\n    price_per_crisp_bag = 16  # 16p per bag\n    num_bags = total_pence // price_per_crisp_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip, dale = symbols('chip dale')\n    \n    equation1 = Eq(chip - 14, dale)\n    equation2 = Eq(chip + dale, 124)\n    \n    solutions = solve((equation1, equation2), (chip, dale))\n    \n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6    # Number of fiction books\n    comic_books = 2      # Number of comic books\n\n    # Calculate the number of different ways to arrange the books\n    # Use the formula for combinations with repetition: n! / (n1! * n2! * ...)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    ans = None\n    for num in range(2, 100, 2):  # iterate through even numbers\n        if (num % 4 == 0) and (num % 3 == 0) and (num ** 0.5).is_integer():\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    from sympy import primerange\n\n    # Generate a list of prime numbers less than 51\n    primes = list(primerange(1, 51))\n\n    min_count = 51  # The maximum number of primes needed will be less than 51\n    total_sum = 51\n    \n    # Try to find the sum with the smallest number of primes\n    # Since 2 is the only even prime, if 51 is an odd number, we start with 2 and reduce the sum\n    if total_sum % 2 != 0:\n        total_sum -= 2\n        count = 1  # We have already used '2' once\n    else:\n        count = 0\n\n    # Use the largest primes to reduce the count\n    for prime in reversed(primes):\n        while total_sum >= prime:\n            total_sum -= prime\n            count += 1\n            if total_sum == 0:\n                min_count = min(min_count, count)\n                break\n\n    return min_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (science_books, novels))\n    \n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    trays_count = 4\n    total_eggs = eggs_per_tray * trays_count\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    # Let x be the number of penpals who received a 4-page letter\n    # Let y be the number of penpals who received a 3-page letter\n    # We have two equations:\n    # 1. x + y = 11 (the total number of penpals)\n    # 2. 4x + 3y = 38 (the total number of pages written)\n    # We can solve for x and y using these two equations\n\n    # Total number of penpals\n    total_penpals = 11\n    # Total number of pages written\n    total_pages = 38\n\n    # Iterate over all possible values of x (from 0 to the total number of penpals)\n    for x in range(total_penpals + 1):\n        y = total_penpals - x\n        if 4 * x + 3 * y == total_pages:\n            return y  # Return the number of penpals who received a 3-page letter\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_apples_kg = 2.5\n    used_for_pie_kg = 750 / 1000  # Convert grams to kilograms\n    used_for_juice_kg = 1025 / 1000  # Convert grams to kilograms\n\n    remaining_apples_kg = initial_apples_kg - (used_for_pie_kg + used_for_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    # Number of people in front of Amy\n    people_in_front = 9\n    # Amy's place from the back\n    place_from_back = 15\n\n    # Total number of people is Amy's place from the back minus one (as we count Amy too)\n    # plus the number of people in front of her\n    total_people = place_from_back + people_in_front - 1\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    time_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / time_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # In the worst-case scenario, all balls of one color are drawn before any other,\n    # followed by balls of a second color. So to guarantee 3 different colored balls,\n    # all 5 of the first color might be drawn, then all 5 of the second color.\n    # The next draw, regardless of its color, will ensure that 3 different colors are drawn.\n\n    red_balls = 5\n    white_balls = 5\n    # yellow_balls = 5  # Not used as the calculation is independent of the number here.\n\n    # Draw all 5 red balls and all 5 white balls\n    draws = red_balls + white_balls\n    # Then draw one more ball to ensure the third color\n    draws += 1\n\n    return draws\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    piece1, piece2 = symbols('piece1 piece2')\n    \n    equation1 = Eq(piece1, 2 * piece2)\n    equation2 = Eq(piece1 + piece2, 12.75)\n    \n    solutions = solve((equation1, equation2), (piece1, piece2))\n    \n    return float(solutions[piece1])\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # From the left, the favorite book is the 14th book\n    left_books = 14 - 1  # books on the left side of the favorite book\n\n    # There are 6 books on the right of her favorite book\n    right_books = 6\n\n    # The total number of books is the sum of books to the left, the favorite book, and books to the right\n    total_books = left_books + 1 + right_books\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # The original volume of cereal in grams\n    scale_factor = 1/2  # Each dimension is halved\n    \n    # When all three dimensions are scaled by 1/2, the new volume is (1/2)^3 times the original\n    new_volume = original_volume * (scale_factor ** 3)\n    \n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the coins they get in class\n    coins_gigi_gets, coins_lily_gets = symbols('coins_gigi_gets coins_lily_gets')\n\n    # Gigi had $120 coins and Lily had $24 coins before class\n    gigi_before = 120\n    lily_before = 24\n\n    # Gigi's and Lily's coins after they get the same amount of coins in class\n    gigi_after = gigi_before + coins_gigi_gets\n    lily_after = lily_before + coins_lily_gets\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(gigi_after, 3 * lily_after)\n    equation2 = Eq(coins_gigi_gets, coins_lily_gets)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (coins_gigi_gets, coins_lily_gets))\n\n    return solutions[coins_gigi_gets]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(1, 21):\n        if not isprime(i):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Difference in age remains constant\n    age_difference = 41 - 14\n\n    # Brian's future age\n    for future_age_brian in range(15, 100):\n        # Father's future age\n        future_age_father = future_age_brian + age_difference\n        # Reverse of Brian's future age as a string\n        reverse_age_brian = str(future_age_brian)[::-1]\n        # If the reversed age of Brian equals the father's age\n        if int(reverse_age_brian) == future_age_father:\n            return future_age_brian\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit odd numbers\n    for i in range(101, 1000, 2): # Start from 101, as it's the smallest 3-digit odd number\n        if sum(map(int, str(i))) == 11:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since only one egg can be boiled at a time for 5 minutes,\n    # the minimum time to boil 3 eggs is 3 times 5 minutes.\n    return 3 * 5\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    dan_calories_yesterday = 1000\n    dan_calories_today = symbols('dan_calories_today')\n\n    inequality = dan_calories_today < dan_calories_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Perform the inverse of the second day's actions.\n    remaining_biscuits = (remaining_biscuits + 2) * 2\n\n    # Perform the inverse of the first day's actions.\n    remaining_biscuits = (remaining_biscuits + 4) * 2\n\n    return remaining_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Odd days, he deposits\n            initial_amount += 5\n        else:  # Even days, he spends\n            initial_amount -= 8\n    return initial_amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)  # Subtract 1 because list index starts at 0\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    \n    wine_gums_per_child = total_wine_gums / children\n    \n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    common_difference = 3\n    last_term = 298\n\n    # Calculate number of terms\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of an arithmetic series\n    sum_series = (n * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_g = initial_dough_kg * 1000\n    dough_used_g = num_cookies * cookie_dough_g + num_brownies * brownie_dough_g\n    remaining_dough_g = total_dough_g - dough_used_g\n\n    remaining_dough_kg = remaining_dough_g / 1000\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (436 + 721) - (163 + 682)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables to find\n    chocolates, friends = symbols('chocolates friends')\n\n    # Equations based on the problem statement\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(chocolates - 23 * friends, -34)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # Calculate remaining chocolates when giving 20 pieces to each friend\n    remaining = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    def is_multiple_of(value, divisor):\n        return value % divisor == 0\n    \n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n    \n    def is_perfect_square(number):\n        root = int(number ** 0.5)\n        return root * root == number\n    \n    # Generate 3-digit numbers\n    for number in range(100, 1000):\n        truths = [\n            is_multiple_of(number, 27),\n            is_multiple_of(number, 7),\n            sum_of_digits(number) == 17,\n            is_perfect_square(number),\n            is_multiple_of(89100, number)\n        ]\n        \n        # Check if exactly three statements are true\n        if truths.count(True) == 3:\n            return number\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    money_spent_on_book = initial_money * book_percentage\n    remaining_money_after_book = initial_money - money_spent_on_book\n    money_spent_on_dvd = remaining_money_after_book * dvd_percentage\n    remaining_money_after_dvd = remaining_money_after_book - money_spent_on_dvd\n\n    return remaining_money_after_dvd\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # Let the first term be a and the common difference be d.\n    # Then the first four terms are a, a+d, a+2d, a+3d\n    # and their sum is 4a + 6d = 124. Eq(1)\n\n    # If n is the total number of terms in the sequence,\n    # the last four terms are: a+(n-4)d, a+(n-3)d, a+(n-2)d, a+(n-1)d\n    # and their sum is 4a + (4n-10)d = 156. Eq(2)\n\n    # The sum of an arithmetic sequence is given by S = n/2 * (first term + last term)\n    # Which in this case S = 210, so we have: 210 = n/2 * [2a + (n-1)d], Eq(3)\n\n    # Solving equation 1 and equation 2 yields values for a and d.\n    # Substituting these values in equation 3 gives us the value of n.\n\n    # From Eq(1) a = (124 - 6d) / 4\n    # From Eq(2) a = (156 - (4n-10)d) / 4\n\n    # Equating the two values of a from both equations:\n    # (124 - 6d) / 4 = (156 - (4n-10)d) / 4\n    # After simplifying, we get an equation in terms of d and n:\n    # 124 - 6d = 156 - (4n-10)d\n    # 32 = (4n-4)d\n    # d = 32 / (4n-4)\n    \n    # Substitute d in Eq(3):\n    # 210 = n/2 * [2a + (n-1)d]\n    # 210 = n/2 * [2 * (124/4 - 6d/4) + (n-1)d]\n    # 210 = n/2 * [2 * (31 - 3d/2) + (n-1)d]\n    # 210 = n/2 * [62 - 3d + (n-1)d]\n    # 210 = n/2 * [62 + (n-4)d]\n    # 420 = n * [62 + (n-4)d]\n    \n    # Substitute d again in the simplified Eq(3)\n    # 420 = n * [62 + (n-4)*32 / (4n-4)]\n    # After simplifying by multiplying both sides by (4n-4), we get:\n    # 420 * (4n-4) = n * [248 + 32n - 128]\n    # 1680n - 1680 = n * [120 + 32n]\n    # 1680n - 1680 = 120n + 32n^2\n    # 32n^2 - 1560n + 1680 = 0\n    # n^2 - 49n + 52.5 = 0\n    \n    # Now we solve for n using the quadratic formula\n    from sympy import symbols, solve\n\n    n = symbols('n')\n    equation = n**2 - 49*n + 52.5\n    # Since number of terms can't be negative or zero, we will take the positive root only.\n    solution = solve(equation, n)\n    ans = [sol.evalf() for sol in solution if sol.is_real and sol > 0]\n\n    return int(ans[0]) if ans else None\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    result = 5992 // 7\n    return result\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do\n    # Since Mulan can do more push-ups than the best boy soldier, we have the inequality:\n    # m > 50\n    \n    # The question requires an inequality, not a numerical answer. \n    # Since we're using Python code, we'll return the inequality as a string.\n    \n    return \"m > 50\"\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_remaining = total_balloons_needed - (balloons_blown_up - balloons_burst)\n    \n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    participants = 21\n    games_played = 210\n\n    total_games = participants * (participants - 1) // 2\n    games_remaining = total_games - games_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B, B now has 16 stones, A has 20\n    # Jerry needs to make A and B have the same number of stones, so Tom cannot win in the next round\n    stones_to_take = 20 - 16  # This will make both stacks have 16 stones\n    stack_to_take_from = \"A\"  # Jerry should take from Stack A\n\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.\"\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pail_volume = 4\n    number_of_pails = 4\n    water_left = 7\n\n    original_volume = (pail_volume * number_of_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # The sum of an arithmetic series is given by the formula: S = n/2 * (a_1 + a_n)\n    # where S is the sum of the series, n is the number of terms, a_1 is the first term, and a_n is the last term\n    # We need to minimize the maximum number (a_n), given that a_1 = 1 (since each child gets at least one piece)\n    # and the total number of candies (S) is 88. The number of children (n) is 8.\n    # We need to ensure that all terms are distinct (no two children get the same number of pieces).\n    \n    # To minimize the maximum number, we should have the series starting from 1 incrementing by 1\n    # until we have 8 distinct numbers which sum up to 88\n    # Let's try finding the series by starting at 1 and increasing the last term until we reach the sum\n    \n    # Initialize variables\n    n = 8   # Number of children\n    S = 88  # Total number of candies\n    min_max_pieces = 0  # This will hold the minimum possible max pieces\n    \n    # Starting with the smallest possible values for the arithmetic series\n    for i in range(n, 0, -1):\n        current_sum = sum(range(i, i + n))  # Sum of n consecutive numbers starting from i\n        if current_sum == S:\n            # Found the sum that equals to the total candies and meets the conditions\n            min_max_pieces = i + n - 1  # Last piece of the series\n            break\n    \n    return min_max_pieces\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    for most_balls in range(160 // 5, 0, -1):\n        if (most_balls - 1) + (most_balls - 2) + (most_balls - 3) + (most_balls - 4) + most_balls == 160:\n            return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    # Iterate over all possible three-digit numbers with 0 in the tens place\n    for i in range(1, 10):\n        for j in range(10):\n            M = int(f\"{i}0{j}\")\n            S = i + j\n            # Check if the condition M = 67 * S is met\n            if M == 67 * S:\n                # Reverse the digits of M\n                M_reversed = int(f\"{j}0{i}\")\n                # Return the result of dividing the reversed number by S\n                return M_reversed // S\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be represented by g\n    # Then the number of boys would be g + 16, since there are 16 more boys than girls\n    # According to the ratio of girls to boys which is 7:9, we can write the following equation\n    # g / (g + 16) = 7 / 9\n    # Solving for g will give us the number of girls, and then we can find the number of boys and add them to find the total number of pupils\n\n    # First, cross-multiply to solve for g\n    # 9g = 7(g + 16)\n    # 9g = 7g + 112\n    g = 112 / (9 - 7)\n\n    # Now we calculate the number of boys\n    b = g + 16\n\n    # Total number of pupils\n    total_pupils = g + b\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula S = n/2 * (a1 + an)\n    # We know there are 37 pupils (n = 37), and the first number (a1 = 1)\n    # The correct sum should be S_correct = 37/2 * (1 + 1 + (37 - 1) * 3)\n    # We have the actual sum which is S_actual = 2011\n    # We can find the difference D = S_correct - S_actual to know how much the error affected the sum\n    n = 37\n    a1 = 1\n    d = 3  # common difference\n    S_correct = n / 2 * (2 * a1 + (n - 1) * d)\n    S_actual = 2011\n    D = S_correct - S_actual\n    \n    # The error is caused by subtracting 3 instead of adding, which means the total error is 6 (subtract 3 and fail to add another 3)\n    # To find the position of the error, we divide the difference by 6\n    # The result tells us the number of turns before the error since each turn adds 3 to the sum, and the mistake subtracts 3 twice\n    error_position = D // 6\n    return error_position\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    length_in_cm = 2 * 100  # converting 2 meters to centimeters\n    piece_length = 6  # length of each piece in centimeters\n\n    num_complete_pieces = length_in_cm // piece_length\n\n    return num_complete_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    return comb(10, 7)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Start with the given fraction\n    fraction = 13/10\n\n    # Subtract 1 to make it a proper fraction\n    fraction -= 1  # Now we have 3/10\n\n    # The fraction pattern is 1 / (a + 1 / (b + 1 / c))\n    # So we need to express 3/10 as 1 / (A + 1 / (B + 1 / C))\n\n    # First, we invert 3/10 to find A\n    A = 1 / fraction  # which will return us a floating number greater than 1\n    a = int(A)  # We take the integer part, which is 'a'\n    remainder_a = A - a  # We calculate the remainder\n\n    # Now we work with the remainder to find B\n    B = 1 / remainder_a\n    b = int(B)  # We take the integer part, which is 'b'\n    remainder_b = B - b  # We calculate the remainder\n\n    # Lastly, we find C using the remainder of B\n    C = 1 / remainder_b\n    c = int(C)  # We take the integer part, which is 'c'\n\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    # Notice we only need the final digit, which cycles every 4 powers for any base\n    cycle_length = 4\n    # Calculate the exponent modulo the cycle length to find the position in the cycle\n    position_in_cycle = exponent % cycle_length\n\n    if position_in_cycle == 0:\n        # If the position is zero, we use the last digit of the cycle\n        position_in_cycle = cycle_length\n    # Raise the base to the power of the position in cycle and take the ones digit\n    ones_digit = (base ** position_in_cycle) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n    return days\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_points = 52\n    correct_points = 5\n    incorrect_points = -3\n    total_questions = 20\n\n    # Use algebra to solve for the number of correct answers\n    # Let x be the number of correct answers\n    # Since each incorrect answer loses 3 points, the number of incorrect answers is total_questions - x.\n    # correct_points * x + incorrect_points * (total_questions - x) = total_points\n    # 5x - 3(20 - x) = 52\n    # 5x - 60 + 3x = 52\n    # 8x = 112\n    # x = 14\n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # The monkey eats a different number of peaches each day.\n    # If the monkey eats one peach on the first day and then increases\n    # the number of peaches eaten each day by one,\n    # it will take the largest number of days to finish eating 100 peaches.\n    \n    # This forms a sequence: 1, 2, 3, ..., n\n    # The sum of this sequence can be found using the formula: n(n+1)/2\n    # We need the maximum n such that n(n+1)/2 <= 100\n    \n    # Let's start with day 1 and increase until we reach or exceed 100 peaches\n    total_peaches = 0\n    day = 0\n    while total_peaches <= 100:\n        day += 1\n        total_peaches += day\n\n        if total_peaches > 100:\n            # Since the current day made the total_peaches exceed 100,\n            # the maximum number of days is day - 1\n            return day - 1\n\n    return day\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    start = 1\n    end = 20\n    remainder = 1\n    divisor = 6\n    \n    sum_numbers = sum(number for number in range(start, end + 1) if number % divisor == remainder)\n    \n    return sum_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # grams\n    sugar_concentration = 0.48\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    num_repeat = 9\n    value_to_add = 5\n    ans = sum([value_to_add] * num_repeat)\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Using the concept of arithmetic sequences and the theorem of the middle term\n    # Let the age of the youngest dwarf be 'a'\n    # Then, the ages are: a, a+1, a+2, ..., a+6\n    # Sum of ages of youngest three dwarfs: a + (a+1) + (a+2) = 42\n    # Simplifying: 3a + 3 = 42; hence a = (42 - 3) / 3 = 13\n\n    # Age of the oldest three dwarfs: (a+4) + (a+5) + (a+6)\n    youngest_age = (42 - 3) / 3\n    oldest_three_sum = (youngest_age + 4) + (youngest_age + 5) + (youngest_age + 6)\n    \n    return int(oldest_three_sum)\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n    equation = Eq(abcd + abc + ab + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n\n    return solutions[abcd]\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractions_sum = 4/5 * (19 + 199 + 1999 + 19999 + 199999)\n    return fractions_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    return (5 / 8) * 408\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    years_to_add = (35 - (janice_age + sister_age)) / 2\n    return int(years_to_add)\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_for_remaining_test = total_marks_for_3_tests - 172\n    return marks_for_remaining_test\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += sum([j / i for j in range(1, i + 1)])\n        ans += sum([(i - j) / i for j in range(1, i)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbol for the total number of sweets\n    total = symbols('total')\n\n    # Given conditions\n    condition1 = Eq(6, (2/7) * (3/4) * total)\n\n    # Solve for the total number of sweets\n    sweets_total = solve(condition1, total)[0]\n    \n    return sweets_total\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + 2*y, 60)\n    equation2 = Eq(2*x - 16, 60)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    num = 1000 - 630\n    return num\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5*(son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3  \n    ans = factorial(num_books)\n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutation for the remaining three people\n    perm_others = factorial(3)\n    \n    # Calculate the number of positions A can take (not the first or last)\n    positions_A = 3\n    \n    # Calculate the total combinations by multiplying the permutations and positions\n    total_combinations = perm_others * positions_A\n    \n    return total_combinations\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    from math import ceil, log2\n    \n    num_people = 16\n    \n    # In a knockout tournament, each round eliminates half the players. \n    # So, the number of rounds needed is the number of times we can divide the \n    # player count by 2 until only one person remains.\n    num_rounds = ceil(log2(num_people))\n   \n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Given that pink flowers are 7 fewer than yellow flowers\n    # and there are 3 pink flowers, we can find the number of yellow flowers\n    yellow_flowers = 3 + 7\n    \n    # Given that the number of red flowers is 3 times that of yellow flowers\n    # we can find the number of red flowers\n    red_flowers = 3 * yellow_flowers\n    \n    # The total number of red and yellow flowers is the sum of both\n    total_flowers = red_flowers + yellow_flowers\n    \n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    boys, girls = symbols('boys girls')\n\n    # From the first condition, we know that the number of boys is 50% more than the number of girls.\n    # So we can write the equation boys = 1.5 * girls\n    morning_equation = Eq(boys, 1.5 * girls)\n\n    # Later in the afternoon, 12 boys and 12 girls joined the group.\n    # We have new values for boys and girls\n    boys_afternoon = boys + 12\n    girls_afternoon = girls + 12\n\n    # The ratio of the number of boys to girls became 19 : 14.\n    # So we can write the equation boys_afternoon/girls_afternoon = 19/14\n    afternoon_equation = Eq(boys_afternoon/girls_afternoon, 19/14)\n\n    # Solve the system of equations to find the number of boys and girls in the morning\n    solutions = solve((morning_equation, afternoon_equation), (boys, girls))\n\n    # Extract the solutions\n    num_boys = solutions[boys]\n    num_girls = solutions[girls]\n\n    # Calculate the total number of children in the Botanic Gardens in the afternoon\n    total_afternoon = num_boys + 12 + num_girls + 12\n\n    # Return the total number of children\n    return total_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Scheduled arrival time\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n\n    # Delay duration\n    delay = timedelta(minutes=30)\n\n    # Actual arrival time\n    actual_time = scheduled_time + delay\n\n    # Format to match desired output (HH:MM am/pm)\n    ans = actual_time.strftime('%I:%M %p')\n\n    return ans\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for ages\n    a1, a2, a3, a4, a5 = symbols('a1 a2 a3 a4 a5')\n\n    # We know that the mode is 7, which means at least two students are 7 years old\n    # We also know that the median is 8, which means the middle value when ordered is 8\n    # The range of their ages is 6, which means max_age - min_age = 6\n    # The mean age is 9, so the sum of ages/5 = 9\n\n    # Create the equations based on the given information\n    equation1 = Eq((a1 + a2 + a3 + a4 + a5), 9 * 5)  # total sum of ages\n    equation2 = Eq(a3, 8)  # the median age is 8\n    equation3 = Eq(a1, 7)  # one student is definitely 7 since mode is 7\n\n    # Let's suppose that the order of ages is a1 <= a2 <= a3 <= a4 <= a5\n    # And the 2nd oldest could be a4 or a5, but we know a3 = 8 so a4 is definitely the 2nd oldest\n\n    ages_ordered = [a1, a2, a3, a4, a5]\n\n    # Suppose two students at least have an age of 7\n    possible_ages = [Eq(age, 7) for age in ages_ordered[:2]]\n\n    # We solve the system to find all ages\n    # The combination of equations and conditions is the following:\n    # equation1 (sum of ages)\n    # equation2 (median)\n    # equation3 (mode)\n    # equation4 (range of ages)\n    # We also respect an ordering a1 <= a2 <= ... <= a5 and a1 = 7, equation2 sets a3 = 8\n\n    solutions = solve((equation1, equation2, equation3, *possible_ages), (a1, a2, a3, a4, a5))\n\n    # We now filter only the solutions that meet the range condition (max age - min age = 6)\n    valid_solutions = [s for s in solutions if s[a5] - s[a1] == 6]\n\n    # Get the age of the second oldest member, as we sorted them\n    second_oldest_age = valid_solutions[0][a4]\n\n    return second_oldest_age\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # 1703: Two digits are correct and in their correct positions.\n    # 2745: Two digits are correct but in the wrong positions.\n    # 3541: All digits are correct but in the wrong positions.\n\n    # From clue 3 (3541), we know all digits in the mystery number, but with wrong positions.\n    # So the possible positions of digits 3, 5, 4, 1 in the mystery number can be derived.\n    possible_positions = {\n        '3': [1, 2, 4],  # Can't be in the third position\n        '5': [1, 2, 3],  # Can't be in the fourth position\n        '4': [1, 3, 4],  # Can't be in the second position\n        '1': [2, 3, 4]   # Can't be in the first position\n    }\n    \n    # Now we look at clue 1 (1703) and clue 2 (2745).\n    # Since two digits and their positions are correct in 1703 and two of these are wrong in 2745,\n    # one digit is common in both clues but with different position means this digit in the first clue is in correct place.\n\n    # Hence 7 and 0 from 1703 can't be in the number as they aren't in 3541.\n    # So the digits at the first and the third position is correct and must be 1 and 3 respectively.\n    # Hence the correct number is _1_3\n\n    # Now from clue 2 (2745), two digits 4 and 5 exist in the number but not at position 2 and 4.\n    # So, the correct number is 4153.\n\n    return 4153\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    original_ratio = Eq(apples/oranges, 3/8)\n    new_ratio = Eq((apples - 1)/oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    # go through every 3-digit number\n    for i in range(100, 1000):\n        str_num = str(i)\n        hundreds_digit, tens_digit, units_digit = int(str_num[0]), int(str_num[1]), int(str_num[2])\n        # check if the number is a V-number\n        if tens_digit < hundreds_digit and tens_digit < units_digit:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def derangement(n):\n        if n == 0: return 1\n        elif n == 1: return 0\n        else: return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    return derangement(6)\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    notebooks = 0\n    while (10 - notebooks) * 3 + notebooks * 9 <= 48:\n        notebooks += 1\n    notebooks -= 1  # Go back to the last valid solution\n    color_pencils = 10 - notebooks\n    return color_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_capacity = 9 * 36\n    total_students = 500\n    second_floor_students = total_students - first_floor_capacity\n    \n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    ratio = previous_term // 28\n\n    next_term = previous_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    num_zeros = 0\n\n    while n > 0:\n        n //= 5\n        num_zeros += n\n\n    return num_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of rounds played\n    x = symbols('x')\n\n    # Original number of cards\n    helen_original = 18\n    oliver_original = 22\n    \n    # After x rounds, Helen has 10 more cards than Oliver\n    # So, Helen has (18 + x) cards and Oliver has (22 - x) cards\n    equation = Eq(helen_original + x, oliver_original - x + 10)\n\n    # Solve for x\n    rounds_played = solve(equation, x)\n\n    # Calculate the number of cards Helen has now\n    helen_now = helen_original + rounds_played[0]\n\n    return helen_now\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first number in the sequence be x.\n    # Then the six consecutive even numbers are x, x+2, x+4, x+6, x+8, and x+10.\n    # The sum of these numbers is 6x + (2+4+6+8+10) = 6x + 30 = 510\n    # Solve for x to get the first number.\n    x = (510 - 30) // 6\n    \n    # Calculate all six numbers\n    numbers = [x + 2*i for i in range(6)]\n    \n    # The mean is the sum of the numbers divided by the number of numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # The median of an even number of terms is the average of the two middle terms\n    median = (numbers[2] + numbers[3]) / 2\n    \n    # The difference between the mean and the median is zero for a evenly spaced list of numbers\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up = 23\n    climb_down = 31\n    climb_up_again = 17\n\n    current_height = start_height + climb_up - climb_down + climb_up_again\n\n    return current_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes, strawberries + 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    x = symbols('x')\n\n    # Create the equation as per the problem statement\n    equation = Eq(3 * x - 8, 4)\n\n    # Solve the equation\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Subtracting 1 to exclude the number 1, as it is neither prime nor composite\n    composite_numbers = total_numbers - prime_numbers - 1 \n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    five_digit_multiples_of_nine = []\n\n    for number_tuple in permutations(digits, 5):\n        if number_tuple[0] != 0:  # Ensure the number is a five-digit number\n            number = int(''.join(map(str, number_tuple)))\n            if number % 9 == 0:\n                five_digit_multiples_of_nine.append(number)\n\n    M = max(five_digit_multiples_of_nine)\n    N = min(five_digit_multiples_of_nine)\n    return (M - N) // 9\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    n_diff = 12 - 4\n    common_difference = (twelfth_term - fourth_term) / n_diff\n    first_term = fourth_term - (4 - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    sorted_digits = sorted(digits, reverse=True)\n    ans = int(''.join(map(str, sorted_digits)))\n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = (30 * 0.3) + (20 * 0.2)\n    target_concentration = 0.10\n    target_total_weight = total_salt / target_concentration\n    grams_of_water_to_add = target_total_weight - (30 + 20)\n    return grams_of_water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n\n    difference = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To guarantee 29 balls of one color, we need to pick:\n    # 28 (not enough for any color) + 1 more of each existing color\n    # 28 * 3 + 1 + 1 + 1\n    balls_for_29 = 28 * 3 + 3\n\n    # The same logic applies to guarantee 28 balls of another color:\n    # We now have 1 guaranteed color, so we need to pick:\n    # 27 (not enough for any of the remaining two colors) + 1 more of each of the remaining colors\n    # 27 * 2 + 2\n    balls_for_28 = 27 * 2 + 2\n\n    # Lastly, to guarantee 10 balls of the last color, since we already have two guaranteed colors,\n    # we need to pick 9 + 1\n    balls_for_10 = 9 + 1\n\n    # The total number of balls to guarantee the condition is the sum of the above three quantities:\n    total_balls = balls_for_29 + balls_for_28 + balls_for_10\n\n    return total_balls\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Applying the Pigeonhole Principle:\n    # 4 different patterns, we want at least 3 cards with the same number.\n    # Worst case scenario is we get 2 cards of each number without repetition.\n    # That makes 2 cards x 4 patterns = 8 cards per number.\n    # So after drawing 2 cards of every number (8 cards per number x 12 numbers = 96 cards),\n    # the next card must be the third one of some number.\n\n    # Since there are only 52 cards to draw from, we have to find the first case where we have to draw the extra card.\n    # The last card that would complete a group of 8 (for a hypothetical 13th number, which we do not have) leads us to draw the third card of an existing number.\n\n    # Hence, to ensure at least 3 cards of the same number:\n    # 2 cards for each of the 12 numbers = 24 cards\n    # Then 1 more card to ensure the third card of the same number.\n    \n    return 24 + 1\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number_text = \"four million four hundred and four\"\n    number_dict = {\n        'four': 4,\n        'million': 1000000,\n        'hundred': 100,\n        'and': 0\n    }\n    # Break the text into parts and map each part to its respective value\n    parts = number_text.split()\n    total = 0\n    current_multiplier = 1\n    for part in reversed(parts):\n        if part in number_dict:\n            part_value = number_dict[part]\n            if part_value == 0:  # for 'and'\n                continue\n            elif part_value >= 100:  # 'million', 'hundred'\n                current_multiplier = part_value\n            else:\n                total += part_value * current_multiplier\n                current_multiplier = 1  # reset for next iteration if applicable\n    return total\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = sum(isprime(num) for num in range(1, 21))\n    total_cards = 20\n    \n    proportion = prime_count / total_cards\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, None, 7]\n    mean = 8\n    total_sum = mean * len(numbers)\n    missing_number = total_sum - sum(x for x in numbers if x is not None)\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote 'x' as the amount of solution transferred\n    x = symbols('x')\n\n    # Set up the equation based on the problem statement\n    # After transferring, Bottle A will have (5-x) litres of its original solution plus x litres of Bottle B's solution\n    # Similarly, Bottle B will have (3-x) litres of its original solution plus x litres of Bottle A's solution\n    # The final concentration of both bottles should be the same, hence we create an equation for concentrations\n    equation = Eq((5 - x) * 0.1 + x * 0.2, (3 - x) * 0.2 + x * 0.1)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51  # Remove the first term (1) and add the new last term (51)\n    return sum_2_to_51\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    \n    total_combinations = len(notebooks) * len(calendars)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    for num in range(1, 40):\n        if sum(range(num, num + 5)) == 40:\n            return num\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # The sum of the sequences is a geometric series where a = 123, and r = 1000+210+1\n    a = 123\n    r = 1231  # This is the factor increase each time we go from one term to the next\n\n    # Number of terms is 123\n    n = 123\n\n    # Sum of a geometric series: S_n = a(1 - r^n) / (1 - r), where n is the number of terms\n    # But note that we only need the hundreds digit, not the whole sum\n\n    # The hundreds digit will not change regardless of adding anything greater than 10000\n    # Hence, we should only consider the sum modulo 1000\n    # i.e., a * (1 - r^n % 1000) / (1 - r % 1000)\n    # The denominator (1 - r%1000) is not a problem since r%1000 would not be 1, and we can assume it is invertible modulo 1000.\n\n    S_mod_1000 = a * (1 - pow(r, n, 1000)) % 1000\n\n    # Get the hundreds digit\n    hundreds_digit = (S_mod_1000 // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    from math import gcd\n    \n    # length and breadth ratio of the painting\n    length_ratio = 5\n    breadth_ratio = 2\n\n    # Original length of the painting\n    original_length = 90\n\n    # New length of the lego\n    lego_length = original_length - 70.5\n\n    # Find the greatest common divisor for the new length\n    common_divisor = gcd(int(lego_length * breadth_ratio), length_ratio)\n\n    # Reduce the lego breadth to its maximum size that maintains the ratio\n    max_lego_breadth = (lego_length * breadth_ratio) / common_divisor\n\n    return max_lego_breadth\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\n    for perm in permutations(students):\n        # Find the index for A, B, C, D, E, F, G in the permutation\n        a_i = perm.index('A')\n        b_i = perm.index('B')\n        c_i = perm.index('C')\n        d_i = perm.index('D')\n        e_i = perm.index('E')\n        f_i = perm.index('F')\n        g_i = perm.index('G')\n        \n        # Check if C is between A and B and D, E are consecutive as well as F, G\n        if a_i < c_i < b_i or b_i < c_i < a_i:\n            if abs(d_i - e_i) == 1 and abs(f_i - g_i) == 1:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    # Total amount Zoey had originally in cents\n    original_amount = 50 + 20 + 10 + 5\n    # List of the value of coins she might have lost\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        # Amount remaining after losing one coin\n        remaining_amount = original_amount - coin\n        # Check if remaining amount is twice as much as her brother's amount\n        if remaining_amount == 2 * (original_amount - remaining_amount):\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Time for Johnson to finish the race\n    johnson_time = symbols('johnson_time')\n    \n    # Distance = Speed * Time\n    # Johnson's equation\n    eq1 = Eq(600 * johnson_time, 3000)\n    \n    # Vicky's time to finish the race will be johnson_time plus some extra minutes\n    vicky_time = johnson_time + symbols('extra_minutes')\n    \n    # Vicky's equation\n    eq2 = Eq(250 * vicky_time, 3000)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (johnson_time, 'extra_minutes'))\n    \n    # We want the value for 'extra_minutes'\n    ans = solution['extra_minutes']\n    \n    return ans\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's finish line\n    jaan_speed = 8  # Jaan's speed in meters per second\n    kane_distance = jaan_distance - 12.5  # Kane's distance when Jaan finished\n\n    # Time taken for Jaan to finish the race\n    jaan_time = jaan_distance / jaan_speed\n\n    # Kane's speed\n    kane_speed = kane_distance / jaan_time\n\n    return round(kane_speed, 2)\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # converting pence to pounds\n\n    total_price = cake_price + milk_price\n    amount_to_pay = total_price - voucher\n\n    return amount_to_pay\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_rate = 12\n    overtime_multiplier = 1 + 1/4\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n\n    normal_pay = normal_hours * normal_pay_rate\n    overtime_pay_rate = normal_pay_rate * overtime_multiplier\n    overtime_pay = overtime_hours * overtime_pay_rate\n\n    total_pay = normal_pay + overtime_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The 99-digit number is (928) repeated 33 times\n    repeated_times = 99 // 3\n    \n    # The number 928 leaves a remainder of 1 when divided by 9\n    # (since 9 + 2 + 8 = 19 and 19 % 9 = 1)\n    remainder_per_set = 928 % 9\n    \n    # The remainder of the whole number is 33 times the remainder of one set\n    total_remainder = (remainder_per_set * repeated_times) % 9\n    \n    return total_remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    expr = 1 / (1 + 1 / (2 + 1 / (3 + 1/x))) - 30/43\n    \n    solution = solve(expr, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the work rates of John, Raj, and Pete as J, R, and P respectively.\n    J, R, P = symbols('J R P')\n\n    # As per the question, the sum of their rates is the reciprocal of the time taken to finish the job\n    # Together, they finish the job in 1 hour: J + R + P = 1/1\n    equation1 = Eq(J + R + P, 1)\n\n    # John and Raj together take 1 hr 12 min (which is 72 minutes), so their combined rate is J + R = 1/(72/60)\n    equation2 = Eq(J + R, 1 / (72 / 60))\n\n    # Raj and Pete together take 1 hr 30 min (which is 90 minutes), so their combined rate is R + P = 1/(90/60)\n    equation3 = Eq(R + P, 1 / (90 / 60))\n\n    # Now we solve the three equations to find the value of R\n    solutions = solve((equation1, equation2, equation3), (J, R, P))\n\n    # Raj's individual rate is R. We find out how long (in minutes) will Raj take to finish the job by himself\n    # Time taken by Raj alone will be the reciprocal of his work rate multiplied by 60 (to convert hours to minutes)\n    time_taken_by_raj = 60 / solutions[R]\n\n    return time_taken_by_raj\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Taking worst case scenarios in account, one could pick:\n    # - 2 white, and not have 3 of the same color\n    # - 2 blue, and still not have 3 of the same color\n    # - 2 green, and still not have 3 of the same color\n    # At this stage, you have picked 2 of each of the white, blue, and green balls.\n    # No matter what color you pick next, you will have at least 3 of that color.\n\n    # Mathematically, it looks like this:\n    # 2 white + 2 blue + 2 green + 1 (of any color to ensure three of the same color)\n    balls_needed = 2 + 2 + 2 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):  # The tens digit must be 1-9\n        for ones in range(10):  # The ones digit must be 0-9\n            original_number = 10 * tens + ones\n            new_number = 10 * ones + tens\n            if new_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from math import sqrt\n    # Total matches is 30, each team plays each of the other teams twice\n    # total_matches = n*(n-1) / 2, where n = number of teams\n    # Solving the equation 30 = n*(n-1), as each match is counted twice\n\n    # number_of_teams^2 - number_of_teams - 60 = 0\n    # We use the quadratic formula to solve for number_of_teams\n    # The quadratic formula is x = (-b + sqrt(b^2 - 4ac)) / (2a), where a = 1, b = -1, c = -60\n\n    a = 1\n    b = -1\n    c = -2 * 30  # times 2 because every match is counted twice\n\n    discriminant = b**2 - 4*a*c\n    positive_solution = int((-b + sqrt(discriminant)) / (2*a))\n\n    return positive_solution\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    kg_per_box = 14 / boxes_for_14kg\n\n    boxes_needed = total_kg / kg_per_box\n\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum_ages = 34\n    future_sum_ages = 40\n    years_later = future_sum_ages - current_sum_ages\n    return years_later\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the circumference of the tree and y be the length of the rope.\n    x, y = symbols('x y')\n    \n    # According to the problem:\n    # 10 turns leaving 3 meters -> 10 * x = y + 3\n    equation1 = Eq(10 * x, y + 3)\n    \n    # 12 turns missing 3 meters -> 12 * x = y - 3\n    equation2 = Eq(12 * x, y - 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Now find how many meters are left after 8 turns\n    # 8 turns -> 8 * x = length of rope left\n    return solutions[y] - 8 * solutions[x]\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Maximum number of participants such that no country has 5 people\n    max_participants = (5 - 1) * 11\n    # At minimum one more participant will ensure at least one country has 5 participants.\n    min_participants_needed = max_participants + 1\n    return min_participants_needed\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = -(-students // tables_per_row)  # Ceiling division\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        E2 = A + B\n        E1 = B + C\n        F1 = C + D\n        F2 = D + B\n        G1 = A + C + E2 // 10\n        G2 = E1 // 10 + F1 // 10 + A + D\n        if E2 % 10 == D and E1 % 10 == A and F1 % 10 == E1 // 10 and F2 == G1 and G2 < 10:\n            return sum(p)\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    # There are 1000 four-digit numbers from 1000 to 1999.\n    total_numbers = 1000\n\n    # Numbers greater than 1499 start from 1500 to 1999.\n    # Hence, we need to count numbers in the inclusive range from 1500 to 1999.\n    greater_numbers_count = 1999 - 1500 + 1\n\n    # Calculate the probability.\n    probability = greater_numbers_count / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty - nora, 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    spent = (3/7) * total_money\n    not_spent = total_money - spent\n    difference = spent - not_spent\n\n    equation = Eq(difference, 12)\n\n    total_money_solution = solve(equation, total_money)[0]\n    amount_spent_on_bag = (3/7) * total_money_solution\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    original_number = (final_number - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # let x be the age of the youngest dwarf\n    # then the ages of the youngest three are x, x+1, and x+2\n    # their sum is 42: x + (x+1) + (x+2) = 42\n    # solving for x gives us x = 13\n\n    # since there are seven consecutive ages (arithmetic sequence),\n    # the middle age is the fourth one: 13 + 3 = 16\n\n    # the ages of the oldest three dwarfs will then be 16+1, 16+2, and 16+3\n    # their sum is (16+1) + (16+2) + (16+3) = 48 + 9 = 57\n\n    return 57\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    def custom_operation(a, b):\n        # Start from b-1 and go down to 1, subtract each from the number a\n        for i in range(b-1, 0, -1):\n            a -= i\n        return a\n    \n    # Use the defined function to calculate 111 odot 7\n    ans = custom_operation(111, 7)\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    total_toys = 659\n    a_b_toys = 447\n    b_c_toys = 335\n\n    # Equation:\n    # a + b + c = total_toys\n    # a + b = a_b_toys\n    # b + c = b_c_toys\n    # We need to find 'b' from these equations.\n\n    # a + b + c - (a + b) = total_toys - a_b_toys => c = total_toys - a_b_toys\n    c = total_toys - a_b_toys\n\n    # b = b_c_toys - c\n    b = b_c_toys - c\n\n    return b\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = set()\n    \n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    # Let's assume the number of boys is x.\n    # Then the number of girls will be x + 30.\n    # Therefore, we have x + (x + 30) = 500.\n    \n    # Solving the equation for x gives us:\n    x = (total_pupils - 30) / 2\n\n    # The number of girls is x + 30\n    number_of_girls = x + 30\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n\n    total_sausages_initial = initial_trays * initial_mean\n    total_trays_now = initial_trays + 1\n    total_sausages_now = total_sausages_initial + additional_sausages\n\n    new_mean = total_sausages_now / total_trays_now\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    \n    # Loop over the hundreds and units place as they are required to be higher than the tens place\n    for hundreds in range(1, 10): # Hundreds place: 1-9 (0 is not allowed for a 3-digit number)\n        for tens in range(0, 10): # Tens place: 0-9\n            for units in range(0, 10): # Units place: 0-9\n                if hundreds > tens and units > tens: # Check for V-number condition: high-low-high\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (137 + 263) / 20  # Speed of the train in m/s\n\n    # Let the length of the second bridge be x\n    # 137 (length of train) + x (length of second bridge) = speed * 27\n    length_of_second_bridge = (speed * 27) - 137\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    equal_amount = total // 2\n    amount_to_give = brenda - equal_amount\n\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue + red, 125)\n    equation2 = Eq(2/5 * blue, 3/5 * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator/denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Each student gets one book, leaving 4 books to be distributed\n    total_ways = 0\n    # Case 1: One student gets the 4 books\n    total_ways += 3 * combinations(7, 4)\n    # Case 2: One student gets 3 books, another one gets 1 book\n    total_ways += combinations(3, 2) * combinations(7, 3) * combinations(4, 1)\n    # Case 3: Two students get 2 books each\n    total_ways += combinations(3, 2) * combinations(7, 2) * combinations(5, 2)\n\n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n\n    # Create equations based on the information provided\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Assign initial pieces to each child to satisfy the at least one piece condition\n    initial_pieces = [i for i in range(1, 9)] # 1 to 8\n    remaining_pieces = 88 - sum(initial_pieces)\n    \n    # Distribute the remaining pieces starting from the child with the most\n    i = 7\n    while remaining_pieces > 0:\n        initial_pieces[i] += 1\n        remaining_pieces -= 1\n        # Move to the next child that receives the least pieces\n        i -= 1\n        if i < 0:  # Once at the first child, restart from the child with the most\n            i = 7\n\n    # The child with the most pieces is at index 7\n    most_pieces = initial_pieces[7]\n    return most_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    def square_sum(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    ans = square_sum(100 // 5) - square_sum(0)\n    return ans\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    daughter_age_in_1996 = 40\n    years_between_1996_and_2008 = 2008 - 1996\n    \n    # Age of daughter when grandmother was 80 - Difference in their ages during this time\n    daughter_age_in_2008 = daughter_age_in_1996 + years_between_1996_and_2008\n    \n    # Grandmother's age when her daughter was born\n    grandmothers_age_when_daughter_born = grandmother_age_in_2008 - daughter_age_in_2008\n\n    return grandmothers_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # A can pass to 3 different people initially\n    initial_passes = 3\n    # After the first pass, the second person can pass to 2 others (not A and not themselves)\n    second_passes = 2\n    # The third person can only pass it back to A, so there's only 1 option\n    third_passes = 1\n    \n    # The number of different methods is the product of the possibilities at each step\n    count = initial_passes * second_passes * third_passes\n    \n    return count\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.80 + 4/5 * 100/100\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200 * 0.35\n    lenny_solution = 300 * 0.50\n    total_salt = leroy_solution + lenny_solution\n    total_solution = 200 + 300\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of candies Mike has as m and Valeria as v\n    m, v = symbols('m v')\n    \n    # If they eat the same amount of candy, Mike will have m - x = 6 candies left\n    # Valeria will have v - x = 22 candies left\n    # They have 36 candies in total, so m + v = 36\n    # We need to find x such that both equations are satisfied\n    \n    # We'll need three equations to solve for three variables (m, v, x)\n    equation1 = Eq(m + v, 36) # Total number of candies they have\n    equation2 = Eq(m - v, 6 - 22) # The difference after eating the same amount x\n    \n    # Now we solve the system of equations for m and v\n    solutions = solve((equation1, equation2), (m, v))\n    \n    # We only need the value of v\n    return solutions[v]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300  # 300g of sugar solution\n    sugar_percent = 0.35  # 35% of the solution is sugar\n    \n    sugar_weight = total_weight * sugar_percent  # Calculate the weight of the sugar\n    water_weight = total_weight - sugar_weight  # The rest is the weight of the water\n    \n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # We have 12^50 > k^75\n    # Taking the 50th root on both sides gives us 12 > k^(75/50) = k^(3/2)\n    # Now, we take the square on both sides to get rid of the exponent 3/2 on k\n    # 12^2 > k^3\n    # Now we need to calculate 12^2\n    twelve_squared = 12 ** 2\n    \n    # We need to find the largest whole number k > 0 such that k^3 < 144\n    # We will use a simple loop to find the largest integer k that satisfies the condition\n    k = 1\n    while (k ** 3) < twelve_squared:\n        k += 1\n    # Since we are looking for the largest whole number less than 144^(1/3),\n    # the current k is now too large (because while loop exits when k ** 3 is not less than 144),\n    # so we subtract 1 from k to find the largest acceptable value\n    k -= 1\n    \n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    thrown_away = 34\n    bought = 25\n    final_count = 133\n\n    initial_count = final_count - bought + thrown_away\n\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    # Define the operation Psi according to the given rules\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    # Calculate the value of (14 Psi 13) Psi 12\n    result = psi(psi(14, 13), 12)\n\n    return result\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(8)  # Total ways to arrange 8 people\n\n    # Case 1: A and B are next to each other\n    # Treat A and B as one person, then we have 7 entities to arrange\n    ways_with_AB_together = factorial(7)\n\n    # Case 2: C and D are next to each other (which we want to subtract from other cases)\n    # Treat C and D as one person, then we have 7 entities to arrange\n    ways_with_CD_together = factorial(7)\n\n    # Case 3: A and B are next to each other, and C and D are next to each other\n    # Treat AB as one person and CD as one person, then we have 6 entities to arrange\n    ways_with_AB_CD_together = factorial(6)\n\n    # The final answer is:\n    #   total arrangements of AB together (case 1)\n    # - those in which CD also end up together (case 2)\n    # + those in which AB and CD are each treated as a single unit (case 3)\n    # (case 3 is added because it was subtracted twice in case 1 and case 2)\n    ans = ways_with_AB_together * 2 * factorial(6) - ways_with_CD_together * 2 * factorial(6) + ways_with_AB_CD_together * 2 * factorial(4)\n\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    overall_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be x\n    # Then the number of boys is total_students - x\n\n    # We set up the equation based on the total score\n    # Total score is the sum of girls' scores and boys' scores\n    # (girls_average * x) + (boys_average * (total_students - x)) = overall_average * total_students\n    # 88x + 91(36 - x) = 89 * 36\n\n    # Solve for x\n    x = (boys_average * total_students - overall_average * total_students) / (boys_average - girls_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # We know the number of legs for cats, dogs, and the rabbit\n    legs_from_cats = 2 * 4  # 2 cats, 4 legs each\n    legs_from_dogs = 2 * 4  # 2 dogs, 4 legs each\n    legs_from_rabbit = 1 * 4  # 1 rabbit, 4 legs\n\n    # Calculate the legs brought by the birds\n    legs_from_birds = 28 - (legs_from_cats + legs_from_dogs + legs_from_rabbit)\n\n    # Since birds have 2 legs each, divide the total bird legs by 2 to get the number of birds\n    num_birds = legs_from_birds // 2\n\n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_people = 5\n    original_hours = 6\n    target_hours = 5\n    fence_length_multiplier = 2\n\n    # Calculate the total person-hours needed to paint my fence\n    original_person_hours = original_people * original_hours\n\n    # Calculate the person-hours needed for the neighbor's fence\n    neighbor_person_hours = original_person_hours * fence_length_multiplier\n    \n    # Calculate the minimum number of people needed\n    # We divide the total person-hours by the target hours and take the ceiling,\n    # because we can't have a fraction of a person and we need to meet the less than 5 hours condition.\n    min_people = -(-neighbor_person_hours // target_hours)\n    \n    return min_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    # Given that Alison walks from the first floor to the fifth floor in 12 minutes.\n    # It means Alison walks up 4 flights of stairs in 12 minutes (since one flight leads from one floor to the next).\n    # We need to find out how many flights Alison can walk in 30 minutes.\n\n    # Calculate the number of flights per minute\n    flights_per_minute = 4 / 12\n\n    # Calculate the total number of flights Alison can walk in 30 minutes\n    total_flights_in_30_min = flights_per_minute * 30\n\n    return int(total_flights_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_new_amount = cookies_per_gram * 21.6\n    return cookies_with_new_amount\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int('12345654321', 8)\n    # Calculate the remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    # Return the sum of the remainders\n    ans = remainder_7 + remainder_9\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n    \n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    # Every year, each cat grows older by one year.\n    # In three years, each cat has aged three years, so their combined age increases by 3 * 2\n    # Additionally, in four more years, each cat will age four more years.\n    increase = 3 * 2 + 4 * 2\n    combined_age_in_four_years = combined_age_three_years_ago + increase\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for the book and magazine prices\n    book, magazine = symbols('book magazine')\n    \n    # Two equations based on the information given:\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    # Solving the equations for book and magazine prices\n    solved_values = solve((equation1, equation2), (book, magazine))\n    \n    # We want the price of one magazine\n    return solved_values[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (1/6) * n * (n + 1) * (n + 2)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    exponents = [exponent + 1 for exponent in factors.values()]\n    num_divisors = 1\n    for exp in exponents:\n        num_divisors *= (exp // 2) + (exp % 2)\n    \n    return num_divisors\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    n = 60 // 3\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_pail, small_pail = symbols('big_pail small_pail')\n    \n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n    \n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    # As each letter stands for a unique digit, we will try each possibility for A, B, C, and D\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    # Ensure all digits are different\n                    if len(set([A, B, C, D])) == 4:\n                        # Construct the numbers from the digits and check if they add up to 726\n                        if A*101 + B*10 + C*101 + D*10 == 726:\n                            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # In the worst case scenario, Annabella may take out all the shirts of other colors before getting a yellow one.\n    # Calculate the number of all other shirts (orange, pink, brown)\n    non_yellow_shirts = 6 + 4 + 12\n    # She needs to take one more shirt to be sure it's yellow, so add 1 for the yellow shirt.\n    return non_yellow_shirts + 1\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "import math\n\ndef solution():\n    total_pens_needed = 70 * 3\n    packs_needed = math.ceil(total_pens_needed / 8)\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    result = 9 + 4/5 + 99 + 4/5 + 199 + 4/5 + 2999 + 4/5 + 39999 + 4/5 + 1\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Analyzing the pattern, we notice that the difference between \n    # 94 and 80 is 14, and between 80 and 73 is 7.\n    # The difference seems to be decreasing by 7 each time.\n    \n    # The difference between 94 and the missing number should therefore be 14 + 7 = 21.\n    # The missing number is 94 - 21.\n    \n    missing_number = 94 - 21\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    age = 1  # We start with the smallest possible age that gives a reminder of 1\n    while True:  # Continue this loop until we find the answer\n        if (age % 2 == 1 and age % 3 == 1 and age % 4 == 1 \n                and age % 6 == 1 and age % 7 == 0):\n            return age\n        age += 1  # Increment age by 1 and test again.\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    \n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    \n    total_ml_sold = (wine_glasses_sold * wine_glass_ml) + (tumblers_sold * tumbler_ml)\n    \n    cartons_needed = total_ml_sold / (1 * 1000)  # 1 litre is 1000 ml\n    \n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    power = 859433\n    last_digit = pow(2, power, 10)\n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    facing = 0\n    for i in range(1, 61):\n        if i % 3 != 0 and i % 5 != 0:  # Not multiples of 3 or 5, facing the teacher\n            facing += 1\n        elif i % 3 == 0 and i % 5 == 0:  # Multiples of both 3 and 5, facing the teacher\n            facing += 1\n    return facing\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    age = 1\n    while True:\n        if age % 2 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 5:\n            break\n        age += 1\n    return age\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define variables for initial numbers of avocados, peaches, and lemons\n    a, p, l = symbols('a p l')\n\n    # Set up the equations based on the given problem\n    equation1 = (a - 52) / (p - 12) / (l - 60)  # The new ratio after selling\n    equation2 = (p - 12) / (l - 60) - 6 / 5     # New ratio of peaches to lemons\n    equation3 = a / p / l - 2 / 9 / 8           # Original ratio of avocados to peaches to lemons\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, p, l))\n\n    # We need to make sure our solution is in whole numbers and positive\n    for solution in solutions:\n        if all(map(lambda x: x.is_real and x > 0, solution)):\n            valid_solution = solution\n            break\n\n    # Calculate the total number left\n    total_left = (valid_solution[0] - 52) + (valid_solution[1] - 12) + (valid_solution[2] - 60)\n    \n    return total_left\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    equation1 = Eq(jill, 6/5 * jess)\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    for num_digits in range(7, 0, -1):\n        for perm in permutations(range(1, 8), num_digits):\n            number = int(''.join(map(str, perm)))\n            if all(number % digit == 0 for digit in perm):\n                return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    # Initialize variables to keep track of the sum and length of current sequence\n    max_length = 0\n\n    # Iterate through possible starting points of consecutive odd numbers\n    for i in range(1, 901, 2):\n        total = 0\n        length = 0\n        \n        # Starting with the given odd number, add consecutive odd numbers\n        for j in range(i, 901, 2):\n            total += j\n            length += 1\n            # If the sum is greater than 900, no need to continue the inner loop\n            if total > 900:\n                break\n            # Check if the sum equals 900 and update max_length if the current sequence is longer\n            if total == 900:\n                max_length = max(max_length, length)\n                break\n\n    return max_length\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Variables for the sums of pairs\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    # Calculate the sum of the weights of Adam, Ben and Carl twice\n    # This is because if we sum all the pairs, each person's weight is counted twice\n    total_double = adam_ben + ben_carl + adam_carl\n\n    # Divide by 2 to find the actual total weight\n    total_weight = total_double // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    number = 120\n    while True:\n        number += 1\n        if number % 53 == 2:\n            return number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_number = min(numbers)\n    return smallest_number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_meters = 2\n    height_centimeters = 2\n    height_total_meters = height_meters + (height_centimeters / 100.0)\n    return height_total_meters\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n    total_score = first_test_score + second_test_score + third_test_score\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    interest_rate = 0.03\n    time_years = 2\n\n    # Compound interest for the amount of time specified\n    amount = principal * ((1 + interest_rate) ** time_years)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(6*pupils - bookmarks, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):  # Loop through all hour possibilities\n        for minute in range(60):  # Loop through all minute possibilities\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:  # Check if there are at least two '4's\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    ans = isprime(233)\n\n    return ans\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum((7*i)**2 for i in range(1, 16))\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    prime_list = list(primerange(130, 151))\n    return len(prime_list)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else (56 // 4 + 1)\n    last_multiple = 92 // 4\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 100:\n        return num\n        num += 3 * 4 * 5  # LCM of divisors\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Distance between Magic Town and Super Town\n    distance = 144  # km\n    \n    # Time taken to travel downstream\n    time_downstream = 8  # h\n    \n    # Speed of the ship in still water\n    speed_ship = 15  # km/h\n    \n    # Downstream speed (including current speed)\n    speed_downstream = distance / time_downstream  # km/h\n    \n    # Speed of the current\n    speed_current = speed_downstream - speed_ship  # km/h\n    \n    # Speed of the ship upstream (against current)\n    speed_upstream = speed_ship - speed_current  # km/h\n    \n    # Time taken to travel upstream\n    time_upstream = distance / speed_upstream  # h\n    \n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    n_students = 15\n    r_students = 2\n    n_ways = comb(n_students, r_students)\n    return n_ways\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo, kangaroo = symbols('hippo kangaroo')\n\n    equation1 = Eq(hippo, kangaroo + 45)\n    equation2 = Eq(20 * hippo, 10 * 20 * kangaroo)\n\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n\n    return solutions[hippo] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    waiting_time_minutes = 1 * 60 + 25  # convert 1h25min to minutes\n    meeting_time_minutes = 3 * 60 + 15 + waiting_time_minutes  # convert 3:15 pm to minutes and add waiting time\n\n    meeting_hour = meeting_time_minutes // 60\n    meeting_minute = meeting_time_minutes % 60\n\n    # In case the meeting time is later than 12:00 am (midnight)\n    if meeting_hour >= 24:\n        meeting_hour -= 24\n\n    # In case the meeting time is later than 12:00 pm\n    meeting_hour %= 12\n\n    # Format the meeting time to standard 12-hour clock format\n    if meeting_hour == 0:\n        meeting_hour = 12\n\n    return f'{meeting_hour:02d}:{meeting_minute:02d}'\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum([sum([i/j for j in range(i+1, 21)]) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure two balls of the same color, we have to consider the worst-case scenario\n    # where we are taking out balls of different colors alternately.\n    # Since there are only two colors, if we take out one more than the total\n    # number of colors, we're guaranteed to have at least two of the same color.\n    \n    # We take out one green ball and one blue ball, still no guarantee of having two of the same color.\n    # So, we take out one more ball (it doesn't matter which color),\n    # and now we are guaranteed to have at least two balls of the same color.\n    balls_needed = 2 + 1  # One green, one blue, and one more of any color\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # If there are at least 11 students who share the same zodiac sign,\n    # we need to account for the worst-case scenario where each of the\n    # 12 zodiac signs is as evenly distributed among the students as possible\n    # before an 11th student for any sign appears.\n    \n    # This means we can have 10 students for each of the 12 signs,\n    # which is 10 * 12 = 120 students in total before adding another\n    # student guarantees an 11th of the same sign.\n    # Therefore, we need one more student to guarantee the 11th of some sign.\n    ans = (10 * 12) + 1\n    return ans\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Based on the Pigeonhole Principle, if we want to take out at least 10 balls of the same color,\n    # we have to consider the worst-case scenario.\n    # In the worst case, we take out all the yellow and white balls but still don't have 10 of the same color.\n\n    # Therefore, we take all 5 yellow balls and all 15 white balls.\n    yellow_and_white = 5 + 15\n\n    # Now, to ensure we have 10 of the same color (black in this case), we need to take out 9 more black balls.\n    # We've already taken out (yellow_and_white) balls, so we want the next 9 balls to be black.\n    black_balls_needed = 9\n\n    # The least number of balls we need to take out to be sure of 10 balls with the same color is:\n    least_number_balls = yellow_and_white + black_balls_needed + 1  # +1 to reach at least 10 black balls\n\n    return least_number_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % num_children\n\n    return last_child if last_child != 0 else num_children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Use the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n-1)d)\n    sum_of_terms = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    cycle_spaghetti = 7\n    cycle_apple_pie = 3\n\n    days_until_next_joint_meal = lcm(cycle_spaghetti, cycle_apple_pie)\n    \n    return days_until_next_joint_meal\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    have_dogs = 19\n    have_cats = 18\n    \n    # By the inclusion-exclusion principle\n    # Number who like both = Number of children with dogs + Number of children with cats - Total children\n    # To find the smallest possible number, we assume all children who have a dog or a cat are counted in the 30 children\n    both = (have_dogs + have_cats) - total_children\n    \n    return both\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_valid_arrangements(perms):\n    count = 0\n    for perm in perms:\n        if 'F' not in [perm[i+1] for i, x in enumerate(perm[:-1]) if x == 'G'] \\\n           and 'G' not in [perm[i+1] for i, x in enumerate(perm[:-1]) if x == 'F']:\n            count += 1\n    return count\n\ndef solution():\n    # Consider DE as one unit.\n    total_permutations = factorial(6)  # 7 - 1 because DE is one unit\n    \n    # Now, we must place A between B and C. We consider 3 cases:\n    # 1. BAC\n    # 2. CAB\n    # 3. ABC, ACB, BCA, CBA (both B and C can come before and after A)\n    # In each case, the other units can be in any permutations.\n    # We multiply by 2 to account for the permutations of D and E.\n    valid_permutations_BAC = 2 * total_permutations\n    valid_permutations_CAB = 2 * total_permutations\n    valid_permutations_ABC = 4 * 2 * total_permutations\n    \n    # Now we have the total permutations without accounting for F and G constraint.\n    total_valid_permutations = valid_permutations_BAC + valid_permutations_CAB + valid_permutations_ABC\n    \n    # Now we need the permutations of the units excluding F and G.\n    units = [\"BAC\", \"CAB\", \"ABC\", \"ACB\", \"BCA\", \"CBA\", \"DE\"]\n    perms = permutations(units)\n    count = count_valid_arrangements(perms)\n    \n    # Multiply the count by the number of ways F and G can be arranged in each valid permutation.\n    ans = count * (total_valid_permutations // factorial(7))\n    return ans\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n    \n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = total_length // cloak_length\n    cloaks_widthwise = total_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance of the place from the original departure point.\n    distance = 120  \n\n    # Speed of the motorcycle driver while going to the place.\n    speed_going = 20  \n\n    # Expected average speed for the whole trip.\n    avg_speed = 30  \n\n    # Time taken to reach the place.\n    time_going = distance / speed_going  \n\n    # Total time for the round trip at the expected average speed.\n    total_time = (2 * distance) / avg_speed  \n\n    # Time remaining for the return trip.\n    time_returning = total_time - time_going  \n\n    # Speed required on the return trip to meet the expected average speed.\n    speed_returning = distance / time_returning  \n\n    return speed_returning\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    result, _ = solve_congruence(*congruences)\n    \n    # Since result is the smallest number that satisfies all the congruences, \n    # we need to increment it to have a number between 400 and 800.\n    while result < 400:\n        result += 5 * 6 * 11  # The least common multiple of 5, 6, and 11.\n\n    return result\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    # Given Nell's share is 24 sweets and the ratio is 4:5\n    nell_ratio = 4\n    # We know that Nell's share corresponds to the first part of the ratio\n    nell_sweets = 24\n    # Calculate Joe's share based on the ratio\n    joe_ratio = 5\n    joe_sweets = (nell_sweets / nell_ratio) * joe_ratio\n\n    # Total sweets is the sum of Nell's and Joe's sweets\n    total_sweets = nell_sweets + joe_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    \n    for i in range(1, 35):\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's daily work rate\n    rate_A = 1 / 15\n    # Worker B's daily work rate\n    rate_B = 1 / 20\n    \n    # Combined work rate for A and B together\n    combined_rate = rate_A + rate_B\n    \n    # Total work done by A and B in 2 days\n    work_done_2_days = 2 * combined_rate\n    \n    # Remaining work after 2 days\n    remaining_work = 1 - work_done_2_days\n    \n    # Number of days for worker A to finish the remaining job\n    days_for_A_to_finish = remaining_work / rate_A\n    \n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut\n    # To cut into 5 pieces requires 4 cuts (since each cut creates an additional piece)\n    # So, we just multiply the time taken for 1 cut by the number of cuts needed\n    time_per_cut = 2\n    cuts_needed = 5 - 1  # because we need one less cut than the number of pieces\n    total_time = time_per_cut * cuts_needed\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming the table mentioned is an arithmetic sequence.\n    # Since no concrete example of the table is provided, I will use general terms.\n    # a is the first term of the sequence\n    # d is the common difference between the terms\n    # n is the number of terms in the sequence\n\n    # The sum of an arithmetic sequence can be found by the formula: S_n = n/2 * (2a + (n - 1)d)\n    # However, with no concrete numbers given, I cannot provide a specific answer.\n    # If a specific sequence was given, for example, 1, 3, 5, 7..., we can calculate its sum.\n    \n    # Example:\n    a = 1  # first term\n    d = 2  # common difference\n    n = 10  # number of terms\n\n    sum_numbers = n / 2 * (2 * a + (n - 1) * d)\n    return int(sum_numbers)\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # Average of three numbers is 120, so the sum of these numbers is 3 * 120\n    current_sum = 3 * 120\n    # We want the new average to be 110 after adding a number, so the sum of numbers becomes 4 * 110\n    new_sum = 4 * 110\n    # The number to add is the difference between the new sum and the current sum\n    num_to_add = new_sum - current_sum\n    return num_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method, calculate the number of days one horse can be fed with the pile of hay\n    days_per_horse_initial = days_initial * horses_initial\n\n    # Now, find out how many days 20 horses can be fed with the same pile of hay\n    days_final = days_per_horse_initial / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7*x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    nums = [6, 9, 12]\n    gcf = gcd(gcd(nums[0], nums[1]), nums[2])\n    return gcf\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the masses of the boys\n    john, andy, charles = symbols('john andy charles')\n\n    # Equations based on the problem statement\n    equation1 = Eq(john + andy, 105)  # The total mass of John and Andy\n    equation2 = Eq(charles + john, 67) # The total mass of Charles and John\n    equation3 = Eq(andy, 3 * charles)  # Andy's mass is 3 times Charles's mass\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    total_companies = 4\n    total_days = 5\n\n    meters_per_company_per_day = total_expressway / (total_companies * total_days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_set_price = 78\n    sock_pair_price = 12\n    aliens = 1 + 5  # The alien and his 5 brothers\n    legs_per_alien = 5\n\n    # Total number of individual shoes needed for the alien and his brothers\n    total_shoes = aliens * legs_per_alien\n    # Since shoes are sold in sets of 5, we need to buy sets for each alien and his brothers\n    total_shoe_price = total_shoes / 5 * shoe_set_price\n\n    # Total number of socks needed\n    # Each alien being needs a sock for each leg, socks are sold in pairs so divide by 2 to get number of pairs\n    total_socks = total_shoes  # same as the number of individual shoes\n    total_sock_price = (total_socks / 2) * sock_pair_price  # divide by 2 to get number of pairs of socks\n\n    # Total cost for the items\n    total_cost = total_shoe_price + total_sock_price\n\n    return int(total_cost)\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # When dividing 13 oranges to 3 kids where someone might not get any orange, \n    # it turns into a problem of distributing n identical items into r distinct boxes.\n    # This is equivalent to the \"stars and bars\" problem, which uses a combination formula.\n    # It can be thought of as placing 2 bars in the 14 spaces (to the left, right or between the oranges)\n    # to create 3 non-distinct groups. The number of ways to place 2 bars in 14 spaces is\n    # C(n+k-1, k-1) where n is the number of items and k is the number of boxes.\n    # In this case, it's C(13+3-1, 3-1) = C(15, 2)\n    from math import comb\n    ans = comb(15, 2)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Iterate through all possible 4-digit numbers\n    for i in range(1000, 10000):\n        # The last digit becomes the first\n        new_number = int(str(i % 10) + str(i)[:-1])\n        # Check if the new_number is 5877 more than the original\n        if new_number - i == 5877:\n            return i  # Return the original number\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david_50, jeremy_50, jeremy_10 = symbols('david_50 jeremy_50 jeremy_10')\n\n    # David's cookies were cost thrice as much as Jeremy's cookies\n    equation1 = Eq(david_50 * 0.50, 3 * (jeremy_50 * 0.50 + jeremy_10 * 0.10))\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(jeremy_50, (3/5) * jeremy_10)\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(jeremy_10 + 60, david_50)\n\n    # David had only $0.50 cookies\n    david_50_value = 1\n\n    # Substitute the value of David's $0.50 cookies into equation3\n    equation3 = equation3.subs(david_50, david_50_value)\n\n    solutions = solve((equation1, equation2, equation3), (jeremy_50, jeremy_10))\n\n    # Calculate the worth of Jeremy's cookies\n    jeremy_cookies_worth = solutions[jeremy_50] * 0.50 + solutions[jeremy_10] * 0.10\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {tuple(sorted(com)): comb[0] * comb[1] * comb[2] for com in combinations(numbers, 3)}\n    \n    for pair in combinations(numbers, 2):\n        prod = pair[0] * pair[1]\n        for c, p in products.items():\n            if prod == p:\n                not_picked = set(numbers) - set(pair) - set(c)\n                return not_picked.pop()\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20  # in meters\n    distance_between_two_adjacent_trees = distance_between_first_and_fifth / (5 - 1)  # there are 4 intervals between 5 trees\n    length_of_road = 200  # in meters\n    num_trees = (length_of_road / distance_between_two_adjacent_trees) + 1  # adding the first tree\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # Combined rate of filling\n    half_tank_time = 0.5 / combined_rate  # Time to fill half the tank\n    return half_tank_time\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    initial_expression = (36 * 21) / (6 * 7)\n    \n    jason_expression_1 = 36 * 21 / 6 * 7\n    jason_expression_2 = 36 / 6 * 21 * 7\n    jason_expression_3 = 6 * 7 * 21\n\n    if initial_expression == jason_expression_1 == jason_expression_2 == jason_expression_3:\n        correct = True\n    else:\n        correct = False\n\n    corrected_expression = initial_expression\n\n    return correct, corrected_expression\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # We start checking from a 1x1 square, since the minimum array size is 1.\n    side_of_square = 1\n    while True:\n        # The total number of students after girls lineup is (side_of_square + 1)^2\n        total_students = (side_of_square + 1) ** 2\n        # The total number of students before girls lineup is side_of_square^2\n        boys = side_of_square ** 2\n        # The number of girls that lined up is the difference.\n        girls = total_students - boys\n        # If the number of girls matches the given condition, we found our answer.\n        if girls == 17:\n            return boys\n        # Otherwise, we increment the side of the square and continue checking.\n        side_of_square += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n    \n    total_people = ann_position + people_between + david_position_from_end\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    \n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    \n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure 29 balls of one color, 28 balls of another color, and 10 of the last color,\n    # we consider the worst-case scenario under the pigeonhole principle.\n    \n    # We first pick balls considering the worst scenario:\n    # - We could have picked all the white balls without getting 29 of the same color (30 balls).\n    # - Then we start picking red balls. To avoid having 29 red balls, we pick 28 (30 + 28 balls).\n    # - Finally, we can start picking blue balls. Since we want to ensure 29, we pick 29 (30 + 28 + 29).\n    # But this would guarantee us only 28 blue, not 29, because we need one more to make sure we have 29 balls of the same color.\n    # So we need to pick one more ball (30 + 28 + 29 + 1).\n\n    min_balls = 30 + 28 + 29 + 1\n    return min_balls\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    day_progress = 3\n    night_regress = 1\n    total_distance = 9\n    distance_covered = 0\n    days = 0\n    \n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_progress\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_regress\n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the principle of inclusion-exclusion for two sets\n    both_competitions = (maths_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n    \n    simple_interest = principal * rate * time\n    \n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    england_mountain_height = 978\n    world_highest_mountain_height = 8848\n    difference = world_highest_mountain_height - england_mountain_height\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(1, 50):\n        if i % 3 == 2 and isprime(i) and (i - 2) % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # After 10!, the factorial will always end in 0 as it includes the factor 10 (2*5).\n    # Therefore, the last digit of 2014! will be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    # Prime factorization of the product\n    product = 2*2*3*8*5*5*5\n    # Prime factorization of 10, since we are concerned about the number of zeros at the end which is determined by the number of 2's and 5's pair.\n    n_twos = 0\n    n_fives = 0\n    \n    # Counting the number of 2's\n    temp = product\n    while temp % 2 == 0:\n        n_twos += 1\n        temp = temp // 2\n    \n    # Counting the number of 5's\n    temp = product\n    while temp % 5 == 0:\n        n_fives += 1\n        temp = temp // 5\n\n    # The number of zeros at the end is the minimum of the number of 2's and 5's\n    ans = min(n_twos, n_fives)\n\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    final_result = 1\n    add_result = (final_result + 8) * 8\n    multiply_result = add_result / 3\n    original_number = multiply_result - 6\n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 10*x, 253)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Total sum of the arithmetic sequence\n    total_cookies = 100\n    # Number of terms\n    n = 5\n    # Common difference (each day he ate 6 more cookies than the day before)\n    d = 6\n    \n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (2a + (n-1)d)\n    # Where S is the sum of the sequence, n is the number of terms, a is the first term, and d is the common difference\n    # Rearrange the formula to solve for the first term 'a':\n    # a = (S/n - (n-1)d/2)\n    a = (total_cookies / n) - ((n - 1) * d / 2)\n\n    return int(a)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    from sympy import isprime\n    for n in range(1, 90):\n        if n % 9 == 0 and (n - 1) % 5 == 0 and isprime(n + 1):\n            return n\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 0.18 * 250\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)\n    equation2 = Eq(alicia - alicia / 2, beth - 60)\n    equation3 = Eq(beth - 60, casey - 3 * (alicia / 2))\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    men_ways = factorial(4) # There are 4 men, so 4! ways to arrange them\n    women_ways = factorial(4) # There are 4 women, so 4! ways to arrange them\n\n    # There are two ways to arrange genders: man at the first position or woman at the first position\n    total_ways = men_ways * women_ways * 2 \n\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # total letters in HAPPY is 5\n    h_count = factorial(1)        # 'H' occurs once\n    a_count = factorial(1)        # 'A' occurs once\n    p_count = factorial(2)        # 'P' occurs twice\n    y_count = factorial(1)        # 'Y' occurs once\n\n    ans = total_letters // (h_count * a_count * p_count * y_count)\n    return ans\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    ans = (30 * 20) // 6\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for number in range(1, 481):\n        count += str(number).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = 2 * cost_per_roll_ali\n    cost_pack_mya = 3 * cost_per_roll_mya\n    \n    return cost_pack_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n    \n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_girls = 12\n    fraction_boys = 2 / 5\n    fraction_girls = 1 - fraction_boys\n    total_children = total_girls / fraction_girls\n    number_of_boys = total_children * fraction_boys\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(96)  # Prime factorization\n    num_factors = 1\n    for exponent in factors.values():\n        num_factors *= (exponent + 1)\n    return num_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Since Peter is directly in front of John, they are counted as 2 people together.\n    total_people = people_in_front_of_peter + people_behind_john + 2\n    \n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.6 * 0.1 * 900\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time_in_hours = 12\n    flight_duration_in_hours = 4\n    timezone_difference_in_hours = 3  # St Petersburg is 3 hours ahead of England\n    arrival_time_in_hours = (departure_time_in_hours + flight_duration_in_hours + timezone_difference_in_hours) % 24\n    return arrival_time_in_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if N != O:\n                if (int(str(N) + str(O))) == ((N*10 + O) / N) * O:\n                    return N*10 + O\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([i if i % 4 == 2 else -i for i in range(50, 31, -2)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # We have 3 colors, so to guarantee a pair of one color,\n    # Cindy needs to pick one sock more than 3 times the number of colors.\n    num_colors = 3\n    return (num_colors - 1) * 4 + 1\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    grams_per_kg = 1000\n    kg = 2.5\n    ans = kg * grams_per_kg\n    return ans\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12  # distance on the map in cm\n    scale = 5 / 1  # 5 cm on the map represents 1 km on the ground\n\n    ground_distance_km = (map_distance_cm / scale)\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # The statement given by Pip is not completely correct. According to number theory,\n    # a composite number is a positive integer greater than 1 that is not prime (has factors\n    # other than 1 and itself), but 1 is also an integer that is not a prime and not considered a composite.\n    # Therefore, we will check if the statement holds true for all positive integers except 1.\n\n    is_pip_correct = True  # We will assume Pip is correct unless proven otherwise.\n\n    # We'll check all numbers from 2 to a reasonable upper limit, here I choose 100\n    # It's unreasonable to check every positive integer, but this range suffices to make a point.\n    for n in range(2, 101):\n        if not any(n % i == 0 for i in range(2, n)):  # A check for prime number\n            continue  # It's a prime number, so Pip's statement isn't disproven.\n        else:\n            # It's a composite number, so Pip's statement holds.\n            pass\n\n    # Now, we must consider the case for the number 1.\n    if not any(1 % i == 0 for i in range(2, 1)):\n        # Since 1 is not prime and not composite, Pip's statement is not correct.\n        is_pip_correct = False\n\n    return is_pip_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n    both_classes = math_students + language_students - total_students\n    only_math_students = math_students - both_classes\n    return only_math_students\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmph = 7.2  # speed in kilometers per hour\n    speed_mps = speed_kmph * (1000 / 3600)  # speed in meters per second\n    time_seconds = 24  # time in seconds\n    distance_meters = speed_mps * time_seconds  # distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "网络故障，请重试"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Given equation: (1/3 - 25%) * x = 36\n    # Convert 25% to a decimal -> 25 / 100 = 0.25\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    if x1 + x2 + x3 + x4 == 12 and len({x1, x2, x3, x4}) == 4:\n                        count += 1\n    return count // 24  # dividing by the number of permutations of the 4 groups\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    # Define an inner function to check if a number is a palindrome\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    # Find the smallest number that creates a palindrome when added to num\n    addition = 0\n    while True:\n        if is_palindrome(num + addition):\n            return addition\n        addition += 1\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    shared_sweets = total_sweets - kasia_keeps\n    sweets_each_friend = shared_sweets // 2\n    lucie_gives_away = sweets_each_friend * 2 // 7\n    lucie_keeps = sweets_each_friend - lucie_gives_away\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Granddad spends one quarter (1/4) on Friday\n    friday_spent = 1/4\n    # Remaining after Friday night out\n    remaining_after_friday = 1 - friday_spent\n    # One third of the remaining is spent on Saturday\n    saturday_spent = remaining_after_friday * (1/3)\n    # Remaining after Saturday night\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n    # The remaining fraction of the pension for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    boys_ratio = 3/8\n    girls_ratio = 1 - boys_ratio\n    total_sweets = 360\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    boys = (total_sweets * boys_ratio) // sweets_per_boy\n    girls = (total_sweets * girls_ratio) // sweets_per_girl\n\n    return int(girls)\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= (1 / i - 1 / (52 - i))\n    return ans\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_difference = 52\n    total_students = 0\n\n    # Starting from a 1x1 square (which would be a girl in the center), increase the square size,\n    # This means increasing the side of the square by 2 each time (adding a layer of boys, then girls). \n    # Each added layer has the number of boys and girls as the previous side length.\n    side = 1  # Start with a side of 1 (innermost layer, a girl)\n    while True:\n        # Boys are on the outer layer of the current square\n        boys = side * 4 - 4 if side > 1 else 1\n        # Girls are on the next inner layer (or in the center if it's the first)\n        girls = (side - 2) * 4 if side > 2 else 0\n\n        if boys - girls == total_difference:\n            # Since we add 2 layers (for boys and girls) each iteration,\n            # the total students are side * side (since it's a square array)\n            total_students = side * side\n            break\n        else:\n            # Move to the next square size\n            side += 2\n\n    return total_students\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "出错啦，请重试"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    num_combinations = num_school_bags * num_pencil_boxes\n\n    return num_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "出错啦，请重试"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    sum_of_digits = 0\n\n    for i in range(212):\n        sum_of_digits += int(recurring_sequence[i % len(recurring_sequence)])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the number as a symbol\n    number = symbols('number')\n    \n    # Setting up the equations based on the remainders.\n    equation1 = Eq(number % 7, 5)\n    equation2 = Eq(number % 8, 6)\n    equation3 = Eq(number % 10, 6)\n    \n    # We also know that the sum of the quotients when the number is divided\n    # by 6, 7, 8 is 265. The quotients are (number // 6), (number // 7),\n    # and (number // 8). So we create a fourth equation for this relationship.\n    equation4 = Eq((number // 6) + (number // 7) + (number // 8), 265)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (number))\n    \n    # Return the smallest positive solution that satisfies all conditions\n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol[0]\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Equation 1: tank_volume - 5 = 4 (Using a 5-liter pail, 4 liters overflow)\n    # Equation 2: tank_volume + 3 * 4 = 3 * (4+1) (Using a 3-liter pail, needs 4 more pails)\n    # tank_volume is the volume of the tank we need to find.\n    \n    # From Equation 1:\n    # tank_volume = 5 + 4\n    tank_volume_from_first_pail = 5 + 4\n    \n    # From Equation 2:\n    # tank_volume = 3 * 5 - 3*4 (Since he needs 4 more pails, so total 5 pails)\n    tank_volume_from_second_pail = 3 * 5 - 3 * 4\n    \n    # Since both should give the same tank_volume, we can return any of them.\n    return tank_volume_from_first_pail\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    row_col = 0\n    while True:\n        if (row_col + 1) * (row_col + 1) - (row_col * row_col) == 31:\n            break\n        row_col += 1\n    \n    total_number_of_soldiers = (row_col + 1) * (row_col + 1)\n    return total_number_of_soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1  # A willow tree between each pair of ginkgo trees\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "出错啦，请重试"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "出错啦，请重试"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n = 12\n    ans = n * (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "出错啦，请重试"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    cost_of_lemonade = 1.09 * 5\n    cost_of_chocolate = 0.55 * 6\n    total_cost = cost_of_lemonade + cost_of_chocolate\n    change_from_ten_pounds = 10 - total_cost\n    return round(change_from_ten_pounds, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Sam's current age\n    sam_current_age = symbols('sam_current_age')\n\n    # In four years, Sam's age will be Sam's current age + 4\n    # Four years ago, Sam's age was Sam's current age - 4\n\n    # Equation representing the problem statement\n    equation = Eq(sam_current_age + 4, 2 * (sam_current_age - 4))\n\n    # Solve the equation\n    sam_age_solution = solve(equation, sam_current_age)\n\n    # Since age has to be a positive number, check for positive solution\n    return sam_age_solution[0]\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "出错啦，请重试"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 0.15 * x - 0.25 * (1000 - x) + 50\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "出错啦，请重试"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7 # Number of letters in RAINBOW\n    vowels = 3        # Number of vowels in RAINBOW (A, I, O)\n    consonants = 4    # Number of consonants in RAINBOW (R, N, B, W)\n    \n    # Total arrangements of the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Total arrangements of vowels (when all vowels are together)\n    vowels_together = factorial(vowels)\n    \n    # Arrangements of the 'word' formed when vowels are together\n    # Consider the vowels as one entity; therefore we have consonants + 1 entities\n    all_vowels_together_arrangements = factorial(consonants + 1)\n    \n    # Total arrangements of vowels when all vowels are together\n    total_vowels_together_arrangements = all_vowels_together_arrangements * vowels_together\n    \n    # Total ways to arrange the letters where vowels are NEVER together\n    arrangements_with_vowels_never_together = total_arrangements - total_vowels_together_arrangements\n    \n    return arrangements_with_vowels_never_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    odd_numbers = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chickens_feet = 2 * solutions[chickens]\n    goats_feet = 4 * solutions[goats]\n    cows_feet = 4 * solutions[cows]\n\n    total_feet = chickens_feet + goats_feet + cows_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    amy_ratio = 5\n    penny_ratio = 4\n\n    total_stickers = 117\n    total_ratio = amy_ratio + penny_ratio\n\n    penny_stickers = (penny_ratio * total_stickers) / total_ratio\n\n    return penny_stickers\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "出错啦，请重试"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "出错啦，请重试"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # Speed in kilometers per hour\n    time_s = 300  # Time in seconds\n\n    # Convert speed to meters per second (1 km/h is equal to 1000 m/3600 s)\n    speed_mps = (speed_kmh * 1000) / 3600\n\n    # Calculate distance in meters\n    distance_meters = speed_mps * time_s\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_apples = symbols('total_apples')\n\n    # Equations based on the problem description\n    equation = Eq((4/7) * (1/2) * total_apples, 40)\n\n    # Solve the equation for the total number of apples\n    solution = solve(equation, total_apples)\n\n    # Return the solution as an integer\n    return solution[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "出错啦，请重试"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    target = 2978\n    min_diff = float('inf')\n    closest_number = None\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(target - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_number = num\n\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "出错啦，请重试"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    \n    # Find factors of 7007 that are multiples of 7 and two digits long\n    for i in range(10, 100):\n        if 7007 % i == 0 and (7007 // i) in range(10, 100) and i % 7 == 0:\n            factors.append(i)\n            factors.append(7007 // i)\n\n    # Return sum of the two factors we found\n    return sum(factors)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "出错啦，请重试"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d\n    # Given:\n    # (a + b) / 2 = 10\n    # (c + d) / 2 = 22\n    # (a + d) / 2 = 14\n    \n    # Solve the given equations\n    a_plus_b = 10 * 2\n    c_plus_d = 22 * 2\n    a_plus_d = 14 * 2\n    \n    # We know that (a + b + c + d) / 4 is the overall average\n    # We need to find the average of b + c\n    # Since a_plus_d includes a and d once and a_plus_b and c_plus_d both include the middle numbers once, \n    # we can use this information to calculate b + c.\n    \n    # b + c = (a_plus_b + c_plus_d) - a_plus_d\n    b_plus_c = (a_plus_b + c_plus_d) - a_plus_d\n    middle_average = b_plus_c / 2  # Average of the two middle numbers\n    \n    return middle_average\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "出错啦，请重试"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n    \n    birth_date = datetime(1533, 9, 7)  # Queen Elizabeth I's birthdate\n    death_date = datetime(1603, 3, 24)  # Queen Elizabeth I's deathdate\n    \n    age_at_death = death_date.year - birth_date.year\n    if (death_date.month, death_date.day) < (birth_date.month, birth_date.day):\n        age_at_death -= 1  # Adjust if she hadn't had her birthday that year yet\n    \n    return age_at_death\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # Solve for n (number of rows):\n    num_rows = ((last_term - first_term) / difference) + 1\n\n    # Calculate the sum of an arithmetic series using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using the Pigeonhole Principle\n    most_cakes_in_a_layer = (total_cakes // layers) + (total_cakes % layers > 0)\n    \n    return most_cakes_in_a_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23**0.5)\n    length_to_cut = max_side_length ** 2\n    return length_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = (21 + 1) * 7\n    part2 = 20 + (1 * 7)\n\n    ans = part1 - part2\n\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    result = 0\n    for i in range(1, 2019):\n        result += (2018 + i) / 5 - (2018 + i) // 5\n\n    return result\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the ages of the Chinese, English, and Mathematics teachers be C, E, and M respectively.\n    # We then have the following equations based on the averages given:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n    # To find the average age of the 3 subject teachers, we need to sum all ages and divide by 3.\n    # However, we can sum all the equations we have to get 2C + 2E + 2M, which is twice the sum we need.\n    \n    total_double = (68 + 72 + 88)\n    average_all_teachers = total_double / 3 / 2\n\n    return average_all_teachers\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    duplicate_1_count = 2\n    # Calculate number of permutations\n    permutations = factorial(total_digits) // (factorial(duplicate_1_count))\n    return permutations\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    result = 12 * 1.99\n    return result\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inv = sum(1/i for i in range(1995, 2009))\n    A = 1 / A_inv\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # Define equations based on the given information\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    # Solve the simultaneous equations for the cost of the table and chair\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    n = 10  # total number of boxes\n\n    # Let d be the common difference\n    # The sum S_n of an arithmetic sequence is given by: S_n = n/2 * (2*a_1 + (n - 1)*d)\n    # where n is the number of terms, a_1 is the first term, and d is the common difference\n    \n    # Given S_n (total number of cookies), a_1 (cookies in box 1), and n (number of boxes), solve for d\n    S_n = 425\n    a_1 = 11\n    \n    # Hence, 425 = 10/2 * (2*11 + (10 - 1)*d)\n    # Simplifying we get: 425 = 5 * (22 + 9d)\n    # Thus, 425 = 110 + 45d\n    # So, 315 = 45d\n    # Therefore, d = 315 / 45 = 7\n    \n    d = (S_n - (n * a_1)) / (0.5 * n * (n - 1))  # re-arranged the formula for S_n to solve for d\n    return d\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, benson = symbols('chelsia benson')\n    \n    # Equation representing 3/4 of Chelsia's money is equal to 2/3 of Benson's money\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    \n    # Equation representing Chelsia has $18 less than Benson\n    equation2 = Eq(chelsia + 18, benson)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    # Total sum of both Chelsia and Benson's money\n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let's assume the smallest of these seven numbers is x.\n    # Then the seven consecutive odd numbers can be represented as:\n    # x, x+2, x+4, x+6, x+8, x+10, and x+12.\n    # The sum of these seven numbers is:\n    # S = x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10) + (x + 12) = 357\n    # Simplifying this, we get:\n    # 7x + (2 + 4 + 6 + 8 + 10 + 12) = 357\n    # 7x + 42 = 357\n    # 7x = 357 - 42\n    # x = (357 - 42) / 7\n    # Now we can find the value of x:\n    x = (357 - 42) // 7\n    return x\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if (number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the remainder problem\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Use the Chinese Remainder Theorem to find the smallest such number\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Since 2 is the only even prime number, we can simply return it.\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    cloth_used = symbols('x')\n    remaining_cloth = total_cloth - cloth_used\n    \n    return remaining_cloth\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    result = (132 + 68) * (520 - 506)\n    return result\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fred_rate = 1/9  # Fred can paint 1 room in 9 hours\n    george_rate = symbols('george_rate')  # Define George's rate as a variable\n    combined_rate = 1/6  # Fred and George can paint 1 room in 6 hours\n\n    # Equation representing the combined rate of Fred and George painting together\n    equation = Eq(fred_rate + george_rate, combined_rate)\n\n    # Solve for George's rate\n    george_rate_solution = solve(equation, george_rate)\n\n    # Calculate how long George would take on his own by taking the reciprocal of his rate\n    george_time = 1 / george_rate_solution[0]\n\n    return george_time\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "from math import factorial\n\ndef solution():\n    total_entrances = 5\n    total_people = 4\n    # Each person can choose from any of the 5 entrances independently,\n    # and the order in which they enter is considered in permutations.\n    ways_to_enter = total_entrances ** total_people\n    return ways_to_enter\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    time_ratio_martin = 9\n    time_ratio_carter = 13\n\n    # Since time * speed = distance and the distance is the same,\n    # the ratios of their times is inversely proportional to the ratios of their speeds.\n    equation1 = Eq(martin_speed / carter_speed, time_ratio_carter / time_ratio_martin)\n    # Martin’s speed is 20 m/min faster than Carter's speed.\n    equation2 = Eq(martin_speed, carter_speed + 20)\n\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    last_year_value = 10500\n    original_value = last_year_value / 1.05\n    this_year_value = last_year_value * 0.95\n    profit_or_loss = this_year_value - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5*7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of pet\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of each type of pet\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculate the total number of legs of cats, dogs, and rabbits\n    total_legs_of_cats_dogs_rabbits = cats * cat_legs + dogs * dog_legs + rabbits * rabbit_legs\n\n    # Calculate the remaining number of legs which must be the bird's legs\n    remaining_legs_for_birds = 28 - total_legs_of_cats_dogs_rabbits\n\n    # Calculate the number of birds from the remaining legs\n    birds = remaining_legs_for_birds / bird_legs\n\n    return int(birds)\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    ans = 27 * 3\n    return ans\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    ans = [f for f in factors_of_42 if 10 < f < 20][0]\n    return ans\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    desired_average = 6\n    total_numbers = len(numbers) + 1  # We'll have a total of 4 numbers after including the missing one\n\n    # Calculate the sum of the existing numbers\n    current_sum = sum(numbers)\n\n    # We know that average = (sum of numbers) / (total number of numbers)\n    # Therefore, sum of numbers = average * total number of numbers\n    required_sum = desired_average * total_numbers\n\n    # The missing number is the difference between required sum and the current sum\n    missing_number = required_sum - current_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler, pen = symbols('ruler pen')\n     \n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    equation2 = Eq(ruler, pen + 0.90)\n\n    solutions = solve((equation1, equation2), (ruler, pen))\n    \n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel_needed = 300\n    bag_weight = 12\n    \n    bags_needed = -(-total_gravel_needed // bag_weight)  # Ceiling division\n\n    return bags_needed\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    final_result = 1126\n    for month in range(1, 13):  # Month of birth will be between 1 to 12.\n        for day in range(1, 32):  # Day of birth will be between 1 to 31.\n            result = month\n            result *= 4\n            result += 6\n            result *= 5\n            result -= 20\n            result *= 5\n            result += day\n            result -= 50\n            if result == final_result:\n                return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(\"1356789\"):\n        first = int(\"\".join(perm[:3]))\n        second = int(\"\".join(perm[3:5])) * 10 + int(perm[-1])\n        third = int(\"\".join(perm[5:])) * 10 + int(perm[-2])\n        if second == 2 * first and third == 4 * first:\n            return third\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    total_sum = sum_of_sequence * 2 - last_term  # Multiply by 2 and subtract last term which is counted twice\n    return total_sum\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the first cup\n    cups = 1\n    total_money -= initial_cup_price\n\n    # Use the rest of the money for refills\n    refills = total_money // refill_price\n    \n    return cups + refills\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # The number of peaches each monkey eats in one day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # The number of peaches 5 monkeys eat in 4 days\n    total_peaches = 5 * 4 * peaches_per_monkey_per_day\n    \n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    tax_first_part = 0.06 * 50000\n    tax_second_part = (0.06 + T / 100) * (120000 - 50000)\n\n    total_tax = Eq(tax_first_part + tax_second_part, 10000)\n\n    T_value = solve(total_tax, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    num_red_apples = 14\n    num_yellow_apples = 20\n    total_apples = num_red_apples + num_yellow_apples\n\n    # According to the Pigeonhole Principle, worst case scenario is taking out all apples\n    # of one color plus one more, which guarantees the next apple is of the same color.\n    worst_case = max(num_red_apples, num_yellow_apples) + 1\n\n    return worst_case\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since we need to distribute 5 identical ice-creams to 3 friends\n    # with each friend getting at least 1 ice-cream.\n    # We can solve this problem by using stars and bars method\n    # We have 5 ice-creams (stars) and we want to place 2 bars among them\n    # to divide them between 3 friends.\n    # The formula to calculate the combinations in this case is (n+k-1)C(k-1),\n    # where n is the number of stars and k is the number of bars.\n\n    from math import comb\n\n    # Number of ice-creams to distribute (stars)\n    n = 5  \n    # Number of friends minus 1 (bars)\n    k = 3 - 1  \n    \n    # Calculate the number of ways to distribute the ice-creams\n    ways = comb(n - 1, k)\n    \n    return ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total amount spent from January to March\n    jan_to_mar = 450 * 3\n    \n    # Calculate the total amount spent from April to July\n    apr_to_jul = 350 * 4\n    \n    # The total amount spent from August to October is given directly\n    aug_to_oct = 1250\n    \n    # Calculate the total amount spent from November to December\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total amount spent over the entire year\n    total_year = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average spent per month over the entire year\n    average_per_month = total_year / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n\n    # Ways to arrange books of the same kind\n    story_books_arrangements = factorial(story_books)\n    comic_books_arrangements = factorial(comic_books)\n    science_books_arrangements = factorial(science_books)\n\n    # Ways to arrange the groups of books\n    groups_arrangement = factorial(3)\n\n    total_arrangements = (\n        story_books_arrangements *\n        comic_books_arrangements *\n        science_books_arrangements *\n        groups_arrangement\n    )\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of red pens sold\n\n    # After selling x red pens, there were 20 red pens left\n    # So initially there were 20 + x red pens\n\n    # Initial ratio of red to black pens: 3:7\n    # Final ratio of red to black pens after selling x pens: 5:13\n\n    # Using ratio properties, we can equate\n    # (Initial number of red pens - x) / (Initial number of black pens - x) = 5 / 13\n    # Initial number of red pens / Initial number of black pens = 3 / 7\n\n    # Let y be the initial total number of pens\n    # initial red pens = 3y/10, initial black pens = 7y/10, y must be divisible by 10\n\n    # 3y/10 - x / 7y/10 - x = 5 / 13\n    # Simplify the equation to solve for y and then find x\n    # (3y/10 - x) * 13 = (7y/10 - x) * 5\n    # After simplifying the above equation, we can solve for y in terms of x\n\n    # In the end we have 20 red pens\n    # So, 3y/10 - x = 20\n    # That means 3y - 10x = 200 (equation 1)\n\n    # To maintain the ratio 5:13 after selling x pens, given we have 20 red pens remaining:\n    # (20 / (7y/10 - x)) = (5 / 13)\n    # 260 = 35y - 50x  (equation 2)\n\n    # Now we solve the two equations 3y - 10x = 200 and 35y - 50x = 260 simultaneously:\n    from sympy import symbols, Eq, solve\n\n    y, x = symbols('y x')\n    equation1 = Eq(3*y - 10*x, 200)\n    equation2 = Eq(35*y - 50*x, 260)\n\n    solution = solve((equation1, equation2), (y, x))\n    pens_sold = solution[x]\n\n    return pens_sold\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3.5/(3*x + 2)) + (2/(1.5*x + 1)), (4.5/(5 - 6*x)) - (3/(2.5 - 3*x)))\n\n    ans = solve(equation, x)\n    \n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for m in range(10):\n        total_sweets = int(f\"127{m}\")\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    x, y = symbols('x y')\n\n    # Create equations based on the given proportional relationship 9:x = y:2\n    equation = Eq(9 * 2, x * y)\n\n    # Solve for y when x = 3\n    y_value = solve(equation.subs(x, 3), y)\n\n    return 'inverse', y_value[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(p) for p in all_permutations if int(p) % 2 != 0]\n\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's denote the money Sophie's mother gave her as 'x'.\n    # The price of one serving of ice cream is unknown, let's denote it as 'p'.\n    # From the problem we have two equations:\n    # 5 * p = x + 2.30 (Sophie is short of $2.30 for 5 servings)\n    # 3 * p = x - 0.30 (Sophie has $0.30 left after buying 3 servings)\n    # Now we can setup a system of linear equations to solve for 'x' and 'p'.\n\n    # However, we can also observe that the difference in number of servings (5 - 3 = 2)\n    # and the difference in money (2.30 + 0.30 = 2.60) allow us to find the price of one serving directly\n    # 2 * p = 2.60 => p = 1.30\n\n    # Now we can find x using the price of one serving and the fact that Sophie was short of $2.30 for 5 servings.\n    # 5 * p = x + 2.30\n    # 5 * 1.30 = x + 2.30\n    # 6.50 = x + 2.30\n    # x = 6.50 - 2.30\n    x = 6.50 - 2.30\n\n    return x\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure we get at least two balls of the same color,\n    # we must consider the worst case scenario in which we take out one ball of each color first.\n    # There are 7 green balls and 8 blue balls, so after taking out 7 green balls,\n    # we can take out 1 more to make sure we get at least 2 green balls.\n    # Alternatively, if we get blue balls each time, we need to take 2 more to ensure\n    # we have at least 2 blue balls, as there are 8 blue balls.\n    # Since we are looking for the minimum requirement,\n    # we take one more ball after the 7 green balls to guarantee two of the same color.\n\n    balls_needed = 7 + 1 # 7 different balls chosen first, then 1 more to guarantee a pair\n    return balls_needed\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    felicia_initial = symbols('felicia_initial')\n    janice_initial = 96\n\n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = (3/5) * felicia_initial\n\n    # Janice bought 2/5 of the bracelets Felicia sold\n    janice_bought = (2/5) * felicia_sold\n\n    # After selling and buying, Felicia has 2/5 left, Janice has initial plus what she bought\n    felicia_final = felicia_initial - felicia_sold\n    janice_final = janice_initial + janice_bought\n\n    # Ratio of the final number of bracelets is 5:7 (Felicia's to Janice's)\n    ratio_eq = Eq(felicia_final/janice_final, 5/7)\n\n    # We combine the ratio equation with the initial condition for Janice to solve for Felicia's initial bracelets\n    solutions = solve((ratio_eq, Eq(janice_initial, 96)))\n\n    # Return how many bracelets Janice bought\n    return solutions[janice_bought]\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Assume the library is D meters away.\n    # The time taken to walk to the library is D / walking_speed.\n    # The time taken to cycle back from the library is D / cycling_speed.\n    # Total distance for the whole trip is 2 * D.\n    # Total time is the sum of walking and cycling time.\n    # Average speed = Total distance / Total time\n    # Average speed = 2 * D / (D / walking_speed + D / cycling_speed)\n    # Simplify the expression for average speed:\n    # Average speed = 2 / (1/walking_speed + 1/cycling_speed)\n    # Insert the harmonic mean formula:\n    \n    average_speed = 2 / (1/walking_speed + 1/cycling_speed)\n    average_speed = 1 / ((1/2) * (1/walking_speed + 1/cycling_speed))\n    average_speed = 1 / ((walking_speed + cycling_speed) / (2 * walking_speed * cycling_speed))\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n    \n    return average_speed\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 20 + 10 + 20\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n\n    average_cost = total_cost / total_books\n\n    return average_cost\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    prime_list = list(primerange(50, 100))\n    return len(prime_list)\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we started with is x.\n    # Then follow the sequence of operations on x.\n    \n    # Add 3\n    x = x + 3\n    \n    # Multiply by 2\n    x = x * 2\n    \n    # Take away 2\n    x = x - 2\n    \n    # Add 10\n    x = x + 10\n    \n    # Divide by 2\n    x = x / 2\n    \n    # Take away the number you started with\n    x = x - x_old\n    \n    # Since all the operations are done with respect to the original\n    # number, we can substitute back to x_old to avoid confusion.\n    \n    # Replace x with x_old in the equation.\n    x_old = x - 3\n    x_old = (x_old * 2) - 2\n    x_old = x_old + 10\n    x_old = x_old / 2\n    ans = x_old - x\n    \n    # The operations will cancel out and always leave the same number.\n    return ans\n\n# Initialize x with any value since the final result does not depend on it.\nx = 0 # This value is arbitrary due to the nature of the question\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_count = 0\n\n    # Case 1: When the first digit is 7 (77X, 7X7)\n    # X can be any digit from 0-9 except for 7, giving us 9 choices each\n    total_count += (9 * 2)\n\n    # Case 2: When the other two digits are 7s (X77)\n    # X can be any digit from 1-9, giving us 9 choices (since the number must be three-digit)\n    total_count += 9\n    \n    # Now we have counted the numbers with exactly two 7s two times (e.g. 77X and X77).\n    # We'll subtract the overcounted numbers which have all digits as 7.\n    # We've counted 777 as 7X7 and as X77 so, we subtract it once.\n    total_count -= 1\n\n    # Case 3: When there are three 7s (777)\n    # This is just 1 number.\n    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n\n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Annabella needs to take out all non-yellow shirts to ensure she gets 1 yellow shirt\n    orange = 6\n    pink = 4\n    brown = 12\n\n    # The worst-case scenario is when she takes out all orange, pink, and brown shirts.\n    # Only after that can she be sure to take out a yellow shirt.\n    ans = orange + pink + brown + 1  # Adding 1 for the yellow shirt\n\n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost_per_packet = 0.35\n    individual_cost = individual_cost_per_packet * 15\n\n    savings = individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20  # number of terms\n    d = 2   # common difference\n    S = 560 # sum of all terms\n\n    # Using the formula for the sum of an arithmetic progression: S = n/2 * (2a + (n - 1)d)\n    # We isolate the first term a:\n    # 2a = S/n - (n - 1)d\n    # a = (S/n - (n - 1)d) / 2\n    a = (S/n - (n - 1) * d) / 2\n    \n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    net_climb = climb_up - slip_down\n    days = 0\n    current_depth = depth\n    \n    while current_depth > climb_up:\n        days += 1\n        current_depth -= net_climb\n    days += 1  # final climb\n    \n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_first_four_days = 25 * 4\n    pages_following_six_days = 40 * 6\n    pages_last_five_days = 80\n    total_days = 4 + 6 + 5\n    total_pages = pages_first_four_days + pages_following_six_days + pages_last_five_days\n\n    average_pages = total_pages / total_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the number of toys Penny's brother originally had.\n    # After giving away toys, Penny has 14 toys and her brother has 12 toys.\n    # Before giving toys, Penny had x + 10 toys.\n    # Penny gives x + 10 - 14 toys to her brother.\n    # Brother's original toys plus the given toys equal to 12 toys now.\n    # Thus, x + (x + 10 - 14) = 12\n    # Simplify the equation: 2x - 4 = 12\n    # Solve for x: 2x = 16\n    x = 16 / 2\n    return x\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    return 123 * 39\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):\n        tens_digit = age // 10\n        ones_digit = age % 10\n        interchanged_age = ones_digit * 10 + tens_digit\n        if interchanged_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "网络故障，请重试"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 0.60\n    tickets_unsold = 28\n    total_capacity = tickets_unsold / (1 - percent_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts spent by Hayden and Mitchell\n    spent = symbols('spent')\n\n    # Set up the equation: Hayden's remaining money is 4 times Mitchell's remaining money\n    equation = Eq((1420 - spent), 4 * (505 - spent))\n\n    # Solve the equation for the spent amount\n    spent_amount = solve(equation, (spent))\n\n    return spent_amount[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2 / 3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let x be the total number of children\n    # If 3/8 of the children are boys, then 5/8 of the children are girls (since 1 - 3/8 = 5/8)\n    # We are given that there are 45 girls, so we can set up the equation:\n    # (5/8) * x = 45\n    # Solve for x\n    x = (45 * 8) / 5\n    \n    # Now that we have the total number of children, we can find the total number of people at the party\n    # We know that 3/7 of the people were adults, so 4/7 were children (since 1 - 3/7 = 4/7)\n    # So the total number of people is x divided by the fraction of children (4/7)\n    total_people = x / (4/7)\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Calculate the total amount from the two-dollar notes\n    two_dollar_notes_total = 5 * 2  # Total in dollars\n    \n    # Calculate the total amount from the fifty-cent coins\n    fifty_cent_coins_total = 7 * 0.50  # Total in dollars\n    \n    # Calculate the total amount he has initially\n    initial_total = two_dollar_notes_total + fifty_cent_coins_total\n    \n    # Calculate the cost of the file\n    file_cost = 11.95\n    \n    # Calculate the amount left after buying the file\n    amount_left = initial_total - file_cost\n    \n    return round(amount_left, 2)  # Round to 2 decimal places to represent cents correctly\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Assume Tom draws the worst-case scenario, where he draws the maximum number of cards\n    # without getting 4 cards of the same suit first.\n\n    # He could draw 3 cards from each suit, which totals 3 * 4 = 12 cards.\n    # At this point, no matter what card he draws next, he will have 4 cards of at least one suit.\n\n    # Thus, he must draw 12 + 1 = 13 cards to guarantee having 4 cards of the same suit.\n    return 13\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    progress_per_day = 3 - 1\n    distance_to_climb = 11\n    days = 0\n    total_climbed = 0\n\n    while True:\n        days += 1\n        total_climbed += 3\n        if total_climbed >= distance_to_climb:\n            break\n        total_climbed -= 1\n\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n    \n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated\n\n    ans = factorial(n) / factorial(n - r)\n\n    return int(ans)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between_each = 2\n    # Since willow trees are between every two ginkgo trees, we have one less interval than the number of ginkgo trees\n    intervals = ginkgo_trees - 1\n    total_willow_trees = intervals * willow_trees_between_each\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    return 10 - 2\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28  # speed of the ship in still water in km/h\n    speed_of_current = 3       # speed of the current in km/h\n    \n    # Effective speed upstream is the speed of the ship minus the speed of the current\n    effective_speed_upstream = speed_in_still_water - speed_of_current\n    \n    # Distance to be covered upstream\n    distance_upstream = 150  # in km\n    \n    # Time taken is distance divided by speed\n    time_taken = distance_upstream / effective_speed_upstream\n    \n    return time_taken\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n    \n    # andrew + brian = 40\n    equation1 = Eq(andrew + brian, 40)\n    # andrew + christopher = 37\n    equation2 = Eq(andrew + christopher, 37)\n    # brian + christopher = 25\n    equation3 = Eq(brian + christopher, 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n    \n    # Calculate the total amount of money the boys have altogether\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n    \n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # these equations represent the weight combinations of Adam and Ben, Ben and Carl, and Adam and Carl\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    # total_weight = Adam + Ben + Ben + Carl - Ben (because Ben is counted twice in the sum of pairs)\n    total_weight = adam_ben + ben_carl - adam_carl  # Ben's weight is subtracted because it is included twice in two sums\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    combined_time = 6\n    combined_rate = total_aircrafts / combined_time\n\n    andy_rate = combined_rate - zack_rate\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    total_people = 0\n    # Starting from 1 (innermost layer could be 1x1), increment the potential square size by 2, for alternating layers\n    layer = 1\n    while True:\n        # Calculate the number of people in the current student layer,\n        # which is `layer`^2, and in the next teacher layer, `(layer+2)^2`\n        students = layer ** 2\n        teachers = (layer + 2) ** 2 if layer > 1 else 0\n\n        # The difference in the current two layers\n        diff = students - teachers\n\n        # Breaking condition: if the difference is the 80 extra students\n        if diff == 80:\n            total_people = students + teachers\n            break\n\n        # Increment layer to check next size of array\n        layer += 2\n\n    return total_people\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6  # Sum of parts of the ratio\n    total_volume = 300  # Total volume of the drink\n\n    orange_ratio = 7  # Orange juice part of the ratio\n    volume_of_orange = (orange_ratio / total_ratio) * total_volume\n\n    return volume_of_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    smaller, bigger = symbols('smaller bigger')\n\n    equation1 = Eq(bigger, 3 * smaller)\n    equation2 = Eq(smaller + bigger, 528)\n\n    solutions = solve((equation1, equation2), (smaller, bigger))\n\n    return solutions[bigger]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_money = 20\n    saved_money = 1 * 7  # $1 everyday for a week\n    lent_money = 5\n    spent_money = 3\n\n    total_money = original_money + saved_money - lent_money - spent_money\n\n    return total_money\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    amount_paid_to_mum = 10.50\n    remaining = initial_amount - amount_paid_to_mum\n    amount_spent_on_magazines = remaining / 2\n    amount_left = remaining - amount_spent_on_magazines\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 1\n    while True:\n        cube_root = (44000 / q) ** (1/3)\n        if cube_root.is_integer():\n            return q\n        q += 1\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n    alan = 74\n    bilal = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n    \n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2*length + 2*width, 72)\n    \n    solutions = solve((equation1, equation2), (length, width))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # in kg\n    coefficient_of_static_friction = 0.4\n    force_applied = 250  # in N\n    gravitational_acceleration = 9.81  # in m/s², approximate value of g\n    \n    # Calculate the normal force (force perpendicular to the floor)\n    normal_force = mass * gravitational_acceleration\n    \n    # Calculate the maximum static friction force\n    max_static_friction_force = coefficient_of_static_friction * normal_force\n    \n    # The force of static friction will match the applied force until the maximum static friction is reached\n    force_of_static_friction = min(force_applied, max_static_friction_force)\n    \n    return force_of_static_friction\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for money they originally had\n    s, m, r, cost = symbols('s m r cost')\n\n    # Equations based on problem statement\n    # If Steve paid\n    eq1 = Eq(s - cost, 3 / 8 * (m - cost))\n    eq2 = Eq(m - cost, 8 / 9 * (r - cost))\n    # If Ryan paid\n    eq3 = Eq(s - cost, 5 / 4 * (m - cost))\n    eq4 = Eq(r - cost, cost)\n    # If Mark paid\n    eq5 = Eq(s - cost, 10 * (m - cost))\n    eq6 = Eq(r - cost, 9 * (m - cost))\n\n    # Additional equation for the relationship between Steve and Mark's original amounts\n    eq7 = Eq(s, m + 40)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (s, m, r, cost))\n\n    return solutions[cost]\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Calculate the amount of salt in Nick's solution (in grams).\n    nick_salt = 300 * 0.12\n\n    # Calculate the amount of salt in Nicole's solution (in grams).\n    nicole_salt = 500 * 0.28\n\n    # Calculate the total amount of salt when the solutions are mixed.\n    total_salt = nick_salt + nicole_salt\n\n    # Calculate the total weight of the mixed solution.\n    total_solution = 300 + 500\n\n    # Calculate the concentration of the resulting solution.\n    concentration = (total_salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n = 15 - 3  # number of steps from 3rd term to 15th term\n    common_difference = (fifteenth_term - third_term) / n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = cube + 1\n        if (square ** 0.5).is_integer():\n            return square\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let j be the number of buttons James has and n be the number of buttons Nina has\n    j, n = symbols('j n')\n\n    # n has more buttons than j, Nina gives James 6 buttons and then they have the same amount\n    equation1 = Eq(j + n, 24)\n    equation2 = Eq(n - 6, j + 6)\n\n    solutions = solve((equation1, equation2), (j, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = (11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_hours * total_workers)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < 16:\n        day += 1\n        total_climbed += 5\n\n        if total_climbed >= 16:\n            break\n        total_climbed -= 3\n        \n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Assume that each additional bag incurs a fixed tax rate.\n    # Let the tax rate per bag be represented by k.\n    # If for zero bags the initial tax charge is b (it could be zero or some fixed amount).\n    # Then the equation relating the number of bags (x) to the tax charged (y) would be:\n    # y = kx + b\n    \n    # However, without the actual tax rate (k) and initial tax (b), we cannot determine the specific equation.\n    # Since we do not have values for k and b, we will return a general linear equation in the form of a string.\n    \n    return \"y = kx + b\"\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    number = 0.7\n    if fraction > number:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    # Calculate the cost of cheese in pounds\n    cost_of_cheese = (500 / 1000) * 7.48\n    # Calculate the total cost of apples (8 apples at 12p each)\n    cost_of_apples = 8 * 0.12\n    # Calculate the total cost of yoghurts (2 yoghurts at 46p each)\n    cost_of_yoghurts = 2 * 0.46\n    # Calculate total cost\n    total_cost = cost_of_cheese + cost_of_apples + cost_of_yoghurts\n    # Calculate the change from a £10 note\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i+1))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    bounce_ratio = 0.1\n    total_distance = initial_height  # initial drop\n\n    while initial_height * bounce_ratio > 0:\n        # distance going up and down on each bounce\n        total_distance += 2 * (initial_height * bounce_ratio)\n        # update the height after each bounce\n        initial_height *= bounce_ratio\n\n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    equation1 = Eq(green - 60, 3 * (yellow - 14))\n    equation2 = Eq(green, yellow)\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    distance = 3000  # race distance in metres\n    speed_buck = 600  # buck's speed in metres per minute\n    speed_elephant = 250  # elephant's speed in metres per minute\n\n    time_buck = distance / speed_buck  # buck's race time in minutes\n    time_elephant = distance / speed_elephant  # elephant's race time in minutes\n\n    time_difference = time_elephant - time_buck  # time difference in minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_5_days_or_less = 25\n    daily_fee_after_5_days = 20\n    \n    # Calculate cost for the first 5 days\n    cost_for_5_days = flat_fee + (5 * daily_fee_5_days_or_less)\n    \n    if total_paid > cost_for_5_days:\n        # Calculate number of days after the first 5 days\n        additional_days = (total_paid - cost_for_5_days) / daily_fee_after_5_days\n        days_rented = 5 + additional_days\n    else:\n        # Calculate number of days if total paid is within the first 5 days\n        days_rented = (total_paid - flat_fee) / daily_fee_5_days_or_less\n        \n    return int(days_rented)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Since the booklet is folded in half, the page numbers on the two sides of a sheet\n    # can be represented by n and n+1 and the other side by 2s-n+1 and 2s-n+2,\n    # where s is the total number of sheets.\n    # For one sheet, the sum of numbers is n + (n+1) + (2s-n+1) + (2s-n+2) = 58\n\n    # Solving for s when the sum is 58\n    # 4s + 4 = 58 => 4s = 54 => s = 13.5, which is not possible because s must be integer.\n    # The next possible pair of pages n and n+1 that makes s an integer is when n is odd.\n\n    n = 1  # Start with the first page\n    while True:\n        # Calculate total number of sheets (s)\n        s = (58 - n - (n + 1)) // 2  # Integer division to ensure that s is an integer\n        # Check whether the solution is valid (pages are consecutive and result in the correct sum)\n        if s > 0 and (n + (n + 1) + (2*s - n + 1) + (2*s - n + 2)) == 58:\n            return s\n        n += 2  # Only odd numbers need to be tested since the pages are consecutive\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_12_pencils = 1.80\n    \n    # Cost of 1 pencil\n    cost_1_pencil = cost_12_pencils / 12\n    \n    # The ratio of the cost of a pen to the cost of a pencil is 7:3\n    # Therefore, cost of 1 pen is ratio times the cost of 1 pencil\n    cost_1_pen = (7 / 3) * cost_1_pencil\n    \n    # Work out the cost of 5 pens\n    cost_5_pens = 5 * cost_1_pen\n    \n    return cost_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n    \n    ans = drinks * food_items\n    return ans\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # The sequence is just two arithmetic sequences combined\n    # First: 4, 8, ..., 396, 400\n    # Second: 396, ..., 8, 4 (same as the first but in reverse and without the 400)\n    # We can calculate the sum of the first sequence and double it, then subtract the last term.\n\n    # Calculation for the first sequence\n    first_term = 4\n    last_term = 400\n    common_difference = 4\n\n    # Number of terms in the sequence\n    n = (last_term - first_term) // common_difference + 1\n\n    # Sum of arithmetic sequence, S_n = n/2 * (first_term + last_term)\n    sum_first_sequence = n * (first_term + last_term) // 2\n\n    # Since the second sequence is the same, without the last term,\n    # We can just subtract the last term and then double the sum\n    total_sum = 2 * sum_first_sequence - last_term\n\n    return total_sum\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                pass\n            else:\n                unlocked_lockers += 1\n        elif i % 5 == 0:\n            unlocked_lockers += 1\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Simon's speed in km/min\n    simon_speed = 80 / 60\n    # Wife's speed in km/min\n    wife_speed = 60 / 60\n\n    # The distance between their offices in km\n    distance_between_offices = 15\n\n    # Calculate the time taken for Simon to cover the 15 km gap (in minutes)\n    time_to_catch_up = distance_between_offices / (simon_speed - wife_speed)\n\n    # Initial departure time of both Simon and his wife\n    departure_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the time Simon overtakes his wife\n    overtaking_time = departure_time + timedelta(minutes=time_to_catch_up)\n\n    # Format the overtaking_time to HH:MM format\n    ans = overtaking_time.strftime('%H:%M')\n\n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_min = 2 / 3\n    total_time = 12\n    total_pancakes = pancakes_per_min * total_time\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations\n\ndef shortest_time(group, boat_time):\n    if len(group) == 1: \n        return group[0]  \n    elif len(group) == 2:  \n        return max(group)  \n    elif len(group) == 3:  \n        return min(\n            group[0] + group[1] + group[2],  \n            group[0] + 2 * group[1] + group[2]  \n        )\n\n    else:  \n        a, b = group[0], group[1]\n        return min(\n            a + 2 * b + group[-1] + shortest_time(group[:-1], boat_time),\n            2 * a + group[-2] + group[-1] + shortest_time(group[:-2], boat_time)\n        )\n\ndef solution():\n    group_times = [5, 5, 7, 9]  \n    boat_time = 2 \n    group_times.sort() \n    return shortest_time(group_times, boat_time)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_ratio = 1 / 5\n    original_price = sale_price / (1 - reduction_ratio)\n    \n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500  # total meters of road\n    total_days = 5    # total days to pave 500-meter road\n\n    meters_per_day = total_road / total_days  # unitary method to find meters per day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    minimum_same_country = 9\n\n    # We need to find the minimum number of participants to ensure 9 people from the same country.\n    # According to the Pigeonhole Principle, we add 1 to the product of countries and (minimum_same_country - 1)\n    # to make sure that there is at least one country with minimum_same_country participants.\n    participants = (minimum_same_country - 1) * countries + 1\n\n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Given sum of the sequence\n    total_sum = 2014\n    \n    # Number of terms in the sequence\n    num_terms = 53\n    \n    # Average of terms in the sequence is equal to sum divided by number of terms\n    average = total_sum / num_terms\n    \n    # The middle term in the sequence is the average (due to the properties of an arithmetic sequence)\n    middle_term = average\n    \n    # Since there are an odd number of terms and they are consecutive, \n    # the largest number will be (num_terms // 2) places away from the middle term\n    largest_number = middle_term + (num_terms // 2)\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(88 / A, 22)\n    \n    A_value = solve(equation, A)[0]\n    correct_answer = 98 / A_value\n\n    return (A_value, correct_answer)\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Define a function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    # Define a function to calculate combinations (nCr)\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Calculate the number of ways to reach the 5th step\n    # Nelson can take either 3 one steps + 1 two step or 1 one step + 2 two steps\n    ways_to_5th = combinations(4, 1) + combinations(3, 1)\n\n    # Calculate the number of ways to go from the 5th to the 10th step (5 steps)\n    # Nelson can take either 3 one steps + 1 two step, 1 one step + 2 two steps, or 5 one steps\n    ways_from_5th_to_10th = combinations(5, 2) + combinations(4, 1) + combinations(5, 0)\n\n    # Number of different ways to climb up the 10 steps\n    ans = ways_to_5th * ways_from_5th_to_10th\n\n    return ans\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_time_per_lap = 6 / 5\n    miller_time_per_lap = 10 / 5\n    \n    # Relative speed - how much faster Lucas is than Miller per lap\n    relative_speed = 1 / lucas_time_per_lap - 1 / miller_time_per_lap\n    \n    # Time taken for Lucas to complete one more lap than Miller\n    time_to_overtake = 1 / relative_speed\n    \n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    return 1674\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    ans = hours * minutes_per_hour\n    return ans\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    children_fraction = 3/5\n    men_fraction = 1/4\n\n    children = children_fraction * visitors\n    remaining = visitors - children\n    men = men_fraction * remaining\n\n    equation = Eq(children - men, 120)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 80  # Base charge in cents\n    additional_rate = 5  # Additional rate per minute in cents\n    total_cost = 140  # Total cost in cents\n    \n    # Base call duration is 15 minutes\n    base_duration = 15\n    \n    # Additional minutes are calculated by subtracting the base charge from the total cost\n    # and then dividing by the additional rate per minute\n    additional_minutes = (total_cost - base_charge) / additional_rate\n    \n    # Total call duration is the sum of the base duration and additional minutes\n    total_duration = base_duration + additional_minutes\n    \n    return total_duration\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age = 8\n    mother_future_age = 54\n    mother_current_age = mother_future_age - (mother_future_age - tim_age)\n\n    return mother_current_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # in meters\n    purple_length_m = orange_length_m / 9.2  # purple string length in meters\n    green_length_m = purple_length_m + 24.9 / 100  # green string length in meters (24.9 cm to meters)\n    \n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for A\n    A = symbols('A')\n\n    # Construct the equations based on the number puzzle\n    # A A A (111 * A)\n    # A A A (111 * A)\n    # ---- +\n    # B B B B (where B is a placeholder for 1111, It's not a variable to solve)\n    equation = Eq(111 * A + 111 * A, 1111)\n\n    # Solve the equation for A\n    sol = solve(equation, A)\n\n    return sol[0]\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    ans = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Amount of work Ivy does in a day\n    ivy_work_per_day = 1 / 24\n    # Amount of work Kevin does in a day\n    kevin_work_per_day = 1 / 20\n    \n    # Work done by Ivy in 18 days\n    ivy_work_total = ivy_work_per_day * 18\n    \n    # Total work is 1 (whole job)\n    total_work = 1\n    \n    # Work that needs to be done by Kevin\n    kevin_work_total = total_work - ivy_work_total\n    \n    # Number of days Kevin actually worked before taking days off\n    kevin_actual_work_days = kevin_work_total / kevin_work_per_day\n    \n    # Days Kevin took off\n    kevin_days_off = 18 - kevin_actual_work_days\n    \n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    total_length = 49.5\n    ratio = 5\n    shorter_piece = total_length / (1 + ratio)\n    longer_piece = ratio * shorter_piece\n\n    return round(longer_piece, 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60  # money given by Mum on Monday in pence\n    money_from_dad = 40  # money given by Dad on Monday in pence\n\n    # since the same amount is given on Tuesday and Wednesday\n    total_money = (money_from_mum + money_from_dad) * 3  # for Monday, Tuesday, and Wednesday\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    distance_covered = 0\n    days = 0\n\n    while distance_covered < well_height:\n        days += 1\n        distance_covered += climb_up\n        if distance_covered >= well_height:\n            break\n        distance_covered -= slide_down\n\n    return days\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let T be the time Tim takes to write the book alone\n    T = symbols('T')\n\n    # Nancy can write 1/6 of the book in a day\n    # Together, Nancy and Tim can write 1/4 of the book in a day\n    # Therefore, Tim writes 1/T of the book in a day\n\n    # The equation is based on the combined rate of work: 1/6 + 1/T = 1/4\n    equation = Eq(1/6 + 1/T, 1/4)\n\n    # Solve for T\n    tim_days = solve(equation, T)[0]\n\n    return tim_days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    initial_amount = 100\n    deposit_amount = 5\n    spend_amount = 8\n    days = 15\n    \n    # Calculating the total amount after 15 days\n    # In each cycle of 2 days (deposit on the first, spend on the second), the net change is deposit - spend.\n    net_change_per_cycle = deposit_amount - spend_amount\n    \n    # Since we have 15 days, there are 7 full cycles and 1 incomplete cycle (only a deposit on the 15th day)\n    full_cycles = days // 2\n    remaining_days = days % 2\n    \n    # Calculate the amount after full cycles\n    amount_after_full_cycles = initial_amount + (net_change_per_cycle * full_cycles)\n    \n    # Calculate the remaining amount considering the incomplete cycle (if any)\n    final_amount = amount_after_full_cycles + (deposit_amount * remaining_days)\n    \n    return final_amount\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the general terms for the numerators and the first term of the denominators\n    numerator = [i for i in range(7)]\n    first_denominator = [1, 2, 4, 7, 11, 16, 22]\n\n    # Initialize the sum to 0\n    sum_fraction = 0\n\n    # Calculate the sum of the fractions according to the given sequence\n    # The last term is a special case which only has denominator\n    for i in range(6):\n        sum_fraction += numerator[i] / (first_denominator[i] * first_denominator[i+1])\n\n    # Add the last term, which is just 1/22 as a special case\n    sum_fraction += 1 / first_denominator[-1]\n\n    # Return the final result\n    return sum_fraction\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    reduced_year_7_percentage = 10 # Percentage after some girls miss school\n    original_year_7_percentage = 20 # Original percentage of year 7 pupils\n    total_pupils_left = 400 # Number of pupils left at school after year 7 girls miss school\n\n    # New number of year 7 students is 10% of the remaining students\n    year_7_pupils_left = (reduced_year_7_percentage / 100) * total_pupils_left\n\n    # Original number of year 7 students is 20% of the total number of pupils\n    # Since the number of year 7 pupils missing is the difference between\n    # original and remaining year 7 pupils, we can express the original number\n    # of pupils as follows:\n    # original_year_7_pupils / original_total_pupils = original_year_7_percentage / 100\n    # => original_year_7_pupils = (original_year_7_percentage / 100) * original_total_pupils\n    # And\n    # year_7_pupils_left = original_year_7_pupils - missing_year_7_girls\n    # Combining both we get:\n    # year_7_pupils_left = (original_year_7_percentage / 100) * original_total_pupils - missing_year_7_girls\n    # But since\n    # remaining_pupils = original_total_pupils - missing_year_7_girls\n    # We can use remaining_pupils to express original_total_pupils\n    # remaining_pupils = total_pupils_left\n    # missing_year_7_girls = original_total_pupils - total_pupils_left\n    # So\n    # year_7_pupils_left = (original_year_7_percentage / 100) * original_total_pupils - (original_total_pupils - total_pupils_left)\n    # Solving for original_total_pupils we have:\n    original_total_pupils = total_pupils_left / (1 - (original_year_7_percentage / 100) + (reduced_year_7_percentage / 100))\n\n    return int(original_total_pupils)\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_amount = remaining_after_dress / (2/3)\n    \n    return initial_amount\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from math import factorial\n\ndef find_trailing_zeros(n):\n    zeros = 0\n    while n > 0:\n        n //= 5\n        zeros += n\n    return zeros\n\ndef solution():\n    num_zeros_999 = find_trailing_zeros(999)\n    num_zeros_300 = find_trailing_zeros(300)\n    ans = num_zeros_999 - num_zeros_300\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - slide_down\n    jumps_per_cycle = 3\n    cycle_height = effective_jump * jumps_per_cycle\n\n    # Calculate the total cycles needed minus the last incomplete cycle\n    cycles_needed = (total_height - jump_up) // cycle_height\n\n    # Height covered by complete cycles\n    height_after_cycles = cycles_needed * cycle_height\n\n    # Remaining height to be covered\n    remaining_height = total_height - height_after_cycles\n\n    # Total jumps including the last incomplete cycle\n    total_jumps = cycles_needed * jumps_per_cycle\n\n    # Calculating the number of jumps needed to cover the remaining height\n    while remaining_height > 0:\n        remaining_height -= jump_up  # Jump up\n        total_jumps += 1  # Increment jump count\n        if remaining_height <= 0:\n            break  # If the squirrel has reached or surpassed the top, exit the loop\n        remaining_height += slide_down  # Slide down if not at the top\n    \n    return total_jumps\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The outermost layer forms a square with a side of 60 students, so the perimeter p is:\n    p = 60 * 4\n    \n    # There are 4 corner students, each counted in two sides of the perimeter, so non-corner students on the perimeter are:\n    non_corner_perimeter_students = p - 4\n    \n    # These non-corner students actually form the side of a larger square enclosing the corner students\n    side_length_of_larger_square = (non_corner_perimeter_students // 4) + 1\n    \n    # The total number of students is the square of the side length of the larger square\n    total_students = side_length_of_larger_square ** 2\n    \n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    # Initialize the limits based on the given information\n    max_total = 100  \n\n    # Start with a reasonable initial guess on the number of lorries.\n    for lorries in range(1, max_total):\n        # Calculate the number of bikes from the number of lorries.\n        bikes = lorries + lorries // 4\n        # Calculate the number of cars from the number of bikes.\n        cars = bikes + bikes // 3\n        # Calculate the total number of vehicles\n        total_vehicles = lorries + bikes + cars\n        # Check for the conditions if the total is less than 100 and even.\n        if total_vehicles < max_total and total_vehicles % 2 == 0:\n            return (cars, bikes, lorries)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of buttons in box B\n    # Then initial number of buttons in box A is x+64\n    x = symbols('x')\n    \n    # For each button added to A, 2 are removed from box B\n    # Let y be the number of buttons added to A\n    # Then 2y buttons are removed from B, and B has 28 fewer than before\n    y = symbols('y')\n    \n    # After operations, number of buttons left in B is x-28\n    # The new ratio of total buttons to buttons in B is 4/1:\n    # (x + 64 + y) + (x - 28 - 2y) = 4 * (x - 28 - 2y)\n    equation = Eq((x + 64 + y) + (x - 28 - 2 * y), 4 * (x - 28 - 2 * y))\n\n    # Solve the equation to find the values of x and y\n    solution = solve((equation), (x, y))\n\n    # Find the initial number of buttons in box A, which is x+64\n    initial_buttons_in_A = solution[x] + 64\n\n    return initial_buttons_in_A\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1)**2  # Number of tiles in the current layer (which is a square)\n        if total_tiles - tiles_in_layer >= 0:\n            # Check the color of the layer\n            if layer % 2 == 1:\n                # Odd layers are red\n                red_tiles += tiles_in_layer\n            else:\n                # Even layers are green\n                green_tiles += tiles_in_layer\n\n            # Move to the next layer\n            layer += 1\n            total_tiles -= tiles_in_layer\n        else:\n            # Not enough tiles for a full layer, the remaining tiles would be of the color of the current layer\n            if layer % 2 == 1:\n                red_tiles += total_tiles\n            else:\n                green_tiles += total_tiles\n            break\n\n    # Determine which color is used more and the difference\n    if red_tiles > green_tiles:\n        more_used_color = 'red'\n    else:\n        more_used_color = 'green'\n\n    difference = abs(red_tiles - green_tiles)\n\n    return more_used_color, difference\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = (18 * 20132013) - (2013 * 180018)\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_gained_cards = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let's denote the number of rounds she won as x.\n    # Then she must have lost a total of (total_rounds - x) rounds.\n\n    # From the given problem, we create the equation:\n    # x * cards_per_win + (total_rounds - x) * cards_per_loss = total_gained_cards\n    # We can solve this equation for x to find out the number of rounds she won.\n\n    # x * cards_per_win - x * cards_per_loss = total_gained_cards + (total_rounds * cards_per_loss)\n    # x * (cards_per_win - cards_per_loss) = total_gained_cards + (total_rounds * cards_per_loss)\n    # x = (total_gained_cards + (total_rounds * cards_per_loss)) / (cards_per_win - cards_per_loss)\n\n    rounds_won = (total_gained_cards + (total_rounds * cards_per_loss)) / (cards_per_win - cards_per_loss)\n\n    # Now we find the number of rounds lost\n    rounds_lost = total_rounds - rounds_won\n\n    return int(rounds_lost)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval_distance = 10\n    bins = (length_of_boulevard // interval_distance) + 1\n    return bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number = int('26' + '2011' * n + '7')\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    total_flour_needed = flour_per_cake * number_of_cakes\n    return total_flour_needed\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        elif z > x and z > y:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # We can use stars and bars method to determine the number of ways\n    # Stars: 7 identical lollipops (stars)\n    # Bars: 2 bars to create 3 identical plates\n    # We need to calculate C(7+3-1, 3-1) i.e., C(9, 2)\n\n    from math import comb\n\n    return comb(7 + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob takes 3 minutes to make 3 cuts, which results in 4 pieces\n    # Therefore, each cut takes 1 minute\n    # To get 8 pieces, Bob needs to make 7 cuts\n    # So, he will need 7 minutes to cut a log into 8 pieces\n    minutes_per_cut = 3 / 3\n    cuts_for_8_pieces = 8 - 1\n    total_minutes = minutes_per_cut * cuts_for_8_pieces\n    return total_minutes\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * (1 - 3/5), 2 * chai_seng * (1 - 6/7))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_count = 236\n    duplicates_count = 57\n    new_cards_count = 34\n\n    final_count = (initial_count - duplicates_count) + new_cards_count\n\n    return final_count\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1 / i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    pencils = 56\n    pens = 60\n\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sequence = []\n    positive = 18\n    negative = -16\n    \n    while len(sequence) < 100:  # Assuming the pattern continues and we won't hit 100 terms\n        sequence.append(positive)\n        sequence.append(negative)\n        positive += 1\n        negative -= 1\n    \n    n = sequence[99]  # The next number is the 100th term in the sequence\n    return n\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Treating Amy and Judy as a single entity and factoring in rotation,\n    # there are 7 entities to arrange around the table.\n    number_of_entities = 7\n\n    # Calculate the number of ways to arrange these 7 entities\n    arrangements = factorial(number_of_entities - 1) # (n-1)! because of circular arrangements\n\n    # Amy and Judy can switch places with each other in 2 ways.\n    amy_judy_switch = 2\n\n    # Total number of arrangements\n    total_arrangements = arrangements * amy_judy_switch\n\n    return total_arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Andy and Ben's initial amount of cookies\n    andy_init, ben_init = symbols('andy_init ben_init')\n    \n    # Initial condition: Andy had 84 fewer cookies than Ben.\n    equation1 = Eq(andy_init, ben_init - 84)\n    \n    # After buying some cookies, Andy had 1/3 more and Ben had 1/5 more.\n    andy_final = andy_init + andy_init/3\n    ben_final = ben_init + ben_init/5\n    \n    # Final condition: Andy had 1/3 as many cookies as Ben in the end.\n    equation2 = Eq(andy_final, ben_final/3)\n    \n    # Solve the system of equations for Andy and Ben's initial cookies.\n    solutions = solve((equation1, equation2), (andy_init, ben_init))\n    \n    # Calculate the number of cookies Andy had in the end.\n    andy_end = solutions[andy_init] + solutions[andy_init]/3\n\n    return andy_end\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d (a > b > c > d)\n    # According to the problem, we have the following equations:\n    # d + (a + b + c) / 3 = 39 --(1)\n    # a + (b + c + d) / 3 = 51 --(2)\n\n    # Equation (1) can be rewritten and multiplied by 3 to clear the fraction:\n    # 3d + a + b + c = 117 --(3)\n\n    # Equation (2) can be rewritten and multiplied by 3 to clear the fraction:\n    # a + b + c + 3d = 153 --(4)\n\n    # By adding equations (3) and (4), we eliminate b and c:\n    # 4a + 4d = 270\n    # a + d = 270 / 4 = 67.5 --(5)\n\n    # a and d are whole numbers, so a + d must be an integer. The closest integer to 67.5 is 67 or 68.\n    # We take the larger sum to find the largest possible value for the largest number (a):\n    # a + d = 68 --(6)\n\n    # Now we assume that d is as small as possible (1) to maximize a, given that the numbers are distinct:\n    # a = 68 - d\n    # a = 68 - 1\n    # a = 67\n\n    # Therefore, the largest possible value for the largest number is 67.\n    return 67\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Given the constraints, let's try every possibility for the number that Mr. Tan could have written\n    # on the slip of paper, which is a divisor of two-digit numbers.\n\n    # Two-digit numbers range from 10 to 99 inclusive.\n    two_digit_numbers = set(range(10, 100))\n\n    # Try every number from 2 to 99 (since 1 would make everyone raise their hand)\n    for num in range(2, 100):\n        # Find all multiples of the num in two-digit numbers\n        divisible_by_num = {x for x in two_digit_numbers if x % num == 0}\n        \n        # Find all two-digit numbers not divisible by num\n        not_divisible_by_num = two_digit_numbers - divisible_by_num\n        \n        # Find all multiples of 24 in two-digit numbers\n        divisible_by_24 = {x for x in two_digit_numbers if x % 24 == 0}\n\n        # Find all two-digit numbers not divisible by 24\n        not_divisible_by_24 = two_digit_numbers - divisible_by_24\n\n        # 4 students raised their hands initially and 6 when asked about 24\n        # Tom raised his hand both times, meaning his number had to be\n        # divisible by both 'num' and 24 or not divisible by both 'num' and 24.\n        # We identify these numbers because Tom knows his number's status regarding both conditions.\n        tom_possibilities = (divisible_by_num & divisible_by_24) | (not_divisible_by_num & not_divisible_by_24)\n        \n        # If the number of friends who are certain about 'num' (minus Tom) plus the\n        # number of friends certain about 24 (minus Tom) equal the total number of friends (8),\n        # the number on the slip is likely our number since Tom is double counted.\n        if len(tom_possibilities) == 1 and len(divisible_by_num) - 1 + len(divisible_by_24) - 1 == 8:\n            # Tom's number is certain and unique in tom_possibilities, hence remove it from the list\n            # of other numbers to get the sum of all other numbers.\n            tom_number = tom_possibilities.pop()\n            return sum(two_digit_numbers - {tom_number})\n\n    return \"No valid number found\"\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n    \n    # Since the fraction is equivalent, we can find the new denominator by:\n    # (original_denominator / original_numerator) * new_numerator\n    new_denominator = (original_denominator / original_numerator) * new_numerator\n    \n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils passing at least one test\n    total_pass = 43\n    \n    # Individual test passes\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    \n    # Maximum pupils passing all 3 tests\n    # using Inclusion-Exclusion Principle for 3 sets we have:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # We need to find the maximum value of |A ∩ B ∩ C|, i.e., max_pass_all\n    # Since |A ∪ B ∪ C| is given, we can find max_pass_all as below:\n    # max_pass_all = |A| + |B| + |C| - |A ∪ B ∪ C| - 2 * (|A ∩ B| + |A ∩ C| + |B ∩ C|)\n    # We assume |A ∩ B| + |A ∩ C| + |B ∩ C| = 0 for maximum |A ∩ B ∩ C|\n    # max_pass_all = |A| + |B| + |C| - |A ∪ B ∪ C| = 30 + 28 + 25 - 43\n    max_pass_all = math_pass + science_pass + english_pass - total_pass\n\n    return max_pass_all\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for distances\n    distance = symbols('distance')\n\n    # Equation based on relative speed and distance they met away from the school\n    equation = Eq((distance - 210) / 80 + distance / 80, distance / 50)\n\n    # Solving the equation\n    solved_distance = solve(equation, distance)\n\n    return solved_distance[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Let the number of pens in the pencil cases be x1, x2, and x3 respectively.\n    # We need to find the number of solutions to the equation x1 + x2 + x3 = 6\n    # where x1, x2, x3 are positive integers (since the pencil cases cannot be empty).\n    # This is equivalent to finding the number of ways to partition 6 into exactly 3 parts.\n    # This can also be seen as finding the number of distributions of 6 indistinguishable items\n    # into 3 distinguishable boxes, which is a problem of combinations with repetitions.\n    \n    # Since x1, x2, x3 cannot be zero, let's use a change of variable to account for the non-emptiness:\n    # y1 = x1 - 1, y2 = x2 - 1, y3 = x3 - 1. So now we need to find non-negative solutions for\n    # y1 + y2 + y3 = 6 - 3 = 3\n    \n    # Number of combinations with repetitions formula is:\n    # (n + k - 1) choose (k - 1), where n is the total to divide and k is the number of parts.\n    # For our case, n = 3 and k = 3:\n    # (3 + 3 - 1) choose (3 - 1) = 5 choose 2.\n   \n    from math import comb\n    return comb(5, 2)\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    return (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_8_value = 8 * 1000  # The first 8 is in the thousands place\n    second_8_value = 8 * 100  # The second 8 is in the hundreds place\n    difference = first_8_value - second_8_value\n    return difference\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n    \n    years = 0\n    amount = principal\n    \n    while amount < final_amount:\n        interest = amount * rate\n        amount += interest\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by 5, its last digit must be 0 or 5.\n    # Since we need a four-digit number, A must be 0 or 5.\n    # A cannot be 5 because 5725 is not divisible by 4.\n    # For a number to be divisible by 4, the last two digits must be divisible by 4.\n    # Therefore, A must be 0, making the number 5720.\n    # Check divisibility by 4 just to confirm.\n    if int(str(572) + '0') % 4 == 0:\n        return 0\n    else:\n        return None\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "from sympy import lcm\n\ndef solution():\n    # Step 1: find the common supplement\n    common_supplement = -1\n\n    # Step 2: Find the LCM of all the divisors\n    divisors = [5, 6, 11]\n    lcm_of_divisors = lcm(5, 6, 11)\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    for i in range(lcm_of_divisors, 500, lcm_of_divisors):\n        if (i - 1) % 5 == 0 and (i - 2) % 6 == 0 and (i - 7) % 11 == 0:\n            common_supplement = i\n            break\n    if common_supplement == -1:\n        return \"No solution found\"\n\n    common_remainder = 1 + 2 + 7\n    unknown = common_supplement - common_remainder\n\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    n = 40309\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n\n    longest_piece = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_piece\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind_luna = 4\n\n    total_sheep = luna_position_from_front + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    weekly_earnings_goal = 270\n\n    hours_needed = weekly_earnings_goal / hourly_wage\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 10\n    # Let's denote x as the mean score of all 10 students\n    x = symbols('x')\n\n    # Mean score of the top 3 students is 92\n    top_3_mean = 92\n    top_3_total = top_3_mean * 3\n\n    # Mean score of the last 7 students is x - 6\n    last_7_mean = x - 6\n    last_7_total = last_7_mean * 7\n\n    # Equation based on the sum of the scores\n    equation = Eq(top_3_total + last_7_total, total_students * x)\n\n    # Solving for x (mean score of all 10 students)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        if len(set(year_str)) == 4:\n            digits = [int(digit) for digit in year_str]\n            if max(digits) - min(digits) == 3:\n                if len(set(permutations(digits))) == 24:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = [x for x in bags if x != red_marbles]\n        for jaslin_bags in combinations(x_bags, 3):\n            george_bags = [x for x in x_bags if x not in jaslin_bags]\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweets Andre and Beth originally had as 'a' and 'b' respectively.\n    a, b = symbols('a b')\n\n    # Equation1: Initially, Andre and Beth both had a total of 24 sweets\n    equation1 = Eq(a + b, 24)\n\n    # After their teacher gave them 4 sweets each, Andre has 6 sweets more than Beth\n    # Equation2: a + 4 = b + 4 + 6 \n    equation2 = Eq(a + 4, b + 4 + 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Beth's current sweets after getting extra 4 from the teacher\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the smallest even number be x\n    x = symbols('x')\n\n    # Define the equation based on the sum of five consecutive even numbers\n    eq = Eq(x + (x + 2) + (x + 4) + (x + 6) + (x + 8), 100)\n\n    # Solve the equation\n    smallest_even_number = solve(eq, x)[0]\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550  # in kilometers\n    time_taken = 5  # in hours\n    speed = distance / time_taken  # speed in km/h\n\n    time_to_travel = 3  # in hours\n    distance_travelled = speed * time_to_travel  # in kilometers\n\n    return distance_travelled\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5\n    remaining_apples = 150\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import gcd\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef solution():\n    numbers = [1, 2, 3, 4, 5]\n    lcm_result = 1\n    for number in numbers:\n        lcm_result = lcm(lcm_result, number)\n    return lcm_result\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from itertools import permutations\n    from math import gcd\n\n    blocks = 'RRBBYYGGOOPP'\n    \n    # A helper function to check if the arrangement is even\n    def is_even(arrangement):\n        for c in set(blocks):\n            i, j = arrangement.index(c), arrangement.rindex(c)\n            if (j - i - 1) % 2 != 0:\n                return False\n        return True\n\n    even_count = 0\n    total_count = 0\n    # We will use a set to avoid counting duplicate permutations\n    seen_permutations = set()\n\n    for permutation in permutations(blocks):\n        if permutation not in seen_permutations:\n            seen_permutations.add(permutation)\n            total_count += 1\n            if is_even(permutation):\n                even_count += 1\n\n    # Find the gcd in order to reduce the fraction\n    common_divisor = gcd(even_count, total_count)\n    m = even_count // common_divisor\n    n = total_count // common_divisor\n\n    # Return the sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    number_of_jumps = 14  # From the 1st to the 15th post we need 14 jumps\n    total_distance = distance_per_jump * number_of_jumps\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits (pears + strawberries + apples)\n    friends = 6  # Number of friends\n    fruits_per_friend = total_fruits // friends  # Fruits divided equally among friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The largest five-digit number is 99999 and the smallest is 10000.\n    # Since the number must be a multiple of 45, it must also be a multiple of 9 and 5.\n    # For a number to be a multiple of 5, its last digit must be 5 or 0.\n    # To be a palindromic number and end with 0, it must start with 0, which is not a five-digit number.\n    # Hence, it must end with 5, start with 5, and be a multiple of 9.\n    # To be a multiple of 9, the sum of its digits must be a multiple of 9.\n    \n    # Largest palindromic number that is a multiple of 45\n    # Starting from 99999 and going down to find the largest such number\n    for i in range(99999, 10000, -1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:  # Check if the number is palindromic and a multiple of 45\n            largest_palindrome = i\n            break\n\n    # Smallest palindromic number that is a multiple of 45\n    # Starting from 10001 and going up to find the smallest such number\n    for i in range(10001, 99999, 1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:  # Check if the number is palindromic and a multiple of 45\n            smallest_palindrome = i\n            break\n    \n    # Difference between the largest and smallest palindromic numbers\n    ans = largest_palindrome - smallest_palindrome\n    return ans\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alan and Bob's individual rates (rooms per hour)\n    r_alan, r_bob = symbols('r_alan r_bob')\n\n    # Equation 1: Alan and Bob together paint 1 room in 4 hours\n    equation1 = Eq(1/r_alan + 1/r_bob, 1/4)\n    \n    # Given information: Bob takes 6 hours to paint on his own\n    r_bob = 1/6\n    \n    # Now we substitute Bob's rate into the equation to solve for Alan's rate\n    equation1 = equation1.subs(r_bob, 1/6)\n\n    # Solve for Alan's individual rate\n    solution_rates = solve(equation1, r_alan)\n\n    # Calculate Alan's time to paint the room on his own\n    return 1 / solution_rates[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n\n    # Probability that it will not rain on Saturday\n    prob_not_rain_saturday = 1 - prob_rain_saturday\n    # Probability that it will not rain on Sunday\n    prob_not_rain_sunday = 1 - prob_rain_sunday\n\n    # Probability that it will not rain on both days\n    prob_not_rain_both_days = prob_not_rain_saturday * prob_not_rain_sunday\n\n    # Probability that it will rain on at least one day\n    prob_rain_at_least_one_day = 1 - prob_not_rain_both_days\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    \n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n\n    # Let's use the system of equations to solve this problem\n    # Let x be the number of correct answers and y be the number of incorrect answers\n    # Then we have two equations:\n    # Equation 1: x + y = total_questions\n    # Equation 2: points_per_correct * x + points_per_incorrect * y = total_points \n\n    # From Equation 1: y = total_questions - x\n    # Substituting y in Equation 2:\n    # points_per_correct * x + points_per_incorrect * (total_questions - x) = total_points \n    # Solving for x in terms of total_points, points_per_correct, points_per_incorrect, total_questions:\n    for x in range(total_questions + 1):\n        if points_per_correct * x + points_per_incorrect * (total_questions - x) == total_points:\n            return total_questions - x\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    factorial = 1\n    zeros = 0\n    \n    while zeros < 28:\n        factorial *= n\n        temp_factorial = factorial\n        temp_zeros = 0\n        while temp_factorial % 10 == 0:\n            temp_factorial //= 10\n            temp_zeros += 1\n        if temp_zeros > zeros:\n            zeros = temp_zeros\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_A = 1/36  # Pool filling rate for inlet A per minute\n    rate_B = 1/48  # Pool filling rate for inlet B per minute\n\n    # Define cycle times: (minutes for A, minutes for B)\n    cycle_times = [(1, 2), (2, 1), (1, 2)]\n    \n    # Initialize variables\n    total_time = 0\n    filled_portion = 0\n    cycle_index = 0\n\n    # Open inlets A and B in turns until the pool is filled\n    while filled_portion < 1:\n        # Opening inlet A\n        filled_portion += cycle_times[cycle_index][0] * rate_A\n        total_time += cycle_times[cycle_index][0]\n\n        # Check if pool is filled\n        if filled_portion >= 1:\n            break\n\n        # Opening inlet B\n        filled_portion += cycle_times[cycle_index][1] * rate_B\n        total_time += cycle_times[cycle_index][1]\n\n        # Moving to the next cycle\n        cycle_index = (cycle_index + 1) % len(cycle_times)\n\n    return round(total_time)\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10  # Initially Lucas bought 10 bottles\n    empty_bottles = 10  # These 10 bottles will become empty\n    borrowed_empty_bottle = 1  # Borrow 1 empty bottle from the shop owner\n\n    # Lucas can continue drinking as long as there are 2 empty bottles to exchange\n    while empty_bottles + borrowed_empty_bottle >= 2:\n        # Exchange empty bottles for new bottles of water\n        new_bottles = (empty_bottles + borrowed_empty_bottle) // 2\n        total_bottles += new_bottles\n\n        # Update the count of empty bottles\n        empty_bottles = (empty_bottles + borrowed_empty_bottle) % 2 + new_bottles\n\n        # Return the borrowed bottle when it's possible\n        if borrowed_empty_bottle == 1 and empty_bottles >= 2:\n            borrowed_empty_bottle = 0\n    \n    return total_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let the total volume of water in each pool be V (since they have the same base and height)\n    # Pool A drains V water in 10 minutes, so the drain rate is V/10 per minute\n    # Pool B drains V water in 6 minutes, so the drain rate is V/6 per minute\n    # Let t be the number of minutes passed\n    # The volume of water left in pool A after t minutes is V - (V/10)t\n    # The volume of water left in pool B after t minutes is V - (V/6)t\n    # We want the height of A's waterline to be 3 times that of B,\n    # so the remaining volume in A should be 3 times the remaining volume in B\n    # V - (V/10)t = 3 * (V - (V/6)t)\n    # Simplify and solve for t:\n    # V - Vt/10 = 3V - Vt/2\n    # 2V - Vt/5 = 3V - Vt/2\n    # Multiply through by 10 to clear denominators:\n    # 20V - 2Vt = 30V - 5Vt\n    # Collect terms and solve for t:\n    # 3Vt - 2Vt = 10V\n    # Vt = 10V\n    # t = 10 minutes\n    # However, since we need A's waterline to be exactly 3 times that of B and not drained completely,\n    # We need to adjust the equation above to consider the height difference rather than total volume\n    # (V - (V/10)t) / V = 3 * ((V - (V/6)t) / V)\n    # Simplify and solve for t:\n    # 1 - t/10 = 3 * (1 - t/6)\n    # 1 - t/10 = 3 - t/2\n    # Multiply through by 10 to clear denominators:\n    # 10 - t = 30 - 5t\n    # Collect terms and solve for t:\n    # 4t = 20\n    # t = 5 minutes\n\n    t = 5  # minutes\n    return t\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position = 10  # Counting from the front\n    andrea_position_from_end = 12  # Counting from the end\n\n    andrea_position = total_children - andrea_position_from_end + 1\n\n    children_between = andrea_position - vanessa_position - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    # number of weeks\n    weeks = 7\n    # Initial sweets count\n    initial_sweets = 320\n    # Sweets after 7 weeks\n    final_sweets = 348\n    # Sweets gained each week\n    sweets_bought_each_week = 30\n    \n    # Calculate total sweets gained after 7 weeks\n    total_sweets_gained = weeks * sweets_bought_each_week\n    \n    # Calculate total sweets she should have had without eating any\n    total_sweets_without_eating = initial_sweets + total_sweets_gained\n    \n    # Calculate total sweets eaten after 7 weeks\n    total_sweets_eaten = total_sweets_without_eating - final_sweets\n    \n    # Calculate sweets eaten each week\n    sweets_eaten_each_week = total_sweets_eaten // weeks\n    \n    return sweets_eaten_each_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = total_path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has\n    # Then Chenxi has x + 5 sweets\n    # After Chenxi gives Yue Ying 10 sweets, Chenxi will have (x + 5 - 10) sweets and Yue Ying will have (x + 10) sweets\n    # The difference in number of sweets they have now will be the absolute value of (x + 10) - (x + 5 - 10)\n    difference_after = abs((10 - 5))\n    \n    return difference_after\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Since \"Time Problem\" usually refers to problems involving arrangements \n    # where time is a factor, and this particular problem does not provide \n    # any additional context or information, we assume it is a problem about \n    # the number of ways to arrange the digit '1' which, in any case, is trivial.\n\n    # Arranging one item (in this case, the digit '1') can only be done in one way.\n    ans = 1  \n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    late_time_minutes = 12\n    early_time_minutes = 8\n    slow_speed = 3  # in km/h\n    fast_speed = 7  # in km/h\n\n    # Convert minutes into hours\n    late_time_hours = late_time_minutes / 60\n    early_time_hours = early_time_minutes / 60\n\n    # Let the distance from the home to the office be 'd' km.\n    # The time to travel at slow speed is (distance/slow speed) and at fast speed is (distance/fast speed)\n    \n    # According to the problem, if we subtract the time taken at fast speed from the time taken at slow speed,\n    # we get the total time difference which is the sum of being late and being early.\n    \n    # (distance/slow_speed + late_time_hours) - (distance/fast_speed - early_time_hours) = late_time_hours + early_time_hours\n    # Solving for 'distance' using the speeds and time difference:\n    distance = (late_time_hours + early_time_hours) / (1/slow_speed - 1/fast_speed)\n\n    return distance\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 69))\n    for p in primes:\n        if isprime(69 - p):\n            difference = abs(69 - 2*p)\n            return difference\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Before the transfer\n    A_original = symbols('A_original')\n    B_original = symbols('B_original')\n\n    # After the transfer\n    A_after = A_original - 20\n    B_after = B_original + 20\n\n    # Equations based on the problem statement\n    equation1 = Eq(A_original + B_original, 1050)\n    equation2 = Eq(A_after, B_after + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A_original, B_original))\n\n    # Return the number of students in School A originally\n    return solutions[A_original]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Initialize a default max value and string format of the equation\n    max_value = 0\n    max_equation = \"\"\n    \n    # Define the parts of the equation to combine with brackets\n    parts = [\"15\", \"+5\", \"*5\", \"+15\", \"-6\", \"+7\"]\n    \n    # Generate all possible permutations of placing two pairs of brackets\n    for i in range(len(parts)):\n        for j in range(i+2, len(parts)): # Brackets cannot be adjacent\n            for k in range(j+2, len(parts)): # Second bracket must be after first bracket ends\n                for l in range(k+2, len(parts)): # Brackets cannot be adjacent\n                    # Construct the equation string with the current permutation of brackets\n                    equation = ''.join(parts[:i]) + \"(\" + ''.join(parts[i:j]) + \")\" + ''.join(parts[j:k]) + \"(\" + ''.join(parts[k:l]) + \")\" + ''.join(parts[l:])\n                    \n                    # Evaluate the equation and compare with the current max value\n                    value = eval(equation)\n                    if value > max_value:\n                        max_value = value\n                        max_equation = equation\n                        \n    return max_value\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n\n    for correct_answers in range(0, total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_points + incorrect_answers * incorrect_points) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n    \n    writing_only_students = total_students - neither_class_students - (math_students - both_classes_students)\n    \n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = \"08072003\"\n    prime_numbers = []\n\n    # Generate all permutations of the given digits\n    for n in range(1, 51):\n        # Check if the number is prime\n        if isprime(n):\n            # Convert the prime number to a string to compare digits\n            prime_str = str(n)\n            # Make sure all digits in the prime number are in the given digits\n            if all(prime_str.count(digit) <= digits.count(digit) for digit in prime_str):\n                # The number is prime and formed with the digits of Judy's birthday\n                prime_numbers.append(n)\n\n    # Return the largest prime number found\n    return max(prime_numbers)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_sum = 54 * 5\n    sum_first_two = 48 * 2\n    sum_last_three = total_sum - sum_first_two\n    average_last_three = sum_last_three / 3\n    return average_last_three\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age = symbols('teddy_age father_age')\n    \n    # When Teddy was 5, his father's age was 7 times his age.\n    equation1 = Eq(father_age, 7 * teddy_age)\n    \n    # When his father is 40, it's a future event, so we need to see how many years have passed\n    # since Teddy was 5. Let's use 'years_passed' variable to represent that.\n    years_passed = symbols('years_passed')\n    \n    # expressing father's future age in terms of years passed and current age when Teddy was 5\n    equation2 = Eq(father_age + years_passed, 40)\n    # expressing Teddy's future age in terms of years passed and current age when he was 5\n    equation3 = Eq(teddy_age + years_passed, teddy_age + years_passed)\n    \n    # we also know Teddy's current age when he was 5, which is given.\n    equation4 = Eq(teddy_age, 5)\n    \n    # now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (teddy_age, father_age, years_passed))\n    \n    # we need the value of Teddy's future age, which is his age when he was 5 plus years passed\n    teddys_future_age = solutions[teddy_age] + solutions[years_passed]\n\n    return teddys_future_age\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Finding the fraction of the audience that are girls\n    fraction_girls_of_remainder = 1 - (4 / 5)\n    fraction_girls = fraction_girls_of_remainder * (5 / 7)\n\n    # Fraction representing the difference between adults and girls\n    fraction_difference = (2 / 7) - fraction_girls\n\n    # Since the difference represents 80 people, we find the total number of people\n    total_people = 80 / fraction_difference\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Number of slices after nth cut can be calculated using formula:\n    # slices = n * (n + 1) / 2 + 1\n    # Where n is the number of cuts.\n    \n    n = 4 # the number of cuts\n    slices = (n * (n + 1)) // 2 + 1 # using integer division for number of pieces\n    \n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Since the elephant is in the 10th position from the left\n    # and there are 5 toys between the rabbit and elephant,\n    # the rabbit is on the 10th + 5 (in between) + 1 (rabbit's position) = 16th position from the left.\n    rabbit_position_from_left = 10 + 5 + 1\n\n    # To find the rabbit's position from the right,\n    # subtract rabbit's position from the left from the total number of toys.\n    rabbit_position_from_right = 40 - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_of_digits = 0\n    for page in range(1, 110):\n        for digit in str(page):\n            sum_of_digits += int(digit)\n    return sum_of_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = 1\n    gray = 11 * pink\n    total = pink + gray\n\n    while total != 48:\n        pink += 1\n        gray = 11 * pink\n        total = pink + gray\n    \n    return pink\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54  # Area of the triangle\n    base = 9   # Base length of the triangle\n\n    # The area of a triangle formula is: A = 1/2 * base * height\n    # Solve for the height: height = (2 * A) / base\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression first.\n    # Using the fact that 4 = 2^2, we can simplify the expression as follows:\n    # (2^2019) / (2^(2*982) - 2^1963)\n    # Since 2*982 = 1964, we can rewrite the expression as:\n    # (2^2019) / (2^1964 - 2^1963)\n    # Factor out 2^1963\n    # (2^2019) / (2^1963 * (2 - 1))\n    # Simplify further:\n    # (2^2019) / (2^1963)\n    # Which simplifies to:\n    # 2^(2019-1963)\n    # So we have:\n    remain = 2**(2019-1963) % 5\n\n    return remain\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    equation1 = Eq(chairs, tables)\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 0.35 * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Counting Candy's cabinet itself\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Iterate through all 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]  # Split the number into its digits\n            if sum(digits) == 7:  # Check if the sum of the digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        number = int(f\"106{Y}\")\n        if number % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n\n    remaining_cookies = initial_cookies - eaten_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for last_two_digits in range(99, -1, -1):\n        num = int(\"49\" + f\"{last_two_digits:02d}\")\n        if (num % 2 == 0) and (num % 3 == 0) and (num % 5 == 0):\n            return num\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the number of motorcycles, c be the number of cars, and l be the number of lorries\n    m, c, l = symbols('m c l')\n    \n    # Each vehicle type's equation based on the number of wheels it has\n    equation1 = Eq(2 * m + 4 * c + 6 * l, 96)  # Total wheels\n    equation2 = Eq(m + c + l, 27)               # Total vehicles\n    equation3 = Eq(c, l)                        # The number of cars equal to the number of lorries\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, c, l))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n\n    ans = sum_of_cubes // sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    chocolates_5 = 185\n    chocolates_17 = 317\n    chocolates_diff = chocolates_17 - chocolates_5\n    chocolates_count_diff = 17 - 5\n\n    # Mass per chocolate\n    mass_per_chocolate = chocolates_diff / chocolates_count_diff\n\n    # Mass of empty jar\n    jar_mass = chocolates_5 - (5 * mass_per_chocolate)\n\n    # Mass of jar with 10 chocolates\n    jar_with_10_chocolates = jar_mass + (10 * mass_per_chocolate)\n\n    return int(jar_with_10_chocolates)\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n    \n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n    \n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n    \n    kristoff_height = solutions[kristoff]\n    ana_height = solutions[ana]\n    \n    difference = kristoff_height - ana_height\n    \n    return difference\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of apples be a\n    a = symbols('a')\n    \n    # Number of pears and mangoes in terms of number of apples\n    pears = (4/5) * a\n    mangoes = (2/5) * a\n    \n    # Total cost for fruits\n    total_cost = 150\n    \n    # Cost of apples and cost per apple\n    cost_per_apple = 0.60\n    cost_apples = cost_per_apple * a\n    \n    # Define the ratios for cost\n    # Cost of apples : Cost of pears = 3 : 2\n    # Cost of pears : Cost of mangoes = 1 : 5\n    \n    # Let cost of pears be p and cost of mangoes be m\n    p, m = symbols('p m')\n    \n    # Equations based on the given ratios\n    equation1 = Eq(cost_apples / p, 3 / 2)\n    equation2 = Eq(p / m, 1 / 5)\n    equation3 = Eq(cost_apples + p + m, total_cost)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, p, m))\n    \n    # Calculate total number of fruits bought\n    apples_bought = solutions[a]\n    pears_bought = (4/5) * apples_bought\n    mangoes_bought = (2/5) * apples_bought\n    \n    total_fruits = apples_bought + pears_bought + mangoes_bought\n    \n    return int(total_fruits)\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700  # total weight of the sugar solution\n    sugar_concentration = 0.32  # sugar concentration in the solution\n    \n    sugar_weight = total_weight * sugar_concentration  # weight of sugar in the solution\n    water_weight = total_weight - sugar_weight  # weight of water in the solution\n    \n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Initialize the smallest possible seven-digit number.\n    smallest_number = 1992000\n    \n    # Iterate to find the number divisible by 2, 3, 5, and 11.\n    # Since the number is divisible by 2 and 5, it must end with a 0.\n    # We only need to find the three missing digits that make the number divisible by 3 and 11.\n    while True:\n        str_number = str(smallest_number)\n        \n        # Check for divisibility by 3 by checking the sum of the digits.\n        if sum(int(digit) for digit in str_number) % 3 == 0:\n            # For divisibility by 11, check the alternate sum and difference of the digits.\n            if (int(str_number[0]) - int(str_number[1]) + int(str_number[2]) \n                - int(str_number[3]) + int(str_number[4]) - int(str_number[5]) + int(str_number[6])) % 11 == 0:\n                return smallest_number\n\n        # Increment the number by 10 since the last digit must be 0 for divisibility by 2 and 5.\n        smallest_number += 10\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    trees = 21\n    road_length = 800\n    intervals = trees - 1\n    distance_between_trees = road_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    jessica_age_diff = 3\n\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - jessica_age_diff\n\n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366  # Total kWh saved in the first half of the year\n    average_second_half = 65  # Average kWh saved per month in the second half of the year\n    months_in_half_year = 6\n\n    total_second_half = average_second_half * months_in_half_year  # Total kWh saved in the second half of the year\n    total_year = total_first_half + total_second_half  # Total kWh saved in the entire year\n    total_months = 12  # Total number of months in a year\n\n    average_per_month_last_year = total_year / total_months  # Average kWh saved per month last year\n\n    return average_per_month_last_year\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n\n    ways = factorial(total_letters)\n    for count in letter_counts.values():\n        ways //= factorial(count)\n\n    return ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    # This is the sum of an arithmetic series\n    # where the first term a1 is 4, the last term an is 11,\n    # and the difference d is 1.\n    a1 = 4\n    an = 11\n    d = 1\n\n    # The number of terms n is (an - a1) / d + 1\n    n = (an - a1) // d + 1\n\n    # The sum of the arithmetic series is n/2 * (a1 + an)\n    sum_series = n * (a1 + an) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_for_5_assignments = 94 * 5\n    total_for_6_assignments = 92 * 6\n    score_for_6th_assignment = total_for_6_assignments - total_for_5_assignments\n    return score_for_6th_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    # Calculate the profit per pair\n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n\n    # Calculate the number of pairs sold to make the total profit\n    pairs_sold = total_profit / profit_per_pair\n\n    # Calculate the initial number of pairs purchased by adding the remaining pairs\n    initial_pairs_purchased = pairs_sold + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_time = datetime.strptime('5:30 PM', '%I:%M %p')\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    duration = end_time - half_time\n    start_time = half_time - duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_end = 30\n    cars_exit = 10\n    cars_enter = 8\n\n    cars_beginning = cars_end - cars_enter + cars_exit\n    return cars_beginning\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x*2)/4)**2 - 4, 6*10)\n\n    ans = solve(equation, x)\n    return ans\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_per_day = 10\n    leak_per_night = 3\n    current_water = 3\n    days_passed = 1  # Starts with the first day when 3 liters are already filled\n\n    while current_water < total_water_needed:\n        current_water += (fill_per_day - leak_per_night)  # Net water level at the end of each day\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_in_5_minutes = 27\n    minutes_needed = 20\n\n    toys_per_minute = toys_in_5_minutes / 5\n    total_toys = toys_per_minute * minutes_needed\n\n    return total_toys\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_period = 24\n    ginny_period = 36\n\n    lcm = (amy_period * ginny_period) // gcd(amy_period, ginny_period)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour\n    current_number = 1\n    digits_written = 0\n\n    # Count the digits as time goes by\n    while total_seconds > 0:\n        digits_in_number = len(str(current_number))\n        if total_seconds >= digits_in_number:\n            digits_written += digits_in_number\n            total_seconds -= digits_in_number\n            current_number += 1\n        else:\n            break\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    smallest = min(amounts)\n    largest = max(amounts)\n    ans = largest - smallest\n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%M %p')\n    start_time = end_time - timedelta(minutes=225)  # subtract 225 minutes from end_time\n    return start_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # The worst case scenario is when Darrell draws all non-green marbles first.\n    # Therefore, he must draw all blue, white, and black marbles before he gets a green one.\n    \n    # Total number of non-green marbles\n    non_green_marbles = 5 + 9 + 2  # Blue + White + Black\n    \n    # Darrell must draw all non-green marbles plus one more to guarantee a green marble.\n    marbles_to_draw = non_green_marbles + 1\n    \n    return marbles_to_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # The snail climbs 6 metres during the day and 2 metres on the 7th day.\n    # Let's denote the height the snail slides down during the night as 'slide_down'.\n    slide_down = symbols('slide_down')\n    \n    # After the first 6 days, the snail has climbed 6 meters each day.\n    # On the 7th day, it climbs 2 meters before reaching the top.\n    # The total distance climbed by the snail before the 7th day is then:\n    # 6 days * (6 meters up - slide_down meters down) + 2 meters up on the 7th day.\n    total_climbed = Eq(6 * (6 - slide_down) + 2, 20)\n\n    # Solving for the height the snail slides down during the night.\n    slide_down_distance = solve(total_climbed, slide_down)\n\n    return slide_down_distance[0]\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits / 2\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for walking speeds\n    ivy_speed, candy_speed = symbols('ivy_speed candy_speed')\n\n    # Equation for the total distance they walked\n    equation = Eq(ivy_speed * (18/60) + candy_speed * (12/60), 1200)\n    \n    # Relation between Ivy's and Candy's walking speeds\n    speed_relation = Eq(ivy_speed, candy_speed + 20)\n\n    # Solving the system of equations\n    solutions = solve((equation, speed_relation), (ivy_speed, candy_speed))\n\n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays with every other player once. \n    # With 8 players, each player plays 7 games, since they don't play against themselves.\n    # The maximum number of games one can win is equal to the number of games they play.\n    # Since each player's number of wins is unique, we can simply assign the maximum wins\n    # to the champion, which would be 7 for the champion, 6 for the second place, and so on.\n    \n    # The champion's number of wins is 7 since there are no ties and no one can win more games.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    # Number of curry puffs Minah can make in 1 hour\n    curry_puffs_per_hour = 24 / 2\n\n    # Number of hours to make 120 curry puffs\n    hours_to_make_120 = 120 / curry_puffs_per_hour\n\n    return hours_to_make_120\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    mass1 = 6\n    nickel_percent1 = 45\n    mass2 = 14\n    nickel_percent2 = 60\n    \n    nickel_mass1 = mass1 * (nickel_percent1 / 100)\n    nickel_mass2 = mass2 * (nickel_percent2 / 100)\n    \n    total_nickel_mass = nickel_mass1 + nickel_mass2\n    total_mass = mass1 + mass2\n    \n    new_nickel_percent = (total_nickel_mass / total_mass) * 100\n    \n    return new_nickel_percent\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    \n    for x1 in range(1, 13):\n        for x2 in range(1, 13 - x1):\n            for x3 in range(1, 13 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        if mother_age == 3 * (edward_age + years):\n            break\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio_cm_to_m = 1 / 6\n    plan_length_cm = 5\n    real_length_m = plan_length_cm / scale_ratio_cm_to_m\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let the side of the initial square be x\n    # Then the number of students in the initial square is x^2\n    # And the number in the larger square is (x+1)^2\n    # According to the problem:\n    # x^2 + 11 + 12 = (x+1)^2\n    # Simplify and solve for x\n    x = 1\n    while True:\n        if (x * x + 11 + 12) == (x + 1) * (x + 1):\n            break\n        x += 1\n    # The number of students is x^2 + 11\n    return x * x + 11\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    price_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // price_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = 15\n    apples_per_boy = 30\n    apples_per_girl = 20\n    average_apples = 26\n    \n    girls = symbols('girls')\n    total_apples = boys * apples_per_boy + girls * apples_per_girl\n    total_people = boys + girls\n\n    equation = Eq(total_apples / total_people, average_apples)\n    \n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    difference = 56\n    tank_B = tank_A + difference\n    return tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_balls = 12\n    total_cost = 340\n    basketball_cost = 30\n    volleyball_cost = 25\n\n    # Assume all balls are basketballs and calculate the cost\n    cost_if_all_basketballs = total_balls * basketball_cost\n\n    # Now calculate the difference between this assumption and the actual total cost\n    cost_diff = cost_if_all_basketballs - total_cost\n\n    # The difference is due to the fact that volleyballs cost less than basketballs\n    # Calculate the number of volleyballs by dividing this difference by the cost difference\n    # between a basketball and a volleyball\n    num_volleyballs = cost_diff // (basketball_cost - volleyball_cost)\n\n    # The rest are basketballs\n    num_basketballs = total_balls - num_volleyballs\n\n    return num_basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the mass of mint candies, which stays constant across containers\n    m = symbols('m')\n    total_mass = 1371\n\n    # Container 1: strawberry / total = 2/5 => strawberry = 2/5 * total\n    # Container 2: strawberry / total = 2/7 => strawberry = 2/7 * total\n    # Container 3: strawberry / total = 2/9 => strawberry = 2/9 * total\n    # Each total includes m (mass of mint candies) and differs by the chocolate candies\n    # Let's set equations for the total mass of each container\n    # total = strawberry + chocolate + m\n\n    # Fraction of strawberry candies\n    f1, f2, f3 = 2/5, 2/7, 2/9\n\n    # Equations for the different containers:\n    # container1 + container2 + container3 = 1371\n    # container1 = f1 * container1 + container1 * chocolate to mint ratio + m\n    # container2 = f2 * container2 + container2 * chocolate to mint ratio + m\n    # container3 = f3 * container3 + container3 * chocolate to mint ratio + m\n    \n    # Since the ratio of chocolate to mint is the same across all containers and mint is constant:\n    # Let's assume this to be 1 for simplicity of equations. If the ratio is r, it will cancel out anyway.\n    # container1 = (f1 + 1 + 1) * container1\n    # container2 = (f2 + 1 + 1) * container2\n    # container3 = (f3 + 1 + 1) * container3\n\n    # Now we set up our equations based on the fractions and solve for the mass m and container masses\n    container1 = symbols('container1')\n    container2 = symbols('container2')\n    container3 = symbols('container3')\n\n    # container = (fraction of strawberry + 1) * container + m\n    eq1 = Eq(container1, (f1 + 1) * container1 + m)\n    eq2 = Eq(container2, (f2 + 1) * container2 + m)\n    eq3 = Eq(container3, (f3 + 1) * container3 + m)\n    eq4 = Eq(container1 + container2 + container3, total_mass)\n\n    solutions = solve((eq1, eq2, eq3, eq4), (container1, container2, container3, m))\n\n    # Mass of strawberry candies in each container\n    strawberry_mass_1 = f1 * solutions[container1]\n    strawberry_mass_2 = f2 * solutions[container2]\n    strawberry_mass_3 = f3 * solutions[container3]\n\n    # Total mass of strawberry candies (sum of strawberry candies mass across all containers)\n    total_strawberry_mass = strawberry_mass_1 + strawberry_mass_2 + strawberry_mass_3\n\n    return total_strawberry_mass\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = remaining_candy * (1/3)\n    remaining_candy_after_brother = remaining_candy - candy_to_brother\n    return remaining_candy_after_brother\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum((1/i)*k for i in range(2, 61) for k in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Roy's and Dennis's amounts\n    roy, dennis = symbols('roy dennis')\n\n    # Equation representing the total sum of money they have\n    equation1 = Eq(roy + dennis, 340)\n\n    # Equation representing Dennis having twice the money left as Roy after spending\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2 * roy / 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate the final amount of money Dennis had\n    dennis_end = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_end\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friday = symbols('friday')\n    \n    saturday = friday + 27\n    sunday = friday - 14\n    total = friday + saturday + sunday\n\n    equation = Eq(total, 475)\n    solution = solve(equation, friday)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_per_page = 1\n    page_count = 0\n    total_digits = 0\n\n    while total_digits < 300:\n        page_count += 1\n        if page_count >= 10 ** digits_per_page:\n            digits_per_page += 1\n        total_digits += digits_per_page\n\n    last_page_number = page_count if total_digits == 300 else page_count - 1\n\n    return last_page_number\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    cost_per_ball = 20.45\n    number_of_balls = 8\n    number_of_hoops = 6\n\n    total_cost_balls = cost_per_ball * number_of_balls\n    total_cost_hoops = total_cost - total_cost_balls\n    cost_per_hoop = total_cost_hoops / number_of_hoops\n\n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    # Factorize 693 into its prime factors\n    factors = factorint(693)\n    # To make a perfect square, each prime factor's power should be even\n    # Find the smallest number to multiply with 693 to make all powers even\n    smallest_number = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:  # If the power is not even\n            smallest_number *= prime\n\n    return smallest_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    unit_digit_13 = 13 ** (242 % 4)  # Cycle of unit digits for powers of 13 is 4\n    unit_digit_17 = 17 ** (379 % 4)  # Cycle of unit digits for powers of 17 is 4\n    unit_digit_4 = 4 ** (2012 % 2)   # Cycle of unit digits for powers of 4 is 2\n\n    # We are only interested in unit digit, so modulo 10 is used.\n    return (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # in liters\n    juice_drunk = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - juice_drunk\n\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return int(containers_needed)\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    solutions = solve(equation, A)\n    return solutions[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    # Equation based on the given information\n    equation1 = Eq(marry, 7 / 5 * alexis)                  # Marry had 7/5 as many stickers as Alexis\n    equation2 = Eq(marry - 0.2 * marry, charlotte + 20)    # Marry gave 20% of her stickers to Charlotte and has 20 more than Charlotte\n    equation3 = Eq(alexis - 0.2 * alexis, charlotte + 0.8 * charlotte)  # Alexis gave 20% to Charlotte, Charlotte's stickers increased by 80%\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    cost_per_kg = 7.50\n    quantity_kg = 3 + 1/2\n    note_value = 20\n\n    total_cost = cost_per_kg * quantity_kg\n    additional_money = total_cost - note_value\n\n    if additional_money > 0:\n        return additional_money\n    else:\n        return 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n\n    position_from_end = total_people - position_from_start + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_light, mass_heavy = symbols('mass_light mass_heavy')\n    \n    equation1 = Eq(mass_heavy, 2 * mass_light)  # mass of heavy is twice that of light\n    equation2 = Eq(6 * mass_light + 6 * mass_heavy, 65.7)  # total mass of balls\n\n    solutions = solve((equation1, equation2), (mass_light, mass_heavy))\n\n    mass_light_value = solutions[mass_light]\n\n    return round(mass_light_value)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    initial_total = Eq(benson + clive, 705)\n    same_amount_left = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((initial_total, same_amount_left), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be from 1 to 9\n        for j in range(0, 10):  # The second digit can be from 0 to 9\n            count += 1  # Each choice of i and j creates a unique palindromic number\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    A_val, B_val, C_val = solutions[A], solutions[B], solutions[C]\n    \n    average_ABC = (A_val + B_val + C_val) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jay, denise = symbols('jay denise')\n    \n    equation1 = Eq(jay, 6 * denise)\n    equation2 = Eq(jay + denise, 126)\n    \n    solutions = solve((equation1, equation2), (jay, denise))\n    \n    return solutions[denise]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    cost_chocolate_bar = 1.26\n    total_cost_chocolate = 5 * cost_chocolate_bar\n    cost_per_cookie = total_cost_chocolate / 6\n    money_initial = 9.05\n    cost_cookies_bought = 4 * cost_per_cookie\n    money_left = money_initial - cost_cookies_bought\n    return money_left\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_balls = 250\n    total_children = 650\n\n    # boys' equation: every 3 boys share 1 ball\n    equation1 = Eq(boys / 3, total_balls - girls / 2)\n\n    # total children equation\n    equation2 = Eq(boys + girls, total_children)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls initially in the classroom and\n    # b represent the number of boys initially in the classroom.\n    g, b = symbols('g b')\n\n    # After 25 girls go outside to play, the number of girls becomes g - 25\n    # This number is 2/3 the number of boys, which can be represented by the equation:\n    # g - 25 = 2/3 * b\n\n    # After 15 boys go to play soccer, the number of boys becomes b - 15\n    # This number is now equal to the number of girls, which can be represented by the equation:\n    # g - 25 = b - 15\n\n    # Solve the system of equations to find the value of g and b.\n    equations = [Eq(g - 25, 2/3 * b), Eq(g - 25, b - 15)]\n    solutions = solve(equations, (g, b))\n\n    # Total number of students is the sum of girls and boys initially.\n    total_students = solutions[g] + solutions[b]\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if (i % 2 == 0) and (sum(int(digit) for digit in str(i)) == 8):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # let's denote the number of 10-cent coins as x and 50-cent coins as y\n    # According to the ratio, 8x = 3y\n    # Total value is $75.90, which means 10x cents + 50y cents = 7590 cents\n\n    # converting the problem into equations\n    # 8x - 3y = 0       ... (eq1)\n    # 10x + 50y = 7590  ... (eq2)\n    # We need to find the value of 50y (total value of 50-cent coins)\n\n    # from eq1, we can say x = 3y/8\n    # replacing x in eq2 => 10 * (3y/8) + 50y = 7590\n    # 30y/8 + 50y = 7590 => (30y + 400y) / 8 = 7590\n    # 430y = 7590 * 8\n    # y = (7590 * 8) / 430\n    y = (7590 * 8) / 430\n    \n    # Now we find the total value of 50-cent coins, which is 50y\n    value_50_cent_coins = 50 * y\n\n    return value_50_cent_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable in the box\n    box = symbols('box')\n\n    # Define the equation according to the problem\n    equation = Eq(8 * 11, box * 9 + 34)\n    \n    # Solve for the value in the box\n    solved_value = solve(equation, box)\n    \n    # Return the value in the box\n    return solved_value[0]\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    drop_in_temp = 12\n    midnight_temp = midday_temp - drop_in_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_rate = 0.80\n    savings = total_spent / (1 - discount_rate)\n    amount_saved = savings - total_spent\n    return amount_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7\n    hole_area = 3 * 3\n    area_with_hole = base_area - hole_area\n    prism_volume = 320\n    height = prism_volume / area_with_hole\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, now we have 7 \"people\" sitting down.\n    # Since the arrangement is cyclic, we reduce the permutation by 1, so it's (7-1) factorial.\n    num_arrangements = factorial(7 - 1)\n\n    # Then consider Amy and Judy can switch seats with each other, which gives us 2 possibilities.\n    # Multiply the arrangements of 7 \"people\" by the arrangements of Amy and Judy.\n    ans = num_arrangements * 2\n\n    return ans\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # According to the problem similar to cutting pizza,\n    # at the nth cut, you can have at most n new pieces,\n    # so you need to find the smallest number n such that 1 + 2 + ... + n >= 46.\n    n = 0\n    total_pieces = 0\n    \n    while total_pieces < 46:\n        n += 1\n        total_pieces += n\n        \n    return n\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    def sequence_position(n):\n        # Find triangular number that is less than or equal to n\n        total, k = 0, 0\n        while total < n:\n            k += 1\n            total += k\n        # Adjust k to the actual position in the sequence and calculate the number at position n\n        k -= 1\n        num_at_position = n - (k * (k + 1) // 2)\n        return num_at_position if num_at_position != 0 else k\n    \n    ans = sequence_position(2008)\n    return ans\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n    sold_tomatoes = 27\n\n    cucumber_count = solve(equation.subs(tomatoes, sold_tomatoes), cucumbers)\n\n    return cucumber_count[0]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for x in range(1, 10):  # first digit must be 1-9, as it's a three-digit number\n        for y in range(0, 10):  # second digit can be 0-9\n            for z in range(0, 10):  # third digit can be 0-9\n                if x + y + z == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Given that on the 16th night she ate 100 mosquitoes\n    term_16 = 100\n    # The sequence increases by 6 mosquitoes each night, so it's an arithmetic sequence\n    common_difference = 6\n    # To find the first term, we need to go 15 steps back from the 16th term\n    first_term = term_16 - 15 * common_difference\n    \n    # The sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n-1)d), where \n    # n is the number of terms, a is the first term, and d is the common difference.\n    num_of_nights = 31\n    sum_of_mosquitoes = num_of_nights / 2 * (2 * first_term + (num_of_nights - 1) * common_difference)\n    \n    return int(sum_of_mosquitoes)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags // 3\n    bags_left = total_bags - bags_given_away\n\n    return bags_left\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris must leave a number of matches such that\n    # Dylan can only take away 1 or 2 matches, but still leaves a number\n    # that follows the same condition for Chris; until only one match is left.\n\n    # Since the game ends at 1 match and Chris wants to be the one to take it,\n    # he needs to keep the number of remaining matches in the sequence:\n    # 1, 4, 7, 10, ... (i.e., 1 + 3n)\n    # Strategy: Chris should aim to keep returning to the sequence by taking\n    # enough matches so the remaining are in the sequence after Dylan's turn.\n\n    # If Chris leave Dylan with 4 (or 1 in the sequence), Dylan can only take\n    # 1 or 2, which would leave 3 or 2 matches for Chris, both of which would\n    # allow Chris to win by leaving 1 match on his next turn.\n    \n    # Starting with 7 matches, Chris can take away either:\n    # 1 match to leave 6 -> Dylan takes 1 or 2 (to 4 or 5) -> Chris loses control\n    # 2 matches to leave 5 -> Dylan takes 1 or 2 (to 3 or 4) -> Chris can still win\n    # Therefore, Chris must take away 2 matches on the first turn.\n\n    return 2\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:\n            return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:  # Skip if A or D is zero, since they are the first digit of a number\n            continue\n        ABAC = A * 1000 + B * 100 + A * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time_in_minutes = (9 * 60) + 23\n    afternoon_time_in_minutes = (13 * 60) + 6\n    minutes_between = afternoon_time_in_minutes - morning_time_in_minutes\n\n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # The question seems incomplete. However, we can infer from the knowledge route provided \n    # that we might want to compute some combinatorial number, such as the number of ways to choose \n    # k options from n possibilities, which is a typical combinatorial problem. \n    # Since the actual numbers (n and k) are not given, we cannot provide a specific answer.\n    # Usually, with combinatorics, if we have n different restaurants and we want to choose one, \n    # there are n different choices. Hence, without more information, that's the only answer we can infer.\n    \n    n = 1  # Placeholder for the actual number of restaurants, which is not given\n    return n\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Create the first sequence\n    sequence_forward = sum(range(1, 10))\n    # The sequence backward is the same as forward, minus the number 1 which is only counted once\n    sequence_backward = sum(range(2, 10))\n    # Sum both parts\n    total_sum = sequence_forward + sequence_backward\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50\n    total_cost_eq = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    \n    # A notebook and a pencil case cost $6\n    notebook_pencil_case_eq = Eq(notebook + pencil_case, 6)\n    \n    # A pencil case and an eraser cost $8\n    pencil_case_eraser_eq = Eq(pencil_case + eraser, 8)\n\n    # Solve the equations\n    solved = solve((total_cost_eq, notebook_pencil_case_eq, pencil_case_eraser_eq), (notebook, pencil_case, eraser))\n    \n    return solved[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([i - (i - 3) for i in range(53, 22, -6)])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48  # in meters\n    speed = 8      # meters per minute\n    correct_time = distance / speed  # Dividing distance by speed gives time in minutes\n    auntie_time = 5  # Auntie Lina's estimate in minutes\n    return int(correct_time) if correct_time == auntie_time else int(correct_time)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, E = symbols('A E')\n    equation = Eq(1001*A + 110*E, 1000*A + 100*E + 10*E + A)\n    solutions = solve(equation)\n    \n    for A_value in range(1, 10):\n        for E_value in range(10):\n            if A_value != E_value:\n                if (1001*A_value + 110*E_value) == (1000*A_value + 100*E_value + 10*E_value + A_value):\n                    return 1001 * A_value + 110 * E_value\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    total_x_weight = 3 * x_weight\n    y_weight = total_x_weight / 10\n    return y_weight\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_age = 4 * 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_family_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # We know the height of a standard door in metric units is about 200 cm.\n    # Convert all measurements to centimeters for comparison.\n    measurements_in_cm = [8300, 200, 8, 50] # conversion: m to cm (x100), and 1/2 m to cm (0.5 x 100)\n    \n    # Standard classroom door height\n    door_height_cm = 200\n\n    # Find the measurement closest to the door height\n    closest = min(measurements_in_cm, key=lambda x: abs(x - door_height_cm))\n\n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    n = 1  # Start from page 1\n    total_digits = 0  # Keep a count of the total digits used so far\n\n    # Loop until we have used 450 digits\n    while total_digits < 450:\n        # Calculate how many digits the current page number has\n        digits_this_page = len(str(n))\n        # Update the total digit count\n        total_digits += digits_this_page\n        # Move to the next page\n        if total_digits <= 450:\n            n += 1\n\n    # Since we overshoot the exact number of 450 digits, we subtract one to get to the last page\n    return n - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Let 'total' be the total amount of money Leonard had initially\n    remaining_after_lunch = 7/12  # After purchasing lunch, he has 7/12 of his money left\n    remaining_after_dinner = 5/7   # After purchasing dinner, he has 5/7 of the remaining money left\n    \n    # The final amount of money is the product of the remaining fractions after lunch and dinner times the initial total\n    # So, 45 = total * (7/12) * (5/7)\n    # Thus, total = 45 / ((7/12) * (5/7)) \n    \n    total = 45 / (remaining_after_lunch * remaining_after_dinner)\n    return total\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits = 0\n    pages = 0\n    \n    while total_digits > digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * (5 - 1) // 2\n    lily_wins = 2\n    eva_wins = 1\n    tina_wins = 4\n    emma_wins = 3\n    gina_wins = total_games - (lily_wins + eva_wins + tina_wins + emma_wins)\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    ans = 2 * (largest - smallest)\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    from math import sin, radians, sqrt\n\n    # Given values\n    incline_angle = 20\n    distance_d = 400  # meters\n    friction_coefficient = 0.2\n    g = 9.81  # acceleration due to gravity (m/s^2)\n\n    # Components of forces\n    # F_gravity_down_slope = m * g * sin(theta)\n    # F_friction = mu * m * g * cos(theta)\n    # Acceleration along the slope = g * sin(theta) - mu * g * cos(theta)\n    \n    # Converting degrees to radians for math.sin function\n    theta_radians = radians(incline_angle)\n\n    # Net acceleration along the slope\n    a = g * sin(theta_radians) - friction_coefficient * g * cos(theta_radians)\n\n    # Initial velocity (u) = 0 (starting from rest)\n    # Final velocity (v) unknown\n    # Distance (s) = distance_d\n    # Using the equation of motion: v^2 = u^2 + 2as\n    v_squared = 2 * a * distance_d\n    v = sqrt(v_squared)  # Final velocity\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let e represent the number of correct answers Eddie got\n    # Let a represent the number of correct answers Avril got\n    e, a = symbols('e a')\n\n    # Each correct answer is 10 points, each wrong answer is -5 points\n    # Total points for Eddie: 10e - 5(10 - e) = 15e - 50\n    # Total points for Avril: 10a - 5(10 - a) = 15a - 50\n    # They got 155 points altogether: 15e - 50 + 15a - 50 = 155\n    # Eddie got 15 more points than Avril: 15e - 50 = 15a - 50 + 15\n    \n    equation1 = Eq(15*e + 15*a, 155 + 100)  # Adding the deducted points back to the total\n    equation2 = Eq(15*e, 15*a + 15 + 50)  # Considering Eddie got 15 more points than Avril\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (e, a))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    total_cost = 300\n    shirt_cost = 5\n    bag_cost = 10\n    group_cost = 4 * shirt_cost + bag_cost\n\n    # Calculate the number of groups you can buy with $300\n    num_groups = total_cost // group_cost\n\n    # Number of shirts is 4 times the number of groups\n    shirts_bought = 4 * num_groups\n\n    # Check if Marcus' solution is correct\n    if shirts_bought == 20:\n        correct = True\n    else:\n        correct = False\n\n    return correct, shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # one man's one day work\n    man_work_per_day = 1 / (6 * 5)\n    # one woman's one day work\n    woman_work_per_day = 1 / (5 * 6)\n    \n    work_per_day_with_10_men_5_women = 10 * man_work_per_day + 5 * woman_work_per_day\n    days_to_finish_job = 1 / work_per_day_with_10_men_5_women\n    \n    return days_to_finish_job\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_ratio = Eq(boys, 3 * girls)\n    after_leaving_joining = Eq(boys - 12, girls + 20)\n\n    solutions = solve((initial_ratio, after_leaving_joining), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of coffee beans in kg\n    typeA = 56\n    typeB = 96\n    typeC = 120\n\n    # Calculating the greatest possible mass of each small packet\n    # which is the greatest common divisor (gcd) of the three weights\n    greatest_mass = gcd(gcd(typeA, typeB), typeC)\n    \n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    num = 35\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    \n    # Since each child gets at least one apple.\n    # First, we give each child an apple.\n    apples -= children\n    \n    # We now distribute the remaining apples \n    # to the children one by one to ensure that the distribution is even.\n    # The number of apples for the kid with the most should be minimized.\n    # This means the apples should be distributed as evenly as possible.\n    while apples > children - 1:\n        for i in range(children):\n            apples -= 1\n            if apples <= children - 1:\n                break\n    \n    # Now we find out the maximum apples that a kid can have which is:\n    # apples that were left + 1 (since they initially had 1)\n    max_apples = apples + 1\n    \n    return max_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let's denote the number of apples as 'a'\n    # Then, the number of bananas will be '2a' (since for every apple, 2 bananas are used)\n    # And the number of oranges will be '3a' (since for every apple, 3 oranges are used)\n    \n    # The total number of fruits used is the sum of apples, bananas, and oranges: a + 2a + 3a = 24\n    # Simplifying the left side gives us 6a = 24\n    # So the number of apples 'a' is 24 / 6\n    a = 24 // 6\n    \n    # As the number of bananas is double the number of apples, we multiply by 2 to find the bananas\n    bananas = 2 * a\n    \n    return bananas\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n    \n    while True:\n        if (mother_age + years)/3 == anna_age + years:\n            break\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    short_ribbon_length = 40  # cm\n    long_ribbon_length = 70  # cm\n    difference = 240  # cm (converted from 2.4 m)\n\n    # Nancy's total ribbon length in cm\n    nancy_total_length = 18 * long_ribbon_length\n\n    # May's total ribbon length in cm is Nancy's total length + difference\n    may_total_length = nancy_total_length + difference\n\n    # May has 7 short ribbons, so we subtract the total length of short ribbons\n    may_long_ribbons_length = may_total_length - (7 * short_ribbon_length)\n\n    # Divide by long ribbon length to get the number of long ribbons May has\n    may_long_ribbons = may_long_ribbons_length // long_ribbon_length\n\n    # Total pieces of ribbon May has is the sum of short and long ribbons\n    total_may_ribbons = 7 + may_long_ribbons\n\n    return total_may_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assumption: All are chickens with 2 legs\n    total_chickens = 12\n    total_legs = 34\n    \n    # Legs count if all are chickens\n    chicken_legs = total_chickens * 2\n    \n    # Excess legs when assuming all are chickens\n    excess_legs = total_legs - chicken_legs\n    \n    # Since rabbits have 2 more legs than chickens, divide excess legs by 2 to get the number of rabbits\n    rabbits = excess_legs // 2\n    \n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 4 == 3 and number % 5 == 3:\n            return number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n\n    red_paint = (red_ratio / total_ratio) * 1\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_value = 6\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    quarter_amount = total_amount / 4\n    remaining_amount = total_amount - quarter_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Distribute 1 apple to each child first to ensure they get at least one apple\n    apples = 50 - 8\n    \n    # The distribution should ensure that each child gets different number of apples.\n    # Start from giving the child who gets the most as few apples as possible and increase gradually\n    for most_apples in range(1, apples + 1):\n        remaining_apples = apples - most_apples\n        # Check if it's possible to distribute the remaining apples among 7 kids with each getting different amounts\n        if remaining_apples >= 1+2+3+4+5+6+7:  # Sum of the minimum distribution to 7 children with different amounts\n            # The current most_apples is the answer, because all 7 other kids can get different amounts\n            return most_apples + 1  # Add 1 apple because we already gave 1 apple to every child initially\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let's say the total amount of grass is G units.\n    # And let C be the daily grass consumption per cow.\n    # According to the problem:\n    # 8 cows for 10 days: 8 * C * 10 = G\n    # 4 cows for 15 days: 4 * C * 15 = G\n    # Hence, 80C = 60C -> each cow consumes C units of grass each day.\n\n    # 8 * 10 * C = 4 * 15 * C -> We can find the consumption rate C\n    # 80C = 60C\n    # C is the daily consumption rate per cow (C = G / (8*10) = G / (4*15))\n    # We need to find x, the number of cows that the pasture can feed for 5 days (5xC = G / (8*10))\n    # 5 * x * C = 80 * C\n    # x = 80 / 5\n    # x = 16\n\n    x = 80 // 5  # Using integer division since the number of cows must be an integer\n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Number of compact discs\n    num_cd = 4\n    # Number of tapes\n    num_tapes = 3\n    # Cost of all tapes\n    cost_tapes = num_tapes * 9\n    # Total cost\n    total_cost = 83\n    # Cost of compact discs\n    cost_cd = (total_cost - cost_tapes) / num_cd\n\n    return cost_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    result_without_decimal = 99.396\n\n    # correct the result by adding the decimal point to the divisor\n    true_result = result_without_decimal / 1.22\n\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Hisham's and Melissa's card amounts\n    hisham, melissa = symbols('hisham melissa')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(melissa, 2 * hisham)\n    equation2 = Eq(hisham + melissa, 876)\n\n    # Solve the equations to find Hisham's and Melissa's initial card amounts\n    initial_values = solve((equation1, equation2), (hisham, melissa))\n\n    # Calculate how many cards Melissa should give to Hisham\n    # to make sure both have the same number of cards.\n    # They will both have the same number of cards when they have\n    # half the total amount each, which is 876 / 2.\n    half_total = 876 / 2\n    cards_to_give = initial_values[melissa] - half_total\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Initialize a list with an empty sequence to hold first six numbers\n    sequence = [0] * 6\n\n    # We know the 4th number is 6 and the 6th is 15.\n    # Let's assume the first two numbers are a, b.\n    # sequence = [a, b, a+b, a+2b, 2a+3b, 3a+5b]\n    # From the given, we have:\n    # a+2b = 6 and 3a+5b = 15\n    # Solving these 2 equations:\n    a, b = symbols('a b')\n    eq1 = Eq(a + 2 * b, 6)\n    eq2 = Eq(3 * a + 5 * b, 15)\n    solutions = solve((eq1, eq2), (a, b))\n\n    # Fill in the sequence with the solved values of a and b\n    sequence[0] = solutions[a]\n    sequence[1] = solutions[b]\n\n    # Compute the rest of the sequence up to the 6th number\n    for i in range(2, 6):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n\n    # The 7th number in the sequence is the sum of the 5th and 6th numbers\n    seventh_number = sequence[4] + sequence[5]\n\n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    result = (35 - 8) / 3\n    return result\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # 1 litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    total_sum = 0\n    for i in range(7):\n        numerator = 1\n        denominator = (1 + i * 5) * (6 + i * 5)\n        total_sum += numerator / denominator\n\n    ans = 36 * total_sum\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_combinations = sorted([int(''.join(map(str, perm))) for perm in permutations(digits)])\n    for number in all_combinations:\n        if number % 2 != 0 and number > 9999:  # Check if the number is odd and five digits\n            return number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # One man's work per day\n    man_work_per_day = 1 / (24 * 16)\n  \n    # One woman's work per day\n    woman_work_per_day = 1 / (16 * 24)\n  \n    # Work per day for 10 men and 6 women\n    daily_work_combined = 10 * man_work_per_day + 6 * woman_work_per_day\n  \n    # Total days needed for the combined work\n    total_days = 1 / daily_work_combined\n  \n    return total_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    line_segments = rectangles * 4  # Each rectangle adds 4 more line segments.\n    \n    # Initialize the number of regions created by overlapping line segments.\n    regions = 1  # Start with one region, the entire plane.\n    \n    # Calculate the maximum number of new regions added with each line segment.\n    for i in range(1, line_segments + 1):\n        regions += i\n    \n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Julie, Marion, and Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    # The difference in pay between Marion and Ethan\n    equation3 = Eq(ethan - marion, 168)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    # Calculate the total earnings\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    eddie_positions = total_people - 1 # Eddie does not want to be in the middle, so there are 4 positions\n    other_people_permutations = factorial(total_people - 1) # Permutations of the remaining people\n    \n    number_of_ways = eddie_positions * other_people_permutations\n    return number_of_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # We have a geometric sequence where each term is divided by the same factor to get the next term\n    # Given the sequence 96, n, 24, 12, 6, we can find the common ratio by dividing 24 by 12 or 12 by 6\n    # Let's use 12/6 which gives us a ratio of 2\n    ratio = 12 / 6\n    \n    # Knowing the ratio, we can find 'n' by dividing 24 (the term after n) by ratio\n    n = 24 / ratio\n    \n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n    spent_watch = (1/3) * money\n    spent_tie = 56\n    remaining = (3/8) * money\n\n    # Equation representing the total amount of money spent and remaining\n    equation = Eq(spent_watch + spent_tie + remaining, money)\n\n    # Solve for the total amount of money Hamid had initially\n    initial_money = solve(equation, money)\n\n    # Calculate total money spent\n    total_spent = spent_watch + spent_tie\n\n    # Evaluate the expression with the initial amount of money\n    total_spent_amount = total_spent.evalf(subs={money: initial_money[0]})\n\n    return total_spent_amount\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(1, 10)):\n        number = int(''.join(map(str, p)))\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3      # Eddie's speed in m/s\n    train_speed = 57     # Train's speed in m/s\n    time = 10            # Time in seconds for the train to pass Eddie\n\n    # Relative speed of the train with respect to Eddie\n    relative_speed = train_speed + eddie_speed\n\n    # Length of the train calculated by relative speed times the time taken to pass Eddie\n    length_of_train = relative_speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    operations = ['+', '*']  # possible operations\n    \n    # Generate all combinations of operations\n    for ops in product(operations, repeat=3):  \n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        value = eval(expression)\n        if value > max_value:\n            max_value = value\n            \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_answer_mark = 8\n    deduction_for_wrong = 3\n    total_questions = 12\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        marks = correct_answers * correct_answer_mark - wrong_answers * deduction_for_wrong\n        if marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # m/min\n\n    # The total distance to be covered for the train to entirely cross the bridge:\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    n = 60\n    # Avg of first 5 numbers\n    avg_first_5 = 10 / 5\n    # Avg of last 5 numbers\n    avg_last_5 = 120 / 5\n    \n    # First term of the sequence\n    a1 = 2 * avg_first_5 - 4 * (avg_last_5 - avg_first_5) / (n - 5)\n    \n    # Last term of the sequence\n    an = 2 * avg_last_5 + 4 * (avg_last_5 - avg_first_5) / (n - 5)\n    \n    # Sum of the arithmetic sequence\n    sum_of_sequence = n * (a1 + an) / 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(3, 1998):\n        a, b = b, (a + b) % 3  # We use modulo 3 to keep the sequence in terms of remainders\n    return b\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original number of stickers for Sam and Peter\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    initial_condition = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter and then received 25% of Peter's updated stickers\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving\n\n    # In the end, Sam had 96 stickers more than Peter\n    final_condition = Eq(sam_after_receiving, peter_after_giving + 96)\n\n    # Solve for the original number of stickers\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n    \n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(hazel_current_age + 12, 3 * hazel_current_age)\n    \n    # On Hazel's 18th birthday, her mom will be three times her age then.\n    equation2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n    \n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n    \n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    # Calculate the sum of the first 10 natural numbers\n    n = 10\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Calculate the square of the sum to get the answer\n    ans = sum_of_numbers ** 2\n\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # Applying the Pigeonhole Principle:\n    # Since there are 13 unique numbers and we need to ensure\n    # 2 cards have consecutive numbers, we can draw one card from\n    # each number without any guarantee of consecutive numbers.\n    # There are 4 cards (patterns) for each number.\n    # So if we draw all cards with unique numbers, that will be 13 cards.\n    # To ensure consecutive numbers, we must draw one more card.\n    ans = 13 + 1\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Since Vicky gets the fifth sheet out, this means there are four sheets before it.\n    # Each sheet has 4 page numbers since one sheet consists of two pages and each page has a front and back.\n    # Therefore, the fifth sheet will contain the pages (4 * 4) + 1 to (5 * 4)\n    # When a sheet is folded, the page numbers on each side are sequential if we unfold the newspaper, \n    # so each sheet contains two pairs of pages that add up to the total number of pages plus one\n    # page i and 36 - i + 1 add up to 37 if i is the first page of the sheet.\n\n    total_pages = 36\n    page_sum_pair = total_pages + 1\n\n    # The fifth sheet will have the pages 17, 18, 19, and 20, since pages 1, 2, 35, 36 would be the first sheet.\n    # To calculate the sum of the fifth sheet, we need to find the page numbers on that sheet.\n    page_number = 4 * 4 + 1  # First page of the fifth sheet\n\n    # The sum of the page numbers on that sheet will be two times the sum of one pair of sequential pages\n    sum_of_pages = page_sum_pair * 2\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variables be the cost of one laptop (c), the number of laptops (n), and the initial profit (p)\n    c, n, p = symbols('c n p')\n\n    # Initial conditions\n    # Selling price is c + p/n (since profit is distributed among n laptops)\n    # Profit from selling all laptops: n * (selling price) - n * (cost) = p\n    # n * (c + p/n) - n * c = p\n    equation1 = Eq(n * (c + p/n) - n * c, 60000)\n\n    # After cost decreased by 1/5, new cost is (4/5)*c\n    # Profit increased by 30%, new profit: p + 0.3*p\n    # n * (selling price with decreased cost) - n * (new cost) = p + 0.3*p\n    equation2 = Eq(n * (2000) - n * ((4/5) * c), p + 0.3*p)\n\n    # Since we know the original profit, we can substitute the value of p in equation2\n    equation2 = equation2.subs(p, 60000)\n\n    # Finding c and n\n    solutions = solve((equation1, equation2), (c, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (num_rows - 1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence:\n    # sum_of_sequence = (num_rows / 2) * (first_term + last_term)\n    sum_of_seats = (num_rows / 2) * (first_term + last_term)\n\n    return int(sum_of_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Calculate total digits in numbers from 1 to 129\n    total_digits = sum(len(str(i)) for i in range(1, 130))\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Initialize boys and girls count and layer\n    boys, girls, layer = 0, 0, 1\n    \n    # Start looping to calculate the boys and girls count in each layer\n    while True:\n        if layer % 2 != 0:  # odd layer: boys\n            boys += (layer * 4 - 4) if layer > 1 else 1\n        else:               # even layer: girls\n            girls += (layer * 4 - 4)\n            \n        # Check if boys exceed girls by 36\n        if boys - girls == 36:\n            break\n        \n        layer += 1\n\n    # Calculate the total number of layers (both boys and girls)\n    total_layers = boys + girls\n    \n    return total_layers\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Initial scenario: 3 men, 2 days, 120 metres\n    # Find work done by one man in one day\n    work_per_man_per_day = 120 / (3 * 2)\n\n    # Target scenario: 4 men, unknown days, 880 metres\n    # Total work to be done by 4 men\n    total_work = 880\n    \n    # Work done by four men in one day\n    work_per_four_men_per_day = work_per_man_per_day * 4\n    \n    # Find number of days taken by four men to do the total work\n    days_required = total_work / work_per_four_men_per_day\n    \n    return days_required\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    ellie_work = ellie_rate * combined_time\n    gloria_work = total_people - ellie_work\n\n    gloria_time = gloria_work / (total_people / (combined_time * ellie_rate + combined_time * (total_people / combined_time - ellie_rate)))\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # We need to find a number M such that it leaves an increasing arithmetic pattern of remainders\n    # when divided by 7, 9, a, and 28 respectively.\n\n    # Starting from the smallest possible value for the arithmetic sequence,\n    # which is 0, 1, 2, 3 because the difference in remainders must be at least 1\n    # (to be increasing) and the remainder when dividing by 7 can be at most 6.\n    min_possible_remainder = 0\n\n    while True:\n        # Generate the next set of remainders in the arithmetic sequence\n        for common_difference in range(1, 7):  # The maximum common_difference is 6\n            remainder_7 = min_possible_remainder\n            remainder_9 = remainder_7 + common_difference\n            remainder_a = remainder_9 + common_difference\n            remainder_28 = remainder_a + common_difference\n\n            if remainder_a < 9:  # Since 'a' is not known, \n                                  # we need to ensure the remainder is less than 9\n                if remainder_28 < 28:  # The remainder for 28 should be less than 28\n                    \n                    # The remainders when M is divided by 7, 9, and 28 are now known.\n                    # Check for all 'a' values between 'remainder_9 + 1' and '28'\n                    # Since the common difference can't be larger than the smallest modulo,\n                    # we start checking 'a' from the smallest modulo, which is 9.\n                    for a in range(remainder_9 + 1, 29):\n                        if remainder_a % a == remainder_a:  # The remainder_a should be less than 'a'\n\n                            # Check for the smallest M by using the Chinese Remainder Theorem,\n                            # which finds an M that satisfies all the given remainders\n                            from sympy.ntheory.modular import solve_congruence\n                            M = solve_congruence((remainder_7, 7), (remainder_9, 9), (remainder_a, a), (remainder_28, 28))\n                            \n                            if M:\n                                return M[0][0]  # returns the smallest possible number M\n        \n        # Increment the minimum possible remainder for the next iteration\n        min_possible_remainder += 1\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2\n    denominator = 5\n    target_denominator = 15\n    \n    target_numerator = (numerator * target_denominator) / denominator\n\n    return target_numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Number of books on the first and second shelves initially\n    books_first_shelf = 18\n    books_second_shelf = 24\n\n    # Number of books to be moved from the first shelf to the second shelf\n    # Let x be the number of books to move\n    # After moving, the first shelf will have 18 - x books\n    # And the second shelf will have 24 + x books\n    # We want the second shelf to have twice as many books as the first shelf\n    # So: 24 + x = 2 * (18 - x)\n    # Solving for x gives us:\n    x = (24 - 2 * 18) / (-3)\n\n    return int(x)\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    from fractions import Fraction\n\n    num = Fraction(285) + Fraction(6, 7) + Fraction(181) + Fraction(10, 11) + Fraction(153) + Fraction(12, 13)\n    denom = Fraction(1, 7) + Fraction(1, 11) + Fraction(1, 13)\n\n    ans = num / denom\n\n    return ans.numerator / ans.denominator  # Convert to a float for the final answer\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's denote the total number of pupils in the class as 'p'.\n    p = symbols('p')\n\n    # 5 pupils are in the school band, so the remaining pupils are p - 5\n    remaining_pupils = p - 5\n\n    # (3/4) of the remaining pupils are in the school choir.\n    choir_pupils = (3/4) * remaining_pupils\n\n    # (2/9) of the class are neither in the band nor the choir.\n    neither_pupils = (2/9) * p\n\n    # The class is the sum of band, choir, and neither.\n    equation = Eq(5 + choir_pupils + neither_pupils, p)\n\n    # Solve the equation for p\n    class_size = solve(equation, p)\n\n    # Returns the first (and only) solution\n    return class_size[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_to_cross = 20 # seconds\n    bridge_length = 300 # meters\n    speed = bridge_length / time_to_cross # meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for i in range(33):  # Checking for all feasible numbers of lollipops more than what's left when divided by 4\n        lollipops = 32 + i * 4\n        if (lollipops - 3) % 7 == 0:  # The condition for the last box having 3 lollipops when divided by 7\n            return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # Because we want to minimize the use of short tubes,\n    # we try to fit as many long tubes as possible.\n\n    max_long_tubes = total_balls // long_tube_capacity\n    for num_long_tubes in range(max_long_tubes, -1, -1):\n        remaining_balls = total_balls - (num_long_tubes * long_tube_capacity)\n        # Check if remaining balls can be completely filled by short tubes\n        if remaining_balls % short_tube_capacity == 0:\n            return num_long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    common_difference = (ninth_term - third_term) / (9 - 3)\n    eleventh_term = third_term + (n - 3) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let F represent the original number of bracelets Felicia had\n    F = symbols('F')\n    \n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = 3 * F / 5\n    \n    # Janice bought 2/5 of the bracelets Felicia sold\n    janice_bought = 2 * felicia_sold / 5\n    \n    # After selling and buying, Felicia has 2/5 of her original bracelets\n    felicia_remain = 2 * F / 5\n    \n    # Janice had 96 bracelets at first and bought some from Felicia\n    janice_remain = 96 + janice_bought\n    \n    # The ratio of Felicia's to Janice's bracelets became 5:7\n    equation = Eq(felicia_remain / janice_remain, 5/7)\n    \n    # Solve for F, the original number of bracelets Felicia had\n    solutions = solve((equation), (F))\n    \n    # Calculate the number of bracelets Janice bought from Felicia\n    janice_bought_number = 2 * solutions[F] / 5 * 2 / 5\n    \n    return janice_bought_number.evalf()\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Calculate the sum of the cubes by iterating through the given numbers,\n    # excluding the numbers that are not present (3, 6, 9, 12)\n    total_sum = sum(i**3 for i in range(1, 15) if i not in (3, 6, 9, 12))\n    return total_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price - (original_price * discount)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # The error occurs because Will forgets to put down the decimal point\n    # Let x be the correct value (with the decimal) that he intended to multiply 4.32 by\n\n    # Correct result would be x * 4.32\n    # Incorrect result is x * 432 (since he effectively multiplies by 100 due to missing decimal)\n    # According to the question, incorrect result is 2138.4 greater than the correct result\n\n    # Set up the equation:\n    # x * 432 = x * 4.32 + 2138.4\n    # x * 432 - x * 4.32 = 2138.4\n    # x * (432 - 4.32) = 2138.4\n    # x * 427.68 = 2138.4\n    x = 2138.4 / 427.68\n\n    # Calculate the correct result which is x times 4.32\n    correct_result = x * 4.32\n\n    return correct_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Calculate the differences between the numbers\n    diff_1 = 2758 - 2017\n    diff_2 = 3670 - 2758\n    diff_3 = 3670 - 2017\n    \n    # Find the greatest common divisor of the differences\n    from math import gcd\n    \n    # Calculate the GCD of the three differences\n    gcd_diff = gcd(gcd(diff_1, diff_2), diff_3)\n    \n    # Find all possible values of A by finding the divisors of gcd_diff\n    # starting from 2 (to exclude number 1)\n    possible_values = []\n    for i in range(2, gcd_diff + 1):\n        if gcd_diff % i == 0:\n            possible_values.append(i)\n    \n    # Return the sum of the possible values of A\n    return sum(possible_values)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_candies = 448\n    candies_per_boy = 5\n    candies_per_girl = 3\n    more_girls = 8\n\n    equation1 = Eq(boys * candies_per_boy + girls * candies_per_girl, total_candies)\n    equation2 = Eq(girls, boys + more_girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the original number of milk candies\n    # f represent the number of fruit candies\n    m, f = symbols('m f')\n\n    # Original ratio 7:9\n    equation1 = Eq(m/f, 7/9)\n\n    # After eating 8 milk candies the ratio changed to 2:3\n    equation2 = Eq((m - 8)/f, 2/3)\n\n    # Solve the system of equations\n    solution_set = solve((equation1, equation2), (m, f))\n\n    return solution_set[m]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (2, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # The difference in years between 2008 and 1996 when mum was 40\n    year_diff = 2008 - 1996\n    \n    # My mum's birth year\n    mum_birth_year = 1996 - mum_age_1996\n    \n    # Grandmother's age when mum was born is her age in 2008 minus the \n    # difference between 2008 and mum's birth year\n    grandmother_birth_age = grandmother_age_2008 - (2008 - mum_birth_year)\n\n    return grandmother_birth_age\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    price_lemonade = 4\n    price_plus = 7\n    min_plus_bottles = 0\n\n    for plus_bottles in range(total_bottles + 1):\n        lemonade_bottles = total_bottles - plus_bottles\n        total = (lemonade_bottles * price_lemonade) + (plus_bottles * price_plus)\n        if total == income:\n            min_plus_bottles = plus_bottles\n            break\n    \n    return min_plus_bottles\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initial = 60\n    apples_per_friend_initial = 4\n    friends_count = apples_initial / apples_per_friend_initial\n    \n    apples_additional_per_friend = 1\n    apples_needed = (apples_per_friend_initial + apples_additional_per_friend) * friends_count\n    \n    return apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Yohan needs to take one white sock pair, which consists of two white socks.\n    # In the worst case scenario, he will take out all the red and black socks first.\n    # This means he can take 10 red and 10 black socks without getting a pair of white socks.\n    # After 20 socks, the next two socks he takes out could be white.\n    # Therefore, he must take out at most 20 socks (all red and black) + 2 white socks = 22 socks to ensure he gets a white pair.\n    \n    max_socks = 20 + 2\n    \n    return max_socks\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    for groups_of_6 in range(total_groups + 1):\n        groups_of_4 = total_groups - groups_of_6\n        if 6 * groups_of_6 + 4 * groups_of_4 == total_students:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60\n    average_three = 60\n    sum_three = average_three * 3  # Total sum of the first three numbers\n    \n    # New average with the fourth number added is 90\n    new_average = 90\n    new_sum = new_average * 4  # Total sum of all four numbers\n    \n    # The fourth number is the difference between new_sum and sum_three\n    fourth_number = new_sum - sum_three\n    return fourth_number\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and A != C and B != C:\n                    ABC = 100 * A + 10 * B + C\n                    return ABC  # Return the first valid number\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # First trade: Owen gives 3 fish for 2 rabbit -> 3 fish / 2 rabbit\n    # Second trade: Oscar gives 3 rabbits for 4 packs of wheat -> 3 rabbit / 4 packs of wheat\n\n    # Calculate the single transaction ratio from fish to packs of wheat\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Now, we need to find out how many fish for 8 packs of wheat\n    # We have fish_to_wheat_ratio fish for 1 pack of wheat\n    # So, for 8 packs of wheat we need fish_to_wheat_ratio * 8 fish\n    ans = fish_to_wheat_ratio * 8\n    \n    return ans\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_price_handbag = symbols('original_price_handbag')\n    \n    # original price of the handbag was marked down by 20%\n    discounted_price_handbag = 428\n    discount_handbag = 0.20 * original_price_handbag\n    equation1 = Eq(discounted_price_handbag, original_price_handbag - discount_handbag)\n\n    original_price_purse = symbols('original_price_purse')\n    \n    # the purse had a 28% discount\n    discount_purse = 0.28 * original_price_purse\n    \n    # the total discount for both the handbag and the purse was $121\n    total_discount = 121\n    equation2 = Eq(discount_handbag + discount_purse, total_discount)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (original_price_handbag, original_price_purse))\n    \n    return solutions[original_price_purse]\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    # Find the number of times 2 and 5 pair up to form 10, since\n    # 10 is the product of 2 and 5, and each pair contributes a zero at the end of the number.\n    \n    # We are more interested in the number of fives, as there will be more twos than fives.\n    num_zeros = 0\n    for i in range(1, 26):\n        while i % 5 == 0:\n            num_zeros += 1\n            i //= 5\n    return num_zeros\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_distance = 4\n    slide_distance = 1\n    effective_distance = climb_distance - slide_distance\n    \n    # Calculate the days needed to reach the top without counting the final climb\n    days = (total_distance - climb_distance) // effective_distance\n    \n    # If there is a remainder, it means the snail will climb out on the next day\n    if (total_distance - climb_distance) % effective_distance != 0:\n        days += 1\n\n    # Add the final climb\n    days += 1\n    \n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging: from 6:30 a.m. to 7:00 a.m. = 0.5 hours\n    jogging_time = 0.5\n    # Speed during jogging: 6 miles per hour\n    jogging_speed = 6\n    # Distance covered while jogging = speed * time\n    jogging_distance = jogging_speed * jogging_time\n\n    # Time spent walking: from 7:00 a.m. to 8:00 a.m. = 1 hour\n    walking_time = 1\n    # Speed during walking: 5 miles per hour\n    walking_speed = 5\n    # Distance covered while walking = speed * time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance = distance while jogging + distance while walking\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "网络故障，请重试"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    total_amount = 398\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Calculate the full sequence of the first 20 digits\n    full_sequence = \"A2\" * 10  # Repeat \"A2\" ten times to get 20 digits\n    \n    # Since the sum of these 20 digits is 80, we calculate the sum of one \"A2\"\n    A2_sum = 2  # '2' is already known\n    # The contribution to the sum from 'A's in the full sequence\n    A_contribution = 10 * A2_sum \n    \n    # The actual sum of the digits is given as 80\n    actual_sum = 80\n    \n    # We need to find the value of A such that 10*A + the sum of '2's equals 80\n    A = (actual_sum - A_contribution) / 10\n    \n    return int(A)\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    books_in_most_filled_layer = (total_books - 1) // layers + 1\n\n    return books_in_most_filled_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of books bought initially and total books\n    initial_books, total_books = symbols('initial_books total_books')\n\n    # Average price before = $3.50, after two books at $6 each it becomes $4\n    # Equation for average price before buying two additional books\n    equation1 = Eq(3.5, (initial_books * 3.5 + 12) / (initial_books + 2))\n\n    # Equation for new average after buying two additional books\n    equation2 = Eq(4, (initial_books * 3.5 + 12) / total_books)\n\n    # We know that he bought 2 more books\n    equation3 = Eq(total_books, initial_books + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (initial_books, total_books))\n\n    return solutions[total_books]\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for i in range(1, 4):\n        for j in range(0, 4):\n            for k in range(0, 4):\n                if i != j and i != k and j != k:  # Ensuring no repetition of digits\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the sequence is decreasing\n\n    # The nth term of an arithmetic sequence is given by: a_n = a_1 + (n - 1) * d\n    # We need to find n such that a_n < 0\n    # 0 > 50 + (n - 1) * (-4)\n    # Simplifying, we find n > 50/4 (since -4 is negative, we divide by -4 and the inequality reverses)\n\n    # The smallest integer n greater than 50/4\n    n = int(50 / 4) + 1  # Adding 1 because we need the first negative term\n\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice initial candies.\n    rachel, alice = symbols('rachel alice')\n\n    # Create the equation based on the first condition.\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Create the equation based on the second condition.\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Find the total number of candies initially.\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_in_kg = 1.2\n    piece_weight_g = 30\n    \n    total_pieces = (weight_in_kg * 1000) / piece_weight_g\n\n    return int(total_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Conversion factor from liters to quarts: 1 liter is approximately 1.05669 quarts\n    conversion_factor = 1.05669\n\n    # The amount of Coke Hannah bought in liters\n    coke_liters = 2.5\n\n    # Convert liters to quarts\n    coke_quarts = coke_liters * conversion_factor\n\n    # The capacity of Hannah's cup in quarts\n    cup_capacity = 0.5\n\n    # Calculate the number of cups Hannah can drink, rounding to the nearest integer\n    num_cups = round(coke_quarts / cup_capacity)\n\n    return num_cups\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, 2, 0, C, E, F}) == 6:  # ensuring all digits are different as B=2 and D=0 are given\n                        original_number = int(f\"5{A}20{C}{E}{F}\")\n                        multiplied_number = int(f\"{E}{F}5{A}20\")\n                        if original_number * 6 == multiplied_number * 5:\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * 1  # 6 miles\n\n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * 2  # 10 miles\n\n    # The total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance  # 16 miles\n    \n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    angel, belle = symbols('angel belle')\n\n    # Angel had 5/6 as many sweet wrappers as Belle initially\n    equation1 = Eq(angel, 5/6 * belle)\n\n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # dad's age and son's age relation 6 years ago\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    # The sum of the current ages of dad and son\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4 / 9) * 36\n    return result\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children = symbols('children')\n    \n    # If there was 20p more, then there would be enough for each child to receive 70p\n    equation1 = Eq(children * 70, 20 + children * 70)\n    \n    # If each child was to receive 60p, then £2.10 would be left over\n    equation2 = Eq(children * 60 + 210, children * 70)\n    \n    solutions = solve((equation1, equation2), (children))\n    \n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Dividing by permutation count of 3 items since order doesn't matter\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment = 120.75\n    final_amount = initial_amount + payment\n    return final_amount\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('2 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    num_days = (end_date - start_date).days + 1\n    return num_days\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            original_number = int(str(j) + '9')\n            new_number = int('9' + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # Eddie is fixed on the left end, and Avril is next to Eddie on either side.\n    # The total number of ways the remaining 5 students can line up is 5 factorial\n    # Avril has 2 possible positions, either to the immediate right of Eddie\n    total_ways = math.factorial(5) * 2\n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # There are 2 colors: blue and green.\n    # To ensure getting a pair, Dilly should get at least 3 gloves because 2 may not guarantee a pair as they could be one of each hand.\n    # However, since there's a total of 1 blue left glove, 2 green left gloves, 3 blue right gloves, and 4 green right gloves,\n    # taking 2 gloves from the same hand will guarantee a mismatched pair.\n    # So after taking 4 gloves (1 blue left + 3 right), we still may not have a matching pair.\n    # Taking just one more glove (5th one), no matter its color or hand, will ensure a matching pair,\n    # because it will either create a matching hand pair or a matching color pair,\n    # but she needs to take consecutive gloves to guarantee a pair so the answer is the total number of gloves.\n\n    # Total gloves:\n    total_gloves = 1 + 2 + 3 + 4\n    return total_gloves\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    increased_amount = original_price * increase_percentage\n    new_price = original_price + increased_amount\n\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = 8\n    mean_value = 6\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum_for_mean = mean_value * total_numbers\n\n    missing_number = total_sum_for_mean - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    first_interval = 3\n    second_interval = 5\n    initial_holes = 30\n\n    # Calculate the distance already covered by initial holes\n    distance_covered = initial_holes * first_interval\n\n    # Calculate remaining distance to cover\n    remaining_distance = circumference - distance_covered\n\n    # Calculate how many holes need to be dug at the new interval\n    additional_holes = remaining_distance / second_interval\n\n    # Since additional_holes might not be an integer, and we can only have whole holes,\n    # we take the ceiling of the result to find out how many entire holes are needed\n    from math import ceil\n    additional_holes = ceil(additional_holes)\n\n    # Return the number of additional holes needed\n    return additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def count_ways(steps):\n        if steps == 1: return 1\n        if steps == 2: return 2\n        return count_ways(steps - 1) + count_ways(steps - 2)\n    \n    ways_to_step_5 = count_ways(5)  # Ways to reach the 5th step\n    ways_from_5_to_10 = count_ways(10 - 5)  # Ways from the 5th to the 10th step\n    \n    return ways_to_step_5 * ways_from_5_to_10  # Multiply for independent events\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n    \n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be x\n    x = symbols('x')\n\n    # The equation is: (x + 3) / 4 = 12\n    equation = Eq((x + 3) / 4, 12)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((x * (16 - x) for x in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum(num for num in range(1, 51) if '3' in str(num))\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # We will evaluate the expression with different pairs of brackets and find the maximum result\n    expressions = [\n        ((15 + 5) * (5 + 15) - 6 + 7),\n        (15 + (5 * (5 + 15)) - 6 + 7),\n        (15 + 5 * (5 + (15 - 6) + 7)),\n        ((15 + 5) * 5 + (15 - 6 + 7))\n    ]\n    max_value = max(expressions)\n    return max_value\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_per_page = 1\n    total_digits_used = 0\n    page_number = 1\n\n    while total_digits_used < 792:\n        total_digits_used += digits_per_page\n        page_number += 1\n        if page_number >= 10**(digits_per_page):\n            digits_per_page += 1\n\n    return page_number - 1\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_current = 89 * 4\n    billy_final_average = 80 + 10\n    billy_total = billy_final_average * 5\n    billy_fifth_assignment = billy_total - billy_current\n\n    return billy_fifth_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # The sum of two whole numbers to give 1000 can be\n    # 1 + 999, 2 + 998, ..., 499 + 501, 500 + 500\n    # The number of integer pairs is half of 1000\n    # Since 1000 is even, there is also a pair (500, 500)\n    # Thus, the total number of ways is 1000 / 2 = 500\n    \n    ans = 1000 // 2\n    return ans\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given terms and their positions\n    seventh_term = 39\n    eighth_term = 44\n    ninth_term = 49\n    \n    # Calculate the common difference by subtracting consecutive terms\n    common_difference = eighth_term - seventh_term\n    \n    # The first term can be found by subtracting the common difference 6 times from the seventh term\n    # (since the seventh term is seven terms away from the first term)\n    first_term = seventh_term - common_difference * (7 - 1)\n    \n    # Calculate the 100th term using the formula: nth_term = first_term + (n-1)*common_difference\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import divisors, sqrt\n\n    # Get divisors of 1260\n    divs = divisors(1260)\n\n    # Find m such that 1260m is a perfect square\n    for d in divs:\n        if sqrt(1260*d).is_integer():\n            return d\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base_one_digit_pattern = [9, 1, 9, 1]  # Pattern repeats every 4\n    exponent = 99\n    pattern_index = (exponent - 1) % len(base_one_digit_pattern)\n    ones_digit = base_one_digit_pattern[pattern_index]\n    return ones_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n   \n    total_spent = table_price + chair_price\n\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total value of the five other ponies.\n    x = symbols('x')\n    \n    # Original average value of the ponies in the small stable.\n    original_avg_small = (x + 250000) / 3\n    \n    # Original average value of the ponies in the large stable.\n    original_avg_large = x / 3\n    \n    # New average value of the ponies in both stables, Rein Beau in the large stable.\n    # Since the average rises by £10,000 in each, add £10,000 to each of the originals.\n    new_avg_small = original_avg_small + 10000\n    new_avg_large = original_avg_large + 10000\n    \n    # New total value in the small stable (now with 2 ponies) should be equal to the new average times 2.\n    # New total value in the large stable (now with 4 ponies, including Rein Beau) should be equal to the new average times 4.\n    # This gives us two equations:\n    equation1 = Eq(new_avg_small * 2, (x + 250000) - 250000)\n    equation2 = Eq(new_avg_large * 4, x + 250000)\n    \n    # Solve the equations for x.\n    solved_value = solve((equation1, equation2), (x))\n    \n    # The total value of all six ponies includes the value of Rein Beau, so add 250000 to x.\n    total_value = solved_value[x] + 250000\n    \n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Inverse of Subtracting 50\n\n    # Inverse of Adding the day of his birth twice\n    # That means the original day will be no greater than 31 (as no month has more than 31 days)\n    # We multiply by 2 because the day was added twice, so the maximum possible added value is 62\n    # Hence, we try to subtract possible day numbers doubled until we get a remainder divisible by 100\n    for day in range(1, 32):\n        if (result - day * 2) % 100 == 0:\n            result -= day * 2\n            break\n\n    # Inverse of Multiply result by 50\n    result //= 50\n\n    # Inverse of Add 1 to the result\n    result -= 1\n\n    # Inverse of Multiply the number of the month of his birth by 4\n    month = result // 4\n\n    return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14 - 9\n    return total_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    # 2^2015 divided by 3\n    remainder = (2 ** 2015) % 3\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Total number of pupils\n    total_pupils = 8\n    \n    # Group of 4 who want to stand together\n    group_of_4 = 1\n    \n    # Remaining pupils not in the group\n    remaining_pupils = total_pupils - 4\n    \n    # Total groups to arrange (group of 4 is considered as 1 group)\n    total_groups = remaining_pupils + group_of_4\n    \n    # Arrange the total groups in a row\n    arrangement_of_groups = factorial(total_groups)\n    \n    # Arrange the 4 pupils within their group\n    arrangement_within_group = factorial(4)\n    \n    # Total arrangements\n    total_arrangements = arrangement_of_groups * arrangement_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let's denote the three consecutive numbers as x, x+1, and x+2\n    # The sum of these numbers is given by x + (x+1) + (x+2)\n    # We set it equal to 60 and solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + (x+1) + (x+2), 60)\n    solution_x = solve(equation, x)\n\n    # The largest number is x+2\n    largest_number = solution_x[0] + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g be the number of gold medals and s be the number of silver medals.\n    # We are given that:\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n    \n    # We will solve the system of equations using the method of substitution.\n    \n    # From the total medals equation, we get s = 80 - g.\n    # Substitute s in the total points equation:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11 (number of gold medals)\n    \n    return 11\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb = 8.70\n    cost_of_beef = 9.40\n\n    total_cost = (7 * cost_of_lamb) + (30 * cost_of_beef)\n\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 // 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Fraction of the remainder who were men: 5/8\n    # Hence, fraction of the remainder who were women: 1 - 5/8 = 3/8\n    # If 3/8 of the remainder were women (80), the remainder is 80 / (3/8)\n    remainder = 80 / (3/8)\n    # The remainder represents 1 - 1/3 = 2/3 of the total spectators\n    # Therefore, to find the total spectators we divide the remainder by 2/3\n    total_spectators = remainder / (2/3)\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def operation(a, b):\n        # Since we are not given a formula, we try to infer the operation rules from given results.\n        # Observing the pattern, it seems the operation '★' depends on the order and potentially the max value\n        # Let's try to find a pattern that can calculate based on the inputs given\n        if a < b:\n            return a + b - min(a, b)\n        else:\n            return a + max(a, b)\n\n    ans = operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    return 10 + 9 - 1\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    # Calculation inside the square brackets\n    inner_calculation = (11 / 52) / (2 + 3 / 4) * (4.3 - 1.8)\n\n    # Entire calculation\n    ans = 0.4 * inner_calculation * 26\n\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    n = 1\n    while True:\n        boys = (2 * n + 1) ** 2 - n * n\n        girls = n * n\n        if boys - girls == 32:\n            total_students = boys + girls\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(50, 61))\n    ans = sum(primes)\n    \n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of work of the master be m and that of the apprentice be a.\n    m, a = symbols('m a')\n\n    # Equation from the first condition: 1 master + 3 apprentices take 4 days to complete 1 task\n    equation1 = Eq((1 * m + 3 * a) * 4, 1)\n\n    # Equation from the second condition: 2 masters + 1 apprentice take 3 days to complete 1 task\n    equation2 = Eq((2 * m + 1 * a) * 3, 1)\n\n    # Solving the system of equations for m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Extracting the rate of work for the apprentice\n    apprentice_rate = solutions[a]\n\n    # Now, we'll find the number of days for 1 apprentice to complete 1 task\n    days_for_apprentice = 1 / apprentice_rate\n\n    return days_for_apprentice\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # given values\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    # calculating the common difference\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    # calculating the first term using the nth term formula: nth_term = first_term + (n - 1)*common_difference\n    first_term = tenth_term - (10 - 1)*common_difference\n\n    # calculating the 102nd term\n    nth_term = first_term + (102 - 1)*common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_plus_comics = total_books - english_books\n\n    # Let's denote comics as c and chinese books as 2c.\n    comics = chinese_books_plus_comics / 3\n    \n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots_score = 6 * 5  # 6 shots with each having 5 scores\n    missed_shots_score = 4 * 0   # 4 missed shots with each having 0 scores\n    total_shots = 6 + 4          # Total number of shots\n    \n    total_score = accurate_shots_score + missed_shots_score\n    avg_score = total_score / total_shots  # Average score per shot\n    \n    return avg_score\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, planted_each_month = symbols('original_roses planted_each_month')\n    original_daisies = 300 - original_roses  # Total flowers - original roses\n    \n    # After a few months, there are 280 roses and 180 daisies.\n    # This means the planter has planted (planted_each_month * months) roses and the same number of daisies.\n    # original_roses + (planted_each_month * months) = 280\n    # original_daisies + (planted_each_month * months) = 180\n    # Since we know the original number of daisies, we can rewrite the second equation as:\n    # 300 - original_roses + (planted_each_month * months) = 180\n    # We can simplify the above equations to:\n    # original_roses + planted_each_month = 280\n    # 300 - original_roses + planted_each_month = 180\n    # Solving the system of equations gives us the original number of roses.\n\n    equation1 = Eq(original_roses + planted_each_month, 280)\n    equation2 = Eq(300 - original_roses + planted_each_month, 180)\n\n    solutions = solve((equation1, equation2), (original_roses, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Evaluate the complex fraction\n    part1_numerator = (1/30) + (1/6)\n    part1_denominator = 2/25\n    part2_numerator = 2 - (2/3)\n    part2_denominator = 8/3\n\n    part1 = part1_numerator / part1_denominator\n    part2 = part2_numerator / part2_denominator\n\n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # 3 apples and 5 oranges have a mass of 270g\n    equation1 = Eq(3*apple + 5*orange, 270)\n\n    # 3 apples and 7 oranges have a mass of 342g\n    equation2 = Eq(3*apple + 7*orange, 342)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    # The total distance that needs to be covered for the entire train to pass through\n    total_distance = train_length + tunnel_length\n\n    # The time it takes for the train to pass completely through the tunnel\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Using the principle of inclusion-exclusion\n    max_no_bow_ties_nor_spectacles = total_men - (bow_ties + spectacles - min(bow_ties, spectacles))\n\n    return max_no_bow_ties_nor_spectacles\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Every child must get at least 1 apple, so we reserve 8 apples for them.\n    # This leaves us with 50 - 8 = 42 apples to distribute.\n    \n    # Initialize counts of apples for each child with minimal required apples.\n    children = [1] * 8\n    \n    # We now distribute the remaining apples one by one from the smallest number to larger ones\n    # until only one apple is left to distribute.\n    # This is because giving one more to the kid with the current max would produce the smallest possible max.\n    \n    for i in range(42):\n        child = i % 8  # Distribute apples in round-robin fashion\n        children[child] += 1  # Each time an apple is given, it is offered to the next child\n\n    children.sort()  # Sort the children's apple counts\n    # The child who gets the most apples will be the last one in the sorted list\n    return children[-1]\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for n in range(2, 8):  # The sum can be split into at least 2 parts and at most (8-1) parts\n        for combination in range(1, 8):\n            # Create a list with n parts all starting at 1 (minimum non-zero natural number)\n            parts = [1] * n\n            \n            # Distribute the remaining (8-n) among the parts\n            remaining = 8 - n\n            while remaining > 0:\n                for i in range(n):\n                    if remaining > 0:\n                        parts[i] += 1\n                        remaining -= 1\n            \n            # Check if created valid combination that sums to 8, excluding permutations\n            if sum(parts) == 8 and parts not in (combination,):\n                count += 1\n    \n    return count // 2  # Dividing by 2 because every split can be rearranged in 2 ways (a+b and b+a)\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.5 * 0.2 * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1/3) * 414\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Consider Ali and Bala as a single unit, plus the other 3 people, we have a total of 4 entities to arrange.\n    # Dan is fixed on the furthest left, so we have 3 entities left to arrange which can be done in 3! ways.\n    entities_arrangements = factorial(3)\n\n    # Ali and Bala can switch places within their unit in 2! ways.\n    ali_bala_arrangements = factorial(2)\n\n    # The total number of different arrangements is the product of the two.\n    total_arrangements = entities_arrangements * ali_bala_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits: 3 fishes -> 2 rabbits\n    # Oscar trades 3 rabbits for 4 packs of wheat: 3 rabbits -> 4 wheat\n    # Simplify the ratio to find how many fishes for 1 wheat: (3 fishes / 2 rabbits) * (3 rabbits / 4 wheat) \n    fishes_per_wheat = (3 / 2) * (3 / 4)\n    \n    # Now find how many fishes for 8 packs of wheat\n    fishes_for_eight_wheat = fishes_per_wheat * 8\n    \n    return int(fishes_for_eight_wheat)\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90\n    \n    total_digits += pages_with_1_digit * 1\n    total_digits += pages_with_2_digits * 2\n    \n    pages_with_3_digits = 140 - 99\n    total_digits += pages_with_3_digits * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # The worst case scenario would be if we draw balls of the same color consecutively.\n    # We start by taking all balls of one color, then all of another color, \n    # after these two steps we are guaranteed to get three different colored balls\n    # in the next draw at the latest.\n    \n    # We draw all 9 white balls + 6 yellow balls first in the worst case\n    worst_case_draws = 9 + 6\n    \n    # The next ball drawn has to be a red one (as it's the only color left)\n    # We need only 1 more draw to guarantee the third color\n    worst_case_draws += 1  \n\n    return worst_case_draws\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child must get different amounts and at least 1 apple, \n    # let's begin distributing one apple to each child first\n    # apples left after initial distribution\n    apples_left = 19 - 5\n    \n    # Now we shall start giving out the remaining apples, one at a time, to the child that has received the fewest apples so far.\n    # To maintain unique numbers, we must continue to give apples in ascending order.\n    # This pattern follows the triangle number sequence (1, 3, 6, 10, 15, ...)\n    # which can be described as T_n = n(n+1)/2\n    # We'll find a triangle number (T_n) that is less than or equal to our remaining apples.\n    # The difference between remaining apples and T_n would be the maximum number of apples the last child can receive.\n    \n    # The following loop will calculate the largest T_n that can fit into apples_left\n    n = 0\n    T_n = 0\n    while T_n <= apples_left:\n        n += 1\n        T_n = n * (n + 1) // 2\n    \n    # When we find a T_n that is larger than apples_left, we go back to the previous T_n\n    n -= 1\n    T_n = n * (n + 1) // 2\n    \n    # The largest amount would be the difference between apples_left and the largest T_n + 1 (as we started with 1 apple)\n    largest_amount = (apples_left - T_n) + 1\n    \n    return largest_amount\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    left_over = total_length - used_for_fences - used_for_woods\n\n    return left_over\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    three_digit_numbers = list(permutations(digits, 3))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # Equation when Ellen gives away 12 sweets\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n\n    # Equation when Lenny gives away 12 sweets\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Sum of the Ellen's and Lenny's sweets\n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Assume the original two-digit number is xy (10x + y)\n    # The incorrect number is 10*5 + 3 = 53, instead of 10*3 + 2 = 32\n    # According to the problem, (10x + y) - 53 = 36\n    # Therefore, the correct calculation should be (10x + y) - 32\n\n    incorrect_difference = 36\n    incorrect_subtrahend = 53\n    correct_subtrahend = 32\n\n    # Find the original number\n    original_number = incorrect_difference + incorrect_subtrahend\n\n    # Now calculate the correct difference\n    correct_difference = original_number - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    total_income = 120000\n    first_50k_tax = 0.06 * 50000\n    remaining_income = total_income - 50000\n    remaining_tax_rate = 0.06 + T\n    total_tax_paid = 10000\n\n    equation = Eq(first_50k_tax + remaining_tax_rate * remaining_income, total_tax_paid)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = '0123456789'\n    min_difference = float('inf')  # Initialize with infinity\n    for perm in permutations(all_digits, 5):\n        num1 = int(''.join(perm))\n        remaining_digits = ''.join(sorted(set(all_digits) - set(perm)))\n        num2 = int(remaining_digits)\n        difference = abs(num1 - num2)\n        if difference < min_difference:\n            min_difference = difference\n            \n    return min_difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_present_perms = list(permutations(range(7), 5))\n    # Suppose, toy car index is 0 and puzzle index is 1, calculator index is 2\n    count = 0\n    for perm in total_present_perms:\n        if 0 in perm[:2] or 1 in perm[:2]:  # condition for Richard\n            if 0 in perm[:2] or 2 in perm[:2]:  # condition for Kevin\n                count += 1\n    return count\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n\n    # The entire train is in the tunnel when its front emerges from the far end.\n    # At that point, the train has moved its own length plus the tunnel's length.\n    total_distance = train_length + tunnel_length\n\n    # Time is calculated by dividing the total distance by speed.\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds = 2\n    amount_paid = 100  # £1 is 100p\n    total_cost = cost_per_pound * pounds\n    \n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 0\n    while True:\n        if all(isprime(n + i) for i in [0, 4, 6, 132, 250]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs of the rabbits\n    first, second, third = symbols('first second third')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(second, first + 2)\n    equation2 = Eq(third, second - 0.80)\n    equation3 = Eq(first + second + third, 19.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[first]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4 * i + 4) for i in range(1009))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n    \n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    if remainder == 0:\n        return 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Total letters in SUCCESS\n    total_letters = 7\n    # Number of S's in SUCCESS\n    num_S = 3\n    # Calculate arrangements without restriction\n    unrestricted_ways = factorial(total_letters) // (factorial(num_S) * factorial(2) * factorial(2))\n\n    # Arrange other letters first (U, C, C, E) and calculate positions for S\n    positions_for_S = total_letters - num_S + 1\n    restricted_ways = 0\n    for i in range(positions_for_S):\n        restricted_ways += nCr(positions_for_S, num_S-i) * (-1)**i\n\n    # Calculate the final count\n    ans = unrestricted_ways * restricted_ways\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    total_girls = 333\n    total_teachers = 36\n    \n    total_boys = total_pupils - total_girls\n    more_boys_than_teachers = total_boys - total_teachers\n    \n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    money_left = 56\n    total_t_shirts = 145\n\n    # Total cost of the t-shirts bought\n    total_cost_bought = (total_t_shirts - t_shirts_bought) * money_left\n\n    # Calculate the money she had at first\n    total_money = total_cost_bought + money_left\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) / 4\n    sum_of_integers = n * (n + 1) / 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_even_numbers = 14\n    average_of_numbers = 119\n    sum_of_numbers = average_of_numbers * total_even_numbers\n    middle_sum = sum_of_numbers / 2\n    middle_number = middle_sum // average_of_numbers\n    smallest_number = middle_number - (total_even_numbers - 1) * 2 / 2\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Heights range from 124cm to 132cm, so there are 9 different heights possible\n    # By the Pigeonhole Principle, if at least 4 students are of the same height,\n    # and there are 9 different heights, then the minimum class size can be calculated\n    # by taking 3 times the number of different heights plus 1 (3 * 9 + 1).\n    # This is because having 4 students of the same height is the \"fourth\" pigeonhole,\n    # and for each height less than 4 students, that would be 3 pigeonholes (or less).\n    \n    class_size = 3 * 9 + 1 # 3 students per height for 9 heights +1 to ensure at least one height has 4 students\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = original_pay_per_hour * (1 + increase_percentage)\n\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let the days David worked alone be x\n    # Therefore, Emma worked (14 - x) days\n\n    # David's work rate is 1/10 per day\n    # Emma's work rate is 1/18 per day\n\n    # Using the work rates, set up the equation:\n    # David's work + Emma's work = 1 (the whole work)\n    # (x/10) + ((14 - x)/18) = 1\n\n    # Solving for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x/10) + ((14 - x)/18), 1)\n    days_david_worked = solve(equation, x)[0]\n\n    # Number of days Emma worked on the journal\n    days_emma_worked = 14 - days_david_worked\n\n    return days_emma_worked\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # It takes 12 minutes to make 4 cuts to divide the wood into 5 sections.\n    # Therefore, each cut takes 12 / 4 = 3 minutes.\n    # To cut the piece of wood 5 times, it will take 5 cuts * 3 minutes per cut.\n    time_per_cut = 12 / 4\n    total_minutes = 5 * time_per_cut\n    return total_minutes\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    # If 5/9 of the remaining are boys, 4/9 of the remaining are girls\n    # So, 4/9 of the remaining people equals 36\n    remaining = girls * 9 / 4 \n    # Remaining people are 5/5 - 2/5 = 3/5 of the total people\n    total_people = remaining * 5 / 3\n    return int(total_people)\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 25 / 100\n    adult_price_for_child = 30 / (1 - child_discount)\n    senior_discount = 20 / 100\n    senior_price = adult_price_for_child * (1 - senior_discount)\n    return senior_price\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_final = 2\n\n    work_done = men_initial * days_initial\n    days_final = work_done / men_final\n\n    return days_final\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let x be the number of each type of coin in the bag.\n    # Each 2p coin contributes £0.02 and each 5p coin contributes £0.05.\n    # We need to find the total value contributed by the same number of 2p and 5p coins to equal £1.26.\n\n    # 2p + 5p = 7p is the total value per one 2p and one 5p coin.\n    # So, we convert £1.26 to pence, which is 126p.\n    # We divide 126p by the combined value of one 2p and one 5p coin, 7p.\n\n    total_pence = 126\n    combined_value_per_coin_pair = 7\n\n    # Number of coin pairs (each pair consists of one 2p coin and one 5p coin)\n    num_coin_pairs = total_pence / combined_value_per_coin_pair\n\n    # Check if the number of pairs is an integer, it must be in order not to have a fractional coin.\n    if num_coin_pairs.is_integer():\n        # Number of coins in the bag is twice the number of pairs since we have two types of coins.\n        ans = int(num_coin_pairs * 2)\n    else:\n        # If num_coin_pairs is not an integer, there is no combination of coins that can add up to £1.26.\n        ans = 0\n\n    return ans\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Find the pattern of the ones digit in the powers of 3\n    pattern = [3**i % 10 for i in range(1, 5)]\n    # Since the pattern repeats every 4, find the corresponding position of 2009\n    position = 2009 % 4\n    # If position is 0, take the last element of the pattern\n    ones_digit = pattern[position-1] if position != 0 else pattern[-1]\n    return ones_digit\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    will_now = symbols('will_now')\n    \n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n    \n    will_age_now = solve(equation, will_now)\n    \n    return will_age_now[0]\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    \n    # They meet each other in 10 hours\n    time_to_meet = 10  # in hours\n    \n    # Relative speed at which Jack is approaching Rose\n    relative_speed = jack_speed - rose_speed  # in km/h\n\n    # Distance between Town A and Town B\n    distance = relative_speed * time_to_meet  # in km\n    \n    return distance\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from sympy import symbols, binomial\n\n    # Begin by considering that we can place an additional \"divider book\" to represent that books to the right of this \n    # divider belong to the next child. We are dividing the books among 4 kids, so we need 3 dividers.\n    # This will make our problem equivalent to finding the number of ways to arrange 20 books + 3 divider books.\n    \n    total_books = 20  # Total number of books\n    dividers = 3      # We need 3 dividers for 4 kids\n\n    # The problem now reduces to finding the number of permutations of these 23 objects, where there are 20 identical books and 3 identical dividers.\n    # Calculating it as a combination: C(20+3, 3) = C(23, 3)\n    ans = binomial(total_books + dividers, dividers)\n\n    return ans\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    # Using formula for sum of n terms of an arithmetic series: n/2 * (first_term + last_term)\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_series)\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # According to the Law of Addition, we add up the different ways we can travel.\n    # We can choose among 3 trains, 4 cars, and 2 boats.\n    # Therefore, the total number of different ways to go from A to B is the sum of these choices.\n    total_ways = 3 + 4 + 2\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    days_to_finish = total_pages / pages_per_day\n    \n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    total_books = 30\n    total_kids = 5\n    minimum_books_per_kid = 2\n\n    # Since each kid gets at least two books, we distribute these books first\n    total_books -= total_kids * minimum_books_per_kid\n\n    # Now we need to find the number of ways to distribute the remaining books\n    # This is similar to finding the number of ways to place total_books indistinguishable items\n    # into total_kids distinguishable bins (stars and bars method)\n    return comb(total_books + total_kids - 1, total_books)\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the portions of Mike, Mason, and Chewy\n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # Calculate the total amount of soup\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    \n    # Convert milliliters to liters\n    total_soup_liters = total_soup_ml / 1000\n    \n    return float(total_soup_liters)\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    time = 2\n    balance = principal * ((1 + interest_rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_either = likes_one_direction + likes_the_vamps - likes_both\n\n    likes_neither = total_girls - likes_either\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Number of intervals is one less than number of trees,\n    # since trees are planted at both ends\n    num_intervals = road_length // interval\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n    \n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Denominations of UK coins in pence\n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Cost of the bus fare\n    fare = 44\n\n    # Smallest amount greater than or equal to fare that can be paid with a single coin\n    for coin in denominations:\n        if coin >= fare:\n            payment = coin\n            break\n\n    # Minimum number of coins needed for change\n    change = payment - fare\n    num_coins = 1  # Susan pays with one coin\n\n    for coin in denominations:\n        num_coins += change // coin  # Count number of coins for each denomination\n        change %= coin  # Update remaining change\n\n    return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    \n    total_chairs = classrooms * chairs_each\n\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "from sympy import symbols, solve, Rational\n\ndef solution():\n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > Rational(505, 1000)\n    solutions = solve(inequality, x)\n    # Find the largest integer less than the solution\n    largest_wins = int(solutions[0]) - 1\n    return largest_wins\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(range(2, 89, 4))\n    return ans\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    # Given fractions\n    fractions = [(Fraction(1, 2), Fraction(1, 9)),\n                 (Fraction(1, 3), Fraction(1, 8)),\n                 (Fraction(1, 4), Fraction(1, 7)),\n                 (Fraction(1, 5), Fraction(1, 6))]\n    \n    # Operations\n    operations = ['+', '-', '*', '/']\n\n    # Store the maximum sum and second largest term\n    max_sum = Fraction(0)\n    second_largest = Fraction(0)\n    \n    # Iterate over all permutations of operations\n    for perm in permutations(operations):\n        # Calculate the sum of the four terms with the given operations\n        current_sum = sum([eval(f\"f{op}g\") for f, g, op in zip(*fractions, perm)])\n        # If this sum is larger than the current maximum sum, update it\n        if current_sum > max_sum:\n            max_sum = current_sum\n            # Calculate the second largest term\n            second_largest = sorted([eval(f\"f{op}g\") for f, g, op in zip(*fractions, perm)])[2]\n\n    A, B = second_largest.numerator, second_largest.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    pupils_room_A = 235\n    pupils_room_B = 567\n\n    total_pupils = pupils_room_A + pupils_room_B\n    pupils_each_room_after_transfer = total_pupils // 2\n\n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 0 and num % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n        num += 1\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    amount_spent = 89.65\n    amount_left = 20.35\n\n    initial_amount = amount_spent + amount_left\n\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # Since the circle is divided into 12 points, there are 12 ways to choose the vertex opposite the right angle\n    # and for each such choice, there are 2 right-angled triangles formed (since the circle's diameter will always pass through a single point).\n    # Thus, every point can be the vertex of 2 right-angled triangles.\n    \n    total_vertex = 12\n    triangles_per_vertex = 2\n\n    # The total number of right-angled triangles is simply the product of the number of vertices and the triangles formed per vertex.\n    total_right_angled_triangles = total_vertex * triangles_per_vertex\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_diff = fifteenth_term - tenth_term\n    common_difference = term_diff / (15 - 10)\n    \n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def term(num, denom_start):\n        return num / (denom_start * (denom_start + num))\n\n    ans = term(1,1) + term(2,2) + term(3,4) + term(4,7) + term(5,11) + term(6,16) + term(7,22) + 1/29\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    students_class_A = 24\n    students_class_B = 36\n    students_class_C = 42\n\n    gcd_AB = gcd(students_class_A, students_class_B)\n    gcd_ABC = gcd(gcd_AB, students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum_ = 0\n    add = True\n    for num in range(200, 0, -1):\n        if add:\n            sum_ += num\n            add = False\n        else:\n            sum_ -= num\n            add = True\n    return sum_\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    cost_per_day = 4.36\n    days = 5\n    total_cost = children * cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n\n    # Hypothesis: All answers were correct.\n    max_points = total_questions * correct_points\n    \n    # Using hypothesis to find the number of incorrect answers\n    # max_points - actual points = (correct_points - incorrect_points) * number_of_incorrect\n    # 100 - 76 = (5 - (-3)) * number_of_incorrect\n    # 24 = 8 * number_of_incorrect\n    number_of_incorrect = (max_points - 76) / (correct_points - incorrect_points)\n    \n    # The number of correct answers is the total minus the number of incorrect ones.\n    correct_answers = total_questions - number_of_incorrect\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = selling_price - cost_price\n    \n    equation = Eq(profit, 120)\n    cost_price_value = solve(equation, cost_price)[0]\n    \n    return cost_price_value\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    \n    # Equation to solve |x + 1| = 2x + 5\n    eq = Eq(Abs(x + 1), 2 * x + 5)\n    \n    # Solve the equation\n    ans = solve(eq, x)\n    \n    # Return the result\n    return ans\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    import math\n\n    # For four different colored socks\n    ways_for_four_different_socks = math.factorial(4)\n\n    # For two different colored pairs of socks\n    ways_for_two_pairs = math.factorial(4) // (math.factorial(2) * math.factorial(2))\n\n    return ways_for_four_different_socks, ways_for_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    # Iterate through possible values of a and b to find the solution.\n    for a in range(1, 10):  # a cannot be 0 as it is the leftmost digit\n        for b in range(10):  # b can be from 0 to 9\n            ab = int(f\"{a}{b}\")\n            ba = int(f\"{b}{a}\")\n            aab = int(f\"{a}{a}{b}\")\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    # There are 4 people, and each person shakes hands with everyone else once.\n    # This is a classic handshake problem, which can be solved using the formula:\n    # Number of handshakes = n(n - 1) / 2, where n is the number of people.\n\n    people = 4\n    handshakes = people * (people - 1) // 2\n\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "def solution():\n    from math import comb\n    \n    number_of_points = 10\n    points_in_triangle = 3\n\n    num_triangles = comb(number_of_points, points_in_triangle)\n\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Original total sweets before getting extra sweets from their teacher\n    original_total = Eq(andre + beth, 24)\n\n    # New total for Andre after getting 4 extra sweets and having 6 more than Beth\n    new_andre_total = Eq(andre + 4, beth + 6 + 4)\n\n    # Solving the set of equations\n    solutions = solve((original_total, new_andre_total), (andre, beth))\n\n    # Beth's total after receiving 4 extra sweets\n    beth_final = solutions[beth] + 4\n\n    return beth_final\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea needs to leave a multiple of 4 (4, 8, 12 or 16) for Ben\n    total_apples = 18\n    # She can take 1, 2, or 3 apples.\n    for apples in range(1, 4):\n        # Check if the remaining apples are multiple of 4 after her turn\n        if (total_apples - apples) % 4 == 0:\n            return apples\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    # Number of friends excluding Judy\n    friends_count = 5\n    \n    # Judy can stand on either of the two ends\n    judy_positions = 2\n    \n    # The number of ways to arrange the remaining friends\n    from math import factorial\n    arrangements = factorial(friends_count)\n    \n    # Total number of ways Judy and her friends can stand in line\n    total_ways = judy_positions * arrangements\n    \n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume 'a' is for Andre's sweets and 'b' for Beth's sweets\n    a, b = symbols('a b')\n    \n    # Before teacher gave sweets\n    # equation1: The total sweets they both had was 24\n    equation1 = Eq(a + b, 24)\n    \n    # After teacher gave sweets\n    # equation2: Andre has 6 sweets more than Beth\n    equation2 = Eq(a + 4 - (b + 4), 6)\n\n    # find the values of 'a' and 'b'\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Beth's sweets now, after receiving 4 more from the teacher\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # Since the Ferrari driver finished in second place, there must be at least one car ahead\n    # The Ferrari driver overtook 5 other cars, so there were at least 5 cars behind\n    # So we have 1 car in front, 5 cars behind, and the Ferrari driver itself in second place\n    total_cars = 1 + 5 + 1\n\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # x is the number we're looking for\n    # According to the problem we have: (x - 6) / 12 = 2\n    # We solve for x to get the number\n    x = (2 * 12) + 6\n    return x\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the mass of a table and c be the mass of a chair\n    t, c = symbols('t c')\n\n    # According to the problem, we can set up the following equations:\n    # 3 * t = 4 * c (the total mass of 3 tables is the same as the total mass of 4 chairs)\n    # t = c + 2 (the mass of a table is 2kg heavier than a chair)\n    equation1 = Eq(3 * t, 4 * c)\n    equation2 = Eq(t, c + 2)\n\n    # Now we solve the system of equations:\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the time younger sister spent on English\n    # Let y be the time younger sister spent on Math\n    x, y = symbols('x y')\n    \n    # According to the problem\n    # The elder sister spent y + 12 on English and y + 10 on Math\n    # The younger sister spent x on English and y on Math\n    \n    # The elder sister spent a total of 88 minutes on homework\n    equation1 = Eq(y + 12 + y + 10, 88)\n    \n    # The younger sister spent 12 minutes less on her maths homework than on her English homework\n    equation2 = Eq(y, x - 12)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the time younger sister spent on English (variable x)\n    return solutions[x]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4\n    new_sum = 110 * 3\n    removed_number = total_sum - new_sum\n\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    # Calculate the least common multiple (LCM) of the first two traffic lights\n    # Convert minutes to seconds: 9 minutes = 540 seconds, 1.5 minutes = 90 seconds and 1 minute = 60 seconds\n    # The third light needs to have a time that is a divisor of the LCM of the first two lights and 540 seconds,\n    # and it also needs to be 30 seconds or longer.\n\n    from math import gcd\n\n    # Define times in seconds for first two traffic lights\n    first_light_time = 60  # 1 minute\n    second_light_time = 90  # 1.5 minutes\n\n    # Calculate LCM of the first two lights\n    lcm = (first_light_time * second_light_time) // gcd(first_light_time, second_light_time)\n\n    # The third light needs to divide the LCM evenly and be at least 30 seconds\n    third_light_time = None\n    for i in range(30, lcm + 1, 30):  # Start at 30 seconds, incrementing by 30 seconds\n        if lcm % i == 0 and 540 % i == 0:  # It also needs to divide 540 seconds evenly\n            third_light_time = i\n            break\n\n    # Return the time in seconds if found, otherwise return None\n    return third_light_time\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # In this game, the optimal strategy is to ensure that after each of your moves, a\n    # multiple of 3 apples remains. This is because the opponent can then only remove\n    # 1 or 2 apples, and you can always take away 3 apples in each round after that.\n\n    # Starting with 14 apples, Leo can ensure victory by making sure that after his move,\n    # a multiple of 3 remains. To do this, Leo must take away either 1 or 2 apples.\n\n    # Since 14 is not a multiple of 3, we can subtract multiples of 3 until we reach a \n    # number smaller than 3. The remainders we can potentially get are 1 or 2,\n    # because if the remainder were 0, the total would be a multiple of 3.\n\n    remainder = 14 % 3\n    \n    # If the remainder is 1, Leo should take away 1 apple to leave Mia with a multiple of 3.\n    # If the remainder is 2, Leo should take away 2 apples for the same reason.\n    # So Leo must take away a number of apples equal to the remainder.\n    \n    return remainder\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let V_s be the value of 1 silver spoon\n    # Let V_g be the value of 1 gold ring\n    # According to the problem statement:\n    # 12 * V_s = (3/4) * 6 * V_g\n    \n    # We need to find the number of silver spoons that equals the value of 3 gold rings\n    # Let N be the number of silver spoons we are looking for:\n    # N * V_s = 3 * V_g\n    \n    # Now we can express V_s in terms of V_g using the first equation and solve for N\n    # V_s = ((3/4) * 6 * V_g) / 12\n    # Simplifying V_s we get:\n    # V_s = (3/4) * (1/2) * V_g\n    \n    # So, N * V_s = N * (3/4) * (1/2) * V_g\n    # We want this to be equal to 3 V_g, so:\n    # N * (3/4) * (1/2) * V_g = 3 * V_g\n    \n    # Cancelling V_g from both sides and solving for N\n    # N * (3/4) * (1/2) = 3\n    # N * (3/8) = 3\n    # N = 3 / (3/8)\n    # N = 8\n    # Therefore, 8 silver spoons have the same value as 3 gold rings.\n    \n    ans = 8\n\n    return ans\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_students = 0\n    for boys in range(1, 100, 2):  # We start from 1 and increase by 2, representing the side length of boys' layer\n        girls = boys - 2             # Girls will always be one layer inside the boys\n        if girls > 0:                # Girls must be a positive number\n            count_boys = boys * 4 - 4  # Calculate the number of boys (4 sides minus 4 corners)\n            count_girls = girls * 4 - 4 # Calculate the number of girls similarly\n            if count_boys - count_girls == 55:  # Check if the difference is 55\n                total_students = boys ** 2    # Total students equals the square of side length of the outermost layer\n                break\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n    \n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    whiteboard_marker_price = 3\n    paintbrush_price = 1\n    total_amount_paid = 28\n    total_items = 12\n\n    # Assume all bought items are paintbrushes\n    total_paintbrush_cost = total_items * paintbrush_price\n    remaining_amount = total_amount_paid - total_paintbrush_cost\n\n    # The remaining amount must be due to the cost difference between markers and brushes\n    cost_difference_per_item = whiteboard_marker_price - paintbrush_price\n\n    # Calculate the number of whiteboard markers\n    num_whiteboard_markers = remaining_amount // cost_difference_per_item\n\n    return num_whiteboard_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n    \n    # total weight of male teachers\n    male_total_weight = 3 * 75\n    \n    # total weight of all teachers (average weight * total number of teachers)\n    total_weight = (f + 3) * 65\n    \n    # average weight of female teachers\n    female_avg_weight = 60\n    \n    # total weight of female teachers\n    female_total_weight = f * female_avg_weight\n    \n    # equation representing sum of all weights\n    equation = Eq(male_total_weight + female_total_weight, total_weight)\n\n    # solve the equation for the number of female teachers\n    num_female_teachers = solve(equation, f)\n\n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from the front and 7th from the back,\n    # so there are 4 students in front of her and 6 students behind her\n    total_rows = 5 + 6\n\n    # Cora is 2nd from the left and 4th from the right,\n    # so there is 1 student to her left and 3 students to her right\n    total_columns = 2 + 3\n\n    # The total number of students is the number of rows times\n    # the number of columns\n    total_students = total_rows * total_columns\n    return total_students\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n\n    # Since Star must be the first runner, we only need to arrange the remaining 4 teammates.\n    # The number of ways to arrange 4 people is 4 factorial (4!).\n    \n    ans = math.factorial(4)\n\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        if perm[0] < perm[1] and perm[1] < perm[2] and perm[2] < perm[3]:\n            inc_num = int(''.join(map(str, perm)))\n            dec_num = int(''.join(map(str, perm[::-1])))\n            for third_perm in permutations(perm, 4):\n                if third_perm != perm and third_perm[::-1] != perm:\n                    third_num = int(''.join(map(str, third_perm)))\n                    if inc_num + dec_num + third_num == 26352:\n                        return min(inc_num, dec_num, third_num)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(x, y):\n        return x**2 + x + y**2 - y\n    \n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_for_31_segments = 60  # minutes\n    cuts_for_31_segments = 31 - 1  # number of cuts needed for 31 segments\n    cuts_for_50_segments = 50 - 1  # number of cuts needed for 50 segments\n\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55 to get the prime factors and their powers\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Combine the factors of 33 and 55\n    combined_factors = {}\n    for prime, power in factors_33.items():\n        combined_factors[prime] = combined_factors.get(prime, 0) + power\n    for prime, power in factors_55.items():\n        combined_factors[prime] = combined_factors.get(prime, 0) + power\n\n    # Find the minimum m by making all powers even\n    m = 1\n    for prime, power in combined_factors.items():\n        if power % 2 != 0:  # If the power is odd\n            m *= prime  # Multiply m by the prime to make the power even\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces, start by putting 2 pieces on each plate.\n    # The total used is then 3 * 2 = 6 pieces, leaving 2 pieces to be freely distributed.\n    remaining_candies = 8 - 3 * 2\n\n    # Now, we have 3 plates and want to distribute the remaining 2 pieces without restrictions.\n    # This is a problem of distributing 'n' identical items into 'r' different groups, which is\n    # similar to the stars and bars problem in combinatorics, and can be calculated by the formula:\n    # (n + r - 1) choose (r - 1)   i.e., \"n plus r minus one choose r minus one\".\n    # Remaining candies = n = 2, Plates = r = 3\n\n    n = remaining_candies\n    r = 3\n    return math.comb(n + r - 1, r - 1)\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = 210 / (1 - 0.30)\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candy, nancy, flowers_given = symbols('candy nancy flowers_given')\n    \n    equation1 = Eq(candy - flowers_given, nancy + flowers_given - 8)\n    equation2 = Eq(candy, 11)\n    equation3 = Eq(nancy, 9)\n\n    solutions = solve((equation1, equation2, equation3), (candy, nancy, flowers_given))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = \"ARRANGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n    new_price = original_price + (original_price * increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    daily_amount_from_mum = 60\n    daily_amount_from_dad = 40\n    num_days = 3\n    \n    total_amount = (daily_amount_from_mum + daily_amount_from_dad) * num_days\n    \n    return total_amount\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36 and num % 24 == 0:\n            return num\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temperature = -5\n    midday_temperature = 17\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    next_increment = 1\n\n    while term <= 50:\n        next_increment += 1\n        term += next_increment\n\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost = 43 / 100  # Converting pence to pounds\n    booklet_cost = 1.85  # Cost already in pounds\n    total_money = 10  # Total money available in pounds\n\n    total_cost = (3 * pen_cost) + (4 * booklet_cost)\n    change = total_money - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    place_from_back = 14\n    sibel_position_from_front = people_in_front + 1  # Counting Sibel herself\n    total_people = sibel_position_from_front + (place_from_back - 1)  # Subtract one for Sibel being counted in both positions\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St. Petersburg (5,351,935 as of the 2021 Census)\n    population = 5351935\n    return population\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5001, 10000):\n        thousands_digit = int(str(i)[0])\n        hundreds_digit = int(str(i)[1])\n        tens_digit = int(str(i)[2])\n        ones_digit = int(str(i)[3])\n\n        if hundreds_digit == 0 or tens_digit == 0 or ones_digit == 0:\n            continue\n        \n        if thousands_digit % hundreds_digit == 0 and thousands_digit % tens_digit == 0 and thousands_digit % ones_digit == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child in a circular queue,\n    # it means that there are 22 - 4 children in between them which is 18 children.\n    # Since they are opposite, this distance must be half the circle.\n    # So the total number of children is twice the number of children in between.\n    \n    children_between = 22 - 4\n    total_children = children_between * 2\n    \n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    number_of_weeks = 10\n\n    last_term = first_term + (number_of_weeks - 1) * difference\n\n    total_coins = (number_of_weeks * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, E = symbols('A B C D E')\n\n    equation1 = Eq((A + B + C) / 3, 95)\n    equation2 = Eq((B + C + D) / 3, 94)\n    equation3 = Eq(E, 96)\n    equation4 = Eq(A, E + 1)  # as A has the highest mark which is one more than E\n    equation5 = Eq(B, D)  # as B and D have the same score\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (A, B, C, D, E))\n\n    return solutions[D]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # List of attempts and the number of correct digits in each attempt\n    attempts = [\n        (5648, 2),\n        (3628, 2),\n        (3147, 2),\n        (5629, 2),\n        (1258, 0)\n    ]\n    \n    # The range of possible digits for each position\n    possibilities = [set(range(10)) for _ in range(4)]\n    \n    # Process each attempt to eliminate the impossible digits\n    for attempt, correct_digits in attempts:\n        attempt_digits = [int(d) for d in str(attempt)]\n        \n        # For the attempt with all digits wrong\n        if correct_digits == 0:\n            for i, d in enumerate(attempt_digits):\n                if d in possibilities[i]:\n                    possibilities[i].remove(d)\n        else:\n            # Create a set for counting digits in the correct positions\n            correct_digit_set = set()\n            # Check for digits that occur in the same position in different attempts\n            for i, digits_set in enumerate(possibilities):\n                if attempt_digits[i] in digits_set:\n                    correct_digit_set.add(attempt_digits[i])\n            \n            # If the number of correct digits found is less than the known correct ones,\n            # we can't have any other digits in these positions\n            if len(correct_digit_set) < correct_digits:\n                # Find the positions that must have the correct digits\n                must_be_correct = [i for i, d in enumerate(attempt_digits) if d in correct_digit_set]\n                for i in range(4):\n                    if i not in must_be_correct:\n                        possibilities[i].clear()\n                        possibilities[i].update(correct_digit_set)\n                    else:\n                        possibilities[i].intersection_update(correct_digit_set)\n    \n    # Find the digit for each position, assuming we have found single possibilities for all\n    correct_combination = ''.join(str(possibilities[i].pop()) for i in range(4))\n    \n    return correct_combination\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    time = (final_amount / principal) ** (1 / interest_rate) - 1\n\n    return round(time)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average = 65\n    male_count = 3\n    male_average = 75\n    female_average = 60\n    \n    # Total weight of all male teachers\n    total_male_weight = male_average * male_count\n    \n    # Since the total average is the weighted sum of male and female teachers,\n    # we can set up the equation as:\n    # (total_male_weight + female_average * female_count) / (male_count + female_count) = total_average\n    # We can then solve for female_count using algebra:\n    \n    # Let female_count be x, the equation becomes:\n    # (total_male_weight + female_average * x) / (male_count + x) = total_average\n    # Simplifying, we have:\n    # total_male_weight + female_average * x = total_average * (male_count + x)\n    # female_average * x - total_average * x = total_average * male_count - total_male_weight\n    # x * (female_average - total_average) = total_average * male_count - total_male_weight\n    # x = (total_average * male_count - total_male_weight) / (female_average - total_average)\n    \n    female_count = (total_average * male_count - total_male_weight) / (female_average - total_average)\n    return int(female_count)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarter_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarter_full) / 2\n\n    mass_empty_jar = mass_quarter_full - (mass_half_full - mass_quarter_full)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_capacity_liters = 9.1\n    part_bottle_filled = bottle_capacity_liters / 7\n    cup_capacity_liters = 4 * 350 / 1000\n    \n    remaining_soda = total_soda_liters - part_bottle_filled - cup_capacity_liters\n\n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure victory, Rose must leave a multiple of 3 marbles for Kylie.\n    # Thus, she should take away a number of marbles that makes the remaining\n    # count a multiple of 3 in her first turn.\n    \n    # If Rose takes 1 marble, 13 remain.\n    # If Rose takes 2 marbles, 12 remain which is a multiple of 3.\n    # Therefore, Rose must take 2 marbles to ensure her victory.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -a\n    ans = a + b - a*b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100  # convert pounds to pence\n    coin_value = 5  # value of one coin in pence\n    num_coins = total_amount_pence / coin_value  # calculate the number of coins\n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Equation for total distance run by both in 3 minutes\n    equation1 = Eq(pip + bud, 540)\n\n    # Equation for the difference in distance run by Pip and Bud each minute\n    equation2 = Eq(pip - bud, 20*3)\n\n    # Solve the system of equations for pip and bud\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n    \n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters\n    x = 0.04  # position from equilibrium in meters\n    \n    # Total energy of the oscillator (E) is given by the formula: E = (1/2) * k * A^2\n    total_energy = 0.5 * k * A**2\n    \n    # The speed (v) of the block when it's x meters from equilibrium can be found using\n    # the energy conservation principle: E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # Rearranging the equation for v gives us: v = sqrt((2*E - k*x^2) / m)\n    v = math.sqrt((2*total_energy - k*x**2) / m)\n    \n    return total_energy, v\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    A, B, C = symbols('A B C')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq(A, 4 * B)              # A has four times as many coins as B\n    equation2 = Eq(C + 0.06 * A, 1220)    # C gains 6% of A and becomes 1220\n    equation3 = Eq(C + 0.20 * B, 1220)    # C gains 20% of B and becomes 1220\n    equation4 = Eq(C * 1.22, 1220)        # C is 22% more than original number of coins in C\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C))\n\n    # Get the value of A (number of coins in box A initially)\n    return solutions[A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Initially, 60% were coffee which means 40% were tea\n    initial_tea_percent = 40\n\n    # After buying more tea, 40% were coffee which means 60% were tea\n    final_tea_percent = 60\n\n    # Percentage increase in the number of bottles of tea\n    percent_increase = ((final_tea_percent - initial_tea_percent) / initial_tea_percent) * 100\n    \n    return percent_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_result = hex(int('2A3', 16) + int('17B', 16)).upper().replace('0X', '')\n    return hex_result\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = 0.25 * 0.30 * 0.40 * 300\n    return ans\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    # Calculate the total selling price for each color\n    total_red = 5 * 2\n    total_green = 2 * 5\n    total_white = 3 * 10\n\n    # Calculate the total selling price for all flowers\n    total_price = total_red + total_green + total_white\n\n    # Calculate the total number of flowers\n    total_flowers = 5 + 2 + 3\n\n    # Calculate the average selling price per flower\n    average_price = total_price / total_flowers\n\n    return average_price\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Time taken for individual tasks\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Total time taken for making juice is the sum of all tasks\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_pounds = 1.10\n    \n    # Since we need the total in pounds, convert Lewis' money to pounds first (100p = £1)\n    lewis_money_pounds = lewis_money_p / 100\n    \n    # Add both amounts to get the total\n    total_money_pounds = lewis_money_pounds + james_money_pounds\n    \n    return total_money_pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):  # First stack must have at least 3 books.\n        for x2 in range(3, 13):  # Second stack must have at least 3 books.\n            x3 = 13 - x1 - x2  # The remaining books go into the third stack.\n            if x3 >= 3:  # Third stack must also have at least 3 books.\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0: return 1\n        if n == 1: return 0\n        return (n-1) * (derangement(n-1) + derangement(n-2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    # total number of vehicles\n    total_vehicles = 24\n    \n    # total number of wheels\n    total_wheels = 86\n    \n    # we assume all vehicles are tricycles first (3 wheels), then calculate the remainder\n    total_tricycles_wheels = total_vehicles * 3\n    remainder_wheels = total_wheels - total_tricycles_wheels\n    \n    # extra wheel comes from converting a tricycle to a car (1 extra wheel needed per car)\n    # The remainder_wheels is actually the number of cars because\n    # each time we convert a tricycle (3 wheels) into a car (4 wheels), we add 1 more wheel.\n    \n    # Since each car has one more wheel than a tricycle, the number of cars\n    # is equal to the excess number of wheels (remainder_wheels)\n    num_cars = remainder_wheels\n    \n    # The number of tricycles is then the total number of vehicles minus the number of cars.\n    num_tricycles = total_vehicles - num_cars\n    \n    return num_tricycles\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    lemonade_price = 4\n    plus_price = 7\n\n    min_plus_bottles = (income - (lemonade_price * total_bottles)) / (plus_price - lemonade_price)\n    min_plus_bottles = -(-min_plus_bottles // 1)  # Ceiling because we can't sell a fraction of a bottle.\n\n    return int(min_plus_bottles)\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of blue pens initially and added\n    blue_initial, blue_added = symbols('blue_initial blue_added')\n\n    # Given ratios\n    equation1 = Eq(blue_initial / (96 - blue_initial), 3/5)\n    \n    # Total pens after adding\n    total_after_adding = 96 + 60 + blue_added\n\n    # Equation based on the new percentage of blue pens\n    equation2 = Eq((blue_initial + blue_added) / total_after_adding, 40/100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (blue_initial, blue_added))\n\n    return solutions[blue_added]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2 # in kilograms\n    final_velocity = 8 # in m/s\n    time = 4 # in seconds\n\n    # Using the formula F = m * a, where F is force, m is mass, and a is acceleration\n    # We know that acceleration, a = (final_velocity - initial_velocity) / time, and initial_velocity is 0 because object is stationary\n\n    acceleration = (final_velocity - 0) / time\n\n    # Now we calculate the force\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # This is a classic example of the Coin Problem, more specifically the Frobenius Coin Problem\n    # We need to find the Frobenius number for 3 and 7, which are coprime.\n    \n    # The Frobenius number for two numbers a and b (where gcd(a, b) = 1) is given by (a * b) - a - b.\n    # Since 3 and 7 are coprime, we use this formula to get the answer\n    \n    a = 3\n    b = 7\n    frobenius_number = (a * b) - a - b\n    return frobenius_number\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    dividend = 20172017\n    divisor = 2017\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n    \n    # Considering the statement \"Two students put up their hands.\"\n    # This implies two students saw all factors and could thus determine their number.\n    # Given the range, we look for numbers with a unique number of factors.\n    unique_factors = {}\n    for n in range(1, 14):\n        factors = num_factors(n)\n        if factors not in unique_factors:\n            unique_factors[factors] = [n]\n        else:\n            unique_factors[factors].append(n)\n\n    # Filter out the factors count that is not unique\n    possible_numbers = {factor: nums for factor, nums in unique_factors.items() if len(nums) == 1}\n\n    # Iterate through combinations of 9 numbers taken from 1 to 13\n    for combo in combinations(range(1, 14), 9):\n        # Check for exactly two numbers with a unique factors count\n        if sum(num in combo for num in possible_numbers.values()) == 2:  # Two students know their numbers\n            # Check for Alice's statement that she sees only odd numbers\n            if all(num % 2 == 1 for num in combo):\n                for may_num in combo:\n                    # May's number is smaller than Alice's by 2 and bigger than Mark's by 1\n                    # May knows her number, and since she comments on Alice's number,\n                    # Alice must be one of the students that know their number.\n                    if num_factors(may_num+2) in possible_numbers and (may_num-1) in combo:\n                        # Determine the product of numbers not picked\n                        not_picked = set(range(1, 14)) - set(combo)\n                        return prod(not_picked)\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # equation expresses the relationship between correct and incorrect answers\n    equation1 = Eq(correct, 3 * incorrect + 12)\n\n    # equation expresses total points (5 points for correct, lose 2 points for incorrect)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    total_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / total_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Define the function to convert a decimal number to a base 7 number\n    def to_base_7(num):\n        if num == 0:\n            return '0'\n        digits = ''\n        while num:\n            digits += str(num % 7)\n            num //= 7\n        return digits[::-1]  # Reverse the string because we constructed the digits in reverse\n\n    # Convert 45 and 66 to base 7 and add them as if they were in decimal\n    num1_base7 = to_base_7(45)\n    num2_base7 = to_base_7(66)\n    sum_decimal = int(num1_base7, 7) + int(num2_base7, 7)\n\n    # Convert the sum back to base 7\n    ans = to_base_7(sum_decimal)\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Number of games played by each of the other students\n    games_A = 4\n    games_B = 6\n    games_C = 2\n    games_D = 1\n    games_E = 3\n    games_G = 5\n\n    # Since each match involves two players, we can sum all the games and divide by 2 to find the total number of matches\n    total_matches = (games_A + games_B + games_C + games_D + games_E + games_G) // 2\n\n    # Subtracting each student's matches from the total gives us number of matches played by F\n    games_F = total_matches - (games_A + games_B + games_C + games_D + games_E + games_G - games_F)\n\n    return games_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for i in range(1, 21):\n        for j in range(i+1, 21):\n            if i * j > 20:\n                candidates = set(range(1, 21)) - {i, j}\n                lcm = 1\n                for k in candidates:\n                    lcm *= k // math.gcd(lcm, k)\n                if all(lcm % k == 0 for k in candidates):\n                    return i + j\n    return None\n\nimport math\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie, natasha = symbols('jamie natasha')\n\n    equation1 = Eq(jamie, natasha + 18)\n    equation2 = Eq(jamie / natasha, 5 / 3)\n\n    solutions = solve((equation1, equation2), (jamie, natasha))\n\n    return solutions[jamie] + solutions[natasha]\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for i in range(161, 15*15):\n        if i % 15 == i // 15:\n            ans += i\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    difference = 4\n    last_term = 85\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # For the least possible value of the sum, we choose the smallest values in the given ranges\n    first_number = 5\n    second_number = 2\n    # Sum the two numbers\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300  # Distance from home to school\n    distance_downhill = 300  # Distance from school to home (same route)\n    speed_uphill = 10  # Speed uphill (m/min)\n    speed_downhill = 30  # Speed downhill (m/min)\n\n    # Time taken to travel uphill and downhill\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_downhill / speed_downhill\n\n    # Total distance for the round trip\n    total_distance = distance_uphill + distance_downhill\n\n    # Total time for the round trip\n    total_time = time_uphill + time_downhill\n\n    # Average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Cici's age when she was born be 0 and Linda's age be 11\n    linda_age_at_birth = 11\n    cici_age_at_birth = 0\n\n    # Let x be the number of years passed since Cici was born\n    x = symbols('x')\n\n    # Equation for sum of their ages 4 years later\n    # (Linda's age at Cici's birth + x + 4) + (Cici's age at her own birth + x + 4) = 37\n    equation = Eq((linda_age_at_birth + x + 4) + (cici_age_at_birth + x + 4), 37)\n\n    # Solve the equation for x\n    x_solution = solve(equation, x)\n\n    # Calculate Linda's age 3 years later\n    linda_age_3_years_later = linda_age_at_birth + x_solution[0] + 3\n    \n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_entrances = 5\n    num_people = 4\n    \n    # Each person can choose from 5 entrances, so total ways are 5^4\n    ans = num_entrances ** num_people\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n    \n    apples_left = 10\n    pears_left = 28\n    oranges_left = 13\n    \n    apples_distributed = 226 - apples_left\n    pears_distributed = 352 - pears_left\n    oranges_distributed = 157 - oranges_left\n\n    gcd_apples_pears = gcd(apples_distributed, pears_distributed)\n    gcd_all = gcd(gcd_apples_pears, oranges_distributed)\n\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand in 2 places (first or last)\n    judy_positions = 2\n    \n    # There are 5 friends who can stand in the remaining 5 positions\n    friends_positions = factorial(5)\n    \n    # Apply the multiplication principle\n    total_ways = judy_positions * friends_positions\n    \n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n\n    # Since 6 (the known number) is one of the multiples, we start checking from 1 to lcm\n    for i in range(1, lcm + 1):\n        # Check if the number i is a factor of the lcm and has no common factor with number 6 other than 1 or 2 \n        if lcm % i == 0 and (i == 1 or i == 2 or (number % i != 0 and i % 2 != 0)):\n            other_number = lcm / i\n            if number * other_number == lcm:\n                return int(other_number)\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    count = 1\n    current_number = 1\n    while True:\n        for digit in str(current_number):\n            if count == 200:\n                return int(digit)\n            count += 1\n        current_number += 1\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    points_for_qualified = 5\n    points_lost_unqualified = -18\n    total_points = 9931\n    daily_production = 500\n    \n    # Hypothesis: Assume all products are qualified, calculate the total points.\n    total_qualified_hypothesis = daily_production * total_days\n    total_points_hypothesis = total_qualified_hypothesis * points_for_qualified\n    \n    # Determine how many additional points are needed to reach the actual points.\n    points_difference = total_points - total_points_hypothesis\n    \n    # Calculate the number of unqualified products based on the points difference.\n    unqualified_products = points_difference / points_lost_unqualified\n    \n    # Calculate the actual number of qualified products.\n    actual_qualified_products = total_qualified_hypothesis - unqualified_products\n\n    return int(actual_qualified_products)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of the shirt\n    c = symbols('c')\n\n    # The price is $40 more than the cost\n    price = c + 40\n\n    # The customer buys it with twenty percent off\n    sale_price = price * 0.8\n\n    # The profit is the sale price minus the cost\n    profit = sale_price - c\n\n    # The profit is $12\n    equation = Eq(profit, 12)\n\n    # Solve for the cost\n    cost = solve(equation, c)\n\n    return cost[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Daniel's and his daughter's current ages\n    daniel, daughter = symbols('daniel daughter')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the distance Baye walked till first meeting as B.\n    # Then April walked 1800m to Q and back 800m to meet Baye, totaling 2600m.\n    # Since April runs 4 times faster than she walks, the time she took to run 800m is 1/4 the time she took to walk 800m.\n    # So, we can express the distances as: Distance by April to Q (1800m) + 1/4 Distance from Q to Meeting Point (800m) = Distance by Baye to Meeting Point (B)\n    # Which gives us: 1800 + 800/4 = B -> 1800 + 200 = B -> B = 2000m\n    # Since the meeting point is 800m from Q, and Baye has walked 2000m, he has walked 2000 - 1800 = 200m past point P.\n    # This means, when April reaches P, Baye would be 200m closer to Q than he was at the meeting point.\n    # Since he was 800m away from Q at the meeting point, he would be 800 - 200 = 600m away from Q when April reaches P.\n\n    distance_april_to_q = 1800\n    distance_april_met_baye_from_q = 800\n\n    # Distance Baye walked to the meeting point\n    distance_baye_to_meeting = distance_april_to_q + (distance_april_met_baye_from_q / 4)\n\n    # Remaining distance for Baye after the meeting point to reach Q\n    remaining_distance_baye_to_q = distance_april_to_q - (distance_baye_to_meeting - distance_april_to_q)\n\n    return remaining_distance_baye_to_q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n    total_chickens = solutions[hens] + solutions[roosters]\n\n    return total_chickens\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven = 7 * 12\n    total_for_eight = 8 * 11\n    eighth_number = total_for_eight - total_for_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # We have two sequences here we can calculate separately.\n    # First sequence: 1 to 8\n    # Second sequence: 7 to 1 (as it goes back down)\n    # Third sequence: 1 to 2 (the last part)\n\n    # Using the formula for the sum of an arithmetic sequence:\n    # sum = n/2 * (first_term + last_term)\n    sum_first_seq = 8/2 * (1 + 8)\n    sum_second_seq = 7/2 * (1 + 7)\n    sum_third_seq = 1 + 2\n\n    # Adding the sums of all three sequences\n    total_sum = sum_first_seq + sum_second_seq + sum_third_seq\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    # The repeating decimal is 538462\n    # Find the remainder when 2021 is divided by 6 to determine the position in the repeating sequence\n    remainder = 2021 % 6\n    \n    # Since Python uses 0-based indexing, we will have to subtract 1 from remainder\n    # If remainder is 0, it means the last number in the sequence is the 2021st digit\n    if remainder == 0:\n        remainder = 6\n    \n    # The 2021st digit is at the (remainder - 1)th position in the sequence 538462\n    repeating_sequence = \"538462\"\n    digit = repeating_sequence[remainder - 1]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # 2-digit palindrome\n    for i in range(1, 10):\n        count += 1  # Only one possibility for each 2-digit palindrome (11, 22, ..., 99)\n    \n    # 3-digit palindrome\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # 101, 111, ..., 191, 202, ..., 292, ..., 909, 919, ..., 999\n    \n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    return sequence[(100 - 1) % len(sequence)]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n    \n    # Let the original amount of money Bud had be x\n    # fraction_book * x + fraction_bag * x = total_cost\n    # Combine the fractions: (fraction_book + fraction_bag) * x = total_cost\n    # Solve for x:\n    x = total_cost / (fraction_book + fraction_bag)\n    \n    return x\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    # calculate first part of the equation\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34+ 0.45)\n    # calculate second part of the equation\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    # return the result of the subtraction\n    return part1 - part2\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    parcel_a, parcel_b, parcel_c = symbols('parcel_a parcel_b parcel_c')\n\n    equation1 = Eq(parcel_a, 5 * parcel_b)\n    equation2 = Eq(parcel_c, parcel_b - 75)\n    equation3 = Eq(parcel_a + parcel_b + parcel_c, 835)\n\n    solutions = solve((equation1, equation2, equation3), (parcel_a, parcel_b, parcel_c))\n\n    return solutions[parcel_a]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell could draw all the blue and white beads before getting the 5 green beads.\n    # Thus, the worst case scenario would be drawing all blue and white beads first.\n    worst_case = 5 + 6 # All blue and white beads\n    \n    # Now Darrell draws 5 green beads for sure.\n    green_beads_needed = 5\n    \n    # Total beads drawn in the worst case scenario to get 5 green beads.\n    total_beads_drawn = worst_case + green_beads_needed\n    \n    return total_beads_drawn\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_5_and_7 = 105 // (5*7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    \n    # Pages 1-9: 1 digit per page * 9 pages\n    total_digits += 1 * 9\n    \n    # Pages 10-99: 2 digits per page * 90 pages\n    total_digits += 2 * 90\n    \n    # Pages 100-215: 3 digits per page * (215-99) pages\n    total_digits += 3 * (215 - 99)\n    \n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if (num * 3) == (int(str(num) + '1') - 100000):\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    \n    # Count digits for pages 1-9\n    total_digits += 1 * 9\n    \n    # Count digits for pages 10-81\n    total_digits += 2 * (81 - 9)\n    \n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    first_to_fourth = 12\n    first_to_eighth = first_to_fourth * 2  # since eighth floor is twice the distance of fourth floor\n\n    return first_to_eighth\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    ways = 0\n    for x1 in range(7):\n        for x2 in range(7 - x1):\n            x3 = 6 - x1 - x2\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # initial ratio of birds to squirrels\n    birds_to_squirrels_ratio = 8 / 5\n\n    # assume initial number of birds and squirrels\n    # let number of birds (initial) = 8x and squirrels (initial) = 5x\n    birds_initial = 8\n    squirrels_initial = 5\n\n    # total number initially\n    total_initial = birds_initial + squirrels_initial\n\n    # squirrels increased by 20%\n    squirrels_later = squirrels_initial * 1.20\n\n    # number of birds that remained, assuming the total is unchanged\n    birds_later = total_initial - squirrels_later\n\n    # percentage of birds that flew away\n    birds_flew_away_percentage = ((birds_initial - birds_later) / birds_initial) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5*a - 2*b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # from March to July\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of strawberries each person picked\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    # Given equations\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Total days is calculated using the formula for the number of terms in an arithmetic sequence:\n    # last_term = first_term + (num_terms - 1) * difference\n    # Solving for num_terms gives:\n    # num_terms = ((last_term - first_term) / difference) + 1\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3  # Total volume of juice bought\n    juice_left = total_juice - 9  # Volume of juice left after drinking\n    containers_needed = -(-juice_left // 5)  # Number of containers needed (using ceiling division)\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_art = 0\n    for perm in permutations(range(1, 10), 4):\n        d, a, r, t = perm\n        if d + a + r + t == 11 and t + a + r + t == 12 and perm[2] + a + r + t == 13:\n            art = a + r + t\n            max_art = max(max_art, art)\n    return max_art\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    lower_bound = 5/9\n    upper_bound = 1\n    count = 0\n    for A in range(1, 21): # Since 9/9 = 1, we only consider integers less than 9\n        if lower_bound < 9/A < upper_bound:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Derive the pattern from the given examples\n    # 4◈7 = 4 * 7 - 4 - 7 = 28 - 4 - 7 = 17 (Not 21, thus the pattern seems wrong)\n    # 6◈22 = 6 * 22 - 6 - 22 = 132 - 6 - 22 = 104 (Not 20, thus the pattern seems wrong)\n    # 8◈30 = 8 * 30 - 8 - 30 = 240 - 8 - 30 = 202 (Not 26, thus the pattern seems wrong)\n    # From the above, we can see that the straight multiplications and subtractions do\n    # not match the example outcomes, so let's try a different approach.\n\n    # After analyzing the given examples we can understand the pattern such as:\n    # a◈b = (a - 1) * (b // a)\n\n    # Now we use that pattern to calculate 9◈20:\n    a = 9\n    b = 20\n\n    return (a - 1) * (b // a)\n\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs = 35\n    cups_needed = total_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Total number of students\n    total_students = boys + girls\n\n    # The equation representing the given condition in the question\n    condition_equation = Eq((1/4) * boys, (2/5) * girls)\n\n    # The equation representing the total number of students\n    total_equation = Eq(total_students, 39)\n\n    # Solve the two equations simultaneously\n    solutions = solve((condition_equation, total_equation), (boys, girls))\n\n    # Calculate the difference (how many more boys than girls)\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_to_the_left_of_tanya = 3\n    members_to_the_right_of_tanya = 5\n    tanya = 1  # Tanya herself\n\n    total_members = members_to_the_left_of_tanya + tanya + members_to_the_right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import prevprime\n\n    n = 87878\n    largest_prime = prevprime(10000) \n\n    while n % largest_prime != 0:\n        largest_prime = prevprime(largest_prime)\n\n    return largest_prime\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time taken for each part of the race.\n    time_first_part = 280 / 7\n    time_middle_part = 400 / 5\n    time_final_part = (800 - 280 - 400) / 8\n\n    # Sum the times to get the total time.\n    total_time = time_first_part + time_middle_part + time_final_part\n     \n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load_per_van = 12\n    vans_needed = -(-total_weight // max_load_per_van)  # Ceiling division\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, patrick = symbols('daniel patrick')\n    \n    # Daniel gives away 24 stickers\n    daniel_final = daniel - 24\n    \n    # Patrick buys another 10 stickers\n    patrick_final = patrick + 10\n    \n    # Patrick has twice as many as Daniel finally\n    equation = Eq(patrick_final, 2 * daniel_final)\n    \n    # Initially, Daniel and Patrick had an equal number of stickers\n    solutions = solve((equation, Eq(daniel, patrick)), (daniel, patrick))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    dp = [0] * (5 + 1)\n    dp[0] = 1\n\n    for i in range(1, 5):\n        for j in range(i, 5 + 1):\n            dp[j] += dp[j - i]\n\n    return dp[5]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    \n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Whale is 82 metres below sea level\n    plane_height = 569  # Plane is 569 metres above sea level\n    \n    vertical_distance = plane_height - whale_depth  # Calculate the vertical distance\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum number of boys who are right-handed\n    max_right_handed_boys = total_pupils - girls\n    \n    # The smallest number of girls who are right-handed\n    # would arise when all the boys are right-handed\n    min_right_handed_girls = right_handed - max_right_handed_boys\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of fruits\n    total_fruits = symbols('total_fruits')\n    \n    # Fractions representing each type of fruit\n    fraction_apples = 2/3\n    fraction_bananas = 1/9\n    \n    # Equations based on the problem statement\n    lemons = total_fruits - (fraction_apples * total_fruits) - (fraction_bananas * total_fruits)\n    equation = Eq((fraction_apples * total_fruits) - lemons, 12)\n    \n    # Solve equations\n    solutions = solve(equation, total_fruits)\n    \n    # Calculate the number of lemons she bought\n    num_lemons = solutions[0] - (fraction_apples * solutions[0]) - (fraction_bananas * solutions[0])\n    return int(num_lemons)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum([(skirts_per_day * day) for day in range(1, 10)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    more_than_jenny = 5\n    qiqi_eats = jenny_eats + more_than_jenny\n    return qiqi_eats\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_living_over_20 = 0.6\n    prob_living_over_25_given_over_20 = 0.3 / prob_living_over_20\n\n    return prob_living_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # 5 taps take 2 minutes to fill a 1 litre jug.\n    taps = 5\n    time_for_1_litre = 2  # time in minutes\n\n    # The rate per tap per minute can be calculated as:\n    rate_per_tap = 1 / (taps * time_for_1_litre)  # litres per minute per tap\n\n    # Time to fill 500ml (0.5 litres) with one tap:\n    volume = 0.5  # in litres\n    time_for_500_ml = volume / rate_per_tap  # time in minutes\n\n    return time_for_500_ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # The difference between two numbers will be minimized if we arrange the digits\n    # such that the largest digit differences are in the lower place values.\n    # To minimize the difference, we place digits in decreasing order for one number,\n    # and in increasing order for the other number.\n    # For every pair of digits in the same place, the difference will be the same,\n    # so we can multiple the single place difference by the place value.\n\n    # Creating two numbers, smallest_num has ascending digits, largest_num has descending digits\n    smallest_num = int(''.join(map(str, range(1, 10))))\n    largest_num = int(''.join(map(str, range(9, 0, -1))))\n\n    # Calculating the difference\n    difference = largest_num - smallest_num\n\n    return difference\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference  # Sally's height is Ben's height plus the difference\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining_visitors = visitors - children\n    men = 1/2 * remaining_visitors\n\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n\n    for perm in permutations(digits, 6):\n        num1 = perm[0]*100 + perm[1]*10 + perm[2]\n        num2 = perm[3]*100 + perm[4]*10 + perm[5]\n        current_sum = num1 + num2\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    return 360 / (70 - 4 * 16)\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # millilitres in a 2 litre bottle\n    amount_drank = 350     # millilitres drank from the bottle\n\n    remaining_volume = initial_volume - amount_drank\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40 / 100\n    total = 3280\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the pattern:\n    # 1 (add 7) → 8 (multiply by 2) → 16 (add 7) → 23 (multiply by 2) → 46 (add 7) → 53 → ... \n\n    # Initialize variables for the pattern\n    last_number = 53\n    add = 7\n    multiply = 2\n\n    # Rule 1: add 7\n    next_number_rule1 = last_number + add\n\n    # Rule 2: multiply by 2\n    # Since the pattern is alternating and the last operation we can see is an addition,\n    # the next operation according to the pattern should be multiplication.\n    next_number_rule2 = next_number_rule1 * multiply\n\n    return next_number_rule2\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    equation1 = Eq(a + c, a + 18)\n    equation2 = Eq(b + c, b + 27)\n    equation3 = Eq(b, 2 * a)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    total_capacity = solutions[a] + solutions[b] + solutions[c]\n    return total_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    games = 20\n    pay_per_game = 500\n    goals_per_game = 2\n    pay_per_goal = 100\n\n    total_pay = games * pay_per_game\n    total_goals = games * goals_per_game\n    total_goal_pay = total_goals * pay_per_goal\n\n    total_earnings = total_pay + total_goal_pay\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_weight = 8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0: # Cannot have leading 0 in a number\n            continue\n        sum_1 = M*1000 + A*100 + T*10 + H\n        sum_2 = H*1000 + T*100 + A*10 + M\n        if sum_1 + sum_2 == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start_number, count = 1, 10\n    sequence_sum = sum(start_number + 2*i for i in range(count))\n    return sequence_sum\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let g be the amount of grass growing each day.\n    # Let h be the amount of grass a horse eats per day.\n    # Let s be the amount of grass a sheep eats per day.\n\n    # From the given problem, we have the following equations:\n    # 20h * 12 = g * 12\n    # 60s * 24 = g * 24\n    # h = 4s\n\n    # Therefore:\n    # g / h = 20 * 12 (The amount of grass to be eaten by one horse per day)\n    # g / s = 60 * 24 (The amount of grass to be eaten by one sheep per day)\n\n    # Replacing h = 4s into g / h:\n    # g / (4s) = 20 * 12\n    # g / s = 20 * 12 * 4\n    # So we equate both expressions for g / s:\n    # 20 * 12 * 4 = 60 * 24\n    # s = (20 * 12 * 4) / (60 * 24)\n\n    # Now we find how many days it will take for 12 horses and 88 sheep to eat all the grass:\n    # 12h + 88s = g * days\n    # 12 * 4s + 88s = (20 * 12 * 4) * days\n    # (12 * 4 + 88) * s = (20 * 12 * 4) * days\n    # days = ((12 * 4 + 88) * s) / (20 * 12 * 4 * s)\n    # days = (12 * 4 + 88) / (20 * 12 * 4)\n\n    days = (12 * 4 + 88) / (20 * 12 * 4)\n    return days\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    # Count all the numbers which have 77 in them.\n    for i in range(1, 10):\n        if i != 7:\n            count += 2  # for numbers like 770 and 077\n            \n    # Count all the numbers that have one 7 and are not covered above.\n    # There are nine options for each digit that isn't 7 (1-6, 8-9) \n    # and there are 2 digits in each number that can vary.\n    count += 9 * 9 * 2  # 9 options per digit, 3 positions for the 7, 2 non-seven digits\n    \n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n\n    cost_per_ball = total_cost / total_balls\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes, y be the number of $5 notes\n    # Cindy had a total of 55 pieces of notes\n    x, y = symbols('x y')\n    total_notes = Eq(x + y, 55)\n    \n    # She spent 1/3 of the number of $2 notes\n    spent_2 = x / 3\n    \n    # After spending, she received another 8 pieces of $5 notes\n    y_after = y + 8\n    \n    # The number of $5 notes she had was 3/7 of the remaining number of notes\n    remaining_notes = Eq(y_after, 3/7 * (x - spent_2 + y_after))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes, remaining_notes), (x, y))\n    \n    # Calculate the initial amount of money\n    initial_money = solutions[x] * 2 + solutions[y] * 5\n    return initial_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n\n    # Mr. Spencer can be arranged in 6 seats, considering him and his two children as a unit.\n    spencer_unit_positions = 4  # Because he needs to be between his children, he can only sit on 4 positions of the 6.\n\n    # His two children can be arranged around him in 2! ways.\n    children_arrangements = factorial(2)\n\n    # The remaining 3 people can be arranged in the remaining 3 seats in 3! ways.\n    other_people_arrangements = factorial(3)\n\n    # Multiplying the different arrangements to find the total number of possible arrangements.\n    total_arrangements = spencer_unit_positions * children_arrangements * other_people_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    a = 1.9\n    b = 1.99\n\n    ans = (a + b) / 2\n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    # Number of questions\n    total_questions = 6\n    # Marks awarded for a correct answer\n    correct_answer_mark = 5\n    # Marks deducted for a wrong answer\n    wrong_answer_mark = -2\n    \n    # Iterate over the possible number of correct answers (between 0 to 6)\n    for correct_answers in range(total_questions + 1):\n        # Calculate the number of incorrect answers\n        incorrect_answers = total_questions - correct_answers\n        # Calculate the score\n        score = (correct_answers * correct_answer_mark) + (incorrect_answers * wrong_answer_mark)\n        # Check if the calculated score equals the given score\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n    \n    # The product of A and B is 24, so we need to find all factor pairs of 24\n    factor_pairs_24 = [(i, 24//i) for i in range(1, 25) if 24 % i == 0]\n    \n    # The product of B and C is 52, so we need to find all factor pairs of 52\n    factor_pairs_52 = [(i, 52//i) for i in range(1, 53) if 52 % i == 0]\n    \n    min_A_plus_C = float('inf') # Start with infinity as the minimum value of A+C\n\n    # Now we need to find common factors for B\n    for A, B_1 in factor_pairs_24:\n        for B_2, C in factor_pairs_52:\n            if B_1 == B_2:  # B is common in both pairs\n                A_plus_C = A + C\n                min_A_plus_C = min(min_A_plus_C, A_plus_C)  # Find the smallest A+C\n                break  # No need to check other pairs once common B is found\n\n    return min_A_plus_C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time_taken = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Group A, B, C together (ABC)\n    # Group E and F together (EF)\n    # Other students are D, G, H\n    # Number of ways to arrange the group ABC is 3! because within the group they can stand in any order\n    ways_ABC = factorial(3)\n    # Number of ways to arrange the group EF is 2! because E and F can also stand in two different orders\n    ways_EF = factorial(2)\n    \n    # Treat ABC as one unit, EF as one unit, and D, G, H as individuals. There are 5 units to arrange.\n    ways_units = factorial(5)\n    \n    # Total ways to line up:\n    # - Arrange the 5 units in a line\n    # - Multiply by the ways to arrange within the group ABC\n    # - Multiply by the ways to arrange within the group EF\n    total_ways = ways_units * ways_ABC * ways_EF\n    \n    return total_ways\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18  # the result after dividing by 3 and adding 7\n    result_before_adding = result_after_operations - 7  # reverse the addition of 7\n    original_number = result_before_adding * 3  # reverse the division by 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The 20th odd number can be calculated by the formula (2n - 1) where n is the term number\n    n = 20\n    odd_number = 2 * n - 1\n    return odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols representing the original daily production and total scarfs\n    daily_production, total_scarfs = symbols('daily_production total_scarfs')\n\n    # Equations based on the problem\n    equation1 = Eq(daily_production * 6, total_scarfs)\n    equation2 = Eq((daily_production + 24) * (6 - 2), total_scarfs)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (daily_production, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    equation1 = Eq(sweets - 6 * students, -26)\n    equation2 = Eq(sweets - 5 * students, -5)\n\n    solution = solve((equation1, equation2), (sweets, students))\n\n    return solution[sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys/girls, 5/3)\n    equation2 = Eq((boys - 15)/girls, 5/6)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_pupils = solutions[boys] + solutions[girls]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # start from x1 + 1 to ensure x2 is different\n            for x3 in range(x2 + 1, 15):  # start from x2 + 1 to ensure x3 is different\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15 + 1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 to find its prime factors and their exponents\n    prime_factors = factorint(675)\n\n    # To make the product a perfect square, each prime factor's exponent,\n    # when combined with B's factors, must be even. Determine the missing exponents.\n    B_factors = {p: (2 - (exp % 2)) for p, exp in prime_factors.items()}\n\n    # Calculate the smallest possible B by multiplying its prime factors\n    # raised to the power of the needed exponents\n    B = 1\n    for prime, exp in B_factors.items():\n        B *= prime ** exp\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount = 1/3\n    original_price = sale_price / (1 - discount)\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Current age of Shelby\n    shelby_age_now = 65\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = shelby_age_now - 5\n    # Josh's age 5 years ago\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age\n    josh_age_now = josh_age_5_years_ago + 5\n    \n    return josh_age_now\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    cost_of_12_individual_cans = 12 * single_can_price_pence\n    savings = cost_of_12_individual_cans - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('123456', 4):\n        number = int(''.join(perm))\n        if 3267 <= number <= 5120:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    ans = total_amount / 4\n    return ans\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let x, y, z represent the weight of Adam, Ben and Carl respectively.\n    # We have the following equations based on the problem statement:\n    # x + y = 102 (Adam and Ben's total weight)\n    # y + z = 97 (Ben and Carl's total weight)\n    # x + z = 93 (Adam and Carl's total weight)\n    \n    # Add all three equations together:\n    # (x + y) + (y + z) + (x + z) = 102 + 97 + 93\n    # 2x + 2y + 2z = 292\n    # x + y + z = 292 / 2\n    # Therefore, the total weight of Adam, Ben and Carl is:\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the given problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # 1/Alan's rate + 1/Bob's rate = 1/combined rate\n    from sympy import symbols, Eq, solve\n\n    alan = symbols('alan')\n    bob_rate = 1/6\n    combined_rate = 1/4\n\n    # Setting up the equation based on the rates\n    equation = Eq(1/alan + bob_rate, combined_rate)\n    \n    # Solving for Alan's rate\n    alan_rate = solve(equation, alan)[0]\n\n    return alan_rate\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    # Compound Interest formula A = P (1 + r/n)^(nt)\n    # Here, n (number of times interest applied per time period) is 1 because it's compounded yearly\n    amount = principal * ((1 + rate/1) ** (1*time))\n\n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10024\n    num2 = 3968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(84, 108)\n    \n    return ans\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    total_weeks = 26\n    total_consumption = weekly_consumption * total_weeks\n\n    return total_consumption\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original score\n    x = symbols('x')\n    \n    # Equation: x - 30 = (x / 2) + 10\n    equation = Eq(x - 30, (x / 2) + 10)\n    \n    # Solve for x\n    original_score = solve(equation, x)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    votes_needed = (total_votes // 2) + 1 - peter_votes\n    return votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of money Alex and Nicholas have as 'x'\n    x = symbols('x')\n\n    # After spending, Alex has (x - 58) and Nicholas has (x - 13)\n    # According to the problem, Nicholas has 6 times the amount of money left as Alex's\n    equation = Eq((x - 13), 6 * (x - 58))\n    \n    # Solve for x\n    initial_amount = solve(equation, x)\n\n    # Return the total amount they had at first, which is 2 times their initial individual amount\n    return 2 * initial_amount[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6 * 6) - (8 * 6)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_of_week = {\n        'Monday': '0001',\n        'Tuesday': '0002',\n        'Wednesday': '0003',\n        'Thursday': '0004',\n        'Friday': '0005',\n        'Saturday': '0006',\n        'Sunday': '0007'\n    }\n\n    current_day_index = days_of_week['Monday']\n    days_later = 28\n    new_day_index = (int(current_day_index) + days_later % 7) % 7\n\n    # Get the key (day name) from the value (number string representation)\n    for day, index in days_of_week.items():\n        if index == str(new_day_index).zfill(4):\n            return index\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    return 12.35 + 8.65 + 9.8 - 2.8\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 6 * 0.001\n    return position_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length / interval) - 1\n\n    return int(num_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, rulers = symbols('pencils rulers')\n    \n    equation1 = Eq(pencils, rulers + 10)\n    equation2 = Eq(pencils + rulers, 52)\n\n    solutions = solve((equation1, equation2), (pencils, rulers))\n\n    return solutions[rulers]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    dataset = [11, 13, 17, 12]\n    mean_value = 11\n    total_sum = mean_value * (len(dataset) + 1)  # Including the missing value 'x'\n    x = total_sum - sum(dataset)\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_7_value = 7 * 10**3  # The value of the first 7 at ten-thousands place\n    second_7_value = 7 * 10  # The value of the second 7 at tens place\n    \n    difference = first_7_value - second_7_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the costs of the dresses\n    blue, red, yellow = symbols('blue red yellow')\n    \n    # Equation 1: blue = 2 * red\n    equation1 = Eq(blue, 2 * red)\n    \n    # Equation 2: yellow = blue + 2.40\n    equation2 = Eq(yellow, blue + 2.40)\n    \n    # Equation 3: blue + red + yellow = 65.40\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n    \n    # Return the cost of the blue dress\n    return float(solutions[blue])\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Since we want to ensure 4 marbles of the same color,\n    # we take the worst-case scenario:\n    # - We take 3 red, 3 yellow, and 3 blue marbles (3 of each).\n    # - The next marble we take, no matter the color, will guarantee 4 of the same color.\n    # Therefore, the total number we need to take out is:\n    # 3 (red) + 3 (yellow) + 3 (blue) + 1 (any color to ensure 4 of the same color)\n    marbles_needed = 3 + 3 + 3 + 1  # Worst-case scenario plus one more marble\n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_to_girls_ratio = 5 / 6\n    boys = 200\n    girls = boys / boys_to_girls_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    result = 15 / 100 * 29\n    return result\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the concentration as a variable\n    concentration = symbols('concentration')\n\n    # Calculate the concentration of solution in container A after adding the 10 grams of solution\n    concentration_a = 10 * concentration / 40\n\n    # Calculate the concentration of solution in container B after transferring from A to B\n    concentration_b = (10 * concentration_a + 30 * 0) / 50\n\n    # Calculate the concentration of solution in container C after transferring from B to C\n    concentration_c = (10 * concentration_b + 40 * 0) / 60\n\n    # Set up the equation based on the final concentration in container C\n    equation = Eq(concentration_c, 0.005)\n\n    # Solve for the original concentration\n    original_concentration = solve(equation, concentration)\n\n    return original_concentration[0]\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    count = 0\n    for i in range(2, 101, 2):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n    \n    total = fraction + percentage + decimal\n    \n    return total\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # Factorize 2016 and 1377\n    factors_2016 = [2, 2, 2, 2, 2, 3, 3, 7]  # 2^5 * 3^2 * 7\n    factors_1377 = [3, 3, 3, 17]  # 3^3 * 17\n    \n    # Since one year ago the product of their ages was 1377,\n    # and 1377 is a factor of 2016, it means that two of the cousins \n    # did not change their age (since their ages are integers), \n    # and the third cousin (the one that got older) had his/her\n    # age as a factor that, when incremented by 1, gives the \n    # extra factors from 2016 not present in 1377.\n\n    # The factors in 2016 that are not in 1377 are 2^5*7\n    # That means the cousin that got older had age factors 2^5 = 32 (two years ago 31)\n    # Removing the factors of the cousin that got older from 2016's factors, we have the product of the other two cousins\n\n    factors_remaining = factors_2016[:-5]  # Remove the 2^5 factors\n    product_remaining = 1\n    for factor in factors_remaining:\n        product_remaining *= factor\n        \n    # Calculate the product of the ages two years ago\n    product_two_years_ago = product_remaining * (31)\n    \n    return product_two_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    # Consider the two people who want to stand next to each other as a single unit.\n    # Now we have 4 units to arrange (the pair + 3 individuals).\n    units = 4\n    \n    # There are 4! (factorial) ways to arrange these 4 units.\n    from math import factorial\n    arrangements_of_units = factorial(units)\n    \n    # The pair can stand in 2 different ways (person A first or person B first).\n    arrangements_of_pair = 2\n    \n    # The total arrangements is the product of the two possibilities.\n    total_arrangements = arrangements_of_units * arrangements_of_pair\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    # total boxes sold in the first three days\n    first_three_days_total = 33\n    # average boxes sold in the last four days\n    last_four_days_average = 18\n    # total boxes sold in the last four days\n    last_four_days_total = last_four_days_average * 4\n    # total boxes sold in the whole week\n    total_weekly_boxes = first_three_days_total + last_four_days_total\n    # calculate the average boxes sold each day over the week\n    daily_average = total_weekly_boxes / 7\n    \n    return daily_average\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # mg\n    nickel_percent_metal1 = 40  # %\n    \n    weight_metal2 = 13  # mg\n    nickel_percent_metal2 = 60  # %\n    \n    nickel_metal1 = (nickel_percent_metal1 / 100) * weight_metal1\n    nickel_metal2 = (nickel_percent_metal2 / 100) * weight_metal2\n    \n    total_nickel = nickel_metal1 + nickel_metal2\n    total_weight = weight_metal1 + weight_metal2\n    \n    new_nickel_percent = (total_nickel / total_weight) * 100\n    \n    return new_nickel_percent\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    number1 = -3\n    number2 = 8\n    \n    halfway_number = (number1 + number2) / 2\n    \n    return halfway_number\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Therefore, with 8 players, each player will have 7 matches.\n    # Since everyone scores a different number of wins and there are no ties,\n    # wins must be distributed from 0 to 7 (because 8 players mean 8 different scores for number of wins).\n    # The champion is the one with the highest number of wins. \n    # Because 0 to 7 is eight distinct scores and the highest is 7, the champion has 7 wins.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while n * (n + 1) // 2 < 3405:\n        n += 1\n    n -= 1\n    correct_total = n * (n + 1) // 2\n    difference = 3405 - correct_total\n    return difference\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given the sum of first 6 terms\n    sum_6 = 64\n    # Given the sum of first 12 terms\n    sum_12 = 156\n    # The difference in sum of 6 terms (from 7th to 12th)\n    diff = sum_12 - sum_6\n    # Sum of first 18 terms = sum_12 + diff (from 13th to 18th)\n    sum_18 = sum_12 + diff\n    return sum_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let c be the total number of chickens,\n    # and p be the number of pens initially.\n    p = 24\n    p_new = p + 6  # Number of pens after building 6 more.\n\n    # Let's denote the initial number of chickens in each pen as n,\n    # then the number of chickens in each pen after building new ones as n-6.\n    # We have:\n    # c = n * p = (n - 6) * p_new\n\n    # Turning the equation around to solve for c gives us:\n    # c = n * p\n    # c = (n - 6) * (p + 6)\n    # n * p = (n - 6) * (p + 6)\n    # np = np + 6n - 6p - 36\n    # 0 = 6n - 6p - 36\n    # 6p = 6n - 36\n    # p = n - 6\n\n    # We just forget c in our equations! Let's get it back by involving it.\n    # Now we can express n in terms of p:\n    # n = p + 6\n\n    # Substitute the value of n back into the c equation:\n    # c = n * p\n    # c = (p + 6) * p\n\n    # Since p is known, we can now calculate c:\n    c = (p + 6) * p\n\n    return c\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    # Initialize the number of possible values to zero\n    num_possible_values = 0\n    remainder = 3\n\n    # Loop through possible divisors since divisor, dividend, and quotient\n    # must be positive and sum up to 37 (40 - 3 for the remainder)\n    for divisor in range(1, 37):\n        for quotient in range(1, 37 - divisor):\n            # Determine the dividend using the formula:\n            # Dividend = Divisor * Quotient + Remainder\n            dividend = divisor * quotient + remainder\n            \n            # Ensure the total adds up to 40\n            if dividend + divisor + quotient + remainder == 40:\n                num_possible_values += 1\n\n    return num_possible_values\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_members_math = 146 + 94\n    history_to_math_ratio = 7 / 8\n    total_members_history = total_members_math * history_to_math_ratio\n    return int(total_members_history)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Convert the Zog numbers to Earth numbers\n    zog_number_1 = int(str(729)[::-1])\n    zog_number_2 = int(str(26)[::-1])\n    \n    # Subtract the Earth numbers\n    earth_result = zog_number_2 - zog_number_1\n    \n    # Convert the result back to a Zog number\n    zog_result = int(str(earth_result)[::-1])\n    \n    return zog_result\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n    \n    # Calculate the greatest common divisor of 45 and 60\n    ans = gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160  # Train's length in meters\n    train_speed = 20    # Train's speed in meters per second\n    time_to_cross = 30  # Time in seconds to pass completely through the bridge\n\n    # To find the length of the bridge,\n    # we calculate the total distance the train covers while passing the bridge,\n    # which is the distance covered in `time_to_cross` seconds.\n    total_distance = train_speed * time_to_cross\n\n    # The length of the bridge is the total distance minus the train's length.\n    bridge_length = total_distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging = 30 minutes = 0.5 hours\n    jogging_time = 0.5\n    jogging_speed = 9  # km per hour\n    distance_jogging = jogging_speed * jogging_time\n\n    # Time spent walking = 1 hour (from 7:00 a.m. to 8:00 a.m.)\n    walking_time = 1\n    walking_speed = 7.5  # km per hour\n    distance_walking = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4, because it can't be 0)\n    # There are 3 choices for the second digit (0, 3, or 4)\n    # There are 3 choices for the third digit (0, 3, or 4)\n    # Since each choice is independent, we can just multiply the number of choices together\n    count = 2 * 3 * 3\n    return count\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the number of games lost\n    games_lost = symbols('games_lost')\n\n    # Equation representing the total games played and the win/loss ratio\n    equation = Eq(2 * games_lost + games_lost, 63)\n\n    # Solve the equation\n    solutions = solve(equation, games_lost)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    ans = common_factor * (55 - 44)\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n    \n    # 65% of the animals were cows, so the number of goats was 35%\n    # c + g = total number of animals initially\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n    \n    # Adding 240 more cows and goats\n    # 20% increase in cows and doubling the goats\n    equation3 = Eq(c + 240 * 0.80, 0.85 * (c + g + 240)) # 65% + 20% = 85%\n    equation4 = Eq(g * 2, 0.15 * (c + g + 240))          # 100% - 85% = 15%\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    def permutations_count(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # There are 3 girls wanting to stand together, consider them as a unit.\n    # So, we have 3 boys + 3 teachers + 1 unit of girls = 7 units.\n    # First, calculate the permutations of these 7 units.\n    total_permutations = permutations_count(7, 7)\n    \n    # The girls can be arranged among themselves in 3! ways.\n    girls_permutations = factorial(3)\n    \n    # Calculate placements for boys such that no two stand next to each other.\n    # There are 8 spaces to put the 3 boys (|TGTGTGTG| various positions between or on the sides).\n    # We choose 3 of these spaces to put the boys.\n    spaces_for_boys = permutations_count(8, 3)\n    \n    # Multiply all the permutations together to get the total.\n    total_ways = total_permutations * girls_permutations * spaces_for_boys\n    \n    return total_ways\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is (sqrt(3)/4) * side^2\n    from math import sqrt\n    \n    # Find the areas of Triangle X and Triangle Y\n    area_triangle_x = (sqrt(3)/4) * (3**2)\n    area_triangle_y = (sqrt(3)/4) * (9**2)\n    \n    # Calculate how many times Triangle X fits into Triangle Y\n    # This is the ratio of their areas\n    times_fit = area_triangle_y / area_triangle_x\n    \n    return int(times_fit)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_spent = Eq(5*x*12 + 3*x*5, 120)\n\n    value_of_x = solve(total_spent, x)\n\n    return value_of_x[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_selected = 2\n\n    ans = comb(num_students, num_selected)\n\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_number = 8 * 9 * 10\n    smaller_number = 1 * 2 * 3\n    difference = larger_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    \n    total_roses = bouquets * roses_per_bouquet\n    \n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # 1 soup + option not to choose any\n    desserts = 3  # 2 desserts + option not to choose any\n\n    combinations = appetisers * main_courses * soups * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem for the system of congruences:\n    # x ≡ -3 (mod 8)\n    # x ≡ -1 (mod 9)\n    # and also considering the condition that x is between 100 and 200 \n\n    congruences = ((-3, 8), (-1, 9))\n    x, _ = solve_congruence(congruences)\n\n    while x < 100:\n        x += 8 * 9  # LCM of 8 and 9 is the step after using CRT\n\n    return x\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of red balls is known\n    red_balls = 4\n\n    # Define a symbol for unknown number of blue balls\n    blue_balls = symbols('blue_balls')\n\n    # Total number of balls\n    total_balls = red_balls + blue_balls\n\n    # Probability of first ball being red\n    prob_first_red = red_balls / total_balls\n\n    # Probability of second ball being red without replacement\n    prob_second_red = (red_balls - 1) / (total_balls - 1)\n\n    # The combined probability of both events happening\n    combined_prob = prob_first_red * prob_second_red\n\n    # The equation corresponding to the given probability of 2/7\n    equation = Eq(combined_prob, 2/7)\n\n    # Solve for the number of blue balls\n    solution = solve(equation, blue_balls)\n\n    # Return the number of blue balls\n    return solution[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    last_term = 41\n    difference = 5\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8  # One dog weighs as much as 8 rabbits\n    rabbit_to_chicken = 2  # One rabbit weighs as much as 2 chickens\n\n    # Calculate how many chickens weigh as much as one dog\n    chickens_for_dog = dog_to_rabbit * rabbit_to_chicken\n\n    return chickens_for_dog\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    # The product 2^27 can be achieved with nine 2's and one 4 (since 4 = 2^2),\n    # or seven 2's and three 8's (since 8 = 2^3).\n    # Thus, there are two different sets of digits that satisfy the product condition: \n    # (2, 2, 2,..., 4) with eight 2's and one 4, and (2, 2,..., 8, 8, 8) with seven 2's and three 8's.\n\n    # Function to calculate number of distinct permutations\n    def permutations(n, counts):\n        # n! / (n1! * n2! * ... * nk!)\n        perm = factorial(n)\n        for count in counts:\n            perm //= factorial(count)\n        return perm\n\n    # two cases: \n    # Case 1: eight 2's and one 4\n    case1_2s = 8 # eight 2's\n    case1_4s = 1 # one 4\n    # Case 2: seven 2's and three 8's\n    case2_2s = 7 # seven 2's\n    case2_8s = 3 # three 8's\n    \n    # Calculate the permutations for each case\n    permutations_case1 = permutations(10, [case1_2s, case1_4s])\n    permutations_case2 = permutations(10, [case2_2s, case2_8s])\n    \n    # Sum the permutations of both cases\n    total_permutations = permutations_case1 + permutations_case2\n    \n    return total_permutations\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    remaining_slices = 4\n    slices_given_away = 2\n    fraction_eaten = 3/5\n\n    # Total remaining slices after giving away and eating\n    total_remaining = remaining_slices + slices_given_away\n\n    # Total slices represents 100%, so the remaining 40% is equal to total_remaining\n    # We can find the original total slices by dividing total_remaining by 40% (0.4)\n    total_slices = total_remaining / (1 - fraction_eaten)\n\n    return int(total_slices)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the amount of work Mike does in one hour\n    # Let d be the amount of work Danny does in one hour\n    m, d = symbols('m d')\n    \n    # If they work together, they finish in 10 hours\n    equation1 = Eq(10 * (m + d), 1)\n    \n    # If Mike types for 8 hours and then Danny types for 13 hours, they finish the job\n    equation2 = Eq(8 * m + 13 * d, 1)\n    \n    # Solve the system of equations for m and d\n    solutions = solve((equation1, equation2), (m, d))\n    \n    # The time it takes for Danny to finish the job by himself is the inverse of his work rate\n    time_danny = 1 / solutions[d]\n\n    return time_danny\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    return 51+50-45+40-35+30-25+20-15\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    position1_value = 3 * 10**5  # The place value of the first 3 (hundreds of thousands)\n    position2_value = 3 * 10**2  # The place value of the second 3 (hundreds)\n    return position1_value - position2_value\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    \n    min_pencils = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # Define the new operation according to the given definition\n    def new_operation(a, b):\n        return sum(a + i for i in range(b + 1))\n    \n    # Since we know the result of the operation and one of the arguments,\n    # we can set up an equation and solve for m\n    b = 10\n    result = 66\n    \n    # Using a simple loop to check every possible value of m\n    for m in range(result):\n        if new_operation(m, b) == result:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n\n    # Number of chess per side (subtract 1 chess because corners are shared)\n    chess_per_side = (side_length // interval) - 1\n\n    # Add the corner chess (which is 4)\n    total_chess = (chess_per_side * 4) + 4\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "from math import comb\n\ndef solution():\n    # We will consider different cases of how many digits can appear 5 times or more\n    # 100 squares can have at least 1 and at most 20 different digits that appear 5 times or more.\n    min_red_squares = float('inf')\n    \n    for d in range(1, 21):  # d is the number of different digits appearing at least 5 times each\n        # Every digit that appears at least 5 times will be counted as 5 red squares minimum\n        red_squares = d * 5\n        remaining_squares = 100 - red_squares\n        \n        # Each of the remaining squares can be filled with any digit other than the d digits\n        # Hence, we are left with 10 - d choices for each of the remaining squares\n        if 10 - d <= 0:\n            # There are not enough digits left to avoid any additional red squares \n            # So, all remaining squares will also be red\n            red_squares = 100\n        else:\n            # We calculate combinations for the remaining squares to find the maximum number of squares\n            # that can be filled without hitting the 5 occurrences, thus remaining non-red\n            combs = comb(remaining_squares + 10 - d - 1, 10 - d - 1)\n            \n            # We divide by (10 - d), because each position that isn't already painted red\n            # can have (10 - d) different values that aren't repeated 5 times yet.\n            non_red_squares = combs // (10 - d)\n            \n            # Now we calculate the actual amount of red squares by subtracting the non-red from total\n            red_squares += remaining_squares - non_red_squares\n        \n        # Update the minimum number of red squares if the current calculation is less than the previous minimum\n        min_red_squares = min(min_red_squares, red_squares)\n    \n    return min_red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4\n    \n    n = 1\n    term = first_term\n    while term > 0:\n        n += 1\n        term += difference\n    n -= 1   # Subtract 1 to discard the term that went negative\n\n    return n\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(100):\n        num = int(f\"{i:02d}\" * 2)\n        if int(num ** 0.5) ** 2 == num:\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    zeros_needed = 28\n    powers_of_five = []\n\n    # Calculate powers of 5 until they exceed zeros_needed\n    power = 5\n    while power <= zeros_needed:\n        powers_of_five.append(power)\n        power *= 5\n\n    # Since every 5*2 gives one zero, we count the number of fives in the prime factorization\n    n = 1\n    num_zeros = 0\n    while num_zeros < zeros_needed:\n        n += 1\n        temp_n = n\n        for power in powers_of_five:\n            while temp_n % power == 0:\n                num_zeros += 1\n                temp_n /= power\n                \n    return n - 1  # we subtract 1 because we increment n before checking the condition\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = 3 * m - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # Both are moving towards each other, so their relative speed is the sum of their speeds\n    relative_speed = tim_speed + bob_speed\n\n    # Distance covered by both till they are 130 km apart\n    distance_covered = initial_distance - remaining_distance\n\n    # Time taken to cover that distance at their relative speed\n    time_taken = distance_covered / relative_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    daily_progress = 3\n    nightly_slip = 1\n    burrow_depth = 11\n    net_progress_per_day = daily_progress - nightly_slip\n    days_taken = 0\n    total_climbed = 0\n\n    while total_climbed < burrow_depth:\n        days_taken += 1\n        total_climbed += daily_progress\n        if total_climbed >= burrow_depth:\n            break\n        total_climbed -= nightly_slip\n\n    return days_taken\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    known_numbers_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent = 2.89\n    received = 4 / 5\n\n    remaining = initial_amount - spent + received\n\n    return remaining\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    ans = lcm(akon_cycle, ben_cycle, cris_cycle)\n\n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                consecutive = sorted(map(int, perm))\n                if consecutive == list(range(consecutive[0], consecutive[0] + 4)):\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    # The repeating decimal sequence is 8354\n    # Every 4 digits sum up to: 8 + 3 + 5 + 4 = 20\n    repeating_sequence = [8, 3, 5, 4]\n    total_sum = 0\n    \n    # Calculate the full repetitions of the sequence\n    full_repetitions = 84 // 4\n    total_sum += sum(repeating_sequence) * full_repetitions\n\n    # Calculate the sum of remaining digits\n    remaining_digits = 84 % 4\n    total_sum += sum(repeating_sequence[:remaining_digits])\n    \n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    total_distance = eddie + jenny + jason\n    num_people = 3\n\n    average_distance = total_distance / num_people\n\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # First 6 strikes\n    first_strikes = 6\n    # Time in seconds for the first 6 strikes\n    time_for_first_strikes = 43\n    # Time in seconds for the sound of each strike\n    sound_duration = 3\n\n    # Calculate the interval between each strike\n    total_sound_time = sound_duration * first_strikes\n    total_silence_time = time_for_first_strikes - total_sound_time\n    interval_between_strikes = total_silence_time / (first_strikes - 1)\n\n    # Now calculate time for 12 strikes\n    strikes = 12\n    # Total time for sound alone for 12 strikes\n    total_sound_time_12 = sound_duration * strikes\n    # Total silence time for 11 intervals between 12 strikes\n    total_silence_time_12 = interval_between_strikes * (strikes - 1)\n    # Total time is the sum of sound time and silence time\n    total_time_12_strikes = total_sound_time_12 + total_silence_time_12\n\n    return int(total_time_12_strikes)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # Each kid must get at least one pen, so we give one pen to each kid first\n    remaining_pens = 20 - 6\n\n    # Now we have to distribute the remaining 14 pens to 6 kids\n    # This is a problem of distributing indistinguishable items into distinguishable bins (stars and bars method)\n    # The number of ways to do this is comb(n+k-1, k-1) where n is the remaining items, k is the bins\n    # In this case, k = 6 (bins/kids) and n = 14 (remaining pens)\n    ways = comb(remaining_pens + 6 - 1, 6 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m_squared = 5  # Initialize m^2 to a value we know is too small\n\n    # Since adding 18 students results in a perfect square,\n    # we start checking from 19 (as 18 students would still leave us 1 short of a square)\n    while True:\n        m_squared += 1\n        if ((m_squared + 18)**0.5).is_integer():\n            break\n\n    # Calculate original number of students\n    ans = m_squared - 5\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n\n    # Assuming that all people build at the same rate,\n    # work done is directly proportional to time and number of people.\n    # Work = People * Time\n    # Work is constant for both cases (since it's the same bridge), so:\n    # People_initial * Time_initial = People_required * Time_required\n    people_required = people_initial * time_initial / time_required\n\n    return int(people_required)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # time in minutes to finish one quiz\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # converting minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total number of three-digit numbers\n    without_zero = 9 * 9 * 9  # Total number of three-digit numbers without any zeros\n    with_at_least_one_zero = total_three_digit_numbers - without_zero  # Subtracting the numbers which don't contain zero\n    return with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n    # Kinetic energy formula: KE = 0.5 * mass * speed^2\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1 and number % 4 == 1 and number % 5 == 1 and number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    n = 7  # The 7th term\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)*d\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 300:\n        return num\n        num += 5 * 6 * 7\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    greatest_odd = 9  # greatest odd number for the ones place\n    for hundreds in range(1, 10):  # hundreds place must be non-zero for a 4-digit number\n        for tens in range(10):  # tens place can be zero\n            if hundreds != tens and (hundreds + tens) == 13 and hundreds != greatest_odd and tens != greatest_odd:\n                for thousands in range(1, 10):  # thousands place must be non-zero for a 4-digit number\n                    if len({thousands, hundreds, tens, greatest_odd}) == 4:  # all digits must be different\n                        # Form the smallest 4-digit number\n                        return int(str(thousands) + str(hundreds) + str(tens) + str(greatest_odd))\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let the distance Jerry drives be d miles.\n    # Time is the same for both Jerry and Kevin when they meet.\n    # d / jerry_speed = (225 - d) / (1.5 * jerry_speed)\n    # Simplifying the equation: d = (225 - d) / 1.5\n    # Therefore: 1.5 * d = 225 - d\n    # Then: 2.5 * d = 225\n    d = 225 / 2.5\n    return d\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # The number of pieces is one more than the number of cuts\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n    space_for_pictures = total_width - 2 * picture_width\n    spacing = space_for_pictures / (number_of_pictures - 1)\n    distance_from_center = (total_width / 2) - ((number_of_pictures / 2) - 1) * spacing - (picture_width / 2)\n    return distance_from_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height_fraction = 0.75\n    target_fraction = 0.25\n    current_height = 1\n    bounces = 0\n\n    while current_height >= target_fraction:\n        current_height *= height_fraction\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    # Let the uncle's current age be 'x'\n    # When Doris reaches her uncle's current age, which would be in 'x - 10' years,\n    # her uncle will be 40 years old.\n    # So, her uncle's current age plus 'x - 10' years should equal 40.\n\n    # Set up the equation:\n    # x + (x - 10) = 40\n    # 2 * x = 50\n    # x = 25\n\n    # Uncle's current age is therefore 25 years old.\n    uncle_age = 25\n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100  # Converting percentage to decimal\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each girl has\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    # Equation 1: Amanda has 4 times as many stickers as Belinda\n    equation1 = Eq(amanda, 4 * belinda)\n\n    # Equation 2: Lisa has 11 less stickers than Amanda\n    equation2 = Eq(lisa, amanda - 11)\n\n    # Equation 3: The 3 girls have 43 stickers in total\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's initial reasoning is based on the assumption that the unknown number added to 8 \n    # would result in 15. Therefore, we will start by testing this assumption.\n    sum_result = 8 + 7\n\n    # Now we check if this sum equals to 15 as Timothy suggested.\n    if sum_result == 15:\n        # If the sum is equal to 15, then Timothy's answer is correct.\n        return 7\n    else:\n        # If the sum is not 15, Timothy's answer is incorrect and we need to find the right number.\n        correct_answer = 15 - 8\n        return correct_answer\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    start = 5 + 1  # The start point is the first number after 5\n    end = 20 - 1   # The end point is the last number before 20\n    ans = end - start + 1  # Calculate the range inclusive of the end points\n    \n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the original amount of money Jerry had\n    x = symbols('x')\n\n    # After buying the watch, he spent 2/7 of the remaining money on a shirt\n    remaining_after_watch = x - 200\n    spent_on_shirt = (2/7) * remaining_after_watch\n\n    # After buying the shirt, he had 1/3 of the original amount left\n    remaining_after_shirt = remaining_after_watch - spent_on_shirt\n    equation = Eq(remaining_after_shirt, x / 3)\n\n    # Solve the equation to find x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Consider Tom and Harry as one unit and then arrange the remaining 5 units + TH unit.\n    # Ronda must be at the furthest right, so we have 5 units to arrange in the remaining 6 positions.\n    arrangements_without_Ronda = factorial(6)  \n\n    # Now, Tom and Harry can switch places within their unit, so multiply by 2.\n    total_arrangements = arrangements_without_Ronda * 2\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n    \n    amount_after_three_years = initial_investment * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n    \n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    lowest_possible_price = int((125000 - 50) / 100) * 100 + 1\n    is_ryna_correct = lowest_possible_price == 125001\n    return (is_ryna_correct, lowest_possible_price)\n    \nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between cities P and Q\n    # Let t be the normal time taken to travel distance d at regular speed\n    # Let s be the usual speed of the car\n\n    d, t, s = symbols('d t s')\n\n    # Equation 1: d = s * t\n    equation1 = Eq(d, s * t)\n\n    # Equation 2: d = s * 1.2 * (t - 1)\n    # The car travels at 20% increased speed and takes 1 hour less\n    equation2 = Eq(d, 1.2 * s * (t - 1))\n\n    # Equation 3: d = 200 + (s * 1.25) * (t - 200/s - 1/5)\n    # First 200 km at usual speed, then remaining distance at 25% increased speed\n    equation3 = Eq(d, 200 + 1.25 * s * (t - 200/s - 1/5))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    # Only possible physical solution for distance d\n    distance_solution = [sol[d] for sol in solutions if sol[d] > 0 and sol[s] > 0 and sol[t] > 0]\n    return distance_solution[0]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 4 * 89  # Total score from 4 tests\n    desired_average = 95\n    \n    num_tests = 4  # He already took 4 tests\n    \n    while True:\n        num_tests += 1  # considering one more test\n        new_total = current_total + 100  # maximum score for the new test\n        new_average = new_total / num_tests\n        \n        if new_average >= desired_average:\n            break\n        else:\n            current_total = new_total\n    \n    return num_tests - 4  # Subtract the initial 4 tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 540 / 9\n    time_middle_segment = 300 / 6\n    time_last_segment = (1000 - 540 - 300) / 10\n\n    # Sum the time for all segments to get the total time\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    difference_in_age = 40 - doris_age\n    uncle_age = doris_age + difference_in_age\n    \n    return uncle_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    lia_extra = 1\n    liz_extra = 1\n    total_performances = class_performances + lia_extra + liz_extra\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed of the train in m/s\n\n    # time = total distance to cover (train length + bridge length) / speed\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    # Original ratio of sheep to cows\n    equation1 = Eq(sheep, 5/7 * cows)\n\n    # After adding and removing animals\n    equation2 = Eq(cows - 7, 3/4 * (sheep + 21))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"08:30\", time_format)\n    end_time = datetime.strptime(\"09:25\", time_format)\n\n    time_difference = end_time - start_time\n    ans = time_difference.seconds // 60\n\n    return ans\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 1 / 6\n    b_efficiency = a_efficiency / 2\n    combined_efficiency = a_efficiency + b_efficiency\n    days_to_complete = 1 / combined_efficiency\n    return days_to_complete\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum_ages = 22\n    sum_ages_target = 30\n    years_until_target = sum_ages_target - current_sum_ages\n    return years_until_target\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cost of a packet of Haribo in cents\n    mamee_cost = haribo_cost - 30  # cost of a packet of Mamee is 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # big packet of jelly costs 6 times as much as Mamee\n\n    # Convert the cost of the big packet of jelly to dollars\n    big_jelly_cost_dollars = big_jelly_cost / 100\n\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the total number of candies\n    total_candies = symbols('total_candies')\n\n    # Create equations based on the problem statement\n    anna_share = (3/8) * total_candies\n    belle_share = (1/4) * total_candies\n    cathy_dawn_share = total_candies - anna_share - belle_share\n    \n    equation = Eq(anna_share + belle_share, cathy_dawn_share + 90)\n\n    # Solve the equation for the total number of candies\n    solutions = solve(equation, total_candies)\n\n    # Since there's only one solution, return that solution\n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32 / 36\n    return int(numerator)\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    # Joel removes 2 less than half; add 2 back and double to find the number before Joel's turn\n    before_joel = (remaining_plants + 2) * 2\n    # Valerie removes 3 less than half; add 3 back and double to find the number before Valerie's turn\n    before_valerie = (before_joel + 3) * 2\n    # Ethan removes 1 less than half; add 1 back and double to find the original number of plants\n    original_plants = (before_valerie + 1) * 2\n\n    return original_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fish_balls = symbols('initial_fish_balls')\n    \n    # Mr Tan sold 3/4 in the morning, so he has 1/4 left\n    after_morning_sales = initial_fish_balls * (1 - 3/4)\n    \n    # Mr Tan sold 1/3 of the remaining in the afternoon\n    after_afternoon_sales = after_morning_sales * (1 - 1/3)\n    \n    # He made another 506 fish balls and had twice the number he made at first\n    total_after_adding = after_afternoon_sales + 506\n    equation = Eq(total_after_adding, 2 * initial_fish_balls)\n    \n    # Solve the equation to find the initial number of fish balls\n    solution = solve(equation, initial_fish_balls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for each type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Setting up equations based on the problem\n    equation1 = Eq(chocolate - vanilla, 72)                 # chocolate is 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)                 # blueberry is 36 less than vanilla\n    equation3 = Eq((1 - 1/6) * chocolate + \n                   (1 - 2/3) * vanilla + \n                   (1 - 7/9) * blueberry, 427)              # Sales condition\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Amount of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8)*92 + 7*0.625 + 62.5/100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n    total_ratio = ratio_boys + ratio_girls\n    girls = (ratio_girls * boys) // ratio_boys\n    total_students = boys + girls\n    \n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n\n    price_two_cheese_cakes = 2 * cheese_cake\n\n    return price_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Make sure the solution is between 400 and 500\n    while ans < 400:\n        ans += 3 * 5 * 7\n\n    return ans if ans < 500 else None\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    num = 36\n    factors = set()\n    \n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_pigs = 8\n    total_green_apples = green_apples_per_pig * total_pigs\n    total_red_apples = red_apples_per_two_pigs * total_pigs\n\n    total_apples = total_green_apples + total_red_apples\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    death_rate = 1/4\n    alive_seeds = total_seeds * (1 - death_rate)\n    return int(alive_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    # Let s be the price of one shirt and p be the price of one pair of pants.\n    from sympy import symbols, Eq, solve\n\n    s, p = symbols('s p')\n    # Two equations based on the problem statement\n    equation1 = Eq(3 * s + 2 * p, 81)\n    equation2 = Eq(5 * s + 4 * p, 147)\n    \n    # Solving the two equations\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Calculating the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_money = 100\n    days = 15\n    total_deposits = (days // 2) * 10 + (10 if days % 2 != 0 else 0)\n    total_spends = (days // 2) * 8\n    \n    final_money = initial_money + total_deposits - total_spends\n    \n    return final_money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 1 (mod 2)\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    original_number = (result * 4 - 178) / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    average_apples = sum(apples) / len(apples)\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of stickers each person initially has\n    Marry_initial, Alexis_initial, Charlotte_initial = symbols('Marry_initial Alexis_initial Charlotte_initial')\n    \n    # 20% of Marry's stickers to Charlotte\n    Marry_to_Charlotte = 0.20 * Marry_initial\n    \n    # 20% of Alexis's stickers to Charlotte\n    Alexis_to_Charlotte = 0.20 * Alexis_initial\n    \n    # As a result, Charlotte’s stickers increased by 80%\n    # So the total amount Charlotte receives is 1.8 times her initial count\n    Charlotte_total = Charlotte_initial + Marry_to_Charlotte + Alexis_to_Charlotte\n    Charlotte_end = 1.80 * Charlotte_initial\n    \n    # Marry had 20 stickers more than Charlotte in the end\n    Marry_end = Charlotte_end + 20\n    \n    # Express Marry's end count in terms of initial stickers\n    Marry_end_expr = Marry_initial - Marry_to_Charlotte\n    \n    # System of equations based on the problem statement\n    equations = (\n        Eq(Marry_end, Marry_end_expr),    # Marry's end count equation\n        Eq(Charlotte_total, Charlotte_end), # Charlotte's total received count equation\n        Eq(Marry_initial / Alexis_initial, 7 / 5) # The initial ratio of Marry's to Alexis's stickers\n    )\n    \n    # Solve the system of equations\n    solutions = solve(equations, (Marry_initial, Alexis_initial, Charlotte_initial))\n    \n    # Return Alexis's initial count of stickers\n    return solutions[Alexis_initial]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Original speed is distance over original time\n    # Speed needed to arrive one hour earlier is distance over time minus one hour\n    # Both speeds differ by 5 km/h according to the question\n\n    # Let d be the distance, s be the speed, t be time to travel with original speed\n    # d = s * t\n    # d = (s + 5) * (t - 1)\n\n    # From the question, we know t = 8 hours\n    t = 8\n\n    # Now we transform the equations:\n    # d = s * 8\n    # d = (s + 5) * 7\n\n    # Since both right sides of equations are equal to d, we can set them equal to each other and solve for s:\n    # s * 8 = (s + 5) * 7\n    # 8s = 7s + 35\n    # s = 35 km/h\n\n    # Now we can use s to find d\n    # d = s * t\n    s = 35\n    d = s * t\n\n    # So the distance d is\n    return d\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    from itertools import permutations\n\n    arr = permutations(['Claire', 'Chantel', 'Tony', 'Cale'])\n    count = 0\n    for p in list(arr):\n        if p.index('Claire') - p.index('Tony') not in (-2, 2):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n    eq1 = Eq(banana + 2 * pear, 94)\n    eq2 = Eq(banana + pear, 62)\n\n    solution = solve((eq1, eq2), (banana, pear))\n\n    return solution[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]  # Fifth position has index 4 (0-indexed)\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 1\n    while 2 ** test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36  # total distance covered by the chairs\n    num_chairs_initially = 10  # initial number of chairs\n    num_chairs_remaining = 10 - 3  # remaining number of chairs after removing 3\n\n    # Calculate the distance between each chair before removal\n    distance_between_each_initially = total_distance / (num_chairs_initially - 1)\n\n    # Calculate the new distance between each chair after removal\n    new_distance_between_each = distance_between_each_initially * (num_chairs_initially / num_chairs_remaining)\n\n    return new_distance_between_each\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # Total number of books\n    total_books = 10\n    # Minimum number of books each brother must have\n    min_books = 2\n    # Initialize count of possible ways\n    count = 0\n\n    # Use a triple nested loop to iterate over the possibilities\n    for brother1 in range(min_books, total_books - 2 * min_books + 1):\n        for brother2 in range(min_books, total_books - brother1 - min_books + 1):\n            brother3 = total_books - brother1 - brother2\n            if brother3 >= min_books:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the unknown angles as x and 5x\n    angle_x = symbols('angle_x')\n\n    # Two angles are right angles, so they are each 90 degrees.\n    # The sum of angles in a quadrilateral is 360 degrees.\n    # So we have 90 + 90 + x + 5x = 360\n    equation = Eq(90 + 90 + angle_x + 5*angle_x, 360)\n\n    # Now we solve for x\n    solutions = solve(equation, angle_x)\n\n    # The largest angle is 5 times the smaller angle\n    largest_angle = solutions[0] * 5\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n\n    total_ways = count_ways(4) * count_ways(5)  # steps before the muddy one and after\n    return total_ways\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if (small_boxes * 5 + medium_boxes * 7 + large_boxes * 10) == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    \n    # since we need two 2-digit multiples, we group the prime factors\n    # into two groups ensuring the product of each group has two digits\n    # knowing that the prime factorization of 7007 = 7 * 7 * 11 * 13\n    # we can easily see that 7 * 11 = 77 and 7 * 13 = 91 fit the criteria\n    a = 7 * 11\n    b = 7 * 13\n    \n    # their sum\n    return a + b\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number\n    x = symbols('x')\n    \n    # Set up the equation x/3 + 6/3 = 5\n    equation = Eq(x/3 + 6/3, 5)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n\n    # Since we are only interested in the solution x\n    x_solution = sol[0]\n    \n    return x_solution\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    cans_in_1_day = cans_in_6_days / 6\n    cans_in_9_days = cans_in_1_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    single_entrance_capacity = 25\n    \n    # Calculate the total number of visitors in 16 minutes with one entrance\n    total_visitors = 16 * visitors_per_minute\n\n    # Calculate visitors check-in rate with two entrances\n    two_entrances_capacity = 2 * single_entrance_capacity\n    \n    # Calculate the time it takes for all visitors to check in with two entrances\n    time_with_two_entrances = total_visitors / two_entrances_capacity\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    miles = miles_per_hour * hours\n\n    # Convert miles to kilometers (1 mile = 1.60934 kilometers)\n    kilometers = miles * 1.60934\n    return kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs, dragonflies = symbols('frogs dragonflies')\n\n    initial_condition = Eq(frogs, dragonflies + 9)\n    after_show_frogs = Eq(frogs - dragonflies, 11)\n    after_show_dragonflies = Eq(dragonflies - (frogs - dragonflies), 10)\n\n    solutions = solve((initial_condition, after_show_frogs, after_show_dragonflies), (frogs, dragonflies))\n\n    return solutions[frogs]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance = climb_distance - slide_distance\n    days = 0\n    distance_covered = 0\n\n    while True:\n        days += 1\n        distance_covered += climb_distance\n\n        if distance_covered >= total_distance:\n            break\n\n        distance_covered -= slide_distance\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - cookies_given\n    num_bottles = cookies_left // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)                           # cookies = muffins + 24\n    equation2 = Eq((3/4) * muffins + (5/8) * cookies, 74)           # 3/4 muffins + 5/8 cookies = 74\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 999 // 25 * 25\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Given values\n    travel_cost = 3  # Cost of metro travel both ways\n    coffee_cost = 2  # Cost of a cup of coffee\n    ticket_cost = 5  # Cost of entry to the game\n    total_money = 40 # Total money Richard has\n    \n    # Calculating single person cost which is Richard's cost\n    single_person_cost = travel_cost + coffee_cost + ticket_cost\n    \n    # Total cost for Richard and his friends\n    # Total cost should be less than or equal to the money Richard has\n    # Starting with 0 friends\n    num_friends = 0\n    while True:\n        total_cost = (num_friends + 1) * single_person_cost  # +1 to include Richard\n        if total_cost > total_money:\n            break\n        num_friends += 1\n        \n    # Subtract 1 because we break the loop when Richard cannot afford one more friend\n    return num_friends - 1\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        num = int(f\"123{A}456{A}789{A}0\")\n        if num % 9 == 0 and num % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let t be the time taken by the driver in minutes\n    # Then the time taken by the cyclist is t + 143 minutes\n    \n    # The speed ratio of the driver to the cyclist is 13:2, which is also the inverse ratio of their times\n    # Therefore, the ratio of the driver's time to the cyclist's time is 2:13\n    \n    # The equation representing their times is t / (t + 143) = 2 / 13\n    # Cross multiplying gives us 13t = 2(t + 143)\n    # Solving for t we get 13t = 2t + 286\n    # Then 11t = 286\n    t = 286 / 11\n    \n    return int(t)\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Calculate the sum of the first n natural numbers\n    def sum_of_natural_numbers(n):\n        return n * (n + 1) // 2\n\n    # Calculate the sum of cubes of first n natural numbers using the formula\n    n = 12\n    sum_natural = sum_of_natural_numbers(n)\n    sum_cubes = sum_natural ** 2\n    \n    return sum_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    sausage_rolls_cost = 4 * 24\n    hotdogs_cost = 5 * 81\n    drinks_cost = 7 * 20\n\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is true, then all statements including itself are correct, which is a contradiction.\n    # If statement 2 is true, then it would conflict with statement 5, which incorrectly claims itself to be false.\n    # If statement 3 is true, then it would mean one of the statements above it is correct, which can only be statement 2.\n    # However, statement 2 being true would imply statement 5 is also true, leading to a conflict.\n    # If statement 4 is true, then all statements above, including statement 1 would be correct, which is a contradiction.\n    # Statement 5 can be correct if all statements above are incorrect, which does not lead to a conflict.\n    # Therefore, statement 5 is the only one that can be true without causing a contradiction.\n    \n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n\n    # Initially, 1/4 of the coins are heads\n    initial_heads = coins / 4\n\n    # Turning over 2 more coins to heads\n    after_turning_heads = initial_heads + 2\n\n    # Now, 1/3 of the coins are heads\n    final_heads = coins / 3\n\n    # Setting up the equation\n    equation = Eq(after_turning_heads, final_heads)\n\n    # Solving the equation\n    solution = solve(equation, coins)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3  # Total number of shows is sum of singing and comedy shows\n\n    # Since comedy shows cannot be performed consecutively, they must be separated by singing shows.\n    # We first place the 5 singing shows, which creates 6 slots (before, between, and after the singing shows) where comedy shows can be placed.\n    # For example, _S_S_S_S_S_ (S represents singing show, \"_\" represents a slot for placing comedy show).\n    slots_for_comedy = 6\n\n    # We need to choose 3 slots from the available 6 to place the comedy shows.\n    # This is a combination problem: Choosing 3 slots out of 6\n    ways_to_place_comedy = factorial(slots_for_comedy) // (factorial(3) * factorial(slots_for_comedy - 3))\n    \n    # Now, we have 8 shows to arrange in total (5 singing and 3 comedy with fixed slots).\n    # Since the singing shows are indistinguishable among themselves, and the same goes for the comedy shows,\n    # we can treat each group as a single \"unit\" and arrange these units.\n    # This is the number of permutations of these units: 8! / (5!*3!)\n    total_arrangements = factorial(total_shows) // (factorial(5) * factorial(3))\n    \n    # The final number of ways to arrange the shows is the number of ways to place the comedy shows\n    # times the number of total arrangements.\n    ans = ways_to_place_comedy * total_arrangements\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    planes = 2\n\n    total_ways = trains + cars + planes\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    sum_digits = 0\n    digits = ['2', '3', '4', '5', '6']\n    cycle_length = 6\n\n    for i in range(2100):\n        digit_index = (i // cycle_length) % len(digits)\n        digit = int(digits[digit_index])\n        sum_digits += digit\n    \n    return sum_digits\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n    return numbers[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    result = 12\n    original_number = (result + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # There are 6 people to arrange and 8 seats, the table can be rotated,\n    # so fix one person and arrange the others.\n    # The number of ways to arrange the remaining 5 people around the table is:\n    # (total_seats - 1)! / (total_seats - number_of_people)!\n    \n    total_seats = 8\n    number_of_people = 6\n    \n    ans = factorial(total_seats - 1) // factorial(total_seats - number_of_people)\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n\n    min_even_digit = min(even_digits)\n    remaining_digits = sorted(set(digits) - {min_even_digit})\n\n    smallest_even_number = int(str(remaining_digits[0]) + str(remaining_digits[1]) + str(remaining_digits[2]) + str(min_even_digit))\n    return smallest_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the number of steps the escalator has in total\n    # Let 'e' be the speed of the escalator in terms of steps per second\n\n    s, e = symbols('s e')\n\n    # When Peter walks at 1 step per second, it takes him 10 seconds to reach the top\n    equation1 = Eq(s, 10 * (1 + e))\n    \n    # When Peter walks at 2 steps per second, it takes him 8 seconds to reach the top\n    equation2 = Eq(s, 8 * (2 + e))\n\n    # Solve the system of linear equations\n    solutions = solve((equation1, equation2), (s, e))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_per_dollar = 4\n    total_quarters = total_dollars * quarters_per_dollar\n    return total_quarters\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar_cost_p = 72\n    balloon_cost_p = 20\n    total_paid_p = 1000  # ￡10 note in pence\n    change_p = 388  # Change in pence\n\n    money_spent_on_ballons_p = total_paid_p - (chocolate_bar_cost_p + change_p)\n    number_of_balloons = money_spent_on_ballons_p // balloon_cost_p\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    return 45 / 100 * 2000\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = -(-students // kayak_capacity)\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the symbol\n    x = symbols('x')\n    \n    # Given values\n    a = 4 * sqrt(3)\n    \n    # Equation 3a = sqrt(3x)\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    # Solve for x\n    solved = solve(equation, x)\n\n    return solved[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    subtrahend = 4 + (2 * 13)\n    minuend = (4 + 2) * 13\n    ans = minuend - subtrahend\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # let the age of the youngest dwarf be x\n    # then the ages of the youngest three are x, x+1, x+2\n    # their sum is 3x + 3, and we know this equals 42\n    sum_of_youngest_three = 42\n    x = (sum_of_youngest_three - 3) // 3  # Solving for x\n    \n    # The middle dwarf's age will be x + 3\n    middle_dwarf_age = x + 3\n    \n    # Using the theorem of the middle term on an arithmetic sequence,\n    # The sum of the ages of the oldest three dwarfs will be three times the middle term\n    sum_of_oldest_three = 3 * middle_dwarf_age\n    \n    return sum_of_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2/9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n    \n    # Let's denote the cost of 1 cupcake as 'c' and the cost of 1 slice of pizza as 'p'.\n    # According to the problem, 5c + 6p = money_spent, and 3p = 2c.\n    # From 3p = 2c, we get c = (3/2)p.\n    # Substituting c in the first equation, we get 5*(3/2)p + 6p = money_spent\n    # Solving for 'p' gives us p = money_spent / (15/2 + 6)\n    p = money_spent / ((15/2) + 6)\n    \n    # Now we find 'c' using 3p = 2c.\n    c = (3/2) * p\n    \n    # The greatest number of cupcakes Mark can buy is the money he has left divided by the cost of one cupcake.\n    max_cupcakes = money_left // c\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    \n    # List the numbers we can use to make the three-digit number\n    num_list = [2, 3, 5]\n    \n    # Use permutations to find all possible 3 digit numbers without repetition\n    perm = permutations(num_list, 3)\n    \n    # Count the number of elements in the permutations iterator\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n    \n    count = 0\n    num = 2\n    num_str = str(num)\n    \n    # Generating and checking numbers in the pattern\n    for i in range(1, 6):\n        if int(sqrt(num)) ** 2 == num:\n            count += 1\n        num_str += '5'\n        num = int(num_str)\n    \n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # We start with 10 pieces of paper\n    initial_pieces = 10\n    # After cutting, the total is 16\n    final_pieces = 16\n    # Each paper cut into three parts results in 2 more pieces\n    additional_pieces_per_cut = 2\n    # Calculate the number of papers cut into three parts\n    pieces_cut = (final_pieces - initial_pieces) / additional_pieces_per_cut\n    \n    return int(pieces_cut)\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # The rate of production per worker per minute\n    rate_per_worker = 120 / (6 * 4)\n    \n    # Total parts produced by 3 workers in 10 minutes\n    total_parts = 3 * rate_per_worker * 10\n    \n    return int(total_parts)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Find divisors for which 2240 / divisor is a perfect square\n    valid_divisors = [d for d in divs if is_square(2240 // d)]\n\n    # Return the largest valid divisor (largest 'n', since we want maximum n)\n    ans = max(valid_divisors)\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = 0.7 * total_pupils\n    swimming_girls = 200\n    \n    # Let's assume the number of boys is 'b' and the number of girls is 'g'.\n    # We know that total_pupils = b + g and\n    # swimming_pupils = b * 0.6 (because 40% of boys cannot swim) + swimming_girls\n    # From the first equation, we get g = total_pupils - b.\n    # Now we can put this in the second equation to get only one variable 'b'.\n    # swimming_pupils = b * 0.6 + 200 = b * 0.6 + g (because we have 200 swimming girls) \n    # And from the first equation we have g = total_pupils - b.\n    # So, we get swimming_pupils = b * 0.6 + (total_pupils - b) = 0.6 * b + 380 - b\n    \n    # g = total_pupils - b\n    # Substitute swimming_pupils for the known value:\n    # 266 = 0.6 * b + 380 - b\n    # b = (266 - 380) / (0.6 - 1)\n    \n    b = (swimming_pupils - swimming_girls) / (0.6 - 1)\n    g = total_pupils - b\n\n    return int(g)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    non_rotten_apples = total_apples * (1 - rotten_ratio)\n    \n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    increase = final_value - initial_value\n    percent_increase = (increase / initial_value) * 100\n    return percent_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    A = (sum(range(1, n + 1))) ** 2\n    return A\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the total mass of sugar from both solutions is equal to the mass of sugar in the final mixture \n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n\n    return x_value\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price_with_discount = 32 + 4\n    original_price = original_price_with_discount * 100 / 80\n    total_discount = original_price - (32 - 4)\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the weight of the empty jar and 'c' be the weight of one chocolate\n    j, c = symbols('j c')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(j + 5*c, 185)\n    equation2 = Eq(j + 17*c, 317)\n\n    # Solving the equations for 'j' and 'c'\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Calculating the weight of the jar with 10 chocolates\n    weight_with_10_chocolates = solutions[j] + 10 * solutions[c]\n\n    return weight_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def num_divisors(n):\n        i = 1\n        num_factors = 0\n        while i <= n**0.5:\n            if n % i == 0:\n                num_factors += 1 if n / i == i else 2\n            i += 1\n        return num_factors\n\n    def num_ways_equal_parts(n):\n        # Subtract 1 to exclude the number itself being written as a sum of one part\n        return num_divisors(n) - 1\n    \n    ans = num_ways_equal_parts(200)\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = new_operation(new_operation(2, 3), 4)\n\n    return ans\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Lana's and Mark's initial sweets\n    Lana, Mark = symbols('Lana Mark')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq(Lana - Lana / 3, Mark - 34)\n    \n    # The total number of sweets at first is 674\n    total_sweets = Eq(Lana + Mark, 674)\n    \n    # Solve the system of equations\n    solutions = solve((equation, total_sweets), (Lana, Mark))\n    \n    # Calculate the initial difference in sweets\n    difference = solutions[Lana] - solutions[Mark]\n    \n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    total_days = 2 * (2 * (4 + 14))\n    return total_days\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # 10 minutes for 1 cat to catch 1 fish\n    cats = 5\n    fish = 5\n\n    # Since all cats catch fish simultaneously, time is the same for all fish to be caught\n    time_to_catch_all_fish = time_per_cat_per_fish \n\n    return time_to_catch_all_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n    \n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    field_length = 144\n    field_width = 204\n    total_wheat = 116\n    # Subtract the corner wheats as they are counted twice when adding lengths and widths\n    total_wheat_on_sides = total_wheat - 4 \n\n    # Divide the number of wheat by 2 because there are two lengths and two widths\n    wheat_on_one_side = total_wheat_on_sides // 2\n\n    # Calculate the wheat on one length and one width\n    wheat_on_length = wheat_on_one_side - field_width // (field_length + field_width) * wheat_on_one_side \n    wheat_on_width = wheat_on_one_side - wheat_on_length\n    \n    # The distance between wheat is the field length divided by one less than the number of wheat on that side\n    distance_length = field_length / (wheat_on_length - 1)\n    distance_width = field_width / (wheat_on_width - 1)\n\n    # Since the distance between wheat should be the same, we return one of the calculated distances\n    return distance_length\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    multiplied_by_4 = result / 9\n    subtracted_by_3 = multiplied_by_4 * 4\n    original_number = subtracted_by_3 - 3\n    return original_number\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # We have a rectangle, so there are 2 lengths and 2 widths to consider in terms of planted wheat\n    # The four corners have wheat, which means they are counted as part of both a length and a width\n    # Thus, the actual number of wheat on just the sides (without corners) would be:\n    # Total wheat - 4 corner wheat\n    wheat_on_sides = 116 - 4\n\n    # Since the wheat is divided evenly among 4 sides, we divide the remainder by 4\n    wheat_per_side = wheat_on_sides // 4\n\n    # For each side, the number of intervals is one less than the number of wheat (since intervals are between wheat)\n    intervals_per_side = wheat_per_side - 1\n\n    # The length and width of the field are different, so we need to calculate intervals for each\n    # Interval distance for length (144m)\n    interval_length = 144 / intervals_per_side\n\n    # Interval distance for width (204m)\n    interval_width = 204 / intervals_per_side\n\n    # Assuming the same distance between each wheat, both interval_length and interval_width should be equal\n    # We use either one for the final answer\n    return interval_length\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_after_morning\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    remaining_bracelets = total_bracelets - bracelets_made\n    return remaining_bracelets\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_time = 4\n\n    # Total work done by both in terms of 'people interviewed'\n    total_work_done_by_both = combined_time * (ellie_rate + (total_people / combined_time))\n\n    # The rate at which Gloria works alone (people interviewed per week)\n    gloria_rate = total_work_done_by_both / combined_time - ellie_rate\n\n    # Time for Gloria to finish interviewing everyone by herself\n    time_for_gloria_alone = total_people / gloria_rate\n\n    return time_for_gloria_alone\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        a, e, c, f = perm\n        abcdef = int(f'2{a}0{c}{e}{f}')\n        efabcd = int(f'{e}{f}2{a}0{c}')\n        if 5 * abcdef == 6 * efabcd:\n            face = int(f'{f}{a}{c}{e}')\n            return face\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    ans = (3 / 8) * 48\n    return ans\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.4 + 60 * x  # where x is the percentage of rice in dogfood B\n    percentage_rice_mixture = 0.28\n    \n    # Set up the equation 15 * 0.4 + 60 * x = total_weight * percentage_rice_mixture\n    x = (total_weight * percentage_rice_mixture - 15 * 0.4) / 60\n    \n    return x * 100  # Convert the fraction to percentage\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # given leak rate in milliliters per minute\n    time_in_minutes = 2 * 60  # 2 hours converted to minutes\n    total_leakage_in_milliliters = leak_rate_per_minute * time_in_minutes\n    total_leakage_in_liters = total_leakage_in_milliliters / 1000  # converting milliliters to liters\n    \n    return total_leakage_in_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Relative speed between Barbara and Catherine\n    relative_speed = 60 - 45\n    \n    # Catherine still has 60 metres to go when Barbara reaches the shopping mall\n    # Since their relative speed is the difference of their speeds, we can figure\n    # out how long Catherine walked before Barbara reached the mall.\n    time_to_mall_for_barbara = 60 / relative_speed\n    \n    # Now, using the time and Catherine's speed, we can calculate the distance\n    distance_to_mall = time_to_mall_for_barbara * 45\n    \n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pen = symbols('book pen')\n    \n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n    \n    solutions = solve((equation1, equation2), (book, pen))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2 * 10 + 5 * 5 + 4 * 0.20\n    amount_spent = 100 - total_received\n    return amount_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, B * 4/3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, 200)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Let a < b < c < d, where a, b, c, d are the numbers in descending order.\n    # Given: a + (b + c + d) / 3 = 39\n    # Given: d + (a + b + c) / 3 = 51\n    # We need to maximize d.\n    \n    equation1 = Eq(a + (b + c + d) / 3, 39)\n    equation2 = Eq(d + (a + b + c) / 3, 51)\n\n    # Solving the equations for a, b, c, d\n    solutions = solve((equation1, equation2), (a, b, c, d))\n\n    # Now we assess the largest possible value of d while maintaining distinct positive integers\n    # and keeping them in descending order.\n    # We iterate starting from the highest possible d and decrease until we find a valid solution.\n    max_d = None\n    for potential_d in range(solutions[d], 0, -1):\n        for potential_c in range(potential_d - 1, 0, -1):\n            for potential_b in range(potential_c - 1, 0, -1):\n                potential_a = 3 * 39 - potential_b - potential_c - potential_d # From equation1\n                if potential_a < potential_b and potential_a > 0:\n                    max_d = potential_d\n                    break\n            if max_d:\n                break\n        if max_d:\n            break\n\n    return max_d\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes\n    total_time = 18  # minutes\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini_age, dads_age = symbols('nini_age dads_age')\n\n    equation1 = Eq(dads_age, nini_age + 25)\n    equation2 = Eq(dads_age + 5, 2 * (nini_age + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini_age, dads_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            count += 1\n\n    # total students - (students facing backwards because of multiple of 4 and 6)\n    ans = 50 - count\n    return ans\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 // 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 // 9\n\n    return second_day_sold\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    total_apples = 29\n    min_apples = 3\n    \n    # Using simple pigeonhole principle, we divide the total number of apples\n    # by minimum apples per student to find the maximum number of students.\n    # Because at least one student gets at least 3 apples, \n    # we remove 3 apples for that student first, then divide the rest.\n    \n    remaining_apples = total_apples - min_apples\n    max_students = remaining_apples // (min_apples - 1) + 1  # +1 for the student with at least 3 apples\n    \n    return max_students\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3  \n    girls = 4  \n    ways_to_pick = boys * girls  \n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for num in range(10, 100):  # Loop through all two-digit numbers\n        if isprime(num):\n            reverse_num = int(str(num)[::-1])  # Reverse the digits\n            if reverse_num != num and isprime(reverse_num):  # Check if reversed number is a different prime\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    green, blue = symbols('green blue')\n    \n    # After removing 2/5 of the blue balls and 28 green balls, there is an equal number of green and blue balls left\n    equation1 = Eq(green - 28, blue - (2 / 5) * blue)\n    \n    # There were a total of 140 green and blue balls in the bag\n    equation2 = Eq(green + blue, 140)\n    \n    # Solving the system of equations to find the number of blue balls\n    solutions = solve((equation1, equation2), (green, blue))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic goes to three fixed bars at random,\n    # the probability of being at any one bar is the same, 1/3.\n    # If the alcoholic is not at two of the bars,\n    # the probability of being at the third bar is 100% or 1.\n    # No need for complex calculations because it's a certainty\n    # that if he's not at the other two, he must be at the third.\n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Eliot and his cousin's current ages\n    eliot, cousin = symbols('eliot cousin')\n\n    # Equation representing that Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n\n    # Equation representing that Eliot will be 16 in 4 years\n    equation2 = Eq(eliot + 4, 16)\n\n    # Solve the system of equations for Eliot and his cousin's current ages\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # Calculate cousin's age in 4 years\n    cousin_age_in_4_years = solutions[cousin] + 4\n\n    return cousin_age_in_4_years\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    caught_marked = 16\n    caught_total = 100\n    marked_total = 100\n    return caught_total * marked_total / caught_marked\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let the distance Nancy walked be x meters.\n    # Then the distance Randy walked would be x + 10 meters.\n    # According to the given ratio, for every 2 meters walked by Nancy, Randy walks 3 meters.\n    # Therefore, we can write the following proportion: \n    # (Distance walked by Nancy) / (Distance walked by Randy) = 2 / 3\n    # Substitute x for Nancy's distance and x + 10 for Randy's distance:\n    # x / (x + 10) = 2 / 3\n    # Cross multiply to solve for x:\n    # 3x = 2(x + 10)\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x, 2*(x + 10))\n    distance_nancy = solve(equation, x)\n    distance_nancy = distance_nancy[0]\n    \n    # Now we know the distance that Nancy walked.\n    # We can calculate the total distance.\n    total_distance = distance_nancy + distance_nancy + 10\n    \n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Calculate the numerator (1 3/99 + 3 3/33 + 9 3/11)\n    num1 = 1 + 3/99\n    num2 = 3 + 3/33\n    num3 = 9 + 3/11\n\n    # Sum the parts of the numerator\n    numerator = num1 + num2 + num3\n\n    # Calculate the denominator (1 1/99 + 3 1/33 + 9 1/11)\n    den1 = 1 + 1/99\n    den2 = 3 + 1/33\n    den3 = 9 + 1/11\n\n    # Sum the parts of the denominator\n    denominator = den1 + den2 + den3\n\n    # Divide the numerator by the denominator\n    result = numerator / denominator\n\n    return result\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be n\n    n = 0.20141414141414...\n    # Multiply n by 100 to shift the repeating part after the decimal: 100n = 20.1414141414...\n    # Subtract n from 100n to get 99n:\n    # 100n - n = 99n = 20.1414141414... - 0.201414141414... = 19.94\n    # Now n = 19.94 / 99\n\n    n = 19.94 / 99\n\n    # Multiply both sides of the equation x/9900 = n by 9900 to get x:\n    x = n * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    avg_bc = (bronson + charlie) / 2\n\n    equation1 = Eq(ali, avg_bc - 5)\n    equation2 = Eq(bronson, 2 * ali)\n    equations = (equation1, equation2)\n\n    solved = solve(equations, (ali, bronson, charlie))\n\n    return solved[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum_positive = sum(range(10, 21, 2))\n    sum_negative = sum(range(9, 20, 2))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "from itertools import permutations\n\ndef solution():\n    ans = 0\n    for perm in permutations(range(10), 3):\n        if sum(perm) == 8 and perm[2] % 2 == 0 and perm[0] != 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(100000, 1000000):\n        if str(i)[-1] == \"2\":\n            new_num_str = \"2\" + str(i)[:-1]\n            new_num = int(new_num_str)\n            if new_num == i // 3:\n                return i\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_both = passed_first - passed_second_failed_first\n    passed_only_first = passed_first - passed_both\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n\n    # Additional check since we need a solution between 500 and 1000,\n    # the Chinese Remainder Theorem gives us a solution modulo the product\n    # of the moduli, so we need to add multiples of the product until we get\n    # into the desired range.\n    lcm_modulus = 5 * 8 * 9\n    while num < 500:\n        num += lcm_modulus\n    ans = num if num < 1000 else None\n\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    ans = total_bars % people\n    return ans\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Since there are 6 permutations of the three digits, \n    # each digit will appear in each place (hundreds, tens, ones) exactly twice.\n    # Therefore, the sum of all numbers will be:\n    # 2 * (100a + 10b + c + 100b + 10c + a + 100c + 10a + b) \n    # = 2 * (111a + 111b + 111c)\n    # = 222 * (a + b + c)\n    \n    a, b, c = symbols('a b c')\n    sum_of_numbers = 222 * (a + b + c)\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be in the range from 1 to 9, as it's the tens digit.\n        for b in range(10): # 'b' can be between 0 to 9, as it's the units digit.\n            ab = 10*a + b               # Constructing the two-digit number ab.\n            ba = 10*b + a               # Constructing its reverse ba.\n            product = ab * ba           # Multiplying the number by its reverse.\n            if product % 100 == 0:      # Checking if the units and tens digits are both 0.\n                return ab               # Return the smallest such two-digit number.\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_needed = 300 / rate_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    decimal_value = round(5/9, 2)\n    return decimal_value\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    # Count digits in numbers from 1 to 1200\n    for i in range(1, 1201):\n        total_digits += len(str(i))\n\n    # The position from the left\n    from_left = total_digits - 2010\n\n    # Recount to find the exact number and its digit\n    current_digits = 0\n    for i in range(1, 1201):\n        current_digits += len(str(i))\n        if current_digits >= from_left:\n            # Find out the exact digit in the number\n            num_str = str(i)\n            index_from_right = current_digits - from_left\n            ans = num_str[len(num_str) - index_from_right - 1]\n            return int(ans)\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n    equation = Eq((coins / 4 + 2), coins / 3)\n\n    num_coins = solve(equation, coins)\n\n    return num_coins[0]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let 'o' be the number of oranges and 'a' be the number of apples Mrs Lee had at first\n    o, a = symbols('o a')\n\n    # The equation based on the information given in the problem\n    # Mrs Lee had a total of 125 oranges and apples: o + a = 125\n    equation1 = Eq(o + a, 125)\n\n    # She sold half of the apples and 35 oranges\n    # In the end, she had an equal number of oranges and apples left: o - 35 = a / 2\n    equation2 = Eq(o - 35, a / 2)\n\n    # Solving the equations to find out the number of oranges\n    solutions = solve((equation1, equation2), (o, a))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n    return total_books\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # Find the least 5-digit palindrome number\n    least_5_digit_palindrome = int(\"10001\")\n    \n    # Find the greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    multiples_of_5 = range(5, 51, 5)\n    sum_multiples_of_5 = sum(multiples_of_5)\n    return sum_multiples_of_5\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    distance_planet1 = 30 * 5  # Travelled distance of the first planet\n    distance_planet2 = 40 * 5  # Travelled distance of the second planet\n\n    total_distance = distance_planet1 + distance_planet2  # Total distance apart 5 minutes ago\n\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let x be the number of cars and y be the number of motorbikes.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # x + y = 140 (total number of vehicles)\n    # 4x + 2y = 490 (total number of tyres)\n\n    # Let's solve for x using these equations.\n    # From the first equation, we express y in terms of x: y = 140 - x.\n    # Substitute y into the second equation:\n    # 4x + 2(140 - x) = 490\n    # 4x + 280 - 2x = 490\n    # 2x = 490 - 280\n    # 2x = 210\n    # x = 105\n\n    x = (490 - 2 * 140) / 2\n    return x\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Possible digits for the tens place (cannot be 0)\n    tens_place_options = 5  # 1, 2, 3, 4, 5\n\n    # Possible digits for the units place\n    units_place_options = 6  # 0, 1, 2, 3, 4, 5\n\n    # Total number of two-digit combinations\n    total_combinations = tens_place_options * units_place_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    common_difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, n = symbols('a n', integer=True)\n\n    # Setting up the remainder equations\n    eq1 = 190 % n - a\n    eq2 = 137 % n - (a + 4)\n    eq3 = 101 % n - (a + 6)\n\n    # Set up congruence formulas based on the information given\n    sol = solve((eq1, eq2, eq3), (a, n))\n\n    for s in sol:\n        if s[n] > 0 and s[a] >= 0:\n            return 299 % s[n]\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_climb = day_climb - night_slide\n    current_distance = 0\n    days = 0\n    \n    while True:\n        days += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n        \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    ans = round(8.765, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_weight = 960\n    box_capacity = 8\n    num_boxes = total_weight // box_capacity\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    after_adding = result - 12\n    original_number = after_adding / 2\n\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    count_4 = 1\n    count_5 = 1\n\n    total_ways = factorial(total_digits) // (factorial(count_2) * factorial(count_3) * factorial(count_4) * factorial(count_5))\n    \n    return total_ways\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # If 2p is one-quarter of her money, then Bud starts with 4 times 2p\n    money_spent = 2\n    fraction = 1/4\n    initial_money = money_spent / fraction\n\n    return initial_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    rounds_played = (num_teams * (num_teams - 1)) // 2\n    return rounds_played\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = Fraction(31, 6) + Fraction(31, 5)\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    # Given equation x(2 + y) = 200 + y\n    # Arrange the equation into y = (200 - 2x) / (x - 1)\n    \n    # To maximize x + y, start checking with the largest x possible, which is less than 200\n    # As x is a prime number, start checking from 197 (largest prime number less than 200)\n    # Go down in descending order to find the first such pair (x, y) where both are prime\n    from sympy import isprime\n\n    # Decrement x by 2 to check for prime numbers (since even numbers > 2 are not prime) \n    for x in range(197, 1, -2):\n        if isprime(x):\n            y = (200 - 2*x) / (x - 1)\n            \n            # Check if y is an integer and a prime number\n            if y.is_integer() and isprime(y):\n                return int(x + y)\n                \n                # Break out of the loop once we find the valid (x, y) pair\n                break\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 9]\n    all_numbers = sorted(int(''.join(map(str, p))) for p in permutations(digits))\n    \n    return all_numbers[4]  # index 4 for the fifth position\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each dwarf\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    \n    # Given conditions\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(dopey, sneezy)\n    equation5 = Eq(dopey, bashful)\n    equation6 = Eq(dopey, grumpy)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    # total parts of the mixture (4 parts apple + 5 parts orange)\n    total_parts = 4 + 5\n    # total amount of the fruit drink\n    total_litres = 36\n    # calculate the amount of apple juice based on its ratio part \n    apple_juice = (4 / total_parts) * total_litres\n    return apple_juice\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_to_construct_2600_meters = 2600 / meters_per_day\n    return days_to_construct_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_per_hour = 250 / 5\n    distance_in_3_hours = distance_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_each_side = total_trees // 4\n    return trees_each_side\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # The sum of an arithmetic series is the average of the first and last term, multiplied by the number of terms.\n    first_term = 12\n    last_term = 90\n    num_terms = (last_term - first_term) + 1  # Total number of terms in the sequence\n\n    # Calculate the sum of the first and last term, which will determine the parity of the entire sum\n    sum_of_first_last = first_term + last_term\n\n    # Parity of a number is determined by its last digit.\n    # For an even number of terms, the sum will be even if the sum_of_first_last is even,\n    # and odd if the sum_of_first_last is odd.\n    # For an odd number of terms, the sum will be always even.\n    \n    # Check if the number of terms is odd or even\n    if num_terms % 2 == 0:\n        # Even number of terms, check the parity of sum_of_first_last\n        return 'even' if sum_of_first_last % 2 == 0 else 'odd'\n    else:\n        # Odd number of terms, the sum is always even\n        return 'even'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the numbers on Qiang, Rory, and Sophia's hats as q, r, s respectively.\n    q, r, s = symbols('q r s')\n\n    # Qiang's total\n    equation1 = Eq(q, 17 + 22 - r - s)  # simplified from q + r + s = 17 + 22\n\n    # Rory's total\n    equation2 = Eq(r, 11 + 22 - q - s)  # simplified from q + r + s = 11 + 22\n\n    # Sophia's total\n    equation3 = Eq(s, 11 + 17 - q - r)  # simplified from q + r + s = 11 + 17\n\n    # Sum of all three totals is equal to twice the sum of the numbers on the hats\n    equation4 = Eq(q + r + s, (11 + 17 + 22) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (q, r, s))\n\n    # The largest number on a hat\n    return max(solutions[q], solutions[r], solutions[s])\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_apart = 5  # in meters\n    road_length = (number_of_trees - 1) * distance_apart\n    \n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    # Count digits for 1-9\n    digits_1_9 = 9\n    # Count digits for 10-99\n    digits_10_99 = (99 - 10 + 1) * 2\n    # Count digits for 100-345\n    digits_100_345 = (345 - 100 + 1) * 3\n\n    # Total count of digits\n    total_digits = digits_1_9 + digits_10_99 + digits_100_345\n\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n\n    buses_needed = total_people / max_capacity\n    if total_people % max_capacity != 0:\n        buses_needed += 1\n\n    return int(buses_needed)\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n\n    solution = solve(equation, total_prize)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # The coach stands in the middle, so there is only 1 way for the coach to stand\n    coach_ways = 1\n\n    # The captain has two options, either to the left or to the right of the coach\n    captain_ways = 2\n\n    # The remaining 5 players can be arranged in any order, so 5!\n    players_ways = factorial(5)\n\n    # Use the principle of multiplication\n    total_ways = coach_ways * captain_ways * players_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    fish_left_3 = 25\n    fish_per_penguin_3 = 3\n    fish_per_penguin_6 = 6\n\n    for penguins in range(1, fish_left_3):\n        total_fish_3 = penguins * fish_per_penguin_3 + fish_left_3\n        total_fish_6 = (penguins - 1) * fish_per_penguin_6 + 1\n        if total_fish_3 == total_fish_6:\n            return penguins\n            \nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_distance = 70\n    total_time = 90 / 60  # Convert minutes to hours\n\n    # Distance = Speed * Time\n    first_leg = x * 0.5      # x mph for 0.5 hours\n    second_leg = (x - 20) * 0.5  # (x-20) mph for 0.5 hours\n    third_leg = (x + 10) * 0.5   # (x+10) mph for 0.5 hours\n\n    # Equation representing the sum of distances equals total distance\n    equation = Eq(first_leg + second_leg + third_leg, total_distance)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the value of x, assuming x to be positive as speed cannot be negative\n    return max(solution)\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    power = (-1.2) ** 2\n    ans = cube_root + power\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    # Each number n appears n times in sequence\n    current_term = 1\n    sum_terms = 0\n    remaining = 30\n\n    while remaining > 0:\n        times_to_add = min(current_term, remaining)\n        sum_terms += current_term * times_to_add\n        remaining -= times_to_add\n        current_term += 1\n\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        # Create the number by substituting 'a'\n        number = int(f\"1{a}7731\")\n        # Divisibility rule of 11\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0 \n    # Assuming the square array has n layers, this means we have n boys layers and n-1 girls layers.\n    # Let's try different values for n, where n must be an odd number.\n    n = 1\n    while True:\n        # boys = (2n-1)^2 because that many boys are on the outer layer, then we skip one layer for girls and add (2n-5)^2 for the next boys layer, etc.\n        boys = sum((2*i-1)**2 for i in range(n, 0, -2))\n        # girls = (2n-3)^2 for the first inner girls layer, then add (2n-7)^2, etc.\n        girls = sum((2*i-1)**2 for i in range(n-1, 0, -2))\n        # Check if difference between boys and girls is 20\n        if boys - girls == 20:\n            # Calculate total students\n            total_students = boys + girls\n            break\n        # Increment n by 2 because we need an odd number of layers (with alternates of boys and girls)\n        n += 2\n    \n    return total_students\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    votes_cindy = 47\n    votes_others = 31 + 41\n    remaining_votes = total_votes - votes_cindy - votes_others\n    votes_needed = max(31, 41) + 1 - votes_cindy  # Cindy must have at least 1 more vote than the largest\n    \n    if votes_needed <= remaining_votes:\n        return votes_needed\n    else:\n        return remaining_votes\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    import math\n    # First Expression\n    numerator1 = 7 / -3.333333333333  # -3.\\dot{3} recurring decimal represented\n    denominator1 = (-0.027) ** (1/3)  # Cube root of -0.027\n    expression1 = numerator1 / denominator1\n\n    # Second Expression\n    numerator2 = 2 ** 3 / 4 ** 2\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))\n    expression2 = numerator2 / denominator2\n\n    # Third Expression\n    repeating_fraction = 1 / 0.142857142857  # 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} recurring decimal represented\n    parentheses = repeating_fraction + (2 * 0.3)\n    expression3 = -parentheses\n\n    # Calculate total\n    ans = expression1 + expression2 + expression3\n\n    # To ensure fraction is not infinite in its decimal representation after processing\n    ans = round(ans, 10)\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    # The following equation represents that 3/4 of Chelsia's money is equal to 5/6 of Brian's money.\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n\n    # This equation represents that Chelsia has $24 more than Brian.\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solving the system of equations for Chelsia and Brian's money.\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # The sum of Chelsia and Brian's money is calculated.\n    total_money = solutions[chelsia] + solutions[brian]\n\n    # The mistake in the workings is that we should not be multiplying 24 by 24 to get the total.\n    # Instead, we just need to add Chelsia and Brian's amounts to get the answer. \n    # The mistake is in the assumption that 1u ($24 - extra money that Chelsia has) corresponds to the total amount they both have, which is incorrect.\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_birth_year = 2005 - 50\n    james_birth_year = 1997 - 20\n    gina_age_when_james_born = gina_birth_year - james_birth_year\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    salary = 3300\n    commission_rate_low = 0.02\n    threshold = 25000\n    commission_rate_high = 0.05\n\n    # Calculate the commission earned\n    commission_earned = salary - base_salary\n\n    # If the commission is earned entirely within the lower commission range\n    if commission_earned <= threshold * commission_rate_low:\n        sales = commission_earned / commission_rate_low\n    else:\n        # Calculate sales within the lower commission range\n        sales_low = threshold * commission_rate_low\n        # Calculate the remaining commission earned in the higher commission range\n        commission_earned_high = commission_earned - sales_low\n        # Calculate the sales within the higher commission range\n        sales_high = commission_earned_high / commission_rate_high\n        # Total sales is the sum of sales within both ranges\n        sales = threshold + sales_high\n\n    return sales\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Given ratios\n    equation1 = Eq(ryan / audrey, 2/7)\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solving the system of equations for ryan and audrey\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six_players = 6 * 150  # Average height of six players times the number of players\n    total_height_of_four_players = 4 * (150 - 2)  # Average height of four players times the number of those players\n    \n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2  # Divide by the number of the other two players\n    \n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    prob_pass_first = 0.4\n    prob_fail_first = 1 - prob_pass_first\n    prob_pass_second = 0.5\n    prob_fail_second = 1 - prob_pass_second\n    prob_pass_third = 0.3\n\n    prob_pass_within_three_attempts = prob_pass_first + \\\n                                      prob_fail_first * prob_pass_second + \\\n                                      prob_fail_first * prob_fail_second * prob_pass_third\n\n    return prob_pass_within_three_attempts\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    width = 1\n\n    while digits > 0:\n        step = width * 9 * (10 ** (width - 1))\n        \n        if digits >= step:\n            digits -= step\n            pages += 9 * (10 ** (width - 1))\n        else:\n            pages += digits // width\n            digits = 0\n        width += 1\n\n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    num_combinations = num_fruits * num_vegetables\n    return num_combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    # Number of ways to travel from City A to City B\n    ways_A_to_B = 2\n    # Number of ways to travel from City B to City C\n    ways_B_to_C = 3\n\n    # Total different routes Pip can choose\n    total_routes = ways_A_to_B * ways_B_to_C\n\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = number_of_terms * (first_term + last_term) / 2\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial_15 = 1\n    for i in range(1, 16):\n        factorial_15 *= i\n\n    count_of_zeros = 0\n    while factorial_15 % 10 == 0:\n        factorial_15 //= 10\n        count_of_zeros += 1\n    \n    return count_of_zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age = symbols('age')\n    \n    equation = Eq(age / 4 + 32, age - 22)\n    \n    sol = solve(equation, age)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total height to be climbed\n    total_height = 18\n\n    # Height climbed during the day, except for the 6th day\n    daily_climb = 7\n\n    # Height climbed on the 6th day\n    sixth_day_climb = 3\n\n    # The progress of the snail after 5 days (before the 6th)\n    five_day_progress = 5 * daily_climb\n\n    # The height left to be climbed after 5 days\n    remaining_height_after_5_days = total_height - five_day_progress\n\n    # Height climbed up to 6th day including the 3 meters climbed on the 6th day\n    height_sixth_day = five_day_progress + sixth_day_climb\n\n    # Since it takes 6 full days to climb up 18 meters, at the end of the 6th day's climbing,\n    # the snail must reach or exceed the burrow height, before slipping down.\n    # Therefore, the distance the snail slides at night (let's call it `night_slide`) can be\n    # calculated by how much it exceeded 18 meters on the 6th day.\n    night_slide = height_sixth_day - total_height\n\n    return night_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Given the maximum number of apples one student can get\n    # The other three must get 1, 2, and 3 apples respectively (they must get different counts and as small as possible)\n    # This way we allocate the smallest number of apples to the other three, giving the \n    # maximum possible to the second student.\n    max_for_others = 1 + 2 + 3\n    max_for_second_student = 48 - max_for_others\n    return max_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "from itertools import combinations\n\ndef time_to_cross(fastest, slowest):\n    return slowest if fastest >= slowest else fastest\n\ndef solution():\n    times = [1, 2, 5, 10]\n    shortest_time = float('inf')\n\n    # Combination of two people rowing back is always 1 or 2\n    for back_rowers in combinations([1, 2, 5, 10], 2):\n        total_time = 0\n        people_left = times.copy()\n\n        # Initial crossing with the two fastest\n        cross_time = time_to_cross(people_left[0], people_left[1])\n        total_time += cross_time\n        people_left = people_left[2:]\n\n        # First return with the fastest of the initial crossers\n        total_time += back_rowers[0]\n        people_left.append(back_rowers[0])\n\n        # Second crossing with the two slowest\n        cross_time = time_to_cross(people_left[1], people_left[2])\n        total_time += cross_time\n        people_left = people_left[:1]\n\n        # Second return with the fastest available\n        total_time += back_rowers[1]\n        people_left.append(back_rowers[1])\n\n        # Final crossing with the two fastest left\n        cross_time = time_to_cross(people_left[0], people_left[1])\n        total_time += cross_time\n\n        # Update shortest_time if a quicker solution was found\n        shortest_time = min(shortest_time, total_time)\n\n    return shortest_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original length be 'l' and the width be 'w'\n    l, w = symbols('l w')\n    \n    # Given, the increased length is l + 12 cm, making its perimeter 38 cm\n    equation = Eq(2*(l + 12) + 2*w, 38)\n    \n    # Solve the equation for 'l'\n    l_value = solve(equation, l)[0]\n\n    # Substitute 'l' in the original perimeter expression: 2*l + 2*w\n    original_perimeter = 2*l_value + 2*w\n    \n    # Now we simplify this expression to get the perimeter in terms of 'w', \n    # substituting the 'l' obtained above in terms of 'w' from the perimeter equation.\n    # Since 'l' is solved in terms of 'w', we have original perimeter in terms of 'w' as well\n    original_perimeter = original_perimeter.subs(l, l_value)\n\n    # Finally, we express 'l' in terms of 'w' and get the perimeter of the original rectangle\n    # using the pair of equations we have:\n    # 2l + 2w = original_perimeter\n    # 2(l + 12) + 2w = 38\n    # From the second equation, we can express l in terms of w:\n    # l = 19 - w - 12\n    # l = 7 - w\n    # Therefore, the original perimeter is:\n    # 2l + 2w = 2(7 - w) + 2w = 14 + 2w - 2w = 14\n    original_perimeter = 14  # Perimeter of the original rectangle\n\n    return original_perimeter\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i**2 for i in range(1, 90)])\n    return ans\n  \nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = (2**19) - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Let the side length for boys be b and for girls be g.\n    # The number of students in outermost layer (boys) is b^2.\n    # The number of students in the next layer (girls) is (b-2)^2.\n    # The difference is 44, so b^2 - (b-2)^2 = 44.\n    # We continue this process until g becomes 0 or negative.\n    total_students = 0\n    b = 1  # Start with the smallest square that could have a layer\n    while True:\n        boys = b**2\n        girls = (b-2)**2 if b > 1 else 0  # Make sure g is non-negative\n        if boys - girls == 44:\n            total_students += boys + girls\n            b -= 2  # Move to the next layer\n            if b <= 1:  # If we have reached the last layer or are left with a single row/column\n                break\n        else:\n            b += 1  # Try the next possible size for boys\n    return total_students\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 1 and i % 4 == 1:\n            return i\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "import math\n\ndef solution():\n    num_students = 4\n    num_ways = math.factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # The number of ways she can eat if she chooses chocolate first.\n    # Since she cannot eat the same food on adjacent days, we use a tree diagram approach.\n    # First day: Chocolate (C)\n    # Second day: she can choose either Peaches (P) or Strawberries (S)\n    # Third day: If she chooses P on the second day, she can only choose S on the third day\n    #             If she chooses S on the second day, she can only choose P on the third day\n    # Total ways = CP + CS = CPS + CSP = 2 ways\n\n    return 2\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ways = 0\n    for i in range(1, 8//2 + 1):\n        ways += 1\n    return ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    spent_on_television = (5 / 9) * salary\n    remaining = salary - spent_on_television\n    spent_on_table = (3 / 4) * remaining\n    remaining_after_table = remaining - spent_on_table\n\n    equation = Eq(remaining_after_table, 160)\n\n    total_salary = solve(equation, salary)\n\n    return float(spent_on_television.subs(salary, total_salary[0]))\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n    # There are 7 people and 8 seats, 7 seats must be filled.\n    # We use (n-1)! formula for circular permutations where n is the number of people.\n    # This is because in circular permutations, one person can be fixed and the rest are arranged.\n    ans = factorial(7 - 1)\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Emma's current age as e and John's current age as j\n    e, j = symbols('e j')\n\n    # After 3 years, the sum of their ages will be 27\n    equation1 = Eq((e + 3) + (j + 3), 27)\n    # Emma’s age is the difference between her own and John’s ages\n    equation2 = Eq(e, j - e)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, j))\n\n    # Return Emma's age\n    return solutions[e]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked_in_week = 6\n\n    total_earnings = average_daily_earnings * days_worked_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    tom_speed = 48 # km/h\n    jack_speed = 50 # km/h\n    jack_late = 3 # hours\n    drive_time = 5 # hours after Jack starts\n    remaining_distance = 15 # km\n\n    # Total distance Tom drives in the time until Jack starts plus the 5 hours they drive towards each other\n    tom_distance = (jack_late + drive_time) * tom_speed\n    \n    # Total distance Jack drives in the 5 hours they drive towards each other\n    jack_distance = drive_time * jack_speed\n    \n    # Total distance between A and B is the distance both have covered plus the 15 km remaining \n    distance_AB = tom_distance + jack_distance + remaining_distance\n    \n    return distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Assuming 360 degrees represents 100% of the people surveyed\n    total_degrees = 360\n    # The \"Water\" section has 36 degrees on her pie chart\n    water_degrees = 36\n    # Each degree represents 1/10 of a person since 36 degrees is the rest and corresponds to 10%\n    people_per_degree = 10\n    \n    # Calculating the total number of people based on the water section\n    total_people = people_per_degree * total_degrees\n\n    # Since 30% chose cola, and 1/4 (25%) chose tea, we find the number of people who chose coffee\n    # And coffee has 7 people which is 100 - 30 (cola) - 25 (tea) - 10 (water)\n    percent_coffee = 100 - 30 - 25 - (water_degrees / total_degrees * 100)\n\n    # Calculate the total people by dividing the number of coffee choosers by its percentage\n    total_people = 7 / (percent_coffee / 100)\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    # Dogs have 4 legs and children have 2 legs.\n    # There are 3 times as many dogs as children, so the dogs' legs are 3 * children * 4\n    equation = Eq(3 * children * 4 + children * 2, 56)\n\n    num_children = solve(equation, children)\n\n    return num_children[0]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # Two fifths of the class are absent, meaning three fifths are present\n    fraction_present = 3/5\n    num_pupils_present = 18\n\n    # Calculate the total number of pupils in the class\n    total_num_pupils = num_pupils_present / fraction_present\n\n    return int(total_num_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10 ** 5) // (5 ** 5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    z = 4 + 5\n    return z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4*sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n    \n    solutions = solve((equation1, equation2), (saturday, sunday))\n    \n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Subtract 4 to adjust for the fact that the corner will only be counted once\n    # (2 for length and 2 for width).\n    trees_length = (length // spacing) * 2 - 2\n    trees_width = (width // spacing) * 2 - 2\n\n    total_trees = trees_length + trees_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36  # Katie's height in meters\n    height_in_cm = height_in_meters * 100  # Conversion factor from meters to centimeters\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    income_tax_percentage = 0.03\n    income_tax = initial_income * income_tax_percentage\n    final_income = initial_income - income_tax\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    adult_ticket_price = 20\n    child_ticket_price = 15\n    total_charge = 110\n\n    for number_of_adults in range(2, total_charge // adult_ticket_price + 1):\n        number_of_children = (total_charge - (number_of_adults * adult_ticket_price)) // child_ticket_price\n        if (number_of_adults * adult_ticket_price) + (number_of_children * child_ticket_price) == total_charge:\n            return number_of_children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_each = total_sweets // people\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    # Loop through possible 1-digit to 4-digit numbers since putting 9 in front\n    # would at most create a five-digit number which is four times the original\n    for i in range(1, 10000):\n        original_number = i\n        new_number = int('9' + str(original_number))\n        \n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_orange_squash = 750\n    ratio = 1 / 9\n    total_volume = total_orange_squash * (1 + ratio)\n    litres_per_bottle = 1000\n    number_of_bottles = total_volume // litres_per_bottle\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    return right_side / left_side\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # The cost of the book and the bag is given as $132\n    total_cost = 132\n    \n    # Initially, the fraction spent on the book and the bag appears to be incorrect.\n    # Li Yan spent 1/3 of her money on a book.\n    # Then she spent 1/2 of the REMAINDER on a bag.\n    # Let the initial amount of money Li Yan had be x.\n    # Money spent on book = (1/3) * x\n    # Remaining money after buying the book = x - (1/3) * x = (2/3) * x\n    # Money spent on bag = (1/2) * (2/3) * x = (1/3) * x\n    # Total money spent = Money spent on book + Money spent on bag\n    # Total money spent = (1/3) * x + (1/3) * x = (2/3) * x\n\n    # Thomas' calculation adds fractions of two DIFFERENT quantities, which is incorrect.\n    # Correct calculation:\n    # 2/3 * x = 132\n    # x = 132 * (3/2)\n    # x = 132 * 1.5\n    x = total_cost * 1.5\n\n    return x\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    \n    remainder = pow(base, exponent, divisor)\n    \n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    return (6 ** 2015 + (2015 * 6) + 2015 ** 6) % 100\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n\n    # Fixed values according to the problem statement\n    B, D = 2, 0\n    \n    # Generate all permutations of the remaining digits [0-9] excluding 2 and 0\n    for perm in permutations('1356789', 4):\n        # Concatenate the digits to form the numbers ABCDEF and EFABCD\n        ABCDEF = f\"{B}{perm[0]}{D}{perm[1]}{perm[2]}{perm[3]}\"\n        EFABCD = f\"{perm[2]}{perm[3]}{B}{perm[0]}{D}{perm[1]}\"\n\n        # Convert the strings to integers\n        num_ABCDEF = int(ABCDEF)\n        num_EFABCD = int(EFABCD)\n\n        # Check if the equation holds\n        if 5 * num_ABCDEF == 6 * num_EFABCD:\n            # Return FACE as a 4-digit number\n            FACE = int(f\"{perm[1]}{B}{D}{perm[2]}\")\n            return FACE\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for A in range(1, 90):\n        if A % 6 == 4 and (-A) % 7 == 5:\n            return A\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # The first 5 factors of the number are given. Since the number has 8 factors,\n    # there are 3 more factors that we don't know. One of these factors is the\n    # number itself. Since 7 is a prime number and is a factor of the number, and\n    # the only even prime number 2 is also given, the number must be a multiple\n    # of 7 * 8 (the largest given factor). This ensures we have a number whose\n    # factors include 1, 2, 4, 7, and 8.\n\n    # Calculate the tentative number by multiplying the largest prime factor with the largest given factor\n    tentative_number = 7 * 8\n    # Check if the tentative number has exactly 8 factors\n    count = 0\n    for i in range(1, tentative_number + 1):\n        if tentative_number % i == 0:\n            count += 1\n        if count > 8:\n            # If the count exceeds 8, this is not our number. Multiply with the next factor, which will be 14\n            # since 14 is a factor of every number and continues the pattern of doubling the factors of 7.\n            tentative_number = 14 * 8\n            count = 0\n            for j in range(1, tentative_number + 1):\n                if tentative_number % j == 0:\n                    count += 1\n                if count > 8:\n                    # Stop the process as we exceed the number of factors again. The pattern shows that\n                    # the optimum number has been reached with previous multiplication.\n                    break\n            # At this point, the tentative number with exactly 8 factors has been found\n            break\n    \n    # Return the number that has exactly 8 factors\n    return tentative_number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10\n    discounted_price = original_price - (original_price * discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # c for cows, g for goats\n    c, g = symbols('c g')\n\n    # Initial conditions based on the problem\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation3 = Eq(2 * g, (c + g + 240) - (c + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # Find initial number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let's denote x as the total number of cookies in the box\n    # James sold 1680 cookies in the first month and kept the rest\n    # Let's denote y as the number of cookies James kept in the first month\n    y = x - 1680\n\n    # In the second month, James sold 7/20 more than 1680, so he sold 1680 + (7/20)*1680\n    # Let's denote z as the number of cookies James kept in the second month\n    z = x - (1680 + (7/20)*1680)\n\n    # The problem states that the number of cookies James kept decreased by 3/20\n    # So, y - z = (3/20)*x\n    # Therefore, y - (x - (1680 + (7/20)*1680)) = (3/20)*x\n\n    # We can substitute y with x - 1680 and solve for x\n    # (x - 1680) - (x - (1680 + (7/20)*1680)) = (3/20)*x\n    # x - 1680 - x + 1680 + (7/20)*1680 = (3/20)*x\n    # (7/20)*1680 = (3/20)*x\n\n    # Solving for x:\n    # x = (7/20)*1680 / (3/20)\n    # x = (7/3)*1680\n    x = (7/3)*1680\n\n    return int(x)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # If Jolene is 6th from the front and Amy is 8th from the back,\n    # and Amy is directly behind Jolene, then the queue looks like this:\n    # [1, 2, 3, 4, 5, Jolene, Amy, 1, 2, 3, 4, 5, 6, 7]\n    # Where 1, 2, 3, etc., are other children in the queue.\n    # So to find the total number of children in the queue, we add:\n    # (position of Jolene from the front) + (position of Amy from the back) - 1\n    # (We subtract 1 because we've counted Jolene twice.)\n    children_in_queue = 6 + 8 - 1\n    return children_in_queue\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jump_count = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jump_count += 1\n        height_after_jumps += jump_up\n\n        if height_after_jumps >= total_height:\n            break\n        \n        if jump_count % 2 == 0:\n            height_after_jumps -= slide_down\n\n    return jump_count\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    # Side length of the garden\n    side_length = 432\n    # Distance between each sunflower\n    distance_apart = 4\n    # Number of sides of the pentagon\n    num_sides = 5\n    \n    # Since there is a sunflower on each corner, we should avoid double counting the corners.\n    # So for each side, we only count the sunflowers on the side without the corner at the end.\n    # Total sunflowers = number of sunflowers on each side * number of sides + 1 for the last corner\n    sunflowers_per_side = (side_length // distance_apart) - 1\n    total_sunflowers = (sunflowers_per_side * num_sides) + 1\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    budget_pounds = 3\n    budget_pence = budget_pounds * 100\n\n    num_stamps = budget_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t = symbols('t')  # t represents the usual time it takes for Ryan to drive to London\n    # Distance = speed * time\n    # Since the distance remains constant, we have two equations:\n    # 45 * t = 30 * (t + 2)\n    \n    equation = Eq(45 * t, 30 * (t + 2))\n\n    # Solve for t\n    usual_time = solve(equation, t)[0]\n    \n    return usual_time\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    first_term = 3\n    last_term = 10\n    total_terms = last_term - first_term + 1  # Counting from 3 to 10\n\n    # Sum of the first sequence from 3 to 10\n    sum_first_half = (total_terms * (first_term + last_term)) // 2\n\n    # Sum of the second sequence from 10 to 3 except the 10 (as it is included in the first half)\n    sum_second_half = sum_first_half - 10\n\n    # Total sum is the sum of both sequences\n    total_sum = sum_first_half + sum_second_half\n\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def splitting_ways(n, max_value):\n        if n == 0:\n            return 1\n        if n < 0 or max_value == 0:\n            return 0\n        return splitting_ways(n, max_value - 1) + splitting_ways(n - max_value, max_value)\n\n    return splitting_ways(5, 5) - 1  # Subtract 1 because we don't count the number itself as a split.\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10  # initial two values of the sequence\n    for _ in range(1997-2):\n        a, b = b, (a + b) % 3  # update a and b, and keep only remainder when divided by 3\n    return a  # remainder repeats with period of 3 after first 2 numbers\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2 / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    sweets, students = symbols('sweets students')\n\n    # If he gives each student 6 sweets, he will be short of 26 sweets\n    equation1 = Eq(sweets - 6 * students, -26)\n    # If he gives each student 5 sweets, he will be short of 5 sweets\n    equation2 = Eq(sweets - 5 * students, -5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sweets, students))\n    \n    return solutions[sweets]\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n    return mary\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')  # Define symbols for Leo and his son\n\n    equation1 = Eq(leo - son, son - 4)  # When Leo was his son's age\n    equation2 = Eq(leo + (leo - son), 70)  # When son reaches Leo's age, Leo will be 70\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Total number of singing performances\n    total_singing = 4\n    # Total number of dancing performances\n    total_dancing = 3\n    \n    # The minimum number of slots needed between dancing performances\n    slots_needed = total_dancing - 1\n\n    # The available slots to place singing performances\n    available_slots = slots_needed + 2  # Adding 2 for the start and the end positions\n\n    # The total number of ways to choose available_slots from total_singing\n    combinations = factorial(total_singing) // (factorial(available_slots) * factorial(total_singing - available_slots))\n\n    # Now for each combination, we arrange singing and dancing performances\n    arrangements = combinations * factorial(available_slots) * factorial(total_dancing)\n    \n    return arrangements\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age_now = 8\n    dad_age_now = 50\n    years_later = 0\n    while True:\n        heidi_age_future = heidi_age_now + years_later\n        dad_age_future = dad_age_now + years_later\n        if dad_age_future == 4 * heidi_age_future:\n            break\n        years_later += 1\n    return years_later\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the trees are neighboring and the difference in the number of fruits is always 1,\n    # we can assume that the trees grow fruits in an arithmetic sequence with a common difference of 1.\n    # Let's denote the number of fruits on the first tree as 'a'.\n    # Then the fruits on the successive trees will be 'a + 1', 'a + 2', ..., 'a + 7'.\n    \n    # Total fruits will be:\n    # a + (a + 1) + (a + 2) + ... + (a + 7) = 8*a + (1 + 2 + ... + 7)\n    # We can calculate the total of the arithmetic sequence 1 to 7 using the formula: n*(n+1)/2\n    total_additional_fruits = 7 * (7 + 1) // 2\n    \n    # So the equation becomes:\n    # 8*a + total_additional_fruits = 225\n    # We will solve for 'a' to get the number of fruits on the first tree\n    # If 'a' is a whole number, then it is possible\n    # If 'a' is not a whole number, then it is not possible because the number of fruits must be an integer\n    \n    a = (225 - total_additional_fruits) / 8\n    if a.is_integer():\n        return f\"It is possible, a = {int(a)}\"\n    else:\n        return \"It is not possible because the resulting 'a' is not an integer.\"\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    from math import factorial\n\n    # Prime factorization of 60! will determine the number of trailing zeros\n    num_zeros = 0\n    n = factorial(60)\n\n    while n % 10 == 0:\n        num_zeros += 1\n        n //= 10\n\n    return num_zeros\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    sum_initial = average_initial * 3\n    average_new = 150\n    sum_new = average_new * 4\n    fourth_number = sum_new - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2  # minutes per one-way trip\n\n    # Trips required to ferry all adventurers across the river\n    # Every full trip entails a return as well except for the last one\n    full_trips = adventurers // boat_capacity\n    remaining = adventurers % boat_capacity\n\n    # Time calculation\n    # A full round trip (across + return) takes 2 trips time\n    # The last trip does not require a return\n    total_time = (full_trips * 2 - 1) * trip_time\n    \n    # If there are adventurers left for another trip\n    if remaining > 0:\n        total_time += trip_time  # for the last one-way trip\n\n    return total_time\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq, sqrt\n\n    r = symbols('r')\n    equation = Eq(sqrt(216 * r) % 1, 0)  # The square root of a square number should be an integer\n    solution_r = solve(equation, r)\n\n    # Since we are looking for the value of r for which 216r is a square number,\n    # We can loop over the candidates and pick the valid one.\n    for possible_r in solution_r:\n        if (216 * possible_r).is_square:\n            return possible_r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    return 10.5 * 4\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    fraction = 3 / 13\n    number = 52\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # The snail climbs a net of 5 meters each full day (8m up during the day and 3m down at night)\n    net_distance_per_day = 8 - 3\n\n    # For the first 8 days, it does not reach the top and falls back by 3m at the end of the day\n    total_distance_after_8_days = net_distance_per_day * 8\n\n    # On the 9th day, it climbs 8m and does not slide down since it reaches the top of the well\n    # So we just need to add these 8 meters to the distance covered in the first 8 days to find the depth\n    depth_of_well = total_distance_after_8_days + 8\n\n    return depth_of_well\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 0.15\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 / 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Both French and Japanese teachers are counted in both french_teachers and japanese_teachers\n    # Using inclusion-exclusion principle, we subtract the total_teachers to avoid double counting\n    both_languages_teachers = french_teachers + japanese_teachers - total_teachers\n\n    # Now, to find the number of teachers who only know French,\n    # we subtract those who know both languages from all French teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one bag of sweets and one can of drink\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Rachel buys 3 bags and 5 cans for £4.90\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n\n    # Rosie buys 1 bag and 3 cans for £2.70\n    equation2 = Eq(1 * bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    # Total number of ways without restriction\n    total_ways = factorial(6)\n    # Number of ways where Teddy is on the furthest left\n    ways_with_teddy_first = factorial(5)\n    # Subtract the restricted ways from the total ways\n    ans = total_ways - ways_with_teddy_first\n    return ans\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    num_terms = 0\n    term = first_term\n    while term > 0:\n        num_terms += 1\n        term += difference\n        \n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if (number // 10 + number % 10) % 7 == 0:  # Sum of digits divisible by 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # The sum of an arithmetic sequence is the average of the first and last terms\n    # multiplied by the number of terms: sum = (first_term + last_term) * number_of_terms / 2\n    # Here, we have 7 consecutive numbers, hence their average is the fourth number.\n    # Let's denote the fourth (middle) number as 'a'.\n    # Hence, sum = a * number_of_terms\n    # Solving for 'a', we get a = sum / number_of_terms\n    # Therefore, the largest number, which is three more than the average, is a + 3.\n\n    sum_of_numbers = 280\n    number_of_terms = 7\n\n    average_number = sum_of_numbers / number_of_terms\n    largest_number = average_number + (number_of_terms // 2)\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def diff_of_squares(a, b):\n        return a**2 - b**2\n\n    ans = (\n        diff_of_squares(1000, 990) + \n        diff_of_squares(980, 970) +\n        diff_of_squares(20, 10)\n    )\n\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x be the bigger number, y be the smaller number\n\n    equation1 = Eq(x + y, 49)  # The sum of the two numbers is 49\n    equation2 = Eq(x - y, 9)   # The difference of the two numbers is 9\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    gcd = 75\n    possible_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    largest_sum = 0\n\n    for i in possible_digits:\n        for j in possible_digits:\n            if i != j:\n                for k in range(1, 10):  # Cannot start with 0, as we need a 3-digit number\n                    if k != i and k != j:\n                        # Create possible 3-digit numbers with two equal digits\n                        A_options = [int(str(k) + str(i) + str(i)), int(str(i) + str(k) + str(i)),\n                                     int(str(i) + str(i) + str(k))]\n                        B_options = [int(str(k) + str(j) + str(j)), int(str(j) + str(k) + str(j)),\n                                     int(str(j) + str(j) + str(k))]\n\n                        for A in A_options:\n                            for B in B_options:\n                                # Check if A and B are divisible by gcd (75)\n                                if A % gcd == 0 and B % gcd == 0:\n                                    # Update largest_sum if sum of A and B is greater\n                                    largest_sum = max(largest_sum, A + B)\n\n    return largest_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    sum = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    backtrack = False\n\n    for throw in throws:\n        if backtrack:\n            position -= throw\n            backtrack = False\n        elif throw == 6:\n            backtrack = True\n        else:\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for num_gums in range(1, 1000):  # Arbitrary upper limit assuming a reasonable number of gums\n        left_after_secretly_eating = num_gums - 2\n        shared_with_friends = left_after_secretly_eating // 3\n        if left_after_secretly_eating % 3 == 0:  # Check if the number can be divided by 3\n            left_after_sharing = left_after_secretly_eating - shared_with_friends\n            if left_after_sharing % 4 == 0:  # Check if the remaining can be equally divided in 4 lessons\n                return num_gums  # This is the smallest number of fruit gums that satisfies the conditions\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    total = kate + james\n    each_share = total / 2\n    james_gives = james - each_share\n\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # Total ways to arrange 5 magazines is factorial(5)\n    total_magazines = factorial(5)\n    \n    # Between each pair of storybooks, there must be at least 1 magazine.\n    # If we have 5 magazines (M) and 4 places to insert them between storybooks (S),\n    # It will look like this: S_M_S_M_S_M_S_M_S\n    # There are 5 storybooks and 4 'slots' for magazines between them, plus two 'slots' at the ends.\n    # This gives us 6 slots in total to place 5 magazines so the number of slots is (number_of_storybooks + 1).\n    \n    # Total ways to arrange 5 magazines in 6 slots (combination)\n    # Choosing 5 slots from 6 to place magazines is C(6, 5)\n    total_arrangements_for_magazines = factorial(6) // (factorial(5) * factorial(6 - 5))\n    \n    # Total possibilities is the product of the two arrangements\n    total_possibilities = total_magazines * total_arrangements_for_magazines\n\n    return total_possibilities\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmph = 3.6\n    time_seconds = 300\n\n    speed_meters_per_second = speed_kmph * (1000 / 3600)\n    distance_meters = speed_meters_per_second * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original sum of money\n    x = symbols('x')\n\n    # If the brothers alone had shared the money, they would get x/3 each, which is £20 more than x/4\n    equation = Eq((x / 3), (x / 4) + 20)\n\n    # Solve the equation to find the original sum of money\n    original_sum = solve(equation, x)[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = 21 // 2  # Since only odd terms are considered, divide by 2 to get the series length\n    sum_of_series = (n * (n + 1) // 2) ** 2  # Formula for the sum of cubes\n    return sum_of_series\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n    total_beads = red + green + blue\n\n    # Equations based on the problem statement\n    equation1 = Eq(red, 2 * green)\n    equation2 = Eq(blue - 112, red - 50)\n    equation3 = Eq(red + green + (blue - 112), 350)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Initial number of blue beads\n    initial_blue = solutions[blue]\n\n    return initial_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Since the average of 4 numbers is given, multiply by 4 to get the total sum of those 4 numbers.\n    sums_of_4 = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    \n    # The total sum of 4 numbers taken at a time should be the same for all 4-number combinations from the 5 numbers.\n    # This means that the sum of all 5 numbers is the sum of any 4-number combination plus the 5th number.\n    # Since this is true for any 5th number, for total consistency when you add up all sums_of_4, you end up counting each number 4 times.\n    total_sum_times_4 = sum(sums_of_4)\n    \n    # The 5 numbers must add up to the same total sum.\n    # Since we counted each number 4 times, divide by 4 to find the actual sum of the 5 numbers.\n    actual_total_sum = total_sum_times_4 // 4\n    \n    # Subtract from the actual total sum the smallest sum of 4 numbers to get the largest number.\n    largest_number = actual_total_sum - min(sums_of_4)\n    \n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / jared, 2 / 5)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_rate_first_three_years = 1.05\n    interest_rate_last_two_years = 1.10\n\n    # Calculate the amount after the first three years\n    amount_after_three_years = initial_investment * (interest_rate_first_three_years ** 3)\n\n    # Calculate the final amount after the last two years\n    final_amount = amount_after_three_years * (interest_rate_last_two_years ** 2)\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(n / 100) * 100 for n in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To share 16 sausages equally among 24 people, each person gets 16/24 of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    \n    # To achieve this, we could cut each sausage into 3 equal parts. This gives us a total of 16 * 3 = 48 parts.\n    # Now we have enough parts for each person to get 2 parts to make up their 2/3 share.\n    \n    # Thus, we need 16 sausages * 2 cuts per sausage = 32 cuts to ensure each person gets an equal share of sausage.\n    \n    num_sausages = 16\n    num_people = 24\n    parts_needed_per_person = num_sausages / num_people\n    # Simplify the fraction to find the minimum cuts per sausage\n    cuts_per_sausage = 3 - 1  # We get 3 parts by making 2 cuts\n\n    total_cuts = num_sausages * cuts_per_sausage\n\n    return total_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n\n    common_gcd = gcd(gcd(textbooks_chinese, textbooks_math), textbooks_nature)\n\n    return common_gcd\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    qiqi_speed = 60  # in m/min\n    weiling_speed = 72  # in m/min\n    weiling_late_start = 2  # in minutes\n    weiling_early_arrival = 4  # in minutes\n\n    # Let's assume the time taken by Qiqi to reach the school is t minutes.\n    # Then Weiling takes (t - weiling_late_start - weiling_early_arrival) minutes to cover the same distance.\n    # Hence, using the formula distance = speed * time, we get the following two equations:\n    # distance = qiqi_speed * t\n    # distance = weiling_speed * (t - weiling_late_start - weiling_early_arrival)\n\n    # Setting the two expressions for distance equal to each other gives us:\n    # qiqi_speed * t = weiling_speed * (t - weiling_late_start - weiling_early_arrival)\n\n    # Solving for t:\n    t = (weiling_speed * (weiling_late_start + weiling_early_arrival)) / (weiling_speed - qiqi_speed)\n\n    # Now, we can find the distance by substituting t back into the distance formula for Qiqi:\n    distance = qiqi_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    star_rate, nini_rate = symbols('star_rate nini_rate')  # Rates of work for Star and Nini\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)  # Star 5 hours + Nini 20 hours = 1 job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)  # Star 20 hours + Nini 8 hours = 1 job\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # Nini's rate of work is solutions[nini_rate]\n    # To find the time taken by Nini to finish the job by herself\n    # We use the fact that Rate * Time = Work\n    # Here, Work = 1 job\n    nini_time_to_finish = 1 / solutions[nini_rate]\n    \n    return nini_time_to_finish\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    rate_per_company = 900 / (4 * 5)  # total work done per company per day\n    total_work_required = 2700  # total length of the expressway to be built by 1 company\n    days_required = total_work_required / rate_per_company  # days required by 1 company\n    return days_required\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # Assuming the flight takes 3 hours and 40 minutes as per the given information\n    flight_duration = timedelta(hours=3, minutes=40)\n\n    # Richard meets the plane at 12 noon, St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n\n    # Calculate the Manchester departure time by subtracting the flight duration from the St Petersburg time\n    manchester_departure_time = st_petersburg_time - flight_duration\n\n    # Since St Petersburg is 3 hours ahead of Manchester, we need to add 3 hours to the calculated departure time\n    manchester_departure_time += timedelta(hours=3)\n\n    # Convert the time to a formatted string\n    ans = manchester_departure_time.strftime('%H:%M')\n\n    return ans\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    weight_in_kg = 5\n    ans = weight_in_kg * kg_to_lbs\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front\n    ben_position = 6\n    # Frank's position from the back\n    frank_position = 9\n    # People between Ben and Frank\n    people_between = 10\n\n    # Total people in the queue is calculated by adding Ben's position from the front,\n    # Frank's position from the back, and the people between them, then subtract 1\n    # because we counted Ben twice (from the front and as a person between).\n    total_people = ben_position + frank_position + people_between - 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_quantity = 6\n\n    latte = (coffee_quantity * total_ratio) / coffee_ratio\n    return latte\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10\n    remaining_sum = 9 * 9\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(102, 1000, 8):  # Starting from 102 (smallest 3-digit num with remainder 2 when div by 8)\n        if num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total = sum((-1)**(i+1) * (34 - 2*i) for i in range(1, 17))\n    return total\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    return 72 / 100 * 140\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    red, green, yellow = symbols('red green yellow')\n    \n    equation1 = Eq(red / (red + green + yellow), 2/5)\n    equation2 = Eq(green / (red + green + yellow), 1/3)\n    equation3 = Eq(red + green + yellow - yellow, 96)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, yellow))\n    \n    total_marbles = solutions[red] + solutions[green] + solutions[yellow]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    return 19 + 18 + 17 + 16 + 10\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    number = 42663\n    divisor = 9\n    remainder = (number % divisor) ** 2 % divisor\n    return remainder\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_digits = 0\n    current_number = 0\n    for i in range(1, 2016):\n        current_number = current_number * 10 + 1\n        sum_digits += current_number\n    return sum_digits % 10000\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for digits in product(range(10), repeat=3):\n        if sum(digits) == 8 and 100 <= digits[0] * 100 + digits[1] * 10 + digits[2] < 1000 and (digits[0] * 100 + digits[1] * 10 + digits[2]) % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a power of any number cyclic after certain power\n    # For number 13 the unit digit will be 3 and it will cycle like 3, 9, 7, 1\n    # For number 242, we can calculate 242 % 4 = 2 making the second number in cycle as the unit digit\n    thirteen_unit = [3, 9, 7, 1]\n    unit_digit_thirteen = thirteen_unit[242 % 4 - 1]  # Subtracting 1 because list index starts at 0\n    \n    # For number 17 the unit digit will be 7 and it will cycle like 7, 9, 3, 1\n    # For number 379, we can calculate 379 % 4 = 3 making the third number in cycle as the unit digit\n    seventeen_unit = [7, 9, 3, 1]\n    unit_digit_seventeen = seventeen_unit[379 % 4 - 1] # Subtracting 1 because list index starts at 0\n    \n    # For number 4 raised to any positive integer, the unit digit will be 6 after the first power\n    unit_digit_four_power = 6\n\n    # Combine to calculate the unit digit of the whole expression\n    ans = (unit_digit_thirteen + unit_digit_seventeen * unit_digit_four_power) % 10\n\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # You want to take marbles until you're sure to get 2 of the same color\n    # In the worst-case scenario, you take one of each color first\n    # So after taking 2 marbles, you could have one blue and one yellow\n    # The next marble you take will ensure you have 2 of the same color\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    return solve_congruence(*congruences)[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_age_product = 2019\n    next_year_threshold = 2020\n\n    # Search for John and Mary's age considering the constraints\n    for john_age in range(1, max_age_product):\n        mary_age = john_age - 1\n        if john_age * mary_age < max_age_product and (john_age + 1) * (mary_age + 1) > next_year_threshold:\n            # Now search for the children's ages with similar constraints\n            for child1_age in range(1, max_age_product):\n                child2_age = child1_age + 2\n                child3_age = child1_age + 4\n                children_product = child1_age * child2_age * child3_age\n                if children_product < max_age_product and (child1_age + 1) * (child2_age + 1) * (child3_age + 1) > next_year_threshold:\n                    total_age = john_age + mary_age + child1_age + child2_age + child3_age\n                    return total_age\n    return None\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    difference = -3\n    n = 7\n\n    seventh_term = first_term + (n - 1) * difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    \n    plates_cost = 36\n    cups_fraction = 3/4\n    remaining_fraction = 1/6\n    \n    # Equation: initial_money - plates_cost = cups_cost + remaining_money\n    # Where cups_cost = cups_fraction * (initial_money - plates_cost)\n    # and remaining_money = remaining_fraction * initial_money\n    # so we have initial_money - plates_cost = cups_fraction * (initial_money - plates_cost) + remaining_money\n    equation = Eq(initial_money - plates_cost, cups_fraction * (initial_money - plates_cost) + remaining_fraction * initial_money)\n\n    ans = solve(equation, initial_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = 100*a + 10*b + c + \\\n            100*b + 10*c + d + \\\n            100*c + 10*d + e + \\\n            100*d + 10*e + f + \\\n            100*e + 10*f + g + \\\n            100*f + 10*g + h + \\\n            100*g + 10*h + i\n        if A > max_sum:\n            max_sum = A\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Time taken for 1 mile in seconds\n    time_for_one_mile = 2 * 60 + 30\n    \n    # Time available in seconds for 1 hour\n    one_hour_in_seconds = 1 * 60 * 60\n    \n    # Number of miles in one hour\n    miles_in_one_hour = one_hour_in_seconds / time_for_one_mile\n    \n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    current_number = 8\n    while count < 2012:\n        if str(current_number)[0] == \"8\":\n            count += 1\n            if count == 2012:\n                ans = current_number\n        current_number += 1\n    return ans\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Arithmetic sequence sum formula: n/2 * (first_term + last_term) = total_sum\n    # Since there are 5 students, we have 5 terms. To find the middle term, we divide the total sum by 5.\n    total_balls = 160\n    middle_ball_count = total_balls // 5\n    \n    # The middle term in a sequence of 5 consecutive numbers is the third term.\n    # Because they are consecutive, the first term will be 2 less than the middle term.\n    # Hence, the last term, which is the maximum number of balls, will be 2 more than the middle term.\n    max_balls = middle_ball_count + 2\n\n    return max_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    total_envelopes = 15\n    min_in_box_A = 2\n    min_in_box_B = 4\n    min_in_box_C = 3\n\n    # Placing the minimum required envelopes in A, B, and C\n    remaining = total_envelopes - (min_in_box_A + min_in_box_B + min_in_box_C)\n\n    # Now we have to distribute the remaining envelopes in 4 boxes\n    # Each box can have from 0 to 'remaining' envelopes\n    # But since remaining envelopes are distributed in 4 boxes,\n    # we can solve this by placing an imaginary box to include the option of 0\n\n    # Adding 1 because we include the imaginary box\n    num_boxes = 4 + 1\n    count = 0\n\n    # Iterate through each possible distribution for the remaining envelopes\n    for a in range(0, remaining + 1):\n        for b in range(0, (remaining - a) + 1):\n            for c in range(0, (remaining - a - b) + 1):\n                for d in range(0, (remaining - a - b - c) + 1):\n                    # If the sum of distributed envelopes in these iterations equals the remaining,\n                    # we have a valid distribution.\n                    if a + b + c + d == remaining:\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum([i**2 for i in range(2, 21, 2)])\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Tax rates\n    rate_1 = 0.15\n    rate_2 = 0.20\n    \n    # Income limits\n    limit_1 = 20000\n    \n    # Tax paid\n    tax_paid = 7000\n    \n    # If tax_paid is less than or equal to tax from first segment\n    if tax_paid <= limit_1 * rate_1:\n        income = tax_paid / rate_1\n    else:\n        # Calculate income from the second tax segment\n        income = ((tax_paid - (limit_1 * rate_1)) / rate_2) + limit_1\n    \n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 / 10\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal = list(format(1 / 13, '.3000f'))[2:]  # Convert to string and remove '0.'\n    period = len(decimal)  # Get the period length\n    target_index = 2021  # 2022nd digit is at index 2021 (0-based indexing)\n    digit = decimal[target_index % period]  # Find the repeating digit at the target index\n    return int(digit)\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope_lengths = [28, 14, 56]\n    longest_piece_length = gcd(gcd(rope_lengths[0], rope_lengths[1]), rope_lengths[2])\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    \n    # Let's suppose all animals were chickens (2 legs each)\n    all_chickens_legs = total_animals * 2\n    \n    # The number of excess legs when assuming all are chickens are the rabbit legs (since rabbits have 2 more legs than chickens)\n    excess_legs = total_legs - all_chickens_legs\n    \n    # Since each rabbit contributes 2 more legs, the number of rabbits is half the excess legs\n    rabbits = excess_legs // 2\n    \n    # The number of chickens would be the total animals minus the number of rabbits\n    chickens = total_animals - rabbits\n    \n    return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of packs in both stores\n    x = symbols('x')\n    # After selling 290 packs, Store A has x - 290 packs\n    # Store B has 3 times the packs of Store A\n    # Set up the equation based on the condition\n    equation = Eq(3 * (x - 290), x)\n    \n    # Solve the equation for x\n    initial_packs = solve(equation, x)[0]\n    \n    # The total initial packs in both stores is 2 * x\n    total_initial_packs = 2 * initial_packs\n    \n    return total_initial_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    # Total number of students\n    total_students = 30\n\n    # Total number of boys\n    boys = 17\n\n    # Boys with a packed lunch\n    boys_packed = 4\n\n    # Girls with a school lunch\n    girls_school = 7\n\n    # Students who went home, of which 3 are boys\n    home_students = 5\n    boys_home = 3\n\n    # Girls who went home\n    girls_home = home_students - boys_home\n\n    # Number of girls\n    girls = total_students - boys\n\n    # Girls who have packed lunch = total girls - girls who had school lunch - girls who went home\n    girls_packed = girls - girls_school - girls_home\n\n    # Total packed lunch = boys with a packed lunch + girls with a packed lunch\n    total_packed = boys_packed + girls_packed\n\n    return total_packed\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_price = 20 * 6\n    total_milk_chocolate_price = 20 * 5\n    total_strawberry_chocolate_price = 20 * 4\n\n    total_chocolates = 20 + 20 + 20\n    total_price = total_dark_chocolate_price + total_milk_chocolate_price + total_strawberry_chocolate_price\n\n    average_price = total_price / total_chocolates\n\n    return average_price\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_to_make = 3600\n\n    # Calculate the daily rate of production\n    daily_rate = sets_made_in_5_days / 5\n\n    # Calculate the total number of days to make 3600 sets\n    total_days = total_sets_to_make / daily_rate\n\n    return int(total_days)\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    max_num = 100\n    divisor = 12\n    ans = (max_num - 1) // divisor\n    return ans\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19  # time in seconds to pass a tree\n\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Man's rate of drinking the orange juice per day\n    man_rate = 1 / 15\n    # Combined rate of drinking the orange juice per day\n    combined_rate = 1 / 12\n    # Wife's rate of drinking the orange juice per day\n    wife_rate = combined_rate - man_rate\n    # Wife's time to finish drinking the barrel of orange juice on her own\n    wife_time = 1 / wife_rate\n\n    return wife_time\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    number_of_friends = 6\n    \n    pears_per_friend = total_pears // number_of_friends\n    strawberries_per_friend = total_strawberries // number_of_friends\n    chocolates_per_friend = total_chocolates // number_of_friends\n    \n    fruits_per_friend = pears_per_friend + strawberries_per_friend  # Assuming chocolate is not considered a fruit.\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    offer_books_bought = 3\n    offer_books_free = 1\n\n    # Calculate the number of sets of books he can get with the offer\n    sets_of_books = 5 // (offer_books_bought + offer_books_free)\n\n    # Calculate the number of books left after using the offer\n    books_left = 5 % (offer_books_bought + offer_books_free)\n\n    # Calculate total price\n    total_price = sets_of_books * price_per_book * offer_books_bought\n    total_price += books_left * price_per_book\n\n    return total_price\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c represent the number of children\n    children = symbols('children')\n    \n    # Based on the given information, we can set up the following equations\n    # women = 2/5 * total_people => total_people = women / (2/5) => total_people = 5 * women / 2\n    # men = 3 * children\n    # women = children + 190\n    # total_people = women + men + children\n    # so, 5 * women / 2 = women + 3 * children + children\n    \n    women = children + 190\n    \n    # Substitute children with (women - 190)\n    equation = Eq(5 * women / 2, women + 3 * (women - 190) + (women - 190))\n    \n    # Solve the equation for women\n    solutions = solve(equation, women)\n    women_num = solutions[0]\n    \n    # Using women number to calculate total people\n    total_people = 5 * women_num / 2\n    \n    return total_people\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g.\n    # We know that the total number of pupils is 40: b + g = 40\n    # The total number of pencils is the average times the number of pupils,\n    # which is 35 * 40. This total can also be expressed as the sum of the\n    # product of the number of boys and the average pencils each boy has\n    # plus the product of the number of girls and the average pencils each\n    # girl has: 20*b + 60*g = 35 * 40\n    # We can solve these two equations to find the number of boys (b).\n\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    avg_boys = 20\n    avg_girls = 60\n\n    # Rewrite the second equation in terms of g: g = 40 - b\n    # Substitute g in the pencil equation:\n    # 20*b + 60*(40 - b) = total_pencils\n    # Solve for b\n    b = (total_pencils - avg_girls * total_pupils) / (avg_boys - avg_girls)\n    \n    return int(b)\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    number = 7059\n    remainder = number % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    \n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    price_apple, price_banana = symbols('price_apple price_banana')\n    \n    # Equation representing the cost for 6 apples and 7 bananas\n    equation1 = Eq(6 * price_apple + 7 * price_banana)\n\n    # Equation representing the cost for 8 apples and 4 bananas\n    equation2 = Eq(8 * price_apple + 4 * price_banana)\n    \n    # Since both options leave him with no change whatsoever, they cost the same\n    equation_cost_equal = Eq(6 * price_apple + 7 * price_banana, 8 * price_apple + 4 * price_banana)\n    \n    # Solving the above equation for the price of one apple and one banana\n    solved_prices = solve((equation_cost_equal), (price_apple, price_banana))\n    \n    # Now we need to find out how many bananas he could buy with the same amount of money.\n    # The cost of bananas is the only required variable since the total money he has does not change.\n    bananas_only = equation1.lhs.subs(solved_prices) / solved_prices[price_banana]\n\n    return int(bananas_only)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from math import comb\n\ndef solution():\n    total_envelopes = 15\n    min_A = 2  # At least 2 envelopes in box A\n    min_B = 4  # At least 4 envelopes in box B\n    min_C = 3  # At least 3 envelopes in box C\n\n    # First, place the minimum number of envelopes in boxes A, B, and C.\n    remaining_envelopes = total_envelopes - (min_A + min_B + min_C)\n\n    # Now distribute the remaining envelopes in 4 mailboxes.\n    # We add one \"dummy\" to each mailbox to ensure that there is at least one envelope, and then remove \n    # them at the end. This is equivalent to placing 'remaining_envelopes' in '4 + 4 - 1' slots.\n    ans = comb(remaining_envelopes + 4 - 1, 4 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # The incorrect divisor used by Leo (without decimal point)\n    incorrect_divisor = 211\n\n    # The difference between the true result and what Leo obtained\n    difference = 98.01\n\n    # The true divisor (with the decimal point correctly placed)\n    true_divisor = 2.11\n\n    # Calculate the dividend using the incorrect result\n    # The incorrect result is what Leo got plus the difference to the true result\n    incorrect_result = 0\n    dividend = incorrect_result * incorrect_divisor + difference * incorrect_divisor\n\n    # Now we can find the true result by dividing the dividend by the true divisor\n    true_result = dividend / true_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both = math_students + art_students - total_students\n\n    return both\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, choon_mui = symbols('john choon_mui')\n    \n    # Initial condition: John and Choon Mui had the same amount of money\n    equation1 = Eq(john, choon_mui)\n    \n    # John spent $30: john - 30\n    # Choon Mui spent $150: choon_mui - 150\n    # John has 4 times the money left that Choon Mui has: john - 30 = 4 * (choon_mui - 150)\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, choon_mui))\n    \n    # John's amount after spending $30\n    john_left = solutions[john] - 30\n    \n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of male visitors and female visitors on the first day\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # First day relationships\n    eq1 = Eq(male_first_day, female_first_day + 450)\n\n    # Second day, female visitors increased by 15%\n    female_second_day = female_first_day + 0.15 * female_first_day\n\n    # Second day, male visitors decreased by 18%\n    male_second_day = male_first_day - 0.18 * male_first_day\n\n    # Total visitors on the second day\n    eq2 = Eq(male_second_day + female_second_day, 1354)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (male_first_day, female_first_day))\n\n    # We need to return the number of male visitors on the first day\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining = 15\n    sold_second = remaining * 2 + 4\n    total_after_first_sale = sold_second + remaining\n    initial_eggs = (total_after_first_sale - 5) * 2\n\n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60  # converting 15 minutes to hours\n    distance_miles = miles_per_hour * time_hours\n    miles_to_kilometers = 1.60934  # 1 mile = 1.60934 kilometers\n    distance_kilometers = distance_miles * miles_to_kilometers\n    return distance_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10\n\n    increase = (initial_amount * percentage_increase) / 100\n    final_amount = initial_amount + increase\n\n    return final_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # in meters\n    scale = 20  # scale as a ratio (1:20)\n\n    model_length_m = actual_length_m / scale\n    model_length_cm = model_length_m * 100  # converting meters to centimeters\n\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n    \n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    \n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # This is a case of derangement problem, also known as !n or subfactorial n.\n    # Derangement formula: !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # For n=4, the derangement is:\n    # !4 = 4! * (1 - 1/1! + 1/2! - 1/3! + 1/4!) = 24 * (1 - 1 + 1/2 - 1/6 + 1/24) = 9\n\n    n = 4\n    derangement = factorial(n)\n\n    # Add the terms of the series\n    for i in range(n+1):\n        derangement += int((-1)**i * factorial(n) / factorial(i))\n\n    return derangement\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n\n    balloons_per_pupil = total_balloons // num_pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    daily_climb = 3\n    nightly_slide = 1\n    net_progress = daily_climb - nightly_slide\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += daily_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= nightly_slide\n\n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate John's hourly wage\n    hourly_wage = 78 / 6.5\n\n    # Calculate how much John would earn working 8 hours a day for a week (7 days)\n    total_weekly_earnings = hourly_wage * 8 * 7\n\n    # Check if this amount is sufficient to pay off his debt of $700\n    can_pay_debt = total_weekly_earnings >= 700\n\n    # Return a tuple with his weekly earnings and a boolean indicating if he can pay off the debt\n    return (total_weekly_earnings, can_pay_debt)\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Assign the factorial values for 0 to 9 as per the puzzle constraints\n    factorials = {\n        '0': 1,\n        '1': 1,\n        '2': 2,\n        '3': 6,\n        '4': 24,\n        '5': 120,\n        '6': 720,\n        '7': 5040,\n        '8': 40320,\n        '9': 362880\n    }\n\n    # Iterate through all numbers in the range [10, 100000] as the possible values of A\n    # The upper limit is a rough estimate since factorials grow fast and value of A\n    # cannot be too large\n    for A in range(10, 100000):\n        if sum(factorials[digit] for digit in str(A)) == A:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # Arjun gets his hair cut every 14 days (2 weeks)\n    yahya_period = 10  # Yahya gets his hair cut every 10 days\n\n    # Find the least common multiple of the two periods\n    days_until_next_cut = lcm(arjun_period, yahya_period)\n\n    return days_until_next_cut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    first_distance = 280\n    first_speed = 7\n    middle_distance = 400\n    middle_speed = 5\n    last_distance = 800 - first_distance - middle_distance\n    last_speed = 8\n\n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    last_time = last_distance / last_speed\n\n    total_time = first_time + middle_time + last_time\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(\"2{}9{}\".format(digit1, digit2))\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Since there are no trees at either end, we start planting 7m away from the start and end 7m before the end.\n    effective_length = highway_length - 2 * tree_spacing\n    \n    # Find how many intervals of 7 meters fit into the effective planting length.\n    num_trees = effective_length // tree_spacing\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    final_stamps = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = final_stamps + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note_value = 50\n    shoe_cost = 30\n    loss_due_to_fake_note = fake_note_value\n    total_loss = loss_due_to_fake_note + shoe_cost\n    \n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    # This is a sum of an arithmetic sequence (consecutive integers).\n\n    # First term (a1) is 21\n    a1 = 21\n\n    # Last term (an) is 99\n    an = 99\n\n    # The number of terms (n) can be calculated using the formula: n = (an - a1) / d + 1\n    # where d is the difference between the terms, which is 1 in this case.\n    d = 1\n    n = (an - a1) // d + 1\n\n    # The sum of an arithmetic sequence can be calculated using the formula: S = n/2 * (a1 + an)\n    S = n / 2 * (a1 + an)\n    \n    return int(S)\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Since A, B and C always have to be together, we can treat them as one unit.\n    # Now we have 8 units to arrange (ABC, D, E, F, G, H, I, J)\n    units_to_arrange = 8\n\n    # The 8 units can be arranged in 8! ways.\n    arrangements_for_units = factorial(units_to_arrange)\n\n    # Within the ABC unit, A, B and C can be arranged amongst themselves in 3! ways.\n    arrangements_within_unit = factorial(3)\n\n    # Total arrangements are the product of the two counts above.\n    total_arrangements = arrangements_for_units * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # The initial number is a concatenation of numbers from 1 to 30.\n    # To form the smallest possible number after removing 46 digits, we should aim to remove digits from the left as much as possible.\n    # Hence, we will try to remove 46 digits from the left, starting with the higher numbers, as they contribute more to the size of the number.\n    \n    num_str = ''.join(map(str, range(1, 31)))  # concatenating numbers from 1 to 30\n    min_number = num_str[46:]  # removing the first 46 digits\n\n    # if leading zeros are resulted from removal, strip them away.\n    min_number = min_number.lstrip('0')\n    \n    # If we end up with an empty string, it means we have removed all non-zero digits and the smallest number is 0.\n    # But the question specifies that the new number cannot be 0, so we make sure that does not happen.\n    if not min_number:  \n        # In this case, we'll try putting the smallest digit (1) at the beginning\n        # and then the rest of the digits with the first 46 removed.\n        min_number = '1' + num_str[47:]  \n    \n    # The smallest number will be when the leftmost digit is as small as possible after the removal.\n    return min_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, we must consider\n    # the worst-case scenario where we pick all blue balls first.\n    # As there are 6 blue balls, we would have to pick all of them\n    # plus one more to guarantee getting at least one white ball.\n\n    total_blue_balls = 6\n    # We take all blue balls plus one white ball to ensure we have a white ball\n    balls_needed = total_blue_balls + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_pick = 4\n\n    ans = comb(total_students, students_to_pick)\n    \n    return ans\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james * (1/2)\n    ben = linda * (1/4)\n    \n    total_marbles = james + linda + ben\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum1 = sum(range(1, 5))\n    sum2 = sum(range(2018, 2021))\n    ans = (sum1 * 1) - (sum2 * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n    bundle_length = (number_of_rulers * ruler_length) - (overlap_length * (number_of_rulers - 1))\n    return bundle_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate the distance Star jogs\n    time_jogging = 1  # time from 6:30 AM to 7:30 AM is 1 hour\n    speed_jogging = 6  # Star jogs at 6 miles per hour\n    distance_jogging = time_jogging * speed_jogging\n\n    # Calculate the distance Star walks\n    time_walking = 2  # time from 7:30 AM to 9:30 AM is 2 hours\n    speed_walking = 5  # Star walks at 5 miles per hour\n    distance_walking = time_walking * speed_walking\n\n    # Calculate the total distance\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    exchange_rate = 7\n    new_cups = 0\n    \n    while total_used_cups >= exchange_rate:\n        # Calculate how many new cups can be made in this cycle\n        made_now = total_used_cups // exchange_rate\n        new_cups += made_now\n\n        # Calculate remaining cups, including the new ones just made\n        total_used_cups = total_used_cups - made_now * exchange_rate + made_now\n    \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    total_number = 2000\n    number_to_subtract = 222\n\n    ans = total_number - number_to_subtract\n\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to centimeters\n    spacing = 15  # spacing between cauliflowers in centimeters\n    first_cauliflower_position = 20  # distance from the start in centimeters\n    cauliflower_width = 45  # width of a cauliflower in centimeters\n\n    # Calculate the total space used by one cauliflower and its spacing\n    total_space_per_cauliflower = spacing + cauliflower_width \n    \n    # Calculate the available planting length by subtracting the space before the first cauliflower\n    available_length = plot_length_cm - first_cauliflower_position\n    \n    # Calculate the number of cauliflowers that can be planted\n    num_cauliflowers = available_length // total_space_per_cauliflower\n    \n    return num_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Calculate the total number of pages used over the 6 days\n    total_pages = (14 * 3) + (9 * 2) + 12\n\n    # Calculate the average number of pages used per day\n    average_per_day = total_pages / 6\n\n    return average_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    students_A = 8\n    students_B = 12\n    students_C = 20\n\n    common_factor_ABC = gcd(gcd(students_A, students_B), students_C)\n\n    return common_factor_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the number of members in the Bowling Club\n    # Let 'ba' be the number of members in the Badminton Club\n    b, ba = symbols('b ba')\n\n    # The Badminton Club had thrice as many members as the Bowling Club initially\n    equation1 = Eq(ba, 3 * b)\n    \n    # After 36 members left the Badminton Club and 4 left the Bowling Club, both had the same number of members\n    equation2 = Eq(ba - 36, b - 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, ba))\n    \n    # The final number of members each club has after the given members left\n    final_members = solutions[b] - 4\n\n    return final_members\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # speed of sound in meters per second\n    distance = 1.5 * 10**3  # distance in meters (1.5 kilometers)\n    \n    time = distance / speed_of_sound  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(72)\n    num_factors = len(factors)\n\n    return num_factors\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    \n    difference = number1 - number2\n    \n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # Find the number of cards using average = total / amount\n    num_cards = total_value // average_value\n\n    # As difference between greatest and smallest is 6 and all numbers are 3 digit odd numbers,\n    # the cards must be consecutive odd numbers. We take the middle value(s) as the base (average_value)\n    # and find the smallest number.\n    if num_cards % 2 == 1:\n        # Odd number of cards, there is a single middle card, which is the average\n        smallest_number = average_value - ((num_cards // 2) * 2)\n    else:\n        # Even number of cards, there are two middle cards, average is between them\n        smallest_number = average_value - ((num_cards // 2 - 1) * 2) - 1\n\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # Initialize the count of the 2's and 5's to zero\n    count_2 = 0\n    count_5 = 0\n    \n    # For each number in the range 301 through 999\n    for i in range(301, 1000):\n        # Temporarily hold the number in a variable\n        n = i\n        # While n is divisible by 2, divide it by 2 and increase the count of 2's\n        while n % 2 == 0:\n            n = n // 2\n            count_2 += 1\n        # While n is divisible by 5, divide it by 5 and increase the count of 5's\n        while n % 5 == 0:\n            n = n // 5\n            count_5 += 1\n    \n    # The number of zeros will be the minimum of count_2 and count_5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum([1/i for i in range(10, 20)])\n    integer_part = int(sum_of_fractions)\n    return integer_part\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3 * x - (2 * x + 3), 5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for the number of boys (B) and girls (G) in the school\n    B, G = symbols('B G')\n\n    # Equation 1: Total number of pupils\n    pupils_eq = Eq(B + G, 1690)\n\n    # Equation 2: Number of boys is 90 more than number of girls\n    boys_eq = Eq(B, G + 90)\n    \n    # Solve the system of equations for B and G\n    solutions = solve((pupils_eq, boys_eq), (B, G))\n    \n    # Extract solutions for B and G\n    number_of_boys = solutions[B]\n    number_of_girls = solutions[G]\n\n    # Define symbols for the number of girls who can swim (GS) and who cannot swim (GNS)\n    GS, GNS = symbols('GS GNS')\n    \n    # Girl swimmers to non-swimmers ratio, 31:49\n    girls_ratio_eq = Eq(GS / GNS, 31 / 49)\n    \n    # Total number of girls is the sum of those who can swim and those who cannot\n    girls_total_eq = Eq(GS + GNS, number_of_girls)\n    \n    # Solve the system of equations for GS and GNS\n    girls_solutions = solve((girls_ratio_eq, girls_total_eq), (GS, GNS))\n    \n    # Extract solutions for GS and GNS\n    girls_can_swim = girls_solutions[GS]\n    girls_cannot_swim = girls_solutions[GNS]\n\n    # Define symbols for the number of boys who can swim (BS) and who cannot swim (BNS)\n    BS, BNS = symbols('BS BNS')\n    \n    # Boys swimmers to non-swimmers difference is -120\n    boys_diff_eq = Eq(BS, BNS - 120)\n    \n    # Total number of boys is the sum of those who can swim and those who cannot\n    boys_total_eq = Eq(BS + BNS, number_of_boys)\n    \n    # Solve the system of equations for BS and BNS\n    boys_solutions = solve((boys_diff_eq, boys_total_eq), (BS, BNS))\n    \n    # Extract solutions for BS and BNS\n    boys_can_swim = boys_solutions[BS]\n    boys_cannot_swim = boys_solutions[BNS]\n\n    # Calculate the total number of pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # Speed of rabbit in meters per minute\n    turtle_speed = 30   # Speed of turtle in meters per minute\n    race_distance = 6990  # Total race distance in meters\n    rabbit_sleep_time = 215  # Time in minutes that rabbit sleeps\n    time_to_sleep_after = 10  # Time in minutes after which rabbit sleeps\n    \n    # Distance covered by rabbit until it goes to sleep\n    rabbit_distance_before_sleep = rabbit_speed * time_to_sleep_after\n    \n    # Time for turtle to finish the race\n    turtle_race_time = race_distance / turtle_speed\n    \n    # Rabbit's remaining distance after the sleep\n    rabbit_remaining_distance = race_distance - rabbit_distance_before_sleep\n    \n    # Rabbit's remaining time to finish the race after waking up\n    rabbit_remaining_time = rabbit_remaining_distance / rabbit_speed\n    \n    # Total time rabbit takes to finish the race including sleep time\n    rabbit_total_time = rabbit_remaining_time + rabbit_sleep_time + time_to_sleep_after\n    \n    if rabbit_total_time < turtle_race_time:\n        # Rabbit wins. Calculate how much faster.\n        winner = \"rabbit\"\n        difference_in_time = turtle_race_time - rabbit_total_time  # Time difference\n        distance_difference = difference_in_time * turtle_speed  # Distance difference\n    else:\n        # Turtle wins. Calculate how much faster.\n        winner = \"turtle\"\n        difference_in_time = rabbit_total_time - turtle_race_time  # Time difference\n        distance_difference = (turtle_race_time - (rabbit_sleep_time + time_to_sleep_after)) * rabbit_speed\n    \n    result = (winner, distance_difference)\n    return result\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 1.10 # 10% increase is 0.10, so the total increase rate is 1+0.10\n\n    # Reversing the increase by dividing since we're going backwards in time\n    initial_amount = final_amount / (increase_rate ** 2) # Two years of increase\n    \n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways to arrange 7 people\n    total_ways = factorial(7)\n\n    # Calculate ways in which the 3 people who don't want to stand next\n    # to each other are placed next to each other\n    # Firstly, treat the 3 people as a single unit. Now we have 5 units\n    # to arrange (4 individual people + 1 group of 3 people)\n    group_as_one = factorial(5)\n    \n    # Within this group of 3, they can be arranged in 3! ways.\n    arrangements_within_group = factorial(3)\n\n    # Multiply the number of arrangements of the 5 units with the\n    # number of ways the group of 3 can arrange themselves\n    unwanted_ways = group_as_one * arrangements_within_group\n\n    # The number of valid ways is the total number minus unwanted ways\n    ans = total_ways - unwanted_ways\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    rows = 25\n    \n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    last_term = first_term + (rows - 1) * common_difference\n    \n    total_athletes = (first_term + last_term) * rows // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    \n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            count += n // p\n            n //= p\n        return count\n    \n    ans = min(count_factors(789, 2), count_factors(789, 5))\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let the number of students in Team B be x\n    # Team A's total score is 20 * 76\n    # Team B's total score is x * 67\n    # Average score of two teams combined is 70\n    # Therefore, the total score for both teams is (20 + x) * 70\n    # We have the equation (20 * 76 + x * 67) = (20 + x) * 70\n\n    # Solving for x\n    x = symbols('x')\n    equation = Eq((20 * 76 + x * 67), (20 + x) * 70)\n    solution = solve(equation, x)\n    \n    # Returning the number of students in Team B\n    return solution[0]\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    # To ensure that the school with the most participants has at least 4,\n    # we divide the total number of participants by 3, because if each \n    # school had only 3 participants, an additional participant would be\n    # required to guarantee that at least one school had 4 participants.\n    \n    total_participants = 100\n    \n    # Using the Pigeonhole Principle\n    max_schools = total_participants // 3\n\n    # If there's a remainder when dividing by 3, it means we need an additional\n    # school to accommodate for at least one school having 4 participants.\n    if total_participants % 3 != 0:\n        max_schools += 1\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits)\n    min_product = float('inf')\n    for perm in perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        if num1 > 99 and num2 > 99:\n            product = num1 * num2\n            min_product = min(min_product, product)\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)\n    all_combinations = list(permutations(digits, 7))\n    valid_combinations = [(a*1000 + b*100 + c*10 + d, e*100 + f*10 + g) \n                          for a, b, c, d, e, f, g in all_combinations \n                          if a*1000 + b*100 + c*10 + d + e*100 + f*10 + g == 1993]\n    \n    products = [abcd * efg for abcd, efg in valid_combinations]\n    max_product = max(products)\n    min_product = min(products)\n    \n    return max_product - min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25\n    max_dice_roll = 6\n\n    # Calculate minimum number of rolls required by dividing the total required steps\n    # by the maximum roll value (since we want to minimize the number of rolls)\n    min_rolls = (min_steps + max_dice_roll - 1) // max_dice_roll\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -50\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if sum(map(int, str(i))) == 15:  # Check if the sum of the digits equals 15\n            return i  # Return the first occurrence\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    climb_per_hour = 40\n    slip_back = 10\n    effective_climb = climb_per_hour - slip_back\n    hours = 0\n\n    while total_distance > 0:\n        hours += 1\n        total_distance -= climb_per_hour\n        if total_distance <= 0:\n            break\n        total_distance += slip_back\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    # Starting from 29 and going downwards to check for primality\n    for num in range(29, -1, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Total typists initially\n    total_typists = 5\n    \n    # Initial words typed\n    initial_words = 6000\n    \n    # Time taken for initial words (converted to hours)\n    time_for_initial_words = 20 / 60\n    \n    # Rate of typing for the group\n    group_rate = initial_words / time_for_initial_words\n    \n    # Rate of typing per typist\n    typist_rate = group_rate / total_typists\n    \n    # Number of typists after 2 fell sick\n    remaining_typists = total_typists - 2\n    \n    # New group rate after typists fell sick\n    new_group_rate = remaining_typists * typist_rate\n    \n    # Number of words to be typed\n    words_to_type = 9000\n    \n    # Time required to type the remaining words\n    time_required = words_to_type / new_group_rate\n    \n    # Convert time required to minutes\n    time_required_minutes = time_required * 60\n    \n    return time_required_minutes\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_money_spent = cabbage_price * cabbages_bought\n    lettuce_price = total_money_spent / lettuces_bought\n\n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_on_shoes = 97\n    saved_money = total_money - spent_on_shoes\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    # Initial number of plants\n    initial_plants = 11\n\n    # Distance between first and last plant\n    total_distance = 30\n\n    # Initial spacing between plants is total distance divided by (number of plants - 1)\n    initial_interval = total_distance / (initial_plants - 1)\n\n    # Number of plants after removing 8\n    remaining_plants = initial_plants - 8\n\n    # New interval between the remaining plants\n    new_interval = initial_interval * (initial_plants - 1) / (remaining_plants - 1)\n\n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes\n    end_time = (14 * 60) + 5     # Convert end time to minutes\n    duration = end_time - start_time  # Duration of the phone call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration * cost_per_minute  # Total cost of the phone call\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(20)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    result = 0.40 * 320\n    return result\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        num_str = str(num)\n        if '2' in num_str and '3' in num_str:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    one_day = timedelta(days=1)\n    \n    count_sundays = 0\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            count_sundays += 1\n        current_date += one_day\n        \n    return count_sundays\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of an apple and a peach\n    apple, peach = symbols('apple peach')\n\n    # Equation 1: 4 apples + 3 peaches = £10\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n\n    # Equation 2: 2 apples + 2 peaches = £6\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    # Get the cost of an apple\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_tart, strawberry_tart = symbols('apple_tart strawberry_tart')\n    \n    # The cost equations\n    eq1 = Eq(apple_tart, 2 * strawberry_tart)\n    eq2 = Eq(0.40 * strawberry_tart + apple_tart * (0.40 / 2), 40)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (apple_tart, strawberry_tart))\n\n    # Total number of tarts\n    total_tarts = solutions[apple_tart] + solutions[strawberry_tart]\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from sympy import lcm\n\n    # Traffic light timings in seconds\n    first_light_timing = 30  # half a minute\n    second_light_timing = 45  # 0.75 minutes\n\n    # Calculate the least common multiple (LCM) of the first two traffic lights\n    lcm_timing = lcm(first_light_timing, second_light_timing)\n\n    # The third light timing has to be a factor of 9 minutes (540 seconds)\n    # and should be at least 30 seconds long.\n    nine_minutes_in_seconds = 9 * 60\n\n    # Initialize the shortest time for the third light\n    third_light_timing = lcm_timing\n    while third_light_timing < nine_minutes_in_seconds:\n        if nine_minutes_in_seconds % third_light_timing == 0 and third_light_timing >= 30:\n            break  # Found the smallest timing for the third light that fits the conditions\n        third_light_timing += lcm_timing\n\n    return third_light_timing\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "from math import factorial\n\ndef solution():\n    # There are 5 people to pick from 5 skiboards, which is a permutation problem\n    # The number of ways to distribute 5 distinct skiboards among 5 people is 5!\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the total number of pieces in the puzzle\n    x = symbols('x')\n\n    # On the first day, 20% of x pieces are fitted\n    # On the second day, 60 more pieces are fitted\n    # After two days, the ratio of fitted to unfitted pieces is 2:5\n\n    # Let's write the equation for the above situation\n    equation = Eq((0.20 * x + 60) / (x - (0.20 * x + 60)), 2/5)\n\n    # Solve the equation for x\n    total_pieces = solve(equation, x)\n\n    return total_pieces[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_left = 18\n    tony_position_right = 17\n\n    tony_position_left = total_children - tony_position_right + 1\n    children_between_henry_tony = abs(henry_position_left - tony_position_left) + 1\n\n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_in_1m = 1000  # There are 1000 millimeters in 1 meter\n    total_mm = 2 * mm_in_1m\n    return total_mm\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    not_multiples_of_10 = total_numbers - (total_numbers // 10)\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    repayment_percentage = 30 / 100\n    amount_paid_back = original_amount * repayment_percentage\n    amount_still_owed = original_amount - amount_paid_back\n    \n    return amount_still_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Assign the known values to variables (Cats, Dogs have 4 legs each, Rabbit has 4, Birds have 2)\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of each pet\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Total legs from cats, dogs, and rabbits\n    total_legs_known_pets = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n\n    # Total number of legs\n    total_legs = 28\n\n    # Calculate the number of legs that birds have\n    bird_legs_total = total_legs - total_legs_known_pets\n\n    # Calculate the number of birds\n    birds = bird_legs_total / bird_legs\n    \n    return int(birds)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    # Jack's speed is 15 km/h and Rose's speed is 10 km/h.\n    jack_speed = 15\n    rose_speed = 10\n    \n    # They meet after 10 hours.\n    time_to_meet = 10\n    \n    # The distance each travels is their speed multiplied by the time until they meet.\n    distance_jack_travels = jack_speed * time_to_meet\n    distance_rose_travels = rose_speed * time_to_meet\n    \n    # The total distance between Town A and Town B is the sum of the distances\n    # each travels until they meet.\n    total_distance = distance_jack_travels + distance_rose_travels\n    \n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    melvin_gained = (5 / 8) * melvin_original\n    melvin_lost = (1 / 4) * melvin_original\n    melvin_final_gain = (1 / 8) * melvin_original\n    \n    # After first gain\n    melvin_after_first_gain = melvin_original + melvin_gained\n    nelson_after_first_gain = -melvin_gained  # Nelson lost what Melvin gained\n    \n    # After both lost to Oliver\n    melvin_after_both_lost = melvin_after_first_gain - melvin_lost\n    nelson_after_both_lost = nelson_after_first_gain - melvin_lost\n    oliver_after_both_gained = 2 * melvin_lost\n    \n    # After final gain\n    melvin_final = melvin_after_both_lost + melvin_final_gain\n    nelson_final = nelson_after_both_lost - melvin_final_gain\n    oliver_final = oliver_after_both_gained\n    \n    # Asserting all have the same number of cards finally\n    assert melvin_final == nelson_final and nelson_final == oliver_final\n\n    total_cards_initial = melvin_final * 3  # Since all have the same number of cards in the end\n    \n    return total_cards_initial\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    products = set()\n\n    # Calculate the product of combinations of choosing 2 cards for Candy\n    for combo in combinations(cards, 2):\n        products.add(prod(combo))\n    \n    # Find the product of combinations of choosing 3 cards for Candice\n    for combo in combinations(cards, 3):\n        product_combo = prod(combo)\n        if product_combo in products:\n            chosen_cards = set(combo)\n            break\n    \n    # Find the card that was not picked\n    all_cards = set(cards)\n    not_picked = all_cards - chosen_cards\n    ans = not_picked.pop()\n    \n    return ans\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum([i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0])\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Age difference between Polly and each of her children remains constant.\n    # Let's denote Polly's age as p and her children's ages as c1, c2, and c3.\n    # When Polly was 20, c1 was 0.\n    # When Polly was 22, c1 was 2 and c2 was 0.\n    # When Polly was 24, c1 was 4, c2 was 2, and c3 was 0.\n    # So the age difference is (20, 20, 22).\n\n    for age in range(20, 101):  # Polly's potential age range\n        c1_age = age - 20  # First child's age\n        c2_age = age - 22  # Second child's age\n        c3_age = age - 24  # Third child's age\n        # Check when Polly's age equals the sum of her children's ages\n        if age == c1_age + c2_age + c3_age:\n            # Return Polly's age at this point\n            return age\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_of_sequence = (first_term + last_term) * num_terms / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple = 5\n\n    suitcase_weight_without_presents = total_weight_with_presents / multiple\n\n    return suitcase_weight_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    # total number of cakes\n    total_cakes = 50\n    # starting with 0 big boxes used\n    num_big_boxes = 0\n    # loop until the solution is found or maximum number of boxes reached\n    while num_big_boxes < 10:\n        num_small_boxes = (total_cakes - 6 * num_big_boxes) / 4\n        if num_small_boxes.is_integer() and num_small_boxes + num_big_boxes < 10:\n            return num_big_boxes\n        num_big_boxes += 1\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the larger number and y be the smaller number\n    # We have two equations:\n    # x - y = 39 (1)\n    # x + y = 59 (2)\n    \n    # Adding the two equations, we get:\n    # 2x = 98\n    x = 98 // 2\n    \n    # Now we substitute the value of x in equation (2) to find y\n    y = 59 - x\n    \n    return y\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    return 5*4 + 6*8\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(10 * m + 4, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[m]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "from math import sqrt\n\ndef solution():\n    # Prime factorization of given products\n    ABC = sqrt(30 * 35 * 42)\n    A = 30 / (ABC / 42)\n    B = 35 / (ABC / 30)\n    C = 42 / (ABC / 35)\n    \n    # Sum of A, B, and C\n    sum_ABC = A + B + C\n    \n    return int(sum_ABC)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15 / 100\n    total_money = 340\n    ans = percentage * total_money\n    return ans\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, their combined age was 10 years.\n    combined_age_four_years_ago = 10\n    \n    # Every year, each dog grows one year older. There are 2 dogs.\n    # So, their combined age grows by 2 years each year.\n    # From four years ago to now is 4 years, so their combined age is 10 + 4 * 2\n    combined_age_now = combined_age_four_years_ago + 4 * 2\n\n    # Two years from now, their combined age will be the age now plus 2 * 2 (each year they each grow a year older).\n    combined_age_in_two_years = combined_age_now + 2 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    \n    solutions = solve((equation1), (cora, qingle))\n\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0.\n    b = 0\n    \n    # We have the point (4,8) that the line passes through, and since b = 0, we can calculate the slope m as:\n    # y = mx + b => 8 = m*4 + 0 => m = 2\n    m = 8 / 4\n    \n    # The linear equation with the calculated slope 'm' and 'b' which is 0, is given by:\n    # y = mx + b => y = 2x\n    # We put the equation in the form y = mx + b, substituting m and b.\n    equation = f\"y = {m}x + {b}\"\n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of seashells Jane and Eric have\n    Jane, Eric = symbols('Jane Eric')\n    \n    # Create equation based on the problem's condition before Eric gives seashells to Jane\n    equation1 = Eq(Jane, 5/7 * Eric)\n    \n    # Create equation based on the condition after Eric gives 6 seashells to Jane\n    equation2 = Eq((Jane + 6) / (Eric - 6), 11/13)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Jane, Eric))\n    \n    # Calculate the total number of seashells they have together\n    total_seashells = solutions[Jane] + solutions[Eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    warren_adds = 20\n    naida_subtracts = 1\n    largest_number = 0\n   \n    while warren_adds > 0:\n        current_number = largest_number + warren_adds\n        largest_number = current_number if current_number > largest_number else largest_number\n        current_number -= naida_subtracts\n        warren_adds -= 1\n        naida_subtracts += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + (3 * other_faucet_rate)\n    time_to_fill = 1 / total_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factor each number and count the occurrences of the factor 2 and 5\n    factors_48 = factorint(48)\n    factors_925 = factorint(925)\n    factors_38 = factorint(38)\n    factors_435 = factorint(435)\n    \n    # The number of zeros at the end of a product is determined by the pairings of 2s and 5s\n    # in the prime factorizations of the factors. For each pair of (2,5), there is one zero.\n    num_twos = factors_48.get(2, 0) + factors_38.get(2, 0)  # 925 and 435 have no factor of 2\n    num_fives = factors_925.get(5, 0) + factors_435.get(5, 0)  # 48 and 38 have no factor of 5\n    \n    # The number of zeros at the end is equal to the minimum of the count of twos and fives\n    num_zeros = min(num_twos, num_fives)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    perms = permutations(digits)\n    min_even_num = float('inf')\n    for perm in perms:\n        num = int(''.join(map(str, perm)))\n        if num % 2 == 0:\n            min_even_num = min(min_even_num, num)\n    return min_even_num\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    \n    piano_and_violin = piano_pupils // 4  # Since 1/4 of the pianists also play the violin\n    either_piano_or_violin = piano_pupils + violin_pupils - piano_and_violin  # Apply inclusion-exclusion principle\n    \n    neither_piano_nor_violin = total_pupils - either_piano_or_violin\n\n    return neither_piano_nor_violin\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    initial_amount = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = initial_amount * (1 + interest_rate * years)\n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # One third got off, so they were 2/3 of the people after the first stop\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Two fifths got off, so they were 3/5 at the beginning\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n    either_A = math_A + english_A - both_A\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    format = '%H:%M'\n    time_left_school = datetime.strptime('15:22', format)\n    time_bus_caught = datetime.strptime('16:01', format)\n\n    walking_to_bus = time_bus_caught - time_left_school\n    total_walking_minutes_before_bus = walking_to_bus.total_seconds() / 60\n\n    bus_trip_duration = timedelta(minutes=18)\n    time_bus_dropped_off = time_bus_caught + bus_trip_duration\n\n    time_got_home = datetime.strptime('16:35', format)\n    walking_to_home = time_got_home - time_bus_dropped_off\n    total_walking_minutes_after_bus = walking_to_home.total_seconds() / 60\n\n    total_walking_minutes = total_walking_minutes_before_bus + total_walking_minutes_after_bus\n    return int(total_walking_minutes)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = (25 - 10) * 3\n    return result\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n\n    # Let's define the coordinate of the right angle vertex A as (0,0),\n    # and the other two vertices B and C as (2,0) and (0,2) respectively.\n    # Any point P within the triangle can be represented as (x, y), with the constraint 0 <= x, y and x + y <= 2.\n    \n    # The distance from P to A (the right angle vertex) is less than 1 can be formulated as x^2 + y^2 < 1.\n    # This represents a quarter-circle centered at the origin A with radius 1.\n    \n    # We will calculate the area inside the quarter-circle and the area of the triangle to find the required probability.\n    \n    # The area of the triangle ABC (half square with side length 2):\n    area_triangle = sp.Rational(1,2) * 2 * 2\n    \n    # The area of the quarter-circle with radius 1 is 1/4 of Pi * radius^2:\n    area_quarter_circle = 1/4 * sp.pi * 1**2\n    \n    # The probability that the distance between a random point P and point A is less than 1 is:\n    probability = area_quarter_circle / area_triangle\n    \n    return float(probability)\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    \n    while True:\n        justin_age += 1\n        mother_age += 1\n        years += 1\n        if mother_age == 3 * justin_age:\n            break\n\n    return years\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    # We know the first digit is 1/4 of the last digit,\n    # the second digit is 1 less than the first digit,\n    # and when you multiply the whole number by 4, the number reverses.\n    # We also know none of the digits are the same.\n    # Loop from 1000 to 9999 as ABCD is a four digit number.\n    for num in range(1000, 10000):\n        # Split the number into its digits\n        digits = [int(d) for d in str(num)]\n        \n        # Check the conditions\n        # First digit is 1/4 of the last digit.\n        if digits[0] != digits[3] // 4 or digits[3] % 4 != 0:\n            continue\n        # Second digit is 1 less than the first digit.\n        if digits[1] != digits[0] - 1:\n            continue\n        # Multiply ABCD by 4 to check if the digits appear in reverse order.\n        if int(str(num)[::-1]) != num * 4:\n            continue\n        # Check if all digits are different.\n        if len(set(digits)) != 4:\n            continue\n        \n        # If all conditions are met, this is the number we're looking for.\n        return num\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_sum = mean_value * (len(numbers) + 1)  # for n numbers, mean is sum/n; sum = mean * n\n    current_sum = sum(numbers)\n    a = total_sum - current_sum\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_constant = 30000 + 452\n\n    missing_number = (left_side - right_side_constant) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    percentage = 20 / 100\n    total = 8880\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    number_of_pieces = 2\n    length_per_piece_cm = total_length_cm / number_of_pieces\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Lina's assumption is incorrect.\n    # Using Pigeonhole Principle, since there are 3 possible colors,\n    # after picking 3 socks there is still a chance that all 3 are of different colors.\n    # One more sock (4th sock) guarantees at least one pair of the same color.\n\n    # Total number of socks to guarantee at least one pair is 4.\n    return 4\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # pupils to her left, Victoria herself, pupils to her right\n    rows_in_front_of_victoria = 1\n    rows_behind_victoria = 8\n    total_rows = rows_in_front_of_victoria + 1 + rows_behind_victoria  # rows in front of her, Victoria's row, rows behind her\n\n    total_pupils = pupils_in_victoria_row * total_rows\n\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4 * 9, 81)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = 0\n    denominator_sum = 0\n\n    # Calculate the numerator sum\n    for i in range(1, 20, 2):\n        numerator_sum += 1 / (i * (i + 1))\n\n    # Calculate the denominator sum\n    for i in range(11, 16):\n        denominator_sum += 1 / (i * (20 + 11 - i))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"08:00\", \"%H:%M\")\n    distance_at_start = 6300  # in meters\n    distance_half_hour_later = 1800  # in meters\n    half_hour = timedelta(minutes=30)\n    \n    # Calculate the speed in m/min\n    distance_covered_in_half_hour = distance_at_start - distance_half_hour_later\n    speed = distance_covered_in_half_hour / 30  # m/min\n\n    # Calculate the time taken to cover the full distance from the start\n    time_to_cover_full_distance = distance_at_start / speed\n    reach_time = start_time + timedelta(minutes=time_to_cover_full_distance)\n\n    # Output the time as a string in HH:MM format\n    return reach_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Mr. Smith's sugar\n    mr_sugar = 300 * 0.50 + 600 * 0.20\n    \n    # Mrs. Smith's sugar\n    mrs_sugar = 700 * 0.10 + 300 * (x / 100)\n    \n    # Both have the same amount of drink in total (900 mL)\n    # Set the equation for same sugar percentage in both drinks\n    equation = Eq(mr_sugar / 900, mrs_sugar / 1000)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return x rounded to two decimal places\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = (3/4) * total_candy\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = (1/3) * remaining_candy\n    final_candy = remaining_candy - candy_to_brother\n    \n    return int(final_candy)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age_future = 10\n    kenny_age_diff = 2\n\n    # Let kenny's younger brother's age be x when May is 10 years old\n    # Then Kenny's age will be x + 2 at that time\n    # According to the problem statement, we have:\n    # 3 * 10 = x + (x + 2)\n    # Solving for x\n    x = (3 * may_age_future - kenny_age_diff) // 2\n\n    # Kenny's age when May is 10 years old\n    kenny_age_future = x + kenny_age_diff\n\n    # Age difference between Kenny and May this year\n    age_difference = kenny_age_future - may_age_future + (10 - 7)\n\n    return age_difference\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Cost of sweets\n    cost_price = 10  # in pounds\n    \n    # Quantity of sweets bought\n    total_weight = 5  # in kg\n    weight_per_bag_in_kg = 250 / 1000  # 250g converted to kg\n    \n    # Number of bags\n    num_bags = total_weight / weight_per_bag_in_kg\n    \n    # Selling price per bag\n    sell_price_per_bag_in_pounds = 65 / 100  # Convert from pence to pounds\n    \n    # Total revenue from selling all the bags\n    total_revenue = num_bags * sell_price_per_bag_in_pounds\n    \n    # Profit calculation\n    profit = total_revenue - cost_price\n    \n    # Profit percentage calculation\n    profit_percentage = (profit / cost_price) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    \n    # If each child gets at least one apple, we can distribute 4 apples \n    # (one to each of the other four children), and then see how many \n    # apples can be given to the child who gets the most.\n    apples_left = total_apples - (children - 1)  \n    \n    return apples_left\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th and 9th teeth is the distance covered by 5 gaps\n    # Calculate the distance of a single gap in mm\n    single_gap_distance = 30 / 5\n\n    # The comb has 100 teeth, so it has 99 gaps\n    total_gaps = 99\n\n    # Calculate the total length of the comb in mm\n    total_length_mm = single_gap_distance * total_gaps\n\n    # Convert the length from mm to cm\n    total_length_cm = total_length_mm / 10\n\n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    grandma_age_in_2008 = 80\n    mum_age_in_1996 = 40\n    mum_age_when_grandma_was_80 = mum_age_in_1996 + (2008 - 1996)\n    age_difference = grandma_age_in_2008 - mum_age_when_grandma_was_80\n    grandma_age_when_mum_was_25 = 25 + age_difference\n\n    return grandma_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Number of donuts and muffins purchased\n    donuts = 7\n    muffins = 3\n\n    # Price per donut and per muffin\n    price_per_donut = 10 / donuts\n    price_per_muffin = 6 / muffins\n\n    # Calculate the ratio of total amount spent on donuts to the individual price of donuts\n    # and the same for muffins to find the number of each bought\n    # Let x be the money Amy had originally\n    # She spends x/2 on donuts and x/2 on muffins\n    # Therefore, x/2 = 7n * (price_per_donut) where n is some whole number\n    # And x/2 = 3m * (price_per_muffin) where m is some whole number of sets of muffins she bought\n    # It's given that she bought 54 more donuts than muffins, so 7n - 3m = 54\n    # We need to find a pair of (n, m) that satisfies this equation then we can find x\n    # Let's brute force search for such a pair\n\n    for n in range(1, 1000): # We assume the loop is large enough to find a solution\n        for m in range(1, 1000): # Same assumption for m\n            if 7 * n - 3 * m == 54:\n                # Check if the money spent on donuts and muffins is equal\n                money_on_donuts = 7 * n * price_per_donut\n                money_on_muffins = 3 * m * price_per_muffin\n                if money_on_donuts == money_on_muffins:\n                    # The total money Amy had originally is twice the amount spent on donuts\n                    return money_on_donuts * 2\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    import math\n    \n    total_ways = math.factorial(5)\n    adjacent_refusal_ways = 2 * math.factorial(4)\n    \n    return total_ways - adjacent_refusal_ways\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # since there are 5 identical ice creams and each friend must get at least one,\n    # we can initially give one ice cream to each friend.\n    # We are now left with 2 ice creams to distribute among the three friends freely.\n    \n    # This is a problem of distributing 'n' identical items to 'r' distinct groups \n    # with no restrictions, which can be calculated using combinations with repetition:\n    # C(n+r-1, r-1) where 'n' is the number of items and 'r' is the number of groups.\n    \n    # In this case, n=2 (remaining ice creams) and r=3 (friends).\n    \n    from math import comb\n    n = 2  # remaining ice creams\n    r = 3  # friends\n\n    # calculate combinations with repetition\n    ways = comb(n + r - 1, r - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = (2/3) * total_vegetables\n    remaining_after_monday = total_vegetables - monday_sales\n    tuesday_sales = (2/5) * remaining_after_monday\n    total_sales_monday_tuesday = monday_sales + tuesday_sales\n\n    return total_sales_monday_tuesday\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To ensure getting 16 balls of one color together with 13 balls of another color,\n    # we need to consider the worst-case scenario using the pigeonhole principle.\n    # The worst case is when we pick balls in such a way that we get just below the threshold number\n    # from each color before finally reaching the desired number for two colors.\n    \n    # So we start by picking 15 balls of each color to ensure we are just 1 ball short for the color with 16 balls.\n    # Now, for the color having 26 balls, we need 12 more balls to make a total of 13 balls of that color.\n    # Thus, we add the number of balls needed from each color to achieve the goal.\n\n    # The number of balls needed is thus 15 (one less than 16) from the first color, \n    # plus 25 (one less than 26) from the second color, and so on.\n    # Finally, we need just one more ball which will ensure that we have at least 16 of one color\n    # and at least 13 of another color since we will have hit the threshold for at least two colors.\n\n    balls_needed = (15 + 25 + 33 + 23 + 39) + 1\n    return balls_needed\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum = 0\n    for i in range(5, 856, 15):\n        sum += i - (i - 5)\n    return sum\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits * (1/4)\n    remaining_biscuits = total_biscuits - given_away\n    \n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    B, C, A = symbols('B C A')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (B, C, A))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the cost of one table and c be the cost of one chair.\n    t, c = symbols('t c')\n\n    # 2 tables and 5 chairs cost 220\n    equation1 = Eq(2 * t + 5 * c, 220)\n    \n    # The cost of one table is the same as the cost of 3 chairs\n    equation2 = Eq(t, 3 * c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let original_amount be the symbol for Julie's original amount of money\n    original_amount = symbols('original_amount')\n\n    # According to the problem, Julie has 4/5 of her money left after spending £1.55 on coffee and £2.25 on a muffin\n    spent_money = 1.55 + 2.25\n\n    # Define the equation to solve\n    equation = Eq(original_amount - spent_money, 4 / 5 * original_amount)\n\n    # Solve the equation to find the original amount of money Julie had\n    solution = solve(equation, original_amount)\n\n    # The solution will be in a list, get the first (and only) element\n    return solution[0]\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    extra_time_walked_by_hook = 5\n    lily_walk_time = hook_walk_time - extra_time_walked_by_hook\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    total_coins = joann_coins + sana_coins + nancy_coins\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Let 'd' be the distance Lucas walked\n    # Since Lucas and his mother started 20 miles apart and are now 4 miles apart,\n    # they walked a total of 20 - 4 = 16 miles together.\n    # The ratio of their speeds is 3:5, which means Lucas walks 3 units of distance for every 5 units his mother walks.\n    # So if Lucas walked a distance 'd', his mother walked a distance '5/3 * d'.\n    # The sum of the distances walked by Lucas and his mother is equal to 16 miles:\n    # d + (5/3 * d) = 16\n\n    # Solve for 'd':\n    d = 16 * 3 / 8\n    return d\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    sum_of_terms = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    # Find the unit rate (pizzas per person)\n    unit_rate = pizzas_initial / people_initial\n    \n    # Calculate the number of pizzas needed for 35 people\n    pizzas_needed = unit_rate * people_final\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams //= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marion, julie, ethan = symbols('marion julie ethan')\n    \n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n    \n    solutions = solve((equation1, equation2, equation3), (marion, julie, ethan))\n\n    total_earnings = solutions[marion] + solutions[julie] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 5 * 21 / 35\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in the big and small classes\n    big_class, small_class = symbols('big_class small_class')\n\n    # Create equations based on the problem statement\n    # Equation for the total number of apples\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)\n    # Equation for the total number of oranges\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    # Return the number of students in the small class\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n    \n    count = 0\n    for i in range(1, 2017):\n        if math.isqrt(i * 72) ** 2 == i * 72:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    total_items = 69\n    difference = 17\n    # Let the number of cards be x\n    # then the number of wands will be x + difference\n    # The sum is total_items: x + (x + difference) = total_items\n    # 2x + difference = total_items\n    # Solving for x\n\n    x = (total_items - difference) / 2\n    wands = x + difference\n    return int(wands)\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We set up the congruences according to the Chinese Remainder Theorem\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7) since 7 children per group and 1 sitting out means x ≡ -1 (mod 7), or equivalently x ≡ 6 (mod 7)\n    # x ≡ 7 (mod 8) since 8 children per group and 1 sitting out means x ≡ -1 (mod 8), or equivalently x ≡ 7 (mod 8)\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    \n    # Solve the system of linear congruences\n    x, _ = solve_congruence(*congruences)\n    \n    # Return the smallest x that satisfies all congruences, which represents the number of children\n    return int(x)\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_per_gram = 100 / 40\n    grams_needed = 150 / cookies_per_gram\n    return grams_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    danny_current_age, efron_current_age, years = symbols('danny_current_age efron_current_age years')\n\n    # Relationship of ages now\n    equation1 = Eq(danny_current_age - efron_current_age, 30)  # Danny is 30 years older than Efron\n    equation2 = Eq(danny_current_age / efron_current_age, 8/3)  # The current ratio of Danny's age to Efron's age\n\n    # Relationship of ages in some years\n    equation3 = Eq((danny_current_age + years) / (efron_current_age + years), 5/3)  # The ratio in some years\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (danny_current_age, efron_current_age, years))\n\n    # Extract the solution for \"years\", which is what we want to find\n    return solutions[years]\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of teams in each group\n    teams_per_group = 4\n\n    # Number of groups\n    num_groups = 8\n\n    # Number of games in a single round-robin for one group\n    # Each team plays every other team once, so 4 teams have 3+2+1 = 6 matches in total\n    games_per_group_stage = teams_per_group * (teams_per_group - 1) // 2\n\n    # Total number of games in the group stage for all groups\n    total_group_games = num_groups * games_per_group_stage\n\n    # Number of teams entering the knockout round\n    teams_in_knockout = num_groups * 2\n\n    # Total number of games in the knockout round (1 game per match, single-elimination):\n    # Round of 16, Quarter-finals, Semi-finals, Third place play-off, Final\n    total_knockout_games = teams_in_knockout - 1\n\n    # Summing games from both stages\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit <= 9:\n            for third_digit in range(10):\n                if 9 < first_digit + second_digit + third_digit < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = (-6 / 6) == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(n*(n-1)/2, 15)\n    solutions = solve(equation, n)\n\n    # Filter out the negative solution since a negative number of teams doesn't make sense\n    ans = [s for s in solutions if s.is_positive]\n\n    return ans[0]\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    num = 224\n    prime_factors = {}\n    factor = 2\n    \n    while num > 1:\n        if num % factor == 0:\n            num = num // factor\n            prime_factors[factor] = prime_factors.get(factor, 0) + 1\n        else:\n            factor += 1\n            \n    total_factors = 1\n    for count in prime_factors.values():\n        total_factors *= (count + 1)\n    \n    return total_factors\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    colours_of_pencils = 15\n    colours_of_rulers = 20\n    colours_of_pens = 10\n\n    # Choosing one pencil and one ruler\n    ways_pencil_ruler = colours_of_pencils * colours_of_rulers\n\n    # Choosing one pencil and one pen\n    ways_pencil_pen = colours_of_pencils * colours_of_pens\n\n    # Choosing one ruler and one pen\n    ways_ruler_pen = colours_of_rulers * colours_of_pens\n\n    # Total ways of choosing any two items\n    total_ways = ways_pencil_ruler + ways_pencil_pen + ways_ruler_pen\n\n    return total_ways\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / (1 - 0.30)\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n    \n    # Using the multiplication principle since each choice is independent\n    total_combinations = pencil_colours * ruler_colours * pen_colours\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct_answers in range(11):\n        wrong_answers = 10 - correct_answers\n        if correct_answers * 6 + wrong_answers * (-2) == 44:\n            return correct_answers\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    # Let x be the number of triangles, then the number of quadrilaterals is x + 82\n    # and the number of pentagons is 2.\n    # Each triangle has 3 sides, each quadrilateral has 4 sides, and each pentagon has 5 sides.\n    # The total number of sides is 3x (from triangles) + 4(x + 82) (from quadrilaterals) + 5*2 (from pentagons) = 394\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of triangles\n    x = symbols('x')\n    \n    # Create the equation based on the number of sides\n    equation = Eq(3*x + 4*(x + 82) + 5*2, 394)\n    \n    # Solve the equation for x\n    num_triangles = solve(equation, x)[0]\n    \n    # The number of quadrilaterals is x + 82\n    return num_triangles + 82\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # The tens digit can be from 1 to 9\n        ones = tens - 3  # The ones digit is 3 less than the tens digit\n        if 0 <= ones < 10:  # The ones digit must be a non-negative single digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # Since there are four posts, there are three gaps between them\n    total_distance = distance_between_posts * number_of_gaps\n    return total_distance\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' represent the price of a pair of shorts\n    # Let 't' represent the price of a T-shirt\n    s, t = symbols('s t')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * s + 3 * t, 26)\n    equation2 = Eq(2 * s + 5 * t, 40)\n\n    # Solve the system of equations for 's' and 't'\n    solutions = solve((equation1, equation2), (s, t))\n\n    # We only need the price of one T-shirt\n    return solutions[t]\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for number in range(lcm, 1000, lcm):  # Start from lcm and step by lcm\n        if str(number).startswith('6'):\n            return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Speed difference is due to the two different time of arrivals \n    # Time taken for 10 km/h speed is 2 hours more than for 15 km/h speed\n    time_diff = 2  # hours\n    \n    # distance = speed * time\n    # Let the distance be \"d\"\n    # We can form the equations:\n    # d = 10 * (t + 2) and d = 15 * t\n    # where t is the time taken at 15 km/h speed\n    \n    # From the equations above, we can find t\n    # 10 * (t + 2) = 15 * t\n    # 10t + 20 = 15t\n    # 20 = 5t\n    # t = 20 / 5\n    t = 20 / 5  # hours\n\n    # Now we calculate distance using the 15 km/h speed\n    d = 15 * t\n\n    # To arrive at 9 am, Ben will need to cycle for (10 - 9) = 1 hour less\n    # than the time taken at 10 km/h speed\n    # Time taken at 10 km/h is (t + 2)\n    # Time to take at required speed is (t + 2 - 1) = t + 1\n    time_needed = t + 1  # hours\n\n    # The required speed is distance divided by the new time\n    required_speed = d / time_needed\n\n    return required_speed\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of sweets Rachel has originally\n    # Let a represent the number of sweets Alice has originally\n    r, a = symbols('r a')\n\n    # Equation 1: If Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: If both eat 8 sweets, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq((r - 8) - 3 * (a - 8), 0)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of sweets originally\n    total_sweets = solutions[r] + solutions[a]\n    return total_sweets\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-boy teams, y be the number of all-girl teams\n    # Then, x = 2y (iii)\n    # Total boys = 3x + 2*27 + 15 (since each all-boy team contributes 3 boys, \n    # each 2-boy team contributes 2 boys and each 1-boy team contributes 1 boy)\n    # Total girls = 3y + 27 (each all-girl team contributes 3 girls and \n    # each 2-girl team contributes 1 girl)\n    \n    # Total students = Total boys + Total girls = 150 (from problem statement)\n    # 3x + 2*27 + 15 + 3y + 27 = 150\n    # 3x + 69 + 3y = 150\n    # 3x + 3y = 81\n    # x + y = 27 (*)\n    \n    # From x = 2y, we substitute into (*):\n    # 2y + y = 27 \n    # 3y = 27\n    y = 27 // 3\n    x = 2 * y\n\n    # Total girls in the level = Total girls from all-girl teams + Total girls from 2-girl teams\n    total_girls = 3 * y + 27\n    return total_girls\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    num1 = '61'\n    num2 = '34'\n    \n    # Convert base 7 strings to integers\n    num1_dec = int(num1, 7)\n    num2_dec = int(num2, 7)\n    \n    # Perform the subtraction in decimal\n    result_dec = num1_dec - num2_dec\n    \n    # Convert the result back to base 7\n    ans = ''\n    while result_dec > 0:\n        ans = str(result_dec % 7) + ans\n        result_dec //= 7\n    \n    return ans if ans else '0'  # Return '0' if result is 0\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbits = 8\n    rabbit_to_chickens = 2\n    dog_to_chickens = dog_to_rabbits * rabbit_to_chickens\n    return dog_to_chickens\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    candies_total = initial_students * candies_each_initially\n    new_students = initial_students + 1\n    candies_each_after = candies_total // new_students\n    return candies_each_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    n = 1\n    while True:\n        if (n % 4 == 3) and (n % 5 == 4) and (n % 7 == 6):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    original_price = 120\n    depreciation_rate = 0.04\n    years = 5\n    remaining_value_ratio = (1 - depreciation_rate) ** years\n    value_after_depreciation = original_price * remaining_value_ratio\n    return value_after_depreciation\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    difference = 52\n    total_students = 0\n    side_length = 1  # We start checking from square of side length 1\n    while True:\n        if side_length % 2 == 0:\n            # even side lengths mean an inner layer of boys\n            boys = side_length * 4 - 4  # excluding the corners counted twice\n            girls = (side_length - 2) * 4\n        else:\n            # odd side lengths mean an outer layer of boys\n            boys = side_length * 4 - 4  # excluding the corners counted twice\n            girls = (side_length - 2) * 4 if side_length > 1 else 0\n        \n        if boys - girls == difference:\n            # each side includes the corners once, so add them back in\n            total_students = boys + girls + 4 \n            break\n        side_length += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Assure that one color will definitely be a pair\n    max_left_gloves = 2  # maximum number of left gloves is 2 (green ones)\n    max_right_gloves = 4 # maximum number of right gloves is 4 (green ones)\n\n    # To ensure a matching pair, Dilly has to take all gloves of one kind and one more from the other kind.\n    # This is because taking all of a single kind does not guarantee a pair (could all be for the same hand).\n    # By taking one more from the other kind, Dilly is forced to have at least one pair.\n    min_gloves_needed = max_left_gloves + max_right_gloves + 1\n\n    return min_gloves_needed\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9.\n    # Sum of the first 5 digits: 1 + 2 + 3 + 4 + 5 = 15\n    # Therefore, A must be such that (15 + A) is divisible by 9.\n    # The smallest such A that makes the sum divisible by 9 is 3, since 15 + 3 = 18, which is divisible by 9.\n    A = 3\n    \n    # The remainder when a number is divided by 4 depends only on the last two digits of the number.\n    # In this case, the last two digits are \"5A\" which is \"53\".\n    # The number formed by the last two digits is 53.\n    last_two_digits = 53\n    \n    # Calculate the remainder of the last two digits divided by 4.\n    remainder = last_two_digits % 4\n    \n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n\n    number = hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    # Eugene had 3 times as many pins as Yuna.\n    equation1 = Eq(eugene, 3 * yuna)\n\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene.\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    solutions = solve((equation, ), (total_flowers, ))\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    numerator = 5 + 1/7 + 3 + 3/11 + 1 + 13/23\n    denominator = 3 + 3/7 + 2 + 2/11 + 1 + 1/23\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n\n    num_kids = 3\n    num_ways = math.factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # In order to ensure her victory, Kelly must leave a number of matches such that:\n    # Dan cannot win in the next move, and Kelly can always counter Dan's moves to win.\n    # By backtracking from the winning move (taking the last match), we can deduce:\n    # if there are 2 matches left, and it's Kelly's turn, she will take 2 and win.\n    # Therefore, she needs to ensure that after Dan's turn, there are 2 matches left.\n    # To do this, she needs to leave either 3 or 4 matches after her turn, as Dan can only take 1 or 2 matches.\n    # Continuing this pattern backwards, we find that Kelly needs to leave an amount\n    # of matches that is a multiple of 3 plus 1, so that she can always bring it back \n    # to a multiple of 3 plus 1 after Dan's turn.\n    # Thus, Kelly needs to take away a number of matches that will leave 8 matches.\n    # Since there are initially 11 matches, Kelly must take away 3 matches.\n    \n    return 3\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n\n    equation1 = Eq(jason + 18, nicole - 18)\n    equation2 = Eq(jason + 18 + 5, nicole)\n\n    solutions = solve((equation1, equation2), (jason, nicole))\n\n    return solutions[nicole]\n\njason_initial = 20\nans = solution() - jason_initial"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions are 100% of their respective values\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # New dimensions after change\n    new_length = 1.10  # increased by 10%\n    new_breadth = 0.8  # reduced to 4/5 of the original breadth\n    new_height = 1.10  # New height to original height is 11:10\n\n    # Original volume\n    original_volume = original_length * original_breadth * original_height\n\n    # New volume\n    new_volume = new_length * new_breadth * new_height\n\n    # Calculate the new volume as a percentage of the original volume\n    new_volume_percentage = (new_volume / original_volume) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_count in range(0, 78 // 2 + 1):\n        if (77 - two_gram_count * 2) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # convert km to m\n    num_intervals = 9 - 1  # intervals are one less than marshals\n\n    distance_between_marshals = total_distance_m / num_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_fast = 180  # Speed in meters per minute\n    time_fast = 6     # Time in minutes\n\n    speed_slow = 120  # Speed in meters per minute\n    time_slow = 8     # Time in minutes\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    wheels_per_car = 4\n    wheels_per_motorcycle = 2\n\n    # Let the number of cars be 'cars' and the number of motorcycles be 'motorcycles'\n    # We have two equations based on the problem statement:\n    # cars + motorcycles = total_vehicles\n    # wheels_per_car * cars + wheels_per_motorcycle * motorcycles = total_wheels\n\n    # Using the total vehicles, we can express motorcycles in terms of cars:\n    # motorcycles = total_vehicles - cars\n\n    # Now we plug the expression for motorcycles into the wheel equation:\n    # wheels_per_car * cars + wheels_per_motorcycle * (total_vehicles - cars) = total_wheels\n\n    # Simplify and solve for cars:\n    cars = (total_wheels - wheels_per_motorcycle * total_vehicles) / (wheels_per_car - wheels_per_motorcycle)\n    \n    return int(cars)\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # initialize variables for red and green tile counts\n    red_count = 0\n    green_count = 0\n    \n    # determine the size of the outermost square\n    outermost_size = int(400 ** 0.5)\n    \n    # iterate over the layers\n    for layer in range(1, outermost_size+1, 2):\n        # red tiles occupy odd layers\n        red_count += (outermost_size - (layer - 1)) * (outermost_size - (layer - 1))\n        # green tiles occupy even layers, if there is an even layer inside the current red one\n        if layer + 1 <= outermost_size:\n            green_count += (outermost_size - layer) * (outermost_size - layer)\n    \n    # determine the dominant color and the difference\n    dominant_color = 'red' if red_count > green_count else 'green'\n    tile_difference = abs(red_count - green_count)\n\n    return dominant_color, tile_difference\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_sum = 74 * 7\n    correct_sum = incorrect_sum - (81 - 18)\n    correct_average = correct_sum / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal_amount = 6000\n    interest_rate = 0.03\n\n    # Calculate the interest for the first year\n    first_year_interest = principal_amount * interest_rate\n    # Calculate the total amount at the end of the first year\n    total_first_year = principal_amount + first_year_interest\n\n    # Calculate the interest for the second year based on the new total\n    second_year_interest = total_first_year * interest_rate\n    \n    # Calculate the total interest earned over two years\n    total_interest = first_year_interest + second_year_interest\n\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n\n    number_of_pictures = total_time_available / time_for_one_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_value = 1 + 4/7\n    return round(decimal_value, 1)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = '428571'  # Sequence of recurring digits in 3/7\n    index = (69 - 1) % len(recurring_sequence)  # Subtract 1 because indexing starts at 0\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    # Dylan's solution\n    dylan_salt = 300 * 0.35\n    # Daisy's solution\n    daisy_salt = 200 * 0.50\n    # Total mass of the solutions\n    total_mass = 300 + 200\n    # Total amount of salt from both solutions\n    total_salt = dylan_salt + daisy_salt\n    # Concentration of the resulting solution\n    concentration = (total_salt / total_mass) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n    \n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles % 4 + new_bottles\n    \n    # Borrow 1 bottle\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let Megacorp's sales in 2014 be x\n    # Then Vastco's sales in 2014 is x + 68% of x\n    vastco_2014 = 1.68  # Since this is a percentage increase, it is 168% or 1.68 times of Megacorp\n    \n    # Vastco's sales in 2015 is 32% higher than in 2014,\n    # So it's 1.32 times its own sales in 2014\n    vastco_2015 = vastco_2014 * 1.32\n    \n    # and 44% more than Megacorp's sales in 2015\n    # So Vastco's sales in 2015 is 1.44 times Megacorp's sales in 2015\n    # We can calculate Megacorp's 2015 sales as Vastco's 2015 sales divided by 1.44\n    megacorp_2015 = vastco_2015 / 1.44\n    \n    # Now find the percentage increase in Megacorp's sales from 2014 to 2015\n    # Megacorp's sales increase = Megacorp's sales in 2015 / Megacorp's sales in 2014 - 1\n    megacorp_increase = (megacorp_2015 - 1) / 1 * 100  # Multiply by 100 to get the percentage\n    \n    return megacorp_increase\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits for each segment of numbers\n    digits_1_to_9 = 9 * 1\n    digits_10_to_99 = (99 - 10 + 1) * 2\n    digits_100_to_113 = (113 - 100 + 1) * 3\n\n    # Total number of digits\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n\n    return total_digits\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 0.50\n    actual_profit = 0.82 * planned_profit\n    first_day_profit = 0.70 * (1 + planned_profit)\n    \n    # Remaining goods value after first day sales\n    remaining_goods_value = 1 - 0.70\n    \n    # Let's denote the discount rate on the second day as `discount_rate`\n    # Therefore, the actual price after discount is (1 - discount_rate)\n    # The actual profit made from the second day sales is the remaining goods value\n    # times the actual price after discount minus the remaining goods value itself,\n    # which should equal the total actual profit minus the first day profit\n    \n    # We will solve the following equation for `discount_rate`:\n    # remaining_goods_value * (1 - discount_rate) - remaining_goods_value = actual_profit - first_day_profit\n    \n    # discount_rate = 1 - (actual_profit - first_day_profit + remaining_goods_value) / remaining_goods_value\n    \n    discount_rate = 1 - ((actual_profit - first_day_profit + remaining_goods_value) / remaining_goods_value)\n    \n    return discount_rate * 100  # Convert to percentage\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' represent the total number of pearls on the strand\n    p = symbols('p')\n\n    # Equation based on the problem statement\n    equation = Eq(p / 2 + p / 4 + p / 6 + 3, p)\n\n    # Solve for 'p'\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3 \n    total_work = workers * days\n\n    days_for_one_worker = total_work / 1\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    for older_son in range(1, 55):\n        younger_son = older_son - 3\n        for older_daughter in range(1, 55):\n            younger_daughter = older_daughter - 2\n            younger_son_twice_older_daughter = 2 * older_daughter\n            if (older_son + younger_son + older_daughter + younger_daughter == 55 and\n                younger_son == younger_son_twice_older_daughter):\n                # Found the correct ages\n                return min(older_son, younger_son, older_daughter, younger_daughter)\n    # If the loop ends without returning, no solution was found\n    return None\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations(range(1, 4), 4):\n        if len(set(p)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of each color rabbit\n    black, white, grey = symbols('black white grey')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(black, white + 14)   # There are 14 more black rabbits than white rabbits\n    equation2 = Eq(grey, white - 2)     # There are 2 fewer grey rabbits than white rabbits\n    equation3 = Eq(black + white + grey, 84)    # Total number of rabbits\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    # Return the result\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john - brother, 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    earned_money = 92\n    \n    # If all glasses were delivered safely, Peter would earn $100.\n    # Since he earned $92, he must have broken 100 - 92 = 8 glasses.\n    broken_glasses = total_glasses - earned_money\n\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin tournament, each team plays every other team once.\n    # The number of matches (M) can be determined by the formula:\n    # M = n*(n-1)/2, where n is the number of teams.\n    # We are given that M = 45, so we solve for n.\n    # 45 = n*(n-1)/2\n    # 90 = n*(n-1)\n    # 0 = n^2 - n - 90\n\n    # We solve the quadratic equation for n.\n    import math\n    a = 1\n    b = -1\n    c = -90\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Find two solutions\n    sol1 = (-b - math.sqrt(discriminant)) / (2*a)\n    sol2 = (-b + math.sqrt(discriminant)) / (2*a)\n\n    # Since the number of teams cannot be negative, we choose the positive one\n    n_teams = max(sol1, sol2)\n\n    return int(n_teams)\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    result = (40 - 4) // 2\n    return result\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of boats and y be the number of people\n    x, y = symbols('x y')\n\n    # If we reduce the number of boats by 1, each boat takes 9 people\n    equation1 = Eq((x - 1) * 9, y)\n\n    # If we increase the number of boats by 1, each boat takes 6 people\n    equation2 = Eq((x + 1) * 6, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    price_per_banana = 98 / 7\n    cost_of_15_bananas = 15 * price_per_banana\n    change_from_12_pounds = (12 * 100) - cost_of_15_bananas\n\n    return change_from_12_pounds / 100\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57, 2):\n        if i + (i + 2) + (i + 4) == 57:\n            return i\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for i in [2, 6, 1, 10, 5, 3]:\n        if i * 3 == 6:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 / 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and Peter's initial number of cookies\n    john, peter = symbols('john peter')\n\n    # Given conditions\n    # John had 180 more cookies than Peter initially\n    condition1 = Eq(john, peter + 180)\n\n    # After selling, the relationship between their remaining cookies\n    condition2 = Eq(john - 4/5 * john, 1/2 * (peter - 3/10 * peter))\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [j for j in range(1, 37) if 36 % j == 0]\n    intersect = list(set(multiples_of_4).intersection(factors_of_36))\n    return intersect[0] if intersect else None\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    \n    students = gcd(pencils, pens)\n    \n    return students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')  # Initialize to a very large number\n\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        current_sum = num1 + num2\n\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60\n    new_test_score = 70\n    new_average = (total_marks_before + new_test_score) / 5\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n    \n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n    \n    total_apples_eaten = (total_horses * apples_per_horse +\n                         total_pigs * apples_per_pig +\n                         total_rabbits * apples_per_rabbit)\n    \n    total_animals = total_horses + total_pigs + total_rabbits\n    \n    average_apples_eaten = total_apples_eaten / total_animals\n    \n    return average_apples_eaten\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # 3-digit numbers start from 100 to 999, so the first digit is 1-9.\n        for second_digit in range(10):  # The second digit can be 0-9.\n            third_digit = first_digit + second_digit\n            if third_digit < 10:  # The third digit must be less than 10 to be a valid single digit.\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    sale_plan_1_discount = 7  # dollars for 3 cups\n    sale_plan_2_discount = 5  # dollars for every $20 spent\n\n    # Calculate the total full price\n    total_full_price = full_price_per_cup * total_cups\n\n    # Plan 1: Using first sale plan (2 times since Pip wants to buy 6 cups)\n    total_price_plan_1 = total_full_price - sale_plan_1_discount * 2\n\n    # Plan 2: Using second sale plan\n    # To maximize the discount from plan 2, we check if total_full_price is at least $20\n    if total_full_price >= 20:\n        discount_times = total_full_price // 20  # Number of times Pip can use the $5 discount\n        total_discount = discount_times * sale_plan_2_discount\n        total_price_plan_2 = total_full_price - total_discount\n    else:\n        total_price_plan_2 = total_full_price\n\n    # Choose the plan with the lowest total price\n    min_total_price = min(total_price_plan_1, total_price_plan_2)\n\n    return min_total_price\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the number of students in each class\n    a_students, b_students = symbols('a_students b_students')\n\n    # Define the equations based on the problem statement\n    # If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left\n    # Total peaches = students in class A * 5 + 10\n    equation1 = Eq(a_students, b_students + 3)\n    # If all peaches are given to Class B and each student can get 8 peaches, we will need 2 more peaches\n    # Total peaches + 2 = students in class B * 8\n    equation2 = Eq(a_students * 5 + 10, b_students * 8 + 2)\n\n    # Solve the system of equations for the number of students in both classes\n    solutions = solve((equation1, equation2), (a_students, b_students))\n\n    # Calculate the number of peaches Eddie gets: the total when given to class A\n    peaches = solutions[a_students] * 5 + 10\n\n    return peaches\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)  # Round to the nearest 100\n    return rounded_number\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    # Solve using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = S % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    orange_drink_volume = 12  # Total volume of orange drink in litres\n    water_fraction = 3 / 4    # Fraction of the orange drink that is water\n    water_volume = orange_drink_volume * water_fraction\n    return water_volume\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    total_initial_money = 590\n    benson_spent = 74\n    jayden_spent = 120\n\n    # Let's denote the amount of money Jayden had left as J, and hence Benson had left as 3J.\n    # Initially: Benson_money + Jayden_money = total_initial_money\n    # After spending: (Benson_money - benson_spent) + (Jayden_money - jayden_spent) = total_initial_money\n    # Benson had 3 times the amount Jayden had left, so: Benson_money - benson_spent = 3 * (Jayden_money - jayden_spent)\n    # Now, we can combine the equations:\n    # Jayden_money - jayden_spent + 3 * (Jayden_money - jayden_spent) + benson_spent + jayden_spent = total_initial_money\n    # 4 * Jayden_money - 3 * jayden_spent = total_initial_money - benson_spent\n    # Jayden_money = (total_initial_money - benson_spent + 3 * jayden_spent) / 4\n    \n    jayden_left = (total_initial_money - benson_spent + 3 * jayden_spent) / 4\n    jayden_left -= jayden_spent\n\n    return jayden_left\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3  # total parts of the drink\n    raspberry_part = 1  # parts of raspberry juice\n    total_volume = 300  # total volume of the drink in ml\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let Betty's walking time be t (in minutes) when she reaches the store.\n    # Since Kevin walks 150 meters in 6 minutes, his speed is 25 meters/min.\n    kevin_speed = 150 / 6\n    \n    # After another 3 minutes, Kevin's total distance to the store is 150 m + 25 m/min * 3 min.\n    kevin_distance_to_store = 150 + kevin_speed * 3\n    \n    # When Kevin reaches the store, Betty is 900 meters away from the cinema.\n    # Therefore, Betty walks (150 + 25 * 3) meters in t minutes and an additional 900 meters in (t + 3) minutes.\n    # Let Betty's speed be b meters/min.\n    \n    # From the above information we have two equations:\n    # eq1: b * t = kevin_distance_to_store\n    # eq2: b * (t + 3) = kevin_distance_to_store + 900\n    \n    # From eq1, we solve for b:\n    betty_speed = kevin_distance_to_store / 6\n    \n    # Substitute b from eq1 into eq2 and solve for t:\n    t = (kevin_distance_to_store + 900) / betty_speed - 3\n    \n    # Since Betty left t minutes before Kevin and arrived at the store when Kevin had walked 150 meters (i.e., for 6 minutes),\n    # Betty leaves t - 6 minutes earlier than Kevin.\n    betty_leaves_earlier_by = t - 6\n    \n    return betty_leaves_earlier_by\n\nans = solution()"
    ]
}