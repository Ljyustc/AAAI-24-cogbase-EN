{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    m = 4\n    sum_squares = (1/6) * n * (n + 1) * (2*n + 1) - (1/6) * (m - 1) * m * (2*(m - 1) + 1)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n\n    duration = end_time - start_time\n\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    initial_amount = remaining_after_bag / 0.8\n    return initial_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Let x be the number of students on one side of the original square\n    # The total number of students would be x^2 + 5 for the original square\n    # If one row and one column are added, the square would be (x+1) by (x+1)\n    # And the total number of students needed for the larger square would be (x+1)^2\n    # According to the problem, the larger square needs 26 more students than the original\n    # So we have the equation: (x+1)^2 = x^2 + 5 + 26\n    # Simplify the equation to find x\n    x = 1\n    while (x+1)**2 != x**2 + 5 + 26:\n        x += 1\n    # Once the correct value of x is found, calculate the total number of students\n    # in the original square\n    number_of_students = x**2 + 5\n    \n    return number_of_students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    \n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let's x be the number of apples Amy has to give to John.\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples.\n    # We want Amy to have 4 more apples than John.\n    # So amy - x = john + x + 4.\n    # Solving for x, we get:\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percent = 10 / 100\n    loss_percent = 10 / 100\n\n    cost_price_profit = sale_price / (1 + profit_percent)\n    cost_price_loss = sale_price / (1 - loss_percent)\n\n    overall_cost = cost_price_profit + cost_price_loss\n    overall_sale = 2 * sale_price\n\n    profit_or_loss = overall_sale - overall_cost\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    arrange_plants = 4\n    ways = factorial(total_plants) // factorial(total_plants - arrange_plants)\n    return ways\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + (3 * jane_saved)\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    # Number of combinations for shirts and pants\n    shirts_pants_combinations = 3 * 2\n\n    # Number of combinations for dresses\n    dresses_combinations = 3\n\n    # Number of combinations for shoes\n    shoes_combinations = 4\n\n    # Number of combinations for heels (only with dresses)\n    heels_combinations = 2\n\n    # Total combinations if wearing shirts and pants\n    total_shirts_pants = shirts_pants_combinations * shoes_combinations\n\n    # Total combinations if wearing a dress\n    total_dresses = dresses_combinations * (shoes_combinations + heels_combinations)\n\n    # Sum of all possible combinations\n    total_combinations = total_shirts_pants + total_dresses\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n    \n    toms_age_solution = solve(equation, toms_age)\n    \n    return toms_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    return (2 + 3 + 5) * common_factor\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    original_units = 80\n    original_price = 100\n    price_reduction_percentage = 5 / 100\n    price_reduction_amount = original_price * price_reduction_percentage\n    additional_units = original_units + (price_reduction_amount * 4 / 1)\n\n    # The sales amount should be the same\n    # original_price * original_units = (original_price - price_reduction_amount) * additional_units\n    # Let's denote the cost price as 'cost_price'\n    # Then profit before = original_price * original_units - cost_price * original_units\n    # And profit after = (original_price - price_reduction_amount) * additional_units - cost_price * additional_units\n    # According to the question, these two profits should be equal.\n    \n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    equation = Eq(\n        original_price * original_units - cost_price * original_units,\n        (original_price - price_reduction_amount) * additional_units - cost_price * additional_units\n    )\n    cost_price_solution = solve(equation, cost_price)[0]\n    return cost_price_solution\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n\n    ans = fraction > decimal\n    return ans\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure a win, Fred needs to make sure that he leaves a multiple of 4 oranges (4, 8, 12) for George, \n    # because whatever George takes (1, 2, 3), Fred can always take the remainder to reach the next multiple of 4.\n    # Thus, Fred should aim to leave George with 12 oranges after his first turn.\n    \n    total_oranges = 15\n    safe_number = 12  # A multiple of 4 that is less than 15.\n\n    # Calculate how many oranges Fred should take on his first move\n    # to leave George with a 'losing' number of oranges (a number where no matter what George takes,\n    # Fred can always bring it back down to a multiple of 4).\n    oranges_to_take = total_oranges - safe_number\n    \n    return oranges_to_take\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for p in permutations('ABCDE'):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or \\\n           p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    eggs_used = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(eggs_used)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    count = 0\n    digits = [0, 1, 2, 3, 4, 5]\n\n    # Iterate through digits for the one that appears twice\n    for twice in digits:\n        # Iterate through digits for the one that appears three times\n        for thrice in digits:\n            if twice != thrice:\n                # Numbers ending with 0 cannot be even five-digit numbers.\n                if thrice == 0:\n                    continue\n                \n                # The first digit can't be 0, it wouldn't be a five-digit number.\n                \n                # The twice-occurring digit can't be at the last place, as the number has to be even.\n                for last_digit in [0, 2, 4]: # Even digits for the last place.\n                    if last_digit != twice and last_digit != thrice:\n                        # If the last digit is fixed and different from 'twice' and 'thrice'\n                        # Then twice has 2 positions to choose from 4 remaining positions\n                        # And 'thrice' will automatically occupy the remaining 3 positions\n                        \n                        # When 'twice' is not 0, it can occupy any of the first 4 places\n                        if twice != 0:\n                            count += 4 \n                        # When 'twice' is 0, it cannot occupy the first place\n                        else:\n                            count += 3\n                        \n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown number of each type of note\n    five, ten, twenty = symbols('five ten twenty')\n\n    # Equation representing the total number of notes being equal\n    equation1 = Eq(five, ten)\n    equation2 = Eq(ten, twenty)\n\n    # Equation representing the total value of the notes\n    total_value_eq = Eq(5 * five + 10 * ten + 20 * twenty, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, total_value_eq), (five, ten, twenty))\n\n    # Get the total number of notes\n    total_notes = solutions[five] + solutions[ten] + solutions[twenty]\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # The first digit must be 1-9 to be a three-digit number\n        for j in range(0, 10): # The middle digit can be 0-9\n            # The last digit must be equal to the first one (i) to be palindromic\n            count += 1 # No need to iterate over the last digit since it's determined by the first\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Calculate the last digit of the first sequence (2 raised to the power of 100)\n    last_digit_2s = (2 ** 100) % 10\n    \n    # Calculate the last digit of the second sequence (7 raised to the power of 100)\n    last_digit_7s = (7 ** 100) % 10\n    \n    # Calculate the last digit of the third sequence (9 raised to the power of 100)\n    last_digit_9s = (9 ** 100) % 10\n    \n    # Calculate the last digit of the entire expression\n    last_digit_final_expression = (last_digit_2s * last_digit_7s * last_digit_9s) % 10\n    \n    return last_digit_final_expression\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n    \n    def square(M, N):\n        return 8 * M - N * N\n\n    result_diamond = diamond(7, 6)\n    ans = square(result_diamond, 9)\n    \n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # since the piles must have a different number of marbles and there are 16 marbles\n    # let's start by giving 1 marble to the first pile, 2 to the second, 3 to the third,\n    # then the remaining marbles will go to the fourth pile\n    # we increment the number of marbles in each of the first three piles until the fourth pile\n    # is no longer the biggest.\n    \n    # initialize the smallest pile sizes\n    x1, x2, x3 = 1, 2, 3\n    # calculate the marbles in the fourth pile\n    x4 = 16 - (x1 + x2 + x3)\n    \n    # loop until the fourth pile is not the largest\n    while x4 >= x3 + 1:\n        x1 += 1\n        x2 += 1\n        x3 += 1\n        x4 = 16 - (x1 + x2 + x3)\n        \n    return x4\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while not (isprime(p) and isprime(p + 107)):\n        p += 1\n\n    return p\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 10  # Since we're using odd numbers, 19 is the 10th odd number\n    ans = int((1/6)*n*(n+1)*(2*n+1))\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "from math import factorial\n\ndef solution():\n    sum_fraction = 0\n    for i in range(2, 10):\n        sum_fraction += 1 / (factorial(i) * factorial(19 - i))\n\n    N_over_factorial = sum_fraction * factorial(1) * factorial(18)\n    N = int(N_over_factorial + 0.5)  # rounding to nearest integer in case of floating point arithmetic issues\n\n    ans = N // 100\n    return ans\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((i**2 + (i + 1)**2) / (i * (i + 1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b = symbols('a b')\n    equation1 = Eq(a + b, 12955)\n    equation2 = Eq(a//10 + b*10, 25006)\n    \n    solution = solve((equation1, equation2), (a, b))\n    phone_number = int(solution[a] * 10000 + solution[b])\n    return phone_number\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return (24 / 100) * 25\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 7 * 8 * (36 / 4)\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # The sum of cubes of odd numbers from 1 to 13 can be calculated by:\n    # (1) Finding the sum of numbers from 1 to 13 (using the formula for the sum of an arithmetic series)\n    # (2) Subtracting the sum of cubes of even numbers from 2 to 12\n    # However, according to the given knowledge point, the sum of cubes of the first n natural numbers is equal to the square of the sum of n natural numbers.\n    # Since only odd numbers 1 to 13 are considered, we first calculate the sum of the first (13+1)/2 natural numbers, which are 1, 2, ..., 7.\n    # Then we square the result to get the final sum of the odd cubes.\n\n    n = (13 + 1) // 2  # There are 7 odd numbers from 1 to 13\n    sum_of_numbers = n * (n + 1) // 2  # The sum of the first n natural numbers\n    sum_of_cubes = sum_of_numbers ** 2  # The square of the sum calculated above\n\n    return sum_of_cubes\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for b in range(199, 0, -1):\n        ans = custom_operation(ans, b)\n\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + 1/i\n    return product\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Let the distance between points A and B be D.\n    # Time taken for A to meet B for the first time is t, so A covers 4 km.\n    # In the same time, B covers D - 4 km.\n    # So, the speed of A (SA) is 4/t and speed of B (SB) is (D - 4)/t.\n    # After meeting for the first time, A travels (D - 4) km to reach point B and B travels 4 km to reach point A.\n    # Then they turn back and meet for the second time after covering 3 km from B and D - 3 km from A, respectively.\n    # The time taken to meet the second time will be D / (SA + SB) since it's the same as the initial distance D.\n    # From point B, A travels 3 km and B travels D - 3 km to meet.\n    # The ratio of their speeds will be the same as the ratio of distances traveled before the first meeting,\n    # which is 4 / (D - 4).\n    \n    # This gives us the equation 3 / (D - 3) = 4 / (D - 4)\n    # Cross multiply to solve for D\n    D = symbols('D')\n    equation = Eq(3 * (D - 4), 4 * (D - 3))\n    total_distance = solve(equation, D)[0]\n    \n    # The distance between the two meeting points is the distance traveled by A or B before the first meeting\n    # plus the distance traveled after they each reached the starting point of the other and then met for the second time.\n    \n    # First meeting point is 4km from A, so distance traveled by A before first meeting is 4km.\n    \n    # After the first meeting, A travels (D - 4) km to reach point B and another 3 km to the second meeting point.\n    # Total distance traveled by A is 4 + (D - 4) + 3 km.\n    distance_between_meetings = 4 + (total_distance - 4) + 3\n    \n    return distance_between_meetings - 3  # Subtracting 3 km because it's the distance away from B (not part of the distance between meeting points)\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n    \n    solutions = solve((equation1, equation2), (ken, beth))\n\n    total_seashells = solutions[ken] + solutions[beth]\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    num_containers = -(-total_apples // apples_per_container) # ceiling division\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Find the Greatest Common Divisor (GCD) of the ribbon lengths\n    gcd_12 = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_12, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square_root = int((cube - 2) ** 0.5)\n        square = square_root ** 2\n        if square == cube - 2:\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark = 26\n    sue = mark / 2\n    total = mark + sue\n    return total\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n - 1\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # David had a total of 40 notes\n    equation1 = Eq(x + y, 40)\n\n    # He spent 40% of $10 notes\n    spent_x = 0.40 * x\n    # He spent 25% of $2 notes\n    spent_y = 0.25 * y\n\n    # After spending, he had 4/5 as many $10 notes as $2 notes left\n    equation2 = Eq(x - spent_x, 4/5 * (y - spent_y))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Amount spent for $10 notes\n    spent_for_x = solutions[x] * 10 * 0.40\n    # Amount spent for $2 notes\n    spent_for_y = solutions[y] * 2 * 0.25\n\n    # Total amount spent on the gift\n    total_spent = spent_for_x + spent_for_y\n\n    return total_spent\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, john = symbols('sally john')\n    \n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n    \n    solutions = solve((equation1, equation2), (sally, john))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    # Let's denote the two original numbers as x and y\n    # According to the problem, we have:\n    # x + y = 11.63 -> (1)\n    # (x/10) + y = 5.87 -> (2) (since decimal point of x is shifted to the left by one)\n    \n    # We need to solve these two equations to find x and y\n    # Multiplying the second equation by 10 to make it easier to subtract from the first, we get:\n    # x + 10y = 58.7 -> (3)\n    \n    # Now we subtract equation (1) from equation (3)\n    y = (58.7 - 11.63) / 9  # Solved for y\n    x = 11.63 - y  # Now solve for x using equation (1)\n    \n    # The difference between the two original numbers\n    diff = abs(x - y)\n    \n    # The question asks for one hundred times the difference\n    ans = 100 * diff\n    \n    return ans\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    licia, krisnam, imran = symbols('licia krisnam imran')\n    \n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n    \n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n    \n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P != 0:\n            number = P * 1000 + A * 100 + S * 10 + O\n            if P == (S + O) % 10 and A == (S + P) % 10 and S == (O + A) % 10 and O == (P + S) % 10:\n                return number\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables\n    x, y, z = symbols('x y z')  # x: double-headed snakes, y: one-footed dragons, z: double-flying dragons\n    \n    # Heads equation: 2x + 3y + 4z = 227\n    eq1 = Eq(2 * x + 3 * y + 4 * z, 227)\n    \n    # Feet equation: x + y + 2 * z = 104\n    eq2 = Eq(x + y + 2 * z, 104)\n    \n    # Wings equation: 2 * y + 4 * z = 79 * 2 (each pair counts as 2 wings)\n    eq3 = Eq(2 * y + 4 * z, 79 * 2)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n    double_flying_dragons = solutions[z]\n    return double_flying_dragons\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    harry, liam = symbols('harry liam')\n    \n    # Original total amount of water\n    total_water = Eq(harry + liam, 640)\n    \n    # After transferring 90mL from Liam to Harry\n    transferred_water = Eq(harry + 90, 3 * (liam - 90))\n    \n    solutions = solve((total_water, transferred_water), (harry, liam))\n    \n    return solutions[harry]\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Since each kid must get at least two oranges, we first give two to each.\n    # That leaves us with 13 - 2 * 3 = 7 oranges to distribute freely.\n    # We need to find the number of non-negative integer solutions to the equation:\n    # x1 + x2 + x3 = 7, where x1, x2, and x3 are the additional oranges each kid will get.\n    # This is equivalent to the problem of distributing 7 identical items into 3 distinct\n    # boxes, which can be solved using combinations with repetition:\n    # The formula for combinations with repetition is C(n+r-1, r), where n is the number\n    # of items to distribute (7 oranges) and r is the number of boxes (3 kids).\n    # So we calculate C(7+3-1, 3-1) = C(9, 2).\n    ans = comb(9, 2)\n    return ans\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Initial number of math questions solved on Monday\n    first_day_questions = 3\n    # Total number of days from Monday to Sunday\n    total_days = 7\n    # Each day, the number of questions solved increases by 3 more than the previous day\n    daily_increment = 3\n\n    # Use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    # where n is the number of terms, first_term is the first element in the sequence,\n    # and last_term is the last element in the sequence.\n    # The last_term can be calculated by first_day_questions + daily_increment * (total_days - 1) because\n    # there are total_days days in total and he increases the number of solved questions by daily_increment each day.\n    last_day_questions = first_day_questions + daily_increment * (total_days - 1)\n    \n    total_questions = total_days / 2 * (first_day_questions + last_day_questions)\n    \n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_rate = 1 / 15\n    couple_rate = 1 / 12\n    wife_rate = couple_rate - man_rate\n    wife_time = 1 / wife_rate\n    return wife_time\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    total_participants = 85\n    bread_participants = 68\n    fruit_participants = 56\n    neither_participants = 14\n\n    both_bread_and_fruit = (bread_participants + fruit_participants + neither_participants) - total_participants\n    return both_bread_and_fruit\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Difference between the numbers of beans peeled in consecutive hours (increment)\n    increment = (28 - 20)  # This is the constant difference between each hour\n\n    # Number of beans peeled in the hour before 9 o'clock to 10 o'clock (first hour)\n    first_hour_beans = 20 - increment\n\n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # first digit can't be 0 for a three-digit number\n        for j in range(10):  # second digit can be 0-9\n            for k in range(10):  # third digit can be 0-9\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2**10) % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pearls = symbols('total_pearls')\n\n    equation = Eq(total_pearls / 2 + total_pearls / 4 + total_pearls / 6 + 3, total_pearls)\n\n    total = solve(equation, total_pearls)\n\n    return total[0]\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "def solution():\n    from itertools import combinations\n    \n    white_balls = 9\n    red_balls = 5\n    black_balls = 6\n    \n    ways = 0\n    \n    # Calculating combinations for each case according to the constraints\n    # We iterate through the possible remaining balls to find the combinations of taken balls\n    for white_left in range(3, 9):\n        for red_left in range(2, 4):\n            for black_left in range(0, 4):\n                # Calculate the number of balls taken\n                white_taken = white_balls - white_left\n                red_taken = red_balls - red_left\n                black_taken = black_balls - black_left\n                \n                # Check if the total taken balls are 10\n                if white_taken + red_taken + black_taken == 10:\n                    # Calculate combinations for each color based on their taken number\n                    ways += (len(list(combinations(range(white_balls), white_taken))) * \n                             len(list(combinations(range(red_balls), red_taken))) * \n                             len(list(combinations(range(black_balls), black_taken))))\n\n    return ways\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_cm = 100  # 1 m is 100 cm\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    increment = 2\n    while True:\n        next_term = term + increment\n        if next_term >= 100:\n            break\n        term = next_term\n        increment += 2 \n    return term\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_of_three = 120\n    sum_of_three = mean_of_three * 3\n    mean_of_four = 150\n    sum_of_four = mean_of_four * 4\n\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    bread_initial = 2.3\n    bread_given = 0.76\n    bread_left = bread_initial - bread_given\n    return round(bread_left, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We're looking for three consecutive even numbers, so they will be of the form:\n    # x, x+2, x+4 (where x is the smallest even number)\n\n    # According to the problem, we have three congruence conditions:\n    # x ≡ 0 (mod 7) => The first number is a multiple of 7\n    # (x+2) ≡ 0 (mod 8) => The second one is a multiple of 8\n    # (x+4) ≡ 0 (mod 9) => The third one is a multiple of 9\n\n    # Setting up the congruence equations:\n    congruences = [\n        (0, 7),  # x ≡ 0 (mod 7)\n        (-2, 8),  # x ≡ -2 (mod 8) since x+2 ≡ 0 (mod 8)\n        (-4, 9),  # x ≡ -4 (mod 9) since x+4 ≡ 0 (mod 9)\n    ]\n\n    # Solving the congruences using the Chinese Remainder Theorem:\n    x = solve_congruence(*congruences)\n\n    # Since x is the first even number, the sum of the three numbers will be x + (x+2) + (x+4)\n    sum_of_numbers = x[0] * 3 + 6\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    mangoes_half_full_weight = half_full_weight - (full_weight - half_full_weight)\n\n    return mangoes_half_full_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, and Bud is 6th from the end.\n    # There are 5 children in between Pip and Bud.\n\n    # Including Pip, but excluding Bud, there are 6 children from Pip to Bud.\n    # Therefore, we add Pip's position (5th excluding Pip) to the children in-between and Bud's position from the end.\n    total_children = (6 - 1) + 5 + (6 - 1)\n\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    # First term of the arithmetic sequence\n    a1 = 10\n    # Number of terms\n    n = 25\n    # Calculate the common difference using the information given about the fourth term\n    # a4 = a1 + (4-1)*d\n    a4 = 25\n    d = (a4 - a1) // (4 - 1)\n\n    # Sum of the arithmetic sequence formula: S_n = n/2 * (2a1 + (n-1)d)\n    S_n = n / 2 * (2 * a1 + (n - 1) * d)\n    return int(S_n)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    family_average_age = 29\n    family_members = 6\n    total_family_age = family_average_age * family_members\n    children_total_age = 64\n    parents_total_age = total_family_age - children_total_age\n    parents_members = family_members - (total_family_age - children_total_age) // family_average_age\n    average_age_parents_3_years_ago = (parents_total_age - 3 * parents_members) / parents_members\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_passed = 5\n    total_paintings_target = 56\n    \n    paintings_per_day = total_paintings_done / total_days_passed\n    remaining_paintings = total_paintings_target - total_paintings_done\n    days_needed = remaining_paintings / paintings_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    for a in range(10):\n        if (2 - a + 0 - 1 + 3 - 8 + 2 - 4) % 11 == 0 and (a * 10000000 + 2018324) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    insert_after = 3\n    leaves = total_papers // insert_after\n    return leaves\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n    \n    for perm in permutations(times):\n        time_taken = 0\n        # Send the first two\n        time_taken += max(perm[0], perm[1])\n        # Return the fastest one\n        time_taken += perm[0]\n        # Send the next two\n        time_taken += max(perm[2], perm[3])\n        # Return the fastest one again\n        time_taken += perm[0]\n        # Repeat the process for all permutations and find the minimum time\n        min_time = min(min_time, time_taken)\n    \n    return min_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    n_term_5 = 5\n    n_term_12 = 12\n\n    common_diff = (term_12 - term_5) / (n_term_12 - n_term_5)\n\n    return common_diff\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Applying distributive law of multiplication over addition\n    # a * b + a * c + d * a = a * (b + c + d)\n    a = 95\n    b = 37\n    c = 42\n    d = 21\n    ans = a * (b + c + d)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weight of Pip, Bud, and Bob\n    pip, bud, bob = symbols('pip bud bob')\n    \n    # Create equations based on the given averages\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_value = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    nums = [29, 37, 76, 63, 24, 45, 61, 55]\n    return sum(nums)\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    # Calculate the total amount of person-days required to build the bridge\n    total_person_days = initial_people * initial_days\n\n    # Calculate the number of people needed to build the bridge in the target days\n    required_people = total_person_days / target_days\n\n    # Since we need whole people, we take the ceiling of the number of required people\n    from math import ceil\n    additional_people_needed = ceil(required_people) - initial_people\n\n    return additional_people_needed\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # start with the given arithmetic progression\n    first_term = 2\n    difference = 3  # common difference in AP is 3\n    \n    # we keep removing first three numbers and adding their sum to the end\n    # as the difference is 3 and we are summing three numbers each time\n    # the next number will still follow the AP with the same difference\n    # We have to do this until we are left with 3 numbers\n\n    # Find the last number of the original sequence\n    last_number = 242\n    \n    # Calculate the number of terms in the original sequence\n    # nth_term = first_term + (n - 1) * difference\n    # last_number = first_term + (n - 1) * difference\n    # n = (last_number - first_term) / difference + 1\n    n = (last_number - first_term) / difference + 1\n\n    # calculate how many numbers we remove\n    # since we're removing 3 at a time, we need to perform this n // 3 times\n    numbers_removed = (n - 1) // 3\n    \n    # calculate the new first term after all those removals\n    # first_term_new = first_term + numbers_removed * 3 * difference\n    first_term_new = first_term + numbers_removed * 3 * difference\n    \n    # the second number is just one \"difference\" after the new first term\n    second_number = first_term_new + difference\n    \n    return second_number\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b') # symbolize school A and B's original number of students\n\n    equation1 = Eq(a + b, 1050) # total students in both schools\n    equation2 = Eq(a - 20, b + 10) # school A has 10 more students than school B after the transfer\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let the usual speed be s meters per minute, \n    # and the total distance be d meters.\n    # At the usual speed for 30 minutes, she covers the distance d: d = 30s.\n    # The reduced speed is s - 0.2s = 0.8s meters per minute.\n    # Time taken to run the remaining 2400 meters at reduced speed: 2400 / (0.8s)\n    # She is 5 minutes late, so the time taken for the reduced speed part is 35 minutes.\n    # Hence, (30s - 2400) + 2400 / (0.8s) = 35.\n    # We solve this equation for s, then find the distance d.\n\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    s = symbols('s', positive=True, real=True)  # speed in meters per minute\n    d = symbols('d', positive=True, real=True)  # total distance in meters\n\n    # Given equations\n    eq1 = Eq(d, 30 * s)  # Total distance at usual speed\n    eq2 = Eq((d - 2400) / s + 2400 / (0.8 * s), 35)  # Total time is 35 minutes when delayed\n\n    # Solve the equations\n    sol = solve((eq1, eq2), (s, d))\n\n    return sol[d]\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # 5:00 am temperature in degrees Celsius\n    rate_of_rise = 2  # Temperature rise per hour in degrees Celsius\n    hours_passed = 5 + 0.5  # Time from 5:00 am to 10:30 am in hours\n\n    current_temp = initial_temp + rate_of_rise * hours_passed\n\n    return current_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for the original amount\n    original_amount = symbols('original_amount')\n\n    # Write the equations based on the problem statement\n    after_shop_A = Eq(original_amount / 2 - 1, original_amount - (original_amount / 2 + 1))\n    after_shop_B = Eq(after_shop_A.rhs / 2 - 2, after_shop_A.rhs - (after_shop_A.rhs / 2 + 2))\n    after_shop_C = Eq(after_shop_B.rhs / 3 - 3, after_shop_B.rhs - (after_shop_B.rhs / 3 + 3))\n\n    # Solve for the remaining money which is $49\n    final_amount = Eq(after_shop_C.rhs, 49)\n\n    # Solve the equations\n    solutions = solve((after_shop_A, after_shop_B, after_shop_C, final_amount), original_amount)\n\n    return solutions[original_amount]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a1 = symbols('a1')\n    total_books = 280\n    shelves = 7\n    difference = -3\n    \n    # Total books formula for arithmetic sequence: n/2 * (2a1 + (n-1)d)\n    total_eq = Eq(shelves/2 * (2*a1 + (shelves-1)*difference), total_books)\n    \n    a1_value = solve(total_eq, a1)\n    \n    return a1_value[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case: Darrell draws all pencils of the other two colors first\n    max_other_colors = 3 + 3  # Maximum number of blue and white pencils\n    # Darrell needs to draw at least one more to be sure to get a green one\n    return max_other_colors + 1\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    number_of_boys = total_students * fraction_boys\n    number_of_girls = total_students - number_of_boys\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, sqrt\n\n    ans = 1\n    # Find the divisors of 2240\n    divs = divisors(2240)\n    # Iterate over the divisors\n    for d in divs:\n        # Check if 2240 / d is a perfect square\n        if sqrt(2240 / d).is_integer():\n            ans = d\n            break\n\n    return ans\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    # chorores repeat every x days\n    sweep = 3\n    mope = 5\n    cook = 9\n    clean = 3 * 7  # 3 weeks\n\n    # Least Common Multiple (LCM) of the chores frequency will give the days after which all chores coincide\n    ans = lcm(sweep, mope, cook, clean)\n    \n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    # If every kid eats 18 candies, then 12 more candies are needed.\n    equation1 = Eq(kids * 18, candies + 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids.\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    \n    # Sum the digits for pages 1 through 9\n    for i in range(1, 10):\n        total_sum += i\n    \n    # Sum the digits for pages 10 through 99\n    for i in range(10, 100):\n        total_sum += (i // 10) + (i % 10)\n    \n    # Sum the digits for pages 100 through 310\n    for i in range(100, 311):\n        total_sum += (i // 100) + ((i // 10) % 10) + (i % 10)\n        \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = dad_age_now - 2 - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    \n    return round(cost_for_11_items, 2)\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import Rational, sqrt, cbrt\n\n    expression = 16.7 - cbrt(((Rational(-456, 100)**2) - (Rational(81, 10)**3)) / (Rational(72, 10)**3) / (-sqrt(Rational(27, 4)) - (-Rational(3015, 100))))\n    ans = round(expression, 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Current ages\n    oliver_age = 20\n    lin_age = 26\n    \n    # Target sum of their ages\n    target_sum = 48\n\n    # Calculate how many years later the sum of their ages equals to the target_sum\n    years_later = (target_sum - (oliver_age + lin_age)) // 2  # Both ages increase by 1 each year\n\n    return years_later\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    total_distance = 440\n    speed_ratio = 7 / 4\n    # Jayden's speed is 7x and Carter's speed is 4x where x is the common speed factor.\n    # When Jayden meets Carter for the first time, the total distance they covered is total_distance\n    # Jayden's distance + Carter's distance = total_distance\n    # 7 * t * x + 4 * t * x = total_distance\n    # (7 + 4) * t * x = total_distance -> 11 * t * x = total_distance\n    # Hence, t (time taken to meet for the first time) = total_distance / (11 * x)\n    # In this time Jayden covers a distance of 7 * t * x\n    meeting_time = total_distance / (11)\n    jayden_distance_first_meeting = 7 * meeting_time\n    return jayden_distance_first_meeting\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n\n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6 / 5)\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n\n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n\n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Sam, Peter, and John originally had\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter give 20% of their stickers to John\n    sam_gives = 0.20 * sam\n    peter_gives = 0.20 * peter\n\n    # As a result, John's stickers increase by 80%\n    # So, John now has 180% of the stickers he originally had\n    # There's an equation involving the stickers John has after receiving from Sam and Peter\n    john_new = john + sam_gives + peter_gives\n    equation_john = Eq(john_new, 1.80 * john)\n\n    # Sam had 20 stickers more than John in the end\n    equation_sam = Eq(sam - sam_gives, john_new + 20)\n\n    # Sam and Peter had stickers in the ratio 7 : 5 initially\n    equation_ratio = Eq(sam, 7/5 * peter)\n\n    # Solve the system of equations\n    solutions = solve((equation_john, equation_sam, equation_ratio), (sam, peter, john))\n\n    # Return the number of stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_five = 87\n    total_students = 6\n    new_mean_all = 88\n\n    total_score_five = mean_of_five * (total_students - 1)  # Total score of five students\n    total_score_all = new_mean_all * total_students         # Total score including Jim\n\n    jim_score = total_score_all - total_score_five          # Jim's score\n\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    # Given values\n    cost_price = 135\n    selling_price = 185\n    remaining_bats = 3\n    profit = 2945\n\n    # Number of bats equation: proceeds = (cost_price * bats) + profit\n    # proceeds = selling_price * (bats - remaining_bats)\n    # (selling_price * (bats - remaining_bats)) = (cost_price * bats) + profit\n    # selling_price * bats - selling_price * remaining_bats = cost_price * bats + profit\n    # (selling_price - cost_price) * bats = selling_price * remaining_bats + profit\n    # bats = (selling_price * remaining_bats + profit) / (selling_price - cost_price)\n\n    bats = (selling_price * remaining_bats + profit) / (selling_price - cost_price)\n\n    return int(bats)\n\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # Raja's balance after spending is his original amount minus 286\n    raja_after_spending = raja - 286\n    # Kumar's balance after spending is his original amount minus 109\n    kumar_after_spending = kumar - 109\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(raja, kumar)  # Initially, Raja and Kumar have the same amount\n    equation2 = Eq(kumar_after_spending, 4 * raja_after_spending)  # After spending, Kumar has 4 times as much as Raja\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    # Since both had the same amount at first, return the value of Raja or Kumar\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    minibusses_needed = (boys + minibus_capacity - 1) // minibus_capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)  # ▲ + ▲ = ■\n    equation2 = Eq(square + triangle, circle)    # ■ + ▲ = ●\n    equation3 = Eq(diamond, circle + square + triangle)  # ♦ = ● + ■ + ▲\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    triangle_value = solutions[triangle]\n    diamond_value = solutions[diamond]\n\n    # Calculate how many triangles are equal to one diamond\n    ans = diamond_value / triangle_value\n\n    return ans\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost = symbols('chair_cost')\n    table_cost = chair_cost + 160\n    total_cost = 1 * table_cost + 5 * chair_cost\n    \n    equation = Eq(total_cost, 328)\n    sol = solve(equation, chair_cost)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of flow for the hot tap be h and cold tap be c.\n    h, c = symbols('h c')\n\n    # The combined flow rate is such that the bath fills in 10 minutes.\n    # So, 1 bath/10 min = h + c\n    equation1 = Eq(h + c, 1/10)\n\n    # Water flows from the cold tap at twice the rate of the hot tap, c = 2h\n    equation2 = Eq(c, 2 * h)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (h, c))\n\n    # Calculate time taken by cold tap to fill the bath, which is the reciprocal of the rate.\n    # Time taken by cold tap = 1/c\n    time_cold_tap = 1 / solutions[c]\n\n    return time_cold_tap\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # Total sum of all 10 numbers\n    total_sum = 10 * 1111\n    \n    # Let the mean of the last 6 numbers be x\n    # Then mean of the first 4 numbers is x - 240\n    # The sum of the first 4 numbers is 4 * (x - 240)\n    # The sum of the last 6 numbers is 6 * x\n    # The total sum is the sum of the first 4 and last 6 numbers\n    # So, 4 * (x - 240) + 6 * x = total_sum\n    \n    # Solving for x\n    x = (total_sum + 4 * 240) / 10\n    \n    return int(x)\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    speed_a = 60\n    speed_b = 50\n    time_ab_meet = 15\n    \n    distance_ab_meet = (speed_a + speed_b) * time_ab_meet\n    \n    time_ac_meet = distance_ab_meet / (speed_a + 40)\n    \n    distance_ac_meet = speed_a * time_ac_meet\n    \n    total_distance = distance_ab_meet + distance_ac_meet\n    return total_distance\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Rachel, Alice = symbols('Rachel Alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they will have the same amount\n    equation1 = Eq(Rachel - 10, Alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candy\n    equation2 = Eq(Rachel + 10, 3 * (Alice - 10) + 4)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (Rachel, Alice))\n    \n    # Total candies they originally had\n    total_candies = solutions[Rachel] + solutions[Alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from sympy import symbols, solve\n\n    # We can have each letter represent a unique digit from 0 to 9\n    I, S, P = symbols('I S P', integer=True)\n    \n    # According to the equation given: IS + IS + IS + IS = PI\n    # This can become: 4 * (10 * I + S) = 10 * P + I\n    # So now we just need to solve for I, S, and P\n    # We also know that I, P, and S are all unique digits, so they are between 0 and 9\n    # and I and P cannot be 0 because they are the first digits in IS and PI respectively.\n    \n    equation = 4 * (10 * I + S) - (10 * P + I)\n    solutions = solve((equation, I > 0, S >= 0, S < 10, P > 0, P < 10), (I, S, P))\n\n    # Find a solution that respects the distinctness of the digits\n    for sol in solutions:\n        if len(set(sol)) == len(sol):  # Ensuring the digits are unique\n            return 10 * sol[P] + sol[I]  # Returning the value of PI\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Speed definitions\n    speed1 = 7  # meters per second\n    speed2 = 5  # meters per second\n    speed3 = 8  # meters per second\n\n    # Distance definitions\n    distance1 = 280  # meters\n    distance2 = 400  # meters\n    distance3 = 800 - (distance1 + distance2)  # Remaining distance in meters\n\n    # Time calculations\n    time1 = distance1 / speed1  # time spent on the first part of the race in seconds\n    time2 = distance2 / speed2  # time spent on the middle part of the race in seconds\n    time3 = distance3 / speed3  # time spent on the last part of the race in seconds\n\n    # Total time spent\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio = 3 / 2   # Jocye's speed to Lori's speed ratio\n    # Calculate Jocye's speed based on the ratio and Lori's speed\n    jocye_speed = lori_speed * ratio\n    # Calculate how far Jocye can run in 10 seconds based on her speed\n    distance = jocye_speed * 10\n    return distance\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    initial_mass_saline = 1791\n    initial_concentration = 0.35\n    final_concentration = 0.45\n    desired_concentration = 0.35\n\n    # Calculate the initial mass of salt\n    initial_mass_salt = initial_mass_saline * initial_concentration\n\n    # Calculate the mass of saline after evaporation (salt mass doesn't change)\n    # Let x be the mass of water evaporated \n    # initial_mass_salt = final_mass_saline * final_concentration\n    final_mass_saline = initial_mass_salt / final_concentration\n\n    # Calculate the mass of water evaporated\n    mass_water_evaporated = initial_mass_saline - final_mass_saline\n\n    # Calculate the mass of saline solution after water is added\n    # Let y be the mass of water added back\n    # (initial_mass_salt + y) / (final_mass_saline + y) = desired_concentration\n    # initial_mass_salt = (final_mass_saline + y) * desired_concentration\n    # y = (initial_mass_salt / desired_concentration) - final_mass_saline\n    mass_water_added = (initial_mass_salt / desired_concentration) - final_mass_saline\n\n    return mass_water_added\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3\n\n    # Using the conditional probability formula P(B|A) = P(A and B) / P(A)\n    prob_over_25 = (prob_over_25_given_over_20 * prob_over_20) / prob_over_20\n\n    return prob_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # Distance where they meet from home in metres\n    total_distance = 780  # Total distance from home to the library in metres\n\n    # Distance Danny covered when they met\n    danny_distance_met = total_distance - distance_met\n    \n    # Time taken by Don to meet Danny\n    time_don_to_meet = distance_met / don_speed\n    \n    # Danny's speed = Distance covered by Danny / Time taken by Don to meet\n    danny_speed = danny_distance_met / time_don_to_meet\n    \n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    number_of_teams = 5\n    games_played = comb(number_of_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all ingredients to grams\n    flour_g = 1000 + 500    # 1 kg 500 g of flour\n    sugar_g = 1000 + 200    # 1 kg 200 g of brown sugar\n    butter_g = 900          # 900 g of butter\n\n    # Calculate the total weight of the mixture\n    total_g = flour_g + sugar_g + butter_g\n\n    # Divide the mixture equally into 8 cake tins\n    each_tin_g = total_g / 8\n\n    return each_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    sum_of_series = 0\n    for numerator in range(1, 11):\n        for denominator in range(numerator, 11):\n            sum_of_series += numerator / denominator\n    return sum_of_series\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from math import factorial as fact\n\n    # There are two places where A and B can stand (far right or far left)\n    # Once A or B is placed on one side, the other must go to the opposite side\n    # There are 2 choices for who goes on the first position (A or B)\n    # and 2 choices for who goes on the opposite side (the remaining one of A or B).\n    # The remaining two people (C and D) can stand in 2! ways.\n\n    # Therefore, the number of different lineups is:\n    # 2 positions * 2 choices for the first * 2 choices for the second * 2! for the rest\n    positions = 2\n    choices_for_A_or_B = 2\n    ways_for_C_and_D = fact(2)\n\n    ans = positions * choices_for_A_or_B * ways_for_C_and_D\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    statements = {\n        2016: lambda boxes: boxes[2016] == (boxes[2016] or boxes[2018]),\n        2017: lambda boxes: boxes[2017] == boxes[2016] or boxes[2017] or boxes[2018] or boxes[2019],\n        2018: lambda boxes: boxes[2018] == not(boxes[2016] or boxes[2019]),\n        2019: lambda boxes: boxes[2019] == not(boxes[2018])\n    }\n\n    # Loop through each box, considering that each one might have the ball\n    # and check the validity of each statement.\n    for box in statements:\n        boxes = {2016: False, 2017: False, 2018: False, 2019: False}\n        boxes[box] = True  # Assume the ball is in the current box\n\n        valid_count = sum(1 for stmt in statements if statements[stmt](boxes))\n        # If only one statement is false, this is the correct box\n        if valid_count == 3:\n            return box\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits = 792\n    pages = 0\n    count = 0\n    \n    # Check how many digits are used by pages with 1, 2, 3, ...\n    for i in range(1, 12): # Reasonable upper limit for page numbers\n        if count + i * 9 * (10 ** (i - 1)) < digits:\n            count += i * 9 * (10 ** (i - 1))\n            pages += 9 * (10 ** (i - 1))\n        else:\n            remaining = (digits - count) // i\n            pages += remaining\n            break\n    \n    return pages\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_number = float('inf')\n    for perm in permutations(digits, 4):\n        number = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]\n        if number % 2 == 0 and number < min_number:\n            min_number = number\n    return min_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):  # start from the largest two-digit number\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work_done_by_1_worker = workers * days_for_3_workers\n    days_for_1_worker = work_done_by_1_worker\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(6 * (10 * x + y) + 25, 20 * x + y)\n    solutions = solve(equation, (x, y))\n\n    A = 10 * solutions[x] + solutions[y]\n\n    # Check if John's assumption was right\n    if A == 45:\n        return (\"John is right\", A)\n    else:\n        return (\"John is wrong\", A)\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # For the expression a + b / c - d, we consider the positions where parentheses can be inserted\n    # Case 1: No parentheses\n    # Case 2: (a + b) / c - d\n    # Case 3: a + (b / c) - d\n    # Case 4: a + b / (c - d)\n    # Case 5: (a + b / c) - d\n    # Case 6: a + (b / c - d)\n    # Case 7: ((a + b) / c) - d\n    # Case 8: a + ((b / c) - d)\n    a, b, c, d = 285, 15, 5, 2\n    results = set()\n    \n    # Case 1\n    results.add(a + b / c - d)\n    \n    # Case 2\n    results.add((a + b) / c - d)\n    \n    # Case 3\n    results.add(a + (b / c) - d)\n    \n    # Case 4\n    results.add(a + b / (c - d))\n    \n    # Case 5\n    results.add((a + b / c) - d)\n    \n    # Case 6\n    results.add(a + (b / c - d))\n    \n    # Case 7 and Case 8 are the same as Case 5 and Case 6.\n    \n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    # Define the system of linear equations based on the given conditions\n    from sympy import symbols, Eq, solve\n\n    # Let a1 and a2 be the symbols for the first two terms of the sequence\n    a1, a2 = symbols('a1 a2')\n    \n    # Create equations based on the given sum of terms\n    sum_1492 = a1 + (a1 + a2) * 1491 / 2  # Sum of an arithmetic sequence\n    sum_1985 = a1 + (a1 + a2) * 1984 / 2\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(sum_1492, 1985)\n    equation2 = Eq(sum_1985, 1492)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a1, a2))\n    a1_solution = solutions[a1]\n    a2_solution = solutions[a2]\n\n    # Get the third term of the sequence\n    a3_solution = a2_solution - a1_solution\n\n    # Calculate the sum of first 2001 terms\n    sum_2001 = a1_solution + (a1_solution + a2_solution) * 2000 / 2  # Sum of an arithmetic sequence\n\n    return sum_2001\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n\n    for locker_num in range(1, 101):\n        # Check for divisibility by 3 and 5 \n        div_by_3 = locker_num % 3 == 0\n        div_by_5 = locker_num % 5 == 0\n\n        # Initially all lockers are unlocked\n        # If divisible by 3, it is locked for the first time\n        # Then if divisible by 5, the state is toggled (locked becomes unlocked and vice versa)\n        # As a result, a locker remains unlocked only if it's not divisible by 3 or it is divisible by both 3 and 5\n        if not div_by_3 or (div_by_3 and div_by_5):\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "def solution():\n    from itertools import permutations\n\n    # Total arrangements without constraints\n    total_arrangements = list(permutations('ABCDEFG'))\n\n    # Filter out arrangements according to given conditions\n    valid_arrangements = [arr for arr in total_arrangements if\n                          (arr.index('A') < arr.index('B') and arr.index('A') > arr.index('C')) or \n                          (arr.index('A') > arr.index('B') and arr.index('A') < arr.index('C'))]\n\n    valid_arrangements = [arr for arr in valid_arrangements if\n                          (arr.index('D') != arr.index('E') - 1) and \n                          (arr.index('D') != arr.index('E') + 1)]\n\n    valid_arrangements = [arr for arr in valid_arrangements if\n                          (arr.index('F') == arr.index('G') + 1) or\n                          (arr.index('F') == arr.index('G') - 1)]\n\n    return len(valid_arrangements)\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # The ratio of their speed is 4:3 from the initial levels reached\n    nicolas_speed = 4\n    yiding_speed = 3\n    \n    # When Nicolas reaches level 16, we need to find the level of Yiding\n    nicolas_target_level = 16\n    yiding_level = (nicolas_target_level * yiding_speed) // nicolas_speed\n    \n    return yiding_level\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    cost_per_cake = symbols('cost_per_cake')\n    money_lucy_has = symbols('money_lucy_has')\n\n    # Two equations based on the given conditions\n    equation1 = Eq(10 * cost_per_cake - money_lucy_has, 11)\n    equation2 = Eq(13 * cost_per_cake - money_lucy_has, 26)\n\n    # Solve for the cost of one cake\n    solutions = solve((equation1, equation2), (cost_per_cake, money_lucy_has))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_count = 4\n    girls_count = 6\n    avg_mass_boys = 50\n    avg_mass_girls = 40\n\n    total_mass_boys = boys_count * avg_mass_boys\n    total_mass_girls = girls_count * avg_mass_girls\n    total_mass = total_mass_boys + total_mass_girls\n    total_children = boys_count + girls_count\n    \n    avg_mass_children = total_mass / total_children\n\n    return avg_mass_children\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    ans = (4.6 + 13.8) / 2\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    total_runs = total_matches * 40  # mean score times the number of matches\n    known_runs = 37 + 53 + 29 + 41\n    x = total_runs - known_runs\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    # Calculate permutations with repetitions\n    permutations = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    \n    return permutations\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # If you take out three marbles of each color you can end with 3 of each but not 4 of any so add one more to ensure 4 of the same color\n    red = 3 # number of red marbles to ensure not getting 4 reds\n    blue = 3 # number of blue marbles to ensure not getting 4 blues\n    green = 3 # number of green marbles to ensure not getting 4 greens\n    return red + blue + green + 1 # add one more to ensure at least 4 of the same color\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and g be the number of goats initially\n    c, g = symbols('c g')\n\n    # We know that initially 65% of the animals were cows, and the rest were goats\n    initial_total = c + g\n    equation1 = Eq(c, 0.65 * initial_total)\n\n    # When 240 more animals are added, the percentage of cows becomes 65% + 20% = 85%\n    new_total = initial_total + 240\n    new_c = c + 240\n    equation2 = Eq(new_c, 0.85 * new_total)\n\n    # The number of goats doubled\n    new_g = 2 * g\n    equation3 = Eq(new_g, new_total - new_c)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(100000, 1000000):  # Range for six-digit numbers\n        if str(num)[-1] == '9':  # Check if the last digit is 9\n            stripped_num = int(str(num)[:-1])  # Remove the last digit\n            new_num = int('9' + str(stripped_num))  # Add 9 to the beginning\n            if new_num == 4 * num:  # Check the condition\n                return num  # Return the special number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, jonathan = symbols('abigail jonathan')\n    \n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    \n    # Combined work rate per day when both are working\n    combined_work_rate = alice_work_rate + bob_work_rate\n    \n    # Total work completed by the end of the 27th day\n    total_work_completed = 27 * bob_work_rate\n\n    # Function to calculate the amount of work done by Alice before she takes off\n    def work_done_by_alice(days_worked_by_alice):\n        return days_worked_by_alice * alice_work_rate\n\n    # Find the day when Alice starts her leave\n    for days_worked_by_alice in range(27):\n        # Total work done by Alice and Bob together when Alice worked for some days\n        total_work_done = total_work_completed + work_done_by_alice(days_worked_by_alice)\n        if total_work_done >= 1:  # The job is finished\n            days_off = 27 - days_worked_by_alice  # Days Alice took off\n            return days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    a, b, c, d = 4, 3, 3, 4\n    res1 = a * b + a - b\n    res2 = c * d + c - d\n    ans = res1 - res2\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    def S(a1, a2, total_terms, terms_count):\n        d = a2 - a1\n        sum_first_terms = terms_count * (2 * a1 + (terms_count - 1) * d) // 2\n        a_last_terms = a1 + (total_terms - terms_count) * d\n        sum_last_terms = terms_count * (2 * a_last_terms + (terms_count - 1) * d) // 2\n        return sum_last_terms - sum_first_terms\n    \n    ans = S(131, 128, 27, 12)\n    return ans\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # First equation: 3 apples + 2 bananas = £1.25\n    eq1 = Eq(3 * apple + 2 * banana, 1.25)\n\n    # Second equation: 1 apple + 1 banana = £0.48\n    eq2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    prices = solve((eq1, eq2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = prices[banana] * 5\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days within which the storybook needs to be finished reading\n    # Let p be the total number of pages in the storybook\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she finishes 2 days after the deadline:\n    # So total days taken when reading 30 pages a day = d + 2\n    # Therefore, total pages = 30 * (d + 2)\n    equation1 = Eq(30 * (d + 2), p)\n\n    # If Vanessa reads 39 pages a day, she finishes 4 days before the deadline:\n    # So total days taken when reading 39 pages a day = d - 4\n    # Therefore, total pages = 39 * (d - 4)\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (d, p))\n\n    # Number of days to finish the book and total number of pages\n    days_to_finish = solution[d]\n    total_pages = solution[p]\n\n    return days_to_finish, total_pages\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '202002020202'  # one complete cycle in the sequence\n    cycle_length = len(sequence)\n    count_2_in_cycle = sequence.count('2')\n\n    total_cycles = 535 // cycle_length\n    remaining_digits = 535 % cycle_length\n\n    total_2s = total_cycles * count_2_in_cycle\n    total_2s += sequence[:remaining_digits].count('2')\n\n    return total_2s\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    distance_apart_initial = 60\n    distance_apart_final = 240\n    speed_A = 44\n    speed_B = 46\n    relative_speed = speed_A + speed_B\n    distance_covered = distance_apart_final - distance_apart_initial\n    time_elapsed = distance_covered / relative_speed\n    return time_elapsed\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    initial_concentration = 0.16  # 16% concentration\n    volume_ratio_sum = 10 + 4 + 3  # Sum of volume ratios of large, medium, and small balls\n    overflow_ratio = 0.10  # 10% overflow\n\n    # Determining the volume of saline solution lost due to overflow\n    # after the small ball is immersed and removed\n    small_ball_lost_volume = 3 / volume_ratio_sum\n    remaining_concentration_after_small = initial_concentration * (1 - small_ball_lost_volume)\n\n    # Determining the volume of saline solution lost due to overflow\n    # after the medium ball is immersed and removed\n    medium_ball_lost_volume = 4 / volume_ratio_sum\n    remaining_concentration_after_medium = remaining_concentration_after_small * (1 - medium_ball_lost_volume)\n\n    # Determining the volume of saline solution lost due to overflow\n    # after the large ball is immersed and removed\n    # Note: After the large ball, we add pure water until the cup is full,\n    # effectively diluting the concentration one last time\n    large_ball_lost_volume = 10 / volume_ratio_sum\n    remaining_concentration_final = remaining_concentration_after_medium * (1 - large_ball_lost_volume)\n\n    # Rounding the concentration to one decimal place\n    final_concentration = round(remaining_concentration_final * 100, 1)\n    \n    return final_concentration\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Assume n is the number of students\n    n = symbols('n', integer=True)\n    # According to the pigeonhole principle, the minimum number of students (n)\n    # that guarantees at least one question answered correctly by all pairs of students\n    # is obtained when adding one to the product of the number of questions that can\n    # gather n - 1 students. In this case, since each question has 500 correct answers,\n    # we want to solve for n such that (500 choose 2) * 6 < (n choose 2).\n    # Transforming this inequality, it can be reduced to: 500 * 499 / 2 * 6 < n * (n - 1) / 2\n    # Multiplying both sides by 2 to get rid of the fraction gives us:\n    # 500 * 499 * 6 < n * (n - 1), so we solve this inequality for n.\n\n    # Calculate the minimum number of students (n) for the inequality to hold\n    inequality = 500 * 499 * 6 < n * (n - 1)\n    students = solve(inequality, n)\n\n    # Since we want the minimum integer that satisfies the inequality,\n    # we look for the first integer greater than the square root of the left hand side\n    ans = next(x for x in students if x.is_integer and x > 0)\n    return ans\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables: initial number of 50-cent and 1-dollar coins before getting more from his mother.\n    total_coins_initial = symbols('total_coins_initial')\n    fifty_cent_initial = 2/7 * total_coins_initial\n    one_dollar_initial = total_coins_initial - fifty_cent_initial\n\n    # After his mother gave him coins:\n    # He received 10 one-dollar coins and the equivalent of 5 dollars in fifty-cent coins (which is 10 fifty-cent coins).\n    fifty_cent_final = fifty_cent_initial + 10\n    one_dollar_final = one_dollar_initial + 10\n\n    # Final state:\n    # He has twice as many one-dollar coins as fifty-cent coins.\n    equation = Eq(one_dollar_final, 2 * fifty_cent_final)\n\n    # Solve the equation\n    solution = solve(equation, total_coins_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    adult_price = 5\n    child_price = 3\n    total_tickets = 19\n    total_sales = 75\n\n    for adults in range(total_tickets + 1):\n        children = total_tickets - adults\n        if adult_price * adults + child_price * children == total_sales:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anna, betsy, charlene = symbols('anna betsy charlene')\n    betsy_initial = symbols('betsy_initial')\n    \n    # After transactions\n    equation1 = Eq(anna + 8, betsy - 8 - 15)\n    equation2 = Eq(betsy - 8, charlene + 15)\n    equation3 = Eq(anna + betsy - 8 + charlene + 15, 168)\n    \n    # Final ratio\n    equation4 = Eq(anna / betsy / charlene, 2 / 5 / 7)\n    \n    # Betsy's initial count\n    equation5 = Eq(betsy_initial, betsy + 15)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), \n                      (anna, betsy, charlene, betsy_initial))\n\n    return solutions[betsy_initial]\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B = symbols('A B')\n    original_total_population = 120\n    migration_to_B = 2/5 * A\n    population_growth_B = 1/3\n    migration_to_A = 1/8 * (B + migration_to_B + (B + migration_to_B) * population_growth_B)\n    final_population_increase = 20\n\n    eq1 = Eq(A + B, original_total_population)\n    eq2 = Eq(B + migration_to_B + (B + migration_to_B) * population_growth_B - migration_to_A, A + original_total_population + final_population_increase)\n    \n    solutions = solve((eq1, eq2), (A, B))\n    original_population_B = solutions[B]\n    return original_population_B\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_per_day = 7\n    brenda_saved_per_day = 6\n    andy_total_saved = 378\n    days_andy_saved = andy_total_saved / andy_saved_per_day\n    brenda_total_saved = days_andy_saved * brenda_saved_per_day\n    return brenda_total_saved\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # If we need to ensure two numbers have a difference of 4, we can divide\n    # the numbers into groups where the members of each group will have differences\n    # of less than 4 with each other and at least 4 with any number outside the group.\n\n    # Grouping example: (1, 2, 3, 4), (5, 6, 7, 8), ..., (37, 38, 39, 40)\n    # We have 10 groups, and if we pick one number from each group, we cannot have\n    # two numbers with a difference of 4 since each group spans only 3 (4 - 1).\n    \n    # To ensure two numbers will definitely have a difference of 4, we must take\n    # one number from each group plus one extra number.\n    # Number of groups = 40 / 4 (since each group contains 4 numbers to span a difference less than 4)\n    num_of_groups = 40 // 4\n    \n    # The minimum number is the total number of groups plus one.\n    min_numbers = num_of_groups + 1\n    return min_numbers\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume: V = l * b * h\n    # New volume: V' = (1.10 * l) * (0.80 * b) * (11/10 * h) = 1.10 * 0.80 * 11/10 * V\n\n    new_volume_ratio = 1.10 * 0.80 * 11/10\n\n    # Percentage of the original volume\n    percentage_new_volume = new_volume_ratio * 100\n\n    return percentage_new_volume\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    num_contestants = 8\n    ways = factorial(num_contestants) // factorial(num_contestants - 3)\n    return ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    # Since a triangle is defined by 3 points, we need to find\n    # the number of combinations of 10 points taken 3 at a time.\n    ans = comb(10, 3)  \n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_value = (30 + 40 + 50) * 3\n    return sum_value\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 60\n    total_masks = remaining_masks / ((100 - completed_percentage) / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Given ratio of the current ages\n    current_ratio = Eq(scan, ted / 4)\n    \n    # Given ratio of their ages 4 years from now\n    future_ratio = Eq(scan + 4, (ted + 4) / 3)\n\n    # Solve the system of equations for the current ages\n    ages = solve((current_ratio, future_ratio), (scan, ted))\n\n    # Calculate the age ratio 1:9\n    # Let x be the number of years ago when the ratio was 1:9\n    x = symbols('x')\n    past_ratio = Eq(scan - x, (ted - x) / 9)\n\n    # Solve for x\n    years_ago = solve(past_ratio.subs(ages), x)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the jogging distance from 6:30 a.m. to 7:30 a.m.\n    jogging_time = 1 # hour\n    jogging_speed = 6.5 # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the walking distance from 7:30 a.m. to 9:30 a.m.\n    walking_time = 2 # hours\n    walking_speed = 4.5 # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Calculate total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    questions = 40\n    students = 5\n\n    # When distributing the questions for the 5 students such that each gets\n    # a different number, and everyone gets at least one question,\n    # we can start with the smallest possible distribution 1, 2, 3, 4, ...\n    # To maximize the number of questions Noa gets, we should give him the last portion.\n    # The distribution should be as even as possible to leave the most questions for Noa.\n\n    # We want to find the first four terms of the sequence (smallest numbers)\n    # such that their sum is the smallest, with the constraint that all are positive\n    # and distinct. A valid minimal sequence would be 1, 2, 3, 4.\n    # After distributing 1+2+3+4=10 questions, the remaining questions for Noa would be 40-10.\n    noa_questions = questions - sum(range(1, students))\n\n    return noa_questions\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for foldable (f) and non-foldable (nf) bicycles\n    f, nf = symbols('f nf')\n\n    # Total bicycles\n    total_bicycles = 476\n\n    # Bicycles sold\n    bicycles_sold = 208\n\n    # Equations based on the problem statement\n    equation1 = Eq(f + nf, total_bicycles)  # Total number of bicycles\n    equation2 = Eq(nf - (5/9)*nf + f - (4/7)*f, bicycles_sold)  # Bicycles sold\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (f, nf))\n\n    foldable_sold = f - (4/7)*solutions[f]\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # Snail climbs 10 meters every day\n        if height_climbed >= 45:\n            break\n        height_climbed -= day  # Snail slides back 'day' meters each night\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let the number of guppies be g\n    # Number of goldfish = 2 * g\n    # Number of mollies = 276 = 2 * (2 * g)\n    # Solve for g\n    g = 276 / (2 * 2)\n    \n    # Number of mollies than guppies\n    more_mollies_than_guppies = 276 - g\n    \n    return int(more_mollies_than_guppies)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per m\n    real_tree_height_m = 12  # meters\n    real_tree_height_cm = real_tree_height_m * 100  # convert meters to centimeters\n\n    model_tree_height = real_tree_height_cm * scale_ratio  # height of the model tree\n\n    return model_tree_height\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If we give 2 pieces of candy to each of the 19 students,\n    # the 20th student should have at least 3 candies to guarantee\n    # that one student will have 3 pieces. Hence, we have:\n    # 19 * 2 + 3 = 41 (pieces of candy for 20 students)\n    return 19 * 2 + 3\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(20)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    # Let x be the number of correct answers\n    for x in range(21):  # since there are 20 questions\n        # Calculate the total score based on the number of correct answers x\n        total_score = (8 * x) + (4 * (20 - x)) * -1  # deduct 4 marks for each wrong answer\n        # Check if the total score matches Isabelle's score\n        if total_score == 100:\n            return x  # Return the number of correct answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # grams\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure getting a pair of white socks, worst case scenario is taking out\n    # all socks of other colors first\n    max_red_socks = 10  # All red socks\n    max_black_socks = 10  # All black socks\n    white_socks_needed = 2  # Pair of white socks\n\n    # Total socks to take to guarantee a pair of white socks\n    total_socks = max_red_socks + max_black_socks + white_socks_needed\n\n    return total_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60 / 100\n    total = 765\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    # every 3 flowers represent 2 posts, so the number of intervals between posts is:\n    # (flowers / flowers_between_posts) + 1, because we have one additional interval than the count of flowers sets\n    num_intervals = (total_flowers / flowers_between_posts) + 1\n    length_road = 50\n\n    distance_between_posts = length_road / num_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    count = 0\n    for i in range(1, 20, 2):\n        count += i\n    return count\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n    # Since the favorite book is the 14th from the right, there are 13 books to the right of it\n    right_books = right_position - 1\n    total_books = left_books + 1 + right_books  # Include the favorite book\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n    final_temp = initial_temp - decrease_temp\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    num_trees = (road_length // tree_spacing) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return 48 * (5/4)\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    position = 5\n    fifth_number = first_number * (ratio ** (position - 1))\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    return (13.8 * 10**7) * (5.4 * 10**-12)\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n    \n    sweets_per_friend = (total_sweets - sweets_for_sister) // num_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # total apples\n    total_apples = 19\n    # number of children\n    num_children = 5\n    \n    # If we distribute one apple to each child and have 14 apples left\n    # We want to find the largest number possible for the child who gets the most\n    # The sequence will look something like this: 1, 2, 3, 4, x (where x is the largest number)\n    # The sum of the first four minimal numbers is 1 + 2 + 3 + 4\n    sum_first_four_min = sum(range(1, num_children))\n    # Therefore, the largest possible number for the fifth child is what's left\n    largest_possible = total_apples - sum_first_four_min\n    \n    return largest_possible\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12  # length of the side of the square lawn in meters\n    offset = 1.5  # distance each bush is to be planted from the edge in meters\n    spacing = 3  # distance between neighbouring rosebushes in meters\n\n    # Calculate the side length available for planting the bushes\n    available_length = side_length - 2 * offset\n\n    # Calculate the number of rosebushes that can be planted along one side\n    # Each bush requires 3m of space, so the number of bushes is the available\n    # length divided by the space required, rounded down to the nearest whole number\n    bushes_per_side = int(available_length / spacing)\n\n    # Four sides of bushes with the number of bushes counted once for each side\n    total_bushes = 4 * bushes_per_side\n\n    return total_bushes\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_work_per_hour = 1 / (12 * 8)\n    q_work_per_hour = 1 / (8 * 10)\n\n    work_per_hour_together = p_work_per_hour + q_work_per_hour\n\n    hours_needed = 1 / work_per_hour_together\n    days_needed = hours_needed / 8\n\n    return days_needed\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # speed of the faster van in km/h\n    speed_slow_van = 78   # speed of the slower van in km/h\n    time_travelled = 8    # time travelled in hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time_travelled\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_work = 360 / (remaining_work_percentage / 100)\n    return int(total_work)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solutions = solve(equation, original_score)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    def count_divisors(n):\n        divisors = 0\n        for i in range(1, n + 1):\n            if n % i == 0 and i % 2 == 0:\n                divisors += 1\n        return divisors\n    \n    ans = count_divisors(78)\n    return ans\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats.\n    # So, 1 goat is equivalent to 9/3 = 3 rabbits.\n    rabbits_per_goat = 9 / 3\n    \n    # Given that 2 goats can be exchanged for 4 cows.\n    # So, 1 cow is equivalent to 2/4 = 0.5 goats.\n    goats_per_cow = 2 / 4\n\n    # To find out how many rabbits can 2 cows be exchanged for,\n    # we need to multiply the number of cows (2) with the goats equivalent (goats_per_cow) and then with\n    # the rabbits equivalent (rabbits_per_goat).\n    rabbits_per_2_cows = 2 * goats_per_cow * rabbits_per_goat\n\n    return int(rabbits_per_2_cows)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted_questions = total_questions - not_attempted\n    correct_score = 4\n    wrong_score = -1\n    total_score = 168\n\n    for correct in range(attempted_questions + 1):\n        wrong = attempted_questions - correct\n        if correct * correct_score + wrong * wrong_score == total_score:\n            return correct\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let the initial number of pencils be 4x and pens be 5x\n    # After replacing a pen with a pencil, the number of pencils becomes 4x+1, pens become 5x-1\n    # According to the new ratio, we have (4x + 1)/(5x - 1) = 7/8\n    \n    for x in range(1, 100): # We choose a reasonable range to search for the solution\n        if (4*x + 1)*8 == (5*x - 1)*7:\n            total = 4*x + 5*x\n            return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    last_term = first_term + (num_rows - 1) * common_difference\n\n    total_seats = (num_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    ans = custom_operation(10, 9)\n    ans = custom_operation(ans, 8)\n    ans = custom_operation(ans, 7)\n    ans = custom_operation(ans, 6)\n    ans = custom_operation(ans, 5)\n    ans = custom_operation(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    ways = 0\n    for red_coins in range(1, 7):  # Red must have at least one coin\n        for yellow_coins in range(1, 7 - red_coins):  # Yellow must have at least one coin\n            blue_coins = 6 - red_coins - yellow_coins  # Blue gets the remainder\n            if red_coins >= yellow_coins and red_coins >= blue_coins:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    total_percentage = 100\n\n    girls_percentage = total_percentage - boys_percentage\n    total_children = girls * total_percentage / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # In a newspaper, pages are printed on both sides, so each sheet contains two page numbers\n    # The last page number before the missing pages is 14 and the first page number after the missing pages is 35\n    # Since page numbers are consecutive, the missing pages start from 15 and end at 34 (inclusive)\n    \n    # Calculate the number of missing page numbers\n    num_missing_pages = 35 - 14 - 1  # subtract 1 because we don't count the starting page 14\n    \n    # Since there are two page numbers on one sheet, we divide by 2 to get the number of missing sheets\n    num_missing_sheets = num_missing_pages // 2\n    \n    return num_missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a tuna puff and a curry puff\n    tp_price, cp_price = symbols('tp_price cp_price')\n\n    # Define the equation based on the problem statement\n    equation1 = Eq(12 * tp_price + 19 * cp_price, 39.60)\n    equation2 = Eq(cp_price, tp_price - 0.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tp_price, cp_price))\n\n    return solutions[tp_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones and (10 * tens + ones) % 2 == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    # Initialize the results list\n    results = []\n    \n    # The total number of rooms\n    total_rooms = 100\n    \n    # The additional guests each room can accommodate\n    extra_guests = [i for i in range(1, total_rooms + 1)]\n    \n    # Iterate over the possible numbers of guests\n    for n in range(101, 200 * total_rooms + 1):\n        # Check if there's a way to house 'n' guests with one room empty\n        found = False\n        for guests_to_move in extra_guests:\n            if (n - guests_to_move) % total_rooms == 0:\n                found = True\n                break\n        if found:\n            results.append(n)\n    \n    return results\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_count = 10\n    end_count = 25\n    ans = end_count - start_count + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_s = 200\n    time_min = time_s / 60\n    \n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals_start, cows_start, goats_start = symbols('total_animals_start cows_start goats_start')\n\n    # According to the problem description, let's create our equations.\n    # Initial number of cows is 65% of the total, rest are goats\n    equation1 = Eq(cows_start, 0.65 * total_animals_start)\n    equation2 = Eq(goats_start, total_animals_start - cows_start)\n\n    # After 240 more animals are added, cows are now 85% (65% + 20%) of the total \n    # and goats have doubled in number.\n    equation3 = Eq(cows_start + 240, 0.85 * (total_animals_start + 240))\n    equation4 = Eq(2 * goats_start, total_animals_start + 240 - (cows_start + 240))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals_start, cows_start, goats_start))\n\n    # Extract the number of goats from the solutions.\n    num_goats_start = solutions[goats_start]\n\n    return num_goats_start\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 21, 2):\n        product *= (1 + (2 / i))\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    # Convert rolls to cm (1 m = 100 cm)\n    roll_length_cm = 20 * 100\n    # Total length of string she needs in cm\n    total_string_length = 400 * 85\n    # Calculate the number of rolls she needs\n    rolls_needed = total_string_length / roll_length_cm\n    # If rolls_needed is not an integer, round up to the nearest roll\n    rolls_needed = int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    ans = 863 * 37\n    return ans\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, emma_age = symbols('john_age emma_age')\n    \n    future_sum_age = Eq(john_age + emma_age + 3*2, 27)  # In 3 years' time, sum of their ages will be 27\n    age_difference = Eq(john_age, emma_age + 7)  # John is 7 years older than Emma\n\n    solutions = solve((future_sum_age, age_difference), (john_age, emma_age))\n\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and -cookies % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    spend_on_food = 5 * remainder / 6\n    save = remainder - spend_on_food\n    equation = Eq(spend_on_food, donation + 78)\n\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_of_2s = pow(2, 2017, 10)\n    last_digit_of_3s = pow(3, 2017, 10)\n    ans = (last_digit_of_2s * last_digit_of_3s) % 10\n    return ans\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the total time David spent walking in the park after the first 10 minutes.\n    t = symbols('t')\n\n    # Total distance walked at the initial speed 150m per minute for 10 minutes\n    initial_distance = 150 * 10\n\n    # Total distance walked at the new speed (150m + 50m) per minute for t minutes\n    new_speed_distance = (150 + 50) * t\n\n    # The equation for the total distance walked\n    total_distance_eq = Eq(initial_distance + new_speed_distance, 3700)\n\n    # Solve the equation for t\n    t_solution = solve(total_distance_eq, t)\n\n    # Total time spent walking is the time after 10 minutes plus the first 10 minutes\n    total_time = t_solution[0] + 10\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    n7 = 57\n    n15 = 89\n    common_difference = (n15 - n7) / (15 - 7)\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n    while ans[0] < 400:\n        return ans[0]\n        ans = (ans[0] + ans[1], ans[1])\n    \nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # loop to find all possible combinations of A, B, C\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                # check if the number is a seven-digit number and all digits are different\n                if len(set((4, 7, A, 1, B, 9, C))) == 7:\n                    # check if the number is divisible by 9\n                    if (4 + 7 + A + 1 + B + 9 + C) % 9 == 0:\n                        return A + B + C, f\"47A1B9C: 47{A}1{B}9{C}\"\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets = 240\n    sweets_diff = 45 - 60\n    target_sweets = 150\n    weeks = (target_sweets - sweets) / sweets_diff\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_pays = solutions[apple] + solutions[orange]\n\n    return carrie_pays\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # There are 3 choices for each digit\n    choices_per_digit = 3\n    \n    # Since each of the three digits can be one of 3 numbers and digits can be reused\n    # We multiply the number of choices for each digit position\n    total_numbers = choices_per_digit ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if all(sweets % children == 2 for children in [3, 4, 5, 6]):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = sport_class_students + reading_class_students - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    ball_price = 1.5\n    \n    money_spent_on_rackets = 2 * racket_price\n    remaining_money = total_money - money_spent_on_rackets\n    number_of_balls = remaining_money // ball_price\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # The worst case scenario is we pick all balls of two colors first.\n    # As we have 4 balls for each color, picking 4 purple and 4 white balls\n    # would still not guarantee having 3 different colored balls.\n    # Thus, we must draw at least 1 more ball to ensure we have 3 different colors.\n    worst_case = 4 + 4 + 1  # all balls of two colors and one of the third color\n    \n    return worst_case\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week_count = 0\n\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week_count += 1\n\n    return week_count\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # For a right-angled triangle to form, one side must be the diameter of the circle,\n    # which happens when vertices are directly opposite each other on the circle.\n    \n    # Choose 1 point, its opposite point is fixed for the diameter.\n    # There are 12 choices for the first point.\n    \n    # For the right angled vertex, we can choose any of the remaining 10 points.\n    # Thus for each of the 12 sides, there are 10 choices for the right angle vertex.\n    \n    # Dividing by 2 to account for the fact that each triangle is counted twice\n    # (once for each point chosen as the first point on the base).\n    right_angle_triangles = (12 * 10) // 2\n    \n    return right_angle_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of one box of apples and one box of oranges\n    apples, oranges = symbols('apples oranges')\n\n    # Create the system of equations based on the given information\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n    \nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    \n    solution = solve(equation, c)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Tiger is both the middle and 11th animal, which means there are 10 animals in front and 10 animals behind.\n    # Therefore, the total number of animals in line is the number before tiger, the tiger itself, and the number after tiger.\n    total_animals = 10 + 1 + 10\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3)*24 + (2/5)*30 + (1/3)*15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Let's find the initial unit rate (roses per vase) after dividing 24 roses into 3 vases\n    initial_unit_rate = 24 // 3\n    \n    # Each of the next set of vases should then have the same amount of roses as the initial unit rate\n    final_vases = 4\n    \n    # The total number of roses is the sum of the initial roses and the roses in the final vases\n    total_roses = 24 + (initial_unit_rate * final_vases)\n    \n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # Cost of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # Cost of Mamee is 30¢ less than Haribo\n    big_jelly_cost = mamee_cost * 6  # Big packet of jelly costs 6 times as much as Mamee\n    \n    return big_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    sum_number = 2405 + 1827\n    number_in_words = { \n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', \n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', \n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', \n        15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', \n        19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', \n        50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', \n        90: 'ninety', 100: 'hundred', 1000: 'thousand', 1000000: 'million'\n    }\n\n    def in_words(n):\n        if n < 20:\n            return number_in_words[n]\n        if n < 100:\n            if n % 10 == 0: \n                return number_in_words[n]\n            else: \n                return number_in_words[n // 10 * 10] + ' ' + number_in_words[n % 10]\n        if n < 1000:\n            if n % 100 == 0: \n                return number_in_words[n // 100] + ' hundred'\n            else: \n                return number_in_words[n // 100] + ' hundred and ' + in_words(n % 100)\n        else:\n            if n % 1000 == 0: \n                return in_words(n // 1000) + ' thousand'\n            else: \n                return in_words(n // 1000) + ' thousand, ' + in_words(n % 1000)\n\n    ans = in_words(sum_number)\n    return ans\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n\n    if mint_flavour > 0:\n        max_candies_will_can_eat = lemon_flavour + cherry_flavour\n    else:\n        max_candies_will_can_eat = lemon_flavour + cherry_flavour + mint_flavour\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    half_way = (-18 + (-2)) / 2\n    return half_way\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            AB = 10 * A + B\n            if AB % 2 != 0:\n                continue\n            \n            for C in range(10):\n                BC = 10 * B + C\n                if BC % 3 != 0:\n                    continue\n\n                for D in range(10):\n                    CD = 10 * C + D\n                    if CD % 5 != 0:\n                        continue\n                    \n                    ABC = 100 * A + BC\n                    if ABC % 9 != 0:\n                        continue\n\n                    BCD = 100 * B + CD\n                    if BCD % 11 != 0:\n                        continue\n\n                    if len({A, B, C, D}) == 4:  # ensuring all digits are different\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_two_cheese_cakes = 2 * cheese_cake_price\n    return price_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for number in range(1, 80):\n        if all(number % divisor == divisor - 1 for divisor in [2, 3, 4, 5]):\n            return number\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Equations based on the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(younger_daughter - older_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the age of the youngest child\n    # Since the youngest could be either the younger daughter or the older daughter (depending on the values),\n    # we take the minimum of the two ages.\n    youngest_child_age = min(solutions[younger_daughter], solutions[older_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio values for height and width\n    ratio_height = 3\n    ratio_width = 4\n\n    # Given height of the television screen\n    height = 21\n\n    # Calculate the width based on the given ratio and height\n    width = (height / ratio_height) * ratio_width\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_part = \"428571\"  # The recurring part of the decimal\n    sum_digits = sum(int(decimal_part[i % len(decimal_part)]) for i in range(58))\n    return sum_digits\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Number of ways to arrange books = factorial of total books divided by product of factorials of individual counts\n    arrangements = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return arrangements\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of solution to be exchanged\n    x = symbols('x')\n    \n    # Amount of sugar after exchange in bottle A: (50 * 0.11 - 0.11 * x + 0.47 * x)\n    # Amount of sugar after exchange in bottle B: (50 * 0.47 - 0.47 * x + 0.11 * x)\n    # Concentrations will be equal, hence the equations will be equal.\n    concentration_eq = Eq((50 * 0.11 - 0.11 * x + 0.47 * x) / 50, (50 * 0.47 - 0.47 * x + 0.11 * x) / 50)\n    \n    # Solve for x\n    solution_x = solve(concentration_eq, x)\n    \n    # Get the amount that can be exchanged\n    amount_exchanged = solution_x[0]\n    \n    return amount_exchanged\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_length = 13\n    nick_length = tom_length + 25\n    difference = nick_length - tom_length\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Each digit can be 1, 3, or 6, and since cards can be rotated, each place (hundreds, tens, ones)\n    # can have any of these three numbers, independently of the others.\n    # Total count is the product of the number of choices for each place.\n    num_choices_per_digit = 3\n    total_numbers = num_choices_per_digit ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    result = (75 - 3) / 8\n    return result\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "from itertools import combinations\n\ndef solution():\n    # All possible distributions of candies\n    all_combinations = combinations(range(1, 15), 4)\n    valid_distributions = 0\n    \n    # Filtering valid distributions where the sum is 15 and all piles have different amounts\n    for combination in all_combinations:\n        if sum(combination) == 15:\n            valid_distributions += 1\n            \n    return valid_distributions\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n\n    prime_numbers = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 < 51:\n            prime_numbers.append(num)\n        elif isprime(num) and isprime(num - 6):\n            prime_numbers.append(num)\n\n    return len(set(prime_numbers)), sorted(set(prime_numbers))\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    ans = 250 * 0.30\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100\n    subtract_metres = 2 + 7 / 100\n    ans = total_metres - subtract_metres\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_number = fib_sequence[-1] + fib_sequence[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    black, white, grey = symbols('black white grey')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    # Return the number of white rabbits\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is not an arithmetic sequence, but a geometric sequence\n    # with a common ratio of 2.\n    # The nth term of a geometric sequence is given by a * r^(n-1), where\n    # a is the first term and r is the common ratio.\n\n    first_term = 1  # The first term of the sequence is 1\n    common_ratio = 2  # The common ratio is 2\n\n    # Calculate the 20th term\n    term_20 = first_term * common_ratio ** (20 - 1)\n\n    # Calculate the 17th term\n    term_17 = first_term * common_ratio ** (17 - 1)\n\n    # Divide the 20th term by the 17th term\n    ans = term_20 / term_17\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    target_sum = 35\n    max_product = 0\n\n    for i in range(1, target_sum // 2 + 1):\n        j = target_sum - i\n        current_product = i * j\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Alice, Becky, and Crystal's average books before Dennis\n    abc_average = 60\n    # Total books Alice, Becky, and Crystal have\n    abc_total = abc_average * 3\n    # New average after counting Dennis\n    new_average = abc_average + 10\n    # Total books all four people have\n    total_with_dennis = new_average * 4\n    # Dennis's books\n    dennis_books = total_with_dennis - abc_total\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    day_climb = 5\n    night_slide = 3\n    net_climb = day_climb - night_slide\n    days = 0\n    distance_climbed = 0\n\n    while True:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # converting plot length from meters to centimeters\n    spacing_cm = 40  # spacing between cauliflowers in centimeters\n    first_cauliflower_offset_cm = 20  # offset for the first cauliflower in centimeters\n\n    # The first cauliflower takes up its offset space, so we subtract that from\n    # the total plot length to see how much length is left for the rest of the cauliflowers\n    remaining_length_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # Number of cauliflowers is the amount of remaining length divided by the spacing between them\n    num_cauliflowers = remaining_length_cm // spacing_cm \n\n    # Since we already subtracted space for the first cauliflower, we need to add it back\n    num_cauliflowers += 1\n\n    return int(num_cauliflowers)\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange\n    from math import isqrt\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = isqrt(99)**2\n    \n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    \n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1st_to_4th = 9\n    num_intervals_1st_to_4th = 4 - 1\n    interval_distance = distance_1st_to_4th / num_intervals_1st_to_4th\n    num_intervals_1st_to_9th = 9 - 1\n    distance_1st_to_9th = interval_distance * num_intervals_1st_to_9th\n    return distance_1st_to_9th\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    \n    full_necklaces = total_beads // beads_per_necklace\n    \n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n\n    # Since the number of chocolate bars is given as 233 which is a prime number,\n    # it cannot be divided evenly by any number other than 1 and itself.\n    # Therefore, Michael is correct.\n    return isprime(233)\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    number = 6 * 0.1 + 7 * 0.01 + 4 * 1\n    return number\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    current_speed = 3\n    downstream_speed = speed_in_still_water + current_speed\n    distance = 200\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_b = symbols('peaches students_b')\n    students_a = students_b + 3\n\n    equation1 = Eq(peaches, 5 * students_a + 10)\n    equation2 = Eq(peaches, 8 * students_b - 2)\n\n    solutions = solve((equation1, equation2), (peaches, students_b))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if (correct * 6) - (incorrect * 2) == 36:\n            return correct\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    # Ways by train, bus, or plane\n    trains = 4\n    buses = 3\n    flights = 2\n\n    # Total different ways Johnson can choose to go to France\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    result = 9.95 - 2.6 - 3.412\n    return round(result, 3)\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28512)  # Factorize the number to get its prime factors\n\n    # Initialize h to 1, it will contain the product of prime factors that are\n    # not raised to a multiple of 3 power since we want to get a cube.\n    h = 1\n\n    for prime, power in factors.items():\n        if power % 3 != 0:  # If the power is not a multiple of 3\n            h *= prime ** (3 - power % 3)\n\n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Since there are more brown M&M's chips than the other colors, the worst case scenario\n    # would be picking all of the brown ones first. To ensure getting two chips of different\n    # colors, Bart would have to pick at least one more after all the brown chips.\n    # So, the minimum number of chips he must take to ensure this is all the brown chips\n    # plus one more (either red or yellow).\n    \n    # Number of brown M&M's chips\n    brown_chips = 5\n    \n    # Number of chips to take to guarantee two different colors, which is all the brown\n    # chips plus one extra chip\n    chips_to_take = brown_chips + 1\n    \n    return chips_to_take\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    def factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n    \n    def derangement(n):\n        # formula used: !n = (n-1)(!(n-1) + !(n-2))\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    return derangement(7)\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    # Each father shakes hands with all people from other families (9 families * 3 people per family)\n    handshakes_fathers = total_families * (total_families - 1) * 3\n    # Each mother shakes hands with all fathers and children from other families (9 families * 2 people per family)\n    handshakes_mothers = total_families * (total_families - 1) * 2\n    # Each child shakes hands with all fathers and mothers from other families (9 families * 2 people per family)\n    handshakes_children = total_families * (total_families - 1) * 2\n\n    # Each handshake is counted twice (once for each person involved), so we divide by 2\n    total_handshakes = (handshakes_fathers + handshakes_mothers + handshakes_children) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Using the difference of two squares formula: a^2 - b^2 = (a - b)(a + b)\n    a = 31415926\n    b = 31415925\n    ans = (a - b) * (a + b)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    eddie_candies = 3\n    vivian_candies = 5\n    days_passed = 0\n\n    while eddie_candies + vivian_candies < 30:\n        days_passed += 1\n        eddie_candies += 1\n        vivian_candies += 1\n\n    return eddie_candies\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # There are 7 dancing performances (D) and 3 playing a sketch performances (S).\n    # We need to arrange them such that there is at least 1 D between every 2 S.\n\n    # First, we place the 3 sketch performances. There are 4 slots created by them where we can insert the dancing performances:\n    # S _ S _ S _ (the underscores represent potential slots for dancing)\n\n    # We need to insert 7 dancing performances into these 4 slots, but we must have at least 1 D in the first three slots,\n    # since they are between the sketches. This means we have to place 3 Ds in the first three slots, having 4 Ds left to allocate.\n    # The remaining 4 Ds can be arranged in whatever way we like between the 4 slots.\n\n    # Now we calculate the number of ways to place the remaining 4 Ds into 4 slots.\n    # This is a stars and bars problem (identical items into distinct bins) where we need to find the number of solutions to the equation:\n    # d1 + d2 + d3 + d4 = 4 where d1 >= 0, d2 >= 0, d3 >= 0, d4 >= 0 (since we have already accounted for the mandatory Ds).\n    # The formula for this is combinations(4 + 4 - 1, 4) = combinations(7, 4)\n\n    # Calculate the number of ways to distribute the 4 Ds into 4 slots\n    dancing_ways = factorial(7) // (factorial(4) * factorial(3))\n\n    # Calculate the final answer by taking into account the arrangement of the 3 Ss among themselves and 7 Ds among themselves\n    # Note that the arrangements of Ss and Ds among themselves do not have restrictions and can be permuted freely.\n    ans = dancing_ways * factorial(3) * factorial(7)\n\n    return ans\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # The given recurring decimal is 0.852784... (repeating 85274)\n    recurring_sequence = \"85274\"\n    \n    # To find the 79th digit, we need to calculate the position in the recurring sequence\n    position = (79 - 1) % len(recurring_sequence)  # -1 because sequence starts from index 0\n    \n    # Get the digit at the calculated position\n    digit = recurring_sequence[position]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_num = 0\n    for num in range(100, 1000):\n        if (num + 2009) % (17 * 19) == 0:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    paid_hours_1_flat_rate = 5 * (50 - 40)  # from 40 to 50 hours\n    paid_hours_2_flat_rate = 8 * (60 - 50)  # from 50 to 60 hours\n    \n    if bill <= paid_hours_1_flat_rate:\n        extra_hours_1 = (bill - 0) / 5\n        total_hours = free_hours + extra_hours_1\n    elif bill <= paid_hours_1_flat_rate + paid_hours_2_flat_rate:\n        extra_hours_2 = (bill - paid_hours_1_flat_rate) / 8\n        total_hours = 50 + extra_hours_2\n    else:\n        extra_hours_3 = (bill - paid_hours_1_flat_rate - paid_hours_2_flat_rate) / 15\n        total_hours = 60 + extra_hours_3\n    \n    return total_hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))  # Sum of all page numbers from 1 to 62\n    missing_number = total_sum - 1939  # The missing page number is the difference\n    return missing_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # To ensure 4 different colored marbles, we consider the worst case scenario.\n    # First, take all red marbles: 4\n    # Then, take all green marbles: 7\n    # Now take all blue marbles: 6\n    # At this point, we've taken 4 + 7 + 6 = 17 marbles of only 3 colors\n    # Once we take one more marble, it has to be orange to ensure the fourth color.\n    # So, the total number of marbles that must be drawn is 17 + 1 = 18.\n\n    return 18\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket in range(999):\n        if sum(divmod(ticket, 100)) + sum(divmod(ticket + 1, 100)) == 777:\n            return ticket + 2\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    total_fence_length = 2 * (length + width)\n    return total_fence_length\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earning = 60\n    total_days_in_week = 7\n\n    total_earning = average_daily_earning * total_days_in_week\n\n    return total_earning\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Start by choosing the smallest possible odd numbers for the first four numbers.\n    # Since the numbers have to be different, we can start with 1, 3, 5, and 7.\n    smallest_numbers_sum = 1 + 3 + 5 + 7\n    # Calculate the max value for the fifth number by subtracting the sum\n    # of the four smallest odd numbers from 85.\n    max_fifth_number = 85 - smallest_numbers_sum\n\n    return max_fifth_number\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        if steps < 0:\n            return 0\n        elif ways[steps] > -1:\n            return ways[steps]\n        else:\n            ways[steps] = count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n            return ways[steps]\n            \n    ways = [-1] * 11  # There are 10 steps, and we include 0th step for base case\n    ways[0] = 1       # Base case: 1 way to stand on the ground (0th step)\n    ways[1] = 1       # 1 way to reach the first step\n    ways[2] = 2       # 2 ways to reach the second step (1+1 or 2)\n    ways[3] = 4       # 4 ways to reach the third step (1+1+1, 1+2, 2+1 or 3)\n    ways[4] = 0       # Can't step on the muddy fifth step\n\n    # Count ways to step on each step without stepping on the fifth\n    for i in range(5, 11):\n        ways[i] = count_ways(i - 1) + count_ways(i - 2) + count_ways(i - 3) - count_ways(i - 4)\n\n    return ways[10]\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    T = symbols('T')\n    income = symbols('income')\n\n    # If income is less than or equal to 30,000\n    tax_for_first_30000 = T/100 * 30000\n\n    # If income is above 30,000\n    tax_for_rest = (T/100 + 0.03) * (income - 30000)\n\n    # Total tax is the sum of both parts\n    total_tax = tax_for_first_30000 + tax_for_rest\n\n    # Given that the total tax equals (T + 1)% of his income\n    tax_equation = Eq(total_tax, (T/100 + 0.01) * income)\n\n    # Also given that his income is more than 30,000\n    income_constraint = Eq(income > 30000, True)\n\n    # Solve the system of equations\n    solutions = solve((tax_equation, income_constraint), (T, income))\n    \n    # Since we want the income, which is the second element of the solution\n    return solutions[income]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n    distance = 500\n\n    downstream_speed = speed_in_still_water + speed_of_current\n    time_downstream = distance / downstream_speed\n\n    return time_downstream\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    xiao_pi = symbols('xiao_pi')\n    xiao_ke = symbols('xiao_ke')\n    \n    # Xiao Pi's age four years from now is the same as Xiao Ke's age five years from now\n    eq1 = Eq(xiao_pi + 4, xiao_ke + 5)\n    \n    # (Xiao Pi's age two years ago) + (Xiao Ke's age three years from now) = 30\n    eq2 = Eq(xiao_pi - 2 + xiao_ke + 3, 30)\n    \n    # Solve the system of equations\n    ages = solve((eq1, eq2), (xiao_pi, xiao_ke))\n    \n    # Xiao Pi's current age\n    return ages[xiao_pi]\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    twenty_cents, fifty_cents = symbols('twenty_cents fifty_cents')\n\n    equation1 = Eq(twenty_cents + fifty_cents, 21)\n    equation2 = Eq(20 * twenty_cents + 50 * fifty_cents, 630)\n\n    solutions = solve((equation1, equation2), (twenty_cents, fifty_cents))\n\n    return solutions[fifty_cents]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of Alan as 'a' and the speed of Phillip as 'a + 15' (since Phillip walks 15 meters more per minute)\n    # Let's denote the time taken by Alan as 't' and time taken by Phillip as 't - 3' (since Phillip arrives 3 minutes earlier)\n    # The distance is the same for both Alan and Phillip, so we have the equation a*t = (a + 15)*(t - 3)\n\n    a, t = symbols('a t')\n    equation = Eq(a * t, (a + 15) * (t - 3))\n\n    # We also know Phillip takes 12 minutes to arrive at B.\n    # So we have another equation: (a + 15)*12 = a*t\n\n    equation2 = Eq((a + 15) * 12, a * t)\n\n    # Now we solve the equations to find the values of 'a' and 't'\n\n    solutions = solve((equation, equation2), (a, t))\n\n    # The distance between A and B can be found using Phillip's speed and time\n    # distance = speed_phillip * time_phillip\n    \n    distance = solutions[a] + 15 * 12\n    return distance\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls = comb(8, 4)\n    boys = comb(12, 3)\n    return girls * boys\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "import math\n\ndef solution():\n    count = 0\n    number = 2\n    \n    while True:\n        str_num = str(number)\n        if str_num[-1] == '5':\n            num = int(str_num)\n            square_root = int(math.sqrt(num))\n            if square_root ** 2 == num:\n                count += 1\n            if num > 25555:\n                break\n        number = number * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_original, tom_original = symbols('alice_original tom_original')\n\n    equation1 = Eq(alice_original - 36, tom_original - 25.40)\n    equation2 = Eq(tom_original, 68.10)\n\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    return solutions[alice_original]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_of_five = 28\n    mean_of_twelve = 11\n    \n    total_of_five = mean_of_five * 5\n    total_of_twelve = mean_of_twelve * 12\n    \n    total_sum = total_of_five + total_of_twelve\n    total_numbers = 5 + 12\n    \n    overall_mean = total_sum / total_numbers\n    \n    return overall_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    vertices = 2019\n    if vertices <= 2:\n        return 0 # Not a polygon\n    edges = (vertices - 1) * 3  # A pyramid with n vertices has 3(n - 1) edges\n    return edges\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_gaps = 9 - 1\n    \n    total_distance_for_benches = total_distance - (number_of_gaps * distance_between_benches)\n    length_of_each_bench = total_distance_for_benches / 9\n\n    return length_of_each_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies Miss Jenny has\n    # Let a be the number of students in class A\n    # Let b be the number of students in class B\n\n    x, a, b = symbols('x a b')\n\n    # Equations based on the problem statement\n    equation1 = Eq(4*a, x - 20)   # Class A equation: 4 candies per student, 20 more needed\n    equation2 = Eq(6*b, x + 16)   # Class B equation: 6 candies per student, 16 left\n    equation3 = Eq(a, 2*b)        # Class A has twice the number of students as class B\n\n    # Solving the system of equations for x, a, and b\n    solutions = solve((equation1, equation2, equation3), (x, a, b))\n\n    # Returning the number of candies\n    return solutions[x]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    growth_after_cut = 5\n\n    # Initially, assume the number of arms octopus bugbear had is x\n    # After each cut, one arm grows back, so effectively 4 arms are cut\n    # after 21 cuts, the total arms cut effectively are 21 * 4\n    # Hence, the number of arms the octopus bugbear originally had (x) is:\n    x = total_cuts * (total_cuts - growth_after_cut)\n\n    return x\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Given conditions\n    total_sum = 2021\n    third_greatest_number = 246\n\n    # To minimize the 4th greatest number, we need to maximize the 1st, 2nd, and 3rd greatest numbers.\n    # Since the 3rd greatest number is given as 246, we assign 1 to the 7 smallest numbers.\n    # 7 smallest numbers will therefore add up to 7.\n    # Subtracting the 3rd greatest and 7 smallest numbers from the total sum to find the sum of the 1st and 2nd greatest:\n    remaining_sum_for_two_greatest = total_sum - third_greatest_number - 7\n\n    # The 2nd greatest number should also be minimized to maximize the 1st (greatest) number.\n    # Therefore, the 2nd greatest number will be 246 (3rd greatest) + 1 = 247.\n    # Now calculate the 4th greatest number by subtracting the sum of (1st, 2nd, and 3rd greatest numbers) from the total sum.\n    fourth_greatest_number = total_sum - (remaining_sum_for_two_greatest + 247 + 7)\n\n    return fourth_greatest_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # In the worst case scenario, all coins of the same color are drawn first\n    same_color_coins = 6  # either all gold or all silver are taken first\n    \n    # To ensure getting at least 2 different colored coins, one must take out\n    # all 6 coins of one color and the first coin of the other color\n    num_coins_to_take = same_color_coins + 1  # add one for the different colored coin\n\n    return num_coins_to_take\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Distance from the 1st tree to the 5th tree (4 intervals) is 20 cm\n    # This means each interval is 20 cm / 4 intervals = 5 cm per interval\n    interval_distance = 20 / 4\n    \n    # Distance from the 8th tree to the 14th tree (6 intervals)\n    distance = interval_distance * (14 - 8)\n    \n    return distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Prime numbers between 1 and 24 to avoid divisibility between adjacent numbers\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    # Since 1 is not mutually exclusive with any number it can be part of the circle\n    # Adding 1 to the count of prime numbers\n    ans = len(prime_numbers) + 1\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_in_meters_per_minute = 60\n    time_in_seconds = 150\n    time_in_minutes = time_in_seconds / 60\n    distance = speed_in_meters_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38*32 + 37*33 + 36*34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jerry's current age be 'j' and Devi's current age be 'd'\n    jerry, devi = symbols('jerry devi')\n\n    # Equation 1: Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n\n    # Equation 2: In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((jerry + 4) / (devi + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jerry, devi))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    father_age_when_grey_born = 30\n\n    # Father is three times the age of Grey this year\n    equation1 = Eq(father_age, 3 * grey_age)\n  \n    # Difference between Father's age and Grey's age is always consistent\n    equation2 = Eq(father_age - grey_age, father_age_when_grey_born)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n  \n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # As per the statement Bud's apples are the base, let's assume Bud has 'b' apples\n    # Then Pip has 5 times the apples Bud has, so Pip has '5b' apples\n\n    # There are no specific numbers provided, so we'll draw the graph using string representation\n    # Representing each \"part\" with a block \"□\"\n\n    # Bud's parts\n    bud_parts_graph = 'Bud: ' + '□' * 1  # Bud has one part\n\n    # Pip's parts\n    pip_parts_graph = 'Pip: ' + '□' * 5  # Pip has five parts (5 times more than Bud)\n\n    # Combine the parts into a graph representation\n    parts_graph = bud_parts_graph + '\\n' + pip_parts_graph\n\n    # The function returns a string representation of the parts graph\n    return parts_graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n\n    # Using Pigeonhole Principle: ceil(total_books / total_layers)\n    least_books_on_most_layer = -(-(total_books) // total_layers)\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    # Arithmetic sequence parameters\n    first_term = 48\n    last_term = 80\n    common_difference = 4\n\n    # Calculate the number of rows using the formula for the nth term in an arithmetic sequence:\n    # last_term = first_term + (n - 1) * common_difference\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate the sum of an arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = (n * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    permutation_list = list(permutations(digits, 3))\n    return len(permutation_list)\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x, y, and z be the rates of work for A, B, and C respectively\n    A, B, C = symbols('A B C')\n    \n    # Since B can complete the project in 30 days alone, B's work rate is 1/30\n    eq_B = Eq(B, 1/30)\n    \n    # The original sequence is A-B-C, let n be the number of days needed to complete the project\n    n = symbols('n')\n    eq_original = Eq(A + B + C, 1/n)\n    \n    # The sequence C-A-B takes half a day more than planned\n    eq_CAB = Eq(C/2 + n*(A + B + C) + A/2, 1)\n    \n    # The sequence B-C-A takes one day more than planned\n    eq_BCA = Eq(B/2 + n*(A + B + C) + C/2, 1)\n    \n    # We can solve the three equations simultaneously\n    results = solve((eq_original, eq_CAB, eq_BCA, eq_B), (A, B, C, n))\n    \n    # Calculate the number of days when A, B, and C work together\n    days_together = 1 / (results[A] + results[B] + results[C])\n    return days_together\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 100:\n        num += 3 * 5 * 7\n\n    return num\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 1\n    quotient = 12\n    remainder = 3\n\n    minimum_dividend = (quotient * divisor) + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    hazel_age_now = y - 3\n    jessica_age_now = hazel_age_now - 3\n\n    hazel_age_next_year = hazel_age_now + 1\n    jessica_age_next_year = jessica_age_now + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    n = 10000\n    sum_even_divisors = sum(d for d in range(2, n + 1, 2) if n % d == 0)\n    return sum_even_divisors\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # converting meters to cm\n    section3 = 150 / 10  # converting mm to cm\n    \n    # Sum all sections to get the total width\n    total_width_cm = section1 + section2 + section3\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    difference_in_age = 38 - melanie_age\n    uncles_age_now = melanie_age + difference_in_age\n\n    return uncles_age_now\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    # The equation is of the form (x-a)(x-b) = (x-c)(x-d)\n    # Based on Vieta's formulas, we know that a+b+c+d = 0 for the maximum product of (x-a)(x-b)\n    # Also, we have a*b = c*d\n    # Since the sum n+m+l+k should be the maximum, we maximize a*b.\n    # We aim to find `n + m + l + k` which is `- (a + b + c + d)` because a + b + c + d = 0\n    # Then n + m + l + k = -2*(a + b) [Because a + b = -(c + d)]\n    \n    a, b, c, d = symbols('a b c d')\n    eq1 = a + b + c + d  # Equation, which indicates that the sum should be zero\n    eq2 = a * b - c * d  # Equation, which states that the product should be equal\n    \n    # Solve the system of equations for a and b, assuming a and b are both positive\n    res = solve((eq1, eq2), (a, b))\n    # There are multiple solutions, extract the one with real numbers (ignoring complex solutions)\n    real_solution = [s for s in res if all(val.is_real for val in s)]\n    \n    # Calculate the max product (a * b)\n    max_product = max(a * b for a, b in real_solution)\n    \n    # Identify the pair (a, b) that gives max product\n    max_pair = next(pair for pair in real_solution if pair[0] * pair[1] == max_product)\n    \n    # The sum n+m+l+k will be twice the sum of a and b because a+b+c+d=0\n    sum_max = -2 * sum(max_pair)\n    return sum_max\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pound = 100\n    pence = 15\n    pounds = 3\n\n    total_pence = pounds * pence_in_pound\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:  # If student reported a multiple of 4 or 6\n            continue  # This student is not facing the teacher\n        facing_teacher += 1  # Count the student\n    return facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    numerator = ((-2)**4) * ((-1)**3) - abs(-10) / -(-1/2)\n    denominator = (-2**2) * (-1/8) + (1 - 3**2 * (-1/2))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all variables.\n    # For the monomial -x^3y^(2n), the degree is the sum of the exponents 3 + 2n.\n    # We set this sum equal to 5 and solve for n.\n\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    n = 1\n\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    return 18 + 3 - 8 + 17\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    return float(Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16))\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    sister_age_future = amy_age_now - 5\n    sister_age_now = sister_age_future - 3\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since we want to ensure that there are two cards of the same number or letter,\n    # we can use the Pigeonhole Principle. There are 13 different numbers/letters (pigeonholes).\n    # If we draw one from each number/letter, we have 13 cards.\n    # To ensure we have a pair, we need to draw one more card.\n    draws = 13 + 1\n    return draws\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    for number in range(100, 1000, 2):  # Check every even number\n        if sum(int(digit) for digit in str(number)) == 21:\n            smallest_number = number\n            break\n    return smallest_number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))  # Initialize sum with the first series\n\n    for numerator in range(2, 20):  # Start from 2/3 to 19/20\n        ans += sum(numerator / i for i in range(numerator + 1, 21))  # Each inner sum is a part of the series\n\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fractional_part = 3/5\n    amount_fractional_part = 18\n\n    whole_amount = amount_fractional_part / fractional_part\n\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):  # Smallest two-digit number is 10, largest is 99\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    # Each cactus costs $2 and each sunflower costs $7\n    # Lavi spent $156 in total\n    # Lavi bought 6 more cacti than sunflowers\n    equation1 = Eq(2 * cacti + 7 * sunflowers, 156)\n    equation2 = Eq(cacti, sunflowers + 6)\n\n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    # Sarah's expense equation: 8*book_price + 3*0.40\n    sarah_expense = 8 * book_price + 3 * 0.40\n    \n    # Rebecca's expense equation: 3*book_price + 8*0.40\n    rebecca_expense = 3 * book_price + 8 * 0.40\n    \n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_expense, rebecca_expense + 1.00)\n    \n    # Solve for the price of one book\n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_sum = sum([i**2 for i in range(1, 20, 2)])\n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17  # Total water in the bottle in litres\n    jug_volume = 2  # Volume of water poured into each jug in litres\n    num_jugs = 6  # Number of jugs\n\n    poured_out = jug_volume * num_jugs  # Total volume of water poured out\n    remaining_water = total_water - poured_out  # Water remaining in the bottle\n    \n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of fans of Liverpool and Manchester United\n    liverpool_fans, man_united_fans = symbols('liverpool_fans man_united_fans')\n\n    # Equation 1: At first, there are 1000 more Liverpool fans than Manchester United fans\n    equation1 = Eq(liverpool_fans, man_united_fans + 1000)\n\n    # Equation 2: 30 minutes later, the number of fans change\n    # Liverpool fans increase by 472 and Manchester United fans increase by 4836.\n    # The number of Manchester United fans becomes 3 times that of Liverpool fans.\n    equation2 = Eq(man_united_fans + 4836, 3 * (liverpool_fans + 472))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (liverpool_fans, man_united_fans))\n\n    # Return the number of Liverpool fans at first\n    return solutions[liverpool_fans]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')  # Define a symbol for the price of a book\n\n    # Sarah's total cost\n    sarah_cost = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_cost = 3 * book_price + 8 * 0.40\n    \n    # Equation for the difference in Sarah and Rebecca's cost\n    equation = Eq(sarah_cost - rebecca_cost, 1.00)\n\n    # Solve the equation for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    return float(book_price_solution[0])\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    \n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Let's start from the end and work our way back to the beginning\n    after_giving_to_mike = 3 + 2  # She had $3 left and gave $2 to Mike\n    \n    # Before giving to Nini, she had twice the amount, since she gave half to Nini\n    before_giving_to_nini = after_giving_to_mike * 2\n    \n    # The same goes for Bob, she gave half to Bob\n    before_giving_to_bob = before_giving_to_nini * 2\n    \n    # Finally, before giving half to her mother, she again had twice that amount\n    original_amount = before_giving_to_bob * 2\n    \n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys / girls, 5/4)\n    equation2 = Eq((boys + 1) / (girls + 2), 7/6)\n    solution = solve((equation1, equation2), (boys, girls))\n    total_students = solution[boys] + solution[girls]\n    return total_students\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n\n    while True:\n        number_str = str(current_number)\n        digit_count += len(number_str)\n\n        if digit_count >= 2023:\n            # Find the position of the 2023rd digit in the current number\n            position = len(number_str) - (digit_count - 2023) - 1\n            return int(number_str[position])\n\n        current_number += 1\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_numbers = 450\n\n    third_number = sum_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of T-shirts and caps\n    T, C = symbols('T C')\n    \n    # Equations based on the problem's description\n    ratio_eq = Eq(T/C, 8/5)  # The ratio of T-shirts to caps\n    \n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps\n    # The total amount collected from selling these items is $132\n    sales_eq = Eq((T * 1/4) * 3 + (C * 1/5) * 5, 132)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, sales_eq), (T, C))\n    \n    # She collected $132 by selling 1/4 of the T-shirts and 1/5 of the caps\n    return solutions[T]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    future_year = 1\n    age_at_future_year = 11 + (future_year - birth_year)\n    return age_at_future_year\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    smallest_odd_number = float('inf')\n    \n    for perm in permutations([4, 6, 2, 5]):\n        num = int(''.join(map(str, perm)))\n        if num % 2 == 1 and num < smallest_odd_number:\n            smallest_odd_number = num\n            \n    return smallest_odd_number\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    max_students_per_boat = 6\n    \n    trips = students // max_students_per_boat\n    if students % max_students_per_boat != 0:\n        trips += 1\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    nth_term = 36\n    ordinal_number = (nth_term - first_term) // difference + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe, eric = symbols('joe eric')\n    cards_to_give = symbols('cards_to_give')\n\n    # Joe has 7 times as many game cards as Eric\n    equation1 = Eq(joe, 7 * eric)\n    \n    # After giving some cards to Eric, Joe and Eric have 168 cards each\n    equation2 = Eq(joe - cards_to_give, 168)\n    equation3 = Eq(eric + cards_to_give, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (joe, eric, cards_to_give))\n\n    return solutions[cards_to_give]\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens in [2, 3, 5, 7]:  # Tens digit prime\n        for ones in [2, 3, 5, 7]:  # Ones digit prime\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    escaped = 5\n    library_catch = 9\n\n    total_catch = initial_catch - escaped + library_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # 1 hour and 20 minutes is 80 minutes\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for people_count in range(1, 40):\n        if (19 - 6) % people_count == people_count / 2:\n            return people_count\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    ways = 0\n    for x in range(1, 10):\n        ways += 1\n    return ways\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    number_of_students = 5\n    ans = factorial(number_of_students)\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(1, total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_times = amy_swims - joanne_swims\n\n    return more_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    for a in range(1, 10):  # since a is the first digit, it ranges from 1 to 9\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    num_abcd = a * 1000 + b * 100 + c * 10 + d\n                    num_abc = a * 100 + b * 10 + c\n                    num_ab = a * 10 + b\n                    if num_abcd + num_abc + num_ab + a == 1370:\n                        return num_abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3  # Sachin can clean the flat in 3 hours\n    peter_rate = 1 / 6   # Peter can clean the flat in 6 hours\n    combined_rate = sachin_rate + peter_rate  # Combined rate of cleaning when working together\n\n    time_taken = 1 / combined_rate  # Total time taken when working together\n    return time_taken\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    n = factorial(29)\n    count = 0\n\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    n_base_8 = int('12345654321', 8)\n    remainder_7 = n_base_8 % 7\n    remainder_9 = n_base_8 % 9\n    \n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be L meters\n    # Since Linda jogged 1200m, the remaining distance Ted jogged is L - 1200m\n    # The speed ratio of Linda to Ted is 3:4\n    # Distance ratio would be the same as the speed ratio since they started at the same time\n\n    # Let Linda's distance be 3x and Ted's distance be 4x\n    # Linda's distance = 1200m, so 3x = 1200m\n    x = 1200 / 3\n    ted_distance = 4 * x\n\n    # Total length of the path L is Linda's distance plus Ted's distance\n    L = 1200 + ted_distance\n\n    return L\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (20180 + A) % 9 == 0:\n            remainder = (20180 + A) % 8\n            return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cement = symbols('total_cement')\n    \n    # first_warehouse holds 56% of total\n    first_warehouse = 0.56 * total_cement\n    \n    # after transferring 6 tons to second warehouse, they are equal\n    # so first warehouse will have (first_warehouse - 6) tons left\n    # and second warehouse will have (total_cement - first_warehouse + 6) tons\n    # these two amounts will equal each other\n    \n    equation = Eq(first_warehouse - 6, total_cement - first_warehouse + 6)\n    total_cement_solution = solve(equation, total_cement)[0]\n    return total_cement_solution\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from sympy import factorial\n\n    def D(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (D(n - 1) + D(n - 2))\n\n    ans = D(6)\n\n    return ans\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let i represent the initial number of stamps Isaac had, and j represent the initial number of stamps Joseph had.\n    i, j = symbols('i j')\n    \n    # Build the equations based on the problem statement\n    equation1 = Eq(i, 5 * j)                         # Isaac had 5 times as many stamps as Joseph initially\n    equation2 = Eq(j + 154, (9/10) * i)              # After receiving 154 stamps, Joseph had 9/10 as many stamps as Isaac\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (i, j))\n    \n    # i represents the number of stamps Isaac had\n    return solutions[i]\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    total_weight = 64\n    ans = percentage * total_weight\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    pacific_speed_kmh = 54\n    pacific_speed_mps = pacific_speed_kmh * 1000 / 3600\n    sound_speed_mps = 1185\n    interval_time_s = 2.01\n    delta_time_s = 0.01\n    \n    from sympy import symbols, Eq, solve\n    arctic_speed_mps = symbols('arctic_speed_mps')\n    \n    # The distance travelled by the Pacific in 2 seconds\n    distance_pacific_m = 2 * pacific_speed_mps\n    \n    # The sound wave will travel to Arctic and back. The extra time is due to that.\n    equation = Eq(2 * (distance_pacific_m / (sound_speed_mps - arctic_speed_mps)), interval_time_s + delta_time_s)\n    \n    arctic_speed_mps_solution = solve(equation, arctic_speed_mps)[0]\n    # Convert the result from m/s to km/h\n    arctic_speed_kmh = arctic_speed_mps_solution * 3600 / 1000\n    # Return the speed accurate to 1 kilometer per hour\n    return round(arctic_speed_kmh)\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    original_ratio_p = 2\n    original_ratio_q = 3\n    added_pupils_p = 240\n    \n    # Final ratio after adding pupils\n    final_ratio_p = 3\n    final_ratio_q = 4\n    \n    # Let the original number of pupils in school P be x\n    # Then the original number of pupils in school Q is (3/2)x due to the original ratio of 2:3\n\n    # After adding pupils\n    # Number of pupils in P becomes x + 240\n    # Number of pupils in Q becomes (3/2)x + 240\n\n    # The ratio becomes\n    # (x + 240) / ((3/2)x + 240) = 3/4\n    # Solving for x gives us the original number of pupils in P\n    \n    # Simplify the equation by cross multiplication\n    # 4(x + 240) = 3((3/2)x + 240)\n    x = symbols('x')\n    equation = Eq(4 * (x + 240), 3 * ((3/2) * x + 240))\n    \n    # Solve the equation\n    original_pupils_p = solve(equation, x)[0]\n    \n    return original_pupils_p\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    amount = 45\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_current_age = symbols('jack_current_age')\n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n    \n    jack_age_now = solve(equation, jack_current_age)\n    \n    return jack_age_now[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Percentage of money spent on the bag\n    percentage_bag = 70 # 70%\n    \n    # Nora is left with 30% (100 - 70) of her money\n    remaining_money_percentage = 100 - percentage_bag\n    \n    # Percentage of the remaining money spent on purse\n    percentage_purse_of_remaining = (3 / 8) * remaining_money_percentage\n    \n    # Percentage of total money spent on purse\n    percentage_purse = percentage_purse_of_remaining / 100 * remaining_money_percentage\n\n    return percentage_purse\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    # Bai Bai guessed 573\n    # Hei Hei guessed 923\n    # Hui Hui guessed 528\n    \n    # All guesses share the same middle digit '2', so it must be correct.\n    middle_digit = '2'\n    \n    # Test the remaining digits from the guesses.\n    for first_digit in ('5', '9'):\n        for last_digit in ('3', '8'):\n            if first_digit != last_digit:  # The first and last digits cannot be the same.\n                guess = first_digit + middle_digit + last_digit\n                if guess[0] != '5' and guess[2] != '3':  # Bai Bai's incorrect digits.\n                    if guess[0] != '9' and guess[2] != '3':  # Hei Hei's incorrect digits.\n                        if guess[0] != '5' and guess[2] != '8':  # Hui Hui's incorrect digits.\n                            # If all conditions are satisfied, we found the correct number.\n                            return int(guess)\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    # Total letters in 'EDUCATION' = 9\n    # Total vowels in 'EDUCATION' = 5 (E, U, A, I, O)\n    # Total consonants in 'EDUCATION' = 4 (D, C, T, N)\n    \n    # Total arrangements without restriction\n    total_arrangements = factorial(9)\n    \n    # Total arrangements with all vowels together:\n    # Treat all vowels as a single entity. Now we have 5 entities (1 vowels group + 4 consonants)\n    # There are factorial(5) ways to arrange these 5 entities.\n    # Within the vowel group, there are factorial(5) ways to arrange the vowels.\n    vowels_together = factorial(5) * factorial(5)\n    \n    # Subtract arrangements where vowels are together from the total arrangements\n    arrangements_with_vowels_apart = total_arrangements - vowels_together\n\n    return arrangements_with_vowels_apart\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    additional_students = 1\n\n    total_candies = initial_students * candies_each_initially\n    new_student_count = initial_students + additional_students\n    candies_each_after = total_candies // new_student_count\n\n    return candies_each_after\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Angles of a triangle sum up to 180 degrees\n    angle_ABC = 180 - 50\n    # BP bisects angle ABC, so we take half of it for angle ABP\n    angle_ABP = angle_ABC / 2\n    # Similarly, CP bisects angle ACB\n    angle_ACP = angle_ABC / 2\n    # The sum of angles in a triangle is 180 degrees. \n    # BPC is an external angle for triangle ABP, so BPC = ABP + APB\n    # APB can be found by subtracting the internal angles from 180 degrees\n    angle_APB = 180 - angle_ABP - 50\n    # Now calculate m angle BPC\n    angle_BPC = angle_ABP + angle_APB\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable x as a symbol\n    x = symbols('x')\n    \n    # Define the equation based on the given percentage equation and solve for x\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Since the solution will be in a list, we retrieve the first item\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    initial_sweets = 11\n    wrappers = 11\n    total_sweets = initial_sweets\n\n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        total_sweets += new_sweets\n        wrappers = wrappers % 3 + new_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    # Calculate the sum from 1 to 12\n    sum_to_12 = sum(range(1, 13))\n    # Calculate the sum from 1 to 10\n    sum_to_10 = sum(range(1, 11))\n    # The final sum is twice the sum to 10 plus the sum of 11 and 12\n    total = 2 * sum_to_10 + 11 + 12\n    return total\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    arrival_hour = 11\n    arrival_minute = 40\n    duration_hours = 4\n    duration_minutes = 50\n    \n    total_duration_minutes = arrival_minute + duration_minutes\n    extra_hours = total_duration_minutes // 60\n    leave_minute = total_duration_minutes % 60\n    leave_hour = (arrival_hour + duration_hours + extra_hours) % 24\n\n    return f\"{leave_hour:02d}:{leave_minute:02d}\"\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Convert kg to g\n    total_sweets_weight_g = 5 * 1000  # 5 kg in grams\n    \n    # Calculate the number of bags\n    weight_per_bag_g = 250\n    number_of_bags = total_sweets_weight_g / weight_per_bag_g\n    \n    # Calculate total income from selling all the bags\n    price_per_bag_p = 65\n    total_income_p = number_of_bags * price_per_bag_p\n    \n    # Convert total income to pounds\n    total_income_£ = total_income_p / 100\n    \n    # Initial cost\n    initial_cost_£ = 10\n    \n    # Calculate profit\n    profit_£ = total_income_£ - initial_cost_£\n    \n    # Calculate percentage profit\n    percentage_profit = (profit_£ / initial_cost_£) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Each path from Ayton to Deeton can be A->B->C->D or directly from A->D.\n    # Using the multiplication rule: four ways from A to B, \n    # five ways from B to C, and six ways from C to D. Multiply these:\n    ways_A_B_C_D = 4 * 5 * 6\n    \n    # There are three direct roads from Ayton to Deeton:\n    ways_A_D = 3\n    \n    # Using the addition rule to find the total number of ways:\n    total_ways = ways_A_B_C_D + ways_A_D\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    from fractions import Fraction\n    \n    frac = Fraction(15, 20)\n    reduced_frac = frac.denominator // frac.numerator\n    \n    return reduced_frac\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given values from the question\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Calculate common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # Calculate 12th term using the common difference\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    sum = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return sum\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # Inclusion-Exclusion Principle to determine count of numbers underlined exactly twice\n    total_numbers = 2016\n    multiples_of_2 = total_numbers // 2\n    multiples_of_3 = total_numbers // 3\n    multiples_of_4 = total_numbers // 4  # multiples of 4 are also multiples of 2, so they have been counted twice already\n\n    multiples_of_2_and_3 = total_numbers // (2 * 3)\n    multiples_of_2_and_4 = total_numbers // (2 * 4) # This is redundant as all these are already multiples of 4, will be excluded\n    multiples_of_3_and_4 = total_numbers // (3 * 4)\n\n    # We only need the counts of numbers underlined in exactly two different colors.\n    # Since all multiples of 4 are multiples of 2, we exclude them.\n    # Therefore, we only consider multiples of 2 and 3, and multiples of 3 and 4 while avoiding multiples of 4 (which is redundant)\n    # The calculation is: Count(multiples of 2 and 3) + Count(multiples of 3 and 4) - Count(redundant multiples of 2 and 4)\n    twice_underlined = multiples_of_2_and_3 + multiples_of_3_and_4 - multiples_of_2_and_4\n\n    return twice_underlined\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount Joe had initially\n    joe_initial = symbols('joe_initial')\n\n    # Sally had $3.75 and spent $2.50, so she has $1.25 left\n    sally_left = 3.75 - 2.50\n\n    # Joe spent $2.50, so we subtract that from his initial amount\n    joe_left = joe_initial - 2.50\n\n    # Together, Sally and Joe have $5 left\n    equation = Eq(sally_left + joe_left, 5)\n\n    # Solving the equation for the amount Joe had initially\n    solution = solve(equation, joe_initial)\n\n    # Returning the solution as Joe's initial amount of money\n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_average = 135\n    last_5_days_average = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_average * 3\n    total_trees_last_5_days = last_5_days_average * 5\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(1000 - 2):\n        a, b = b, a + b\n        b %= 3  # Only interested in remainder when divided by 3\n    return b\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Choose 2 out of 4 options\n    choices = comb(4, 2)\n\n    # Calculate the total number of different lunches he can have\n    ans = (choices * (salads * soups + salads * vegetables + salads * sandwiches \n            + soups * vegetables + soups * sandwiches + vegetables * sandwiches))\n    \n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime, primerange\n\ndef solution():\n    # The primes differ by an even number, and except for (2,3) only one of two consecutive numbers is prime.\n    # So, n must be even and after excluding 2, it must be of the form 6k - 1 to satisfy n+2 and n+4 being prime.\n    # This is because 6k, 6k+2, 6k+4 are evidently divisible by 2 and 6k+3 is divisible by 3.\n    # Start the search from 7 (6*1 + 1).\n\n    n = 7\n    while True:\n        # Now we just need to check if n, n + 2, n + 4, n + 106, and n + 308 are all prime.\n        if (isprime(n) and isprime(n+2) and isprime(n+4) and isprime(n+106) and isprime(n+308)):\n            return n\n        # Increment n by 6 to check the next candidate.\n        n += 6\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n\n    return days_last\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    circumference = 128\n    extra_speed = 2\n    time_reduced = 3\n    point_C_to_meeting = 24\n\n    # s is the speed of \"Thunder\" in cm/s\n    # t is the time it takes for \"Lightning\" to catch up with \"Thunder\" at point C\n    s, t = symbols('s t')\n\n    # Original distance \"Lightning\" travels to the meeting point\n    # is the circumference of the circle.\n    # \"Lightning\" travels 2 cm/s faster than \"Thunder\"\n    original_distance = s * t + 2 * t\n   \n    # When \"Lightning\" speed is increased by 2 cm/s and \"Thunder\" speed is decreased by 2 cm/s\n    # The time to catch up is reduced by 3 seconds\n    new_distance = (s + 2 * extra_speed) * (t - time_reduced) + 2 * (t - time_reduced)\n\n    # The location where \"Lightning\" overtakes \"Thunder\" after their speeds are adjusted is 24 cm away\n    # from the original meeting point C.\n    # This means that with the adjusted speed, \"Lightning\" travels 24 cm less than the circumference\n    # to catch up with \"Thunder\"\n    new_catch_up_point = circumference - point_C_to_meeting\n\n    equations = [\n        Eq(original_distance, circumference),\n        Eq(new_distance, new_catch_up_point)\n    ]\n\n    # Solve the equations to find the values of s and t\n    solution_dict = solve(equations, (s, t))\n\n    # Use the speed of \"Thunder\" to find out the time they will meet if they move towards each other\n    # Since they are at the ends of a diameter, the distance between them is half the circumference\n    # They meet when they cover half the circumference combined\n    thunder_speed = solution_dict[s]\n    meet_time = (circumference / 2) / (thunder_speed + thunder_speed + 2 * extra_speed)\n\n    return meet_time\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes - strawberries, 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n    \n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variable for the total number of items\n    total_items = symbols('total_items')\n\n    # Equation representing the relationship between apples, bananas, and lemons.\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    # Equation stating that she bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solving the equation for the total number of items\n    solutions = solve(equation, total_items)\n\n    # Calculate the number of lemons she bought\n    lemons_bought = total_items - (2/3) * total_items - (1/9) * total_items\n\n    # Return the number of lemons as an integer\n    return int(lemons_bought.subs(total_items, solutions[0]))\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the initial amount of money Max has\n    # Let 'a' be the initial amount of money Anthony has\n    m, a = symbols('m a')\n\n    # If Max bought the chocolates for $12, the remaining money is m - 12\n    # The ratio of remaining money is 2:5 (Max to Anthony)\n    equation1 = Eq((m - 12) / a, 2 / 5)\n\n    # If Anthony bought the chocolates, the remaining money is a - $12\n    # The ratio of remaining money would be 8:13 (Max to Anthony)\n    equation2 = Eq(m / (a - 12), 8 / 13)\n\n    # Solve the system of equations for m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Returning the amount Max had originally\n    return solutions[m]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Initialize boys, girls, and total students counts\n    boys = 0\n    girls = 0\n    total_students = 0\n    # Start from the first layer and add layers until the condition is met\n    layer = 1  # Starting layer\n\n    while True:\n        # Calculate the number of students in the current layer\n        # For each square layer, there are 4 sides with 'layer - 1' students, plus 4 corners\n        students_in_layer = 4 * (layer - 1)\n        \n        # Determine if the current layer should be boys or girls\n        if layer % 2 == 1:  # Odd layers are boys\n            boys += students_in_layer\n        else:  # Even layers are girls\n            girls += students_in_layer\n\n        # Update the total number of students\n        total_students += students_in_layer\n        \n        # Check if the difference between boys and girls is 32\n        if boys - girls == 32:\n            # We found a layer where the difference is 32, now calculate the total students\n            # Including the innermost student (could be a boy or a girl)\n            total_students += 1  # Add the innermost student\n            break  # Exit the loop\n        \n        # Prepare for the next layer\n        layer += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let the total number of stickers initially be 2x (x red and x blue)\n    from fractions import Fraction\n    \n    # Liz gives away 2/3 of her red stickers\n    red_given_away = Fraction(2, 3)\n    \n    # Liz is left with 1/4 of her total stickers\n    stickers_left = Fraction(1, 4)\n    \n    # Fraction of total stickers Liz is left with after giving away red stickers\n    red_stickers_left = 1 - red_given_away\n    total_stickers_left = 2 * red_stickers_left  # Because she had equal red and blue stickers\n    \n    # Since she is left with 1/4 of her stickers, and we know how many red stickers are left\n    blue_stickers_left = stickers_left - total_stickers_left\n    \n    # Calculate the initial number of blue stickers (which is x)\n    initial_blue_stickers = 1\n    \n    # Calculate fraction of blue stickers given away\n    blue_given_away = 1 - blue_stickers_left / initial_blue_stickers\n\n    return blue_given_away\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial as fact\n\ndef solution():\n    # Since each of the 6 kids must get at least one pen, we distribute one pen to each kid first.\n    remaining_pens = 20 - 6\n    \n    # Now we have to distribute the remaining pens to 6 kids without any restrictions.\n    # This is a classical stars-and-bars problem, where we want to find the number of\n    # ways to distribute n identical objects into k distinct bins.\n    # The formula for this is (n + k - 1) choose (k - 1) which is the same as\n    # (n + k - 1)! / (n! * (k - 1)!)\n\n    # In our case, n is remaining_pens and k is 6.\n    n = remaining_pens\n    k = 6\n    \n    ways = fact(n + k - 1) / (fact(n) * fact(k - 1))\n    return int(ways)\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    exponent_cycle = [base_unit_digit]\n\n    # Calculate the cycle of unit digits for base raised to different powers\n    while True:\n        next_unit_digit = (exponent_cycle[-1] * base_unit_digit) % 10\n        if next_unit_digit == exponent_cycle[0]:\n            break\n        exponent_cycle.append(next_unit_digit)\n\n    exponent_mod_cycle_length = 2022 % len(exponent_cycle)\n    ans = exponent_cycle[exponent_mod_cycle_length - 1]\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # We assume x1 < x2 < x3 < x4, this ensures all piles have different numbers of marbles\n    for x4 in range(4, 16):\n        for x3 in range(3, x4):\n            for x2 in range(2, x3):\n                for x1 in range(1, x2):\n                    if x1 + x2 + x3 + x4 == 16:\n                        return x4  # Returns the smallest possible x4\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_pages = (num_terms * (first_term + last_term)) // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n\n    ans = smallest_6_digit - largest_5_digit\n\n    return ans\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = range(3, 20, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    ans = 324 * 24\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # convert all lengths to millimetres\n    lengths_mm = {\n        \"10mm\": 10,\n        \"100cm\": 100 * 10,           # 1 cm = 10 mm\n        \"10m\": 10 * 1000,            # 1 m = 1000 mm\n        \"2km\": 2 * 1000 * 1000,      # 1 km = 1000 * 1000 mm\n        \"2800cm\": 2800 * 10,         # 1 cm = 10 mm\n        \"2500m\": 2500 * 1000,        # 1 m = 1000 mm\n        \"100mm\": 100,\n        \"100m\": 100 * 1000           # 1 m = 1000 mm\n    }\n    \n    # find the smallest length by comparing the values\n    smallest_length = min(lengths_mm, key=lengths_mm.get)\n    \n    # underline the smallest length\n    ans = f'_{smallest_length}_'\n    \n    return ans\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, (2/3) * B)\n    equation2 = Eq(B, (4/5) * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # There are 3 digits in a three-digit number.\n    # The hundreds place can be filled with any of the 6 digits (1-6)\n    # Since the number must be odd, the ones place can only be filled with any of the 3 odd digits (1, 3, 5)\n    # Therefore, after filling the ones and hundreds place, the tens place can be filled with any of the remaining 4 digits.\n    \n    # Counting the possibilities\n    hundreds_place = 6  # Options for the first digit (hundreds place): 1, 2, 3, 4, 5, 6\n    ones_place = 3      # Options for the third digit (ones place, it must be odd): 1, 3, 5\n    tens_place = 4      # After filling hundreds and ones place, 4 options remain for tens place\n\n    # Number of three-digit odd numbers = hundreds_place * tens_place * ones_place\n    return hundreds_place * tens_place * ones_place\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls_count = 11\n    boys_count = 5\n    total_average_height = 122.5\n\n    girls_avg_height, boys_avg_height = symbols('girls_avg_height boys_avg_height')\n\n    equation1 = Eq(girls_avg_height - boys_avg_height, 3.2)\n    equation2 = Eq((girls_avg_height * girls_count + boys_avg_height * boys_count) / (girls_count + boys_count), total_average_height)\n\n    solutions = solve((equation1, equation2), (girls_avg_height, boys_avg_height))\n\n    return solutions[girls_avg_height]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # The maximum number of regions formed by n lines on a plane is given by:\n    # R(n) = n(n - 1)/2 + 1, where n is the number of lines.\n    # Each triangle has 3 sides, which can be seen as lines, so 5 triangles have:\n    # n = 5 * 3 = 15 lines\n    # We substitute the value of n = 15 into the formula to find the number of regions\n    n = 5 * 3\n    max_regions = n * (n - 1) // 2 + 1\n\n    return max_regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = symbols('boys')\n\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n    \n    # Equation representing the total sum of all students' scores\n    equation1 = Eq(girls_average * girls + boys_average * (total_students - girls), total_students * total_average)\n\n    # Solve for the number of girls\n    num_girls = solve(equation1, girls)\n\n    return num_girls[0]\n    \nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Total count of numbers\n    n = 9\n    \n    # Sum of the arithmetic sequence\n    total_sum = 1503\n    \n    # Since the numbers are consecutive and odd, the common difference (d) is 2.\n    # Sn = n/2 * (2*a + (n - 1) * d), where Sn is the sum of n terms\n    # Sn = (9/2) * (2*a + (9 - 1) * 2)\n    # 1503 = (9/2) * (2*a + 16)\n    # 2*a = (1503 * 2 / 9) - 16\n    # a is the first term\n    \n    first_term = ((total_sum * 2) / n) - 16\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    nth_term_32 = 157\n    nth_term_108 = 537\n    n_32 = 32\n    n_108 = 108\n\n    common_difference = (nth_term_108 - nth_term_32) / (n_108 - n_32)\n    first_term = nth_term_32 - (n_32 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Define the equation step-by-step according to the problem statement\n    # Let the total number of candies be x and calculate backwards from Kate to Donna\n    # Kate had ((1 - 1/4) * remaining after Jane) - 4 = 42 candies\n    # Thus, remaining after Jane * (3/4) - 4 = 42\n    # remaining after Jane = (42 + 4) * (4/3)\n    # Jane ate (1/3) * (candies after Donna) + 4, so:\n    # candies after Donna = 3/2 * ((42 + 4) * (4/3) + 4)\n    # Donna kept half of the candies plus 3, so:\n    # x = 2*(candies after Donna) - 3\n\n    candies_after_jane = (42 + 4) * (4/3)\n    candies_after_donna = 3/2 * (candies_after_jane + 4)\n    total_candies = 2 * candies_after_donna - 3\n\n    return int(total_candies)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 4 individuals including A, let's call them A, B, C, D\n    # A passes the ball first and after 3 passes it should return back to A.\n    # So, the sequence of passes must be A -> X -> Y -> A, where X and Y are any of the other 3 individuals\n    # but X cannot be A because A passed the ball in the first place, and Y cannot be A or X.\n    # So, there are 3 choices for X (B, C, D), and once X is chosen, 2 choices remain for Y.\n    # This gives us a total of 3 * 2 = 6 different methods for 3 passes.\n    \n    num_methods = 3 * 2\n    return num_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let's denote the total books Anthea has initially as 'a'.\n    # Jason has 4 more books than Anthea after giving her books, which means he initially had a + 4 books.\n    # If Jason gives 4 books to Anthea, they will each have a + 2 books.\n    \n    # Total books Jason has initially is 30.\n    jason_initial = 30\n    # Jason and Anthea will have the same amount of books after Jason gives 4 books to Anthea.\n    # So, we denote the books Anthea will have after receiving 4 books as (a + 4).\n    # Then Jason will also have (a + 4) books after giving away 4 books.\n    # We have the equation: (a + 4) + (a + 4) + 4 (books given by Jason) = 30 (Jason's initial number of books)\n    # This simplifies to: 2 * (a + 4) + 4 = 30\n    # 2a + 8 + 4 = 30\n    # 2a + 12 = 30\n    # 2a = 18\n    # a = 9\n    \n    anthea_initial = (jason_initial - 4) / 2\n    \n    # The difference between the number of books Jason has and Anthea has initially\n    difference = jason_initial - anthea_initial\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    complement_fraction = 1/17\n    six_degrees = 6\n    complement_angle = complement_fraction * six_degrees\n    angle = 90 - complement_angle\n    return angle\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, Q, P = perm\n        if ((10 * A + B) * (10 * B + A)) == (10 * Q + P) and A != 0 and B != 0 and Q != 0:\n            return 10 * Q + P\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    for i in range(1, 4 * 10 + 1):\n        if i % 4 == 0 and i % 10 == 0:\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    series_sum = 0.98 + 1.98 + 2.98 + 3.98\n    return series_sum\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's speed in metres per second\n    time_s = 12 * 60   # 12 minutes converted to seconds\n\n    distance_m = speed_m_per_s * time_s  # Total distance jogged\n\n    return distance_m\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = 2020 * 68 + 505 * 128\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the efficiency of B be 1 unit/day, then A's efficiency is 2 units/day\n    # If B takes x days to finish the job, then A takes (x - 12) days to finish the job\n    A_efficiency = 2\n    B_efficiency = 1\n    x = symbols('x')\n\n    # A's work done in (x - 12) days is 1 job, hence A's work done in 1 day is 1/(x - 12)\n    # B's work done in x days is 1 job, hence B's work done in 1 day is 1/x\n    # Together they do (1/(x - 12) + 1/x) work in 1 day\n    # The job is finished when this expression equals 1\n    equation = Eq(1/(x - 12) + 1/x, 1)\n\n    # Solve for x\n    days_for_B_to_finish = solve(equation, x)[0] # Get the positive root, as time cannot be negative\n\n    # Total efficiency when A and B work together\n    total_efficiency = A_efficiency + B_efficiency\n\n    # Time taken for both to complete the job working together\n    time_together = 1/total_efficiency\n    \n    # B's days multiplied by B's efficiency gives the total work units\n    total_work_units = days_for_B_to_finish * B_efficiency\n\n    # Time for both to finish the job is total work units divided by their combined efficiency\n    days_both = total_work_units / total_efficiency\n\n    return days_both\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let x be the number of cows and y be the number of ducks.\n    # We have two equations:\n    # x + y = 25 (1) number of animals\n    # 4x + 2y = 68 (2) total number of legs\n\n    # You can solve the system of equations in various ways.\n    # Here we will use substitution.\n\n    # From (1), we can express x in terms of y:\n    # x = 25 - y\n\n    # Now substitute x in (2):\n    # 4*(25 - y) + 2y = 68\n    # 100 - 4y + 2y = 68\n    # 100 - 2y = 68\n    # -2y = 68 - 100\n    # -2y = -32 => y = 16 (number of ducks)\n\n    return 16\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change = 4.83\n\n    tissue_cost = total_money - (newspaper_cost + change)\n\n    return tissue_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let the number of boys (and girls) at the exhibition initially be b.\n    # So total initial number of students is 2b.\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b', integer=True)\n    \n    # After 3/5 of the boys left, the number of remaining boys is 2/5 * b.\n    remaining_boys = 2/5 * b\n    \n    # Since 42 girls left, the number of remaining girls is b - 42.\n    remaining_girls = b - 42\n    \n    # There were 12 more boys than girls after they left.\n    equation = Eq(remaining_boys - remaining_girls, 12)\n\n    # Solve the equation.\n    num_students = solve(equation, b)\n    \n    # The solution gives the number of boys (or girls), so double it for the total number of students.\n    return 2 * num_students[0]\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['1', '2', '3']\n    perm = permutations(digits)\n    ans = len(list(perm))\n\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 * baskets_of_tomatoes + 3\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3*(alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    morning_ratio_eq = Eq(boys/girls, 3/2)\n    afternoon_ratio_eq = Eq((boys + 12) / (girls + 12), 19/14)\n\n    solutions = solve((morning_ratio_eq, afternoon_ratio_eq), (boys, girls))\n\n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_pencil_case = 6.25\n    total_cost_for_12 = cost_per_pencil_case * 12\n    \n    return total_cost_for_12\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    initial_temp = -8\n    final_temp = 13\n    increase_in_temp = final_temp - initial_temp\n    return increase_in_temp\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let distance be 'd' km and actual time to reach on time be 't' hours\n    # Speed = Distance / Time\n    # According to the first condition:\n    # d = 3 * (t + 12/60) => Equation 1 (since he is 12 min late so t+12/60 hours)\n    \n    # According to the second condition:\n    # d = 5 * (t - 4/60) => Equation 2 (since he is 4 min early so t-4/60 hours)\n\n    # Solving the two equations for 'd' (distance), equating Equation 1 and Equation 2:\n    # 3 * (t + 12/60) = 5 * (t - 4/60)\n    # Expanding the terms and bringing like terms together:\n    # 3t + 3*(12/60) = 5t - 5*(4/60)\n    # 3t + 1/5 = 5t - 1/15\n    # Simplifying, we get:\n    # 1/5 + 1/15 = 5t - 3t\n    # (3+1)/15 = 2t\n    # 4/15 = 2t\n    # t = 4/15 / 2\n    # t = 2/15 hours\n\n    t = 2/15  # actual time to reach on time in hours\n\n    # We substitute the value of 't' in Equation 1 or Equation 2 to find 'd'\n    # Let's use Equation 1:\n    # d = 3 * (t + 12/60)\n    # d = 3 * (2/15 + 1/5)\n    d = 3 * ((2/15) + (12/60))\n\n    # Calculate distance 'd'\n    ans = d\n    return ans\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        ""
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_after_transfer = total_pupils // 2  # divide by 2 to find the equal number in each room\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    period_earth = 1\n    gravity_ratio = 1/6\n\n    # Using the formula T = 2pi * sqrt(l/g), where T is the period, l is the length, and g is the gravity.\n    # Since T is proportional to the square root of the inverse of g, we can find the new period by:\n    period_moon = period_earth * sqrt(1/gravity_ratio)\n\n    return period_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Initial count of tiles is zero for both colors\n    red_tiles = 0\n    green_tiles = 0\n    \n    # Total tiles across one side of the square wall\n    side = int(400**0.5)\n    \n    # Calculate number of tiles for each colour by iterating over each layer\n    for layer in range(1, side + 1, 2):\n        # Red layers have odd layer index\n        red_tiles += (side - (layer - 1))**2\n        \n        # Green layers have even layer index\n        if layer < side:\n            green_tiles += (side - layer)**2\n            \n    # Calculate which colour has more tiles and by how many\n    dominant_colour = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n    \n    return (dominant_colour, difference)\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar_1 = 23\n    length_iron_bar_2 = 37\n    welded_part = 3\n\n    total_length = (length_iron_bar_1 + length_iron_bar_2) - welded_part\n\n    return total_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    colors_per_part = 3\n    parts_per_rod = 5\n    differently_colored_rods = colors_per_part ** parts_per_rod\n    return differently_colored_rods\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime(2023, 3, 1)\n    end_date = datetime(2023, 4, 15)\n\n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # This is a number puzzle where the value of A has to be found such that:\n    #   A\n    # x A\n    # ----\n    #  AAA\n    # \n    # This implies that A * A should give a three-digit number where all digits are A.\n    \n    for A in range(1, 10): # Since A is a single digit, range is from 1 to 9\n        if A * A == int(str(A) * 3):\n            return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    # Work done by A and B together in 3 days\n    work_done = 3 * (A_rate + B_rate)\n    # Remaining work to be done after A leaves\n    remaining_work = 1 - work_done\n    # Days taken by B to finish the remaining work\n    days_for_B = remaining_work / B_rate\n    \n    return days_for_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # initialize the total number of people\n    total_people = 100\n    \n    # since it's a square array, find one side of the square\n    side = int(total_people ** 0.5)\n    \n    # find the number of people in the outer layer\n    outer_layer = 4 * side - 4\n    \n    return outer_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Common difference from the first and second term\n\n    # The first negative term means that term is less than 0.\n    # Thus, we need to find the term number (n) for which the term is negative.\n    # The formula for the n-th term of an arithmetic sequence is: a_n = a_1 + (n-1)*d\n    # For the first negative term, we have: a_n < 0\n    # Solving for n gives: 0 > 50 + (n-1)*(-4), which simplifies to: n < 50/4 + 1\n    n = 0\n    while first_term >= 0:\n        first_term += difference\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining = 280\n    remaining_after_sister = remaining / (1 - 1/8)\n    original_cash = remaining_after_sister / (1 - 3/7)\n    return original_cash\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    cups_per_loaf = 5 / 6\n    loafs_required = 24\n    cups_needed = cups_per_loaf * loafs_required\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # The least number of apples a student can get is 3.\n    # We use this as a starting point to determine the maximum class size.\n    # Each student having 3 apples is the worst-case scenario for class size.\n    apples = 80\n    min_apples_per_student = 3\n    \n    # Calculate the class size by dividing the total apples by the minimum number of apples per student\n    # Since at least one student should get at least 3 apples, start the count from one student receiving 3 apples already.\n    class_size = (apples - 3) // min_apples_per_student + 1\n\n    return class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red balls be r, white balls be w, and black balls be b.\n    # According to the given ratios:\n    # r / w = 1 / 2 => r = w / 2\n    # w / b = 3 / 4 => b = (4/3) * w\n    # The total number of balls is r + w + b = 34:\n    # w / 2 + w + (4/3) * w = 34\n    # Combine the terms to solve for w:\n    # (1/2 + 1 + 4/3) * w = 34\n    # (3/6 + 6/6 + 8/6) * w = 34\n    # (17/6) * w = 34\n    # Multiply both sides by 6/17 to solve for w:\n    # w = (34 * 6) / 17\n    # Calculate w:\n    w = (34 * 6) // 17\n    # Calculate the number of red balls using r = w / 2:\n    r = w // 2\n    \n    return r\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    \n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Since Tom goes first, in order to win, he needs to make sure that after each round, \n    # the total cards in both piles have a winning configuration, such that no matter what Jane does, \n    # he can still reach the winning position after his next round.\n    \n    # Winning configuration is when the number of cards in each pile is a multiple of the other pile+1\n    # It's based on the strategy to always leave a multiple of the other pile plus one\n\n    # Pile A has 88 cards, Pile B has 52 cards. We aim to find x such that (88-x) is a multiple of (52-x)+1\n    # Essentially, ensure that Jane is always left with a position where the sizes of the two piles are in the form:\n    # (n*(m+1), m) or (m, n*(m+1)) where n and m are integers, and one pile is a multiple of the other pile plus one.\n\n    def winning_move(a, b):\n        for x in range(1, a + 1):  # Tom will try to take from Pile A first\n            if (a - x) % (b + 1) == 0:\n                return ('A', x)\n\n        for x in range(1, b + 1):  # If not possible from Pile A, he will try to take from Pile B\n            if (b - x) % (a + 1) == 0:\n                return ('B', x)\n\n        return None  # No winning move, Tom would lose if Jane plays perfectly\n    \n    # Tom's first move\n    move = winning_move(88, 52)\n    \n    # Based on the current problem setup and the principle of the winning strategy,\n    # the function will always return the move for Tom to take from Pile A in the first round\n    return move\n    \nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # 2014! contains a factor of 10 (2 * 5), and since there are several such factors in 2014!,\n    # the last digit of 2014! must be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    sum = 0\n    for i in range(1, 11):\n        sum += i * (2*i - 1)\n    return sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    sum_pairs = (1 - 2 + 3 - 4 + 5 - 6 - ... + 999 - 1000)\n    total_pairs = 1000 // 2\n    sum_pairs = (-1) * total_pairs\n    ans = sum_pairs + 1001\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # divide by 6 to account for permutations of the three numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n    total_marbles_at_first = marbles_left_with_henry + marbles_given_to_brother + (2 * marbles_given_to_each_sister)\n\n    return total_marbles_at_first\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "from cmath import rect, pi\n\ndef solution():\n    initial_position = 5\n    move_angle = pi / 4\n    move_distance = 10\n    num_moves = 150\n    \n    # Convert the initial position into a complex number\n    particle = complex(initial_position, 0)\n    \n    # Perform the moves\n    for _ in range(num_moves):\n        # Rotate the particle position counter-clockwise by move_angle\n        particle = particle * rect(1, move_angle)\n        # Move the particle to the right along the X-axis\n        particle += complex(move_distance, 0)\n    \n    # Get the final position\n    p, q = particle.real, particle.imag\n    \n    # Calculate |p| + |q|\n    magnitude_sum = abs(p) + abs(q)\n    \n    # Return the greatest integer less than magnitude_sum.\n    return int(magnitude_sum)\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    result = 11 + 192 + 1993 + 19994 + 199995\n    return sum(int(digit) for digit in str(result))\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += (2 * i - 1)\n    return total\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    # The total distance covered by both of them until they meet\n    total_distance = (amy_speed + christen_speed) * meeting_time\n\n    # Time taken for Christen to reach Amy's starting point is the total distance \n    # divided by Christen's speed.\n    time_for_christen_to_reach_amy = total_distance / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for perm in permutations(digits, 4):\n        number = int(''.join(perm))\n        if perm[3] in ['0', '6', '8'] and number > 999:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    score_per_correct = 4\n    penalty_per_wrong = 1\n    \n    # Let x be the number of correct answers.\n    # Total score is equal to: 4x - (50 - x)\n    # Set up the equation: 4x - (50 - x) = 110\n\n    x = (110 + total_questions) // (score_per_correct + penalty_per_wrong)  # Solve for x\n\n    return x\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    ratio_sum = 4 + 5\n    lemon_cakes = (4 / ratio_sum) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # three-digit integers less than 1000\n        digits = set(str(i))     # get unique digits\n        if len(digits) == 2:     # check if exactly two different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the given numbers\n    ans = lcm(2, 3, 4, 5, 6)\n\n    return ans\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily has.\n    # Let y be the number of books Judy has.\n    x, y = symbols('x y')\n\n    # When Lily sends (x - y) / 2 books to Judy, they both have the same amount.\n    # So we can create the equation: x - (x - y) / 2 = y + (x - y) / 2\n    equation = Eq(x - (x - y) / 2, y + (x - y) / 2)\n\n    # Solve the equation\n    solution = solve(equation, (x, y))\n\n    # We want to find (x - y) which is how many more books Lily had than Judy at the beginning\n    ans = solution[x] - solution[y]\n\n    return ans\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 3 players: Cici, Lily, and April.\n    # Lily has to pass the ball to either Cici or April first.\n    # After the first pass, two options are available to the player who received the ball.\n    # They can either pass it back to Lily, or pass it to the third member.\n    # Therefore, for each of the first pass, there are 2 options for the second pass.\n\n    # First pass: Lily -> Cici or Lily -> April (2 ways)\n    # Second pass for each first pass: 2 ways\n    # Total passing ways = First pass ways * Second pass ways\n\n    total_passing_ways = 2 * 2\n    return total_passing_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    fifth_assignment_score = 94\n    total_score_all_five = total_score_first_four + fifth_assignment_score\n    average_score_all_five = total_score_all_five / 5\n    return average_score_all_five\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wibble_count = 11\n    total_arms = 81\n    \n    wibble_total_arms = wibble_arms * wibble_count\n    wobble_arms_left = total_arms - wibble_total_arms\n    \n    wobble_arms = 5\n    wobble_count = wobble_arms_left // wobble_arms\n    \n    return wobble_count\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) // 9\n            if isprime(b) and 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    speed_A = 50\n    speed_B = 60\n    distance_difference = 120\n\n    # Let the time at which they meet be t hours.\n    # According to the problem,\n    # speed_B * t = speed_A * t + distance_difference\n    # (speed_B - speed_A) * t = distance_difference\n    # Therefore, the time taken to meet is given by:\n    t = distance_difference / (speed_B - speed_A)\n    \n    # Distance traveled by car A when they meet can be calculated by:\n    distance_A = speed_A * t\n    \n    # Total distance between A and B is then the sum of distances traveled by both cars.\n    total_distance = distance_A + (distance_A + distance_difference)\n    \n    return total_distance\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    total_necklaces = 10\n    total_diamonds = 32\n    \n    for five_diamond_necklaces in range(total_necklaces + 1):\n        two_diamond_necklaces = total_necklaces - five_diamond_necklaces\n        if 2 * two_diamond_necklaces + 5 * five_diamond_necklaces == total_diamonds:\n            return five_diamond_necklaces\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    result = 0.15 * 420\n    return result\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Maverick's speed is 15 km/h, while Kelvin's speed is 10 km/h.\n    maverick_speed = 15\n    kelvin_speed = 10\n    \n    # Relative speed is the difference in speeds as they move in the same direction\n    relative_speed = maverick_speed - kelvin_speed\n    \n    # Maverick thinks he caught up in 24 minutes. Convert 24 minutes to hours.\n    maverick_time = 24 / 60\n    \n    # Calculate the distance Maverick covered in 24 minutes.\n    maverick_distance = maverick_speed * maverick_time\n    \n    # Calculate the distance needed to catch up to Kelvin who is 10km ahead.\n    catchup_distance = 10\n    \n    # If Maverick's covered distance is equal to the catchup distance, he is correct.\n    # Otherwise, we need to calculate the correct time taken to catch up.\n    if maverick_distance == catchup_distance:\n        correct = 'Maverick'\n        catchup_time = maverick_time\n    else:\n        correct = 'Kelvin'\n        # Calculate the time taken for Maverick to catch up to Kelvin\n        catchup_time = catchup_distance / relative_speed\n    \n    # Return the result in hours, but the question asks for time in minutes.\n    # Thus, we convert hours to minutes.\n    catchup_time_minutes = catchup_time * 60\n    \n    return int(catchup_time_minutes)\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def custom_operator(a, b):\n        return a + b - (a * b / 910)\n    \n    # Starting with the rightmost terms and going left\n    ans = custom_operator(2, 1)\n    for i in range(3, 2017):\n        ans = custom_operator(i, ans)\n        \n    return ans\n    \nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    eq1 = Eq(x + y, 80)\n    eq2 = Eq(x - y, 40)\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways = boys * girls\n    return ways\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    # since each kid gets at least one eraser, we start each kid with 1 eraser\n    for kid1 in range(1, 6 - 2 + 1):  # kid1 can receive up to 3 erasers (as we need to keep at least 2 for the others)\n        for kid2 in range(1, 6 - kid1 - 1 + 1):  # same logic for kid2 considering kid1's erasers\n            kid3 = 6 - kid1 - kid2  # whatever is left goes to kid3\n            count += 1  # this combination is valid, so we count it\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total length of the road is (41 - 1) * 4 meters\n    total_length = (41 - 1) * 4\n    # The number of pine trees is (total_length / 5) + 1\n    number_of_pine_trees = (total_length // 5) + 1\n    return number_of_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the current ages of the two men, with x < y\n    x, y = symbols('x y')\n\n    # Setting up the equations based on the given information\n    # When the older one (y) was the age of the younger one (x),\n    # the younger one was 4 years old -> y - (x - 4) = x -> y - x + 4 = x\n    equation1 = Eq(y - 2*x, 4)\n\n    # When the younger one (x) will be the age of the older one (y),\n    # he will be 61 years old -> x + (y - x) = y -> x + y - x = y + 61\n    equation2 = Eq(2*y - x, 61)\n\n    # Solving the equations to find the current ages\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The younger of the two is x\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    # Let x be the number of people needed to build the bridge in 3 hours\n    # 10 people can build the bridge in 9 hours,\n    # so 10 people work 9 hours to complete 1 bridge\n    # 1 person works 10*9 hours to complete 1 bridge\n    # x people work 3 hours to complete 1 bridge\n    # Therefore, x*3 = 10*9\n    # Solve for x\n    x = (10 * 9) / 3\n    return int(x)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    fraction_remaining_after_book = 2 / 5\n\n    # Amount spent on the bag is 2/5 of the remaining money after buying the book\n    remaining_money_after_book = bag_cost / fraction_remaining_after_book\n\n    # Total money Bud had originally is 3 times the remaining money after book because\n    # she spent 1/3 on the book, which is equal to the remaining 2/3\n    original_money = remaining_money_after_book * 3\n\n    return original_money\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    bridge_length = 298\n    vehicle_length = 6\n    interval = 20\n    speed = 4  # speed in meters per second\n    total_time = 115  # total time in seconds\n    # The total distance covered by the fleet is the speed times the total time\n    fleet_distance = total_time * speed\n    # The total length of the fleet is the fleet_distance minus the bridge length\n    fleet_length = fleet_distance - bridge_length\n    # Calculate the length of one vehicle including the interval\n    vehicle_total_length = vehicle_length + interval\n    # The number of vehicles is the fleet length divided by the length of one vehicle, including the interval\n    number_of_vehicles = fleet_length // vehicle_total_length + 1  # +1 including the first vehicle on the bridge\n    return number_of_vehicles\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    k = 4\n    sum_squares_k = (k * (k + 1) * (2 * k + 1)) // 6\n    \n    ans = sum_squares_n - sum_squares_k\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        for j in range(i + 1, 8):\n            for k in range(j + 1, 8):\n                if i + j + k == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Because Judy sits right behind Jessica\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1\n    # +1 for Jessica's desk\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    total_students = 152\n    for b in range(total_students):\n        g = total_students - b\n        if b - b / 11 == g - 5:\n            return int(b)\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    decrement = 11\n    value = initial_value\n    while value >= 0:\n        value -= decrement\n    return value\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    ans = product % 100\n    return ans\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 4, 6, 8]\n    perms = sorted(set(permutations(digits, 3)))\n    numbers = [int(\"\".join(map(str, perm))) for perm in perms if perm[0] != 0]\n\n    smallest_product = float('inf')\n    smallest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product < smallest_product:\n                smallest_product = product\n                smallest_pair = (numbers[i], numbers[j])\n    \n    return abs(smallest_pair[0] - smallest_pair[1])\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_person = total_sweets // classmates\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio_choc_toff = 12 / 7\n    toffees = chocolates / ratio_choc_toff\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in [i for i in range(1, number+1) if number % i == 0]:\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mango_cost = 56\n    mango_boxes = 24\n\n    mango_total = mango_cost * mango_boxes\n    lychee_total = total_cost - mango_total\n    lychee_boxes = 19\n    \n    lychee_cost_per_box = lychee_total / lychee_boxes\n    \n    return lychee_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    \n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n                \n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    # We need to find A, B, and C that satisfies the multiplication.\n    for A in range(0, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                # Construct the number 7A3, 6B5, and ABC.\n                number1 = 700 + 10 * A + 3\n                number2 = 600 + 10 * B + 5\n                result = 100 * A + 10 * B + C\n                \n                # Check if the multiplication holds true\n                if number1 * number2 == result * 1000 + result * 100 + result:\n                    return A + B + C\n\n    # If none of the combinations work, return an indication (such as -1)\n    return -1\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    number_of_teams = 6\n    number_of_games = comb(number_of_teams, 2)\n    return number_of_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_as_decimal = 65 / 100\n    given_decimal = 0.507\n    fraction_as_decimal = 1 / 4\n    \n    ans = percentage_as_decimal + given_decimal + fraction_as_decimal\n\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set()\n    for perm in permutations(cards, 3):\n        number = ''.join(perm)\n        if number[0] != '0':  # Exclude numbers that do not start with zero.\n            unique_numbers.add(number)\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since there is only one number that multiplied by 4 results in a number ending in 4,\n    # P has to be 1 because 1 * 4 = 4\n    P = 1\n\n    # Similarly, only multiplying by 4 gives a number with a last digit of 2, and that number is 8,\n    # So R * 4 must end with a 2, R has to be 3 because 3 * 4 = 12\n    R = 3\n\n    # For Q, since 4 * P = 4 and carries over 0 to the tens place,\n    # Q must be such that 4 * Q + 0 (the carryover) has 8 in the tens place. This can only be achieved if Q is 2\n    Q = 2\n\n    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # setting up the variables\n    # basic_shirt_price = 10\n    # personalized_shirt_price = 15\n    # total_amount_paid = 555\n    total_children = 50\n    \n    # The number of children who bought the shirt without personalization (x)\n    # The number of children who bought the personalized shirt (y)\n    # We know that: x + y = total_children (50)\n    # And: 10 * x + 15 * y = total_amount_paid (555)\n    # Let's represent x in terms of y: x = total_children - y\n    # Let's replace x in the second equation and find y.\n    \n    for y in range(total_children + 1):  # including 0 personalized shirts\n        x = total_children - y\n        if 10 * x + 15 * y == 555:\n            return y  # We only need to find the number of personalized shirts\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    jog_time = 1           # time spent jogging in hours (7:30 AM to 8:30 AM)\n    walk_time = 2          # time spent walking in hours (8:30 AM to 10:30 AM)\n    jog_speed = 5          # jogging speed in miles per hour\n    walk_speed = 3         # walking speed in miles per hour\n\n    jog_distance = jog_time * jog_speed\n    walk_distance = walk_time * walk_speed\n\n    total_distance = jog_distance + walk_distance\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # Then the five consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is x + (x+1) + (x+2) + (x+3) + (x+4) = 100\n    # Simplifying, 5x + 10 = 100\n    # Solving for x gives us 5x = 90\n    # Therefore, x = 18\n    x = (100 - 10) // 5\n    \n    return x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 44000 into its prime factors\n    factors = factorint(44000)\n    q = 1\n    \n    # Iterate over the prime factors and their powers\n    # Cube number has power multiples of 3, so we make sure each prime's power is a multiple of 3\n    for prime, power in factors.items():\n        if power % 3 != 0:  # If the power is not a multiple of 3\n            q *= prime ** (3 - (power % 3))  # We need to multiply by the prime enough times to get to a multiple of 3\n    \n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    balls_left_over = 2\n\n    bags_used = (total_balls - balls_left_over) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # If we draw 9 cards (2 from each suit), we are still not guaranteed to have 3 with the same number\n    # When we draw the 10th card, no matter the pattern, we will have 3 cards with the same number\n    # because there is a maximum of 4 patterns\n    return 10\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n    suits = {'spades': spades, 'hearts': hearts, 'diamonds': diamonds, 'clubs': clubs}\n    \n    # Stage 1: Eddie says he doesn't know the card, so it can't be a unique suit. This eliminates clubs.\n    possible_suits = {suit for suit in suits if len(suits[suit]) > 1}\n\n    # Stage 2: Avril says now she knows the card, so it must have a unique number.\n    # If the number was J or K, Avril wouldn't be sure since those are in both spades and hearts.\n    possible_numbers = {number for suit in possible_suits for number in suits[suit] \n                        if all(number not in suits[other_suit] or other_suit == suit \n                               for other_suit in possible_suits)}\n\n    # Stage 3: After Avril speaks, Eddie knows the card, so the suit must be uniquely identified by the number.\n    possible_suit_by_number = {suit for suit in possible_suits \n                               if any(number in suits[suit] and number in possible_numbers\n                                      for number in suits[suit])}\n\n    # There should be only one possible card remaining after considering all clues.\n    for suit in possible_suit_by_number:\n        for number in possible_numbers:\n            if number in suits[suit]:\n                return (number, suit)\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_distance = 800  # total length of the road in meters\n    trees = 21  # total number of trees to plant\n\n    # Number of intervals is one less than the number of trees\n    intervals = trees - 1\n\n    # Distance between two trees is the total distance divided by the number of intervals\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_trees = 9\n    total_distance_between_buildings = 90\n    distance_between_each_tree = total_distance_between_buildings / (total_trees + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    original_number = 200\n    original_digits = [int(digit) for digit in str(original_number)]\n    \n    for position in range(len(original_digits)):\n        for new_digit in range(0, 10):\n            if new_digit != original_digits[position]:\n                new_number_list = original_digits.copy()\n                new_number_list[position] = new_digit\n                # Exclude numbers with leading zero\n                if new_number_list[0] == 0:\n                    continue\n                new_number = int(''.join(map(str, new_number_list)))\n                if isprime(new_number):\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers_sum = 5 * 5  # mean multiplied by the number of values\n    known_sum = 3 + 4 + 6 + 10  # sum of the known numbers\n    fifth_number = numbers_sum - known_sum  # the remaining number to reach the sum\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    # Since Emily is directly behind Danny, their positions from the back are consecutive\n    emily_position_from_back = danny_position_from_back - 1\n    total_people_in_queue = people_in_front_of_emily + emily_position_from_back + 1  # +1 for Emily herself\n    \n    return total_people_in_queue\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Since Emma needs 12 minutes to cut a piece of wood into 4 sections, \n    # this implies there are 3 cuts involved (since the first section does \n    # not require a cut).\n    \n    # To make 5 cuts (which would result in 6 sections), Emma would \n    # perform 2 more cuts than the original 3 cuts.\n    \n    # If 3 cuts take 12 minutes, then each cut takes 4 minutes.\n    time_per_cut = 12 / 3\n    \n    # To find out the time for 5 cuts, we multiply the time per cut by 5.\n    time_for_five_cuts = time_per_cut * 5\n    \n    return time_for_five_cuts\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    given_to_sister = 38\n\n    # Correct calculation\n    andy_after_giving = andy_notebooks - given_to_sister\n\n    # Since they will have the same number after he gives her the books,\n    # Andy's remaining books will be equal to the number of his sister's books\n    sisters_notebooks = andy_after_giving\n\n    # Check Joey's approach\n    joey_calculation = andy_notebooks - (given_to_sister // 2)\n    is_joey_correct = (joey_calculation == sisters_notebooks)\n\n    return (is_joey_correct, sisters_notebooks)\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    rate_per_tap = 4  # cubic meters per minute per tap\n\n    # 5 taps for 2.5 hours\n    time_5_taps = 2.5 * 60  # convert hours to minutes\n    volume_5_taps = 5 * rate_per_tap * time_5_taps\n\n    # 8 taps for 1.5 hours\n    time_8_taps = 1.5 * 60  # convert hours to minutes\n    volume_8_taps = 8 * rate_per_tap * time_8_taps\n\n    # as the volume is constant for the reservoir we can assume volume_5_taps = volume_8_taps\n    # calculate time for 13 taps\n    time_13_taps = volume_5_taps / (13 * rate_per_tap)\n\n    return time_13_taps / 60  # convert time from minutes to hours\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count_5 = 0\n    page = 0\n    while count_5 < 30:\n        page += 1\n        count_5 += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorization of the given numbers\n    factors_10_10 = factorint(10**10)\n    factors_15_7 = factorint(15**7)\n    factors_18_11 = factorint(18**11)\n    \n    # Combine the prime factors into a single dictionary with the highest powers\n    combined_factors = {}\n    for prime, power in factors_10_10.items():\n        if prime in combined_factors:\n            combined_factors[prime] = max(combined_factors[prime], power)\n        else:\n            combined_factors[prime] = power\n            \n    for prime, power in factors_15_7.items():\n        if prime in combined_factors:\n            combined_factors[prime] = max(combined_factors[prime], power)\n        else:\n            combined_factors[prime] = power\n            \n    for prime, power in factors_18_11.items():\n        if prime in combined_factors:\n            combined_factors[prime] = max(combined_factors[prime], power)\n        else:\n            combined_factors[prime] = power\n    \n    # Calculate the number of divisors by multiplying (power+1) for all prime factors\n    num_of_n = 1\n    for power in combined_factors.values():\n        num_of_n *= (power + 1)\n    \n    return num_of_n\n\n# Call the function and save the result to 'ans'\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Original equation given to Celeste\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    # Solve the equation for x\n    age_when_entered_kindergarten = solve(equation, x)\n    \n    # Since Celeste made an error in her calculation, we return the correct answer from the equation.\n    return age_when_entered_kindergarten[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    ans = (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n\n    # total_rooms / (rooms_per_worker_per_day * workers) gives days for workers to paint the rooms\n    days = total_rooms / (rooms_per_worker_per_day * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for price of one apple (a) and price of one orange (o)\n    a, o = symbols('a o')\n\n    # set up equations based on the problem\n    equation1 = Eq(a + 2*o, 48)  # Kate's purchase\n    equation2 = Eq(a + o, 31)    # Jade's purchase\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    # return the price of one orange\n    return solutions[o]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n    \n    equation1 = Eq(pocket_money, 4 * price_per_ball + 27)\n    equation2 = Eq(pocket_money, 2 * price_per_ball + 151)\n    \n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n    \n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = (1 / pages_per_hour) * 3600\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        if digits.count(0) == 1 and digits[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money Jason, Will, and Tom have\n    jason, will, tom = symbols('jason will tom')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(jason, 3 * will)          # Jason has thrice as much money as Will\n    equation2 = Eq(tom, will - 15)           # Tom has $15 less than Will\n    equation3 = Eq(jason + will + tom, 225)  # The total amount of money they have is $225\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    \n    # Elias initially has 5 times the stickers Aileen has\n    initial_condition = Eq(elias, 5 * aileen)\n    \n    # After giving away and losing stickers, Elias and Aileen have the same amount\n    final_condition = Eq(elias - 88, aileen - 8)\n    \n    solutions = solve((initial_condition, final_condition), (elias, aileen))\n    \n    # Calculate the final number of stickers each has\n    stickers_elias = solutions[elias] - 88\n    stickers_aileen = solutions[aileen] - 8\n\n    return stickers_elias, stickers_aileen\n    \nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n\n    total_steps = steps_per_staircase * number_of_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let x be the number of trios (3 pieces for Gerald, 5 pieces for Thomas)\n    # Then Gerald eats 3x and Thomas eats 5x\n    # Together they eat 3x + 5x = 8x = 104 pieces of cheese.\n    # Solving for x gives us the number of trios.\n    total_pieces = 104\n    total_ratio = 8 # 3 pieces for Gerald + 5 pieces for Thomas\n\n    x = total_pieces / total_ratio\n    \n    # Calculate the number of pieces each one eats.\n    thomas_pieces = 5 * x\n    gerald_pieces = 3 * x\n    \n    # Calculate how many more pieces Thomas eats than Gerald.\n    difference = thomas_pieces - gerald_pieces\n\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = list(range(11, 32, 2))\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    butter_for_25_cookies = 20  # grams of butter for 25 cookies\n    butter_needed = 48  # grams of butter available\n\n    # Using the property of ratios for proportionate quantities\n    cookies_made = (butter_needed * 25) / butter_for_25_cookies\n\n    return int(cookies_made)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert numbers from base 8 to base 10, perform addition, then convert back to base 8.\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    sum_base_10 = num1 + num2\n    ans = oct(sum_base_10)[2:]\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8 / 11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults, children = symbols('boys girls adults children')\n\n    equation1 = Eq(boys, 2/7 * girls)\n    equation2 = Eq(adults, 2/3 * children)\n    equation3 = Eq(children, boys + girls)\n    equation4 = Eq(adults, boys + 1228)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (boys, girls, adults, children))\n\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n    \n    # Let x be the total number of rackets purchased at first\n    # The total initial cost = cost_price_per_racket * x\n    # The total revenue when 8 rackets are left = (selling_price_per_racket * (x - remaining_rackets)) \n    # Total revenue = Initial cost + Profit\n    # selling_price_per_racket * (x - remaining_rackets) = cost_price_per_racket * x + profit\n    # Solving for x gives us the initial number of rackets purchased\n    \n    x = symbols('x')\n    equation = Eq(selling_price_per_racket * (x - remaining_rackets), cost_price_per_racket * x + profit)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount they both had initially.\n    x = symbols('x')\n    \n    # The equation representing the money left with Chloe and Gordon\n    # Chloe spent (initial_amount - 157) and that equals 20 * number_of_days\n    # Gordon spent (initial_amount - 82) and that equals 25 * number_of_days\n    # The amount spent by both must be equal since they had the same amount and spent for equal number of days\n    equation = Eq((x - 157) / 20, (x - 82) / 25)\n\n    # Now solve for the initial amount x (Gordon's initial amount)\n    solution = solve(equation, x)\n\n    # Return the solution representing Gordon's initial amount which is equal to Chloe's initial amount\n    return solution[0]\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n*(n+1)//2 + n*(n-1)*(n-2)//6 \n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensures x2 is greater than x1\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:  # ensures x3 is the largest number and different from the others\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    target_numerator = 2020\n    target_denominator = 2020\n    position = 0\n    \n    # The fractions are constructed in a pattern: when numerator and denominator are the same,\n    # it marks the end of a block before the denominator increases.\n    # The sequence starts again with 1 / new_denominator and continues in a zigzag manner.\n    \n    # So, the position of 2020/2020 can be calculated by adding the lengths of all previous blocks.\n    for denominator in range(1, target_denominator):\n        position += 2 * denominator - 1  # Every block is of this length.\n    \n    # Finally, since 2020/2020 is the last fraction in its block, we only add 1.\n    position += 1\n    \n    return position\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons_fraction = 1/5\n    selling_price_per_melon = 1.50\n    \n    good_melons = total_melons * (1 - bad_melons_fraction)\n    revenue = good_melons * selling_price_per_melon\n    profit = revenue - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Number of oranges Rei bought and leftover\n    oranges_bought = 150\n    oranges_leftover = 17\n\n    # Number of apples Rei bought and leftover\n    apples_bought = 100\n    apples_leftover = 5\n\n    # Calculate the number of oranges and apples given to each neighbour\n    # We subtract the leftover to find the amount of fruit that was divided equally\n    oranges_divided = oranges_bought - oranges_leftover\n    apples_divided = apples_bought - apples_leftover\n\n    # Find the greatest common divisor of these two quantities to find the number of neighbours\n    num_neighbours = gcd(oranges_divided, apples_divided)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # The length of the line in cm\n    crosses_interval = 1  # The interval between crosses in cm\n\n    # Since Rob draws a cross at the beginning and end of the line, we start counting from 0.\n    # The number of crosses is the same as the number of intervals plus 1.\n    num_crosses = (line_length // crosses_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # The pattern repeats every 6 balloons (2 red, 1 green, 2 yellow, 1 green)\n    greens_per_pattern = 2  # There are 2 green balloons in each pattern\n\n    full_patterns = 75 // pattern_length  # The number of complete patterns hung up\n    remaining_balloons = 75 % pattern_length  # The number of balloons in the incomplete pattern\n\n    # Calculate the number of green balloons from the complete patterns\n    green_balloons = full_patterns * greens_per_pattern\n\n    # Add the green balloons from the incomplete pattern if any\n    # The green balloons are the 3rd and 6th in the pattern,\n    # so we only add one if there are at least 3 remaining balloons,\n    # and another if there are all 6.\n    if remaining_balloons >= 3:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sandra's and Jessica's initial number of marbles\n    sandra, jessica = symbols('sandra jessica')\n\n    # Equation representing the transaction where Sandra gives Jessica 13 marbles\n    equation1 = Eq(sandra - 13, jessica + 13)\n\n    # Equation representing the fact that after giving Jessica 13 marbles, Sandra has 6 fewer marbles than Jessica\n    equation2 = Eq(sandra - 13, jessica + 13 - 6)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sandra, jessica))\n\n    # Calculating how many more marbles Sandra had than Jessica initially\n    ans = solutions[sandra] - solutions[jessica]\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    num = 2018\n    factors = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    numbers = [112, 106, 132, 118, 107, 102, 189, 153, 142, 134, 116, 254, 168,\n               119, 126, 445, 135, 129, 113, 251, 342, 901, 710, 535]\n    numbers.sort()\n    return numbers[11]  # 0-based indexing for the 12th number\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize counters for digits 1 and 2\n    one_count = 0\n    two_count = 0\n    # Initialize the number to start counting from\n    N = 0\n    \n    # Increment N until both digit counts are reached\n    while not (one_count == 15 and two_count == 14):\n        N += 1\n        # Convert the current number into a string to count digits\n        str_N = str(N)\n        # Count the occurrences of digits '1' and '2'\n        one_count += str_N.count('1')\n        two_count += str_N.count('2')\n\n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let x be the initial number of candies Kate bought.\n    # After eating 1/3 at home, she's left with 2/3.\n    # She then shared the candy with seven friends and is left with 22 pieces.\n    # 26 pieces for each of the 7 friends is 26 * 7.\n    # Add the 22 pieces she's left with to the amount shared gives the total amount left after eating 1/3.\n    \n    total_shared_and_left = (26 * 7) + 22\n    \n    # To find the initial number of candies (x), we divide that by 2/3.\n    initial_candies = total_shared_and_left / (2/3)\n    \n    return int(initial_candies)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Andy's position is 9 when Bob's is 5\n    # Andy's position is 25 when Bob's is x\n    # The ratio of Andy's to Bob's position is constant\n    ratio = 9 / 5\n    bob_at_top = 25 / ratio\n    return int(bob_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of words James types per minute\n    # Let y be the total number of words\n    x, y = symbols('x y')\n\n    # Original speed, finish in 3 minutes\n    equation1 = Eq(x * 3, y)\n\n    # Increased speed, finish in 2 minutes (3 - 1)\n    equation2 = Eq((x + 30) * 2, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Initial state of lights, all off denoted by 0\n    lights = [0] * 10\n    \n    # Ms. Lily presses every other switch starting from 1 (0 index)\n    for i in range(0, 10, 2):\n        lights[i] = 1 - lights[i]  # Toggle the light\n    \n    # Sam presses each even-numbered light switch 7 times\n    for i in range(1, 10, 2):\n        lights[i] = (lights[i] + 7) % 2  # Toggle 7 times which leads to the original state\n    \n    # Count the lights that are on, indicated by 1\n    ans = sum(lights)\n    \n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the amounts of water in pails A and B\n    A, B = symbols('A B')\n\n    # Initial proportion of water volumes in pails A and B\n    equation1 = Eq(A, (2/3) * B)\n\n    # Situation after pouring 4 litres from B to A\n    equation2 = Eq(A + 4, (7/8) * (B - 4))\n\n    # Solve the system of equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate the total amount of water\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    distance_per_day = 3\n    slip_per_night = 2\n    effective_distance_per_day = distance_per_day - slip_per_night\n    \n    day = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slip_per_night\n        \n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 6  # %\n    desired_sugar_percentage = 10  # %\n    \n    # Calculate the initial amount of sugar\n    initial_sugar_amount = initial_volume * (initial_sugar_percentage / 100)\n    \n    # Let x be the amount of sugar (in ml) to be added.\n    # The new volume will be initial_volume + x\n    # The new sugar amount will be initial_sugar_amount + x\n    # We want the new sugar amount / new volume to be equal to the desired sugar percentage.\n    \n    # Set up the equation:\n    # (initial_sugar_amount + x) / (initial_volume + x) = desired_sugar_percentage / 100\n    \n    # Solve for x:\n    # x = (desired_sugar_percentage * initial_volume / 100 - initial_sugar_amount) / (1 - desired_sugar_percentage / 100)\n    x = ((desired_sugar_percentage * initial_volume / 100) - initial_sugar_amount) / (1 - desired_sugar_percentage / 100)\n\n    return x\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    # From given examples, we can see that the pattern is as follows:\n    # For 12=3, 2+1=3\n    # For 23=9, 3+2+4=9\n    # For 54=26, 8+7+6+5=26\n    # The sums are terms in reverse starting from the second digit going up.\n    # So for a15=165, we need to find 'a' such that 5+4+3+2+1+a = 165\n    \n    # First let's find the sum of 5+4+3+2+1\n    sum_fixed_part = sum(range(1, 6)) # This is 15\n    \n    # Now let's find the value of 'a' that satisfies the equation a + sum_fixed_part = 165\n    a = 165 - sum_fixed_part\n    return a\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_passed = 2\n    total_parts_needed = 100\n\n    rate_per_hour = parts_made / hours_passed\n    remaining_parts = total_parts_needed - parts_made\n    remaining_hours = remaining_parts / rate_per_hour\n\n    return remaining_hours\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # You might draw all 5 balls of one color first (worst case for one color)\n    # Then you might draw all 5 balls of another color (worst case for two color)\n    # Then, the next ball you draw must be of the third color\n    # So you need 5 (first color) + 5 (second color) + 1 (third color) balls to ensure 3 different colors\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each grade's number of books\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n    \n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 2 balls of the same color (5 colors)\n    same_color_pairs = 5\n    # Number of ways to choose 2 balls of different colors (combination of 5 taken 2 at a time)\n    diff_color_pairs = comb(5, 2)\n    # Total unique pairs of balls a student can have\n    total_unique_pairs = same_color_pairs + diff_color_pairs\n    # By the Pigeonhole Principle, to guarantee at least 2 people have the same kind of balls\n    # we need total_unique_pairs + 1 students\n    return total_unique_pairs + 1\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Since the product of two numbers is divisible by 4 if at least one of them is even,\n    # and we want to ensure two numbers whose product is divisible by 4,\n    # we need to consider the worst-case scenario in which we pick the maximum number of odd numbers before we get an even number.\n    \n    # The integers from 10 to 41 include 16 even numbers (divisible by 2) and 16 odd numbers.\n    # In the worst case, we could draw all odd numbers first before getting an even number.\n    # So, we need to draw all 16 odd numbers + 1 more number (which will be even) to ensure the product is divisible by 4.\n    \n    ans = 16 + 1\n\n    return ans\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let 'h' be the number of cards Hisham had.\n    # Then the number of cards Melissa had is '2h', since she had twice as many.\n    # We are told that Melissa and Hisham together had 876 cards:\n    # h + 2h = 876\n    # We solve for 'h' to find out how many cards Hisham had.\n    h = total_cards / 3\n    \n    # The number of cards Melissa should give to Hisham is the difference\n    # between what Melissa had and what Hisham had after she gives him enough\n    # cards to match her count:\n    # After giving 'g' cards to Hisham, Melissa would have 2h - g cards,\n    # and Hisham would have h + g cards. We want to find 'g' such that:\n    # 2h - g = h + g\n    # Simplifying that, we get:\n    # g = (2h - h) / 2\n    g = (2 * h - h) / 2\n    \n    # Now we just return the result as the number of cards Melissa should give to Hisham.\n    return int(g)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n\n    common_difference = (third_term - first_term) // 2\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert the length from meters to centimeters\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    xiao_ming_age = symbols('x')\n    father_current_age = 3 * xiao_ming_age + 4\n    father_future_age = 2 * (xiao_ming_age + 6) + 10\n    age_equation = Eq(father_current_age + 6, father_future_age)\n    xiao_ming_current_age = solve(age_equation, xiao_ming_age)[0]\n    return xiao_ming_current_age\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt\n    \n    # Find smallest two-digit prime number\n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n\n    # Find largest two-digit square number\n    largest_two_digit_square_root = int(sqrt(99))\n    largest_two_digit_square = largest_two_digit_square_root ** 2\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    # Return the result\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Age difference between Brian and his father\n    age_difference = 41 - 14\n    \n    # Iterate over the possible ages for Brian and his father to find the next reverse age scenario\n    for future_age in range(15, 100):\n        father_future_age = future_age + age_difference\n        \n        # Check if the father's future age is a reverse of Brian's future age\n        if str(father_future_age)[::-1] == str(future_age):\n            return future_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd_rate = 1 / 0.96\n    coffee_price_euros = 4.8\n    coffee_price_usd = coffee_price_euros * euro_to_usd_rate\n    return coffee_price_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "import itertools\n\ndef solution():\n    max_N = None\n    for p in itertools.permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b / c + (d / e) * f - (g + h / j)\n        if N.is_integer():\n            if max_N is None or N > max_N:\n                max_N = N\n    return int(max_N)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20):\n            for C in range(1, 20):\n                if A + B + C == 19:\n                    max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_books_initial = (ratio_chinese / total_ratio) * total_books_initial\n    malay_books_initial = (ratio_malay / total_ratio) * total_books_initial\n    english_books_initial = (ratio_english / total_ratio) * total_books_initial\n\n    total_books_new = total_books_initial + 510\n    chinese_books_new = chinese_books_initial * 1.20\n    malay_books_new = malay_books_initial * 1.10\n\n    english_books_new = total_books_new - (chinese_books_new + malay_books_new)\n    increase_english_books = english_books_new - english_books_initial\n    percentage_increase_english = (increase_english_books / english_books_initial) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    cakes = 1\n    while True:\n        if cakes % 12 == 0 and cakes % 56 == 0:\n            return cakes\n        cakes += 1\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Number of juniors and seniors\n    num_juniors = 12\n    num_seniors = 8\n    total_participants = num_juniors + num_seniors\n    \n    # Average scores\n    avg_juniors = 10\n    avg_total = 14\n    \n    # Total score for juniors and all participants\n    total_score_juniors = avg_juniors * num_juniors\n    total_score_all = avg_total * total_participants\n    \n    # Total score for seniors\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    # Average score for seniors\n    avg_seniors = total_score_seniors / num_seniors\n    \n    return avg_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years old.\n    combined_age_4_years_ago = 10\n    # Each year, both dogs age by 1 year each, so in 4 years, their combined age increases by 4 * 2 years.\n    increased_age_4_years = 4 * 2\n    # Calculate their combined age now.\n    combined_age_now = combined_age_4_years_ago + increased_age_4_years\n    # In 2 years, their combined age further increases by 2 * 2 years.\n    increased_age_2_years = 2 * 2\n    # Calculate their combined age in 2 years.\n    combined_age_in_2_years = combined_age_now + increased_age_2_years\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    correct_points = 4\n    incorrect_points = -2\n    score = 66\n\n    # Rex did not attempt one question, so he answered 24 questions\n    for correct in range(25):\n        incorrect = 24 - correct\n        if correct * correct_points + incorrect * incorrect_points == score:\n            return correct\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answer_marks = 5\n    wrong_answer_marks = -2\n    unanswered_marks = 1\n\n    # Calculate the number of questions answered, which is 60% of the total\n    answered_questions = int(0.6 * total_questions)\n    # The remaining questions are unanswered\n    unanswered_questions = total_questions - answered_questions\n\n    # Use a loop to find the number of correctly answered questions\n    for correct_questions in range(answered_questions + 1):\n        # The number of incorrect questions is the rest of the answered questions\n        incorrect_questions = answered_questions - correct_questions\n        # Calculate the score\n        score = (correct_questions * correct_answer_marks +\n                 incorrect_questions * wrong_answer_marks +\n                 unanswered_questions * unanswered_marks)\n        # If the score matches the total score, return the number of correct questions\n        if score == 264:\n            return correct_questions\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # Since every container must have at least 1 apple to ensure no container is left empty,\n    # and there must be at least one container with a minimum of 2 apples,\n    # we distribute 1 apple each to 9 containers and then give the 10th container 2 apples.\n    least_apples = (containers - 1) * 1 + 2\n    return least_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = int('1058')\n    denominator = int('92')\n    \n    ans = numerator / (denominator * 10)\n    \n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n    \n    # Using the ratio butter_used/cookies_made = desired_butter/desired_cookies\n    desired_butter = (butter_used / cookies_made) * desired_cookies\n\n    return desired_butter\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Dedra's and Timm's initial amounts of money\n    dedra_initial, timm_initial = symbols('dedra_initial timm_initial')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra_initial, 4 * timm_initial)\n    \n    # Both received $72 each\n    dedra_after = dedra_initial + 72\n    timm_after = timm_initial + 72\n    \n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra_after, 2 * timm_after)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra_initial, timm_initial))\n\n    return solutions[dedra_initial]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    count = 0\n    num_digits = 0\n    while num_digits < 1000:\n        count += 1\n        num_digits += len(str(count))\n    return int(str(count)[-1])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n\n    equation = Eq(3 * square - 2, 19)\n\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    only_A = 62 - 48 - 36 + 25  # A not C not E + A not C E + A C not E - A C E\n    only_C = 90 - 48 - 50 + 25  # C not A not E + C not A E + A C not E - A C E\n    only_E = 68 - 36 - 50 + 25  # E not A not C + E not A C + A not C E - A C E\n    only_AC = 48 - 25            # A C not E\n    only_AE = 36 - 25            # A not C E\n    only_CE = 50 - 25            # not A C E\n    all_three = 25\n    \n    total_types_of_fruit = only_A + only_C + only_E + only_AC + only_AE + only_CE + all_three\n    \n    return total_types_of_fruit\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    in_front_of_louis = total_people - behind_louis - 1 # Subtracting 1 for Louis himself\n    return in_front_of_louis\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated in a row\n\n    # Calculate number of ways using permutation formula: P(n, r) = n! / (n - r)!\n    num_ways = factorial(n) / factorial(n - r)\n\n    return int(num_ways)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    total_distance = 20\n    uphill_speed = 2.5\n    distances_ratio = [1, 2, 3]\n    times_ratio = [4, 5, 6]\n    \n    total_ratio_distance = sum(distances_ratio)\n    total_ratio_time = sum(times_ratio)\n    \n    uphill_distance = (distances_ratio[0] / total_ratio_distance) * total_distance\n    uphill_time = (times_ratio[0] / total_ratio_time) * (uphill_distance / uphill_speed)\n    \n    flat_speed = (distances_ratio[1] / times_ratio[1]) * uphill_speed\n    downhill_speed = (distances_ratio[2] / times_ratio[2]) * uphill_speed\n    \n    flat_time = (times_ratio[1] / total_ratio_time) * (uphill_distance / flat_speed)\n    downhill_time = (times_ratio[2] / total_ratio_time) * (uphill_distance / downhill_speed)\n    \n    total_time = uphill_time + flat_time + downhill_time\n    return total_time\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let the number of friends be x\n    # Then the number of erasers Andy has is 5x + 3\n    # It's also (6x - 2) because he would be short of 2 erasers if he gave 6 to each friend\n    # Set up the equation: 5x + 3 = 6x - 2\n    # Solve for x\n    x = 5 \n\n    # Calculate the number of erasers Andy had by substituting back into either equation\n    erasers = 5 * x + 3\n    \n    return erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jake and John's current ages\n    jake, john = symbols('jake john')\n    \n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n    \n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables for rates of pipe A, B, C\n    # Let rate_A, rate_B, rate_C be the filling rates of pipes A, B, and C respectively\n    rate_A, rate_B, rate_C = symbols('rate_A rate_B rate_C')\n\n    # The first equation represents the time taken by A and B to fill the pool\n    # 1/rate_A + 1/rate_B = 1/5\n    equation1 = Eq(1/rate_A + 1/rate_B, 1/5)\n\n    # The second equation represents the time taken by B and C to fill the pool\n    # 1/rate_B + 1/rate_C = 1/4\n    equation2 = Eq(1/rate_B + 1/rate_C, 1/4)\n\n    # The third equation represents the time taken when opening B for 6 hours and then A and C for 2 additional hours\n    # 6 * rate_B + 2 * (rate_A + rate_C) = 1\n    equation3 = Eq(6 * rate_B + 2 * (rate_A + rate_C), 1)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (rate_A, rate_B, rate_C))\n\n    # Pipe B's rate is what we want\n    rate_B_solution = solutions[rate_B]\n\n    # Calculate the time taken for pipe B to fill the pool on its own\n    # Time = 1 / Pipe's rate\n    time_for_B = 1 / rate_B_solution\n\n    return time_for_B\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from sympy import *\n\ndef solution():\n    # Define expression and symbols\n    expr = '15+5*5+15-6+7'\n    symbols = symbols('expr')\n\n    # List all possible pairs of positions to put brackets\n    bracket_positions = [\n        '((15+5)*5)+(15-(6+7))',\n        '((15+5)*5+15)-(6+7)',\n        '(15+5)*(5+(15-6))+7',\n        '15+(5*(5+(15-6))+7)',\n        '15+((5*5)+15)-(6+7)',\n        '(15+(5*5))+(15-(6+7))',\n        '15+(5*(5+15)-(6+7))',\n        '15+5*((5+15)-(6+7))'\n    ]\n\n    # Initialize minimum result with infinity\n    min_result = float('inf')\n\n    # Check all bracket combinations and calculate the result\n    for expr in bracket_positions:\n        result = eval(expr)\n        if result < min_result:\n            min_result = result\n\n    return min_result\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    sum_terms = 0\n    for n in range(1, 2008):\n        sum_terms += ((n ** 2) + ((n + 1) ** 2)) / (n * (n + 1))\n    \n    ans = round(sum_terms)\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Since only the ones place is changed, the difference made by other digits is 0.\n    # The original number can be considered as ABC0 and the new number is 0BCA.\n    # The difference of 5877 can be written as:\n    # (0BCA + 10000) - ABC0 = 5877\n    # BCA0 + 10000 - ABC0 = 5877\n    # BCA0 - ABC0 = -4123\n    # (BCA - ABC) * 10 = -4123\n    # As it's a 4-digit number ABC can range from 100 to 999.\n    # We need to find the smallest such ABC.\n    for abc in range(100, 1000):\n        new_num = (abc % 10) * 1000 + abc  # Rearrange digits to form the new number.\n        if new_num - abc * 10 == 5877:\n            # The smallest original number is ABC*10\n            return abc * 10\n    return None\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "from math import gcd\n\ndef solution():\n    beads = 1800\n    ways = 0\n    for i in range(2, beads):\n        if beads % i == 0 and gcd(i, beads // i) == 1:\n            ways += 1\n    return ways // 2  # Each pairing is counted twice, so divide by 2\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n\n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + 75 * 0.01 * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # The average of the five pupils' scores\n    avg_five_pupils = 72\n\n    # Total score of five pupils\n    total_score_five_pupils = avg_five_pupils * 5\n\n    # New average with Mary's score included\n    new_avg = 75\n\n    # Total score of six pupils with Mary\n    total_score_six_pupils = new_avg * 6\n\n    # Mary's score is the total score of six pupils minus the total score of five pupils\n    marys_score = total_score_six_pupils - total_score_five_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    # The entire train needs to cross the bridge, so we add the lengths of both the train and the bridge.\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    morning_cookies = 200 * (1/5)\n    remainder_after_morning = 200 - morning_cookies\n    afternoon_cookies = remainder_after_morning * (3/4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for num in range(999, 100, -9):  # Starting from the greatest 3-digit number, stepping down by 9 (since it's divisible by 9)\n        if num % 2 != 0:  # Check if the number is odd\n            tens_digit = (num // 10) % 10  # Extract the tens digit\n            if tens_digit % 4 == 0:  # Check if the tens digit is divisible by 4\n                return num  # Return the greatest number satisfying the conditions\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import comb\n    \n    # Since each student gets at least one doughnut, we distribute one doughnut to each student first.\n    # This leaves us with 11 - 4 = 7 doughnuts to distribute freely among the 4 students.\n    remaining_doughnuts = 11 - 4\n    \n    # This is a problem of distributing n identical items to r distinct boxes, which is equivalent to\n    # the problem of placing r-1 dividers among n indistinct positions. Therefore, the number of ways\n    # we can do this is given by \"n+r-1 choose r-1\".\n    ans = comb(remaining_doughnuts + 4 - 1, 4 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48\n    walking_speed_per_minute = 8\n\n    minutes_needed = distance_to_market / walking_speed_per_minute\n\n    return int(minutes_needed)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The worst case scenario is that Jane draws all but one color before she gets the fourth color\n    # Hence we calculate the sum of the greatest number of marbles for three colors and add 1 to guarantee the fourth color.\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # Get the maximum number of marbles for three colors.\n    three_colors_max = green + blue + red  # Because these are the three colors with the most marbles\n    \n    # Add 1 to guarantee the fourth color\n    answer = three_colors_max + 1\n    \n    return answer\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # 5 pound note is 500 pence\n    five_pound_note_in_pence = 500\n\n    # Since each coin is a multiple of 5 and is different, we have:\n    # 5, 10, 20, 50, 100, and 200 pence as possible coin values\n\n    # Calculate the total value of the five different coins\n    total_value_of_coins = 5 + 10 + 20 + 50 + 100 + 200\n\n    # Calculate the amount spent by subtracting the total value of coins\n    # from the total amount she had in the 5 pound note\n    amount_spent = five_pound_note_in_pence - total_value_of_coins\n\n    return amount_spent\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_notes = 38\n    spent_10_notes_percent = 0.80\n    spent_2_notes_percent = 0.75\n\n    num_10_notes, num_2_notes = symbols('num_10_notes num_2_notes', integer=True)\n\n    # Equations based on the problem statement\n    equation1 = Eq(num_10_notes + num_2_notes, total_notes)\n    equation2 = Eq(num_10_notes - spent_10_notes_percent * num_10_notes, 3 * (num_2_notes - spent_2_notes_percent * num_2_notes))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (num_10_notes, num_2_notes))\n\n    # The amount spent on the fan (cost of the fan)\n    cost = spent_10_notes_percent * solutions[num_10_notes] * 10 + spent_2_notes_percent * solutions[num_2_notes] * 2\n\n    return cost\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_honey = 50\n    target_honey = 90\n\n    # Calculate production per hive\n    production_per_hive = current_honey / current_hives\n\n    # Calculate how many hives are needed to produce 90kg\n    required_hives = target_honey / production_per_hive\n\n    # Calculate how many more hives are needed\n    additional_hives = required_hives - current_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the original number of country erasers Ali and Kumar have, respectively.\n    ali, kumar = symbols('ali kumar')\n\n    # Original ratio: Ali:Kumar = 7:5\n    equation1 = Eq(ali/kumar, 7/5)\n\n    # After giving 10 erasers, Ali:Kumar = 1:5\n    equation2 = Eq((ali-10)/(kumar+10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n\n    # Total number of erasers Ali and Kumar have\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    # Final horizontal distance from A to B: 15 km east - 9 km west = 6 km east\n    horizontal_distance = 15 - 9\n    # Final vertical distance from A to B: 3 km north + 5 km north = 8 km north\n    vertical_distance = 3 + 5\n    # Shortest distance from A to B: the hypotenuse of the right-angled triangle\n    shortest_distance = sqrt(horizontal_distance**2 + vertical_distance**2)\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase gives us the first equation\n    equation1 = Eq(banana + 3 * pear, 84)\n    # Emily's purchase gives us the second equation\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = 8 * 60 + 20  # Convert 8 hours and 20 minutes to minutes\n    activity_and_break_time = 45 + 20  # Sum of each activity and the subsequent break in minutes\n    \n    # Since last activity does not need a break time after it, we subtract one break time\n    num_activities = (total_time_minutes + 20) // activity_and_break_time\n\n    return num_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Using the information that Adam and Ben together weigh 102 kg and\n    # Ben and Carl weigh 97 kg, we can set up the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n    # Adding all three equations gives us:\n    # 2(A + B + C) = 102 + 97 + 92\n    # A + B + C = (102 + 97 + 92) / 2\n    # This is the total weight of Adam, Ben, and Carl.\n    \n    total_weight = (102 + 97 + 92) / 2\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    valid_combinations = [\n        ''.join(p) for p in permutations(cards) if p[0] in ['5', '8']\n    ]\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b_days = symbols('b_days')  # The number of days B takes to finish the work\n    a_days = b_days - 5         # A takes 5 days less than B to finish the work\n\n    # A's efficiency is twice B's, so A takes half the time that B takes\n    # Therefore, (B's work done in 1 day) * (number of days B takes) = (A's work done in 1 day) * (number of days A takes)\n    # (1 / b_days) * b_days = 2 * (1 / a_days) * a_days\n    # Simplifies to b_days = 2 * a_days\n    # b_days = 2 * (b_days - 5)\n    # b_days = 2 * b_days - 10\n    # b_days - 2 * b_days = -10\n    # -b_days = -10\n    # b_days = 10\n\n    # Now we can solve for b_days\n    equation = Eq(b_days, 2 * (b_days - 5))\n    days_b = solve(equation, b_days)\n\n    return days_b[0]  # The number of days B takes to finish the work by himself\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digit_sum_even = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 == 0)\n    digit_sum_odd = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 != 0)\n    remainder = abs(digit_sum_even - digit_sum_odd) % 11\n    is_divisible = (remainder == 0)\n    correct_remainder = remainder if not is_divisible else 0\n    return correct_remainder, is_divisible\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    remaining_length_m = 0.78  # remaining length in meters after converting from cm to m\n    melted_length_m = initial_length_m - remaining_length_m  # calculate the melted length\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    hour = 16\n    minute = 16\n    \n    # Calculate the angles moved by hour and minute hands with respect to 12:00\n    hour_angle = 0.5 * (hour % 12 * 60 + minute)\n    minute_angle = 6 * minute\n    \n    # Find the difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n    \n    # The angle between the hour and minute hands might be the smaller of the two possible angles\n    angle = min(angle, 360 - angle)\n    \n    return angle\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # base cases: ways to climb 1 step (1 way) and 4 steps (1 way)\n    ways = {0: 1, 1: 1, 2: 1, 3: 1, 4: 1}\n    \n    # use inductive recursion to fill in the rest of the ways\n    for i in range(5, 10):\n        ways[i] = ways[i - 1] + ways[i - 4]\n    \n    return ways[9]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "from math import gcd\n\ndef solution():\n    return gcd(3731, 9646)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # The series is 0.5, 1, 1.5, 2, ..., 10 with a step of 0.5\n    n = int((10 - 0.5) / 0.5) + 1  # Calculate the number of terms\n    \n    # Calculate the sum of the series 1+2+3+...+n using the formula n*(n+1)/2\n    # In this case, the terms are not integers, but the same approach can be adapted\n    sum_terms = sum([0.5 * x for x in range(1, n+1)])  # Generates series 0.5, 1, 1.5, ..., 10\n    \n    # Calculate the cube of the sum of the series\n    ans = sum_terms ** 2\n    \n    return round(ans, 2)  # Result rounded to 2 decimal places for precision\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    rounding_increment = 5\n    # Since the estimate is to the nearest £5, the least amount his shopping bill could be\n    # is £2.5 less than the estimated amount (since that's half of the rounding increment).\n    least_amount = estimated_price - (rounding_increment / 2)\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n    years_until_future_sum = future_sum - current_sum\n\n    return years_until_future_sum\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between = 5\n    rabbit_position_from_left = elephant_position_from_left - toys_between - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nancy_time = 6\n    combined_time = 4\n    tim = symbols('tim')\n\n    nancy_work_per_day = 1 / nancy_time\n    tim_work_per_day = 1 / tim\n    combined_work_per_day = 1 / combined_time\n\n    equation = Eq(nancy_work_per_day + tim_work_per_day, combined_work_per_day)\n\n    tim_day = solve(equation, tim)\n\n    return tim_day[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if pencils % 2 == 1 and pencils % 3 == 2 and pencils % 4 == 3 and pencils % 5 == 4:\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert 172 kg to g\n    total_mass = 172 * 1000\n    \n    # Calculate the total parts of the ingredients\n    total_parts = 7 + 3 + 2\n    \n    # Calculate mass per part\n    mass_per_part = total_mass / total_parts\n    \n    # Calculate the number of packets for each ingredient\n    packets_P = (mass_per_part * 7) / 300\n    packets_Q = (mass_per_part * 3) / 400\n    packets_R = (mass_per_part * 2) / 500\n    \n    # Sum the packets of all ingredients\n    total_packets = packets_P + packets_Q + packets_R\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_of_numbers = 12\n\n    total_sum_with_a = mean_of_numbers * (len(numbers) + 1)\n    total_sum_without_a = sum(numbers)\n\n    a = total_sum_with_a - total_sum_without_a\n\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from sympy import lcm\n\ndef solution():\n    # Convert times to seconds for easier calculations\n    first_light_time = 60  # 1 minute\n    second_light_time = 90  # 1.5 minutes\n    \n    # Find the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light_time, second_light_time)\n    \n    # The combined cycle time for the two lights is 9 minutes\n    combined_cycle_time = 9 * 60\n    \n    # The third light must have a cycle time that is a factor of the combined cycle time\n    # It must also be at least 30 seconds\n    third_light_time = 30\n    while third_light_time < combined_cycle_time:\n        if combined_cycle_time % third_light_time == 0:\n            # Found the shortest possible time for third light which is a factor of combined cycle time\n            return third_light_time\n        third_light_time += 30  # Increment by 30 seconds to check the next possible cycle time\n\n    # If no such time is found, return None\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, meters in this case.\n    pink_ribbon = 2.5  # in meters\n    blue_ribbon = 220 / 100  # converting centimeters to meters\n    orange_ribbon = 30.5 / 100  # converting centimeters to meters\n    \n    # Compare the lengths to find the longest ribbon\n    longest_length = max(pink_ribbon, blue_ribbon, orange_ribbon)\n    \n    # Check which ribbon corresponds to the longest length\n    if longest_length == pink_ribbon:\n        return 'pink'\n    elif longest_length == blue_ribbon:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparation_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% off\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_red_capacity = 3 * 10\n    total_blue_capacity = 12 * 15\n    total_green_capacity = 15 * 20\n    \n    total_capacity = total_red_capacity + total_blue_capacity + total_green_capacity\n    total_cars = 3 + 12 + 15\n    \n    average_capacity = total_capacity / total_cars\n    \n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # Rachel's speed in km/h\n    eleanor_duration_to_G = 1.5  # Time taken by Eleanor after crossing Rachel to reach G\n    distance_rachel_to_F = 39  # Distance Rachel is away from F after 1.5 hours\n    eleanor_total_time = 4  # Time taken by Eleanor from F to G\n\n    # Rachel's distance travelled in 1.5 hours\n    rachel_distance_travelled = rachel_speed * eleanor_duration_to_G\n\n    # Eleanor's speed\n    eleanor_speed = rachel_distance_travelled + distance_rachel_to_F  # Distance travelled by Eleanor in 1.5 hours\n    eleanor_speed /= eleanor_duration_to_G  # Convert distance to speed\n\n    # Total distance between City F and City G\n    total_distance = eleanor_speed * eleanor_total_time\n\n    return total_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 4 + 44 + 444\n    is_george_correct = result == 3702\n    return (is_george_correct, result)\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    number_of_boys = 5\n    percent_boys = (number_of_boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n    \nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # Given that the book is on the 8th shelf from the front\n    # and the 10th shelf from the back,\n    # the total number of shelves can be calculated as follows:\n    total_shelves = 8 + 10 - 1  # Subtract 1 because the 8th shelf from the front is also the 10th from the back\n\n    return total_shelves\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for each rope length in cm\n    a, b, c = symbols('a b c')\n\n    # Equations\n    equation1 = Eq(a, 3 * b)\n    equation2 = Eq(c, b + 56)\n    equation3 = Eq(a, c + 130)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Calculate the total length\n    total_length = solutions[a] + solutions[b] + solutions[c]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\n    result = (2 * largest_number) - (3 * smallest_number)\n\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equations = [\n        Eq(x + y, x - y),\n        Eq(x + y, x * y),\n        Eq(x + y, x / y),\n        Eq(x - y, x * y),\n        Eq(x - y, x / y),\n        Eq(x * y, x / y)\n    ]\n    \n    solutions = []\n    \n    for eq in equations:\n        sol = solve(eq, (x, y))\n        if isinstance(sol, list):  # Check if there are multiple solutions\n            solutions.extend(sol)\n        elif sol:  # Only add if it's not an empty solution\n            solutions.append(sol)\n    \n    # Filter out the unique solutions. \n    # Since the question implies pairs, (x, y) and (y, x) are considered the same. \n    # Thus, sort each tuple to account for symmetry.\n    unique_solutions = set(tuple(sorted(s)) for s in solutions if s[x] != s[y]) # x should not be equal to y\n    return len(unique_solutions)\n    \nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    all_possible_combinations = list(combinations('ABCDE', 3))\n    combinations_with_AB = [comb for comb in all_possible_combinations if 'A' in comb and 'B' in comb]\n\n    total_combinations = len(all_possible_combinations)\n    valid_combinations = len(combinations_with_AB)\n\n    probability = valid_combinations / total_combinations\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_males = male_members * (16 / 100)\n    student_females = female_members * (10 / 100)\n    total_students = student_males + student_females\n    total_members = male_members + female_members\n    student_percentage = (total_students / total_members) * 100\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume_1 = 200  # litres\n    concentration_1 = 35  # percentage\n\n    volume_2 = 300  # litres\n    concentration_2 = 50  # percentage\n\n    total_volume = volume_1 + volume_2\n    total_juice = (volume_1 * concentration_1/100) + (volume_2 * concentration_2/100)\n\n    concentration_new = (total_juice / total_volume) * 100\n\n    return concentration_new\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratios\n    ratio1 = (3, 4)\n    ratio2 = (x, 48)\n\n    # Cross-multiplication to find the equivalent value of x\n    x = ratio1[0] * ratio2[1] / ratio1[1]\n\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_start = 37\n    john_start = 15\n    amy_final = john_final + 4\n    \n    # amy_final + john_final = amy_start + john_start - apples_given\n    # apples_given = amy_start + john_start - (amy_final + john_final)\n    # Substitute amy_final with john_final + 4\n    # apples_given = amy_start + john_start - (john_final + 4 + john_final)\n    \n    # Since amy_final is 4 more than john_final\n    # amy_start - apples_given = john_start + apples_given + 4\n    # apples_given = (amy_start - john_start - 4) / 2\n    apples_given = (amy_start - john_start - 4) / 2\n    \n    return int(apples_given)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the total number of papers and r be the rate of marking papers per hour\n    p, r = symbols('p r')\n\n    # Original plan: finish p papers in 5 hours, so the rate is p/5 papers per hour\n    # After working for 1 hour at the original rate r, she has 4 hours left\n    # According to the new plan, she needs to mark r+6 papers per hour to finish in the remaining 4 hours\n    # This gives us the first equation: 1*r + 4*(r+6) = p\n\n    # If she marks at a rate of r+10 papers per hour, she can finish 1 hour earlier (4 hours total)\n    # This gives us the second equation: 4*(r+10) = p\n\n    # Now we have a system of two equations\n    equation1 = Eq(1*r + 4*(r+6), p)\n    equation2 = Eq(4*(r+10), p)\n\n    # Solve the system for p and r\n    solutions = solve((equation1, equation2), (p, r))\n\n    # Return the number of papers to be marked, which is the solution for p\n    return solutions[p]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    # First term a1, common difference d, and last term an are known.\n    a1 = 1\n    d = 2\n    an = 159\n    \n    # Number of terms n can be computed using the formula for arithmetic sequences.\n    n = ((an - a1) / d) + 1\n    \n    # Sum of an arithmetic sequence can be computed using the formula S = n/2 * (a1 + an).\n    S = n / 2 * (a1 + an)\n    \n    return int(S)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Total number of pies.\n    total_pies = 40 + 20 + 30\n\n    # (1) Calculate the fraction of the chicken pies more than vegetable pies\n    chicken_more_than_vegetable = (40 - 20) / 40\n\n    # (2) Calculate the fraction of vegetable pies less than fruit pies\n    vegetable_less_than_fruit = (30 - 20) / 20\n\n    # Return the answer as a tuple of two fractions.\n    # Fraction part 1\n    ans1 = chicken_more_than_vegetable\n    # Fraction part 2\n    ans2 = vegetable_less_than_fruit\n\n    return ans1, ans2\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_bought = 32\n    markers_given_away = 7\n    bag_capacity = 5\n\n    markers_left = markers_bought - markers_given_away\n\n    num_bags = markers_left // bag_capacity\n\n    return num_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a jug and a cup\n    cost_jug, cost_cup = symbols('cost_jug cost_cup')\n    \n    # Create two equations based on the given information\n    equation1 = Eq(4 * cost_jug + 5 * cost_cup, 85)\n    equation2 = Eq(2 * cost_jug + 2 * cost_cup, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_jug, cost_cup))\n    \n    return solutions[cost_cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' is the tens digit and cannot be 0\n        for b in range(10):  # 'b' is the units digit\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8  # 8 is the greatest 1-digit even number\n    smallest_2_digit_odd = 11  # 11 is the smallest 2-digit odd number\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    \n    # Single digit numbers (pages 1 to 9)\n    total_sum += sum(range(1, 10))\n\n    # Double digit numbers (pages 10 to 99)\n    for i in range(10, 100):\n        total_sum += sum(divmod(i, 10))\n\n    # Triple digit numbers (pages 100 to 207)\n    for i in range(100, 208):\n        total_sum += sum(divmod(i, 100))  # Sum of first two digits\n        total_sum += i % 10               # Add the last digit\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3 / 4\n    total_designs = made_designs / fraction_completed\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    # Loop through all possible three-digit numbers\n    for i in range(100, 1000):\n        # Check the sum of the digits\n        if sum(map(int, str(i))) == 4:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Initialize the lowest score as the highest possible value to start with\n    low_score = 100\n    \n    # Since we need 5 different whole numbers that average to 90,\n    # the total sum of scores must be 90 * 5\n    total_score_needed = 90 * 5\n    \n    # Iterate through all possible lowest scores to find the minimum one\n    # that allows for the highest possible scores for the other students\n    for score in range(100):\n        # The scores are different whole numbers, hence \n        # the next possible scores are score+1, score+2, etc.\n        sum_of_scores = score + (score + 1) + (score + 2) + (score + 3) + (score + 4)\n        \n        # If the sum of scores matches the target total score\n        # and is the lowest one found so far, update low_score\n        if sum_of_scores == total_score_needed:\n            low_score = score\n            break\n\n    return low_score\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's define the cost of each wristband as 'w' and total money as 'm'\n    m, w = symbols('m w')\n    # 4 caps + 6 wristbands = 2/5 of his money\n    equation1 = Eq(4 * (3 * w) + 6 * w, 2 / 5 * m)\n    # remaining money is 3/5 and he spends 1/3 of that for more caps\n    remaining = 3 / 5 * m\n    spent_for_more_caps = 1 / 3 * remaining\n    # Let's find out how much he spent for each cap\n    equation2 = Eq(spent_for_more_caps, 3 * w)\n    \n    solutions = solve((equation1, equation2), (m, w))\n\n    # Calculate number of additional caps bought with 1/3 of his remaining money\n    cost_per_cap = 3 * solutions[w]\n    additional_caps = spent_for_more_caps / cost_per_cap\n    \n    # He initially bought 4 caps\n    total_caps = 4 + additional_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    import math\n\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    h0 = 3000  # initial altitude (m)\n    h = 2000   # final altitude (m)\n\n    # Using conservation of energy: Potential energy at 3000m = Kinetic energy at 2000m\n    # mgh0 = mg * h + 0.5 * m * v^2, where m is the mass of the skydiver (which is canceled out)\n    # g * h0 = g * h + 0.5 * v^2  \n    # solving for v: v^2 = 2 * g * (h0 - h)\n    # v = sqrt(2 * g * (h0 - h))\n    v = math.sqrt(2 * g * (h0 - h))\n\n    return v\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Using the Pigeonhole Principle, we can deduce that to ensure we get 4 consecutive numbers,\n    # we need to consider the worst-case scenario where we pick the maximum number of cards without getting 4 in a row.\n    # Since there are 13 different numbers, the worst-case scenario without 4 consecutive cards would be picking 3 from each number category\n    # (so picking 3 ones, 3 twos, ..., 3 thirteens).\n    # This would result in 3 * 13 = 39 cards.\n    # The next card we pick must then create a sequence of 4 consecutive numbers,\n    # since we'll have picked 4 cards from at least one of the number groups.\n    # Therefore, we need to pick 39 (worst-case without 4 consecutive) + 1 (to ensure we have 4 consecutive).\n    \n    ans = 39 + 1\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "def solution():\n    from itertools import permutations\n\n    # Fixed digits based on provided data\n    A, C, G = 3, 1, 7\n\n    # All possible permutations of the 7 remaining digits\n    for perm in permutations([0, 2, 4, 5, 6, 8, 9]):\n        B, D, E, F, H, I, J = perm\n\n        # Forming the numbers by place value and checking divisibility\n        if B % 2 == 0 and (A * 10 + B) % 2 == 0:\n            if (A * 100 + B * 10 + C) % 3 == 0:\n                if D % 2 == 0:\n                    if (A * 10000 + B * 1000 + C * 100 + D * 10 + E) % 5 == 0:\n                        if (A * 100000 + B * 10000 + C * 1000 + D * 100 + E * 10 + F) % 3 == 0:\n                            if G == 7:  # As provided in the question\n                                if (A * 10000000 + B * 1000000 + C * 100000 + D * 10000 + E * 1000 + F * 100 + G * 10 + H) % 8 == 0:\n                                    if (A * 100000000 + B * 10000000 + C * 1000000 + D * 100000 + E * 10000 + F * 1000 + G * 100 + H * 10 + I) % 9 == 0:\n                                        if J == 0:  # Divisibility by 10, last digit must be 0\n                                            return perm\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Xiao Ming's answer multiplied by 13 to get the total sum of the numbers\n    incorrect_sum = 12.43 * 13\n    \n    # Since only the last digit of the average is wrong, the sum should be an integer.\n    # Find the integer closest to the incorrect_sum that is divisible by 13\n    correct_sum = round(incorrect_sum)\n    while correct_sum % 13 != 0:\n        correct_sum += 1\n        \n    # Calculate the correct average\n    correct_average = correct_sum / 13\n    return correct_average\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    # Let x be the number of adult tickets sold\n    # Let y be the number of child tickets sold\n\n    # According to the problem, we have two equations:\n    # x + y = 19 (since 19 tickets were sold in total)\n    # 5x + 3y = 75 (since the total amount for the sale of tickets was $75)\n    \n    for x in range(20):\n        y = 19 - x\n        if 5 * x + 3 * y == 75:\n            return x  # We are interested in the number of adult tickets sold\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    max_number = 600\n    count_multiples_3 = max_number // 3\n    count_multiples_5 = max_number // 5\n\n    # Numbers which are multiples of both 3 and 5 are multiples of 15 (LCM of 3 and 5)\n    count_multiples_15 = max_number // 15\n\n    # Inclusion-Exclusion Principle to avoid double-counting the numbers which are multiples of both 3 and 5\n    count = count_multiples_3 + count_multiples_5 - count_multiples_15\n\n    return count\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n\n    grandma_age_now = grandma_age_future - (tom_age_future - tom_age_now)\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')\n    students_a = 2 * students_b\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    equation1 = Eq(4 * students_a, candies + 20)\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    equation2 = Eq(6 * students_b, candies - 16)\n\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if (ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50) == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Worst case scenario when trying not to get 2 stickers of the same color:\n    # Pick 1 red, 1 green, and then no matter what the next one is, there will be 2 of the same color\n    ans = 1 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum number of balls she can take out without having 4 of the same color:\n    # She can take all balls of two colors, and 3 of the other.\n    max_without_4_same = (5 - 1) + (4 - 1) + 3 # Subtract 1 from the first two to avoid having 4 of the same\n\n    # Now, regardless of the next ball she takes, she will have 4 of the same color.\n    balls_needed = max_without_4_same + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Number of legs for each type of animal\n    duck_legs = 2\n    goose_legs = 2\n    lamb_legs = 4\n\n    # Number of each type of animals\n    ducks = 4\n    geese = 2\n\n    # Total number of legs from ducks and geese\n    total_bird_legs = (ducks * duck_legs) + (geese * goose_legs)\n\n    # Total number of legs based on the information provided\n    total_legs = 36\n\n    # Calculate the remaining legs that must belong to lambs\n    remaining_legs = total_legs - total_bird_legs\n\n    # Calculate the number of lambs (each lamb has 4 legs)\n    lambs = remaining_legs // lamb_legs\n\n    return lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing three times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    # Each boy got 2 sweets, each girl got 4 sweets, total of 570 sweets\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (top layer) has 1^2 = 1 box\n    layer1 = 1**2\n    # Layer 2 has 2^2 = 4 boxes\n    layer2 = 2**2\n    # Layer 3 has 3^2 = 9 boxes\n    layer3 = 3**2\n    \n    # Total boxes is the sum of boxes from the three layers\n    total_boxes = layer1 + layer2 + layer3\n    \n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    total_money = 5\n    change = total_money - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed = 600\n    good_copies_from_A = (3/5) * good_copies_needed\n    good_copies_from_B = (2/5) * good_copies_needed\n    \n    bad_to_good_ratio_A = 1/4\n    bad_to_good_ratio_B = 1/5\n    \n    total_copies_from_A = good_copies_from_A * (1 + bad_to_good_ratio_A)\n    total_copies_from_B = good_copies_from_B * (1 + bad_to_good_ratio_B)\n    \n    total_copies_needed = total_copies_from_A + total_copies_from_B\n    \n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    expression = (1.2 + 1.23 + 1) * (1.2 + 1.23 + 1) - (1.2 + 1.23 + 1) * (1.2 + 1.23)\n    ans = expression\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    # Let x be the number of hours his son takes to harvest the crops by himself\n    # Farmer's work rate: 1/24 work per hour\n    # Son's work rate: 1/x work per hour\n    # Together work rate: 1/16 work per hour\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation: Farmer's work rate + Son's work rate = Together work rate\n    equation = Eq(1/24 + 1/x, 1/16)\n\n    # Solve the equation for x\n    son_hours = solve(equation, x)\n\n    # Return the number of hours (positive value)\n    return son_hours[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "import math\n\ndef solution():\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's solution details\n    annie_solution = 300\n    annie_concentration = 0.15\n\n    # Becky's solution details\n    becky_solution = 400\n    becky_concentration = 0.25\n\n    # Carol's solution details\n    carol_solution = 300\n    carol_concentration = 0.35\n\n    # Calculate the total sugar using each person's concentration\n    total_sugar = (annie_solution * annie_concentration +\n                   becky_solution * becky_concentration +\n                   carol_solution * carol_concentration)\n\n    # Calculate the total solution weight\n    total_solution = annie_solution + becky_solution + carol_solution\n\n    # Calculate the concentration of the resulting sugar solution\n    resulting_concentration = total_sugar / total_solution\n\n    return resulting_concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    num_rolls = 30\n    probability_of_5 = 1/6  # The probability to get a 5 in a single roll of a fair dice\n\n    expected_5s = num_rolls * probability_of_5\n\n    return expected_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "def solution():\n    from math import factorial\n\n    # Total arrangements without any conditions.\n    total_arrangements = factorial(5)\n\n    # Now we calculate the number of ways Hugh can be placed between Louise and Richard.\n    # There are 3! ways to arrange Hugh, Louise and Richard in a sequence where Hugh is in the middle.\n    # There are 2! ways to arrange the other two children.\n    hugh_between = factorial(3) * factorial(2)\n\n    # Subtract the invalid arrangements (where Hugh is between Louise and Richard)\n    valid_arrangements = total_arrangements - hugh_between\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Number of losses\n    losses = 10\n    # Points per win, draw, and loss\n    points_win = 3\n    points_draw = 1\n    points_loss = 0\n    # Fraction of matches won and drawn\n    frac_won = 2/5\n    frac_drawn = 7/20\n    # Since the fractions should add up to 1 when combined with the losses\n    total_matches = losses / (1 - frac_won - frac_drawn)\n    # Calculate the number of wins and draws\n    wins = frac_won * total_matches\n    draws = frac_drawn * total_matches\n    # Calculate the total points\n    points = (wins * points_win) + (draws * points_draw) + (losses * points_loss)\n    \n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's incorrect step is the multiplication of quotient by remainder.\n    # It should be quotient by divisor.\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct working\n    # Multiply the quotient by the divisor\n    product = quotient * divisor\n    # Add the remainder\n    correct_answer = product + remainder\n\n    # Check if Johnny's answer is correct\n    return correct_answer\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    for i in range(2, 41, 2):\n        if (i // 2) % 2 == 1:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)  # total cost in pence\n    note_value = 10 * 100  # note value in pence (£10 note)\n    change = note_value - total_cost  # change in pence\n\n    return change\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_reduction = 0.10\n    second_reduction = 0.20\n\n    after_first_reduction = initial_price * (1 - first_reduction)\n    final_price = after_first_reduction * (1 - second_reduction)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_sum = 8 * 555\n    mean_diff = 296\n    # Let x be the mean of the last 5 numbers\n    # Then the total sum of the last 5 numbers is 5x\n    # The total sum of the first 3 numbers is 3(x - mean_diff)\n    # total_sum = 3(x - mean_diff) + 5x\n    # 8 * 555 = 3x - 3 * mean_diff + 5x\n    # 8 * 555 + 3 * mean_diff = 8x\n    x = (total_sum + 3 * mean_diff) / 8\n    return x\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    # Since Sophia counts by twos, she will cross out every multiple of 2.\n    # We need to find out how many multiples of 2 there are from 2 to 100.\n    # This is simply counting how many even numbers there are in that range.\n\n    first_multiple = 2\n    last_multiple = 100\n    step = 2\n\n    # The number of multiples of 2 from 2 to 100 inclusive is:\n    num_multiples = (last_multiple - first_multiple) // step + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Set up the equations for each person's spending and pen's price\n    x, y, z, p = symbols('x y z p')\n    equation1 = Eq(x + y + z, 54)\n    equation2 = Eq(x - 3/5*x, p)\n    equation3 = Eq(y - 3/4*y, p)\n    equation4 = Eq(z - 2/3*z, p)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z, p))\n    xiaoquan_left = solutions[x]\n    aobanma_left = solutions[z]\n    # The total money Xiaoquan and Aobanma have left collectively\n    total_left = xiaoquan_left + aobanma_left\n\n    return total_left\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position_from_front = 3\n    children_between_pip_and_bud = 5\n    \n    bud_position_from_front = pip_position_from_front + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    \n    return bud_position_from_end\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    years_ago = symbols('years_ago')\n    \n    # Isaac's current age\n    isaac_age_now = 53\n    \n    # His mother's current age\n    mother_age_now = 81\n    \n    # Equation representing the situation 'years_ago' years in the past\n    equation = Eq((isaac_age_now - years_ago), (mother_age_now - years_ago)/3)\n    \n    # Solve the equation\n    years_solution = solve(equation, years_ago)\n    \n    return years_solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age = solve_congruence(*congruences)\n\n    return grandma_age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_pound = 1 / 2.2\n    kg = pounds * kg_per_pound\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n    \n    return custom_op(5, 10) - custom_op(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # m/s\n    cat_speed = 3    # m/s\n    distance_behind = 500  # m\n\n    relative_speed = elena_speed - cat_speed  # m/s\n    time_to_catch_up = distance_behind / relative_speed  # s\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3]\n    perm = permutations(digits, 3)  # Generate all permutations of length 3\n    return len(list(perm))  # Convert permutations to a list and count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(1, 21):\n        if isprime(i) and isprime(i + 6) or isprime(i) and isprime(i - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20-8, 31-20, 41-31, 50-41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    # Since it is a double arithmetic sequence, there should be a constant second difference\n    constant_second_difference = second_differences[0] \n    \n    # Calculate the next difference to find the next term\n    next_difference = differences[-1] + constant_second_difference\n    next_term = 50 + next_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # An even number ends with 0, 2, 4, or 6 (0 is not available here)\n    # In this case, the last digit must be 2 or 4\n    even_digits = [2, 4]\n\n    # Number of ways to arrange the last digit (2 choices: 2 or 4)\n    last_digit_ways = 2\n\n    # Number of ways to arrange the first four digits \n    # after choosing the last digit (factorial of remaining digits)\n    first_four_digits_ways = factorial(4)\n\n    # The total number of ways is the product of the two\n    total_ways = last_digit_ways * first_four_digits_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50  # Total weight of 8 apples\n    total_weight_final = 9 * 52    # Total weight after adding the extra apple\n\n    extra_apple_weight = total_weight_final - total_weight_initial\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "import math\n\ndef solution():\n    # Since a bulb's final state (on/off) depends on the number of factors it has\n    # (odd number of factors: on, even number of factors: off), and only perfect squares\n    # have an odd number of factors, we need to find the number of perfect square numbers\n    # between 1 and 250.\n\n    max_num = 250\n    count = 0\n\n    # Count all perfect squares less than or equal to 250\n    for i in range(1, int(math.sqrt(max_num)) + 1):\n        if i * i <= max_num:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -16\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    ans = sum(range(96, 100))\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    # Using the given formula ③ equals 2 times 3 times 4 and so on\n    # Find the value of ⑥ and ⑦ using the pattern\n    value_of_6 = 5 * 6 * 7\n    value_of_7 = 6 * 7 * 8\n\n    # Calculate 1 over ⑥ plus 1 over ⑦\n    sum_of_fractions = 1 / value_of_6 + 1 / value_of_7\n\n    # Given that 1 over ⑥ plus 1 over ⑦ equals 1 over ⑦ times triangle\n    # Rearrange the equation to find the value of the triangle\n    triangle = sum_of_fractions * value_of_7\n\n    return triangle\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term)//2 + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48$ less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_spent = 3/5 * rasidah\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = 6/7 * chai_seng\n    \n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng - chai_seng_spent, 1/2 * (rasidah - rasidah_spent))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Starting date\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    # Finding next year where January 28 is Monday\n    next_date = start_date + one_year\n    while next_date.weekday() != 0: # 0 represents Monday\n        # Check if it's a leap year, if so, add an extra day\n        if next_date.year % 4 == 0 and (next_date.year % 100 != 0 or next_date.year % 400 == 0):\n            next_date += one_day\n        next_date += one_year\n    \n    ans = next_date.year\n    return ans\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100):  # We start the divisor from 1 and we can assume it won't be very large for the least dividend\n        dividend = divisor * 8 + 7  # Since the remainder is 7, we add this to the product of the divisor and quotient\n        if dividend % divisor == 7:  # Check if the remainder is indeed 7\n            return dividend, divisor  # Return the pair once we find the correct one\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 am to 7:30 am.\n    jogging_speed = 6  # miles per hour\n    jogging_time = 1  # hours\n    jogging_distance = jogging_speed * jogging_time  # miles\n\n    # Star walks for 2 hours from 7:30 am to 9:30 am.\n    walking_speed = 5  # miles per hour\n    walking_time = 2  # hours\n    walking_distance = walking_speed * walking_time  # miles\n\n    # Total distance Star travels every morning.\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_percentage = 10\n    members = 30\n    \n    discounted_cost = original_cost - (original_cost * (discount_percentage / 100))\n    cost_per_member = discounted_cost / members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_price = 80  # in cents\n    additional_price = 5  # in cents per minute\n    total_price = 140  # in cents\n    additional_price_paid = total_price - base_price\n    additional_minutes = additional_price_paid / additional_price\n    base_minutes = 15\n    total_minutes = base_minutes + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of any number raised to a power only depends on the last digit of the base number.\n    # The last digit of powers of 2 repeats every 4 times: 2, 4, 8, 6\n    # The last digit of powers of 3 repeats every 4 times: 3, 9, 7, 1\n    # 2017 modulo 4 is 1, so we are interested in the first item in the cycle\n\n    last_digit_of_2_power_2017 = 2\n    last_digit_of_3_power_2017 = 3\n\n    # Product of the last digits will give the last digit of the entire expression.\n    ans = (last_digit_of_2_power_2017 * last_digit_of_3_power_2017) % 10\n\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Coefficient for the variable\n    coefficient = 4\n    # Constant term on the left hand side of the equation\n    lhs_constant = -13\n    # Value on the right hand side of the equation\n    rhs_value = 55\n\n    # Move lhs_constant to the other side to isolate the variable\n    rhs_value += lhs_constant\n    \n    # Divide by coefficient to solve for the variable\n    variable_value = rhs_value / coefficient\n    \n    return variable_value\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define the custom operation based on given patterns\n    def custom_operation(a, b):\n        return (a - 1) * (b % a)\n\n    # Use the custom operation to find the result for 9 ◈ 20\n    ans = custom_operation(9, 20)\n\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    \n    equation = Eq(((number - 4) / 2) + 11, 37)\n    \n    sara_number = solve(equation, number)\n    \n    return sara_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    # The smallest multiple of 5 after 56 is obtained by rounding 56 up to the nearest multiple of 5\n    smallest_multiple = (56 // 5 + 1) * 5\n    # The largest multiple of 5 before 120 is obtained by taking the integer division of 120 by 5\n    largest_multiple = 120 // 5 * 5\n\n    # Now, the number of multiples of 5 between the smallest and the largest multiple can be calculated\n    number_of_multiples = (largest_multiple - smallest_multiple) // 5 + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when she was 35\n    gina_35_year = 2005 - 50 + 35\n    \n    # James's age at that year\n    james_age_when_gina_35 = gina_35_year - 1997 + 20\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    initial_eggs = 30\n    daily_egg_production = 1\n    daily_egg_consumption = 3\n    days = 0\n    while initial_eggs + days * daily_egg_production >= days * daily_egg_consumption:\n        days += 1\n    days -= 1\n    return days\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_population_hundred_thousand = 43\n    percentage_on_peninsula = 0.9\n    area_of_peninsula = 7\n\n    population_on_peninsula_hundred_thousand = total_population_hundred_thousand * percentage_on_peninsula\n    people_per_square_km = population_on_peninsula_hundred_thousand / area_of_peninsula\n\n    return round(people_per_square_km, 2)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_front = 5\n    eddie_back = 9\n    people_between = 2\n\n    total_people = lucy_front + eddie_back + people_between - 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]  # The first four prime numbers\n    for i in range(3 * 5 * 7 * 8):  # <--- A number that is a multiple of 3, 5, 7, and 8 would exceed our interest\n        remainders = [i % 3, i % 5, i % 7, i % 8]\n        if sorted(remainders) == primes:  # If the sorted remainders match our prime list, we have our answer\n            return i\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8    # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm // 9  # Use floor division for equal stripes\n    stripe_length_m = stripe_length_cm // 100  # Convert centimeters to meters\n    stripe_length_cm_remainder = stripe_length_cm % 100\n\n    return (stripe_length_m, stripe_length_cm_remainder)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    step1 = result + 21\n    step2 = step1 // 7\n    original_number = step2 - 4\n    return original_number\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    total_flowers = 3616\n    remaining_flowers = 2644\n    sold_flowers = total_flowers - remaining_flowers\n\n    # orchids : tulips = 3 : 5\n    # let orchids = 3x and tulips = 5x\n    # roses = total_flowers - orchids - tulips\n    # roses = total_flowers - 3x - 5x = 3616 - 8x\n    \n    # 40% of the orchids sold: 0.4 * 3x\n    # 1/5 of the tulips sold: (1/5) * 5x = 1x\n    # 25% of the roses sold: 0.25 * (3616 - 8x)\n\n    # Equation:\n    # 0.4 * 3x + x + 0.25 * (3616 - 8x) = sold_flowers\n    # Solve for x to find the number of orchids (3x)\n    \n    # 1.2x + x + 904 - 2x = sold_flowers\n    # 0.2x + 904 = sold_flowers\n    # 0.2x = sold_flowers - 904\n    # x = (sold_flowers - 904) / 0.2\n    # orchids = 3x\n\n    x = (sold_flowers - 904) / 0.2\n    orchids = 3 * x\n\n    return int(orchids)\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of right-handed girls would be if all non-right handed pupils were girls\n    non_right_handed = total_pupils - right_handed\n    right_handed_girls_minimum = max(girls - non_right_handed, 0)\n    \n    return right_handed_girls_minimum\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    money_spent_on_snacks = 3\n\n    total_savings = initial_amount + (daily_savings * days_saved) - lent_to_brother - money_spent_on_snacks\n\n    return total_savings\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for books (b) and files (f)\n    b, f = symbols('b f')\n    \n    # Equation 1: Total cost is $336\n    equation1 = Eq(12 * b + 9 * f, 336)\n    # Equation 2: Number of books is 14 more than number of files\n    equation2 = Eq(b, f + 14)\n    \n    # Solve the system of equations for b and f\n    solutions = solve((equation1, equation2), (b, f))\n    \n    # Solution for number of books\n    return solutions[b]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digit = sum(pow(i, 2013, 10) for i in range(1, 10)) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    return 4  # Worst case: Peter takes one of each color (3 socks), he needs one more to ensure a pair.\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Since Japan is 7 hours ahead, we need to subtract 7 hours from Japan's time to sync with France's time.\n    # Amy's departure time in France's time zone is therefore 8 pm (Japan) - 7 hours = 1 pm (France) on 2nd July.\n    \n    # Amy's arrival time in France is at 1 am on 3rd July.\n\n    # The flight duration can now be calculated by considering the time difference from 1 pm (2nd July) to 1 am (3rd July).\n\n    # From 1 pm to midnight (2nd July) is 11 hours.\n    hours_until_midnight = 11\n\n    # From midnight to 1 am (3rd July) is 1 hour.\n    hours_after_midnight = 1\n\n    # Total flight time in hours is the sum of the above two durations.\n    total_flight_hours = hours_until_midnight + hours_after_midnight\n\n    return total_flight_hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 131 + 1):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    correct_score = 4\n    wrong_score = -1\n    total_score = 168\n    \n    attempted_questions = total_questions - not_attempted\n    \n    # Let x be the number of correct answers\n    # total_score = correct_score * x + wrong_score * (attempted_questions - x)\n    # 168 = 4 * x - (attempted_questions - x)\n    # 168 = 4 * x - (47 - x)\n    # 168 = 5 * x - 47\n    # x = (168 + 47) / 5\n    correct_answers = (total_score + attempted_questions) // (correct_score - wrong_score)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For the first digit, we cannot use 0, so we have 1 and 2 to choose from. This gives us 2 options.\n    first_digit_options = 2\n    # For the second digit, we can use 0, 1, or 2. This gives us 3 options.\n    second_digit_options = 3 \n    \n    # By the multiplication rule, to find the total number of 2-digit numbers\n    # we can form by multiplying the options for each digit.\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest number be x. Then the five consecutive even numbers can be expressed as:\n    # x, x+2, x+4, x+6, and x+8. Their sum is 5x + 20, which is given to be 200.\n    # Thus, we set up the equation: 5x + 20 = 200 and solve for x.\n\n    x = (200 - 20) // 5  # Simplified equation to find x\n    return x\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume of sugar solution transferred (in grams)\n    x = symbols('x')\n    \n    # Initial amounts of sugar in A and B\n    sugar_A = 50 * 0.10\n    sugar_B = 30 * 0.20\n    \n    # After transferring x grams of the sugar solution\n    # Container A will have (50-x) grams of water and (sugar_A - 0.10x) grams of sugar \n    # Container B will have (30-x) grams of water and (sugar_B - 0.20x) grams of sugar \n    # After mixing x grams of solution from container B into A \n    # Container A gets an additional 0.20x grams of sugar\n    # Container B gets an additional 0.10x grams of sugar\n    \n    # Concentration equations after the transfer\n    # (sugar_A - 0.10x + 0.20x) / (50 - x + x) = (sugar_B - 0.20x + 0.10x) / (30 - x + x)\n    equation = Eq((sugar_A - 0.10*x + 0.20*x) / 50, (sugar_B - 0.20*x + 0.10*x) / 30)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the solution as the volume of sugar solution transferred\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = sum(100 / (97 - i) for i in range(0, 100 - 97 + 1))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to make 4 cuts to get 5 sections\n    # Therefore, she needs 2 minutes per cut (since 8 minutes / 4 cuts = 2 minutes/cut)\n    # If she needs to make 6 cuts:\n    required_cuts = 6\n    time_per_cut = 8 / 4  # 2 minutes per cut (as calculated earlier)\n\n    # Calculate total time for 6 cuts\n    total_time = required_cuts * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    votes_remaining = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # To ensure Peter gets elected, he needs one more vote than half of the total votes\n    votes_needed_for_majority = (total_votes // 2) + 1\n    \n    # The additional votes Peter needs to secure the position\n    additional_votes_needed = votes_needed_for_majority - peter_votes\n    \n    # If Peter could get all the remaining votes, we check if that would be enough\n    if votes_remaining >= additional_votes_needed:\n        return additional_votes_needed\n    else:\n        return \"It is impossible for Peter to be elected with the remaining votes.\"\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    max_units_value = max(numbers, key=lambda x: x % 10)\n    return max_units_value\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_money = 490  # in pence\n    coin_values = [5, 10, 20]\n    num_ways = 0\n\n    # Since the number of coins for each denomination is the same, we can use a single variable.\n    for num_coins in range(1, total_money // min(coin_values) + 1):\n        if sum(c * num_coins for c in coin_values) == total_money:\n            num_ways = num_coins * len(coin_values)\n            break\n\n    return num_ways\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    reduction_percentage = (discount / original_price) * 100\n    return reduction_percentage\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # initial sweets eaten the first day (d1) and the common difference (d) are unknown\n    d1, d = symbols('d1 d')\n    n = 9  # n = 9 since there are 9 days\n    total_sweets = 135  # Total sweets eaten in 9 days\n\n    # The sum of n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n-1)d), where a is the first term and d is the common difference\n    equation = Eq(n/2 * (2*d1 + (n-1)*d), total_sweets)\n\n    # Solving the equation for d1 and d\n    solutions = solve(equation, (d1, d))\n\n    # Now, find the number of sweets eaten on the last day, which is the 9th term (a_9) of the sequence\n    # a_9 = d1 + (9-1)*d\n    last_day_sweets = solutions[d1] + (n-1)*solutions[d]\n\n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    money_after_book = initial_money - (initial_money * 0.1)\n    money_after_dvd = money_after_book - (money_after_book * 0.2)\n    return money_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # in dollars\n    cost_of_gift = 20    # in dollars\n\n    amount_left_in_dollars = initial_amount - cost_of_gift\n    amount_left_in_cents = amount_left_in_dollars * 100  # convert dollars to cents\n\n    return amount_left_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    initial_deposit = 1000\n    annual_interest_rate = 0.06\n    years = 5\n    compound_interest_factor = 1.33823\n\n    balance_after_years = initial_deposit * (compound_interest_factor)\n    return balance_after_years\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # Count the number of digits in a range of page numbers\n    def count_digits(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            count += len(str(i))\n        return count\n    \n    pages = 185\n    if pages < 10:\n        return pages  # 1 digit per page for pages 1-9\n    elif pages < 100:\n        # 1 digit for pages 1-9, 2 digits for pages 10-99\n        return 9 + 2 * (pages - 9)\n    else:\n        # 1 digit for pages 1-9, 2 digits for pages 10-99, 3 digits for pages 100-185\n        return 9 + 2 * (99 - 9) + 3 * (pages - 99)\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10 / 100  # 10%\n\n    # Calculate the pay rise amount\n    pay_rise_amount = annual_salary * pay_rise_percentage\n\n    # New annual salary after pay rise\n    new_annual_salary = annual_salary + pay_rise_amount\n\n    # Calculate new monthly salary\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]  # Return the value of x.\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # For all possible days and months\n    for day in range(1, 32):  # Assuming Betty's birthday isn't on a 31st of a month with less than 31 days\n        for month in range(1, 13):  # There are 12 months in a year\n            # Check if the condition for the products and their sum is met\n            if (month * 31 + day * 12) == 376:\n                # Format the date as ddmm\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n\n    calculator_sale_price = calculator_original_price - (calculator_original_price / 4)\n    protractor_sale_price = protractor_original_price / 2\n\n    total_cost = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    # Given quantities for flour and milk in the recipe\n    flour_recipe = 40  # in grams\n    milk_recipe = 80   # in milliliters\n    \n    # Quantity of flour Tom has\n    flour_tom = 25  # in grams\n    \n    # Using proportions to find out how much milk Tom should use\n    milk_tom = (flour_tom * milk_recipe) / flour_recipe\n    \n    return milk_tom\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    sweets_initial = sweets_taken + sweets_left\n    return sweets_initial\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Since P(17) = 10 and P(24) = 17, we can set up two equations based on the Factor Theorem\n    # Let P(x) = (x - 17)(x - 24)Q(x) + ax + b\n    # P(17) = 10 => 17a + b = 10\n    # P(24) = 17 => 24a + b = 17\n    \n    # Solving for a and b\n    a = -7  # Found by subtracting the equations: (24a + b) - (17a + b) = 17 - 10\n    b = 129  # Found by substituting a value into either equation: 17a + b = 10\n\n    # The polynomial P(x) can then be expressed as P(x) = (x - 17)(x - 24)Q(x) - 7x + 129\n    # Now, we need to find the possible integer solutions for n where P(n) = n + 3\n\n    # P(n) = n + 3 given by the problem\n    # (n - 17)(n - 24)Q(n) - 7n + 129 = n + 3\n    # (n - 17)(n - 24)Q(n) - 8n + 126 = 0\n    # Since we are looking for integer solutions, and Q(n) is a polynomial with integer coefficients,\n    # (n - 17)(n - 24)Q(n) must also result in integer solutions for some polynomial Q(n)\n    \n    # The constant term 126 can be factored into two integers\n    # which are separated by a difference of 7 (because of the -8n term)\n    # Possible factor pairs of 126 are: (1, 126), (2, 63), (3, 42), (6, 21), (7, 18), (9, 14)\n    # Out of these, (9, 14) have the difference of 7.\n    \n    # n1 and n2 could be 9 + 17 and 14 + 17 respectively (since we have to add the difference from the original factorization)\n    n1 = 9 + 17\n    n2 = 14 + 17\n\n    # The product n1 * n2 is the answer\n    return n1 * n2\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_current_age = 18\n    older_future_age = 62\n\n    age_difference = older_future_age - younger_current_age\n    older_current_age = younger_current_age + age_difference\n\n    return older_current_age\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    total_grass_27 = 27 * 6\n    total_grass_23 = 23 * 9\n    # Since the grass grows at a constant rate, the total amount of grass should be the same.\n    # Thus we set the total amount of grass eaten by 27 oxen in 6 weeks equal to the total amount of grass eaten by 23 oxen in 9 weeks.\n    # Now we calculate the time it takes for 21 oxen to finish eating the grass, assuming the total grass is the same.\n    total_grass = total_grass_27  # Which is equal to total_grass_23\n    weeks_for_21 = total_grass / 21\n    return weeks_for_21\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    apple_weight = 30\n    max_orange_weight = (3 * apple_weight - 1) // 5\n    return max_orange_weight\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2 / 3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000  # Since 1 tonne = 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen leaves home at 7:30 am and arrives at the train station at 8:30 am.\n    # Time taken to reach the train station = 1 hour\n    bike_time = 1\n    \n    # The speed of the bike is 10 miles per hour.\n    bike_speed = 10\n    \n    # Distance traveled by bike\n    bike_distance = bike_speed * bike_time\n    \n    # Ellen gets on a train at 8:30 am and arrives in the town at 10:30 am.\n    # Time taken in the train = 2 hours\n    train_time = 2\n    \n    # The speed of the train is 50 miles per hour.\n    train_speed = 50\n    \n    # Distance traveled by train\n    train_distance = train_speed * train_time\n    \n    # Total distance traveled by Ellen every Saturday\n    total_distance = bike_distance + train_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # There are 5 balls and the balls are not distinct from each other (indistinguishable).\n    # There are 3 boxes that the balls can go into, and the boxes are distinct from each other.\n    # This is a problem of putting n indistinguishable items into k distinguishable boxes,\n    # which is solved by the formula: (n+k-1) choose k-1.\n    # In this problem, n=5 (balls) and k=3 (boxes).\n\n    from math import comb\n    n, k = 5, 3\n    ans = comb(n+k-1, k-1)\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n    num_blue = solve(equation, blue)\n\n    return num_blue[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n        \n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    rows = 3 + 2 - 1  # 3rd from front, 2nd from back\n    columns = 4 + 3 - 1  # 4th from left, 3rd from right\n    ans = rows * columns  # total number of students\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ema, keng_wee = symbols('ema keng_wee')\n\n    equation1 = Eq(keng_wee - 360, ema)\n    equation2 = Eq(keng_wee - (4/7) * keng_wee, ema - (1/4) * ema)\n\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    track_length = 400\n    speed_A = 12\n    speed_B = 8\n    initial_lead = 236\n\n    relative_speed = speed_A - speed_B\n    \n    # Lead needed for third meet\n    lead_for_third_meet = initial_lead + 2 * track_length\n    \n    time_to_meet_third = lead_for_third_meet / relative_speed\n    \n    return time_to_meet_third\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1 / 4 * 36\n    one_tenth_of_square = 10 * one_fourth_of_36  # because one-tenth of x is x/10, which implies x = 10 * (1/10 of x)\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    result = 6.4 * 2.7\n    return result\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    front_to_back = 3  # 3rd from front\n    back_to_front = 2  # 2nd from back\n    total_vertical = front_to_back + back_to_front - 1  # Total rows\n\n    left_to_right = 4  # 4th from left\n    right_to_left = 3  # 3rd from right\n    total_horizontal = left_to_right + right_to_left - 1  # Total columns\n\n    total_students = total_vertical * total_horizontal  # Total students in array\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls, 9/11 * boys)\n    equation2 = Eq(girls + 2, 10/11 * boys)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    girls_now = solutions[girls] + 2\n    boys_now = solutions[boys]\n    \n    return girls_now + boys_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # The first term in the sequence is 1\n    for i in range(2, 11):  # Starting from 1/2 to 10/10, hence 2 to 11\n        ans += sum([j/i for j in range(1, i)]) * 2  # Sum of each i-th fraction sequence multiplied by 2 as it appears twice\n        ans += 1  # Add the i/i term which occurs only once\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(2*(3*x - y), 2*x + 4)\n    solution_values = solve(equation1, (x, y))\n    x_value = solution_values[x]\n\n    return (2*x_value - y).subs(y, solution_values[y])\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    change_pence = (5 * 100) - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    trevor, siobhan = symbols('trevor siobhan')\n    equation = Eq(trevor, 5 * siobhan)\n    equation_diff = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation, equation_diff), (trevor, siobhan))\n    \n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n    equation = Eq(zehan_current + 12, 3 * zehan_current)\n    solution = solve(equation, zehan_current)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total ways to choose 5 students out of 15\n    total_ways = comb(15, 5)\n\n    # Ways to choose 5 students when none of A, B, or C is chosen\n    ways_without_abc = comb(12, 5)\n\n    # Ways to choose 5 students including any two of A, B, or C\n    ways_with_two_abc = 3 * comb(12, 3)\n\n    # Calculate the ways with exactly one of A, B, or C\n    exact_one_abc_ways = total_ways - ways_without_abc - ways_with_two_abc\n\n    return exact_one_abc_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    cost_per_ticket = total_cost / number_of_tickets\n\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    value = 0.36\n    percent = value * 100\n    return percent\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of lemon juice in the bottle\n    x = symbols('x')\n    \n    # Original ratio is 2:3, so we can set it up as 2x + 3x = total juice\n    # After adding 80 ml of lemon juice, the ratio becomes 6:5\n    # So the equation becomes: (x + 80) / (5x/6) = 6/5\n    # Solving for x will give us the initial amount of lemon juice\n    equation = Eq((x + 80) * 6, 5 * (5 * (x / 2)))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + 6  # Savannah's ratio + Shaila's ratio\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Given that Kim gave 1/3 of her savings to her mother.\n    gave_to_mother = (1/3) * savings\n\n    # She spent 177 on dresses and 129 on a pair of earrings.\n    total_spent = 177 + 129\n\n    # The amount left is 50% of what she gave her mother.\n    amount_left = 0.5 * gave_to_mother\n\n    # The equation representing the remaining amount of savings.\n    # initial savings = amount given to mother + amount spent + amount left\n    equation = Eq(savings, gave_to_mother + total_spent + amount_left)\n\n    # Solve for the total savings 'savings'.\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase\n    delay_time_in_hours = 9 / 60  # 9 minutes to hours\n\n    # Time taken at usual speed = time taken at increased speed + delay time\n    # Let's call the distance to travel as 'd'.\n    # So, usual_speed * usual_time = increased_speed * increased_time + delay_time * increased_speed\n    # Since the time taken in both cases needs to be same for the car to reach on time, we can set usual_time = increased_time + delay_time_in_hours\n    # Therefore: d / usual_speed = d / increased_speed + delay_time_in_hours\n    # After rearranging the terms: d = usual_speed * increased_speed * delay_time_in_hours / (increased_speed - usual_speed)\n\n    distance = (usual_speed * increased_speed * delay_time_in_hours) / (increased_speed - usual_speed)\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    result = 80\n    result = (result * 8) + 8\n    result = result // 8 - 8\n    \n    return result\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be s (meters per minute) and the original time be t (minutes).\n    s, t = symbols('s t', positive=True, real=True)\n    \n    # If 25% increase in speed, then new speed is 1.25 * s,\n    # so the time taken will be distance/original time = s*t/(1.25*s) = t/1.25\n    # According to the problem, this is 20 minutes less than the original time, so\n    equation1 = Eq(t - (t / 1.25), 20)\n\n    # If the cyclist decreases his speed by 45 meters per minute, new speed is s - 45,\n    # so the time taken will be distance/new speed = s*t/(s-45)\n    # According to the problem, this time is 75% more than the original time, so\n    equation2 = Eq((s * t) / (s - 45), t + (t * 0.75))\n\n    # Solve the system of equations to find s and t\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Distance is rates * time\n    distance = solutions[s] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    for red_ropes in range(11):\n        blue_ropes = 10 - red_ropes\n        total_length = red_ropes * 2 + blue_ropes * 3\n        if total_length == 26:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    p = (21 * 100) / 30\n    return p\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n\n    total_second_half = avg_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    total_months = months_in_half_year * 2\n\n    avg_per_month = total_year / total_months\n\n    return avg_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    i = 1  # Initialize a counter\n    while True:\n        if (i % 7 == 0) and (i % 9 == 2):\n            return i\n        i += 1  # Increment the counter\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total = 22\n    count = 0\n    for i in range(1, total//2):\n        if total - i != i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies_fraction = Fraction(1, 7)\n    cookies_fraction = Fraction(1, 14)\n    muffins_fraction = Fraction(1, 2)\n\n    total_fraction = brownies_fraction + cookies_fraction + muffins_fraction\n    total_fraction = total_fraction.simplify()\n\n    return total_fraction\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    from sympy import divisors\n\n    # Find A by checking all possible values and their factors\n    for i in range(1, 1000):  # Assuming A is a reasonable integer for this example\n        factors = divisors(i)\n        if factors[-1] - factors[0] == 41:\n            A = i\n            break\n\n    # Calculate the 7th multiple of A\n    seventh_multiple = A * 7\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given the aspect ratio of height to width is 3:4 and height is 21 cm\n    aspect_ratio_height = 3\n    aspect_ratio_width = 4\n    height = 21\n\n    # Calculate width using the aspect ratio\n    width = (aspect_ratio_width / aspect_ratio_height) * height\n\n    # Calculate the perimeter of the television screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 12):\n        product *= Fraction(1 + Fraction(1, i))\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    count_n = 0\n\n    for n in range(1, 10000):  # Assuming a reasonable range for n\n        square_count = 0\n        for i in range(int(n**0.5), int((n + 100)**0.5) + 1):\n            if n <= i**2 <= n + 100:\n                square_count += 1\n        if square_count == 6:\n            count_n += 1\n\n    return count_n\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # let x be the larger number and y be the smaller number\n    # x - y = 36 (difference between two numbers)\n    # x + y = 98 (sum of the two numbers)\n    # we can solve for y by adding both equations resulting in:\n    # 2y = 98 - 36\n    # y = (98 - 36) / 2\n    y = (98 - 36) / 2\n    return y\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each number raised to the power of 100\n    last_digit_4 = pow(4, 100, 10)  # Last digit of 4^100\n    last_digit_7 = pow(7, 100, 10)  # Last digit of 7^100\n    last_digit_9 = pow(9, 100, 10)  # Last digit of 9^100\n    last_digit_11 = pow(11, 100, 10)  # Last digit of 11^100\n\n    # Multiply the last digits and take the last digit of the result\n    last_digit_final = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit_final\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    wrong_marks = -1\n    total_score = 78\n\n    correct_answers = int(total_questions * correct_percentage)\n    wrong_answers = total_questions - correct_answers\n\n    while correct_marks * correct_answers + wrong_marks * wrong_answers != total_score:\n        correct_answers -= 1\n        wrong_answers += 1\n\n    return correct_answers\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given costs\n    cost_6_files_10_rulers = 40\n    # Aim: to find cost of 9 files and 15 rulers\n\n    # Assumption:\n    # Let cost of one file is x and cost of one ruler is y.\n    # Therefore, 6x + 10y = 40\n\n    # If we take cost per file (x) to be 6 times that of 9 files, we would get the cost of 54 files\n    # so we multiply the 40 (cost for 6 files, 10 rulers) by 9 to get cost of 54+90 rulers\n    cost_54_files_90_rulers = cost_6_files_10_rulers * 9\n\n    # Since 54 files contain 9 files 6 times, we divide by 6 to find cost of 9 files and 15 rulers\n    cost_9_files_15_rulers = cost_54_files_90_rulers // 6\n\n    return cost_9_files_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jessie, john = symbols('jessie john')\n\n    # Initially, John had 5/13 of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n\n    # Jessie transfers $600 to John\n    equation2 = Eq(john + 600, (1/2) * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jessie, john))\n\n    # Calculate total amount of money\n    total_money = solutions[jessie] + solutions[john]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Starting with a brute-force approach.\n    # Initialize count for digit '1' and digit '2'\n    count_1 = 0\n    count_2 = 0\n    N = 0\n\n    # Loop through numbers until both digits meet the condition\n    while not (count_1 == 15 and count_2 == 14):\n        N += 1\n        # Convert the number to a string to count digits\n        str_N = str(N)\n        # Count the occurrences of '1' and '2'\n        count_1 += str_N.count('1')\n        count_2 += str_N.count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_in = datetime.strptime('10:30', '%H:%M')\n    time_out = datetime.strptime('11:00', '%H:%M')\n    \n    time_baked = (time_out - time_in).total_seconds() / 60  # convert to minutes\n    \n    return int(time_baked)\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_banana = 12 * 3  # total cost of bananas in pence\n    cost_apple = 11 * 5   # total cost of apples in pence\n    total_cost = cost_banana + cost_apple  # total cost in pence\n    paid = 200  # amount paid in pence (£2 = 200p)\n    change = paid - total_cost  # change in pence\n    change_pounds = change / 100  # convert change to pounds\n    return change_pounds\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    # Define the base cases for the first two days\n    # dp[day][mango][guava][pineapple] represents the number of ways to eat fruits\n    # up to the current day without breaking the rule\n    dp = [[[0, 0, 0], [0, 0, 0], [0, 0, 0]] for _ in range(9)]\n    \n    # Initialize for the first day\n    dp[1][1][0][0] = 1 # Bella eats mango\n    dp[1][0][1][0] = 1 # Bella eats guava\n    dp[1][0][0][1] = 1 # Bella eats pineapple\n\n    # Start filling in the dp table for days 2 to 8\n    for day in range(2, 9):\n        for mango in range(3):\n            for guava in range(3):\n                for pineapple in range(3):\n                    # If she eats mango today\n                    if mango < 2:\n                        dp[day][mango + 1][0][0] += dp[day - 1][mango][guava][pineapple]\n                    # If she eats guava today\n                    if guava < 2:\n                        dp[day][0][guava + 1][0] += dp[day - 1][mango][guava][pineapple]\n                    # If she eats pineapple today\n                    if pineapple < 2:\n                        dp[day][0][0][pineapple + 1] += dp[day - 1][mango][guava][pineapple]\n    \n    # Sum all the valid combinations on the 8th day\n    ans = sum(dp[8][mango][guava][pineapple] for mango in range(3) for guava in range(3) for pineapple in range(3))\n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    age_difference = 2\n    number_of_children = 7\n    youngest_age = 7\n    oldest_age = youngest_age + (number_of_children - 1) * age_difference\n    return oldest_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n\n    total_spent = calendar_price + ball_price\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    # Convert remaining flour to kilograms\n    remaining_flour_kg = 360 / 1000\n    \n    # Calculate the initial amount of flour by adding the used amounts and the remaining\n    initial_flour_kg = (1/5 + 1/2 + remaining_flour_kg)\n    \n    return initial_flour_kg\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(26 * oranges + 30 * lemons, 500)  # Convert pounds to pence\n\n    # Substitute one variable in terms of the other\n    # In this case, we will solve for one variable and find valid pairs\n    # The number of oranges and lemons should be non-negative integers\n    possible_solutions = []\n    for num_oranges in range(0, 500 // 26 + 1):\n        # Solve for lemons with the current number of oranges\n        num_lemons = solve(Eq(26 * num_oranges + 30 * lemons, 500), lemons)\n        if num_lemons[0].is_integer and num_lemons[0] >= 0:\n            possible_solutions.append((num_oranges, num_lemons[0]))\n\n    # The final answer is the sum of oranges and lemons for each pair\n    # We assume Gordon bought the oranges and lemons in the possible ways\n    # Here, since we want to know how many oranges and lemons in total for each combination, we sum up all of them\n    total_fruits = 0\n    for solution_pair in possible_solutions:\n        total_fruits += sum(solution_pair)\n\n    return total_fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # Since the seating is around a circular table, one person's position is fixed\n    # to avoid considering rotations as different arrangements. Thus, we have \n    # permutations for the remaining (n-1) people.\n    num_people = 4 - 1\n    return factorial(num_people)\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # The ratio of the number of T-shirts to the number of caps\n    ratio_eq = Eq(t_shirts / caps, 8/5)\n\n    # Siti sold 1/4 of the T-shirts => T-shirts sold: t_shirts * 1/4\n    # Siti sold 1/5 of the caps => Caps sold: caps * 1/5\n    # The cost of each T-shirt was $3 and the cost of each cap was $5.\n    # Money collected from T-shirts: t_shirts * 1/4 * 3\n    # Money collected from caps: caps * 1/5 * 5\n    money_eq = Eq(t_shirts * 1/4 * 3 + caps * 1/5 * 5, 132)\n\n    # Solve the equations\n    solutions = solve((ratio_eq, money_eq), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_eggs = symbols('original_eggs')\n    \n    equation = Eq(3 * original_eggs, original_eggs + 24)\n    \n    original_count = solve(equation, original_eggs)\n    \n    return original_count[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n    \n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for female and male visitors\n    female = symbols('female')\n\n    # Use given information to build equations\n    male = female + 450\n    total_first_day = male + female\n    female_second_day = female * 1.15\n    male_second_day = male * 0.82\n    total_second_day = 1354\n    \n    # Equation for the second day\n    equation = Eq(female_second_day + male_second_day, total_second_day)\n\n    # Solve the equation\n    female_visitors = solve(equation, female)\n    \n    # Calculate the total number of visitors on the first day\n    total_first_day_visitors = total_first_day.subs(female, female_visitors[0])\n\n    return total_first_day_visitors\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Leo and Jason's initial amounts\n    leo_initial, jason_initial = symbols('leo_initial jason_initial')\n    \n    # 1. Leo had $220 more than Jason initially\n    equation1 = Eq(leo_initial, jason_initial + 220)\n    \n    # 2. Leo received an extra $180, Jason got extra $1100\n    leo_final = leo_initial + 180\n    jason_final = jason_initial + 1100\n    \n    # 3. Jason now has 2 times as much money as Leo\n    equation2 = Eq(jason_final, 2 * leo_final)\n    \n    # Solve the equations for Leo and Jason's initial amounts\n    solutions = solve((equation1, equation2), (leo_initial, jason_initial))\n    \n    # Calculate Jason's final amount\n    jason_amount_now = solutions[jason_initial] + 1100\n    \n    return jason_amount_now\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Calculate the factorial of the total number of books\n    total_permutations = factorial(total_books)\n    \n    # Divide by the factorial of the number of each type of book to account for indistinct permutations\n    # Since the books of the same type are considered indistinguishable \n    ans = total_permutations // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or E == 0:  # A and E cannot be zero as they are in the hundred thousands place in their respective numbers.\n            continue\n        ABCDE = A * 10000 + B * 1000 + C * 100 + D * 10 + E\n        EDCBA = E * 10000 + D * 1000 + C * 100 + B * 10 + A\n        if ABCDE + EDCBA == 108900:  # this is the given sum of ABCDE + EDCBA \n            F = 1  # since we are adding two 5-digit numbers to get a 6-digit number, F has to be 1\n            return 10000*E + 1000*F + 100*C + 10*B + A  \n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # This is a problem of partitioning 7 indistinguishable items (pencils)\n    # into 3 distinguishable containers (pencil cases).\n    # This can be solved through stars and bars method:\n    # We can imagine this as having 7 stars and 2 bars to divide them into 3 sections:\n    # For example: **|****|* would represent two pencils in the first case,\n    # four in the second case, and one in the third.\n    # The number of ways to arrange these is the combination of 9 items\n    # chosen 2 at a time (since once we place the bars, the pencils are\n    # automatically divided).\n    from math import comb\n    ans = comb(7 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    total_robots = robots_per_day * days_in_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    difference = 9\n    \n    # The last positive number before passing zero would be the remainder\n    # when start_number is divided by difference\n    remainder = start_number % difference\n    \n    last_positive_number = start_number - remainder\n    \n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6  # 3 million pounds\n    num_friends = 5\n\n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15 to have their name put on the shirt\n    # We have two equations:\n    # x + y = 50  (total number of children)\n    # 10x + 15y = 555  (total amount paid)\n    # We can solve for x and y using these two equations\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Let x be the number of minutes David walks at the increased speed.\n    # David walks for 10 minutes at his original speed of 150 metres per minute\n    original_speed_distance = 150 * 10\n    # David walked a total of 3700 metres\n    total_distance = 3700\n    # The remaining distance must be covered at the increased speed of 200 metres per minute\n    increased_speed_distance = total_distance - original_speed_distance\n    # Calculate the time spent walking at the increased speed\n    increased_speed_time = increased_speed_distance / 200\n    # Total time spent walking is the time at original speed plus time at increased speed\n    total_time = 10 + increased_speed_time\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_1st, female_1st = symbols('male_1st female_1st')\n    \n    # Equation for the first day: male visitors = female visitors + 450\n    equation1 = Eq(male_1st - female_1st, 450)\n    \n    # Equation for the second day: 0.85*male_1st + 1.15*female_1st = 1354\n    equation2 = Eq(0.85*male_1st + 1.15*female_1st, 1354)\n    \n    solutions = solve((equation1, equation2), (male_1st, female_1st))\n    \n    return solutions[male_1st]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position*2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    singapore_departure = 5  # 05:00 in Singapore time\n    london_arrival = 11  # 11:00 in London time\n\n    # Calculate time difference considering Singapore is 7 hours ahead of London\n    time_diff = london_arrival + 7  # Adjusting for the time zone difference\n\n    # The day change should be considered as London arrival time is \"next day\"\n    if time_diff >= 24:\n        time_diff -= 24  # Adjust for the day change if exceeding 24 hours\n\n    flight_duration = time_diff - singapore_departure\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways_to_arrange = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5. \n    first_digit = 0  # Considering 0 is a multiple of every number, including 5\n\n    # Second digit: the smallest odd number among the natural numbers.\n    second_digit = 1\n\n    # Third digit: in a single digit, the largest odd number.\n    third_digit = 9\n\n    # Fourth place: in nature, the smallest even number.\n    fourth_digit = 2  # \"in nature\" implies natural numbers, starting from 0, 2 is the smallest even\n\n    # Fifth digit: the largest single digit that is a multiple of 2.\n    fifth_digit = 8\n\n    # Sixth digit: the smallest odd number greater than 1 in nature.\n    sixth_digit = 3\n\n    # Seventh digit: I don't know, but my home phone number is both a multiple of 2 and a multiple of 5.\n    seventh_digit = 0  # The only single digit number that is both a multiple of 2 and 5 is 0\n\n    ans = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "from itertools import product\n\ndef solution():\n    numbers = list(product('012345', repeat=4))\n    numbers = [int(''.join(num)) for num in numbers if num[0] != '0']\n    numbers.sort()\n\n    position = numbers.index(2015) + 1  # +1 because the position is 1 indexed\n    return position\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    pages_first_day = 20\n    increase_per_day = 5\n    pages_last_day = 80\n\n    # Since the number of pages read each day forms an arithmetic progression (AP),\n    # we can use the formula for the nth term of an AP to calculate the total days:\n    # a_n = a_1 + (n - 1)d\n    # where a_n is the nth term, a_1 is the first term, n is the number of terms, and d is the common difference\n    # Here, a_n is pages_last_day, a_1 is pages_first_day, and d is increase_per_day.\n\n    # We need to find the number of terms. Let's denote it by n:\n    # 80 = 20 + (n - 1) * 5\n    # 80 = 20 + 5n - 5\n    # 60 = 5n - 5\n    # 65 = 5n\n    # n = 13\n    # So Danny read for 13 days.\n\n    total_days = (pages_last_day - pages_first_day + increase_per_day) // increase_per_day\n    \n    # Now we can find the total number of pages read using the sum formula for an AP:\n    # S_n = n/2 * (2a_1 + (n - 1) * d)\n    # where S_n is the sum of n terms.\n    total_pages = (total_days / 2) * (2 * pages_first_day + (total_days - 1) * increase_per_day)\n\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    # Since the roots are positive integers and the \n    # product of the roots is 2520, we look for factors of 2520.\n    # The sum of the two integer roots will be maximum when their \n    # difference is minimized. Hence, we look for two factors of 2520 \n    # that are closest to each other.\n    \n    factors = []\n    for i in range(1, int(2520**0.5)+1):\n        if 2520 % i == 0:\n            factors.append(i)\n            factors.append(2520//i)\n    \n    # Remove duplicate factors and sort the list\n    factors = sorted(set(factors))\n    \n    # Find the pair of factors with the minimum difference\n    max_m = 0\n    for i in range(len(factors)//2):\n        # Sum of the factors is -m (by Vieta's formulas)\n        m = -(factors[i] + factors[-(i+1)])\n        # We find the least negative value, which corresponds to maximum |m|\n        if m > max_m:\n            max_m = m\n    \n    return -max_m  # We return positive value of m\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Checking Johnny's method\n    # He multiplies the quotient by the remainder, which is incorrect.\n    # Instead, he should multiply the quotient by the divisor and then add the remainder.\n    incorrect_total = quotient * remainder + divisor # This is Johnny's incorrect calculation\n    \n    # Correct working\n    correct_total = quotient * divisor + remainder # The correct calculation\n    \n    # Check if Johnny's answer is correct by comparing his total with the correct total\n    if incorrect_total == correct_total:\n        # Johnny's answer is unexpectedly correct, but his method was wrong\n        # This should not happen based on the arithmetic, but the logic structure allows for the comparison.\n        return correct_total\n    else:\n        # If not correct, return the correct total\n        return correct_total \n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))  # 4 + 8 + ... + 54\n    sum_negative = sum(range(2, 53, 4))  # 2 + 6 + ... + 52\n    \n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    for num in range(1, 6*7*8):\n        if num % 6 == 3 and num % 7 == 4 and num % 8 == 1:\n            return num\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        if S == 0 or G == 0:  # Ensure S and G are not zero for 5-digit numbers\n            continue\n        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Find the total number of terms before the first 11 appears\n    total_terms = sum(range(1, 11))\n    \n    # Since the pattern repeats the number i, i times, we can directly find the middle term\n    # As the number of terms is even, we take the average of the two middle terms\n    median_index1 = total_terms // 2\n    median_index2 = median_index1 + 1\n    \n    # To find the median, we need to locate which number corresponds to these positions\n    # We use a simple loop to find the numbers that correspond to these positions\n    count = 0\n    for i in range(1, 11):\n        count += i\n        if count >= median_index1:\n            median_number1 = i\n            break\n            \n    # The second median_number will be the same as median_number1 \n    # because of the way numbers are repeated in the sequence\n    median_number2 = median_number1\n\n    # Calculate the median as the average of the two median numbers\n    median = (median_number1 + median_number2) / 2\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n\n    equation = Eq((65 - cut_length), 3 * (29 - cut_length))\n\n    solved = solve(equation, cut_length)\n\n    return solved[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n\n    expected_number_of_fives = total_rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    lhs_numerator = 12\n    lhs_denominator = 18\n    rhs_denominator = 6\n\n    # To find the equivalent fraction's numerator (□) such that 12/18 = □/6,\n    # we need to make sure that the two fractions are proportional.\n    # We can find the value of □ by cross multiplying and then solving for □.\n    \n    rhs_numerator = (lhs_numerator * rhs_denominator) / lhs_denominator\n    return rhs_numerator\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Equations based on the given ratios\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n\n    # Equation based on the average\n    equation3 = Eq((A + B + C)/3, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_spent = 441\n    dresses_cost = 6 * 7 * x\n    skirts_cost = 3 * 35\n    total_cost_eq = Eq(dresses_cost + skirts_cost, total_spent)\n\n    dress_cost = solve(total_cost_eq, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 options for each digit because odd digits are 1, 3, 5, 7, 9\n    options_per_digit = 5\n    \n    # Since we want a 3-digit number where all digits are odd,\n    # we simply raise the number of options for a single digit to the power of 3.\n    ans = options_per_digit ** 3\n    \n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    energetic_days = 12\n    together_days = 8\n\n    energetic_rate = 1 / energetic_days\n    together_rate = 1 / together_days\n\n    lazy_rate = together_rate - energetic_rate\n    lazy_days = 1 / lazy_rate\n\n    return lazy_days\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder = 0\n    for i in range(1, 1000, 2):\n        remainder += (i**2) % 3\n    remainder = remainder % 3\n    return remainder\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "from sympy import symbols, solve\n\ndef solution():\n  t = symbols('t')\n  # Solve the quadratic equation for t\n  roots = solve(t**2 + t - 1, t)\n  \n  # Since we need the positive root of the quadratic equation\n  t_positive = max(roots)\n  \n  # For the equation (at+m)(bt+m) = 31m to hold true, a and b must be 1 and 31 or some factors of 31\n  # Since the question specifies that a and b are positive integers, and 31 is prime,\n  # the only way to write 31 as a product of positive integers is 1 * 31 or 31 * 1.\n  # Let's try with a=1 and b=31. If a=1, b must equal 31 to fulfill the equation (1*t + m)(31*t + m) = 31m.\n  a = 1\n  b = 31\n  \n  # Now, calculate the value of ab\n  ab = a * b\n  \n  return ab\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    # Nell's ratio portion\n    nell_ratio = 4\n    # Joe's ratio portion\n    joe_ratio = 5\n    # Nell's sweets\n    nell_sweets = 24\n    # Calculate the total number of sweets based on the given ratio and the number of sweets Nell received\n    total_sweets = (nell_sweets / nell_ratio) * (nell_ratio + joe_ratio)\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11  # the position of the student\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # nth_term = first_term + (n - 1) * common_difference\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jamie-Anne's stamps as J and Natasha's stamps as N\n    J, N = symbols('J N')\n\n    # Equation representing the ratio of the stamps\n    equation1 = Eq(J / N, 5/3)\n    # Equation representing the difference in the number of stamps\n    equation2 = Eq(J - N, 18)\n\n    # Solving the equations for J and N\n    solutions = solve((equation1, equation2), (J, N))\n\n    # Calculating the total number of stamps\n    total_stamps = solutions[J] + solutions[N]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # Searching for the possible digits for a and b that satisfy the equation \n    # a*10 + b + b*10 + a + b = a*100 + a*10 + b\n    for a in range(10):\n        for b in range(10):\n            if a*10 + b + b*10 + a + b == a*100 + a*10 + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n    \n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    mina_coins_left = solutions[mina] - 12\n    return mina_coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "from sympy import symbols, solve\n\ndef solution():\n    pig = symbols('pig')\n    sheep = symbols('sheep')\n    dog = symbols('dog')\n\n    equation1 = 2 * pig - 3 * sheep\n    equation2 = 2 * sheep - 6 * dog\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pig, sheep, dog))\n\n    # Extract the weight of one dog from the solution\n    one_dog_weight = solutions[dog]\n\n    return one_dog_weight\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # Convert pounds to pence\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121):\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Number of lamp posts between the first and the eleventh is 11 - 1 = 10\n    # Uncle Sam cycles past 10 lamp posts in 50 seconds\n    # Therefore, in 1 second, Uncle Sam cycles past 10 / 50 lamp posts\n    lamp_posts_per_second = 10 / 50\n\n    # In 80 seconds, Uncle Sam will cycle past 80 seconds * lamp_posts_per_second lamp posts\n    # We also add 1 because he cycles past the first lamp post at the beginning\n    total_lamp_posts = (80 * lamp_posts_per_second) + 1\n\n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    corner_flowers = 4\n    total_sides = 4\n\n    # Since there is a flower at each corner, we must subtract the corner flowers \n    # from each side to avoid double-counting. Because each corner is shared by two sides, \n    # we divide corner flowers by 2.\n    total_flowers = (flowers_per_side - corner_flowers // 2) * total_sides\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Equations based on the problem description\n    equation = Eq((2/3 - 1/9) * total_items, 12 + (1 - 2/3 - 1/9) * total_items)\n\n    # Solve for the total number of items\n    total_items_solution = solve(equation, total_items)[0]\n\n    # Calculate the number of lemons\n    lemons = total_items_solution * (1 - 2/3 - 1/9)\n\n    return int(lemons)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place has a value of 800\n    hundreds_digit = 8\n    \n    # The digit in the ones place is the sum of all the factors of 4\n    factors_of_4 = [1, 2, 4]\n    ones_digit = sum(factors_of_4)\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place\n    tens_digit = hundreds_digit - ones_digit\n    \n    # The tens digit can't be negative, so we check\n    if tens_digit < 0:\n        return None\n    \n    # The digit in the ten-thousands place is 4 since the number is between 40000 and 50000\n    ten_thousands_digit = 4\n    \n    # Construct the number\n    number = (ten_thousands_digit * 10000 +\n              thousands_digit * 1000 +\n              hundreds_digit * 100 +\n              tens_digit * 10 +\n              ones_digit)\n\n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    return 6 - 18\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_additional_length = 56\n\n    football_field_length = basketball_court_length + football_field_additional_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = (original_price - 67.50) / original_price\n    return ana_discount * 100\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    s = 1\n    while True:\n        r = (3 / 10) * s\n        if r > int(r):\n            r = int(r) + 1\n        else:\n            r = int(r)\n\n        if (3 / 10) < (r / s) < (5 / 16):\n            return s\n        else:\n            s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    \n    total_steering_wheels = total_two_days / (5/6)\n    \n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint, prod\n\n    # Factorize 28 to get the prime factors\n    prime_factors = factorint(28)\n    \n    # To get a perfect square, all prime factors must have an even power\n    # We need to find the smallest number that when multiplied by 28\n    # will make all prime factor powers even\n\n    # If the power is odd, we must multiply by the prime itself\n    # to make it even\n    smallest_multiplier = 1\n    for prime, power in prime_factors.items():\n        if power % 2 != 0:\n            smallest_multiplier *= prime\n    \n    return smallest_multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    pancakes_in_12_minutes = (12 / time_for_2_pancakes) * 2\n    \n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    climb_distance_per_period = 3\n    climbing_period = 10\n    rest_period = 3\n    total_tree_height = 12\n\n    # Total time taken is the climbing time periods plus rest time periods\n    total_climbing_time = 0\n    height_climbed = 0\n\n    while height_climbed < total_tree_height:\n        height_climbed += climb_distance_per_period\n        total_climbing_time += climbing_period\n        \n        # Check if the koala has reached or exceeded the height\n        if height_climbed >= total_tree_height:\n            break\n        \n        # If not yet at the top, the koala rests\n        total_climbing_time += rest_period\n\n    return total_climbing_time\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n\n    # Pigeonhole principle: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # Here we calculate the minimum number of students wearing the same size of uniforms,\n    # which is the ceiling of the total number of students divided by the number of sizes\n    min_students_per_size = (total_students + num_sizes - 1) // num_sizes\n\n    return min_students_per_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    \n    inner_result = triangle_operation(6, 4)\n    final_result = triangle_operation(8, inner_result)\n    \n    return final_result\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    \n    equation = Eq(salary - 740 - (3/4) * (salary - 740), (1/5) * salary)\n    \n    solved_salary = solve(equation, salary)\n    \n    return solved_salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    russell_present = symbols('russell_present')\n    \n    # Equation representing the problem statement\n    equation = Eq(russell_present + 32, 4 * (russell_present - 16))\n    \n    # Solving the equation\n    russell_age = solve(equation, russell_present)[0]\n    \n    return russell_age\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_seats_as_children = 40\n    seats_taken_by_children = 15\n    remaining_seats_as_children = total_seats_as_children - seats_taken_by_children\n    \n    # Ratio of the number of children seats to the number of adult seats\n    child_to_adult_ratio = 40 / 24\n    \n    # Converts the remaining seats for children into the equivalent number of seats for adults\n    remaining_seats_as_adults = remaining_seats_as_children / child_to_adult_ratio\n    \n    return int(remaining_seats_as_adults)\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # The numbers 6 and 19 are directly opposite to each other in the circle\n    # This means that the number of people between them (inclusive of 6 and 19)\n    # is equal to half the circle.\n    # If we subtract 6 from both numbers and then find the difference between them,\n    # we essentially calculate the number of people between the two positions.\n    # That number, doubled, will give us the total number of people in the game.\n    \n    difference = 19 - 6\n    total_people = difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * C + 100 * A + 10 * A + B\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for the initial number of students\n    students_6A, students_6B = symbols('students_6A students_6B')\n\n    # First condition: 6A had 4/9 of the students of 6B\n    equation1 = Eq(students_6A, 4/9 * students_6B)\n\n    # After reshuffling, students in 6A became students in 6B\n    # Remember that 3 students went from 6A to 6B and 18 students went from 6B to 6A\n    equation2 = Eq(students_6A - 3 + 18, students_6B + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (students_6A, students_6B))\n\n    return solutions[students_6A]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # Cutting a rod into two pieces takes 2 minutes which means each cut takes 2 minutes\n    # To cut it into 5 pieces requires 4 cuts\n    number_of_cuts = 5 - 1\n    time_per_cut = 2\n    total_time = number_of_cuts * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey walks up 3 floors in 6 minutes\n    floors_walked_initially = 3\n    time_taken_initially = 6\n    \n    # Calculate time taken to walk from first floor to the tenth floor\n    floors_to_walk_now = 9  # because he starts at the first floor\n    time_per_floor = time_taken_initially / floors_walked_initially\n    time_taken_now = time_per_floor * floors_to_walk_now\n    \n    return time_taken_now\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n    \n    # Calculate the proportional amount of chocolate needed\n    chocolate_needed = (chocolate_original / biscuits_original) * biscuits_available\n    \n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    zhang_speed = 5\n    li_speed = 4\n    li_lead_time = 2  # hours Li is ahead by starting earlier\n    zhang_li_travel_time = 12  # hours from 6 AM to 6 PM\n\n    li_distance = li_speed * (zhang_li_travel_time + li_lead_time)\n    zhang_distance = zhang_speed * zhang_li_travel_time\n\n    # Zhao catches up to Zhang at 6 PM, so they traveled the same distance\n    zhao_travel_time = zhang_li_travel_time - li_lead_time\n    zhao_speed = zhang_distance / zhao_travel_time\n\n    # Calculate the time when Zhao catches up to Li\n    # They must have traveled the same distance at that time\n    li_time_to_meet = li_distance / (li_speed + zhao_speed)\n\n    # Zhao starts at 8 AM, so to calculate the time he catches up to Li\n    # Convert the meeting time to hours and minutes\n    zhao_meet_time = 8 + li_time_to_meet\n    zhao_meet_hour = int(zhao_meet_time)\n    zhao_meet_minutes = int((zhao_meet_time - zhao_meet_hour) * 60)\n\n    # Time formatted as HH:MM AM/PM\n    if zhao_meet_hour > 12:\n        zhao_meet_hour -= 12\n        zhao_meet_ampm = \"PM\"\n    else:\n        zhao_meet_ampm = \"AM\"\n\n    zhao_meet_str = f\"{zhao_meet_hour}:{str(zhao_meet_minutes).zfill(2)} {zhao_meet_ampm}\"\n    return zhao_meet_str\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    days_in_a_week = 7\n\n    total_earnings = average_earnings_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_types = 2\n    sauce_types = 3\n    topping_types = 2\n\n    combinations = pasta_types * sauce_types * topping_types\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "from math import factorial\nfrom itertools import permutations\n\ndef is_divisible_by_n(number, n):\n    return number % n == 0\n\ndef solution():\n    possible_values_of_n = []\n    \n    for n in range(1, 10):\n        all_perms = list(permutations(range(1, n + 1)))\n        count_divisible = 0\n        \n        for perm in all_perms:\n            number = int(''.join(map(str, perm)))\n            if is_divisible_by_n(number, n):\n                count_divisible += 1\n        \n        probability = count_divisible / len(all_perms)\n        \n        if probability == 1 / n:\n            possible_values_of_n.append(n)\n    \n    return sum(possible_values_of_n)\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    books_per_spelling_shelf = 9\n    \n    # Find the number of shelves with spelling books\n    spelling_shelves = total_spelling_books / books_per_spelling_shelf\n    \n    # Find the number of shelves with math books\n    math_shelves = total_shelves - spelling_shelves\n    \n    # Each shelf with math books contains 4 books\n    math_books_per_shelf = 4\n    \n    # Total number of math books\n    total_math_books = math_shelves * math_books_per_shelf\n    \n    return int(total_math_books)\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    return (22 - 8) * 2 - (16 - 8) * 2\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # speed and distance for each segment\n    speed1 = 7  # meters per second\n    distance1 = 280  # meters\n\n    speed2 = 5  # meters per second\n    distance2 = 400  # meters\n\n    speed3 = 8  # meters per second\n    # total distance minus the sum of the first two segments\n    distance3 = 800 - (distance1 + distance2)  # meters\n\n    # time = distance / speed for each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # total time is the sum of times for each segment\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define Anna, Betsy, and Charlene's marbles with symbols\n    A, B, C = symbols('A B C')\n\n    # Let's set up our equations according to the problem description\n    # Total number of marbles\n    eq_total = Eq(A + B + C, 168)\n    \n    # After Charlene gave to Betsy\n    eq_charlene_to_betsy = Eq(C - 15, 7/14 * (A + (B + 15) + (C - 15)))\n    \n    # After Betsy gave to Anna\n    eq_betsy_to_anna = Eq(B + 15 - 8, 5/14 * (A + 8 + (B + 15 - 8) + (C - 15)))\n    \n    # Anna's marbles in terms of the ratio\n    eq_anna_marbles = Eq(A + 8, 2/14 * (A + 8 + (B + 15 - 8) + (C - 15)))\n\n    # Solve the system of equations\n    solutions = solve((eq_total, eq_charlene_to_betsy, eq_betsy_to_anna, eq_anna_marbles), (A, B, C))\n\n    # Betsy's marbles initially\n    betsy_initial_marbles = solutions[B]\n\n    return betsy_initial_marbles\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    brother_speed = 90\n    sister_speed = 60\n    encounter_distance_from_school = 180\n\n    # Brother's total distance when meeting his sister\n    brother_distance = 2 * encounter_distance_from_school\n\n    # Brother and sister meet at the same time, thus:\n    # Time for brother = brother_distance / brother_speed\n    # Time for sister = sister_distance / sister_speed\n    # brother_distance = sister_distance + encounter_distance_from_school\n    # brother_speed / sister_speed = (sister_distance + encounter_distance_from_school) / sister_distance\n    # (brother_speed / sister_speed) * sister_distance = sister_distance + encounter_distance_from_school\n    # sister_distance * (brother_speed / sister_speed - 1) = encounter_distance_from_school\n    sister_distance = encounter_distance_from_school / (brother_speed / sister_speed - 1)\n\n    # Distance from home to school = sister_distance + encounter_distance_from_school\n    distance_from_home_to_school = sister_distance + encounter_distance_from_school\n    return distance_from_home_to_school\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    # The total number of permutations is the factorial of total cards \n    # divided by the product of the factorials of the counts of identical cards.\n    ans = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the number of lollipops and g be the number of gum drops\n    l, g = symbols('l g')\n\n    # Initial ratio equation: 5/7 = l/g\n    equation1 = Eq(5 * g, 7 * l)\n\n    # After adding 120 to each, the new ratio is 4/5\n    equation2 = Eq(4 * (g + 120), 5 * (l + 120))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (l, g))\n\n    # Calculate total number of candies now\n    total_candies = solutions[l] + 120 + solutions[g] + 120\n\n    return total_candies\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    digits = 0\n    for i in range(1, 268+1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "from math import gcd\n\ndef solution():\n    length = 1.36  # length in meters\n    width = 0.8    # width in meters\n\n    # Convert to centimeters to avoid float precision issues\n    length_cm = int(length * 100)\n    width_cm = int(width * 100)\n\n    # Find the greatest common divisor to determine the largest square side length\n    square_side = gcd(length_cm, width_cm)\n\n    # Calculate the number of squares that can be cut from the paper\n    num_squares = (length_cm // square_side) * (width_cm // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the contribution of Professor Xu, y be the contribution of Professor Linlin,\n    # and z be the contribution of Professor Zhipeng.\n    x, y, z = symbols('x y z')\n    # Professor Xu contributes half of what the other two professors combined contribute\n    eq1 = Eq(x, (y + z) / 2)\n    # Professor Linlin contributes one-third of what the other two professors combined contribute\n    eq2 = Eq(y, (x + z) / 3)\n    # Professor Zhipeng contributes 400 yuan more than Professor Linlin\n    eq3 = Eq(z, y + 400)\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n    # Total cost of the set of encyclopedias\n    total_cost = solutions[x] + solutions[y] + solutions[z]\n    return total_cost\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    total_numbers = 200\n    \n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_5_and_7 = total_numbers // (5 * 7)\n    \n    # Applying the inclusion-exclusion principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    \n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's purchase\n    eq1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n\n    # Dylan's purchase\n    eq2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "import math\n\ndef solution():\n    # Given that each team plays against each other team twice (home and away), we can represent\n    # the total number of matches (M) using the combination formula with repetition:\n    # M = n * (n - 1), where n is the number of teams.\n    # Here, M is given as 30, so we need to solve for n: 30 = n * (n - 1) / 2.\n    \n    # This is a quadratic equation in the form of a*x^2 + b*x + c = 0.\n    # Let's identify a, b, and c for our equation.\n    a = 1\n    b = -1\n    c = -2 * 30  # Multiply by 2 to move it to the right side of the equation. \n    \n    # Now we use the quadratic formula to solve for n: n = (-b + sqrt(b^2 - 4*a*c)) / (2*a).\n    # The negative solution would not make sense in this context, so we'll use the positive one.\n    discriminant = b**2 - 4*a*c\n    n = (-b + math.sqrt(discriminant)) / (2*a)\n    \n    # Since the number of teams must be an integer, we round up n to the nearest integer.\n    return math.ceil(n)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1350):  # Check all numbers with missing 0 up to 1350 (because 1350 with the 0 is 13500 and it's only 1350 more).\n        if i * 10 == i + 135:  # When we add the 0, the number should be 135 more than the original without the 0.\n            return i * 10  # Return the original number with the 0.\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n\n    # Since the boat can carry 5 people, and one of them has to bring the boat back,\n    # effectively only 4 people can be transported per full round trip (to and back).\n    # Except for the last trip where no one needs to come back.\n    full_trips_needed = (students - boat_capacity) // (boat_capacity - 1)\n    remaining_students = (students - boat_capacity) % (boat_capacity - 1)\n\n    # Calculate the number of trips:\n    # Each full round trip counts as 2 (to and back).\n    # The last trip to take the remaining students, plus one final return if there is no student left to bring the boat back.\n    total_trips = full_trips_needed * 2 + (1 if remaining_students > 0 else 0) + 1\n\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # percentage of students who chose either Grade A or Grade B\n    both_subjects_percentage = 80 + 35 - 10  # using the principle of inclusion-exclusion\n    \n    # Now, 100% - both_subjects_percentage = percentage of students who chose both subjects\n    percentage_chosen_both = 100 - both_subjects_percentage\n\n    # students who chose both subjects as a percentage\n    students_chosen_both = percentage_chosen_both\n\n    # calculate the total students involved in the streaming exercise\n    total_students = 75 * 100 / students_chosen_both\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    hundreds = 3\n    tens = 2\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n\n    # Function to count factors\n    def count_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Make a list of numbers that have a unique number of factors\n    unique_factors = {}\n    for i in range(1, 14):\n        factors = count_factors(i)\n        if factors not in unique_factors:\n            unique_factors[factors] = [i]\n        else:\n            unique_factors[factors].append(i)\n\n    # Filter out the ones that don't have unique number of factors\n    unique_factors = {k: v for k, v in unique_factors.items() if len(v) == 1}\n\n    # Check through combinations to find Alice and May\n    for papers in combinations(range(1, 14), 9):\n        alices_numbers = [n for n in papers if n % 2 != 0]\n        for alice in alices_numbers:\n            if count_factors(alice) in unique_factors:\n                for may in papers:\n                    if may == alice - 2:\n                        for mark in papers:\n                            if mark == may - 1:\n                                not_picked = [n for n in range(1, 14) if n not in papers]\n                                return not_picked[0] * not_picked[1] * not_picked[2] * not_picked[3] \n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "from math import factorial\n\ndef solution():\n    numerator = factorial(100)\n    denominator = factorial(99) + factorial(98)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    distance = 720\n    downstream_time = 15\n    current_speed = 4\n    \n    # Calculate the velocity of the cruise ship in still water when going downstream\n    downstream_velocity = distance / downstream_time\n    \n    # The upstream velocity is the downstream velocity minus twice the current speed\n    upstream_velocity = downstream_velocity - 2 * current_speed\n    \n    # Calculate the time to return from pier B to pier A\n    upstream_time = distance / upstream_velocity\n    \n    return upstream_time\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '4', '6', '9']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    sum_of_all_numbers = sum([int(number) for number in all_numbers])\n    average = sum_of_all_numbers / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the original number of boys and g represent the original number of girls\n    b, g = symbols('b g')\n    \n    # The original number of boys and girls is equal\n    equation1 = Eq(b, g)\n    \n    # After 60 boys and 12 girls left, twice as many girls as boys remained at the party\n    equation2 = Eq(g - 12, 2 * (b - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # We want to find the original number of boys\n    return solutions[b]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for x in range(1, 10):  # ones place\n        for y in range(10):  # tens place\n            if x != y and x + y == 15 and (10 * y + x) % 2 == 0:\n                return 900 + 10 * y + x\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # km/h\n    speed_car = 120  # km/h\n    lead_time = 3  # hours\n    \n    # Distance covered by the van during the 3 hour lead time\n    lead_distance = speed_van * lead_time\n    \n    # Relative speed between the car and van\n    relative_speed = speed_car - speed_van\n\n    # Time for the car to catch up\n    catch_up_time = lead_distance / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # From the given information:\n    # Hats (4 options + 1 option to not take a hat)\n    hat_options = 4 + 1\n\n    # Shirts (3 options, no option to not take a shirt as it's not stated as optional)\n    shirt_options = 3\n\n    # Pants (2 options, no option to not take pants as it's not stated as optional)\n    pants_options = 2\n\n    # Skirt (1 option, no option to not take the skirt as it's not stated as optional)\n    skirt_options = 1\n\n    # By the multiplication principle, we multiply the number of options for each type of clothing\n    # to get the total number of different combinations\n    total_combinations = hat_options * shirt_options * pants_options * skirt_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # X = 0.01010101... = 1/99\n    # So, X * X = (1/99) * (1/99) = 1/9801\n    repetend = \"0001\"  # Repetend of 1/9801 is \"0001\"\n    return len(repetend)\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the rate of printing for each printer (pages per minute)\n    rate_A = 300 / 12\n    rate_B = 300 / 10\n    \n    # Calculate the combined rate of both printers\n    combined_rate = rate_A + rate_B\n    \n    # Convert half an hour to minutes\n    minutes = 0.5 * 60\n    \n    # Calculate the number of pages printed by both printers in half an hour\n    pages_printed = combined_rate * minutes\n    \n    return int(pages_printed)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # 2/3 of total items are apples\n    apples_fraction = 2 / 3\n    apples = apples_fraction * total_items\n\n    # 1/9 of total items are bananas\n    bananas_fraction = 1 / 9\n    bananas = bananas_fraction * total_items\n\n    # The rest are lemons\n    lemons = total_items - apples - bananas\n\n    # There are 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve for the amount of lemons\n    solution = solve(equation, total_items)\n\n    if solution:\n        lemons_count = lemons.subs(total_items, solution[0])\n        return lemons_count\n    else:\n        return None\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    original_difference = 2022 - A\n    increased_A = A + 10\n    reduced_difference = original_difference - 32\n    new_difference = reduced_difference\n    new_2022 = increased_A + new_difference\n    return new_2022\n\nA = symbols('A')\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # We create the equation based on the ratio given 3:4:2\n    equation1 = Eq(durian, chocolate * 3/4)\n    equation2 = Eq(strawberry, chocolate * 2/4)\n    equation3 = Eq(durian * 5 + chocolate * 3 + strawberry * 4, 560)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Calculate the amount collected from durian puffs\n    amount_collected_from_durian = solutions[durian] * 5\n\n    return amount_collected_from_durian\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from itertools import permutations\n\n    # All possible permutations of floors for A, B, C, D\n    permutations_of_floors = list(permutations(range(1, 19), 4))\n\n    for A, B, C, D in permutations_of_floors:\n        # Condition 1: A is higher than C, but lower than D\n        if not (C < A < D):\n            continue\n\n        # Try all possible permutations of names for Zachary, Yvonne, Xavier, Waylon\n        # Assigned to floors A, B, C, D respectively\n        for Zachary, Yvonne, Xavier, Waylon in permutations([A, B, C, D]):\n            # Condition 2: B is lower than Xavier\n            if B >= Xavier:\n                continue\n\n            # Condition 3: D is 5 times Yvonne’s floor\n            if D != 5 * Yvonne:\n                continue\n\n            # Condition 4: If Zachary moves up two floors, the difference between his new floor\n            # and Xavier's floor is equal to the difference between Zachary's new floor and Waylon's floor\n            if abs((Zachary + 2) - Xavier) != abs((Zachary + 2) - Waylon):\n                continue\n\n            # Condition 5: Zachary's floor is the sum of Yvonne and Xavier's floors\n            if Zachary != Yvonne + Xavier:\n                continue\n\n            # Since all conditions are satisfied, return the answer (which is A)\n            return A\n\n    return None\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Consider a 7x5x14 cuboid which has been cut into 1x1x1 cubes.\n    # There are 4 corners that have exactly 3 faces painted.\n    # Since the cuboid will be symmetric, all the corners will have 3 painted faces.\n    # The corners are on the vertices of the cuboid, and there will be 8 such corners for a cuboid.\n\n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for units in range(10):\n            original_number = (10 * tens) + units\n            new_number = (10 * units) + tens\n            if new_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 0.06\n    second_interest_rate = 0.08\n    \n    # Compound interest for the first three years\n    amount_after_first_period = initial_investment * (1 + first_interest_rate) ** 3\n    \n    # Compound interest for the last two years\n    final_amount = amount_after_first_period * (1 + second_interest_rate) ** 2\n    \n    # Round to the nearest hundredth\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "from sympy import symbols, Eq, solve, sqrt\n\ndef solution():\n    n = symbols('n', integer=True)\n    consecutive_cubes_eq = Eq((n + 1)**3 - n**3, n**2)\n    perfect_square_eq = Eq(2*n + 79, (n + 1)**2)\n    solutions = solve((consecutive_cubes_eq, perfect_square_eq), n)\n    max_positive_n = max([sol for sol in solutions if sol.is_real and sol > 0])\n    return int(max_positive_n)\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from the three schools\n    school_a = 24\n    school_b = 36\n    school_c = 42\n\n    # Find the greatest common divisor of the three numbers\n    gcd_ab = gcd(school_a, school_b)\n    largest_team_size = gcd(gcd_ab, school_c)\n\n    return largest_team_size\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let S_n denote the sum of the first n terms of an arithmetic sequence,\n    # with S_9 = 99 and S_27 = 540.\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d), where a is the first term and d is the common difference.\n\n    # So we have two equations:\n    # S_9 = 9/2 * (2a + 8d) = 99\n    # S_27 = 27/2 * (2a + 26d) = 540\n    \n    # Solve for a and d using these two equations\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq(9 / 2 * (2 * a + 8 * d), 99)\n    equation2 = Eq(27 / 2 * (2 * a + 26 * d), 540)\n    \n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Having found a and d, now we find the sum of the first 16 terms\n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    S_16 = 16 / 2 * (2 * a_val + (16 - 1) * d_val)\n    \n    return S_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    permutation_list = list(permutations(digits))\n    return len(permutation_list)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z', integer=True)\n    \n    # Define the equations based on the given conditions\n    eq1 = Eq(abs(x + y) + abs(y + z) + abs(z + x), 4)\n    eq2 = Eq(abs(x - y) + abs(y - z) + abs(z - x), 2)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y, z))\n    \n    # Find the value of x^2 + y^2 + z^2 that satisfies the conditions x <= y <= z\n    for sol in solutions:\n        if sol[x] <= sol[y] and sol[y] <= sol[z]:\n            ans = sol[x]**2 + sol[y]**2 + sol[z]**2\n            return ans\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digit_numbers = 9 - 7 + 1\n    double_digit_numbers = 40 - 10 + 1\n    return single_digit_numbers * 1 + double_digit_numbers * 2\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage: 4 teams each group play in a round-robin manner\n    # Each team plays 3 matches (4 teams -> 6 matches in each group)\n    group_games_per_group = (4 * 3) // 2  # Every pair plays one game\n    total_group_games = group_games_per_group * 8  # 8 groups\n\n    # Knockout stage: Round of 16, Quarter-finals, Semi-finals, Third place and Final\n    round_of_16 = 16 // 2  # 16 teams, every pair plays one game -> 8 games\n    quarter_finals = 8 // 2   # 8 teams -> 4 games\n    semi_finals = 4 // 2     # 4 teams -> 2 games\n    # Third place match and Final match are 1 game each\n    third_place_final = 2  # Two matches, one for third place, one for final\n\n    total_knockout_games = round_of_16 + quarter_finals + semi_finals + third_place_final\n\n    # Total number of games\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Find the least common multiple (LCM) of the two flashing frequencies.\n    from math import gcd\n    \n    flashes_per_minute_red = 4\n    flashes_per_minute_green = 6\n    \n    lcm = (flashes_per_minute_red * flashes_per_minute_green) // gcd(flashes_per_minute_red, flashes_per_minute_green)\n    \n    # Calculate how many times they flash together per minute\n    flashes_together_per_minute = 1  # LCM implies they flash together once per this time period\n    \n    # Number of times they flash together in one hour\n    num_minutes_in_hour = 60\n    num_flashes_together = flashes_together_per_minute * num_minutes_in_hour\n    \n    return num_flashes_together\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(3 * number + 1, 22)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # The number 2019 repeated 2019 times is equivalent to 2019^2019\n    # To find the remainder of a number divided by 9, we can use the digital root (repeated sum of digits)\n    # until we have a single digit, which is the remainder when that number is divided by 9.\n    # The digital root of 2019 is 2 + 0 + 1 + 9 = 12 and again 1 + 2 = 3.\n    # Since 2019 is congruent to 3 modulo 9, we now need to find the remainder when 3^2019 is divided by 9.\n\n    base_remainder = 3\n    exponent = 2019\n\n    # Since 3^2 = 9, which gives a remainder of 0 when divided by 9,\n    # and 3^3 gives a remainder of -1 (or 8) when divided by 9,\n    # we can see a pattern (3^odd_exponent will have a remainder of 3 and 3^even_exponent will give 0)\n    # Hence, the remainder cycles through a pattern of [3, 0, 3, 0, ...] for 3^n.\n\n    # To find the remainder for the 2019th power,\n    # we need to check if 2019 is odd or even to determine the remainder.\n\n    remainder = base_remainder if exponent % 2 else 0\n\n    # Simplifying further since the power is odd, it's equivalent to 3^1 which is 3\n    return base_remainder\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_paintings = 40\n    landscapes = int(total_paintings * 0.4)\n    french_landscapes = 25\n    \n    still_lifes = total_paintings - landscapes\n    french_still_lifes = french_paintings - french_landscapes\n    not_french_still_lifes = still_lifes - french_still_lifes\n    \n    return not_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780\n    max_volume_per_glass = total_volume // 9\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_rice_weight = (100 * 0.50) + (400 * 0.80)\n    total_weight = 100 + 400\n    concentration_of_rice = total_rice_weight / total_weight\n    return concentration_of_rice * 100\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    number = 0\n\n    for i in range(2017):\n        number = number * 10 + 2\n        total_sum += number\n\n    return total_sum % 100000\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # The total amount of hay needed to feed each horse for one day\n    total_hay = 12 * 15\n\n    # The number of days the total hay can feed 20 horses\n    days_for_20_horses = total_hay / 20\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for num in range(1000, 10000):\n        first_digit = num // 1000\n        remaining_digits = num % 1000\n        new_num = remaining_digits * 10 + first_digit\n        if new_num - num == 4707:\n            return num\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    sum_of_ages_target = 48\n\n    # Let x be the number of years to add to their current ages\n    # Oliver's age in x years: oliver_age_now + x\n    # Lin's age in x years: lin_age_now + x\n    # Sum of their ages in x years: (oliver_age_now + x) + (lin_age_now + x) = sum_of_ages_target\n\n    x = (sum_of_ages_target - (oliver_age_now + lin_age_now)) / 2\n  \n    return int(x)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda num: abs(num - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    number = 35\n    while True:\n        if str(number).endswith('35') and sum_of_digits(number) == 35:\n            return number\n        number += 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    total_money = 8 * y\n    watch = 4 * y\n    handbag = 20\n    remaining = total_money - watch - handbag\n    \n    child_received = 2 * (y - 5)\n    \n    equation = Eq(remaining, child_received)\n    solution = solve(equation, y)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = 0\n    for year in range(1901, 2000):\n        if (year % 4 == 0):\n            leap_years += 1\n    regular_years = 99 - leap_years\n    days = (leap_years * 366) + (regular_years * 365)\n    return days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit = 10\n    spend = 8\n\n    # Since the pattern repeats every 2 days, calculate the full cycles first\n    cycles = days // 2\n    amount_after_cycles = initial_amount + (deposit - spend) * cycles\n\n    # Check if there's an incomplete cycle (an odd day)\n    if days % 2 != 0:\n        amount_after_cycles += deposit  # He deposits on odd numbered days (1st, 3rd, ...)\n\n    ans = amount_after_cycles\n    return ans\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 3 != 0 and number % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12  # number of terms\n    a1 = 1  # first term\n    an = 12  # last term\n    # sum of an arithmetic sequence: n/2 * (a1 + an)\n    num_strikes = n * (a1 + an) / 2\n    return int(num_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_coins = 40 / 10  # number of ten-pence coins in 40 pence\n    total_weight = weight_per_coin * total_coins\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # The number of buttons Nina originally has is represented by n\n    # The number of buttons James originally has is represented by j\n    # We have the following system of equations:\n    # n + j = 22  (The total number of buttons)\n    # n - 4 = j + 4  (After Nina gives James 4 buttons, they have the same number)\n\n    # From the first equation: j = 22 - n\n    # Substitute j in the second equation:\n    # n - 4 = (22 - n) + 4\n    # Solve for n:\n    n = (22 + 4 + 4) // 2  # Simplifying the equation gives us n = 22 + 4 + 4 / 2\n\n    return n\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    for correct_answers in range(7):\n        wrong_answers = 6 - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (ratio_adults / total_ratio) * total_people\n\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # m/s\n    angle = 37  # degrees\n    g = 9.81  # m/s^2, acceleration due to gravity\n    \n    # height (h) can be found using conservation of energy:\n    # kinetic energy initial = potential energy at maximum height\n    # (1/2) * m * v^2 = m * g * h\n    # Solving for h gives h = (v^2) / (2 * g)\n    # However, v is not vertical; it's at an angle, so we must use the vertical component: v * sin(theta)\n    vertical_speed = initial_speed * math.sin(math.radians(angle))\n    \n    # Using the vertical_speed for v in the equation:\n    height = (vertical_speed ** 2) / (2 * g)\n    \n    # To find the distance along the ramp, we use the relationship:\n    # height = distance * sin(angle)\n    # distance = height / sin(angle)\n    distance = height / math.sin(math.radians(angle))\n    \n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    seat_numbers = 9\n    start_seat = 3\n\n    last_seat = (start_seat + total_candies - 1) % seat_numbers\n    if last_seat == 0:\n        last_seat = seat_numbers\n\n    return last_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "from math import factorial\n\ndef solution():\n    solo_performance = 4\n    chorus_performance = 3\n\n    # Place the 3 chorus performances first and last\n    # C _ _ _ _ C _ C\n\n    # There are 4 possible places to put the 4 solo performances\n    # between the chorus performances (not adjacent to chorus)\n    # Number of ways to distribute 4 solo performances in 4 places = 4!\n\n    # Hence, the number of arrangements for the solo performances\n    solo_arrangements = factorial(solo_performance)\n\n    # The total number of arrangements for the concert program\n    total_arrangements = solo_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # If Sheila is to take out 2 groups of 4 balls of the same colour, we consider the worst case scenario\n    # using the Pigeonhole Principle.\n\n    # Worst case: Sheila takes out all balls of one colour that is not enough to make up two groups of four\n    # and takes out three balls for each of the other colours (not enough to form a group of four for either).\n    # Then she takes out one more ball of any colour to ensure she has at least two groups of four of the same colour.\n\n    # She takes out all 5 blue balls (not enough for two groups of four).\n    blue_balls = 5\n\n    # She takes 3 orange and 3 yellow balls (3 each of the other two colours).\n    orange_balls = 3\n    yellow_balls = 3\n\n    # She takes out one more ball (this ensures she will have two groups of four of at least one colour).\n    one_more_ball = 1\n\n    # Total balls she must take out to guarantee 2 groups of 4 balls of the same colour is the sum of the above.\n    total_balls = blue_balls + orange_balls + yellow_balls + one_more_ball\n\n    return total_balls\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # In each match, 1 winner is decided and 3 players are knocked out.\n    # To determine the overall winner, all but one player have to be knocked out.\n    # Since there are 64 players, 63 players have to be knocked out to have one final winner.\n    # Since each match knocks out 3 players, the number of matches required is equal to the number of players knocked out.\n    \n    players_to_knockout = 64 - 1\n    players_knocked_per_match = 3\n\n    # Calculate the number of matches needed to knock out 63 players.\n    matches = players_to_knockout // players_knocked_per_match\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "from fractions import Fraction\nfrom math import gcd\n\ndef solution():\n    prob_same = 1/6 * 1/6  # Probability both get a six on the same roll\n    prob_diff_one = 5/6 * 1/6 * 1/6 * 2  # Probability one gets a six, the other doesn't, then the other does\n    \n    # Probability of getting a six within two rolls of the other\n    prob_close = prob_same + sum((5/6) ** (i + j) * (1/6)**2 * 2 for i in range(1, 100) for j in [i-1, i])\n    \n    # Simplify the fraction\n    fraction = Fraction(prob_close).limit_denominator()\n    m, n = fraction.numerator, fraction.denominator\n\n    # Since m and n are coprime, we can return their sum directly\n    return m + n\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    weight_cheese = 6\n    num_bags_flour = 4\n\n    weight_flour_bag = (total_weight - weight_cheese) / num_bags_flour\n\n    return weight_flour_bag\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming I need to include currency conversion logic here\n    # As the problem statement doesn't include the conversion rate,\n    # I will create a fictional conversion rate variable for British Pound (GBP) to Russian Ruble (RUB).\n\n    # Assuming 1 British Pound is equal to 100 Russian Rubles (fictional conversion rate)\n    conversion_rate = 100  # 1 GBP = 100 RUB\n\n    # Cost of one CD in England in GBP\n    cost_cd_gbp = 14\n\n    # Total amount Richard has in GBP\n    richard_money_gbp = cost_cd_gbp\n\n    # Convert Richard's money to Russian Rubles\n    richard_money_rub = richard_money_gbp * conversion_rate\n\n    # Assuming the cost of one CD in St Petersburg in Russian Rubles\n    # As the problem statement doesn't include the cost of a CD in St Petersburg,\n    # I will create a fictional cost variable for a CD in Russian Rubles.\n\n    # Fictional cost of one CD in St Petersburg\n    cost_cd_rub = 700  # Let's say 1 CD costs 700 RUB in St Petersburg\n\n    # Calculate the number of CDs Richard can buy in St Petersburg\n    num_cds = richard_money_rub // cost_cd_rub\n\n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    # Loop through the options\n    for age in [28, 39, 52, 84]:\n        square_age = (age - 3)\n        prime_age = (age + 1)\n        cube_age = (age + 12)\n        \n        # Check for square number\n        if square_age**0.5 != int(square_age**0.5):\n            continue\n        # Check for prime number\n        if not isprime(prime_age):\n            continue\n        # Check for cube number by cube root and ensuring it's an integer\n        cube_root = round(cube_age**(1/3), 10)\n        if cube_root != int(cube_root):\n            continue\n        \n        # If all checks pass, we found the age\n        return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To guarantee 2 M&M's of different colors, take all of one color plus one of another.\n    # If we pick all of the M&M's of one color (which has the smallest number) and\n    # one M&M of any other color, we are guaranteed to have 2 different colors.\n    \n    smallest_color_count = min(3, 4, 5)  # Number of M&M's of the color with smallest count (red)\n    ans = smallest_color_count + 1  # Take all M&M's of that color + 1 more to guarantee 2 different colors\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their speeds\n    andrew_speed, bernice_speed, cassandra_speed = symbols('andrew_speed bernice_speed cassandra_speed')\n    \n    # Set up the equations based on the problem statement\n    # When Andrew is at level 5, Bernice is at level 3\n    eq1 = Eq(andrew_speed * 5, bernice_speed * 3)\n    \n    # When Bernice is at level 6, Cassandra is already at level 10\n    eq2 = Eq(bernice_speed * 6, cassandra_speed * 10)\n    \n    # Solve the system of equations to find the relationship between their speeds\n    speeds = solve((eq1, eq2), (andrew_speed, bernice_speed, cassandra_speed))\n\n    # We only need the ratio between Andrew and Cassandra's speeds\n    andrew_to_cassandra_speed_ratio = speeds[andrew_speed] / speeds[cassandra_speed]\n\n    # When Cassandra is at level 19, find the level Andrew will be at, with their speed ratio\n    andrew_level_when_cassandra_is_at_19 = andrew_to_cassandra_speed_ratio * 19\n\n    return andrew_level_when_cassandra_is_at_19.evalf()\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    x = symbols('x')\n    equation = Eq(new_operation(2, new_operation(x, 4)), 59)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    # Given probabilities\n    prob_diagnose_cancer_given_cancer = 0.95\n    prob_diagnose_no_cancer_given_no_cancer = 0.9\n    prevalence_cancer = 0.0004\n    \n    # Probability of not having cancer\n    prob_no_cancer = 1 - prevalence_cancer\n    \n    # Probability of diagnosing cancer incorrectly (False Positive)\n    prob_diagnose_cancer_given_no_cancer = 1 - prob_diagnose_no_cancer_given_no_cancer\n    \n    # Use Bayes' Theorem to find the probability that Li Qiang actually has cancer\n    # given that he has been diagnosed with cancer\n    prob_cancer_given_diagnose_cancer = (prob_diagnose_cancer_given_cancer * prevalence_cancer) / (\n        (prob_diagnose_cancer_given_cancer * prevalence_cancer) + \n        (prob_diagnose_cancer_given_no_cancer * prob_no_cancer)\n    )\n\n    # Round the result to 3 decimal places\n    return round(prob_cancer_given_diagnose_cancer, 3)\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # number of terms for first sum = n1 = 9\n    # number of terms for second sum = n2 = 23\n    # sum of first n1 terms S1 = 72\n    # sum of first n2 terms S2 = 736\n    # number of terms for the required sum n3 = 16\n    \n    n1, S1 = 9, 72\n    n2, S2 = 23, 736\n    n3 = 16\n    \n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (2a + (n - 1)d),\n    # where n is the number of terms, a is the first term, and d is the common difference.\n    # We can form the system of equations as follows:\n    # n1/2 * (2a + (n1 - 1)d) = S1\n    # n2/2 * (2a + (n2 - 1)d) = S2\n    \n    # Thus the system of equations becomes:\n    # (n1/2) * (2a + (n1 - 1)*d) = S1 => 2a*n1 + d*n1*(n1 - 1) = 2*S1\n    # (n2/2) * (2a + (n2 - 1)*d) = S2 => 2a*n2 + d*n2*(n2 - 1) = 2*S2\n    # We can write this as two linear equations:\n    # (1) 2an1 + dn1(n1 - 1) - 2S1 = 0\n    # (2) 2an2 + dn2(n2 - 1) - 2S2 = 0\n    \n    # Solve the system of equations to find 'a' and 'd'\n    # Use these equations to create a linear system:\n    # 2a + d(n1 - 1) = 2S1/n1\n    # 2a + d(n2 - 1) = 2S2/n2\n    \n    # Subtract the two equations to eliminate 'a' and solve for 'd'\n    d = (2 * S2 / n2 - 2 * S1 / n1) / (n2 - n1)\n    \n    # Use the value of 'd' to solve for 'a'\n    a = (2 * S1 / n1 - d * (n1 - 1)) / 2\n    \n    # Now we have 'a' and 'd', we can find the sum of the first n3 terms:\n    S3 = n3 / 2 * (2 * a + (n3 - 1) * d)\n    \n    return int(S3)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    # Let d be the distance the turtle ran while the rabbit was sleeping.\n    # Let v_t be the speed of the turtle, then the speed of the rabbit is 5 * v_t.\n    # The time it takes for the turtle to run distance d is d / v_t.\n    # The rabbit sleeps the same amount of time, then runs (1000 - d) meters.\n    # The time it takes for the rabbit to run (1000 - d) meters is (1000 - d) / (5 * v_t).\n    # When the turtle finishes the race, the rabbit is 10 meters behind, so the rabbit runs (990 - d) meters.\n    # Therefore, the time for the turtle to run 1000 meters is the same as the time for the rabbit to run (990 - d) meters.\n    # 1000 / v_t = (990 - d) / (5 * v_t)\n    # Solving for d: 5 * 1000 = 990 - d\n    # d = 990 - 5 * 1000\n\n    d = 990 - 5 * 1000 / 6\n    return d\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000  # 1 kilometer is 100000 centimeters\n    return km_to_cm\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_initial = 40 / 60\n    \n    # Calculate the distance each driver traveled before Samuel turned back\n    distance_shafur = 54 * time_initial  # Distance Shafur traveled\n    distance_samuel = 66 * time_initial  # Distance Samuel traveled\n    \n    # Calculate distance Samuel needs to catch up after turning back\n    distance_to_catch_up = 2 * distance_samuel\n    \n    # Calculate the time Samuel needs to catch up at a relative speed\n    # Relative speed when Samuel is catching up: 66 (Samuel's speed) + 54 (Shafur's speed)\n    relative_speed = 66 + 54\n    time_to_catch_up = distance_to_catch_up / relative_speed\n    \n    # Total time Shafur traveled to reach Town Y is initial time plus the time Samuel took to catch up\n    total_time_shafur = time_initial + time_to_catch_up\n    \n    # Now calculate total distance from X to Y using Shafur's total time and speed\n    distance_X_to_Y = total_time_shafur * 54\n    \n    return distance_X_to_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n\n    years = 0\n    while sum(grandsons_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one chair, so 3x is the cost of one table\n    x = symbols('x')\n    \n    # Equation: cost of 4 tables + cost of 9 chairs = 504\n    # 4 tables * cost per table (3x) + 9 chairs * cost per chair (x) = 504\n    equation = Eq(4 * (3 * x) + 9 * x, 504)\n\n    # Solve for x\n    chair_cost = solve(equation, x)[0]  # Take the first (and only) solution\n    \n    return chair_cost\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_diff = 46 - 50\n    term = first_term\n    \n    count = 0\n    while term > 0:\n        term += common_diff\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    apples = symbols('apples')\n\n    eq1 = Eq(apples, 14 * children + 11)\n    eq2 = Eq(apples, 17 * (children - 1) + 10)\n\n    result = solve((eq1, eq2), (children, apples))\n\n    return result[apples]\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        product = digits[0] * digits[1] * digits[2]\n        if 100 <= product <= 999:\n            return i\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    total_flowers = 68\n    flowers_per_vase = 9\n\n    num_vases = (total_flowers + flowers_per_vase - 1) // flowers_per_vase\n\n    return num_vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    import fractions\n    import math\n    \n    # Expression one\n    expr1_numerator = 7 / -3.3333333333333333  # -3.3 repeating is equivalent to -10/3\n    expr1_denominator = (-0.027) ** (1/3)      # Cube root of -0.027 is -0.3\n    expr1 = expr1_numerator / expr1_denominator\n    \n    # Expression two\n    expr2_numerator = 2 ** 3 / 4 ** 2          # 8 divided by 16\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7)) # Multiplication within the parentheses and then by 0.125\n    expr2 = expr2_numerator / expr2_denominator\n    \n    # Expression three\n    expr3_part1 = 0.1 / 0.142857              # 0.1 divided by 0.142857, which is 1/7\n    expr3_part2 = 2 * 0.3                      # 2 times 0.3\n    expr3 = expr3_part1 + expr3_part2          # Adding both parts together\n    \n    # Combine all expressions\n    ans = expr1 + expr2 - expr3\n    \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)))  # Find the first multiple of 3 greater than or equal to 38\n    last_multiple = 81 - (81 % 3)          # Find the last multiple of 3 less than or equal to 81\n\n    count_multiples = (last_multiple - first_multiple) // 3 + 1  # Count the number of multiples\n\n    return count_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n\n    num1 = 12\n    num2 = 15\n\n    return lcm(num1, num2)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first part: 3+4+5+...+10\n    sum_first_part = sum(range(3, 11))\n\n    # Calculate the sum of the second part: 10+...+6+5+4+3\n    sum_second_part = sum(range(3, 11)) - 10  # subtracting the repeated 10\n\n    # Return the total sum\n    return sum_first_part + sum_second_part\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    # Let x be the original number and y be the number obtained by removing the leftmost digit.\n    # Then, x = 29 * y.\n    # The original number x can be expressed as: x = 10^n * a + y,\n    # where a is the leftmost digit of x and n is the number of digits in y.\n    # Therefore, we have 10^n * a + y = 29 * y.\n    # Rearrange terms to get: 10^n * a = 28 * y.\n    # This implies y must be a multiple of 10 and a must be a multiple of 28.\n    for n in range(1, 12):  # Arbitrarily choose 12 as an upper limit for the number of digits\n        for a in range(1, 29):  # a must be between 1 and 28\n            y = 10**n\n            x = 29 * y\n            if x // 10**n == a and x % 10**n == y:\n                return x\n                \nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones_after_jan = 78 * 2 - 13\n    initial_phones = (remaining_phones_after_jan + 22) * 2\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    numerator = 2010\n    ans = 0\n    for denominator in range(2008, 1, -1):\n        ans += numerator / denominator\n        numerator *= (denominator - 1)\n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1  # In a knockout tournament, each game eliminates one player.\n\n    return games_played\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let x be the number of pencils, then x + 50 is the number of pens.\n    # We have x + (x + 50) = 438\n    # 2x + 50 = 438\n    # 2x = 438 - 50\n    # 2x = 388\n    # x = 388 / 2\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # January to April (4 months) average spending\n    jan_to_apr_avg = 500\n    jan_to_apr_total = jan_to_apr_avg * 4\n\n    # May to July (3 months) average spending\n    may_to_jul_avg = 300\n    may_to_jul_total = may_to_jul_avg * 3\n\n    # August to September total spending (2 months considered a single period)\n    aug_to_sep_total = 400\n\n    # October to December (3 months) average spending\n    oct_to_dec_avg = 300\n    oct_to_dec_total = oct_to_dec_avg * 3\n\n    # Total spending for the year\n    total_spent = jan_to_apr_total + may_to_jul_total + aug_to_sep_total + oct_to_dec_total\n\n    # Number of months in a year\n    total_months = 12\n\n    # Calculate the average spending per month\n    avg_per_month = total_spent / total_months\n\n    return avg_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    extra_apples = 16\n\n    total_apples = (boxes * apples_per_box) + extra_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_needed = 70 * 4\n    money_short = 15\n\n    money_had = total_needed - money_short\n\n    return money_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            answer_position = count\n    return answer_position\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    number_of_people = 5\n    games_played = number_of_people - 1\n\n    return games_played\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # After transactions\n    equation1 = Eq(anna + 8, (2/14) * (anna + betsy + charlene))\n    equation2 = Eq(betsy - 15 + 8, (5/14) * (anna + betsy + charlene))\n    equation3 = Eq(charlene - 15, (7/14) * (anna + betsy + charlene))\n    equation4 = Eq(anna + betsy + charlene, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # Betsy's initial number of marbles\n    initial_betsy = solutions[betsy] + 15\n    \n    return initial_betsy\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # then there must be 7 shelves before it and 9 shelves after it.\n    # The total number of shelves is the number of shelves before it,\n    # plus the shelf it's on, plus the shelves after it.\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Initialize a list to hold the possible ages (prime factors) of the children\n    ages = []\n\n    # Expand the prime factors into the actual ages\n    for prime, count in factors.items():\n        ages.extend([prime] * count)\n    \n    # Find all possible age combinations\n    def find_combinations(ages, current_product=1, current_sum=0, current_ages=[]):\n        if len(current_ages) == 4:\n            if current_product == 2016:\n                return [sum(current_ages)]\n            else:\n                return []\n        \n        if not ages or current_product > 2016:\n            return []\n        \n        # Include the next age in the combination\n        with_current = find_combinations(ages[1:], current_product * ages[0],\n                                         current_sum + ages[0], current_ages + [ages[0]])\n        # Exclude the next age from the combination\n        without_current = find_combinations(ages[1:], current_product,\n                                            current_sum, current_ages)\n\n        return with_current + without_current\n\n    # Finding all combinations and summing each set of ages\n    sums_of_ages = find_combinations(ages)\n    \n    # Return the unique sums, as we are interested in the unique age combinations\n    return max(set(sums_of_ages))\n\n# Call the function and store the answer\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_past = 10\n    years_since_past = 4\n    years_ahead = 2\n\n    # Age combined, four years ago + (years since past * number of dogs) + (years ahead * number of dogs)\n    combined_age_future = combined_age_past + (years_since_past * 2) + (years_ahead * 2)\n\n    return combined_age_future\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    candidates_per_hall_1 = 30\n    candidates_per_hall_2 = 26\n    extra_halls = 9\n\n    # Define the number of candidates as 'n'\n    # According to the problem, we have two equations:\n    # 1. n = 30 * (halls - 1) + 26\n    # 2. n = 26 * (halls - 1 + extra_halls) + 20\n\n    # Let's solve these equations using algebra\n    # n = 30 * (halls - 1) + 26 = 26 * (halls - 1 + extra_halls) + 20\n    # Therefore, we can express 'halls' in terms of 'extra_halls':\n    # 30 * halls - 30 + 26 = 26 * halls + 26 * extra_halls + 20\n    # Simplify the equation, getting 'halls':\n    # 4 * halls = 30 + 26 * extra_halls + 20 - 26\n    # halls = 30 + 26 * extra_halls - 4\n    # halls = 46 + 26 * extra_halls\n    \n    # Plug the value of 'halls' into the first equation:\n    # n = 30 * (46 + 26 * extra_halls - 1) + 26\n    n = 30 * (46 + 26 * extra_halls - 1) + 26\n    return n\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers\n    equation1 = Eq(girls, boys - 1)\n    \n    # Each girl has half as many sisters as brothers\n    equation2 = Eq(girls - 1, 2 * (boys - girls))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # The total number of children is the sum of boys and girls\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Andy travels for 30 minutes at each speed, so we divide by 2 to get distances\n    # distance = speed * time, and here time is always 0.5 hours (30 minutes)\n    dist_first_30 = x * 0.5\n    dist_second_30 = (x - 20) * 0.5\n    dist_last_30 = (x + 10) * 0.5\n\n    # The sum of these distances should equal 70 miles\n    equation = Eq(dist_first_30 + dist_second_30 + dist_last_30, 70)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Assume x is the original number of cows\n    # 17 cows eat the pasture in 30 days, 1 cow eats the pasture in 17 * 30 days\n    cow_17_days = 17 * 30\n    # 19 cows eat the pasture in 24 days, 1 cow eats the pasture in 19 * 24 days\n    cow_19_days = 19 * 24\n    # Total amount of grass, assume it to be consistent for 1 cow consumption\n    total_grass = cow_17_days * cow_19_days // (cow_17_days - cow_19_days)\n    \n    # x cows eat for 6 days means 6*x days of grass is eaten\n    # after Mr. Erha caught 4 cows, there are (x - 4) cows left\n    # (x - 4) cows eat for 2 more days means 2*(x - 4) days of grass is eaten\n    # the total eaten grass would be the amount eaten in 6 days plus the amount eaten in the last 2 days\n    total_eaten = 6 * total_grass // x + 2 * total_grass // (x - 4)\n    \n    # Now we need to find x such that the total eaten grass equals the amount of grass eaten if 17 cows eat for 30 days\n    # which is total_grass\n    for cows in range(1, total_grass):\n        if 6 * total_grass // cows + 2 * total_grass // (cows - 4) == total_grass:\n            return cows\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - 3/5\n    remaining_grams = 60\n\n    original_mass = remaining_grams / remaining_fraction\n\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence = symbols('ten_pence')\n\n    twenty_pence = 2 * ten_pence    # twice as many 20p coins as 10p coins\n    five_pence = ten_pence / 2      # half as many 5p coins as 10p coins\n\n    # Total amount in pence\n    total_amount = 1575  # £15.75\n\n    # Equation to represent total amount\n    equation = Eq(20 * twenty_pence + 10 * ten_pence + 5 * five_pence, total_amount)\n\n    # Solve for ten_pence\n    num_ten_pence = solve(equation, ten_pence)\n\n    # Calculate the number of twenty_pence coins\n    num_twenty_pence = 2 * num_ten_pence[0]\n\n    return num_twenty_pence\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_number = 96\n    base6_number = ''\n\n    while base10_number > 0:\n        remainder = base10_number % 6\n        base6_number = str(remainder) + base6_number\n        base10_number = base10_number // 6\n\n    return base6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    for max_apples in range(1, 27):\n        # as each child must get at least one apple and different numbers of apples,\n        # we start by giving one apple to each child except the one getting the most,\n        # thus there are 27 - (5 - 1) apples left\n        remaining_apples = 27 - (5 - 1)\n        \n        # the candidate number is max_apples for the child getting the most apples\n        remaining_apples -= max_apples\n        \n        # We check if the remaining apples can be distributed such that each child\n        # gets a different number of apples, which is a necessary condition.\n        # We will iterate through each possible apple count below the current max_apples\n        # and see if it's possible to satisfy the condition\n        found = True\n        for i in range(max_apples - 1, 0, -1):\n            if remaining_apples >= i:\n                remaining_apples -= i\n            else:\n                found = False\n                break\n        \n        if found:\n            return max_apples\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    total_payment = total_cost + tip\n    change = 50 - total_payment\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_climb = 4\n    night_slip = 2\n    net_distance_per_day = day_climb - night_slip\n\n    days_passed = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        days_passed += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slip\n        \n    return days_passed\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "import math\n\ndef solution():\n    x = math.sqrt(3 - math.sqrt(5)) - math.sqrt(3 + math.sqrt(5))\n    integer_part = math.floor(x)\n    return integer_part\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total = 5 * n * (n + 1) // 2  # Sum of the arithmetic series formula: n/2 * (first_term + last_term)\n        if total % 2013 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6 / 7) * 42\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    all_ways = []\n    for combo in combinations(range(1, 25), 7):  # Generate combinations of 7 different natural numbers\n        if sum(combo) == 25:  # Check if the sum of the combination is 25\n            all_ways.append(combo)\n    return all_ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    return 0.9\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration_days = 3 * 7  # Three weeks\n    end_date = start_date + timedelta(days=duration_days - 1)  # -1 because the start day is included\n\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, marker = symbols('pencil marker')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    # Calculate total cost for 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_diff = 55\n    total_students = 0\n    side_length = 1  # start with the smallest possible square\n\n    while True:\n        boys = side_length**2 - (side_length - 2)**2 if side_length > 1 else 1\n        girls = total_students - boys\n        diff = boys - girls\n\n        if diff == total_diff:\n            return total_students\n\n        total_students = side_length**2\n        side_length += 2  # moving to the next potential square with an additional layer of boys\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of stickers in Bag A, and (270 - x) be the initial number of stickers in Bag B\n    x = symbols('x')\n    \n    # Create equation based on the information given\n    equation = Eq(((270 - x) + 56) / (x - 56), 3/2)\n\n    # Solve the equation for x\n    initial_A = solve(equation, x)\n\n    # Return the number of stickers in Bag A at first\n    return initial_A[0]\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let G be the amount of grass growing each week\n    # G*12 is the amount of grass after 12 weeks\n    # 120 cows eat G*12 grass in 12 weeks, so each cow eats G grass in 12 weeks\n    # Each cow eats G/12 grass each week, therefore 120 cows eat 120*(G/12) = 10*G grass each week\n    \n    # Similarly for 150 cows in 8 weeks:\n    # Each cow eats G/8 grass each week, therefore 150 cows eat 150*(G/8) = 18.75*G grass each week\n    \n    # The pasture can sustain cows for 6 weeks:\n    # Total grass available for 6 weeks is G*6\n    # Let x be the number of cows the pasture can sustain for 6 weeks\n    # Each cow eats G/6 grass each week, so x cows eat x*(G/6) grass each week\n    \n    # We can create the following equation based on the above relationships:\n    # 10*G = x*(G/6) => x = 60 cows (for 12 weeks)\n    # 18.75*G = x*(G/6) => x = 112.5 cows (for 8 weeks)\n    \n    # These two should be equal since they represent the same weekly consumption rate\n    # So we can now find x for 6 weeks by equating the two rates\n    # 10*G = x*(G/6)\n    # 18.75*G = x*(G/6)\n    \n    # Solve for x by equating the two expressions for x:\n    # 60 = x*(1/6)\n    # 112.5 = x*(1/6)\n    \n    # x = 60*6\n    # x = 112.5*6\n    \n    # Equating:\n    # 60*6 = 112.5*6\n    # 6x = 675\n    # x = 675 / 6\n\n    x = 675 / 6\n    return int(x)\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Using the property of proportions a:b = c:d => a*d = b*c\n    missing_number = (14 * 10) / 21\n    return missing_number\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    first_term = 5\n    common_difference = 6\n    nth_term = 41  # Last known term in the sequence\n    next_term = nth_term + common_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    volunteers, trees = symbols('volunteers trees')\n    # If each volunteer plants 4 trees, 5 trees will be left\n    equation1 = Eq(volunteers * 4 + 5, trees)\n    # If each of them plants 7 trees, one volunteer will have nothing to plant\n    equation2 = Eq((volunteers - 1) * 7, trees)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n // 2 + 1) if n % i == 0])\n\n    num = 2  # start searching from the smallest positive integer\n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    s = sum([(30 - 2*i) * (-1)**i for i in range(8)])\n    return s\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term = 10\n    last_shown_term_value = 31\n    difference = 3\n    first_term = last_shown_term_value - difference * (term - 1)\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    boxes_needed = (total_cakes + cakes_per_box - 1) // cakes_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define L for Lovelle's muffins and M for Makayla's muffins\n    L, M = symbols('L M')\n\n    # Lovelle and Makayla's total muffins\n    total_muffins_eq = Eq(L + M, 3998)\n    \n    # After selling muffins makayla has 3/5 left\n    makayla_left_eq = M - (2/5)*M\n    \n    # After selling muffins both have equal number, so we form an equation\n    equal_after_selling_eq = Eq(L - 462, makayla_left_eq)\n\n    # Solve the system of equations\n    solutions = solve((total_muffins_eq, equal_after_selling_eq), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    \n    equation = Eq((1/4) * initial_money + (2/7) * initial_money, 225)\n    \n    solved = solve(equation, initial_money)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    n = 30\n    count = 0\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n        count += 1\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Using the Pigeonhole Principle to find the minimum number of cards to select to guarantee 10 cards of the same color\n\n    # The worst case scenario would include selecting all the cards of the three smallest groups\n    worst_case_cards = 4 + 8 + 12\n\n    # To ensure 10 cards of the same color, we need to pick one more after the worst case\n    must_select = worst_case_cards + 1\n\n    return must_select\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n    length_of_row = (num_daffodils - 1) * gap_between_daffodils\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n    length_per_piece = ribbon_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # ensure x2 is greater than x1\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # ensure x3 is greater than x2 (and x1) for unique boxes\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    # total juice in the bottle\n    total_juice = 150\n    # Let x be the amount of juice Jane drinks, then Alex drinks 1.5x\n    # Together they drink x + 1.5x = total_juice\n    # 2.5x = total_juice\n    # Therefore, x = total_juice / 2.5\n    jane_drinks = total_juice / 2.5\n    # Alex drinks 1.5 times what Jane drinks\n    alex_drinks = 1.5 * jane_drinks\n    \n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes_taken = distance / speed\n\n    return minutes_taken\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n\n    total_ways = 0\n\n    # Cases when there is at least 1 boy in the group:\n    # Only boys\n    for boys_in_group in range(1, min(group_size + 1, total_boys + 1)):\n        girls_in_group = group_size - boys_in_group\n        # Number of ways to choose 'boys_in_group' boys and 'girls_in_group' girls.\n        ways = comb(total_boys, boys_in_group) * comb(total_girls, girls_in_group)\n        total_ways += ways\n\n    return total_ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return int(missing_number)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    total_friends = 6\n\n    each_friend_pear = total_pear // total_friends\n    each_friend_strawberry = total_strawberry // total_friends\n    each_friend_chocolate = total_chocolate // total_friends\n\n    total_fruits_per_friend = each_friend_pear + each_friend_strawberry + each_friend_chocolate\n    \n    return total_fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let total_money represent the total amount Bud had initially.\n    # Bud spent 1/4 of total_money on a book, so she had 3/4 of total_money left.\n    # Then Bud spent 2/5 of the remaining money on a bag, which costs 60.\n    # Therefore, (2/5) * (3/4) * total_money = 60.\n\n    # Calculating Bud's initial amount of money:\n    total_money = 60 / (2/5) / (3/4)\n\n    return total_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    product = x * y\n\n    return product\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page = 1\n\n    while total_digits < 157:\n        total_digits += digits_per_page\n        if page >= 10 and page < 99:\n            digits_per_page = 2\n        elif page >= 100:\n            digits_per_page = 3\n        if total_digits <= 157:\n            page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Only consider odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance between the first and the last peach tree.\n    # Since there are trees at both ends, the number of intervals\n    # between trees is one less than the number of trees.\n    total_distance = (41 - 1) * 3 \n\n    # Number of intervals between lamp posts\n    lamp_post_intervals = total_distance // 8\n\n    # Since there are lamp posts at both ends, the total number of lamp posts\n    # is one more than the number of intervals\n    num_lamp_posts = lamp_post_intervals + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):  # loop within a reasonable range\n        total_price = 72 * unit_price\n        total_price_str = str(total_price)\n        # Check the given conditions\n        if len(total_price_str) == 6 and total_price_str[2:5] == '679':\n            # Check for the two missing digits\n            if total_price_str[0] == total_price_str[5]:\n                return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in meters per second\n    \n    time_to_pass = train_length / speed  # time taken to pass the pole in seconds\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for num in range(10, 100):  # Range of two-digit numbers\n        if (num // 10 + num % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining_after_dvd = total_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    for year in range(1, 4):\n        rabbits = 3 * rabbits\n        rabbits = rabbits / 2\n    return int(rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1  # Sum of distances travelled at different speeds\n    total_time = (1 / 60) + (1 / 30)  # Time taken for each mile at different speeds (in hours)\n\n    average_speed = total_distance / total_time  # Average speed formula (total distance divided by total time)\n\n    return average_speed\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then 2x is the number of students in class A\n    # Let c be the total number of candies Miss Jenny has\n    x, c = symbols('x c')\n\n    # Eq1: If each student in class A got 4 candies, 20 more candies are needed\n    # => 4*(2x) + 20 = c\n    equation1 = Eq(4 * (2 * x) + 20, c)\n\n    # Eq2: If each student in class B got 6 candies, there will be 16 candies left\n    # => 6*x = c - 16\n    equation2 = Eq(6 * x, c - 16)\n\n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (x, c))\n\n    # Number of candies Miss Jenny has\n    return solutions[c]\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    money_per_wash = 1.40\n    target_amount = 12\n    number_of_washes = (target_amount // money_per_wash) + 1\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_first_day = 2\n    day = 4\n    candies_on_fourth_day = candies_first_day * (2 ** (day - 1))\n    return candies_on_fourth_day\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    for divisor in range(2, 200):  # Starting from 2 because the number must be greater than 1\n        if (290 % divisor == 235 % divisor + 2 == 200 % divisor + 5):\n            return divisor\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's denote the smaller angle as x\n    x = symbols('x')\n    # if one angle is x, the other is 2x (twice the smaller angle)\n    # and since the sum of angles in a triangle is 180 degrees\n    # and one of them is a right angle (90 degrees)\n    # we have: x + 2x + 90 = 180\n    equation = Eq(x + 2*x + 90, 180)\n    \n    # solve the equation for x\n    solution = solve(equation, x)\n    \n    # the larger angle is twice the smaller angle\n    larger_angle = 2 * solution[0]\n    \n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for I in range(0, 10):\n        for P in range(1, 10):\n            for S in range(0, 10):\n                if len(set([I, P, S])) == 3:  # Ensure all digits are different\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n    return None\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    number_of_elders = 9\n    # Formula for sum of an arithmetic sequence: (n/2)*(first_term + last_term)\n    # Given sum = n*mean\n    # Since they are consecutive, we know their mean equals the middle term.\n    middle_term = total_sum / number_of_elders\n    return int(middle_term)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9*necklace + 5*earring, 1440)\n    equation2 = Eq(3*necklace + 1*earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    # Let the original purchase price be p and the original profit margin be m.\n    # The new purchase price is 0.95 * p.\n    # The selling price does not change, let it be s.\n    # The old profit is s - p, and the new profit is s - 0.95 * p.\n    # The old profit margin is (s - p) / p, which is m.\n    # The new profit margin is (s - 0.95 * p) / (0.95 * p).\n    # According to the problem, (s - 0.95 * p) / (0.95 * p) = m + 0.06\n    # Simplify the above equation to find s / p in terms of m:\n    # (s - 0.95 * p) / (0.95 * p) = m + 0.06\n    # (s / p - 0.95) / 0.95 = m + 0.06\n    # s / p = (m + 0.06) * 0.95 + 0.95\n    # s / p = 0.95 * m + 0.057 + 0.95\n    # s / p = 0.95 * m + 1.007\n    # Let's consider m as 100% which implies s / p = 2.007 (since the selling price is twice the purchase price and this gives 100% profit margin).\n    # So the initial profit margin is 100%\n    # Thus, the current profit margin would be:\n    current_profit_margin = (2.007 - 1) * 100  # Convert the proportion to percentage\n    return current_profit_margin\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # Total hours of sunshine for Monday to Saturday\n    total_six_days = 3 * 6\n    # Hours of sunshine on Sunday\n    sunday_hours = 10\n    # Total hours for the whole week\n    total_week = total_six_days + sunday_hours\n    # Average hours per day for the whole week\n    average_sunshine = total_week / 7\n\n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed_mpm = 75  # Shawn's walking speed in meters per minute\n    running_speed_mpm = 2 * walking_speed_mpm  # Running speed is twice the walking speed\n\n    time_walking_minutes = 24  # Shawn takes 24 minutes to walk to school\n    total_distance_m = walking_speed_mpm * time_walking_minutes  # Total distance to school\n\n    half_distance_m = total_distance_m / 2  # Half the distance to school\n\n    time_walking_half_minutes = half_distance_m / walking_speed_mpm  # Time to walk half the distance\n    time_running_half_minutes = half_distance_m / running_speed_mpm  # Time to run half the distance\n\n    total_time_half_walk_run_minutes = time_walking_half_minutes + time_running_half_minutes  # Total time for half walk and half run\n\n    return total_time_half_walk_run_minutes\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320  # in meters\n\n    # Since there are no trees in front of the school or her house,\n    # the number of intervals is one more than the number of trees\n    intervals = total_trees + 1\n\n    # Distance between each tree is the total distance divided by the number of intervals\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    \n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    \n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    \n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    equation = Eq(savings - (savings / 3) - 177 - 129, (savings / 3) / 2)\n    result = solve(equation, savings)\n\n    return result[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    total_apples = 6\n    baskets = 3\n    \n    # The number of distributions of n identical objects into r distinct containers (baskets) \n    # with no restrictions is given by the formula: (n + r - 1) choose (r - 1).\n    # However, since the baskets are identical, each distribution that is an arrangement \n    # of the another is indistinguishable. Thus, we divide by the number of arrangements \n    # of the three baskets which is 3!. We will use combinations for this.\n\n    from math import comb, factorial\n\n    # Calculate the total number of possible ways to distribute apples without restrictions\n    total_ways = comb(total_apples + baskets - 1, baskets - 1)\n\n    # Since the baskets are identical, we must divide the unrestricted ways by the number of \n    # arrangements of identical baskets to account for indistinguishable distributions. \n    ans = total_ways // factorial(baskets)\n\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    \n    num_cuts = total_length // cut_length\n    remaining_length = total_length % cut_length\n    \n    return remaining_length\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    A_books = 120\n    B_books = 30\n    n = symbols('n')\n    equation = Eq(A_books - n, 2 * (B_books + n))\n    value_of_n = solve(equation, n)[0]\n    return value_of_n\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    ans = sum(n for n in range(1, 2018) if 2018 % n == 11)\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):  # From day 1 to day 9\n        workers = day  # Number of workers increases by 1 each day\n        total_skirts += workers * skirts_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    ans = []\n    \n    for number in range(30, 61):\n        if (number - first_term) % difference == 0:\n            ans.append(number)\n\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n\n    while True:\n        current_number_str = str(current_number)\n        digit_count += len(current_number_str)\n\n        if digit_count >= 2023:\n            return int(current_number_str[2023 - digit_count + len(current_number_str) - 1])\n\n        current_number += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    \n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the cost of one apple and one banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost to buy 5 bananas using the solved price for one banana\n    cost_5_bananas = solutions[banana] * 5\n\n    return float(cost_5_bananas)\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    income = 150000\n    tax_paid = 15000\n    initial_tax_rate = 0.08\n    initial_income_taxed = 50000\n    tax_on_initial_income = initial_income_taxed * initial_tax_rate\n\n    remaining_income = income - initial_income_taxed\n    remaining_tax_paid = tax_paid - tax_on_initial_income\n\n    additional_tax_rate = remaining_tax_paid / remaining_income\n\n    T = additional_tax_rate - initial_tax_rate\n\n    return round(T * 100)\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    for correct in range(25):\n        incorrect = 24 - correct\n        if correct * 4 - incorrect * 2 == 66:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    # Number of days in January\n    days_in_january = 31\n    # Number of boys in the football club\n    boys_in_club = 432\n    # Applying the Pigeonhole Principle\n    boys_per_day = (boys_in_club + days_in_january - 1) // days_in_january\n    return boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    count = 0\n    # Since we want a three-digit number, 0 cannot be the first digit. \n    # We have two choices for the first digit (2, 3).\n    for first_digit in (2, 3):\n        # For the second digit, we have three choices since it can also be 0.\n        for second_digit in (0, 2, 3):\n            # The third digit also has three choices.\n            for third_digit in (0, 2, 3):\n                # Ensure that all digits are different.\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n\n    total_length_of_cars = first_car_length + (other_cars_length * number_of_other_cars)\n    total_length_of_spaces = space_between_cars * (31 + 1)\n\n    total_length = total_length_of_cars + total_length_of_spaces\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_diff = 120 - 105  # or 135 - 120\n\n    # Find the first term by subtracting 6 times the common difference from the 7th term\n    first_term = 105 - (6 * common_diff)\n\n    # Calculate the 100th term\n    hundredth_term = first_term + (99 * common_diff)\n\n    return hundredth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    initial_chocolates = 5 * 10\n    given_chocolates = 23\n    remaining_chocolates = initial_chocolates - given_chocolates\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "def solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    for i in range(len(cards)):\n        if cards[i] in '58':  # First digit should be 5 or 8 to be greater than 5000\n            for j in range(len(cards)):\n                if j != i:\n                    for k in range(len(cards)):\n                        if k != i and k != j:\n                            for l in range(len(cards)):\n                                if l != i and l != k and l != j:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5  # Sue's ratio + Sarah's ratio + Ian's ratio\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) // sarah_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total = week1 + week2 + week3\n\n    return total\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    ans = 734 * 58\n    return ans\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of stickers Sam and Peter have initially\n    sam, peter = symbols('sam peter')\n    \n    # Create an equation based on the problem statement\n    # Sam had 40 stickers more than Peter initially\n    # After giving away 20% of his stickers, Sam has 96 stickers more than Peter\n    # Peter gives 25% of his stickers to Sam\n    # We form two equations based on these relationships\n    equation1 = Eq(sam - peter, 40)\n    equation2 = Eq(sam - 0.2 * sam + 0.25 * (peter + 0.2 * sam), peter - 0.25 * (peter + 0.2 * sam) + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    # Since we need to find out how many stickers Peter had initially, we return the value of 'peter'\n    return solutions[peter]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    return 1.8 - 0.57\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost_per_packet = 73  # pence\n    biscuits_packets = 7\n    cake_cost_each = 113  # pence, since £1.13 equals 113 pence\n    cakes = 9\n    note_value = 2000  # pence, since £20 equals 2000 pence\n\n    # Total cost for biscuits and cakes\n    total_cost_biscuits = biscuits_cost_per_packet * biscuits_packets\n    total_cost_cakes = cake_cost_each * cakes\n    total_cost = total_cost_biscuits + total_cost_cakes\n\n    change = note_value - total_cost  # Calculate the change\n\n    # Convert change back to pounds\n    change_in_pounds = change / 100\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finish_time = datetime.strptime('14:50', '%H:%M')\n\n    # Lunch lasted for 20 minutes\n    lunch_duration = timedelta(minutes=20)\n\n    # Time before lunch for watching TV\n    tv_time = timedelta(minutes=20)\n\n    # Time spent playing after reaching home\n    play_time = timedelta(minutes=10)\n\n    # Calculate the time when Benson started lunch\n    lunch_start_time = lunch_finish_time - lunch_duration\n\n    # Calculate the time when Benson started watching TV\n    tv_start_time = lunch_start_time - tv_time\n\n    # Calculate the time when Benson reached home\n    home_arrival_time = tv_start_time - play_time\n\n    # Format the result as HH:MM AM/PM\n    return home_arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time_in_minutes = 12 * 60 + 40  # convert 12.40 pm to minutes\n    duration_in_minutes = 2 * 60 + 40  # convert 2 hours and 40 minutes to minutes\n\n    departure_time_in_minutes = arrival_time_in_minutes + duration_in_minutes\n    departure_hour = departure_time_in_minutes // 60\n    departure_minute = departure_time_in_minutes % 60\n\n    # Since time is in 24-hour format, we do modulo 24 to get the correct time\n    departure_hour %= 24\n\n    return '{}:{:02d}'.format(departure_hour, departure_minute)\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations of the list ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for p in permutations('BCDEFG'):\n        for i in range(len(p)-1):\n            # If D and E are next to each other\n            if p[i] == 'D' and p[i+1] == 'E' or p[i] == 'E' and p[i+1] == 'D':\n                # Insert A between B and C if possible\n                for j in range(1, len(p)):\n                    if (p[j-1] == 'B' and p[j] == 'C') or (p[j-1] == 'C' and p[j] == 'B'):\n                        count += 1\n                break\n    # Return the number of valid arrangements\n    return count\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    n = 14\n    \n    last_term = first_term + (n - 1) * common_difference\n    sum_of_terms = n * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 181:\n        page += 1\n        count += str(page).count('9')\n    return page - 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of crystals Jason had at first\n    x = symbols('x')\n\n    # Jason sold 10 more than half of his crystals to Yvonne\n    sold_to_yvonne = (x / 2) + 10\n\n    # Then he mined 20 more crystals in Singapore\n    after_mining_singapore = sold_to_yvonne - (x / 2) + 20\n\n    # Then he sold 14 crystals to Cherlyn, and has 35 crystals left in the end\n    remaining = after_mining_singapore - 14\n\n    # Express the remaining crystals in terms of the original amount x\n    # and set up the equation to solve for x using remaining crystals\n    equation = Eq(remaining, 35)\n\n    # Solve for x using sympy's solve function\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # For 3-digit numbers, 0 cannot be at the hundred's place\n    # So, choosing 3 out of the 4 digits (excluding 0 for the first digit)\n    three_digit_numbers = len([p for p in permutations('2017', 3) if p[0] != '0'])\n    \n    # For 4-digit numbers, all permutations are valid as they use all digits\n    # and the number will not start with 0\n    four_digit_numbers = len(list(permutations('2017', 4)))\n    \n    # Total count is the sum of both 3-digit and 4-digit numbers\n    total_count = three_digit_numbers + four_digit_numbers\n    \n    return total_count\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_sequence = 2  # grey rabbits come in a sequence of 2\n    total_sequence = 1 + 2 + 2  # pattern of black, white and grey rabbits\n    grey_rabbits = 14\n\n    # The total number of grey rabbit sequences\n    grey_sequences = grey_rabbits // grey_sequence\n\n    # Total number of rabbits\n    total_rabbits = grey_sequences * total_sequence\n\n    # Checking if there is an incomplete sequence\n    if grey_rabbits % grey_sequence != 0:\n        total_rabbits += total_sequence\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    \n    # Remove zero for the first digit to avoid non three-digit numbers\n    numbers.remove(0)\n    \n    # Generate largest and smallest numbers \n    largest_number = max(numbers) * 100 + max(numbers) * 10 + min(numbers)\n    smallest_number = min(numbers) * 100 + min(numbers) * 10 + max(numbers)\n    \n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    import math\n    A = 12\n    B = 15\n    C = 18\n    \n    gcd_AB = math.gcd(A, B)\n    gcd_ABC = math.gcd(gcd_AB, C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    # Finding the factors of 180\n    factors = [i for i in range(1, 181) if 180 % i == 0]\n    # Filtering the factors which are also multiples of 9\n    factors_of_9 = [factor for factor in factors if factor % 9 == 0]\n    # Count the number of such factors\n    count = len(factors_of_9)\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000      # Initial amount deposited\n    interest_rate = 0.05   # Interest rate per year\n    years = 3              # Number of years\n\n    # Compound interest formula A = P(1 + r)^n\n    final_amount = principal * ((1 + interest_rate) ** years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds_to_pence = 2 * 100  # Convert £2 to pence\n    single_sweet_price = 12\n    three_sweets_price = 30\n\n    # Buying in sets of three is cheaper than buying single sweets,\n    # so we buy as many sets of three as possible with £2.\n    sets_of_three = pounds_to_pence // three_sweets_price\n    remaining_pence = pounds_to_pence % three_sweets_price\n    \n    # With the remaining pence, we buy single sweets.\n    additional_sweets = remaining_pence // single_sweet_price\n\n    # Total sweets bought = 3 sweets per set * number of sets + additional single sweets\n    total_sweets = sets_of_three * 3 + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n    # Placing 1 ball in each box to satisfy the \"at least 1 ball\" condition\n    # This leaves us with 10 - 7 = 3 balls left to distribute freely among 7 boxes\n    remaining_balls = 10 - 7\n    boxes = 7\n\n    # Since the balls are identical, we apply stars and bars method, where we need\n    # to place (remaining_balls + boxes - 1) choose (boxes - 1)\n    ans = comb(remaining_balls + boxes - 1, boxes - 1)\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tank = symbols('tank')\n\n    equation1 = Eq(tank - 5, 4)\n    equation2 = Eq(tank - (3 * 4), 3)\n\n    solutions = solve((equation1, equation2), tank)\n\n    return solutions[tank]\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    speed_ship_A = 22\n    speed_ship_B = 18\n    speed_current = 6\n    lead_time = 2\n\n    # Calculate the effective speed downstream for both ships\n    effective_speed_A = speed_ship_A + speed_current\n    effective_speed_B = speed_ship_B + speed_current\n\n    # Distance covered by ship B during the 2 hours lead\n    lead_distance = effective_speed_B * lead_time\n\n    # Calculate the time taken for ship A to catch up with ship B\n    catch_up_time = lead_distance / (effective_speed_A - effective_speed_B)\n    \n    return catch_up_time\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8*9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        underline_count = 0\n        if i % 2 == 0:\n            underline_count += 1\n        if i % 3 == 0:\n            underline_count += 1\n        if i % 4 == 0:\n            underline_count -= 1  # Subtract 1 because multiples of 4 are also multiples of 2\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_10 = 10  # May's age when she is 10\n    kenny_age_now = symbols('kenny_age_now')  # Kenny's age now\n\n    # When May is 10, Kenny's age will be kenny_age_now + (10 - 7)\n    # Kenny's younger brother's age will be kenny_age_now - 2 + (10 - 7)\n\n    # Equation based on the information given\n    equation = Eq((kenny_age_now + (10 - 7)) + (kenny_age_now - 2 + (10 - 7)), 3 * may_age_10)\n    \n    # Solve the equation for Kenny's current age\n    kenny_age_now_solution = solve(equation, kenny_age_now)[0]\n\n    # Calculate how much older Kenny is than May this year (May is 7 years old)\n    age_difference = kenny_age_now_solution - 7\n\n    return age_difference\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 28:\n        if '3' in str(page):\n            count += str(page).count('3')\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # To ensure victory, the player must ensure that they can leave the other player with 1 or 2 candies\n    # before their turn, because then the other player has no choice but to leave the winning situation to the player.\n    \n    # For a pile of 10 candies:\n    # Felix wants to be in a position where there are 3 candies left after John's turn.\n    # To ensure this, Felix wants to be the one who eats to get the pile down to 4 candies.\n    # From 4 candies, Felix can force John to either eat 1 or 2 candies, leaving 3 or 2 candies, respectively.\n    # Felix can then eat 2 or 1 candies to leave 1 candy for John, winning the game.\n\n    # When Felix goes first, he should eat 1 candy.\n    # No matter if John eats 1 or 2 candies next, the remaining candies will be 7 or 8.\n    # Felix then eats 2 or 1 candies to bring the total down to 6 candies.\n    # From 6 candies, Felix can always ensure a win by maintaining the same strategy, ensuring that John eats the candy to bring the count from 4 to 3.\n\n    return \"First\", \"Eat 1 candy if starting first\"\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amounts = [(total_amount - coin) / 2 for coin in (50, 20, 10, 5)]\n    lost_coin = next(coin for coin, brother_amount in zip((50, 20, 10, 5), brother_amounts) if brother_amount not in (50, 20, 10, 5))\n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # If the average of 4 out of 5 numbers is given, then sum of those 4 numbers will be 4 times the average.\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]  # list of sum of 4 numbers for each average given\n\n    # The total sum of all 5 numbers will be the sum of these four sums (since each number is counted exactly 4 times)\n    total_sum = sum(sums) // 4  # Integer division since we are dealing with whole numbers\n\n    # Largest number will be the sum of the four smallest sums (minus total sum)\n    # because when calculating their average, the largest number is excluded\n    largest_number = total_sum - min(sums)\n\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = (15 * 60) + 55  # Convert the first bus time to minutes (15 hours * 60 minutes + 55 minutes)\n    missed_by = 4  # Minutes late for the first bus\n    second_bus_time = (16 * 60) + 35  # Convert the second bus time to minutes (16 hours * 60 minutes + 35 minutes)\n    \n    wait_time = second_bus_time - (first_bus_time + missed_by)  # Calculate the wait time for the second bus\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n    total_students = 152\n\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    tree_spacing = 5\n\n    # Compute the number of trees by dividing the road length by tree spacing and then add 1\n    # because we are planting a tree at both the start and end of the road.\n    num_trees = (road_length // tree_spacing) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = (workers + capacity - 1) // capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the number of men\n    m = symbols('m')\n    \n    # According to the problem, the number of women (w) is 4 times the number of men (m)\n    # And the number of women is also 126 more than the number of men\n    w = 4 * m\n    \n    # We set up the equation w = m + 126\n    equation = Eq(w, m + 126)\n    \n    # Solve the equation for m\n    num_men = solve(equation, m)[0]\n\n    # Calculate the number of women\n    num_women = 4 * num_men\n\n    # Total number of people is the sum of the number of men and women\n    total_people = num_men + num_women\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    # Pages read in the first three days\n    first_three_days = 40\n    # Average pages per day in the next four days\n    average_next_four_days = 20\n    # Total pages read in the next four days\n    next_four_days = average_next_four_days * 4\n    # Pages read in the last two days\n    last_two_days = 60\n\n    # Total pages in the book\n    total_pages = first_three_days + next_four_days + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    num, _ = solve_congruence(*congruences)\n    if num < 200:\n        return num\n    else:\n        return \"No solution under 200\"\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let x be the total number of students\n    # Let r be the total number of rooms\n   \n    # If 4 students live in one room, there will be x % 4 = 6 students with no room to live.\n    # If 5 students live in one room, there will be r - (x // 5) = 1 vacant room.\n    # Therefore, x + 1 (because one room is vacant) is divisible by 5\n    \n    # Start from 6 students (as we know for sure there will be at least 6)\n    # and keep checking the conditions in a loop\n    x = 6\n    while True:\n        if (x % 4 == 6) and ((x + 1) % 5 == 0):\n            return x\n        x += 1\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for x1 in range(1, 7):\n        for x2 in range(1, 7):\n            for x3 in range(1, 7):\n                if x1 + x2 + x3 == 12 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    numbers = [993, 994, 995, 996, 997, 998, 999]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    # Convert sugar weight to grams\n    sugar_weight_g = sugar_weight_kg * 1000\n    \n    # Sum of weights in grams\n    total_weight_g = sugar_weight_g + pasta_weight_g + spaghetti_handful_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_original = 7 * 9  # The total sum of seven numbers with mean 9\n    total_new = 6 * 10  # The total sum of six numbers with mean 10 after one number is removed\n    number_removed = total_original - total_new  # The number removed is the difference in totals\n    \n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_who_left = total_people * (1/3)\n    people_still_at_party = total_people - people_who_left\n    return people_still_at_party\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "from math import lcm\n\ndef solution():\n    interval_a = 15  # Aytown train interval\n    interval_b = 12  # Beeville train interval\n    interval_c = 8   # Ceeford train interval\n\n    least_common_multiple = lcm(interval_a, interval_b, interval_c)\n\n    # Since the trains all arrive at 10:00 am together, we add the LCM to this time\n    # LCM is in minutes, so we need to convert it to hours and minutes\n    hours = least_common_multiple // 60\n    minutes = least_common_multiple % 60\n\n    next_time_hour = 10 + hours\n    next_time_minute = 0 + minutes\n\n    # Correct for going over 60 minutes\n    if next_time_minute >= 60:\n        next_time_hour += next_time_minute // 60\n        next_time_minute = next_time_minute % 60\n\n    # Format the time for output\n    next_time = f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\n    return next_time\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "from math import gcd\n\ndef solution():\n    denominator = 273\n    count = 0\n    for numerator in range(1, denominator):\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Extract the common factors from the expression\n    common_factor = 3999 * 2014\n\n    # Calculate the expression\n    ans = (common_factor * 1.2014 + common_factor * 3.999) / 12.0012\n\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # time in seconds\n    distance = 360  # length of the train in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance_per_day = climb_distance - slide_distance\n\n    # Calculate days when the snail has not reached the top of the burrow yet\n    days_to_reach_last_day = (total_distance - climb_distance) // net_distance_per_day\n\n    # Add extra day when the snail reaches the top\n    total_days = days_to_reach_last_day + 1\n\n    return total_days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colours, we consider the worst case scenario.\n    # First, we assume we are unlucky and we pick 3 marbles of the same color (take the highest number of one color).\n    marbles_drawn = 12\n    \n    # Next, we try to get the second color. In the worst case, we get another 3 marbles of the same color.\n    marbles_drawn += 9\n    \n    # Then, we try to get the third color. Again, in the worst case, we get another 3 marbles of the same color.\n    marbles_drawn += 8\n    \n    # Finally, since we want 4 marbles of different colors, after drawing 3 of each color,\n    # the next draw will definitely be of a different color.\n    marbles_drawn += 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # Using the Inclusion-Exclusion Principle for three sets\n    # At least one student is in all three sports can be calculated by:\n    # (Total Students) - (Students in none or only one of the sports)\n    \n    # Maximum possible number of students in none or only one of the sports can be calculated by:\n    max_non_participants = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # The least possible number of students who play all three sports is:\n    all_three_sports = (swimmers + cyclists + table_tennis_players) - 2 * total_students + max_non_participants\n    \n    return all_three_sports\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # The total number of different choices Eddie has is the sum of choices of each type of restaurant\n    num_chinese_restaurants = 8\n    num_mexican_restaurants = 6\n    num_fast_food_restaurants = 4\n\n    total_choices = num_chinese_restaurants + num_mexican_restaurants + num_fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    cache = {0: 1, 1: 2, 2: 4} # Base cases: no lights; 1 light; 2 lights\n\n    def find_ways(n):\n        if n in cache:\n            return cache[n]\n        # n-1 th light off: count(n-1), n-1 th light on: count(n-2) because n-2 must be off, and restrict n-3\n        cache[n] = find_ways(n - 1) + find_ways(n - 2) - find_ways(n - 4)\n        return cache[n]\n\n    ways = find_ways(12)\n    return ways\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    books_stationery_percentage = 20\n    books_stationery_cost = (books_stationery_percentage / 100) * total_money\n    \n    # Let transport_cost be the cost on transport,\n    # food_cost will be 3 * transport_cost.\n    # savings will be food_cost - 6.\n    # We need to find the savings percentage of total money.\n    \n    # Hence, total money is divided as follows:\n    # total_money = books_stationery_cost + transport_cost + 3 * transport_cost + (3 * transport_cost - 6)\n    # Grouping the transport costs: total_money = books_stationery_cost + 7 * transport_cost - 6\n    \n    # Now, solving for transport_cost:\n    transport_cost = (total_money - books_stationery_cost + 6) / 7\n    food_cost = 3 * transport_cost\n    savings = food_cost - 6\n    \n    savings_percentage = (savings / total_money) * 100\n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    # Meling's age this year is a factor of 66\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n    # Four years ago, her age was a multiple of 6\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    # Assuming there's only one possible age that meets the conditions\n    return possible_ages[0]\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):\n        if 75 % i == 0 and i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Let's assume the original number x from which Miss Careless subtracted the wrong subtrahend\n    # She saw 41 instead of 14\n    # So her equation was x - 41 = 50, which leads to x = 50 + 41\n    incorrect_total = 50 + 41\n    \n    # The correct equation should be x - 14\n    # We now subtract the correct subtrahend from the original number x\n    correct_difference = incorrect_total - 14\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    sum = 0\n    for i in range(20, 41, 2):\n        if i % 4 == 0:\n            sum -= i\n        else:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    tiny_sisters = 4\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters_apples_each * tiny_sisters) + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    initial_amount = 5000\n    final_amount = 7320.5\n    years = 4\n\n    interest_rate = (final_amount / initial_amount) ** (1 / years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n\n    # Count for numbers with 4 digits\n    for thousand in range(3, 6):  # 3267 to 5120 -> thousands' place can be 3, 4, or 5\n        for hundred in range(1, 7):\n            if hundred != thousand:\n                for ten in range(1, 7):\n                    if ten != thousand and ten != hundred:\n                        for one in range(1, 7):\n                            if one != thousand and one != hundred and one != ten:\n                                number = thousand * 1000 + hundred * 100 + ten * 10 + one\n                                if 3267 <= number <= 5120:\n                                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Let the original side length of the square array be x.\n    x = Symbol('x', integer=True)\n\n    # The original total number of soldiers is x^2.\n    # After adding 31 soldiers, the total number becomes (x + 1)^2.\n    # The equation for the problem is: x^2 + 31 = (x + 1)^2\n    equation = Eq(x**2 + 31, (x + 1)**2)\n\n    # Solve the equation to find the value of x\n    solved_x = solve(equation, x)\n\n    # There are two solutions, one positive and one negative. We need the positive one.\n    positive_x = [sol for sol in solved_x if sol.is_real and sol > 0][0]\n\n    # The total number of soldiers is now (x + 1)^2.\n    total_soldiers = (positive_x + 1)**2\n\n    return total_soldiers\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # From the equation (3/box) * 56 = 21, we need to find the value of box\n    # Rearrange the equation to solve for box:\n    # box = (3 * 56) / 21\n    box = (3 * 56) / 21\n\n    return box\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    A = 3.2 + 6.77 + 8.88\n    B = 6.77 + 8.88 + 6.3\n    C = 3.2 + 6.77 + 8.88 + 6.3\n    ans = (A * B) - (C * (6.77 + 8.88))\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes it takes to paint one picture\n    total_time = 80  # total time in minutes (one hour and twenty minutes)\n\n    pictures_painted = total_time / time_per_picture\n\n    return int(pictures_painted)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm))\n        second_number = 2 * first_number\n        third_number = 4 * first_number\n        all_numbers = set(str(first_number) + str(second_number) + str(third_number))\n        if len(all_numbers) == 7 and all_numbers == set(digits):\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes = shirts * pants * shoes\n    dress_shoes = dresses * shoes\n    dress_heels = dresses * heels\n\n    total_combinations = blouse_pants_shoes + dress_shoes + dress_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, teddy = symbols('book teddy')\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    difference_kg = abs(soil_mass_g - sand_mass_g) // 1000\n    difference_g = abs(soil_mass_g - sand_mass_g) % 1000\n    \n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # There are 30 apples to be distributed to Ann and five other children.\n    total_apples = 30\n    # Since each child must get at least one apple, we allocate one apple to each child first.\n    apples_for_other_children = 5\n    # Now, we subtract the apples given to the other children from the total.\n    remaining_apples = total_apples - apples_for_other_children\n    # The largest possible number of apples Ann can get is the remainder after giving each child one apple.\n    ann_apples = remaining_apples\n    \n    return ann_apples\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_score = 29\n    correct_points = 4\n    incorrect_points = -2\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_sum = sum([int(digit) for digit in \"12345\"])\n    full_patterns_count, remaining_digits_count = divmod(52, 5)\n\n    total_sum = full_patterns_count * pattern_sum + sum([int(\"12345\"[i]) for i in range(remaining_digits_count)])\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    kites = total_paper / paper_per_kite\n\n    return int(kites) # since we can't make a fraction of a kite, we take the integer part\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_length = 320\n    trees = 79 - 1  # Subtract 1 because there's no tree at the beginning and end\n\n    distance_between_trees = total_length / trees\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Given trade ratios\n    fish_to_rabbit_ratio = 10 / 4\n    rabbit_to_wheat_ratio = 5 / 6\n    \n    # Calculate the single trade ratio from fish to wheat\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    # Calculate how many fish needed for 12 packs of wheat\n    fish_needed_for_12_wheat = fish_to_wheat_ratio * 12\n    \n    return fish_needed_for_12_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    total_length = 10 + 4/5\n    short_rod_length = 3/10\n    number_of_rods = total_length / short_rod_length\n    return int(number_of_rods)\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_laptop_count = 30\n    laptops_needed = 20\n    \n    cost_without_deal = single_laptop_cost * laptops_needed\n    cost_per_laptop_on_deal = deal_cost / deal_laptop_count\n    cost_with_deal = cost_per_laptop_on_deal * laptops_needed\n    \n    savings = cost_without_deal - cost_with_deal\n    \n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    \n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n    \n    penguin_count = solve(equation1, penguins)\n\n    return penguin_count[0]\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Assuming the 5 numbers are a, b, c, d, e and their total sum is S\n    # According to the given information:\n    # (S - a) / 4 = 37 => S - a = 148\n    # (S - b) / 4 = 43 => S - b = 172\n    # (S - c) / 4 = 34 => S - c = 136\n    # (S - d) / 4 = 47 => S - d = 188\n    # (S - e) / 4 = 33 => S - e = 132\n\n    # Summing all these equations together:\n    # 5S - (a + b + c + d + e) = 148 + 172 + 136 + 188 + 132\n    # As (a + b + c + d + e) = S, we have:\n    # 5S - S = 148 + 172 + 136 + 188 + 132\n\n    total_sum_of_averages = 148 + 172 + 136 + 188 + 132\n    # 4S = total_sum_of_averages\n    sum_of_all_numbers = total_sum_of_averages\n\n    # Average of all numbers = S / 5\n    average_of_all_numbers = sum_of_all_numbers / 5\n    \n    return average_of_all_numbers\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n\n    total_earnings = hourly_wage * hours_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_added = 26\n    correct_result = incorrect_result + 2 * subtracted_instead_of_added\n    return correct_result\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n    \n    # Since M and N have only prime factors 3 and 5, and their hcf is 75,\n    # We assume M = 3^a * 5^b, N = 3^c * 5^d, with gcd(a,b) = gcd(c,d) = 1\n    # Given HCF(M, N) = 75 = 3^1 * 5^2\n    \n    # Find factor combination for M with 12 factors.\n    # Number of factors is given by the formula (a+1)(b+1) where a, b are the powers of prime factors\n    # Therefore, if M has 12 factors, possible combinations of exponents (including 0)\n    # considering HCF: a+1 * b+1 = 12 => (1, 11), (2, 5), (3, 3)\n    possible_a_b = [(a-1, b-1) for a in [1,2,3] for b in [11,5,3] if (a*b) == 12]\n    possible_a_b = [(a, b) for a, b in possible_a_b if a >= 1 and b >= 2] # a must be at least 1 and b at least 2 (because HCF 3^1*5^2)\n\n    # We do the similar process for N with 10 factors: (1, 9), (2, 4)\n    possible_c_d = [(c-1, d-1) for c in [1,2] for d in [9,4] if (c*d) == 10]\n    possible_c_d = [(c, d) for c, d in possible_c_d if c >= 1 and d >= 2] # c must be at least 1 and d at least 2\n\n    M_values = []\n    N_values = []\n    \n    # Calculate all possible M and N values\n    for a, b in possible_a_b:\n        M_values.append((3**a) * (5**b))\n    for c, d in possible_c_d:\n        N_values.append((3**c) * (5**d))\n        \n    # Since 75 is the HCF of M and N, we need to look for a common factor of 75 in our M and N values\n    for m in M_values:\n        for n in N_values:\n            if divisors(m).count(75) > 0 and divisors(n).count(75) > 0:\n                ans = m + n\n                return ans\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Total performances: 6 singing (S) + 4 dancing (D)\n    # There can be at most 3 D's with 1 S in between each\n    \n    # C5_3 is the number of ways to insert 3 D's into 5 slots between S's plus one slot at the end\n    # The remaining D can be placed in any of the 7 slots between S's plus two ends, thus multiplied by 7\n    # SSSSSS -> insert D's -> DS|S|DS|S|DS|S|D ('|' represents possible separator locations)\n\n    C5_3 = factorial(5) // (factorial(3) * factorial(5 - 3))  # Combination of choosing 3 from 5\n    C6_4 = factorial(6) // (factorial(4) * factorial(6 - 4))  # The remaining 6 S's can be arranged in any order with the D's fixed\n\n    # Finally, multiply the number of ways to place 3 D's with the number of ways to arrange the remaining performances\n    return C5_3 * 7 * C6_4\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 0.35 * 80\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # since `a` cannot be 0 in `aab`\n        for b in range(0, 10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation = Eq(clara, 5 * emma)\n    total_cookies = Eq(clara + emma, 1002)\n\n    solutions = solve((equation, total_cookies), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    num_students = 6\n    num_monitors = 2\n    \n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Since the final score is 3-2, we know that one team scored 3 goals and the other scored 2 goals.\n    # We need to identify all the possible combinations of half time scores that could lead to this final score.\n    for team1_ht in range(4):  # Team 1 can score up to 3 goals by halftime (0 through 3)\n        for team2_ht in range(3):  # Team 2 can score up to 2 goals by halftime (0 through 2)\n            # After halftime, the number of goals scored by each team cannot decrease and\n            # the total should not exceed the final score.\n            # Thus, we check if the half time score is a possible scenario for the final 3-2 score.\n            if team1_ht <= 3 and team2_ht <= 2:\n                # Calculate the remaining goals after half time\n                team1_second_half_goals = 3 - team1_ht\n                team2_second_half_goals = 2 - team2_ht\n                \n                # It's a valid half time score if both teams can score the remaining number of goals\n                if 0 <= team1_second_half_goals <= 3 - team1_ht and 0 <= team2_second_half_goals <= 2 - team2_ht:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - (2 * mangoes_half_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 0.85 * 400\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Given that Bud is left with 16 sweets and that represents 2/5 of the total\n    # because Pip ate 3/5 of the total sweets.\n    # So, 1/5 of the total sweets would be 16 / 2\n\n    one_fifth = 16 / 2\n    total_sweets = one_fifth * 5  # Multiply by 5 to get the total\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Initialize the number of students (as we do not know it yet)\n    num_students = None\n\n    # Search through possible dimensions for the rectangular array of desks and chairs\n    for i in range(2, 100): # We start from 2 since Mike is the 2nd in line, and consider reasonable limits for a classroom\n        for j in range(2, 100): # Likewise, we start from 2 for the other dimension\n            # The total number of students is i * j if it's a rectangular array\n            total = i * j\n            \n            # Check if Mike can be the 2nd in all directions\n            # This means (i - 1) should be divisible by 2 and (j - 1) should also be divisible by 2\n            # as it would mean that Mike is 2nd no matter the direction of counting.\n            if (i - 1) % 2 == 0 and (j - 1) % 2 == 0:\n                # If the condition matches, we assign the total number of students to the result\n                num_students = total\n                break # We can break the inner loop since we found a valid configuration\n\n        if num_students is not None:\n            break # We can break the outer loop since we found a valid configuration\n\n    return num_students\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    num = 6 * 5\n    ans = (num / 40) * 100\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_of_3_cups = 30\n    number_of_cups_wanted = 5\n\n    cost_per_cup = cost_of_3_cups / 3\n    total_cost = cost_per_cup * number_of_cups_wanted\n\n    return total_cost\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # Total accommodation of big mushroom houses\n    big_houses_acc = 5 * 4\n    # Total rabbits that need accommodation\n    total_rabbits = 38\n    # Rabbits that can be accommodated in small houses\n    small_houses_rabbits = total_rabbits - big_houses_acc\n    # Total number of small houses\n    small_houses = 9\n    # Rabbits per small house\n    rabbits_per_small_house = small_houses_rabbits / small_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_earnings = 60\n    days_in_week = 7\n    total_earnings = daily_earnings * days_in_week\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i + 1)**2 - i**2 for i in range(1, 8, 2))\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # One way to stay on the ground level\n    ways[1] = 1  # One way to reach first step\n    ways[2] = 2  # Two ways to reach second step: (1+1) or (2)\n\n    for i in range(3, 7):\n        ways[i] = ways[i-1] + ways[i-2] + ways[i-3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_numbers = 21 + 22 + 23\n    for i in range(1, sum_numbers):\n        if 2 * 3 * i == sum_numbers:\n            return i\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let g be the total number of girls and b the total number of boys.\n    g = Symbol('g')\n    b = Symbol('b')\n    \n    # According to the problem, half of the pupils who cannot swim are girls,\n    # and the other half are boys, so there are 10 girls and 10 boys who cannot swim.\n    # Number of girls who can swim is (3/8)g, and number of boys who can swim is (3/5)b.\n    # Total pupils who can swim is then (3/8)g + (3/5)b.\n    # Total pupils who cannot swim is 20.\n    #\n    # Together, (5/8)g + (2/5)b = 20 (since (5/8)g is the fraction of girls who cannot swim\n    # and (2/5)b is the fraction of boys who cannot swim).\n    #\n    # Additionally, we know that there are equal numbers of boys and girls, so g = b.\n    \n    # Formulating equations\n    eq1 = (5/8)*g + (2/5)*b - 20\n    \n    # Since the number of boys equals the number of girls, we substitute g with b in eq1\n    eq2 = eq1.subs(g, b)\n    \n    # Now we solve for the total number of pupils\n    total_pupils_solution = solve(eq2, b)[0]\n    \n    # Since g = b, the total number of pupils is g + b = 2*b\n    total_pupils = 2 * total_pupils_solution\n    \n    return total_pupils\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail_age_now, ryan_age_now = symbols('abigail_age_now ryan_age_now')\n\n    equation1 = Eq(abigail_age_now, 3 * ryan_age_now)\n    equation2 = Eq(abigail_age_now + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail_age_now, ryan_age_now))\n\n    ryan_age_in_2_years = solutions[ryan_age_now] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    # Speed upstream is speed in still water minus speed of current\n    speed_upstream = speed_in_still_water - speed_of_current\n\n    # Time is distance divided by speed\n    time_to_travel_upstream = distance / speed_upstream\n\n    return time_to_travel_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 - (56 % 4) if (56 % 4) != 0 else 56\n    last_multiple = 92 - (92 % 4)\n\n    ans = (last_multiple - first_multiple) // 4 + 1\n    return ans\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    original_number = 31743\n    multiple = 823\n    original_digits = [int(d) for d in str(original_number)]\n    \n    for i in range(len(original_digits)):\n        for digit in range(10):\n            new_digits = original_digits.copy()\n            new_digits[i] = digit\n            new_number = int(''.join(map(str, new_digits)))\n            if new_number % multiple == 0:\n                return new_number\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Considering the cyclic nature of the units digits in powers of 9:\n    # 9^1 has a units digit of 9\n    # 9^2 has a units digit of 1 (since 81)\n    # 9^3 has a units digit of 9 (since 729)\n    # 9^4 has a units digit of 1 (since 6561)\n    # After 9^2, the units digit cycles between 9 and 1 for every subsequent even and odd power respectively.\n    # Since 999^99 is an odd power, its units digit will be the same as 9^1.\n    \n    ones_digit = 9  # The ones digit in 9 to the power of any odd integer is 9\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let claire's current age be 'x'\n    claire = symbols('claire')\n\n    # In 6 years, Claire's age will be 'x + 6'\n    # At that time, Claire will be three times her current age: 3 * x\n    equation = Eq(claire + 6, 3 * claire)\n\n    # Solve the equation to find Claire's current age\n    claire_current_age = solve(equation, claire)[0]\n\n    # Claire's age two years from now will be 'current age + 2'\n    claire_age_in_two_years = claire_current_age + 2\n\n    return claire_age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time the journey should have taken\n    x = symbols('x')\n    # Since the train was 15 minutes late but arrived only 5 minutes late, it made up 10 minutes\n    # If the journey took 11/12 of the time it should have, we set up the following equation:\n    # x - 10 = 11/12 * x\n    equation = Eq(x - 10, (11/12) * x)\n\n    # Solve the equation\n    solved_time = solve(equation, x)\n\n    return solved_time[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        digits = set(str(year))\n        if digits == {'0', '2'} or digits == {'2'} or digits == {'0'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    partial_product = 5.42 * 5\n    missing_number = (total_product - partial_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Assume Susan pays with a 50p coin, which is common and it keeps the number small.\n    # The number of coins Susan hands to the driver is 1.\n    susan_pays = 50\n    \n    # The driver gives change for the difference.\n    change_required = susan_pays - 44\n    \n    # Assuming UK currency, the smallest number of coins that can sum to 6p is two: \n    # one 5p and one 1p coin.\n    # Therefore, the total number of coins that change hands is:\n    driver_gives = 2\n    \n    # Calculating the total number of coins \n    total_coins = 1 + driver_gives\n    \n    return total_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    \n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4  # Number of legs per chicken\n    total_legs = legs_per_chicken * 9  # Total legs for 9 chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    number = 18 - 12\n    return number\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_climb = 0\n    day = 0\n    while total_climb < 9:\n        day += 1\n        total_climb += 3\n        if total_climb >= 9:\n            break\n        total_climb -= 1\n    return day\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    # Let x be the average score of the top 4\n    # Then the average of the top 7 is x - 3\n    # And the average of the top 10 is (x - 3) - 4 = x - 7\n\n    # Total score of top 4 = 4x\n    # Total score of top 7 = 7 * (x - 3)\n    # Total score of top 10 = 10 * (x - 7)\n\n    # The difference in score between the total of 5, 6, 7 and 8, 9, 10\n    # Can be calculated as:\n    # (Total score of 5, 6, 7) - (Total score of 8, 9, 10)\n    # = (Total score of top 7) - (Total score of top 4) - (Total score of top 10) + (Total score of top 7)\n    # = (7 * (x - 3) - 4x) - (10 * (x - 7) - 7 * (x - 3))\n    # = 7x - 21 - 4x - 10x + 70 + 7x - 21\n    # = 3x - 21 + 3x - 21\n    # = 6x - 42\n\n    # The difference in the average score corresponds to three competitors:\n    # Total score difference = 3 * Score difference per competitor\n    # Score difference per competitor (between the groups of 4 and 7, and 7 and 10) = 3 + 4 = 7\n    # Total score difference = 3 * 7\n\n    score_difference_per_competitor = 7\n    total_score_difference = 3 * score_difference_per_competitor\n     \n    return total_score_difference\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # This problem is a case of distributing n identical objects into r distinct boxes\n    # with each box (kid) getting at least 1 object (book).\n    # The number of ways to do this is given by the formula for combinations C(n-1, r-1).\n    \n    books = 19\n    kids = 4\n\n    # Since each kid gets at least one book, we distribute one to each first, leaving us with:\n    remaining_books = books - kids\n\n    # Now we need to calculate the combinations C(remaining_books + kids - 1, kids - 1)\n    ans = factorial(remaining_books + kids - 1) // (factorial(remaining_books) * factorial(kids - 1))\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # the worst case is that Jane picks all marbles of a single color first before moving on to the next color\n    # since there are 4 red, she can pick all 4 reds\n    # then for the green, she can pick all 7 greens and still not have 4 different colors\n    # then for the blue, she can pick all 6 blues and still not have 4 different colors\n    # at this point, she has 3 different colors, to ensure she gets the 4th color (orange), she needs to draw 2 more\n    # Total is 4 (red) + 7 (green) + 6 (blue) + 2 (orange) = 19\n    return 4 + 7 + 6 + 2 - 3  # Subtract 3 because we include the last drawn orange marble in our total count\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    D = 41  # Tank D contains 41 litres of water\n\n    # Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(A, 5 * B)\n    # Tank B contains 5 more litres of water than Tank C\n    equation2 = Eq(B, C + 5)\n    # The total amount of water in Tank C and Tank D is equal to the total amount of water in Tank A\n    equation3 = Eq(C + D, A)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4*i)**2 - (4*i - 2)**2 for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    total_cups_needed = 30\n    gallons_needed = total_cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of motorbikes, t be the number of tricycles and v be the number of vans.\n    m, t, v = symbols('m t v')\n\n    # A motorbike has 2 wheels, a tricycle has 3 wheels and a van has 4 wheels.\n    # The problem gives us the following equations:\n    # 1. There are 35 more motorbike (2 wheels each) and van (4 wheels each) wheels than tricycle (3 wheels each) wheels.\n    # 2. There are 13 more tricycle (3 wheels each) and van (4 wheels each) wheels than motorbike (2 wheels each) wheels.\n    # 3. There are a total of 101 wheels.\n    \n    equation1 = Eq(2*m + 4*v - 3*t, 35) # More motorbike and van wheels than tricycle wheels\n    equation2 = Eq(3*t + 4*v - 2*m, 13) # More tricycle and van wheels than motorbike wheels\n    equation3 = Eq(2*m + 3*t + 4*v, 101) # Total number of wheels\n\n    # Solving the system of equations to find the number of each type of vehicle\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # The number of more motorbikes than vans is the value of 'm' minus the value of 'v' from the solutions.\n    motorbikes_more_than_vans = solutions[m] - solutions[v]\n\n    return motorbikes_more_than_vans\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Including Pip and Bud themselves\n    pip_and_bud = 2\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, we give one pen to each case first.\n    # Now we have 6 - 3 = 3 pens left to distribute into 3 pencil cases.\n    \n    # This is a problem of distributing n identical items into r distinct groups,\n    # which can be solved using the formula for combinations with repetition:\n    # (n + r - 1) choose (r - 1), where choose is the binomial coefficient.\n    #\n    # In our case, n = 3 pens and r = 3 pencil cases.\n    # So we have (3 + 3 - 1) choose (3 - 1) = 5 choose 2.\n    \n    # Calculate the binomial coefficient: C(5, 2)\n    from math import comb\n    count = comb(5, 2)\n    \n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    known_numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    total = average * 8\n    sum_known = sum(known_numbers)\n    p_plus_q = total - sum_known\n\n    differences = []\n    for p in range(min(known_numbers), p_plus_q - min(known_numbers) + 1):\n        q = p_plus_q - p\n        if p < q and max(known_numbers + [p, q]) - min(known_numbers + [p, q]) == 6:\n            differences.append(q)\n\n    return min(differences)\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # Since 7, 11, and 13 are pairwise coprime, we can use the Chinese Remainder Theorem (CRT)\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences given by the problem\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    \n    # Using CRT to solve for the number\n    result, modulo = solve_congruence(*congruences)\n    \n    # Since we want the smallest five-digit number, we can add multiples of 7*11*13 until we reach a five-digit number\n    lcm = 7 * 11 * 13\n    while result < 10000:\n        result += lcm\n\n    return result\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam in km/h\n    adam_speed = 60\n    # Speed of Jacob in km/h\n    jacob_speed = 80\n    \n    # Time taken by Jacob to reach home in hours\n    jacob_time = 3\n    # Time taken by Adam to reach home in hours (add 0.5 hours to Jacob's time)\n    adam_time = jacob_time + 0.5\n    \n    # Distance covered by Adam until Jacob reaches home (3 hours)\n    distance_adam = adam_speed * jacob_time\n    # Distance covered by Jacob until he reaches home (3 hours)\n    distance_jacob = jacob_speed * jacob_time\n    # Additional distance covered by Adam in the last 0.5 hours\n    additional_distance_adam = adam_speed * 0.5\n    \n    # Total distance between their homes is the sum of distances each covered\n    total_distance = distance_adam + additional_distance_adam + distance_jacob\n    \n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    term_number = 21\n\n    nth_term = first_term + (term_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_mult(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result_1_2 = custom_mult(1, 2)\n    result_1_2_3 = custom_mult(result_1_2, 3)\n    result_1_2_3_4 = custom_mult(result_1_2_3, 4)\n    final_result = custom_mult(result_1_2_3_4, 5)\n    return int(final_result)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from sympy import primerange\n\ndef solution():\n    # Start with 1 and the maximum possible prime for the given perimeter\n    min_area = float('inf')\n\n    # Iterate over all primes less than half the perimeter (since the other side should be prime as well)\n    for length in primerange(1, 18):\n        # Calculate the corresponding width (P = 2l + 2w)\n        width = 18 - length\n        # Check both numbers are primes\n        if width in primerange(1, 18):\n            area = length * width\n            # If area is less than current minimum, update min_area\n            if area < min_area:\n                min_area = area\n\n    return min_area\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # using the Pigeonhole Principle\n    most_cakes_in_one_layer = (total_cakes + layers - 1) // layers\n    return most_cakes_in_one_layer\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # According to the problem, we have:\n    # Number of students who like football only: 3x - x = 2x\n    # Number of students who like basketball only: 4x - x = 3x\n    # Total number of students: x + 2x + 3x = 36\n\n    # Summing them up using the Inclusion-Exclusion Principle\n    equation = Eq(x + 2 * x + 3 * x, 36)\n  \n    # Solving for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    total_paid = 0.91\n    gst_rate = 0.07\n    price_before_gst = total_paid / (1 + gst_rate)\n    return price_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case: Lucy takes all marbles of one color first\n    # Then she needs to take only one more marble to guarantee a pair of same color\n    # There are 2 blue and 2 yellow, so taking 3 marbles might still not guarantee the same color\n    # Taking one more, which is the 4th marble, will guarantee 2 marbles of the same color\n    return 4\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000  # conversion factor from kilograms to grams\n    weight1 = 2.49 * kg_to_g\n    weight2 = 670  # already in grams\n    weight3 = (3 * kg_to_g) + 80\n\n    total_weight_g = weight1 + weight2 + weight3\n\n    return total_weight_g\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_minutes = 60\n    cycling_fraction = 1/3\n    cycling_minutes = total_exercise_minutes * cycling_fraction\n    jogging_minutes = total_exercise_minutes - cycling_minutes\n    \n    return jogging_minutes\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # We know that 252 = 36 * 7\n    # Factorize 36 (which is 2^2 * 3^2) and 7 (which is a prime)\n    # Number of factors = (2+1)*(2+1)*(1+1) where 2 and 1 are the exponents in the prime factorization\n    # of 36 and 7 respectively.\n    factors_count = (2 + 1) * (2 + 1) * (1 + 1)\n    return factors_count\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # calculate the common difference\n    common_difference = 18 - 22\n    \n    # last term of the given sequence\n    last_term = 2\n    \n    # next term of the sequence\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    total_apples = 30\n    num_children = 6\n    min_apples = 1\n    max_apples = total_apples - sum(range(min_apples, min_apples + num_children)) + (num_children - 1)\n    # We subtract 1 from num_children to leave one apple for each of the other children\n    return max_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_consumption_rate = 72.8\n    tom_additional_petrol = 6 + 3/4\n    sam_petrol_used = distance / sam_consumption_rate\n    tom_petrol_used = sam_petrol_used + tom_additional_petrol\n    tom_consumption_rate = distance / tom_petrol_used\n    return tom_consumption_rate\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart has to take at least one of each color to ensure two different colors.\n    # We start by taking all 3 reds out, ensuring we have at least one red.\n    # Next, we need to ensure we have another color. Taking 1 more gives us at least 1 yellow or brown.\n    # But to ensure we get another color and not just any yellow or brown, we take another one.\n    # So we need to take 3 (reds) + 1 (guaranteed another color) + 1 (ensuring it's a different color)\n    # Total = 3 + 1 + 1 = 5\n    \n    return 5  # Minimum number of M&Ms needed to ensure 2 different colors\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Least Common Multiple (LCM) gives the time interval in seconds\n    # when all three runners will be at the starting point together\n    interval_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Starting time is 10:00 am, in seconds from midnight\n    start_time_seconds = 10 * 3600\n\n    # Next meeting time in seconds from midnight\n    next_meeting_seconds = start_time_seconds + interval_seconds\n\n    # Convert seconds to hours and minutes\n    next_meeting_hours = next_meeting_seconds // 3600\n    next_meeting_minutes = (next_meeting_seconds % 3600) // 60\n    next_meeting_time = f\"{next_meeting_hours:02d}:{next_meeting_minutes:02d} a.m.\"\n\n    # If the meeting time is past 12 p.m., convert it to p.m.\n    if next_meeting_hours > 12:\n        next_meeting_hours -= 12\n        next_meeting_time = f\"{next_meeting_hours:02d}:{next_meeting_minutes:02d} p.m.\"\n\n    return next_meeting_time\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        num = int(\"24572\" + str(i))\n        if num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum([i**2 for i in range(1, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2  # Number of shirts\n    skirts = 2  # Number of skirts\n\n    # Number of ways to match outfits = number of shirts * number of skirts\n    ans = shirts * skirts\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    ans = 3**2  # The pattern is powers of 3 (3^0, 3^1, 3^2, 3^3 ...)\n    return ans\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    common_difference = 120 - 105  # Difference between consecutive terms\n    first_term = 105 - (6 * common_difference)  # Calculate the first term based on 7th term being 105\n    hundredth_term = first_term + (99 * common_difference)  # Calculate 100th term\n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert each number to base 10\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n    \n    # Calculate the sum in base 10\n    sum_base10 = num1_base10 + num2_base10\n    \n    # Convert the sum back to base 7\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n        \n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n    \n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    initial_ratio = Eq(oranges / lemons, 3/5)\n    final_ratio = Eq((oranges - 48) / lemons, 1/2)\n\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    number_of_rabbits = 8\n    number_of_days = 5\n\n    total_carrots = carrots_per_rabbit_per_day * number_of_rabbits * number_of_days\n    \n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rate at which each animal eats a bale of hay per day\n    horse_rate = 1 / 2  # bales per day\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    # Calculate the total rate at which all animals eat the hay per day\n    total_rate = horse_rate + cow_rate + sheep_rate\n\n    # Calculate the number of days the bales will last for all animals\n    days = 22 / total_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5/8) * 160\n    return ans\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother, daughter = symbols('mother daughter')\n    \n    equation1 = Eq(mother - daughter, 75)\n    equation2 = Eq(mother - 2 * (daughter - 3), 0)\n\n    solutions = solve((equation1, equation2), (mother, daughter))\n\n    return solutions[mother]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    class_a_students = 33\n    class_b_students = 22\n    class_a_average = 80\n    overall_average = 82\n\n    total_score = (class_a_students + class_b_students) * overall_average\n    class_a_total_score = class_a_students * class_a_average\n    class_b_total_score = total_score - class_a_total_score\n    class_b_average = class_b_total_score / class_b_students\n    \n    return class_b_average\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Since there are 5 red apples, the worst case scenario is that Isabella would\n    # pick all non-red apples before getting to the 3 red ones.\n    # This would mean taking all 11 green and 7 yellow apples to ensure that the next\n    # 3 apples she takes are red.\n\n    non_red_apples = 11 + 7  # green + yellow apples\n    red_apples_required = 3\n\n    # To guarantee 3 red apples, she must pick all non-red apples plus 3 red apples.\n    total_apples_to_take = non_red_apples + red_apples_required\n\n    return total_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum possible number of left-handed girls\n    max_left_girls = girls - (total_pupils - right_handed)\n    \n    # The smallest number of right-handed girls\n    right_handed_girls = girls - max(max_left_girls, 0)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    spent = 6400\n    original_price = spent / 0.2\n    savings = original_price - spent\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament, each team plays against every other team once.\n    # There are 6 teams, so each team plays 5 games.\n    # Since there are two possibilities for each game (win/lose or tie), we calculate the total points as follows:\n    # - If one team wins and the other team loses, a total of 2 points (2 for win, 0 for lose) is distributed.\n    # - If the game is a tie, a total of 2 points (1 for each team) is distributed.\n    # Because each game always results in 2 points being distributed, regardless of the outcome,\n    # the total points distributed over all games is the number of games multiplied by 2.\n\n    # Calculate the number of games in the tournament:\n    # This is the number of combinations of 6 teams taken 2 at a time, since each game is between 2 teams.\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    # Calculate the total points distributed:\n    total_points = num_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_shrimp_dumplings = 5 * 4\n    total_siumai = 8 * 4\n    total_pastries = total_shrimp_dumplings + total_siumai\n\n    # They all ate three pastries and there would be one left\n    number_of_people = (total_pastries - 1) // 3\n\n    # Define a helper function to find the number of girls and boys\n    def find_groups():\n        for girls in range(1, number_of_people + 1):\n            boys = number_of_people - girls\n            if girls != 0 and total_shrimp_dumplings % girls == 0 and \\\n               total_siumai % boys == 0:\n                return (girls, boys)\n    \n    girls, boys = find_groups()\n    shrimp_per_girl = total_shrimp_dumplings // girls\n    return shrimp_per_girl\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    # Given numbers are 101, 97, 102, 99, 98, 103, and -100\n    # Calculate the sum\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Number of each colored marble\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # Maximum marbles she can pick without having all 4 colors\n    # is the sum of the three largest amounts of colored marbles\n    max_without_all_colors = green + blue + (red - 1)\n    \n    # Jane needs to pick one more than this to ensure she has all 4 different colors\n    marbles_to_ensure_all_colors = max_without_all_colors + 1\n    \n    return marbles_to_ensure_all_colors\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if (number % 2 == 0 and \n            number % 3 == 0 and\n            number % 5 == 0 and\n            number % 7 == 6):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    count_of_twos = 0\n    count_of_fives = 0\n    while True:\n        count_of_twos += n // 2\n        count_of_fives += n // 5\n        min_zeros = min(count_of_twos, count_of_fives)\n        if min_zeros >= 28:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 42):  # as 3a+7b=41 and both a and b are prime, a is less than 41/3\n        if isprime(a):\n            b = (41 - 3*a) // 7\n            if (41 - 3*a) % 7 == 0 and isprime(b):\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_4pc = 7\n    cost_6pc = 8.5\n    \n    price_per_pc_4pc = cost_4pc / 4\n    price_per_pc_6pc = cost_6pc / 6\n    \n    if price_per_pc_4pc < price_per_pc_6pc:\n        ans = \"4pc is a better buy\"\n    elif price_per_pc_4pc > price_per_pc_6pc:\n        ans = \"6pc is a better buy\"\n    else:\n        ans = \"Both are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys, girls, and those who can and can't swim\n    boys, girls, swimming_girls, non_swimming_girls, swimming_boys, non_swimming_boys = symbols(\n        'boys girls swimming_girls non_swimming_girls swimming_boys non_swimming_boys')\n\n    # Equations based on the problem\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(swimming_girls / non_swimming_girls, 31 / 49)  # The ratio of girls who can swim to those who can't\n    equation3 = Eq(swimming_boys, non_swimming_boys - 120)  # The number of boys who can swim is 120 less than who can't\n    equation4 = Eq(boys + girls, 1690)  # Total number of pupils\n    equation5 = Eq(swimming_girls + non_swimming_girls, girls)  # Total number of girls divided into swimmers and non-swimmers\n    equation6 = Eq(swimming_boys + non_swimming_boys, boys)  # Total number of boys divided into swimmers and non-swimmers\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (boys, girls, swimming_girls, non_swimming_girls, swimming_boys, non_swimming_boys))\n\n    # Calculate the total number of pupils who cannot swim\n    not_swim = solutions[non_swimming_girls] + solutions[non_swimming_boys]\n\n    return not_swim\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_phone = 740\n    spent_on_rent = 0.75 * (salary - spent_on_phone)\n    remaining_salary = salary - spent_on_phone - spent_on_rent\n\n    equation = Eq(remaining_salary, salary / 5)\n    salary_amount = solve(equation, salary)\n\n    return salary_amount[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_with_2_apples\n    basket_weight = remaining_weight_with_2_apples - (2 * weight_of_3_apples / 3)\n    \n    return basket_weight\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '234'\n    unique_numbers = set()\n    \n    for i in range(1, len(digits)+1):\n        for combo in permutations(digits, i):\n            number = int(''.join(combo))\n            unique_numbers.add(number)\n            \n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_time = datetime.strptime(\"02:31\", \"%H:%M\")\n    while True:\n        current_time += timedelta(minutes=1)\n        if (all(str(digit) in current_time.strftime(\"%H%M\") for digit in range(4))):\n            break\n    return (current_time - datetime.strptime(\"02:31\", \"%H:%M\")).seconds // 60\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_volume = symbols('original_volume')\n\n    equation = Eq(original_volume/2 - 100, 150)\n\n    solution = solve(equation, original_volume)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_ways = 6 * 6  # There are 6 faces on each die, so 6*6 total combinations\n    favorable_ways = 0  # Counter for ways to get a sum greater than 10\n\n    # Count the number of ways to get a sum greater than 10\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 > 10:\n                favorable_ways += 1\n\n    # The probability of winning\n    probability_of_winning = favorable_ways / total_ways\n\n    # The expected value from a single game\n    # We earn £9 (difference between £10 gain and £1 bet) with probability_of_winning chance\n    # We lose £1 with the remaining (1 - probability_of_winning) chance\n    expected_value_per_game = (9 * probability_of_winning) - (1 * (1 - probability_of_winning))\n\n    # The expected loss after 60 games is the expected value per game times 60\n    expected_loss = -60 * expected_value_per_game\n\n    return expected_loss\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "网络故障，请重试"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    # Total perimeter of the rectangle is given by the number of sticks\n    perimeter = 26\n\n    # Since a rectangle has 4 sides and we want to maximize area,\n    # the best shape is a square where all sides are equal.\n    side_length = perimeter // 4  # Integer division, as we have an integer number of sticks for each side\n\n    # The remaining sticks after forming the square will be used\n    # to increase one dimension (length or width) to maximize area\n    remaining_sticks = perimeter % 4\n\n    # Maximum area is achieved by adding the remaining sticks to one side of the square\n    max_area = (side_length + remaining_sticks) * side_length\n    return max_area\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    weight_per_bag = 3/4\n\n    num_bags = remaining_after_tuesday / weight_per_bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    tickets_unsold = 28\n    unsold_percentage = 0.40\n\n    total_tickets = tickets_unsold / unsold_percentage\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # The divisor is at least one more than the remainder\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(64, 43, -2)])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Let the correct tens place be 'a' and the ones place be 'b'\n    # Then the incorrect subtraction would look like: (10a + b) - (50 + 3)\n    # And after the mistake, the difference Serene got was 36. So:\n    # (10a + b) - (50 + 3) = 36\n    # To find the correct subtraction, we should replace the incorrect digits with the right ones:\n    # (10a + b) - (30 + 2)\n    \n    for a in range(1, 10):  # 'a' must be a non-zero digit for a 2-digit number\n        for b in range(0, 10):\n            if (10 * a + b) - (50 + 3) == 36:\n                correct_difference = (10 * a + b) - (30 + 2)\n                return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    result = (41 + 4) / 5\n    return result\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    num_jugs = -(-total_ml // jug_capacity)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1\n    blue_ball = 1\n    target_percentage = 0.90\n\n    # Let x be the number of red balls to be removed\n    # We know that after removing x red balls we'll have:\n    # (49 - x) red balls left\n    # Our equation will be:\n    # (49 - x) / (total_balls - x) = target_percentage\n    # Solve for x\n\n    # Simplifying the equation we get:\n    # 49 - x = target_percentage * (total_balls - x)\n    # 49 - x = target_percentage * (50 - x)\n    # 49 - x = 45 - target_percentage * x\n    # x - target_percentage * x = 45 - 49\n    # x * (1 - target_percentage) = -4\n    # x = -4 / (1 - target_percentage)\n    \n    x = -4 / (1 - target_percentage)\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / 97 * (99 / 96)**i for i in range(0, 96))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote cows as 'c' and birds as 'b'\n    c, b = symbols('c b')\n\n    # We know that there are 3440 legs and 1300 cows and birds in total\n    equation1 = Eq(c * 4 + b * 2, 3440)\n    equation2 = Eq(c + b, 1300)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    # c represents the number of cows\n    return solutions[c]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "import math\n\ndef solution():\n    # Given values\n    mass_car_1 = 500  # in kg\n    mass_car_2 = 500  # in kg\n    velocity_car_1_north = 20  # in m/s, due north\n    velocity_car_2_west = 30  # in m/s, due west\n\n    # Since momentum is conserved and the cars have the same mass:\n    # velocity_car_1_north = v_north and velocity_car_2_west = v_west (after the collision)\n    \n    # Calculate the resultant velocity using vector addition (Pythagorean theorem)\n    velocity_resultant = math.sqrt(velocity_car_1_north**2 + velocity_car_2_west**2)\n    \n    # Angle θ with the north direction using trigonometry (tangent)\n    # tan(θ) = opposite / adjacent => θ = arctan(opposite / adjacent)\n    angle_with_north = math.atan2(velocity_car_2_west, velocity_car_1_north)  # angle in radians\n\n    # Convert angle to degrees from radians\n    angle_with_north_degrees = math.degrees(angle_with_north)\n    \n    # Return the resultant velocity magnitude and the angle it makes with the north direction\n    return (velocity_resultant, angle_with_north_degrees)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    greatest_odd_number = 0\n    for number in range(999, 100, -1):  # Start from 999 and go down to 100\n        tens_digit = (number // 10) % 10  # Extract the tens digit\n        if number % 2 == 1 and number % 9 == 0 and tens_digit % 4 == 0:\n            greatest_odd_number = number\n            break\n    return greatest_odd_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let's denote Jenny's pens as J and Ben's pens as B.\n    J = 83\n    # After giving away 28 pens, Jenny will have J - 28 pens.\n    # At that point, both Jenny and Ben have the same number of pens, so we can write:\n    # J - 28 = B\n    # Since Jenny gave Ben 28 pens, Ben's original amount is B + 28.\n    # We are looking for B, so let's rearrange the equation:\n    # B = J - 28\n    B = J - 28\n    \n    # Now we just return the value of B which is the number of pens Ben had originally.\n    return B\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Total distance is (21 - 1) * 2 meters because there are 21 trees\n    total_distance = (21 - 1) * 2\n    \n    # Since lamp posts are at every 10m, find the number of intervals\n    # which includes both ends, hence add 1.\n    num_lamp_posts = (total_distance // 10) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    equation1 = Eq(5*laptop + 4*dvd_player, 14438)\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the total weight before Aaron joined and the number of people in the group\n    total_weight_before_Aaron, number_of_people = symbols('total_weight_before_Aaron number_of_people', real=True, positive=True)\n    \n    # Equation representing the average weight before Aaron joined\n    equation1 = Eq((total_weight_before_Aaron) / number_of_people, 61 - (45 / number_of_people))\n    \n    # Equation representing the average weight after Ben joined\n    equation2 = Eq((total_weight_before_Aaron + 45 + 71) / (number_of_people + 2), 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_weight_before_Aaron, number_of_people))\n    \n    # The original average weight\n    original_average = solutions[total_weight_before_Aaron] / solutions[number_of_people]\n    \n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        S, T, R = p\n        # Conditions: Different digits and Triangle cannot start with zero\n        if S == 0 or T == 0:\n            continue\n        # Form the numbers from the digits\n        star = S * 111\n        triangle = T * 111\n        rectangle = R * 111\n        # Check the given condition STAR + TRIANGLE + TRIANGLE = RECTANGLE\n        if star + 2 * triangle == rectangle:\n            return triangle // 111\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    pattern_sum = sum(range(1, pattern_length + 1))\n    full_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n\n    total_sum = full_patterns * pattern_sum + sum(range(1, remaining_digits + 1))\n\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_paid - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    total_sales = 60\n    profit_percentage = 0.20\n    loss_percentage = 0.20\n\n    # Let x be the cost price of the book sold for profit\n    # and y be the cost price of the book sold for loss\n    # We can write two equations based on the given conditions:\n    # Equation 1: x + y = total_sales\n    # Equation 2: 1.20x - 0.80y = total_sales (since one book is sold for 20% profit and other for 20% loss, giving total sales of $60)\n    \n    # We will use sympy to solve the two equations simultaneously\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, total_sales)\n    equation2 = Eq(1.20*x - 0.80*y, total_sales)\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the cost price based on the solutions\n    cost_price_for_profit = solutions[x]\n    cost_price_for_loss = solutions[y]\n    \n    # Calculate actual profit or loss\n    actual_profit = 1.20 * cost_price_for_profit - cost_price_for_profit\n    actual_loss = cost_price_for_loss - 0.80 * cost_price_for_loss\n    profit_or_loss = actual_profit - actual_loss\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_past in range(1, 12):\n        hours_remaining = 12 - hours_past\n        if hours_past == 2 * hours_remaining:\n            return hours_past\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario for getting 3 balls of the same color:\n    # Taking all balls of other two colors and 3 balls of one color, the next will ensure 4 of the same color\n    blue = 5\n    orange = 4\n    yellow = 2\n    # In the worst case, she takes all the orange and yellow balls, and 3 blue balls.\n    # The next ball taken out must be a blue one to make 4 of the same colour.\n    balls_needed = blue - 1 + orange + yellow + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    result = 2.3 + 9.7 + 5.2 - 2.2\n    return result\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_kg = 4.1\n    mangoes_kg = 2\n\n    total_cost = (orange_price_per_kg * oranges_kg) + (mango_price_per_kg * mangoes_kg)\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    return (45 / 9) * (100 / 10) + (23 - 19)\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    \n    sum_of_numbers = mean_value * (len(numbers) + 1)\n    a = sum_of_numbers - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Total work is considered as 1 (the whole job)\n    \n    # A's work rate is 1/15 job per day\n    A_rate = 1 / 15\n    \n    # B's work rate is 1/10 job per day\n    B_rate = 1 / 10\n    \n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * (A_rate + B_rate)\n    \n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n    \n    # Days B takes to finish the remaining work alone\n    days_B_to_finish = remaining_work / B_rate\n    \n    return days_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # First half: 1 to 13\n    sum_first_half = sum(range(1, 14))\n    # Second half: 1 to 13, excluding 1\n    sum_second_half = sum_first_half - 1\n    \n    # Combine the sums\n    total_sum = sum_first_half + sum_second_half\n    \n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "import math\n\ndef solution():\n    bottles = 1000\n    test_tubes = math.ceil(math.log(bottles, 2))\n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # ducks and geese have 2 legs each, lambs have 4\n    legs_ducklings = 4 * 2\n    legs_baby_geese = 2 * 2\n    \n    # Total legs from ducks and geese\n    legs_birds = legs_ducklings + legs_baby_geese\n    \n    # Remaining legs for lambs (each has 4 legs)\n    legs_lambs = 36 - legs_birds\n    num_lambs = legs_lambs // 4\n    \n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # There are 1000 milliliters in 1 liter\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    \n    # Reverse the process of eating sweets\n    # On the fourth day\n    initial_fourth_day = remaining_sweets / (1 - 1 / 4)\n    \n    # On the third day\n    initial_third_day = initial_fourth_day / (1 - 1 / 5)\n    \n    # On the second day\n    initial_second_day = initial_third_day / (1 - 1 / 6)\n    \n    # On the first day\n    initial_sweets = initial_second_day / (1 - 1 / 7)\n    \n    return initial_sweets\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid_chocolates = 17\n    last_kid_chocolates = 150\n    difference = 7\n\n    total_kids = ((last_kid_chocolates - first_kid_chocolates) // difference) + 1\n\n    return total_kids\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Initialize the total students and additional variables to track the current layer\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n    \n    # We know that each layer adds (side_length * 4 - 4) students because each corner is counted twice\n    while True:\n        # Calculate the number of students added for each layer\n        students_in_layer = (layer * 4 + 1) * 2 if layer > 0 else 1\n        \n        if layer % 2 == 0:\n            boys += students_in_layer\n        else:\n            girls += students_in_layer\n            \n        # Check if we reached the condition that there are 52 more boys than girls\n        if boys - girls == 52:\n            total_students = boys + girls\n            break\n        \n        layer += 1\n        \n    return total_students\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Use the formula for the number of matches in a double round-robin tournament:\n    # total_matches = number_of_teams * (number_of_teams - 1)\n    # Since each match is played twice, we divide by 2\n    # So we solve for number_of_teams: number_of_teams^2 - number_of_teams = 2 * total_matches\n\n    total_matches = 30\n    # Each team plays 2*(n-1) matches (home and away), so the total number of games is n*(n-1)\n    # and we are given that the total is 30 matches, therefore:\n    # n*(n-1) = 60 (since each match is counted twice, home and away)\n    # Solve for n using the quadratic formula: n^2 - n - 60 = 0\n    \n    # We could write a loop for this, as the number is small, but let's use a math function\n    # for a generic solution\n    from math import sqrt\n    n = (1 + sqrt(1 + 4 * 2 * total_matches)) / 2\n    return int(n)\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    days_needed = (total_sets_needed / sets_made_in_5_days) * 5\n    return days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Function to calculate number of ways to reach a given step\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        ways = [0] * (steps + 1)\n        ways[0] = 1  # One way to reach the 0th step\n        ways[1] = 1  # One way to reach the 1st step\n\n        for i in range(2, steps + 1):\n            ways[i] = ways[i-1] + ways[i-2]\n\n        return ways[steps]\n\n    # Calculate ways to reach 5th and 10th step\n    ways_to_5 = count_ways(5)\n    ways_to_10_from_5 = count_ways(10 - 5)\n\n    # The total ways will be the product of ways to reach the 5th and then 10th step\n    ans = ways_to_5 * ways_to_10_from_5\n\n    return ans\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    second_number = symbols('second_number')\n    first_number = second_number + 1099\n    third_number = second_number - 877\n    equation = Eq(first_number + second_number + third_number, 7656)\n\n    second_number_value = solve(equation, second_number)\n\n    return second_number_value[0]\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial number of cookies Charlene baked\n    x = symbols('x')\n\n    # Charlene kept 1/2 of cookies + 8 cookies\n    charlene_kept = (1/2) * x + 8\n\n    # Emerald received the remaining cookies\n    emerald_received = x - charlene_kept\n\n    # Emerald ate 1/3 of the cookies she received + 4 cookies\n    emerald_ate = (1/3) * emerald_received + 4\n\n    # Hebe received the remaining cookies from Emerald\n    hebe_received = emerald_received - emerald_ate\n\n    # Hebe ate 1/4 of the cookies she received, and 42 cookies remained\n    hebe_ate = (1/4) * hebe_received\n    hebe_remaining = hebe_received - hebe_ate\n\n    # Equation based on Hebe's remaining cookies\n    equation = Eq(hebe_remaining, 42)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    num = 2 * 2 * 2 * 3 * 8 * 5 * 5 * 25  # Calculate the product\n    count = 0\n    # Count the number of trailing zeros by dividing the number by 10\n    # until the remainder is no longer 0\n    while num % 10 == 0:\n        count += 1\n        num //= 10\n    \n    return count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # Since the only square numbers are perfect squares of integers\n        n = i ** 2\n        if 40 < n < 50:    # Check if the square is between 40 and 50\n            return n       # Return the number if it fits the condition\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n    remaining_volume = initial_volume - (cup_volume * cups_poured)\n    return remaining_volume\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years, their total age will be 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    for i in range(1, int(3024 ** (1/4)) + 1):\n        if i * (i + 1) * (i + 2) * (i + 3) == 3024:\n            return i + 3\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cards each person originally has\n    bob_cards, alan_cards = symbols('bob_cards alan_cards')\n\n    # Equation 1: Bob has 15 more cards than Alan\n    equation1 = Eq(bob_cards, alan_cards + 15)\n\n    # Equation 2: After Colin gives Bob 25 cards, Bob has 3 times as many as Alan\n    equation2 = Eq(bob_cards + 25, 3 * alan_cards)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bob_cards, alan_cards))\n\n    return solutions[alan_cards]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from sympy import lcm\n\ndef solution():\n    # Find the least common multiple (LCM) of the pack sizes\n    pack_lcm = lcm([6, 8, 9, 15])\n\n    # The least number of marker packs is the smallest multiple of the LCM\n    # that is greater than or equal to 1000\n    packs = -(-1000 // pack_lcm)  # Using ceiling division\n\n    return packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    # Each of the 10 students shakes hands with the other 9 students\n    # However, this counts each handshake twice (student A with B, and student B with A)\n    # To correct this, divide by 2\n    total_handshakes = (10 * 9) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    # Let x be the cost of a notebook, y be the cost of a pencil case, and z be the cost of an eraser.\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    # Based on the question, we have the following equations:\n    # 3*x + 4*y + 5*z = 50 (total cost)\n    # x + y = 6 (cost of a notebook and a pencil case)\n    # y + z = 8 (cost of a pencil case and an eraser)\n    \n    # Set up the equations\n    equation1 = Eq(3*x + 4*y + 5*z, 50)\n    equation2 = Eq(x + y, 6)\n    equation3 = Eq(y + z, 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Extract the cost of a pencil case\n    pencil_case_cost = solutions[y]\n\n    return pencil_case_cost\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = anne + maria\n\n    equation = Eq(total_apples, 44)\n    ans = solve(equation, anne)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs(0.20 * 90 - 0.90 * 20)\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount Jason reads more each day than the previous day with 'd'\n    d = symbols('d')\n    # Total number of pages is the sum of an arithmetic sequence\n    # S_n = n/2 * (2*a_1 + (n - 1)*d)\n    # where a_1 is the first day read pages which is 30, \n    # n is the total days, and d is the common difference\n    # We know the last day read pages (a_n) which is 70, and can use it to express n:\n    # a_n = a_1 + (n - 1)*d, therefore, n = (a_n - a_1)/d + 1\n    # Substitute n in the total sum S_n, which is known to be 550 pages\n    # Rearrange the equation S_n (550 here) = n/2 * (a_1 + a_n) to find 'd'\n\n    a_1 = 30  # pages read on the first day\n    a_n = 70  # pages read on the last day\n    S_n = 550  # total pages\n\n    # Equation representing the sum of the arithmetic sequence\n    equation = Eq((a_n - a_1)/d + 1, 2 * S_n / (a_1 + a_n))\n    \n    # Solve for 'd'\n    solution = solve(equation, d)\n\n    return int(solution[0]) if solution else None\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # grams\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    avg_needed = 8.5\n    total_needed = avg_needed * 5\n    current_total = sum(scores)\n    min_score_final_judge = total_needed - current_total\n    \n    return min_score_final_judge\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the given recurring decimals into fractions\n\n    # For 0.1(1)99251(7), let x = 0.111111... + 0.00008899251(7)\n    # We can calculate x as follows:\n    x_part1 = 1 / 9  # for 0.111111...\n    x_part2 = (8899251 - 7) / 900000000  # for 0.00008899251(7) with 7 being repeated\n\n    # Add both parts to get x\n    x = x_part1 + x_part2\n\n    # For 0.2(3)456(7), let y = 0.222222... + 0.000023456(7)\n    # We can calculate y as follows:\n    y_part1 = 2 / 9  # for 0.222222...\n    y_part2 = (23456 - 7) / 9000000  # for 0.000023456(7) with 7 being repeated\n\n    # Add both parts to get y\n    y = y_part1 + y_part2\n\n    # Check digits from their fractional forms until the nth digit where they both have 7\n    n = 1\n    while True:\n        x_digit = int((x * (10**n)) % 10)\n        y_digit = int((y * (10**n)) % 10)\n        if x_digit == 7 and y_digit == 7:\n            break\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000  # principal amount\n    total_interest = 816  # total interest for two years\n    rate = symbols('rate')  # symbol for the rate we want to find\n\n    # The total amount after two years will be principal plus the interest for two years\n    # Interest for the first year will be principal * rate\n    # Interest for the second year will be (principal + first year interest) * rate\n    # The total interest is the sum of the first and second year interest\n    equation = Eq(principal * rate + (principal + principal * rate) * rate, total_interest)\n\n    # Solve the equation for the interest rate\n    solution = solve(equation, rate)\n\n    # Get the decimal value of the rate, which will be in proportion (not percentage)\n    # Convert it to percentage by multiplying with 100\n    interest_rate = solution[0] * 100\n\n    return float(interest_rate)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # This function will find the correct value for the dividend (the missing number) in the division\n    # Johnny's thought process was multiplication followed by addition, but he added the divisor instead of the remainder\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # The correct formula to find the dividend is: Dividend = Quotient * Divisor + Remainder\n    dividend = quotient * divisor + remainder\n\n    # Johnny's incorrect answer was 22\n    # We also return the correct dividend to compare with Johnny's answer\n    johnnys_answer = 22\n    johnnys_answer_correct = (johnnys_answer == dividend)\n\n    return {\"johnnys_answer_correct\": johnnys_answer_correct, \"correct_dividend\": dividend}\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let's denote the original number as x\n    # According to the problem statement, we have:\n    # 2 * x + 7 = 43\n    # Now we perform the inverse operations to solve for x\n    # Subtract 7 from both sides of the equation:\n    # 2 * x = 43 - 7\n    # Divide both sides by 2:\n    # x = (43 - 7) / 2\n\n    ans = (43 - 7) / 2\n    return ans\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_blank_time = 35\n    short_answer_time = total_time - (multiple_choice_time + fill_in_blank_time)\n    return short_answer_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30 # meters per second\n    time = 45 # seconds\n\n    # Distance travelled by the train is speed multiplied by time\n    # The total distance is the length of the train plus the length of the tunnel\n    total_distance = train_speed * time\n    \n    # Length of the train is given\n    train_length = 850 # meters\n\n    # Length of the tunnel is total distance minus the length of the train\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Hannah's speed\n    hannah_speed = symbols('hannah_speed')\n    \n    # Peter's speed is 15 cm/s faster than Hannah's\n    peter_speed = hannah_speed + 15\n    \n    # The ratio of time taken to cover a certain distance by Peter and Hannah is 3:4\n    # distance / speed = time, assuming the same distance for both\n    equation = Eq((3/4), (hannah_speed / peter_speed))\n\n    # Solve the equation to find Hannah's speed\n    hannah_solution = solve(equation, hannah_speed)\n\n    # Return Hannah's speed solution\n    return hannah_solution[0]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entraces = 4\n    ways = 0\n    for perm in permutations(range(1, entraces + 1), 3): \n        joe, mike, tina = perm\n        if joe != mike:  # Joe and Mike can't join the same entrance\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_pocket_money = 55\n    saved_money = 32.50\n    spent_money = total_pocket_money - saved_money\n    # Let x be the amount spent on transportation, then 2x is spent on food\n    # x + 2x = spent_money\n    # 3x = spent_money\n    transportation_money = spent_money / 3\n    food_money = 2 * transportation_money\n    return food_money\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed charges\n    base_charge = 4\n    base_rate = 4\n    additional_rate = 3\n    \n    # Total amount Irene can spend\n    total_amount = 109\n    \n    # Calculate the amount left after paying the fixed service fee\n    amount_after_service_fee = total_amount - base_charge\n    \n    # Calculate the amount used at base rate\n    amount_at_base_rate = 3 * base_rate\n    \n    # Check if the usage is within the base rate's coverage\n    if amount_after_service_fee <= amount_at_base_rate:\n        tons_used = amount_after_service_fee / base_rate\n    else:\n        # Calculate remaining amount after base rate water usage\n        remaining_amount = amount_after_service_fee - amount_at_base_rate\n        # Calculate additional tons used\n        additional_tons_used = remaining_amount // additional_rate\n        # Add base rate tons with additional tons\n        tons_used = 3 + additional_tons_used\n    \n    return int(tons_used)\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    # Let x be the total number of coins Owen had at first\n    # Let y be the number of one-dollar coins Owen had at first\n    # Then (x-y) is the number of fifty-cent coins Owen had at first\n    \n    # From the problem, we know that 2/7 of his coins were fifty-cent coins\n    # (x-y) = 2/7 * x\n    \n    # His mother gave him 10 one-dollar coins and five dollars' worth of fifty-cent coins (which is 10 fifty-cent coins)\n    # So after his mother gave him the coins he had y + 10 one-dollar coins and (x-y) + 10 fifty-cent coins\n    \n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    # y + 10 = 2 * ((x-y) + 10)\n    \n    # We have two equations:\n    # 1) (x-y) = 2/7 * x\n    # 2) y + 10 = 2 * ((x-y) + 10)\n\n    # Solving the equations gives us x and y\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((x - y), (2 / 7) * x)\n    equation2 = Eq(y + 10, 2 * ((x - y) + 10))\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    ans = (45 * 7 + 13 * 7) / 7\n    return ans\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n\n    # Each circle can intersect with every other circle at most twice and with the line at most twice.\n    # So the number of regions with only circles is given by (using recursive approach):\n    # n + n(n-1) + 2[n(n-1)/2] + 2[n(n-1)(n-2)/6] + 2[n(n-1)(n-2)(n-3)/24]\n    # where each term represents the number of new regions formed by adding the next circle.\n\n    # Number of regions with circles only\n    regions_with_circles = circles + circles*(circles-1) + 2*circles*(circles-1)//2 + \\\n                           2*circles*(circles-1)*(circles-2)//6 + \\\n                           2*circles*(circles-1)*(circles-2)*(circles-3)//24\n\n    # Each line divides each of the existing regions into two.\n    regions_with_line = regions_with_circles + line\n\n    return regions_with_line\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n\n    # Bala had 320 more cookies than Daniel\n    equation1 = Eq(bala, daniel + 320)\n    # Bala had 1/2 as many cookies as Amelia, Carl and Daniel\n    equation2 = Eq(bala, (amelia + carl + daniel) / 2)\n    # Carl had 3/4 as many cookies as Amelia, Bala and Daniel\n    equation3 = Eq(carl, (amelia + bala + daniel) * 3 / 4)\n    # The total number of cookies\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    # Since the remainder is 6, the divisor must be greater than 6.\n    # Start with the smallest divisor possible which is 7\n    divisor = 7\n    quotient = 15\n    remainder = 6\n\n    # The smallest possible dividend (dividend = quotient * divisor + remainder)\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy gardener to mow the lawn alone\n    x = symbols('x')\n\n    # The rate at which the quick gardener works (lawn/hour)\n    rate_quick = 1 / 12\n\n    # The rate at which the lazy gardener works (lawn/hour)\n    rate_lazy = 1 / x\n\n    # The combined rate when both work together\n    rate_together = 1 / 8\n\n    # The equation representing their combined work rate\n    # 1 lawn = rate_quick * time + rate_lazy * time\n    equation = Eq(rate_quick + rate_lazy, rate_together)\n\n    # Solve for x\n    lazy_time = solve(equation, x)\n\n    return lazy_time[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Total candy brought by Eve and Alice\n    number_of_girls = 3   # Eve, Alice, and Irene\n    \n    candy_per_girl = total_candy / number_of_girls  # Divide equally among the girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = belinda_tomatoes - 7\n\n    initial_matthew_tomatoes = matthew_tomatoes - (belinda_tomatoes - matthew_tomatoes)\n    return initial_matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    # Initial money\n    money_initial = 182\n    # Cost per dress\n    cost_dress = 5\n    # Cost per skirt\n    cost_skirt = 3\n    # Remaining money represented as 5*x\n    money_left = lambda x: 5*x\n\n    # Setting up the equation:\n    # Initial money = Cost of dresses + Cost of skirts + Remaining money (5*x)\n    # 182 = 5*x + 3*x + 5*x\n    # Combine like terms to get a simplified equation:\n    # 182 = 13*x\n    # Solve for x:\n    x = money_initial / 13\n\n    return int(x)  # Return x as an integer as the number of dresses and skirts can't be in fractions\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    slow_car_speed = 1100  # meters per minute\n    medium_car_speed = 1500  # meters per minute\n    slow_car_time = 5  # minutes\n    medium_car_time = 3  # minutes\n    fast_car_time = 2  # minutes\n\n    # Distance is the same for the bicycle when each car catches up\n    bicycle_distance_slow = slow_car_speed * slow_car_time\n    bicycle_distance_medium = medium_car_speed * medium_car_time\n\n    # Since distance is the same, speed times time should also be equal for both instances\n    # bicycle_distance_slow = bicycle_distance_medium \n    # Set their distances equal to find the bicycle's speed\n    bicycle_speed = bicycle_distance_slow / slow_car_time  # This is the same for medium and fast\n\n    # Now that we have the bicycle's speed, calculate the speed of the fast car\n    fast_car_speed = bicycle_speed + (bicycle_distance_slow / fast_car_time)\n\n    return fast_car_speed\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5\n    red_line_interval = 6\n    lcm = (green_line_interval * red_line_interval) // math.gcd(green_line_interval, red_line_interval)\n    minutes_until_same_time = lcm\n    hours = 5 + minutes_until_same_time // 60\n    minutes = minutes_until_same_time % 60\n    return f\"{hours:02d}:{minutes:02d}\"\n\nimport math\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug = jug_capacity_ml / 2\n    cup_capacity = half_jug / 3\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # The distance Olivia walks from the first tree to the 101th tree\n    distance_walked = 100 * 3  # There are 100 intervals between 101 trees\n\n    # Time taken to walk the distance in minutes, converted to hours\n    time_taken = 3 / 60\n\n    # Olivia's walking speed in meters per hour\n    walking_speed = distance_walked / time_taken\n\n    # Total distance between school and home\n    total_distance = 4000\n\n    # Time taken to travel from school to home at constant speed in hours\n    time_to_school = total_distance / walking_speed\n\n    # Convert the time from hours to minutes\n    time_to_school_minutes = time_to_school * 60\n\n    return int(time_to_school_minutes)\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    position_from_back = total_cars - position_from_front + 1\n    return position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Numbers that leave a remainder of 0, 1, 2, 3, or 4 when divided by 5,\n    # respectively, in the range 1 to 100.\n    rem_0 = [i for i in range(1, 101) if i % 5 == 0]\n    rem_1 = [i for i in range(1, 101) if i % 5 == 1]\n    rem_2 = [i for i in range(1, 101) if i % 5 == 2]\n    rem_3 = [i for i in range(1, 101) if i % 5 == 3]\n    rem_4 = [i for i in range(1, 101) if i % 5 == 4]\n    \n    # Cannot select numbers that their sum with any other would be a multiple of 5.\n    # Therefore, cannot select both from rem_0 and rem_1+rem_4 (sum is a multiple of 5).\n    # Also, cannot select both from rem_2 and rem_3 (sum is a multiple of 5).\n    # Max numbers can be selected from rem_1, rem_2, rem_3 or rem_4 since these\n    # groups never add to a multiple of 5 within their group.\n    max_n = max(len(rem_1), len(rem_2), len(rem_3), len(rem_4))\n    \n    # Sum from two different groups (rem_1 + rem_4) or (rem_2 + rem_3)\n    # but since these groups have equal count, we can consider only one.\n    max_n *= 2\n    \n    return max_n\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum([(6 + 5*i) ** 2 for i in range((51 - 6)//5 + 1)])\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen gives 5 fish for 2 rabbits\n    fish_to_rabbits_ratio = 5 / 2\n    # Oscar gives 4 rabbits for 7 packs of wheat\n    rabbits_to_wheat_ratio = 4 / 7\n\n    # Combined ratio: fish to wheat for 7 packs of wheat\n    fish_to_wheat_ratio_7_packs = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n\n    # For 14 packs of wheat, since it's double the 7 packs of wheat\n    fish_to_wheat_ratio_14_packs = fish_to_wheat_ratio_7_packs * 2\n\n    # Calculate the number of fish for 14 packs of wheat\n    num_fish_for_14_packs = fish_to_wheat_ratio_14_packs * 14\n\n    return int(num_fish_for_14_packs)\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of an apple and a banana\n    apple_price, banana_price = symbols('apple_price banana_price')\n\n    # Two equations based on the information given\n    equation1 = Eq(3 * apple_price + 2 * banana_price, 1.25)\n    equation2 = Eq(apple_price + banana_price, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple_price, banana_price))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana_price]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from math import factorial\n\ndef solution():\n    # Calculate ways for all people choosing the same entrance\n    # Since there are 3 entrances and 4 people, and each entrance must \n    # be entered by at least one person, this scenario is not possible.\n    same_entrance = 0 \n\n    # Calculate ways for 3 people choosing one entrance and 1 person choosing another\n    # There are 3 choices for the single person and C(4, 1) ways to choose who the single person is.\n    three_and_one = 3 * factorial(4) // factorial(3)\n\n    # Calculate ways for 2 people choosing one entrance and 2 people choosing another\n    # There are C(3, 2) ways to choose two entrances and C(4, 2) ways to arrange the 4 people in pairs.\n    two_and_two = factorial(3) // factorial(1) * factorial(4) // (factorial(2) * factorial(2))\n\n    # Calculate ways for 2 people choosing one entrance, 1 person choosing another, and 1 choosing the last\n    # There are C(4, 2) ways to choose the pair and 2 choices for the single person.\n    two_one_one = factorial(4) // factorial(2) * 2\n    \n    # Sum all possible ways\n    total_ways = same_entrance + three_and_one + two_and_two + two_one_one\n\n    return total_ways\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    score_per_correct = 5\n    penalty_per_wrong = -2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (correct * score_per_correct + wrong * penalty_per_wrong) == total_score:\n            return correct\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    # Initialize the minimum sum of x and y to a large number.\n    min_sum = float('inf')\n\n    # Iterating through all possible values of x.\n    for x in range(1, 2020):\n        # Solve for y based on the value of x.\n        y, remainder = divmod(2019 - x, x + 1)\n        \n        # If the remainder is 0, then y is a positive integer and it's a valid solution.\n        if remainder == 0:\n            # Update the minimum sum of x and y if the current sum is smaller.\n            min_sum = min(min_sum, x + y)\n    \n    return min_sum\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # This problem deals with the sum of squares of an arithmetic sequence, not the sum of cubes.\n    # Therefore, we will use the sum of squares of the first n natural numbers formula:\n    # sum of squares = n(n + 1)(2n + 1) / 6.\n    # We need to find the number of terms and substitute in the formula.\n    \n    # First, we determine the number of terms in the sequence\n    # The sequence is 4, 8, 12, ..., 124. This is an arithmetic sequence with a common difference of 4.\n    # General term (an) of an arithmetic sequence: an = a1 + (n - 1)d\n    # Here, 124 = 4 + (n - 1)4 => 124 = 4n => n = 31 (number of terms)\n    n = (124 - 4) // 4 + 1\n    \n    # Now we will calculate the sum of squares for the specific sequence\n    # This sequence is 4 times the sequence of squares of the first n natural numbers\n    # Therefore, we can use the sum of squares formula and multiply the result by 4^2.\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = sum_of_squares * (4 ** 2)\n\n    return ans\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    minutes_per_drawing = 124\n    total_drawings = 111\n    total_time = minutes_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    # Using Chinese Remainder Theorem from sympy\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # Solving the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 4 * 5 * 6  # Increment by the product of the moduli since the next solution will be that much higher\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    \n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    \n    final_pay = total_cost - discount\n    return final_pay\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Justin's current age is x years\n    justin_age = symbols('justin_age')\n    \n    # According to the problem\n    # In 18 years, Justin will be (x + 18) years old\n    # 6 years ago, Justin was (x - 6) years old\n    # In 18 years, Justin's age will be 4 times his age 6 years ago\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n    \n    # Solving the equation\n    solution = solve(equation, justin_age)\n    \n    # Justin's current age is the solution of the equation\n    return solution[0]  # Take the first (and only) solution\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 / 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as fac\n\n    # There are 2 boys and 3 girls. Boys have to be at the ends and girls in the middle.\n\n    # First, we find the number of arrangements for the boys:\n    boy_arrangements = fac(2)  # They can be arranged in 2! ways.\n\n    # Then, we find the number of arrangements for the girls:\n    girl_arrangements = fac(3)  # They can be arranged in 3! ways.\n\n    # Multiply the arrangements of boys and girls to get the total arrangements:\n    total_arrangements = boy_arrangements * girl_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # The ages of Jason, Adam, and Tom are given.\n    jason_age = 6\n    adam_age = 9\n    tom_age = 10\n\n    # We know that Tom's age is a multiple of 3, so we validate Tom's age.\n    if tom_age % 3 == 0:\n        # Since Jason is younger than Tom, we confirm that Adam is not the youngest and therefore must be 9.\n        ans = adam_age\n    else:\n        # If Tom's age were not a multiple of 3, we would need a different logic, but for this problem, this path will not be taken.\n        raise ValueError(\"Tom's age is not a multiple of 3, check the input.\")\n\n    return ans\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case is if we pick all balls of two colors without getting three different colors\n    return (5 + 5 + 1)\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number_as_string = \"2023\"\n    while True:\n        if int(number_as_string) % 11 == 0:\n            return len(number_as_string) // 4\n        number_as_string += \"2023\"\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "from itertools import permutations\n\ndef solution():\n    max_apples_for_avril = 0\n    total_apples = 28\n    for perm in permutations(range(1, total_apples), 5):\n        if sum(perm) < total_apples:\n            max_apples_for_avril = max(max_apples_for_avril, total_apples - sum(perm))\n    return max_apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for triangle, square, and circle\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # How many triangles in a diamond\n    ans = solutions[diamond] / solutions[triangle]\n    \n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5/8\n    \n    cost_of_laptop = total_money * fraction_used\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    joyce_to_lori_ratio = 3 / 2\n    joyce_speed = lori_speed * joyce_to_lori_ratio  # Joyce's speed in meters per second\n    time = 10  # Time in seconds\n    distance_joyce_runs = joyce_speed * time  # Distance Joyce runs in 10 seconds\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2\n    new_sum = new_average * 3\n    new_number = new_sum - original_sum\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the time format\n    time_format = '%H:%M'\n\n    # Define the times based on the problem statement\n    left_school = datetime.strptime('15:22', time_format)\n    caught_bus = datetime.strptime('16:01', time_format)\n    bus_trip_duration = timedelta(minutes=18)\n    got_home = datetime.strptime('16:35', time_format)\n\n    # Calculate walk to the bus stop duration based on the difference\n    walk_to_bus_duration = caught_bus - left_school\n\n    # Calculate when the bus trip ended\n    bus_trip_end = caught_bus + bus_trip_duration\n\n    # Calculate walk from bus drop off to home duration\n    walk_from_bus_duration = got_home - bus_trip_end\n\n    # Calculate total walking time\n    total_walking_time = walk_to_bus_duration + walk_from_bus_duration\n\n    return total_walking_time.seconds // 60  # Convert timedelta to minutes\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16  # youngest person's age\n    difference = 23 - 16  # common difference between ages\n    last_term = 79  # oldest person's age\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # Solving for n gives us the number of people\n    n = ((last_term - first_term) // difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Ken and Lisa's initial amounts\n    Ken, Lisa = symbols('Ken Lisa')\n    \n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(Ken, Lisa + 15)\n    \n    # After Ken gave amount 'x' to Lisa, he had $21 less than Lisa\n    x = symbols('x')\n    equation2 = Eq(Ken - x, Lisa + x - 21)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Ken, Lisa, x))\n    \n    # Amount given by Ken to Lisa\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += 10 - i\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n\n    # Since he ate 6 more cookies each day, the number of cookies eaten on each day forms an arithmetic sequence:\n    # x, x+6, x+12, x+18, x+24\n\n    # The sum of these terms should equal 100 (total cookies eaten over five days)\n    sum_equation = Eq(x + (x + 6) + (x + 12) + (x + 18) + (x + 24), 100)\n\n    # Solve the equation for x\n    solution = solve(sum_equation, x)\n\n    # Return the number of cookies eaten on the first day\n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    numbers = []\n    for i in range(1, 9):\n        numbers.extend([i] * (i+1))\n    numbers.sort()\n    n = len(numbers)\n    median_index = (n - 1) // 2\n    if n % 2 == 0:\n        ans = (numbers[median_index] + numbers[median_index + 1]) / 2\n    else:\n        ans = numbers[median_index]\n\n    return ans\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    blue = 18\n    red = 6\n    orange = 8\n    must_take_out = blue + orange + (red - 1) + 1  # Getting one red plus all the others ensures 2 reds\n\n    return must_take_out\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 1, 9, 2]\n    all_permutations = [''.join(map(str, p)) for p in permutations(digits)]\n    max_number = max(int(p) for p in all_permutations)\n    min_number = min(int(p) for p in all_permutations)\n    return max_number - min_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count = 0\n    for i in range(1, 31):\n        # Check if the number of turnarounds is even (facing the teacher)\n        if (i % 2 == 0 and i % 3 == 0) or (i % 2 != 0 and i % 3 != 0):\n            count += 1\n    return count\n    \nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n     from sympy import symbols, Eq, solve\n     \n     x = symbols('x')\n     equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n     solutions = solve(equation, x)\n     \n     return solutions[0]\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # If you stick to your initial choice (gate 1), the probability of winning the car is 1/3.\n    # If you switch to the other unopened gate (gate 2), the probability of winning the car is 2/3.\n    # Therefore, you should choose gate 2 to maximize your chances of winning the car.\n    return \"Gate 2\"\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) / (4 - 1)\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence\n    # nth_term = first_term + (n-1)*common_difference\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    # Calculate the sum of the arithmetic sequence using the formula\n    # sum = (n/2) * (first_term + last_term)\n    total_athletes = (total_rows / 2) * (first_term + last_term)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(7) // (factorial(3) * factorial(7-3)) * factorial(2)\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 13  # Tommy and his 12 friends\n    minutes_per_person = 142\n    total_minutes = total_people * minutes_per_person\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number is a repetition of '928' which sums up to 19.\n    # There are 99 digits, so the number '928' is repeated 99 / 3 = 33 times.\n    # Total sum of all the digits is 19 * 33\n    \n    total_sum = 19 * 33\n    \n    # The remainder when this sum is divided by 9 is what we need to find.\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for ⊕\n    op = symbols('op')\n\n    # Write the equation according to the problem statement\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n\n    # Solve the equation to find the value of ⊕\n    solution = solve(equation, op)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage = (incorrect_people / total_people) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    total_height_five = 156 * 5\n    total_height_tallest_four = 157 * 4\n    total_height_shortest_four = 155 * 4\n    height_third_position = 155\n\n    # Sum of 1st, 2nd, 4th, 5th students' heights\n    sum_except_third = total_height_five - height_third_position\n\n    # 5th student's height\n    height_fifth_position = sum_except_third - total_height_tallest_four\n\n    # 1st student's height\n    height_first_position = total_height_five - total_height_shortest_four\n\n    # Now we can find the 4th student's height by knowing that it's an even number.\n    for height_fourth_position in range(2, height_third_position, 2):\n        height_second_position = sum_except_third - (\n                height_first_position + height_fourth_position + height_fifth_position)\n        if 0 < height_second_position < height_third_position:\n            break\n\n    return height_second_position\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for original_money\n    original_money = symbols('original_money')\n\n    # Equation representing that he spent $75 on CDs\n    spent_on_CDs = 75\n\n    # Equation representing that he spent 1/4 of the remaining money on batteries\n    spent_on_batteries = (original_money - spent_on_CDs) / 4\n\n    # Equation representing that he was left with 1/3 of the original sum of money\n    remaining_money = original_money / 3\n\n    # Set up the equation according to the problem statement\n    equation = Eq(original_money - spent_on_CDs - spent_on_batteries, remaining_money)\n\n    # Solve the equation for original_money\n    solution = solve(equation, original_money)\n\n    # Return the required solution\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Given the proportionality 7 trainers can catch 7 pokemon in 7 minutes\n    # One trainer can catch one pokemon in 7 minutes\n    # Thus, in 49 minutes, one trainer can catch 7 pokemon\n    # Therefore, to catch 49 pokemon in 49 minutes,\n    # we simply need the same number of trainers as there are pokemon\n    return 49\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let x be the number of bars each person bought\n    # 3 pounds in pence is 300p\n    # 4 pounds in pence is 400p\n    # Change received by Eliot is 300 - 12x\n    # Change received by Maya is 400 - 17x\n    # Equation for the amount of change to be equal is: 300 - 12x = 400 - 17x\n    \n    # We can solve this equation by rearranging and isolating x\n    x = (400 - 300) / (17 - 12)\n    \n    # Return the value of x, which represents the number of bars each person bought\n    return int(x)\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5, 7]\n    smallest_even_number = float('inf')\n\n    # Generate all permutations of the given digits\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        # Check if the number is even and 4-digits long\n        if num % 2 == 0 and 1000 <= num <= 9999:\n            smallest_even_number = min(smallest_even_number, num)\n            \n    return smallest_even_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(0, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    # Calculate the result of the first equation\n    result_1 = 66 * 2 + 66 * 3\n    # Calculate the result of the second equation\n    result_2 = 66 * 5\n    \n    # Compare the results\n    same_result = result_1 == result_2\n\n    return same_result\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_charge = 2.5  # initial charge for the first 1.8 km\n    additional_charge_rate = 1.2  # charge per km after initial 1.8 km\n    total_cost = 8.5  # total cost of the drive\n\n    # Calculate the additional cost excluding the base charge\n    additional_cost = total_cost - base_charge\n\n    # Calculate the additional distance travelled after the initial 1.8 km\n    additional_distance = additional_cost / additional_charge_rate\n\n    # Calculate the total distance travelled\n    total_distance = 1.8 + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # If at least one student gets at least 3 apples,\n    # and there are 80 apples to distribute,\n    # we can subtract the 3 apples that the one student will definitely get.\n    apples = 80 - 3\n\n    # Now, since each of the remaining students must get at least 1 apple,\n    # we can determine the maximum number of students there can be.\n    # This is done by dividing the remaining apples across students,\n    # giving 1 apple to each student.\n    # We subtract an additional student because we have already given 3 apples to one student.\n    class_size = apples - 1\n\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, yellow, blue = symbols('red yellow blue')\n    \n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n    \n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    big_cars_needed = boys // big_car_capacity\n    small_cars_needed = girls // small_car_capacity\n    \n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_years = 100\n\n    # Let 'years' be the number of years it will take for the sum of their ages to be 100\n    # Equation: mother_age + years + father_age + years + julia_age + years = total_years\n    # Simplify the equation: 3 * years = total_years - (mother_age + father_age + julia_age)\n    years = (total_years - (mother_age + father_age + julia_age)) / 3\n\n    return int(years)\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n\n    pounds = ounces * pounds_per_ounce\n    kg = pounds * kg_per_pound\n\n    return round(kg, 1)  # Rounding to the nearest tenth for best approximation\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Sum of the arithmetic sequence from 5 to 80\n    n1 = (80 - 5) // 1 + 1  # The number of terms (inclusive)\n    sum1 = n1 * (5 + 80) / 2  # Sum of arithmetic sequence formula\n\n    # Sum of the arithmetic sequence from 5 to 79 (excluding 80)\n    n2 = (79 - 5) // 1 + 1  # The number of terms (inclusive)\n    sum2 = n2 * (5 + 79) / 2  # Sum of arithmetic sequence formula\n\n    # Total sum is the sum from 5 to 80 plus the sum from 5 to 79 (excluding 80)\n    total_sum = sum1 + sum2\n    return int(total_sum)\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    # Each number from 1 to 9 contributes to the sum A based on its place.\n    # '1' appears in 100's place three times and in 10's place once,\n    # similarly for '9', '2', '8', ..., '5'.\n    # The contribution of each digit to A is its value multiplied by the sum of\n    # the place values it occupies.\n    # The largest value of A will be obtained when the largest digits occupy\n    # the places with the largest multipliers.\n\n    # Multipliers for the place values from 100's to 1's respectively\n    multipliers = [300, 300, 200, 200, 200, 200, 200, 100, 100]\n\n    # Sort the multipliers in descending order to match with the digits\n    multipliers.sort(reverse=True)\n    \n    # The largest A will be obtained when 9 is in the highest place multiplier,\n    # 8 in the second highest, and so on.\n    digits = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n    # Calculate the sum of products of the corresponding elements of digits and multipliers\n    A = sum(d * m for d, m in zip(digits, multipliers))\n    return A\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the total distance from A to B\n    x = symbols('x')\n    \n    # Speed of Zhang = Speed of Li\n    # Let v be their speed in kilometers per minute\n    v = symbols('v')\n    \n    # Wang's travel time is 45 minutes longer than Zhang's\n    # Zhang's travel time to point C = distance to point C / v\n    zhang_time_C = (27 / v) + 45\n    \n    # Li's remaining distance after point C = (total distance - distance to point C)\n    # Li's remaining time = Li's remaining distance / v\n    li_remaining_time = ((x - 27) / v) - 20  # because Li still has to ride for another 20 minutes\n    \n    # Zhang's remaining distance after point C = (total distance - distance to point C)\n    # Zhang's remaining time = Zhang's remaining distance / v\n    zhang_remaining_time = ((x - 27) / v) - 15  # because Zhang still has 15 kilometers to reach point B\n    \n    # Wang's travel time = Zhang's travel time to point C + bus stop time (30 minutes) + Zhang's remaining time\n    wang_travel_time = zhang_time_C + 30 + zhang_remaining_time\n    \n    # Now we form two equations based on the given information:\n    # 1. Li's travel time from C to B equals Wang's travel time minus 70 minutes (45 minutes start difference and the 25 minutes at C)\n    # 70 minutes = 45 minutes (before Li starts) + 30 minutes (bus stop at C) - 20 minutes (Li continues to ride after Wang arrives)\n    # 2. Zhang travels 15 more kilometers than Li after the bus leaves point C\n    equations = [\n        Eq(li_remaining_time, wang_travel_time - 70),\n        Eq(zhang_remaining_time * v, 15 + li_remaining_time * v)\n    ]\n    \n    # Solving the equations to find the value of x and v\n    solutions = solve(equations, (x, v))\n    \n    # Extract the distance between points A and B\n    distance_A_B = solutions[x]\n    \n    return distance_A_B\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    # Original price of the bag before the first discount\n    original_price_with_first_discount = 32\n    # Discount rate for the first discount\n    first_discount_rate = 0.20\n    # Price reduction for the second discount (given by Henry)\n    second_discount = 4\n\n    # Calculate the original price before any discount\n    original_price = original_price_with_first_discount / (1 - first_discount_rate)\n    \n    # Calculate the final price after both discounts\n    final_price = original_price_with_first_discount - second_discount\n    \n    # Calculate the total percentage discount\n    total_discount = (original_price - final_price) / original_price\n    \n    # Convert the total discount to a percentage\n    total_discount_percentage = total_discount * 100\n    \n    return round(total_discount_percentage, 2)\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "def solution():\n    from math import factorial\n\n    # There are 5! ways to arrange five people in total.\n    total_ways = factorial(5)\n\n    # Since we want A on the left side of B, and B on the left side of C,\n    # there are 2! ways to arrange A, B, and C in that order out of 3! total arrangements for A, B, and C.\n    # This effectively reduces the total number of arrangements by a factor of 3.\n    # We get the final number of ways by dividing the 5! total arrangements by 3.\n    final_ways = total_ways // 3\n\n    return final_ways\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum = 0\n    for i in range(3, 2013, 7):\n        sum += 2019 / (i * (i+7))\n    return sum\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Analyzing the pattern given in the puzzle:\n    # 10 * 10 = 1 -> the square of 10 is 100, and the difference between the two digits is 1 (0 - 0)\n    # 11 * 11 = 4 -> the square of 11 is 121, and the difference between the two digits is 4 (2 - 1)\n    # We are to find the pattern for 55 * 55\n    \n    # Calculate the square of 55\n    square_of_55 = 55 ** 2\n    \n    # Convert square of 55 to string to separate the digits\n    str_square_of_55 = str(square_of_55)\n    \n    # Since it's a two-digit number, calculate the difference between tens and ones place\n    difference = abs(int(str_square_of_55[-2]) - int(str_square_of_55[-1]))\n    \n    return difference\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits, 6))\n    return all_numbers[504]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # We have 3 options for the hundreds place (cannot be 0)\n    # We have 2 options remaining for the tens place (after one is chosen for hundreds)\n    # We have 1 option remaining for the units place (after two are chosen for hundreds and tens)\n    # Since 0 cannot be in the hundreds place, we start counting from there\n\n    # Total possible unique three-digit numbers\n    count = 2 * 2 * 1\n\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    # Total scores for girls, boys, and the class\n    total_girls = girls * 88\n    total_boys = boys * 91\n    total_class = 36 * 89\n    \n    # Equation representing the relationship between the total scores\n    equation = Eq(total_girls + total_boys, total_class)\n    \n    # Solving for the number of girls\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate\n    alice_work_rate = 1 / 40\n    # Bob's work rate\n    bob_work_rate = 1 / 60\n\n    # Total work is a job done once\n    total_work = 1\n\n    # Assumption: let x be the days Alice took off\n    # Alice worked for (27 - x) days, Bob worked for 27 days\n    for x in range(28):\n        if (27 - x) * alice_work_rate + 27 * bob_work_rate >= total_work:\n            return x\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = [num for num in range(21, 50) if num % 6 == 0 and num % 9 == 0]\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of red balls as r, white balls as w, and black balls as b\n    r, w, b = symbols('r w b')\n\n    # Given ratios\n    ratio1 = Eq(r / w, 1 / 2)\n    ratio2 = Eq(w / b, 3 / 4)\n    \n    # Total number of balls\n    total_balls = Eq(r + w + b, 136)\n\n    # Solve the system of equations\n    solutions = solve((ratio1, ratio2, total_balls), (r, w, b))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Calculate the common difference of the sequence based on given values\n    common_difference = 120 - 105  # 135 - 120 would also work\n\n    # Calculate the first term of the sequence\n    # a(n) = a(1) + (n - 1) * d, where n is the term number, d is the common difference\n    # Use the 7th term (105) to find the first term (a(1)):\n    # 105 = a(1) + (7 - 1) * d => a(1) = 105 - (7 - 1) * d\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Find the 100th term using the first term and common difference\n    # a(100) = a(1) + (100 - 1) * d\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Assume you pick one sock at a time.\n    # Worst case scenario for NOT getting a matching pair:\n    # Pick one red, then all remaining reds = 4 red socks\n    # Next sock picked must be blue, to ensure a matching pair\n    # Thus, you need to pick one more sock after the 4 red socks.\n    return 4 + 1  # Total socks picked to ensure at least one matching pair\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # combined age 4 years ago\n    combined_age_4_years_ago = 24\n\n    # each year each dog grows older by 1 year\n    # so in 4 years, the combined age increases by 4 years for each dog\n    # since there are 3 dogs, it increases 3 times more\n    combined_age_now = combined_age_4_years_ago + 3 * 4\n\n    # in 2 years, the combined age will again increase by 2 years for each dog\n    combined_age_in_2_years = combined_age_now + 3 * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote ryan's marbles as r and audrey's marbles as a\n    r, a = symbols('r a')\n    \n    # The initial situation before the transaction\n    eq1 = Eq(r/a, 2/7)\n\n    # After Ryan bought 20 marbles and Audrey gave away 80 marbles\n    eq2 = Eq((r + 20)/(a - 80), 1/3)\n\n    # Solve the equations to find the initial number of marbles\n    solutions = solve((eq1, eq2), (r, a))\n\n    # We want the number of marbles Audrey had at first, which is 'a'\n    return solutions[a]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    \n    # Each hour mark is 30 degrees (360 degrees / 12 hours)\n    # Each minute mark is 6 degrees (360 degrees / 60 minutes)\n    \n    # Hour hand angle measured from 12 o'clock\n    hour_angle = (hour % 12 * 30) + (minute / 60 * 30)\n    \n    # Minute hand angle measured from 12 o'clock\n    minute_angle = minute * 6\n    \n    # Angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n    \n    # If the angle is greater than 180 degrees, we subtract it from 360 degrees\n    if angle > 180:\n        angle = 360 - angle\n    \n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    left_apples = 20\n\n    total_apples = justin_apples + sisters_apples + left_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    sequence_length = 65\n    pattern_length = 3 + 2 + 2  # Total beads in one pattern (3 black, 2 white, 2 red)\n    full_patterns = sequence_length // pattern_length\n    remaining_beads = sequence_length % pattern_length\n\n    # In each full pattern, there are 3 black beads\n    black_beads = full_patterns * 3 \n\n    # Now we need to check the remaining beads for black ones\n    if remaining_beads > 3: \n        black_beads += 3\n    else:\n        black_beads += remaining_beads\n\n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_time = 13 + 23 + 8 + 27  # total time required in minutes\n    required_time = datetime.strptime('7:45', '%H:%M')  # school arrival time\n    wake_up_time = required_time - timedelta(minutes=total_time)  # latest wake up time\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1)**((i - 1) // 4) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    heads = 51\n    legs = 160\n    chickens = ducks = 0\n\n    # assume all are chickens with 2 legs\n    chickens = ducks = heads // 2\n    remaining_legs = legs - 2 * heads\n\n    # cows have 4 legs, therefore the remaining legs (after subtracting the chicken and duck legs)\n    # can be used to calculate the number of cows\n    cows = remaining_legs // 2\n\n    # adjust the number of chickens (and ducks) since cows have been accounted for\n    chickens -= cows\n    ducks -= cows\n\n    return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    sums = set()\n    for i in range(len(coins)):\n        for j in range(len(coins)):\n            for k in range(len(coins)):\n                total = coins[i] + coins[j] + coins[k]\n                sums.add(total)\n    return len(sums)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    # There are 4 entrances, so we enumerate all possible entrance choices for the 3 people\n    entrance_permutations = permutations(range(4), 3)\n    count = 0\n    \n    for perm in entrance_permutations:\n        # Joe is the first person, Mike is the second, Tina is the third\n        joe, mike, tina = perm\n        if joe != mike:  # Joe and Mike cannot use the same entrance\n            count += 1\n            \n    # There are 3 people and the order of entering is uncertain, so we need to consider\n    # all possible orderings for each valid entrance permutation.\n    # There are 3! (3 factorial) ways to order 3 people.\n    num_orderings = 6  # 3!\n    ans = count * num_orderings\n    \n    return ans\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    total_time = 13 * 24 + 22  # time in hours\n    \n    average_speed = total_distance / total_time\n    \n    return round(average_speed)\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    count = (last_multiple - first_multiple) + 1\n    return count\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    # Total numbers and the removed numbers' positions\n    total_nums = 2000\n    positions_to_remove = [1, 1949, 1975, 2000]\n    # Find the common difference (d) from the sum of three adjacent numbers\n    # Since the sum of any three numbers is constant, we have:\n    # a1 + a2 + a3 = a2 + a3 + a4 and so forth\n    # This leads to an arithmetic sequence where a1 = a4 = a7 = ...\n    # Hence, a2 = a1 + d, a3 = a2 + d = a1 + 2d\n    # The sum S of the arithmetic progression with n terms is: S = n/2 * (2a1 + (n-1)d)\n    # The sum of all numbers is given, so we can write an equation for the sum\n    # Since we have 2000 numbers, every third number repeats because (a1+a2+a3) == (a2+a3+a4)\n    a1_plus_a2_plus_a3 = 53324 // (total_nums // 3)\n    a1 = a1_plus_a2_plus_a3 // 3\n\n    # Since we want the 50th number, but after removing the first (49th in the original sequence):\n    pos_original = 49\n    # Also, adjust the position based on which numbers have been removed (if any before 50th)\n    for p in positions_to_remove:\n        if pos_original >= p:\n            pos_original += 1\n\n    # Now calculate the value of the 50th number in the original sequence\n    # Use the arithmetic sequence formula: an = a1 + (n-1)d\n    ans = a1 + (pos_original - 1) * 0  # the common difference (d) is 0\n\n    return ans\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_away_first = 339\n    bought_stamps = 455\n    gave_away_second = 777\n\n    remaining_stamps = initial_stamps - gave_away_first + bought_stamps - gave_away_second\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2  # since Albert is directly behind Bella, they count as 2 people together\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    # Initial volume and concentration of first fruit punch\n    volume1 = 2  # in Litres\n    concentration1 = 40 / 100  # 40% concentration expressed as a decimal\n\n    # Initial volume and concentration of second fruit punch\n    volume2 = 3  # in Litres\n    concentration2 = 70 / 100  # 70% concentration expressed as a decimal\n\n    # Calculate the total volume of fruit juice in the first fruit punch\n    fruit_juice1 = volume1 * concentration1\n\n    # Calculate the total volume of fruit juice in the second fruit punch\n    fruit_juice2 = volume2 * concentration2\n\n    # Calculate the combined volume of the two fruit punches\n    combined_volume = volume1 + volume2\n\n    # Calculate the combined volume of fruit juice\n    combined_fruit_juice = fruit_juice1 + fruit_juice2\n\n    # Calculate the concentration of the new mixture\n    new_concentration = (combined_fruit_juice / combined_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    return 17 + 21 + 36 + 23 + 4 + 49 + 10\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    for i in range(20, 31):\n        if all(i % j != 0 for j in range(2, int(i**0.5)+1)):\n            return i\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n\n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n    solution = solve(equation, age_now)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len({x1, x2, x3}) == 3:\n                    sorted_combination = sorted([x1, x2, x3])\n                    if sorted_combination not in combinations:\n                        combinations.append(sorted_combination)\n    return combinations\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    height_range = max_height - min_height + 1\n\n    # Since at least 4 students are of the same height (worst case scenario for the largest class size)\n    # and there are 9 possible heights, then we need at least 3 heights taken by less than 4 students.\n    # The smallest class size that satisfies this condition is when the first 3 heights\n    # (124, 125, 126cm) are taken by 3 students each, and the remaining heights are taken by\n    # 4 students each.\n\n    # If all heights are occupied by 4 students each, then the class would have a size of 4 * height range:\n    # But since we want the smallest class size with the given condition, we subtract 3 heights taken by 3 students:\n    class_size = 4 * height_range - (4 - 3) * 3\n\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50 # cost for three pens at 50p each\n    change = 5 - total_cost # change from £5\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    return more_english_books\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let's define w as the original number of women, m as the original number of men.\n    # After the first bus, there were (w - 36) women and still m men.\n    # According to the first condition: w - 36 = (3/5) * m\n    # After the second bus, there were (w - 36) women and (m - 48) men.\n    # According to the second condition: w - 36 = m - 48\n\n    # We can set up a system of linear equations based on the two conditions:\n    # (1) w - 36 = (3/5) * m\n    # (2) w - 36 = m - 48\n\n    # Solving the system of equations:\n    # From (2), we express m as w + 12\n    # Substitute m in (1): w - 36 = (3/5) * (w + 12)\n    from sympy import symbols, solve\n    \n    w, m = symbols('w m')\n    eq1 = w - 36 - (3/5) * m\n    eq2 = w - m - 12\n    \n    # Use sympy's solve() function to solve the system of equations\n    solutions = solve((eq1, eq2), (w, m))\n    w, m = solutions[w], solutions[m]\n    \n    # Total number of people at the bus stop initially\n    total_people_initially = w + m\n    return total_people_initially\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Winning positions for player starting first are multiples of 4. \n    # Since 15 is not a multiple of 4, one should reduce it to the nearest multiple of 4.\n    # Therefore, 15 should be reduced to 12, and to do that, Fred should remove 3 oranges.\n    return 3\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Cake cooking time in minutes\n    cook_time = timedelta(hours=1, minutes=25)\n\n    # Desired ready time\n    ready_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    # Start time by subtracting cook time from ready time\n    start_time = ready_time - cook_time\n\n    # Format start time in the format \"H:M PM/AM\"\n    ans = start_time.strftime(\"%I:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    all_three = 5\n\n    total_students = (go + checkers + chess) - (go_and_checkers + go_and_chess + checkers_and_chess) + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years from now when their ages sum to 48\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    # In x years, Oliver will be 20 + x and Lin will be 26 + x\n    # Their combined age will be (20 + x) + (26 + x)\n    # We need to find x such that (20 + x) + (26 + x) = 48\n\n    # Simplify the equation\n    # 46 + 2x = 48\n    # 2x = 48 - 46\n    # 2x = 2\n    # x = 1\n\n    x = (target_sum_age - (oliver_current_age + lin_current_age)) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    # distance between each pole\n    distance_between_poles = 3\n    # total number of poles minus 1 gives the total number of intervals between poles\n    number_of_intervals = 40 - 1\n    # total distance is the number of intervals times the distance between each pole\n    total_distance = number_of_intervals * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    # Since 245p must be a cube, we start by factorizing 245 to understand its prime factors\n    # 245 = 5 * 7^2\n    # For 245p to be a cube, the prime factors of p must complete the cube for both 5 and 7\n    # This means p must be a multiple of 5^2 * 7 to complete the cube (5^3 * 7^3), as 5 needs two more 5s, and 7 needs one more 7\n    \n    p = 5**2 * 7**1  # This is the smallest p that will make 245p a cube number\n    \n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        e, s, a, m, o = p\n        if e == 0 or s == 0:\n            continue  # leading zeroes are not allowed\n        esse = e * 1000 + s * 100 + s * 10 + e\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        if esse + 2018 == sasmo:\n            return s + a + s + m + o\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 736 / 100.0\n    return cm_in_m\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(64, 45, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = (1 / 4) * this_year_production + 1\n    return int(last_year_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one sick leave and one personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 5 * 8\n    denominator = 15\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_fractions = 0\n    for i in range(2, 2018):\n        for j in range(1, i):\n            sum_fractions += j / i\n    return sum_fractions\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n    \n    ans = (percentage / 100) * total_amount\n    \n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position gives us the dimensions of the array.\n    # 4th from front to back means there are 3 people in front of him,\n    # so counting him, there are 4 people in that column.\n    rows = 4\n    \n    # 3rd from back to front means there are 2 people behind him,\n    # so counting him, there are 3 people in that column.\n    columns = 3\n    \n    # Multiply rows by columns to get the total number of band members.\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    original_ratio = Eq(apples/oranges, 3/8)\n    new_ratio = Eq((apples-1)/oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x - 100))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_savings = 2.40\n    total_savings_goal = 150\n    days_in_week = 7\n\n    total_days = total_savings_goal / daily_savings\n    total_weeks = total_days / days_in_week\n\n    return int(total_weeks) + (total_days % days_in_week > 0)\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_first_14 = sum(range(1, 15))\n    target_sum = 2019 + sum_first_14\n    for start in range(1, target_sum):\n        consecutive_sum = sum(range(start, start + 8))\n        if consecutive_sum == target_sum:\n            return start\n    return None\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / (1/4)\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of one rabbit, one chicken, and one kangaroo\n    rabbit, chicken, kangaroo = symbols('rabbit chicken kangaroo')\n\n    # Given: 2 rabbits weigh as much as 6 chickens\n    equation1 = Eq(2 * rabbit, 6 * chicken)\n\n    # Given: 3 kangaroos weigh as much as 4 rabbits\n    equation2 = Eq(3 * kangaroo, 4 * rabbit)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rabbit, chicken, kangaroo))\n\n    # Calculate how many chickens weigh as much as one kangaroo\n    chickens_per_kangaroo = solutions[kangaroo] / solutions[chicken]\n\n    return chickens_per_kangaroo\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n    \n    num_terms = (last_term - first_term) // common_difference + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in word}\n    num_letters = len(word)\n    arrangements = factorial(num_letters)\n    \n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    cut_wood = 3\n    weave_rope = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # Assuming Jason can perform some tasks simultaneously\n    # Days taken for the processes that need to be done consequently\n    consecutive_days = prepare_food + soak_grass + weave_rope\n    \n    # Days taken for the processes that can be done while waiting for others to be completed\n    overlapping_days = max(cut_wood, dry_wood, choose_wood, mow_grass)\n    \n    total_days = consecutive_days + overlapping_days\n    \n    return total_days\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    factors_sum = 836 + 162 + 2\n    ans = common_factor * factors_sum\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age_then = (ashley_age - 3) - 2\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    y = (9 * 5 + 15 * 5) // 5\n    return y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle, and also the 7th from front to back.\n    # Therefore, there are 6 people in front of her and 6 people behind her.\n    total_dwarves = 6 + 6  # Counting only the dwarves\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    min_participants_in_most_popular_school = 4\n\n    # Using the Pigeonhole Principle to calculate the maximum number of schools\n    # If every school had exactly 3 participants, then having one more school would guarantee\n    # that at least one school has four participants (the most populated one).\n    max_schools = (participants - 1) // 3 + 1\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fraction = (2018 + i) / 5\n        fractional_part = fraction - int(fraction)\n        total += fractional_part\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i % 6 == 0) and (int(i / 6)**0.5).is_integer() and (i * 6)**(1/3).is_integer():\n            return i\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position counting from front to back and from back to front give the total number of rows\n    rows = 4 + 3 - 1  # Subtract 1 because we counted Tim twice\n\n    # Tim's position counting from left to right and from right to left give the total number of columns\n    columns = 4 + 7 - 1  # Subtract 1 because we counted Tim twice\n\n    # Total number of band members is the number of rows times the number of columns\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, gigi = symbols('lily gigi')\n    \n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n    \n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # The total amount Zoey originally had is:\n    total_amount = 50 + 20 + 10 + 5\n    \n    # Then we check for every possible coin she might have lost:\n    for lost_coin in [50, 20, 10, 5]:\n        # Calculate the amount remaining after losing the coin\n        remaining_amount = total_amount - lost_coin\n        # Check if the remaining amount is exactly twice as much as her brother\n        if remaining_amount == 2 * (total_amount - remaining_amount):\n            return lost_coin  # Return the lost coin if condition is met\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_faster = 48\n    # Speed of the slower train\n    speed_slower = 36\n\n    # When they meet, the distance traveled by the faster train is 70 km more than that of the slower one.\n\n    # Let the time taken for them to meet be t hours.\n    # Distance traveled by the faster train = speed_faster * t\n    # Distance traveled by the slower train = speed_slower * t\n\n    # According to the problem statement:\n    # speed_faster * t = speed_slower * t + 70\n    # 48t = 36t + 70\n    # Solving for t:\n    t = 70 / (speed_faster - speed_slower)\n\n    # Now, we can find the distance traveled by the faster train,\n    # which will be the distance between the two stations.\n    distance_between_stations = speed_faster * t\n\n    return distance_between_stations\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            return (boats + 1) * 6\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            c = a + b\n            if b < c < 10:\n                for d in range(c+1, 10):\n                    if a + b + c + d == 16 and d == a + b + c:\n                        return d\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # There are 3 choices for the first digit (2, 4) because first digit cannot be 0\n    # and 3 choices for the second digit (0, 2, 4) as 0 is now allowed.\n    # However, if the first digit is chosen, it cannot be chosen again for the second digit.\n    # Hence, for the second digit, there are only 2 choices left.\n    # Total number of different two-digit numbers = 2 * 3 = 6\n    \n    return 2 * 3\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    nums = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007) ** 2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = '2468'\n    max_number = 0\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num > max_number and num % 4 == 0:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance uphill is the same as distance downhill, so we just need to find one of them.\n    # We can use the uphill walk to calculate distance:\n    # Distance = Speed * Time\n    uphill_speed = 5  # in miles per hour\n    uphill_time = 3   # in hours\n    distance = uphill_speed * uphill_time  # in miles\n\n    # Now, we can calculate the total time for the whole trip (uphill + downhill)\n    downhill_time = 2  # in hours (given)\n    total_time = uphill_time + downhill_time  # in hours\n\n    # The total distance for the whole trip is twice the distance of the uphill walk\n    # (because the downhill distance is the same as the uphill distance)\n    total_distance = 2 * distance  # in miles\n\n    # Finally, we calculate the average speed for the whole trip\n    # Average speed = Total Distance / Total Time\n    average_speed = total_distance / total_time  # in miles per hour\n\n    return average_speed\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Equation 1: Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Equation 2: Rasidah spent 3/5 of her money\n    # Equation 3: Chai Seng spent 6/7 of his money\n    spent_rasidah = 3/5 * rasidah\n    spent_chai_seng = 6/7 * chai_seng\n\n    # Equation 4: In the end, Chai Seng had 1/2 as much money left as Rasidah\n    remaining_rasidah = rasidah - spent_rasidah\n    remaining_chai_seng = chai_seng - spent_chai_seng\n    equation4 = Eq(remaining_chai_seng, 1/2 * remaining_rasidah)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation4), (rasidah, chai_seng))\n\n    # Extract the solution for the amount Rasidah had at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Cost for the first 5 kWh\n    base_cost = 2 * 5 + 3  # $2/kWh * 5 kWh + $3 service fee\n    \n    # Remaining amount after paying the base cost\n    remaining_amount = 63 - base_cost\n    \n    # Additional kWh she can use with the remaining amount\n    additional_kWh = remaining_amount  # because it's $1 per additional kWh\n    \n    # Total kWh she can use\n    total_kWh = 5 + additional_kWh\n    \n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    return 54 / (63 / 7)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.9\n    \n    value_after_5_years = initial_value * (depreciation_rate ** 5)\n    rounded_value = round(value_after_5_years, 1)\n    \n    return rounded_value\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for i in range(1, 1001):  # assume the number of students is below 1000 for a reasonable search space\n        if i % 3 == 2 and i % 7 == 6 and i % 11 == 10:\n            return i\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 400 + 10 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    n = 0\n    base = 4320\n    factor = 3 / 2\n    while base % 1 == 0:\n        base *= factor\n        if base % 1 == 0:\n            n += 1\n        else:\n            break\n    return n\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    cookies_per_small_box = 600\n    number_of_small_boxes_needed = total_cookies // cookies_per_small_box\n    if total_cookies % cookies_per_small_box != 0:\n        number_of_small_boxes_needed += 1\n    return number_of_small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-8 - (-19))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # Using Inclusion-Exclusion Principle to find the maximum number of students passing all three tests\n    max_all_pass = math_pass + science_pass + english_pass - 2*total\n\n    return max_all_pass\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    fruit_juice_first_punch = 20 * 0.35\n    fruit_juice_second_punch = 30 * 0.60\n    total_fruit_juice = fruit_juice_first_punch + fruit_juice_second_punch\n    percent_concentration = (total_fruit_juice / total_weight) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    B_original = symbols('B_original')\n\n    A_after = 50 + 12\n    B_after = B_original - 16\n\n    equation = Eq(A_after, 2 * B_after)\n\n    solution = solve(equation, B_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 41, 43]\n    for num in range(primes[1] + 2, primes[-2], 2):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            return num\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = (cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fishes_for_rabbit = 3  # 3 fishes = 1 rabbit\n    rabbits_for_wheat = 2 / 3  # 2 rabbits = 3 packs of wheat\n    fishes_for_wheat = fishes_for_rabbit * rabbits_for_wheat  # calculate the continued ratio\n\n    return fishes_for_wheat\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n    \n    hours_hired = (total_cost - booking_fee) / hourly_rate\n    \n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    pencils, _ = solve_congruence(*congruences)\n\n    while pencils < 400:\n        pencils += 4 * 5 * 7\n\n    return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if 0 <= x3 < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    return ginnie + lyn\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the mass of the empty bottle and the mass of the apple juice when the bottle is full\n    mass_empty_bottle, mass_full_juice = symbols('mass_empty_bottle mass_full_juice')\n\n    # Equation for when 5/6 of the bottle was filled with apple juice\n    equation1 = Eq(mass_empty_bottle + (5/6) * mass_full_juice, 4.6)\n    # Equation for when 2/3 of the bottle was filled with apple juice\n    equation2 = Eq(mass_empty_bottle + (2/3) * mass_full_juice, 4.45)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (mass_empty_bottle, mass_full_juice))\n\n    # Convert the mass of the empty bottle from kilograms to grams\n    mass_empty_bottle_grams = solutions[mass_empty_bottle] * 1000\n\n    return mass_empty_bottle_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * x - 3, 19)\n    favourite_number = solve(equation, x)\n    \n    return favourite_number[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundred_digit in range(1, 10, 2):  # Loop through odd hundreds digit (1 to 9)\n        for ten_digit in range(0, 10):  # Loop through tens digit (0 to 9)\n            for unit_digit in range(0, 10):  # Loop through units digit (0 to 9)\n                if hundred_digit + ten_digit + unit_digit == 5:  # Sum of digits is 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Since there's no explicit multiplication out of the multiplication table mentioned,\n    # I'll just provide a generic solution for multiplying two numbers.\n    num1 = 12345  # You can replace with any number you need to multiply\n    num2 = 6789   # You can replace with any number you need to multiply\n    \n    ans = num1 * num2\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i for i in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let x be the number of people and y be the number of benches.\n    # We have the following system of equations:\n    # 1. x = 3y + 7 (3 people per bench plus 7 people without seats)\n    # 2. x = 7(y - 3) (7 people per bench with 3 benches left over)\n    # We can solve these equations to find x and y.\n\n    # x - 3y = 7   -> equation (1)\n    # x - 7y = -21 -> equation (2) after distributing 7 into (y - 3)\n    \n    # Subtracting equation (2) from equation (1) gives us:\n    # -4y = 28\n    # Solving for y gives us y = -7, but since y represents benches, it can't be negative\n    # Hence, we made a mistake in our system of equations. There should be no negative sign on the right side of equation (2).\n    \n    for y in range(1, 100): # Assuming number of benches is within a reasonable limit.\n        x_1 = 3*y + 7\n        x_2 = 7*(y + 3)\n        if x_1 == x_2:  # Both conditions must satisfy the same number of people for the correct solution.\n            return x_1  # Return either x_1 or x_2 as they are equal.\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Assume Adam, Ben, and Carl's weights are 'a', 'b', and 'c' respectively\n    # From the problem statement we have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    # To find the total weight, we need to calculate a + b + c\n    # Adding all provided equations: 2*(a + b + c) = 102 + 97 + 93\n    # Now we solve for a + b + c\n    total_twice = 102 + 97 + 93\n    total_weight = total_twice / 2\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spend = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n\n    max_books = int(total_spend / book_cost)\n    magazines_bought = 0\n\n    for books in range(max_books + 1):\n        if (total_spend - books * book_cost) % magazine_cost == 0:\n            magazines_bought = (total_spend - books * book_cost) / magazine_cost\n            break\n\n    return int(magazines_bought)\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    \n    # Single digit pages: 1-9\n    single_digit_pages = 9\n    total_digits += single_digit_pages * 1\n    \n    # Double digit pages: 10-99\n    double_digit_pages = 90\n    if total_digits + double_digit_pages * 2 <= 1101:\n        total_digits += double_digit_pages * 2\n    else:\n        remaining_digits = 1101 - total_digits\n        pages += remaining_digits // 2\n        return pages\n        \n    # Triple digit pages: 100-999\n    triple_digit_pages = 900\n    if total_digits + triple_digit_pages * 3 <= 1101:\n        total_digits += triple_digit_pages * 3\n    else:\n        remaining_digits = 1101 - total_digits\n        pages += remaining_digits // 3\n        return pages\n    \n    # Quadruple digit pages: 1000 and beyond...\n    remaining_digits = 1101 - total_digits\n    pages += remaining_digits // 4\n\n    return single_digit_pages + double_digit_pages + triple_digit_pages + pages\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "from itertools import product\n\ndef solution():\n    digits = ['0', '1', '2']\n    numbers = []\n\n    for length in range(4, 5):  # As the number must be greater than 1000, it must have at least 4 digits\n        for p in product(digits, repeat=length):\n            number = int(''.join(p))\n            if number > 1000:\n                numbers.append(number)\n    \n    numbers.sort()\n    position = numbers.index(2010) + 1  # Plus 1 because list index starts at 0\n    return position\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n\n    andy_final = andy_notebooks - andy_gives\n    sister_initial = andy_final - andy_gives\n\n    return sister_initial\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    # This sequence is not a geometric sequence, it's quadratic.\n    # We can deduce the nth term of the sequence by examining the pattern:\n    # 1 = 1\n    # 3 = 1 + 2\n    # 7 = 3 + 4\n    # 13 = 7 + 6\n    # 21 = 13 + 8\n    # ...\n    # From the above pattern, nth term a_n = n^2 - n + 1\n    # To find the largest two digit number, we will iterate through n until a_n exceeds two digits\n    \n    n = 1\n    while True:\n        a_n = n**2 - n + 1\n        if a_n > 99:\n            break\n        largest_two_digit = a_n\n        n += 1\n        \n    return largest_two_digit\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # assuming Mr. Lv's age is less than 100\n        age_base10_str = str(age)\n        age_base3_str = str(age) + '0'\n        age_base3 = int(age_base3_str, 3)\n\n        if int(age_base10_str) == age_base3:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Original ratio between the number of orchids and tulips\n    equation1 = Eq(orchids / tulips, 3 / 5)\n    \n    # After selling some of each flower, the remaining flowers equation\n    equation2 = Eq((1 - 0.4) * orchids + (1 - 1/5) * tulips + (1 - 0.25) * roses, 2644)\n    \n    # Total number of flowers initially\n    equation3 = Eq(orchids + tulips + roses, 3616)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5/8) + (1/17)) * 8 + (9/17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors.append(i)\n            if len(factors) == 2:\n                break\n    return sum(factors)\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    # Subtracting 1 seat because rotating the table doesn't change the order\n    num_seats = 7\n    # The number of ways to arrange people around the table\n    arrangements = factorial(num_seats - 1)\n    return arrangements\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 55))\n    for prime in primes:\n        if isprime(55 - prime):\n            return prime * (55 - prime)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols representing the cost of one basketball and one volleyball\n    cost_basketball, cost_volleyball = symbols('cost_basketball cost_volleyball')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * cost_basketball + 3 * cost_volleyball, 195)\n    equation2 = Eq(4 * cost_basketball + 5 * cost_volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_basketball, cost_volleyball))\n\n    # Return the cost of one volleyball\n    return solutions[cost_volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7:  # all digits are different\n                    number = int(f\"20{A}{M}{C}19\")\n                    if number % 9 == 0:  # divisible by 9\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candies, valeria_candies = symbols('mike_candies valeria_candies')\n    \n    # Valeria says they have 36 pieces in total\n    equation1 = Eq(mike_candies + valeria_candies, 36)\n    \n    # If both eat the same amount, Mike will have 6 pieces left, Valeria will have 22 pieces left.\n    # This means Valeria originally had 22+x pieces and Mike had 6+x pieces, where x is the amount they both eat.\n    equation2 = Eq(valeria_candies - mike_candies, 22 - 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike_candies, valeria_candies))\n\n    return solutions[valeria_candies]\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Since the pins are identical, the order of the piles does not matter.\n    # This is a problem of distributing n identical items into r distinct boxes, \n    # also known as the stars and bars problem.\n    # The number of ways to do so is given by the formula:\n    # (n + r - 1) choose r - 1, which is the same as (n + r - 1 choose n)\n    # In this case, n = 10 (pins) and r = 3 (piles).\n    \n    from math import comb\n    n = 10\n    r = 3\n    \n    ways = comb(n + r - 1, n)\n    \n    return ways\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_read_in_a_day = 1 / 4 / 3\n    total_days = 1 / part_read_in_a_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n\n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother_now - melissa_now, 32 - 8)\n    \n    # Mother is now three times as old as Melissa\n    equation2 = Eq(mother_now, 3 * melissa_now)\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given 3 pieces of chocolate cake equals the cost of 2 pieces of cheesecake\n    # Given 3 pieces of cheesecake equals the cost of 5 cookies\n    # Given 1 cookie costs $9\n    # We need to find the cost of 1 piece of chocolate cake\n\n    # Let's assign variables to each of these quantities.\n    cookie_cost = 9  # Cost of 1 cookie\n\n    # We use the relationships to express the cost of cheesecake and chocolate cake in terms of cookies.\n    # 3 pieces of cheesecake cost the same as 5 cookies\n    cheesecake_cost_for_3_pieces = 5 * cookie_cost\n\n    # Since 3 pieces of chocolate cake equals the cost of 2 pieces of cheesecake,\n    # the cost of 1 piece of cheesecake is (3 pieces of cheesecake cost / 3)\n    cheesecake_cost_for_1_piece = cheesecake_cost_for_3_pieces / 3\n\n    # Therefore, the cost of 2 pieces of cheesecake is twice the cost of 1 piece\n    cheesecake_cost_for_2_pieces = 2 * cheesecake_cost_for_1_piece\n\n    # The cost of 3 pieces of chocolate cake is equal to the cost of 2 pieces of cheesecake\n    chocolate_cake_cost_for_3_pieces = cheesecake_cost_for_2_pieces\n\n    # Hence, the cost of 1 piece of chocolate cake is (3 pieces of chocolate cake cost / 3)\n    chocolate_cake_cost_for_1_piece = chocolate_cake_cost_for_3_pieces / 3\n\n    # Return the cost of 1 piece of chocolate cake\n    return chocolate_cake_cost_for_1_piece\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 // (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    decimal_a = Fraction(473, 100) \n    decimal_b = Fraction(477, 100)\n    decimal_c = Fraction(4737, 1000)\n    \n    # Convert recurring decimal to fraction\n    decimal_d_numerator = 47 * 100 + 3 - 47\n    decimal_d_denominator = 99 * 100\n    decimal_d = Fraction(decimal_d_numerator, decimal_d_denominator)\n\n    smallest_fraction = min(decimal_a, decimal_b, decimal_c, decimal_d)\n    return float(smallest_fraction)\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    plants_joel = (remaining_after_joel + 2) * 2\n    remaining_after_valerie = plants_joel + 3\n    plants_valerie = (remaining_after_valerie) * 2\n    remaining_at_first = plants_valerie + 1\n    \n    return remaining_at_first\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # length of the train in meters\n    tunnel_length = 544  # length of the tunnel in meters\n    speed = 52  # speed of the train in meters per second\n    \n    # Total distance to cover is the length of the train plus the length of the tunnel.\n    total_distance = train_length + tunnel_length\n    \n    # Time is distance divided by speed.\n    time_in_tunnel = total_distance / speed\n    \n    return time_in_tunnel\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    original_price = final_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The recurring cycle of digits after the decimal point in the fraction 6/7 is '857142'.\n    recurring_cycle = '857142'\n\n    # To find the sum of the first 58 digits, we need the complete sets of this cycle plus the remaining part.\n    # Each full cycle has 6 digits, so we can determine how many complete cycles fit into 58 digits.\n    full_cycles = 58 // len(recurring_cycle)\n    remaining_digits = 58 % len(recurring_cycle)\n\n    # Now we sum up the digits of the full cycles.\n    sum_full_cycles = sum(int(digit) for digit in recurring_cycle) * full_cycles\n    \n    # And we sum up the remaining digits.\n    sum_remaining_digits = sum(int(recurring_cycle[i]) for i in range(remaining_digits))\n\n    # The final answer is the sum of the digits in the full cycles plus the sum of the remaining digits.\n    ans = sum_full_cycles + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p1, p6 = symbols('p1 p6')\n\n    # Total number of students equation\n    equation1 = Eq(p1 + p6, 120)\n    # Total buckets of water equation\n    equation2 = Eq((p6 * 2 + p1 / 2), 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p1, p6))\n\n    return solutions[p1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are two possible outcomes for each coin toss: heads or tails.\n    outcomes_per_toss = 2\n\n    # Since there are two coin tosses, we calculate the total possible outcomes by using the rule of product.\n    total_possible_outcomes = outcomes_per_toss ** 2\n\n    return total_possible_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    # Let x be the initial number of eggs.\n    # After selling x//2 + 16, the seller is left with x - (x//2 + 16) which becomes (x//2 - 16).\n    # Then the seller sells (x//4 - 8) [(x//2 - 16) // 2] and is left with 18 eggs.\n    # Our equation therefore is: x - (x//2 + 16) - ((x//2 - 16) // 2 - 7) = 18.\n    \n    # We start from the remaining 18 eggs and perform the inverse operations:\n    second_sale = 18 + 7  # Add back the 7 eggs sold second\n    before_second_sale = second_sale * 2  # Double to find the amount before the second half-sell\n\n    first_sale = before_second_sale + 16  # Add back the 16 eggs sold first\n    initial_eggs = first_sale * 2  # Double to find the initial amount of eggs\n\n    return initial_eggs\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n    common_div = gcd(pencils, pens)\n    \n    return common_div\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Proportion of fish to rabbits\n    fish_to_rabbits = 3 / 1\n\n    # Proportion of rabbits to packs of wheat\n    rabbits_to_wheat = 2 / 3\n\n    # Proportion of fish to packs of wheat\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    return fish_to_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    wrong_product = quotient * remainder\n    \n    # the error in Johnny's solution is that he multiplies the quotient by the remainder\n    # instead, he should multiply the quotient by the divisor and then add the remainder\n    correct_dividend = (quotient * divisor) + remainder\n    \n    correct = wrong_product + divisor != correct_dividend # check if Johnny's final answer is incorrect\n    \n    return correct_dividend if correct else None\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes) if total_boxes.is_integer() else int(total_boxes) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n    # Initially 40% of the students were boys\n    initial_boys = 0.40 * total_students\n    # After 16 boys left and 16 girls entered\n    final_boys = initial_boys - 16\n    new_total_students = total_students + (16 - 16)\n    # Now the boys are 2/15 of the total students\n    equation = Eq(final_boys, 2/15 * new_total_students)\n\n    # Solve the equation for total students\n    total_students_solution = solve(equation, total_students)\n\n    # Calculate the initial and final number of girls\n    initial_girls = total_students_solution[0] - initial_boys\n    final_girls = initial_girls + 16  # 16 girls entered the canteen\n\n    return final_girls\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    from math import sqrt\n\n    # Let the cube have a side length of x\n    x = symbols('x')\n\n    # Use Pythagoras theorem in triangles PBG, PCG, PDG and PAG:\n    # PB^2 = x^2 + x^2 (since PB is the diagonal of a face of the cube)\n    # PC^2 = x^2 (since PC is an edge of the cube)\n    # PD^2 = x^2 + 2*x^2 (since PD is the diagonal of the cube)\n    # PG^2 = 3*x^2 (since PG is the main diagonal through the center of the cube)\n\n    equation_PB = Eq(x**2 + x**2, (60*sqrt(10))**2)\n    equation_PC = Eq(x**2, (60*sqrt(5))**2)\n    equation_PD = Eq(x**2 + 2*x**2, (120*sqrt(2))**2)\n    equation_PG = Eq(3*x**2, (36*sqrt(7))**2)\n\n    # Solve the system of equations\n    solutions = solve((equation_PB, equation_PC, equation_PD, equation_PG), (x))\n\n    # Filter positive solution for the edge of the cube\n    x_value = max(solutions)\n\n    # Now find the length of PA, using the fact that it's an edge of the cube\n    PA = x_value\n\n    return PA\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n    \n    for i in range(1, len(digits)+1):  # Generate permutations of all lengths\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if num < 100 and isprime(num):\n                primes.add(num)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    divisor = (3.5 + Fraction(14, 3) + Fraction(32, 15)) / (0.5 * (Fraction(21, 20) + 4.1))\n    \n    result = (numerator / denominator) / divisor\n    \n    return float(result)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    count = 0\n\n    for num in range(1000, 10000):\n        digits = [int(d) for d in str(num)]\n        valid = True\n        for idx in range(len(digits) - 1):\n            if digits[idx] % 2 == 0:\n                if digits[idx] >= digits[idx+1]:\n                    continue\n                else:\n                    valid = False\n                    break\n            else:\n                if digits[idx] <= digits[idx+1]:\n                    continue\n                else:\n                    valid = False\n                    break\n        \n        if valid:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Given data\n    bridge_time = 28 # seconds\n    bridge_length = 100 # meters\n\n    tunnel_time = 114 # seconds (1 minute and 54 seconds)\n    tunnel_length = 1700 # meters\n\n    # Speed of the train when passing through the bridge\n    train_length = bridge_time - bridge_length # Assuming speed = 1 meter/second\n\n    # Speed of the train when passing through the tunnel is doubled\n    # Therefore, the time it would take at the original speed is halved\n    original_tunnel_time = tunnel_time * 2\n\n    # Since the speed while passing the tunnel is doubled, the length of the train should remain the same\n    # So, the total length traversed at original speed is train_length + tunnel_length\n    # And the total time at original speed is original_tunnel_time\n\n    # We check if the train length calculated matches the conditions given for the tunnel traversal\n    assert original_tunnel_time == train_length + tunnel_length\n    \n    return train_length\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    banana, pear = symbols('banana pear')\n\n    # Equation 1: Max buys 1 banana and 2 pears\n    equation1 = Eq(1*banana + 2*pear, 94)\n    # Equation 2: Emily buys 1 banana and 1 pear\n    equation2 = Eq(1*banana + 1*pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming_percent = 82 / 100\n    jogging_percent = 54 / 100\n    neither_percent = 16 / 100\n    \n    swimming_count = total_students * swimming_percent\n    jogging_count = total_students * jogging_percent\n    neither_count = total_students * neither_percent\n    \n    both_count = (swimming_count + jogging_count) - (total_students - neither_count)\n    \n    return int(both_count)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    distance = 500\n    v_cargo = 15\n    v_passenger = 20\n    current_speed = 5\n    cargo_lead_time = 4\n\n    # Speed of cargo ship downstream and passenger ship upstream\n    v_cargo_downstream = v_cargo + current_speed\n    v_passenger_upstream = v_passenger - current_speed\n\n    # Distance covered by cargo ship in its 4 hour lead\n    cargo_distance_lead = v_cargo_downstream * cargo_lead_time\n    \n    # Remaining distance to be covered after passenger ship starts\n    remaining_distance = distance - cargo_distance_lead\n    \n    # Relative speed between the two ships when both are in motion\n    relative_speed = v_cargo_downstream + v_passenger_upstream\n    \n    # Time at which both ships meet after passenger ship departs\n    time_to_meet = remaining_distance / relative_speed\n    \n    return time_to_meet\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have amy - x apples\n    # After receiving x apples, John will have john + x apples\n    # We want amy - x to be 4 more than john + x\n    # So, we want (amy - x) = (john + x) + 4\n    # Solving the equation for x\n    x = (amy - john - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    ans = 15  # 15 is the only odd number less than 17 and more than 13\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda does 1 problem every 5 minutes\n    cici_rate = 1 / 6   # Cici does 1 problem every 6 minutes\n    total_rate = linda_rate + cici_rate  # Combined rate of Linda and Cici\n    time_in_minutes = 2 * 60  # 2 hours converted to minutes\n\n    total_problems = total_rate * time_in_minutes\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the prizes\n    X, Y, Z = symbols('X Y Z')\n\n    # Equations based on the problem statement\n    equation1 = Eq(X, Y + 83)\n    equation2 = Eq(Z, X + 24)\n    equation3 = Eq(X + Y + Z, 283)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n\n    return solutions[Y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let's set a standard unit based on the consumption of one rabbit per day.\n    # If 70 rabbits can be fed for 8 days, the pasture has 70 * 8 units of food.\n    total_food_units = 70 * 8\n\n    # Since one goat eats as much as 4 rabbits in a day,\n    # we can say one goat eats 4 units of food per day.\n    # Given 14 goats can be fed for 15 days, we should have:\n    # 14 goats * 4 units/goat/day * 15 days = total_food_units\n    # So we can confirm our total_food_units calculation is correct.\n\n    # Now, we need to calculate the daily food consumption for 17 goats and 20 rabbits.\n    # One goat eats 4 units of food, so 17 goats eat:\n    goat_daily_consumption = 17 * 4\n\n    # Each rabbit eats 1 unit of food, so 20 rabbits eat:\n    rabbit_daily_consumption = 20\n\n    # Total daily consumption for 17 goats and 20 rabbits would be:\n    total_daily_consumption = goat_daily_consumption + rabbit_daily_consumption\n\n    # The number of days the pasture can feed the 17 goats and 20 rabbits is:\n    days = total_food_units / total_daily_consumption\n\n    return days\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq((1/4)*chan, (1/3)*toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tasha, sandra, riley = symbols('tasha sandra riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha - riley, 60)\n\n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 3 * (19 - x), 65)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    a = 4\n    b = 3\n    ans = sum(a * 10**i for i in range(b))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_to_number = {\n        'A': '0',\n        'n': '1',\n        'g': '4',\n        'e': '7',\n        'l': '5',\n    }\n\n    devil = \"Devil\"\n    devil_to_number = ''.join(angel_to_number[ch] if ch in angel_to_number else ch for ch in devil)\n\n    andy_attempt = '4005220912'\n\n    can_unlock = devil_to_number == andy_attempt\n    if can_unlock:\n        return True, \"Andy can unlock the treasure chest.\"\n    else:\n        return False, devil_to_number\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', real=True, positive=True)\n    x = sqrt(a) - 2 / sqrt(a)\n\n    expression = sqrt(x**2 + 8 * x)\n    \n    simplified_expr = simplify(expression)\n\n    return simplified_expr\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n    min_sheep_in_max_pen = (sheep // pens) + (1 if sheep % pens != 0 else 0)\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    boys_mean_age = 16.2\n    girls = 27\n    girls_mean_age = 16.7\n\n    total_age = (boys * boys_mean_age) + (girls * girls_mean_age)\n    total_members = boys + girls\n\n    mean_age_all = total_age / total_members\n\n    return mean_age_all\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # Initialize the count of different ways\n    count = 0\n    \n    # Iterate over all possible splits starting with two numbers\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            if x1 + x2 == 6:\n                count += 1\n    # Correcting for over-counting identical pairs (e.g., 1+5 and 5+1)\n    count //= 2\n    \n    # Add the ways to split into three numbers\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            for x3 in range(1, 6):\n                if x1 + x2 + x3 == 6:\n                    count += 1\n    # Since the order doesn't matter, we divide by the factorial of the number of numbers\n    count //= 6\n    \n    # Split into four numbers\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            for x3 in range(1, 6):\n                for x4 in range(1, 6):\n                    if x1 + x2 + x3 + x4 == 6:\n                        count += 1\n    count //= 24  # Dividing by 4! for the four numbers\n    \n    # Split into five numbers: the only way is 1+1+1+1+2\n    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert repeating decimals to fractions\n    def repeating_to_fraction(repeating):\n        non_repeating, repeating_part = repeating.split('.')\n        repeating_part = repeating_part.rstrip('0')\n        if repeating_part:\n            repeating_length = len(repeating_part) - 1  # subtract the non-repetend dot\n            fraction = Fraction(int(repeating_part), 10**repeating_length - 1)\n        else:\n            fraction = Fraction(0)\n        return fraction + int(non_repeating)\n\n    # List of repeating decimals as strings\n    repeating_decimals = ['0.0', '0.11', '0.2', '0.3', '0.4', '0.5', '0.7']\n    # Corresponding integer multipliers\n    multipliers = [1, 12, 23, 34, 45, 54, 78]\n\n    # Summing the product of repeating decimals converted to fractions and their multipliers\n    total_sum = sum(repeating_to_fraction(dec) * mult for dec, mult in zip(repeating_decimals, multipliers))\n    \n    # Convert the sum back to a decimal (float)\n    ans = float(total_sum)\n\n    return ans\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = ((1, 6), (8, 13))\n    ans = solve_congruence(*congruences)\n\n    for number in range(ans[0], 300, ans[1]):\n        if 200 < number < 300:\n            return number\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    return lcm(raye_cycle, simon_cycle, taylor_cycle)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # We need to consider the worst-case scenario using the Pigeonhole Principle.\n\n    # The worst case for getting 5 green balls is taking all yellow and red balls first.\n    # That's 5 yellow balls and 2 red balls.\n    worst_case_green = 5 + 2\n\n    # Now, she needs to take 5 green balls to be sure she has 5 of the same color.\n    balls_needed_for_five_green = worst_case_green + 5 \n\n    return balls_needed_for_five_green\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for a chair and a table\n    chair, table = symbols('chair table')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * table, 4 * chair)  # Total mass of 3 tables is equal to 4 chairs\n    equation2 = Eq(table, chair + 2)      # A table is 2kg heavier than a chair\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_10 = 31\n    common_difference = 3\n    term_1 = term_10 - common_difference * (10 - 1)\n    return term_1\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original = \"Angel\"\n    original_code = \"0141705021\"\n    attempt = \"4005220912\"\n    devil = \"Devil\"\n\n    # Dictionary to map each letter in \"Angel\" to its corresponding number in the original password\n    mapping = {letter: num for letter, num in zip(original, original_code)}\n\n    # Building the correct password for \"Devil\" using the mapping\n    correct_password = \"\".join(mapping[letter] if letter in mapping else letter for letter in devil)\n\n    if attempt == correct_password:\n        # Andy can unlock the treasure chest\n        ans = (True, \"Andy can unlock the treasure chest.\")\n    else:\n        # Andy cannot unlock the treasure chest, provide the correct password\n        ans = (False, correct_password)\n\n    return ans\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # pool length in meters\n    sam_speed = 1  # Sam's speed in m/s\n    ben_speed = 0.6  # Ben's speed in m/s\n    total_time = 10 * 60  # total time in seconds (10 minutes)\n\n    # Calculate the relative speed\n    relative_speed = sam_speed + ben_speed  # m/s\n\n    # Calculate the total distance covered by both\n    total_distance = relative_speed * total_time\n\n    # Calculate the number of meetings, ignoring extra partial meeting\n    num_meetings = total_distance // pool_length\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    def new_operation(a, b):\n        return (a // 10) * (a % 10) + (b // 10) * (b % 10)\n\n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    temperature_difference = hottest - coldest\n    return temperature_difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = average_bob_cindy * 2\n    total_height_three_children = total_height_bob_cindy + height_doris\n    average_three_children = total_height_three_children / 3\n    return average_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq(destin - 6, 5 * (nephew - 6))\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    sum_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of boys in the class\n    x = symbols('x')\n    \n    # Total number of pencils boys own: 20x\n    # Total number of pencils girls own: 60(40 - x)\n    # Total number of pencils in class: 35 * 40\n    equation = Eq(20*x + 60*(40 - x), 35*40)\n    \n    # Solving the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial number of pies Mrs Tan and Mrs Lim had as x.\n    x = symbols('x')\n    \n    # Setting up the equation according to the problem statement.\n    # After the changes, Mrs Tan should have 2 times the pies Mrs Lim has.\n    equation = Eq((x + 12), 2 * (x - 4))\n    \n    # We solve the equation to find the value of x.\n    solution = solve(equation, x)\n    \n    # Assuming there's only one solution, as is common in these problems.\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5']\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '345634563456'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_repetitions = 50 // len(pattern)\n    remaining_digits = 50 % len(pattern)\n\n    total_sum = pattern_sum * full_repetitions + sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    card_combinations = list(combinations(cards, 2))\n    products = {reduce(mul, combo): combo for combo in card_combinations}\n\n    for combo in combinations(cards, 3):\n        prod = reduce(mul, combo)\n        if prod in products:\n            rest_cards = set(cards) - set(combo) - set(products[prod])\n            return rest_cards.pop()\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Assume father's current age is father_age\n\n    # When Tom reaches father's current age (let's say after 'x' years), father will be 70.\n    # So, father_age + x = 70 and tom_age + x = father_age\n\n    # Let's solve for father_age\n    # father_age - tom_age = x (from tom_age + x = father_age)\n    # Replace x in the first equation\n    # father_age + (father_age - tom_age) = 70\n    # 2 * father_age - tom_age = 70\n    father_age = (father_age + tom_age) / 2\n    \n    # Solve for father_age\n    father_age = (father_future_age + tom_age) / 2\n\n    return father_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)\n    arrival_time = (10, 22)\n    \n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n\n    travel_time_minutes = arrival_minutes - departure_minutes\n\n    return travel_time_minutes\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_1 = 25\n    packet_2 = 20\n    days = lcm(packet_1, packet_2)\n\n    # Starting from March 1st\n    march_days = 31\n    # Since the days are calculated from 1, we subtract 1 to get the interval in days\n    next_start_date = (days - 1) % 365 \n\n    # Find out the month and day for the next start date\n    months = [31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # Exclude February, not a leap year\n    month = 3  # Start from March\n    while next_start_date > months[month - 3]:\n        next_start_date -= months[month - 3]\n        month += 1\n\n    return month, next_start_date + 1\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    three_fifths_sweets = 6\n    one_fourth_of_remainder_sweets = 4\n    rest_sweets = 5\n    \n    # Calculate number of students who received 6 sweets\n    students_three_fifths = (total_sweets * 3/5) / three_fifths_sweets\n    \n    # Calculate the remainder sweets\n    remainder_sweets = total_sweets - (students_three_fifths * three_fifths_sweets)\n    \n    # Calculate the number of students who received 4 sweets from the remainder\n    students_one_fourth_of_remainder = (remainder_sweets * 1/4) / one_fourth_of_remainder_sweets\n    \n    # Calculate the sweets given to students who received 5 sweets each\n    rest_sweets_given = remainder_sweets - (students_one_fourth_of_remainder * one_fourth_of_remainder_sweets)\n    \n    # Calculate the number of students who received 5 sweets\n    students_rest = rest_sweets_given / rest_sweets\n    \n    # Total number of students\n    total_students = students_three_fifths + students_one_fourth_of_remainder + students_rest\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    midpoint = (17 + 35) / 2\n    return midpoint\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    num1 = 3 + 1/4\n    num2 = 1 + 3/4\n\n    ans = num1 - num2\n    return round(ans, 2)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_money = 580\n    boy_money = 8\n    girl_money = 5\n    girl_ratio = 1\n    boy_ratio = 3\n\n    # Let x be the number of girls, then 3x will be the number of boys\n    for x in range(total_money // girl_money + 1):\n        if boy_money * (boy_ratio * x) + girl_money * x == total_money:\n            return boy_ratio * x\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 101):\n        if num % 4 == 3:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1):  # one of the equal sides\n        for b in range(1, 12 // 2 + 1):  # the base of the triangle\n            if 2 * a + b == 12 and a > b / 2:  # perimeter condition and triangle inequality\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    def find_largest_odd():\n        for odd_num in range(999, 0, -2):\n            for first_num in range(2, odd_num):\n                if is_composite(first_num):\n                    for second_num in range(2, odd_num - first_num):\n                        if is_composite(second_num) and is_composite(odd_num - first_num - second_num):\n                            break\n                    else:\n                        continue\n                    break\n            else:  # If no break occurred, it means no solution was found\n                return odd_num\n        \n    return find_largest_odd()\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n    \n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    \n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had = 86\n    given_away = 29\n    final_count = 100\n\n    strawberries_from_mother = final_count - (lena_had - given_away)\n\n    return strawberries_from_mother\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_but_failed_first = 3\n\n    # total who passed the second exam\n    passed_second_exam = total_students - failed_second_exam\n\n    # calculate the only passed the first exam using inclusion-exclusion principle\n    only_passed_first_exam = (\n        passed_first_exam - (total_students - passed_second_exam - passed_second_but_failed_first)\n    )\n\n    return only_passed_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    routes_A_B_C_D = 7 * 5 * 2\n    routes_A_C_D = 4 * 2\n    routes_A_D = 6\n    ans = routes_A_B_C_D + routes_A_C_D + routes_A_D\n    return ans\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the younger and elder brother\n    younger, elder = symbols('younger elder')\n    \n    # The sum of the current ages of the two brothers is 42\n    equation1 = Eq(younger + elder, 42)\n    \n    # A few years ago, the age of the elder brother is the current age of the younger brother\n    # Let 'diff' be the difference in age between the current age of the elder and younger brother\n    diff = elder - younger\n    \n    # A few years ago, the younger brother was exactly half the elder brother's current age\n    # Hence, 'younger - diff' (younger brother's age a few years ago) is half of 'elder'\n    equation2 = Eq(younger - diff, elder / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger, elder))\n    \n    return solutions[elder]\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price = symbols('pen_price')\n\n    # 2 pens + 3 pencils (£2 each) = £20 -> equation for the total cost\n    equation = Eq(2 * pen_price + 3 * 2, 20)\n\n    solutions = solve(equation, pen_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    hay_per_cattle_per_day = total_hay / (cattle * days)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "网络故障，请重试"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    equation1 = Eq((1/4)*boys, (2/5)*girls)\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, cheese = symbols('chocolate cheese')\n    \n    # Eric baked 255 cupcakes in total\n    equation1 = Eq(chocolate + cheese, 255)\n    \n    # 40% of the chocolate cupcakes and 75% of the cheese cupcakes were sold\n    equation2 = Eq(chocolate - 0.40 * chocolate, cheese - 0.75 * cheese)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chocolate, cheese))\n\n    # Calculate remaining cupcakes\n    remaining_chocolate = solutions[chocolate] * 0.60\n    remaining_cheese = solutions[cheese] * 0.25\n\n    ans = remaining_chocolate  # Equal to remaining_cheese as per equation2\n\n    return ans\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n    days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts - (locusts_per_day * days)\n    return remaining_locusts if remaining_locusts != 0 else locusts_per_day\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return 12*92 + 22*82 + 32*72\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    don_initial, ben_initial = symbols('don_initial ben_initial')\n\n    # Given conditions turned into equations\n    equation1 = Eq(don_initial / ben_initial, 2 / 3)\n    equation2 = Eq((don_initial + 10) / (ben_initial - 5), 6 / 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (don_initial, ben_initial))\n\n    # Return Don's initial number of stickers\n    return solutions[don_initial]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # Odd numbers: -3, -5, -7, ... -2015 (total 1007 terms)\n    # The sum of an arithmetic sequence: n / 2 * (first term + last term)\n    sum_odd = 1007 / 2 * (-3 - 2015)\n\n    # Even numbers: 2, 4, 6, ... 2016 (total 1008 terms)\n    sum_even = 1008 / 2 * (2 + 2016)\n\n    # The answer is the sum of even numbers subtract the sum of odd numbers\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    number_to_subtract = remainder if remainder == 0 else 25 - remainder\n    return number_to_subtract\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities of $5 and $10 notes\n    fives, tens = symbols('fives tens')\n\n    # total_notes is 116 which is sum of $5 and $10 notes\n    total_notes_eq = Eq(fives + tens, 116)\n\n    # He spent 60% of the $10 notes and 25% of the $5 notes on a bag\n    spent_tens = 0.6 * tens\n    spent_fives = 0.25 * fives\n\n    # After spending, he has 4/7 as many $10 notes as $5 notes left\n    left_tens = tens - spent_tens\n    left_fives = fives - spent_fives\n    ratio_eq = Eq(left_tens, 4/7 * left_fives)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, ratio_eq), (fives, tens))\n\n    # Calculate the cost of the bag\n    bag_cost = spent_tens * 10 + spent_fives * 5\n    bag_cost_value = bag_cost.subs(solutions)\n\n    return bag_cost_value\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n\n    while amy_toys != sally_toys:\n        amy_toys -= 1\n        sally_toys += 1\n\n    return 50 - amy_toys\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    a, b, c = 1, 1, 29  # We start with the smallest a and b and the remaining for c\n    max_product = a * b * c  # Initial maximum product\n\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    total_females = 50\n    blue_eyes_white_skin = 14\n    light_black_skin = 31\n    brown_eyes = 18\n    \n    # Using the inclusion-exclusion principle.\n    # Total females is the sum of females with blue eyes and white skin,\n    # females with light black skin, and females with brown eyes\n    # minus the ones counted twice, i.e., the ones we are looking for:\n    # females with brown eyes and light black skin.\n    \n    # let x be the number of females with brown eyes and light black skin\n    # total_females = blue_eyes_white_skin + light_black_skin + brown_eyes - x\n    # rearrange to solve for x\n    x = blue_eyes_white_skin + light_black_skin + brown_eyes - total_females\n    \n    return x\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = 24.50 + zach\n    jason = serena / 5\n    william = jason - 1.54\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Given sum of squares for numbers 1^2 through 20^2\n    sum_of_squares = 2870\n    # Calculate the sum of the products\n    sum_of_products = 0\n    for i in range(1, 40, 2):\n        sum_of_products += i * (i + 2)\n    # The pattern between squares and products should be noted:\n    # 1*3 = 1^2 + 2^2 - 1\n    # 3*5 = 2^2 + 3^2 - 1\n    # ...\n    # 39*41 = 19^2 + 20^2 - 1\n    # Hence the sum of products is simply the sum of squares minus 20\n    # because 1 is subtracted in each of the 20 products\n    sum_of_products = sum_of_squares - 20\n    return sum_of_products\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # The number of students in each class\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n    \n    # Calculate number of intervals between the trees\n    intervals = road_length // tree_distance\n    \n    # Number of trees is one more than the number of intervals\n    ans = intervals + 1\n    \n    return ans\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"21{i}{j}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_a_week = 7\n\n    min_students_in_most_populated_week = (total_students // days_in_a_week) + 1\n\n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since there are 7 days in a week, and the vacation lasts for 55 days,\n    # every week has exactly 1 Friday. So in 55 days, there are 55 // 7 full weeks.\n    full_weeks = 55 // 7\n    \n    # Each of these full weeks includes a Friday.\n    fridays_in_full_weeks = full_weeks\n    \n    # If the first day of the vacation were a Friday,\n    # there would be a Friday on the last (partial) week as well.\n    if (55 % 7) >= 1:\n        additional_friday = 1\n    else:\n        additional_friday = 0\n        \n    # The total number of Fridays is the number of Fridays in full weeks plus\n    # one additional Friday if the partial week contains a Friday\n    total_fridays = fridays_in_full_weeks + additional_friday\n    \n    return total_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1 / 2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wearing_glasses = 20  # 20%\n    total_girls = 25\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial as fact\n\ndef solution():\n    # Total students excluding the triplets and twins \n    total_students_excluding_triplets_twins = 2\n    \n    # Number of ways to arrange these students\n    arrange_other_students = fact(total_students_excluding_triplets_twins)\n    \n    # Treat triplet sisters as one unit\n    units = total_students_excluding_triplets_twins + 1  # triplet unit\n    \n    # Ways to arrange the 2 units (other student and triplet unit) and the 2 twins\n    ways_to_arrange_units_and_twins = fact(units + 2)\n    \n    # Now, subtract the arrangements where twins are together,\n    # as if they were one unit (total units become 3 including other student and triplet sisters)\n    ways_to_arrange_units = fact(units + 1)\n    \n    # For every arrangement of units, there are 2! ways the twins can be arranged,\n    # and 3! ways the triplet sisters can be arranged within their unit\n    arrangements_when_twins_together = ways_to_arrange_units * fact(2) * fact(3)\n    \n    # Subtract the cases where twins are together from all possible arrangements\n    # and multiply by the inner arrangements of triplets\n    ans = (ways_to_arrange_units_and_twins - arrangements_when_twins_together) * fact(3)\n    \n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2*3*4*5*6*8*9//2//3//4//2//3 # Calculate the least common multiple\n    N = lcm\n    while N % 7 != 5:\n        N += lcm\n    return N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Cost of 1 pencil\n    pencil_cost = 2\n    # Cost of 1 pen\n    pen_cost = 4\n    \n    # The number of pencils Owen should give to Oscar is the ratio of the cost of a pen to the cost of a pencil\n    pencils_for_pen = pen_cost // pencil_cost\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    fraction_away = 1 / 5\n\n    pupils_away = total_pupils * fraction_away\n    pupils_go_to_cathedral = total_pupils - pupils_away\n\n    return int(pupils_go_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # time for one child to sing one song\n    number_of_songs = 2\n    class_size = 50  # number of children in the class\n\n    total_time = time_per_song * number_of_songs * class_size\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_per_apple = weight_of_three_apples / 3\n    weight_of_five_apples = 5 * weight_per_apple\n    weight_of_basket = total_weight_with_apples - weight_of_five_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max('25%', '0.3')\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    bella_years = 5\n\n    amount_after_bella_years = initial_amount * ((1 + interest_rate) ** bella_years)\n\n    if amount_after_bella_years == final_amount:\n        return \"Right\"\n    else:\n        years = 0\n        current_amount = initial_amount\n        while current_amount < final_amount:\n            current_amount += current_amount * interest_rate\n            years += 1\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # By Vieta's formulas for the first equation:\n    # a + b = 10c and ab = -11d\n    # For the second equation:\n    # c + d = 10a and cd = -11b\n\n    # From the equations above, we can express b and c in terms of a and d:\n    b = 10c - a\n    c = (10a - d) / 2\n    ab = -11d\n    cd = -11b\n\n    # Substitute b and c in terms of a and d into ab and cd:\n    # a(10c - a) = -11d\n    # (10a - d)(c) / 2 = -11(10c - a)\n\n    # Simplify the above equations to find a relationship between a and d:\n    # 10ac - a^2 = -11d\n    # 5ac - d/2 = -11(10c - a)\n\n    # Since c = (10a - d) / 2, substitute c into the above equations:\n    # a(5a - d/2) = -11d\n    # (10a - d)(5a - d/2) / 2 = -11(10(5a - d/2) - a)\n\n    # Now solve these simplified equations:\n    a, d = symbols('a d')\n    equation1 = Eq(a * (5 * a - d / 2), -11 * d)\n    equation2 = Eq((10 * a - d) * (5 * a - d / 2) / 2, -11 * (10 * (5 * a - d / 2) - a))\n\n    # Use solve to find the values of a and d:\n    solution = solve((equation1, equation2), (a, d))\n    \n    # Using one of the possible solutions for a and d, b and c can be calculated:\n    a_val, d_val = solution[0]\n    c_val = (10 * a_val - d_val) / 2\n    b_val = 10 * c_val - a_val\n    \n    # Now calculate a + b + c + d:\n    sum_abcd = a_val + b_val + c_val + d_val\n    return sum_abcd\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm_3_7 = 3 * 7  # Least Common Multiple of 3 and 7\n    multiple = lcm_3_7\n    while True:\n        if multiple % 10 == 2:  # The last digit should be 2\n            return multiple\n        multiple += lcm_3_7\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for cookies and cakes\n    cookies, cakes = symbols('cookies cakes')\n\n    # Three times as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    # After selling, 48 cookies and cakes left\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # Calculate the number of cookies left after selling\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    return days_in_a_week * num_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value_first_3 = 3 * 10**3\n    place_value_second_3 = 3 * 10**1\n    difference = place_value_first_3 - place_value_second_3\n\n    return difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    def can_make_total(total, z):\n        for i in range(total // (4 * z) + 1):\n            for j in range(total // (5 * z) + 1):\n                if 4 * z * i + 5 * z * j == total:\n                    return True\n        return False\n        \n    z = 1\n    # Start with largest known impossible count, later known as the Frobenius number\n    largest_impossible = (4 * z) * (5 * z) - (4 * z) - (5 * z)\n    \n    while can_make_total(largest_impossible, z):\n        largest_impossible -= z\n        \n    return largest_impossible\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Claire and Daniel's combined age five years ago\n    combined_age_five_years_ago = 14\n\n    # Since five years have passed, we add 5 years for each, i.e., 10 years in total\n    combined_age_now = combined_age_five_years_ago + 10\n\n    # In 3 years, we will add 3 years for each, i.e., 6 years in total\n    combined_age_in_3_years = combined_age_now + 6\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for b in range(10):\n        for a in range(10):\n            if (108200 + 10*a + b) % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    ans = 4 * solutions[apple] + 4 * solutions[pear]\n    return ans\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time John takes to build the wall alone\n    # Let y be the time Jonah takes to build the wall alone\n    # Let z be the time Angus takes to build the wall alone\n    \n    x, y, z = symbols('x y z')\n    \n    # Equation representing John, Jonah and Angus working together\n    equation1 = Eq((1/x + 1/y + 1/z), 1/27)\n    \n    # Equation representing Jonah and Angus working together (without John)\n    equation2 = Eq((1/y + 1/z), 1/36)\n    \n    # Since we need to find only the time John would take, we can express Jonah and Angus's work rate in terms of y\n    # Then we can solve for x using one variable (y)\n    # We can express z in terms of y from equation2: z = 36 - 36/y\n    \n    z = 36*y/(y - 36)\n    \n    # Re-write equation1 in terms of y\n    equation1 = Eq((1/x + 1/y + 1/z).subs(z, 36*y/(y - 36)), 1/27)\n    \n    # Now we have an equation in terms of x and y only, we can solve for x\n    solution_for_x = solve(equation1, x)\n    \n    return solution_for_x[x]\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    longest_length = gcd(45, 30)\n\n    return longest_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    \n    boxes_bought = total_pencils // pencils_per_box\n    \n    return boxes_bought\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    adult_day = 30\n    total_days = 40\n\n    if total_days < adult_day:\n        return 0\n\n    new_adult_fleas = eggs_per_day * (total_days - adult_day)\n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    from math import gcd\n\n    # The sum of the 10 positive integers is 1001, which is also a multiple of their gcd d.\n    # To maximize d, we want to minimize the number of integers that sum up to 1001.\n    # As we need exactly 10 numbers, d must be a divisor of 1001.\n    # Start with the largest divisor of 1001 and go downwards to find the largest d that can be the gcd of 10 numbers.\n    \n    max_possible_value = 1  # Initializing d\n\n    for d in range(1001, 0, -1):  \n        if 1001 % d == 0:\n            # Check if d divides 1001. If yes, it's a valid gcd.\n            # Check if 1001 can be represented as a sum of 10 positive integers with d as their gcd.\n            # This means we need to find if there are 10 multiples of d that sum up to 1001.\n            # This is always possible if d divides 1001, as the numbers can be d, d, ...., d (10 times).\n            return d\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    # Apply the Inclusion-Exclusion Principle\n    total = french + japanese + italian - french_japanese - french_italian - japanese_italian + all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink_volume = 12\n    water_fraction = 3/4\n    water_volume = total_drink_volume * water_fraction\n    return water_volume\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    last_term = first_term + (num_rows - 1) * difference\n    total_students = (first_term + last_term) * num_rows // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + (3 * story_books)\n    total_books = story_books + magazines\n\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number1 = 21 + Fraction(21, 286)\n    mixed_number2 = 6 + Fraction(647, 2530)\n    mixed_number3 = 1 + Fraction(1370, 2829)\n\n    result = mixed_number1 / mixed_number2 * mixed_number3\n\n    return result\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 1600 * 0.30\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # Sam's total money in pounds\n    pencil_price = 0.38  # pencil price in pounds\n    ruler_price = 0.59   # ruler price in pounds\n\n    money_left = total_money - (pencil_price + ruler_price)\n\n    return money_left\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # There are 20 keys and 20 locks\n    # In the worst case, he tries all keys for the first lock (20 tries)\n    # For the second lock, he has 19 keys left and so one less option to try (19 tries)\n    # This continues until for the last lock, he only has one key left (1 try)\n    # The sum of the tries will be the sum of numbers from 1 to 20\n    return sum(range(1, 21))\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks become:\n    # Stack A: 20 stones, Stack B: 16 stones\n    \n    # Jerry wants to ensure that after his move, the number of stones in\n    # both stacks are the same, because this position guarantees a win.\n    # In every subsequent turn, Jerry can just mimic Tom's move on the other\n    # stack to ensure that they're always even until Tom is forced to take\n    # the last stone.\n    \n    # To make the stacks even, Jerry must take 4 stones from Stack A.\n    # That will make both stacks have 16 stones.\n    \n    # Answer representation:\n    stones_taken = 4\n    stack_chosen = 'A'\n    return stones_taken, stack_chosen\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet of a newspaper contain 4 pages, the third sheet will have the page numbers: \n    # 5, 6 | 7, 8 (5,6: front side and 7,8: back side).\n    # Adding all page numbers together:\n    page_sum = 5 + 6 + 7 + 8\n    return page_sum\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the amount of work Star does per hour,\n    # and n be the amount of work Nini does per hour.\n    s, n = symbols('s n')\n\n    # Star types for 5 hours and Nini for 20 to finish the job\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # Star types for 20 hours and Nini for 8 to finish the job\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # The total work equals 1 (the whole job),\n    # So to find the time it takes Nini to finish the job by herself, we use 1/n\n    time_for_nini = 1/solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "from sympy.ntheory import factorint\n\ndef solution():\n    # Since the number of pieces in each pile must be odd,\n    # the number of piles must also be odd to get an odd number of pieces.\n    # We will not consider the case of 1 pile since it's trivial (only 1 way).\n    # Number of pieces = product of powers of its prime factors\n    # We need to consider the powers of all prime factors except 2,\n    # as including 2 will result in even number of pieces per pile.\n    num_candy = 140  # Total number of candies\n    prime_factors = factorint(num_candy)\n    \n    # Removing the factor of 2 (if present) since we want only odd number piles\n    prime_factors.pop(2, None)\n    \n    ways = 1\n    for prime, power in prime_factors.items():\n        # The number of divisors of a number a^m * b^n * c^p ... is (m+1)*(n+1)*(p+1)...\n        # Since we want the count of odd divisors only, we exclude 2.\n        # And we can distribute candies in (power + 1) ways for each prime factor.\n        ways *= (power + 1)\n    \n    # Subtract 1 because we don't consider distributing all candies into one pile\n    return ways - 1\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "from sympy import symbols, solve\n\ndef solution():\n    days_in_month = 30\n\n    # Let x be the number of sets produced by A per day and y be the number of sets produced by B per day\n    x, y = symbols('x y')\n\n    # Equations based on Factory A and Factory B production\n    eq1 = 16 * x + 14 * x - 462\n    eq2 = 12 * y + 18 * y - 648\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    daily_production_a = solutions[x]\n    daily_production_b = solutions[y]\n\n    # Since they merge, we need to find the maximum production, which will be when they produce only shirts or only pants\n    max_production_shirts = daily_production_a * days_in_month\n    max_production_pants = daily_production_b * days_in_month\n\n    # The maximum of the two will be the overall maximum\n    max_production = max(max_production_shirts, max_production_pants)\n    return max_production\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    total_pages = 0\n    page_number = 1\n    \n    while digits > 0:\n        page_number_length = len(str(page_number))\n        if digits >= page_number_length:\n            digits -= page_number_length\n            total_pages += 1\n        page_number += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    halfway_point = (120 + 300) / 2\n    return halfway_point\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100  # The pattern shows all terms after 100 cancel out, so the answer is just 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of pens of each color in Box A\n    blue_in_a = red_in_a = black_in_a = green_in_a = 10\n    # Number of pens to be taken from Box A and placed into Box B\n    pens_moved_to_b = 20\n    # Pens in Box A after moving 20 pens to Box B\n    blue_in_a -= pens_moved_to_b // 4\n    red_in_a -= pens_moved_to_b // 4\n    black_in_a -= pens_moved_to_b // 4\n    green_in_a -= pens_moved_to_b // 4\n\n    # Calculate number of pens that need to be returned to Box A\n    pens_returned_to_a = max(15 - blue_in_a, 0) \\\n                         + max(15 - red_in_a, 0) \\\n                         + max(15 - black_in_a, 0) \\\n                         + max(15 - green_in_a, 0)\n\n    return pens_returned_to_a\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    # There are 9 one-digit numbers (1-9)\n    one_digit = 9\n    \n    # There are 82 two-digit numbers (10-91)\n    two_digits = 82\n    \n    # Total digits: 9*1(one-digit numbers) + 82*2(two-digit numbers)\n    total_digits = one_digit * 1 + two_digits * 2\n    \n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"21:15\", \"%H:%M\")\n    end_time = datetime.strptime(\"23:06\", \"%H:%M\")\n    duration = end_time - start_time\n    ans = int(duration.total_seconds() / 60)\n    return ans\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        ""
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    decimal_result = 1 / 8\n    return decimal_result\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n\n    # Maximum number of plain chocolates without soft-centres is 8.\n    # Since there are 16 chocolates with soft-centres in total, \n    # we subtract the maximum number without soft-centres to ensure \n    # the rest plain chocolates must have soft-centres.\n    plain_with_soft_centres_min = soft_centres - (total_chocolates - plain_chocolates)\n    \n    return plain_with_soft_centres_min\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # Let divisor be x\n    # Then dividend (divisor * quotient + remainder) will be x*29 + 11\n    # According to the problem statement, the sum of the dividend and divisor is 431:\n    # divisor + (divisor*29 + 11) = 431\n    # 30*divisor + 11 = 431\n    divisor = (sum_dividend_divisor - 11) / 30\n    dividend = divisor * quotient + remainder\n\n    # The difference between the two numbers (dividend and divisor) is:\n    difference = dividend - divisor\n    return int(difference)\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_playing_violin = 12.5\n    number_playing_violin = 11\n\n    total_pupils = 100 * number_playing_violin / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    cost_per_bar = 50\n    C = cost_per_bar * n\n    return C\n\nans = solution(n)  # Replace 'n' with any given number of chocolate bars"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5 / 12\n    blue_cars_percentage = 20 / 100\n\n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    # Let the common ratio be x\n    A = 4 * x\n    B = 5 * x\n    C = 6 * x\n    \n    # C is greater than A by 10\n    # Therefore, 6*x = 4*x + 10 -> 2*x = 10 -> x = 5\n    x = 5\n    \n    # Now calculate A, B, and C\n    A = 4 * x\n    B = 5 * x\n    C = 6 * x\n    \n    # The sum of A, B, and C\n    sum_abc = A + B + C\n    \n    return sum_abc\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C, D as one single unit as they always have to be together.\n    # There are 12 - 4 + 1 = 9 'units' to be arranged.\n    units = factorial(9)\n\n    # The students A, B, C, D can be permuted among themselves in 4! ways.\n    permutations_within_unit = factorial(4)\n    \n    # Total arrangements = arrangements of 9 units * permutations within the unit.\n    total_arrangements = units * permutations_within_unit\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_games = 6 * 5 // 2\n    total_possible_points = total_games * 2\n    points_accounted_for = 7 + 6 + 5 + 4 + 3\n    remaining_points = total_possible_points - points_accounted_for\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B = symbols('A B')\n    # Initial ratio of weights\n    equation1 = Eq(A/B, 5/3)\n    # After transferring 10g from A to B\n    equation2 = Eq((A - 10)/(B + 10), 7/5)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    # Sum of both weights\n    total_weight = solutions[A] + solutions[B]\n    return total_weight\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each coin type\n    num_1p, num_2p, num_5p, num_10p = symbols('num_1p num_2p num_5p num_10p')\n\n    # Since the number of coins are equal:\n    equation1 = Eq(num_1p, num_2p)\n    equation2 = Eq(num_1p, num_5p)\n    equation3 = Eq(num_1p, num_10p)\n\n    # Equation for the total sum in pence\n    equation4 = Eq(1*num_1p + 2*num_2p + 5*num_5p + 10*num_10p, 90)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (num_1p, num_2p, num_5p, num_10p))\n\n    # Calculate total number of coins\n    total_coins = sum(solutions.values())\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let a represent the number of apples and p represent the number of pears\n    a, p = symbols('a p')\n    # At first, there were a total of 105 apples and pears\n    equation1 = Eq(a + p, 105)\n    # 1/3 of the apples were sold, resulting in 2/3 a left\n    # 2/5 of the pears were sold, resulting in 3/5 p left\n    # There were 5/6 as many apples as pears left\n    equation2 = Eq((2/3)*a, (5/6)*(3/5)*p)\n\n    # Solving the equations for a and p\n    solutions = solve((equation1, equation2), (a, p))\n\n    # Total number of apples and pears sold equals the number at first minus the number left\n    apples_sold = (1/3) * solutions[a]\n    pears_sold = (2/5) * solutions[p]\n    total_sold = apples_sold + pears_sold\n\n    return total_sold\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = girls_per_boy * number_of_boys\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Sum of an arithmetic sequence: n/2 * (a1 + an), where n is the number of terms\n    # a1 is the first term, and an is the last term\n    \n    # Using the sum of arithmetic sequence formula: total_players = n/2 * (first_line_players + last_line_players)\n    # Rearrange the formula to find the number of terms n: n = 2 * total_players / (first_line_players + last_line_players)\n    n = 2 * total_players / (first_line_players + last_line_players)\n    \n    # Using n, we can find the common difference d of the arithmetic sequence\n    # The nth term (last term) of an arithmetic sequence can also be represented as: an = a1 + (n - 1)d\n    # Rearrange the formula to find d: d = (an - a1) / (n - 1)\n    difference = (last_line_players - first_line_players) / (n - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 5), (2, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    factors = [48, 925, 38, 435]\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    product_str = str(product)\n    ans = len(product_str) - len(product_str.rstrip('0'))\n    \n    return ans\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    largest_mass = max(masses_in_grams)\n    return largest_mass\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    fraction_boys = 1 - fraction_girls\n    \n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of stickers and y be the number of pupils\n    x, y = symbols('x y')\n    \n    # Equation (1): if Mr Ya gives 13 stickers to each pupil, he has 190 stickers left\n    equation1 = Eq(x - 13*y, 190)\n    \n    # Equation (2): if Mr Ya gives 17 stickers to each pupil, he has 50 stickers left\n    equation2 = Eq(x - 17*y, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the total number of stickers\n    return solutions[x]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    min_diff = float('inf')  # Start with an infinitely large difference\n\n    # Generate all permutations of the digits 1 to 9\n    from itertools import permutations\n    digits = list(range(1, 10))\n    for num1 in permutations(digits):\n        for num2 in permutations(digits):\n            # Convert tuples of digits to integers\n            n1 = int(''.join(map(str, num1)))\n            n2 = int(''.join(map(str, num2)))\n            # Ensure the numbers are different\n            if n1 != n2:\n                # Calculate the absolute difference between the two numbers\n                diff = abs(n1 - n2)\n                # Update min_diff if a new smaller difference is found\n                if diff < min_diff:\n                    min_diff = diff\n                    # As we are looking for the smallest possible difference,\n                    # this difference will be achieved when the numbers are\n                    # consecutive permutations\n                    break\n        # The inner loop is broken after finding the first difference,\n        # which is the smallest for this specific permutation, so we move\n        # to the next permutation\n        if min_diff == 1:\n            break  # Already found the smallest possible difference\n\n    return min_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    # Let the number of girls be g and boys be b.\n    # We are given that there are 65 fewer boys than girls: b = g - 65\n    # After recess, 2/5 of the boys and 3/7 of the girls left.\n    # The number of boys left: b * (1 - 2/5) = 3/5 * b\n    # The number of girls left: g * (1 - 3/7) = 4/7 * g\n    # It is stated that the number of boys and girls left are equal,\n    # hence we can set them equal to each other: 3/5 * b = 4/7 * g\n    \n    # From the initial condition b = g - 65, we can solve these two\n    # equations simultaneously for b and g:\n    # 3/5 * (g - 65) = 4/7 * g\n\n    # Cross multiply to solve for g:\n    # 3 * 7 * (g - 65) = 4 * 5 * g\n    # 21 * (g - 65) = 20 * g\n    # 21g - 1365 = 20g\n    # g = 1365\n\n    g = 1365\n    b = g - 65\n\n    # Now we calculate the number of students left in the hall:\n    boys_left = 3/5 * b\n    girls_left = 4/7 * g\n\n    # Total number of students left in the hall:\n    total_left = boys_left + girls_left\n\n    return int(total_left)\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    return (70 * 4) - (80 * 3) + (60 * 5)\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_after_third = 25\n    moved_third = 68\n    remaining_after_second = remaining_after_third + moved_third\n    moved_second = (remaining_after_second // 2) + 11\n    remaining_after_first = (remaining_after_second - moved_second) * 2\n    moved_first = (remaining_after_first // 2) - 26\n    total_bricks = remaining_after_first + moved_first + moved_second + moved_third + remaining_after_third\n    return total_bricks\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import *\n\n    # Let A be the event that the dog barks, and B be the event that a theft occurs\n    \n    # Given the probability of the dog barking when a theft occurs, P(A|B) = 0.9\n    P_A_given_B = 0.9\n\n    # The number of times the dog barks in 1000 days\n    # Given that the dog barks 3 times every week\n    weeks_in_1000_days = 1000 / 7\n    total_barks = weeks_in_1000_days * 3\n\n    # The probability of a theft occurring on any given day, since there were 2 thefts in 1000 days\n    P_B = 2 / 1000\n\n    # The probability of the dog barking on any given day\n    # Since the dog barks 3 times each week (considering a week to be 7 days), regardless of theft\n    P_A = total_barks / 1000\n\n    # According to Bayes' Theorem\n    # P(B|A) = (P(A|B) * P(B)) / P(A)\n    P_B_given_A = (P_A_given_B * P_B) / P_A\n\n    return P_B_given_A.evalf()\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    ans = factorial(num_kids)\n\n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    students = 2\n    while True:\n        sqrt = int(students**0.5)\n        if students == sqrt * sqrt and students > sqrt + 1:\n            return students\n        else:\n            students += 1\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - (1/3))\n    initial_passengers = remaining_after_first_stop / (1 - (2/5))\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    pages = 20\n    digits = 0\n    for i in range(1, pages + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')\n\n    total_students = 1690\n    more_boys = 90\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_swim_less = 120\n\n    # Equation for total number of students\n    equation1 = Eq(g + b, total_students)\n    # Equation for 90 more boys than girls\n    equation2 = Eq(b - g, more_boys)\n    # Equations for boys and girls that can swim or not\n    girls_can_swim = g * girls_swim_ratio / (girls_swim_ratio + girls_not_swim_ratio)\n    girls_cannot_swim = g * girls_not_swim_ratio / (girls_swim_ratio + girls_not_swim_ratio)\n    boys_can_swim = (b - boys_swim_less) / 2\n    boys_cannot_swim = b - boys_can_swim\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of pupils who cannot swim\n    g_value = solutions[g]\n    b_value = solutions[b]\n    total_cannot_swim = girls_cannot_swim.subs(g, g_value) + boys_cannot_swim.subs(b, b_value)\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Define a dictionary to memoize the number of ways to reach each step\n    memo = {0: 1, 1: 0}  # 1 way to stay on the ground (step 0), no way to reach step 1 directly\n\n    # Function to find the number of ways to reach the nth step\n    def num_ways(n):\n        if n in memo:\n            return memo[n]\n        ways = 0\n        if n-2 >= 0:\n            ways += num_ways(n-2)\n        if n-3 >= 0:\n            ways += num_ways(n-3)\n        memo[n] = ways\n        return ways\n\n    # Calculate the number of ways to reach the 10th step\n    ans = num_ways(10)\n    return ans\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        shifted = original[-1] + original[1:3] + original[0]\n        if int(shifted) - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Assuming Geoff's age = G, sister's age = S\n    # G + S = 22 (current sum of ages)\n    # After N years, their ages will sum up to 40\n    # (G + N) + (S + N) = 40\n    # Simplifying, we get 2N + G + S = 40\n    # We already have G + S = 22, substituting we get 2N + 22 = 40\n    # Thus, 2N = 18 and N = 9\n    N = (40 - 22) // 2\n    return N\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = \"1998\"\n    n = len(num)\n    \n    while int(num) % 33 != 0:\n        num += \"1998\"\n        n += len(\"1998\")\n        \n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_number = group_number\n    second_number = group_number ** 2\n    third_number = group_number ** 3\n\n    sum_of_numbers = first_number + second_number + third_number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    miles_per_round = 1/4\n    number_of_rounds = total_miles / miles_per_round\n    return number_of_rounds\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Proportion equation: 10/x = 14/21\n    # Solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_fish = 78\n    books_birds = books_fish - 12\n    total_books = books_fish + books_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for x in range(10, 100):\n        if x % 6 == 0 and x % 9 == 0 and str(x).endswith('0'):\n            return x\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # since \"7 tens\" means 7 * 10\n    correct_answer = original_number + tens_to_add\n    johnnys_answer = 5839\n\n    return correct_answer if johnnys_answer != correct_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # The maximum number of different positive integers that can add up to 27\n    # is if we use a sequence of consecutive integers starting from 1.\n    # Let's find the longest such sequence.\n\n    s = 0\n    n = 0\n    while s < 27:\n        n += 1\n        s += n\n\n    # Since the sum is strictly greater than 27, we need to check if by removing\n    # the largest number the sum becomes 27 or we have overshot by just 1, in which case\n    # we can remove 1 from the sequence and shift all other numbers by 1.\n    if s == 27 + n or s == 27 + 1:\n        return n\n    else:\n        return n - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # converting 3m to cm\n    lengths_cm = [147, 32.5, 67]  # given lengths in cm\n    fourth_length_cm = total_length_cm - sum(lengths_cm)\n\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    total_stamps = 256\n\n    # shaun has twice as many stamps as kim\n    equation1 = Eq(shaun, 2 * kim)\n    # andrew has 24 less stamps than shaun\n    equation2 = Eq(andrew, shaun - 24)\n    # sum of their stamps equal to 256\n    equation3 = Eq(andrew + kim + shaun, total_stamps)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = pieces_of_paper // interval\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    sum1 = 101 + 234 + 567\n    sum2 = 234 + 567 + 89\n    sum3 = 101 + 234 + 567 + 89\n    sum4 = 234 + 567\n\n    ans = (sum1 * sum2) - (sum3 * sum4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with the first term in the sum (1)\n    for i in range(1, 11):  # Loop from 1 through 10\n        ans += (i-1)/i * 2  # Each fraction of the form (i-1)/i appears twice\n    return ans\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam takes 30 minutes to cover 5 intervals (from 1st to 6th house)\n    time_for_five_intervals = 30\n    \n    # For 10 houses, there are 9 intervals in total\n    total_intervals = 9\n    \n    # The time to cover each interval is the same\n    time_per_interval = time_for_five_intervals / 5\n    \n    # Total time to cover all intervals for 10 houses\n    total_time = time_per_interval * total_intervals\n\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    max_count = 0\n    max_prob = 0\n\n    # Calculate the probability for each possible number of people passing\n    for i in range(4):\n        prob = binom.pmf(i, 3, sum(probabilities)/3)\n        if prob > max_prob:\n            max_prob = prob\n            max_count = i\n    \n    return max_count\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length in meters\n    total_length_cm = total_length_m * 100  # total length in centimeters\n\n    # Let the length of the shorter piece be x cm\n    # Then the length of the longer piece is 2x cm\n    # The sum of both pieces is the total length: x + 2x = total_length_cm\n    # 3x = total_length_cm => x = total_length_cm / 3\n\n    shorter_piece_length_cm = total_length_cm / 3\n    longer_piece_length_cm = 2 * shorter_piece_length_cm  # longer piece is twice the shorter\n\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total_coins = 2015\n    # Since the sum of the numbers (1 to 11) is 66, Jack needs to make sure\n    # that Ken is always left with a multiple of 66 + 1 coins after Jack's turn.\n    # Thus, Jack can win by making sure the pile is 66n + 1 after his first move.\n    # We have to find the largest multiple of 66 that is smaller than 2015 and then\n    # subtract that from 2015, so Jack will pick up the rest to make the pile 66n + 1.\n    max_multiple_66 = (total_coins - 1) // 66 * 66\n    jack_first_pick = total_coins - max_multiple_66\n    return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, b = 0.\n    # We know a point (4,8) that lies on the line y = mx + b.\n    # Thus we can insert x = 4 and y = 8 into the equation, and solve for m.\n    \n    x = 4\n    y = 8\n    b = 0\n\n    # y = mx + b with known y, x, and b, solve for m\n    m = y / x\n\n    # return the string representation of the linear equation\n    return f'y={m}x+{b}'\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white_in_pattern = 2\n    pattern_length = 3\n    total_white_balls = 92\n\n    # Calculating number of complete patterns\n    complete_patterns = total_white_balls // white_in_pattern\n\n    # Total balls = Total patterns * length of one pattern\n    total_balls = complete_patterns * pattern_length\n\n    # Check for remaining white balls\n    remaining_white_balls = total_white_balls % white_in_pattern\n    if remaining_white_balls > 0:\n        # Add the remaining balls to the total\n        total_balls += remaining_white_balls + (remaining_white_balls - 1)\n\n    return total_balls\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0\n        for D in range(1, 10):  # D cannot be 0 and must satisfy A = D/4\n            if A == D/4:\n                for B in range(1, 10): # B cannot be 0 and must satisfy B = A - 1\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            ABCD = int(str(A) + str(B) + str(C) + str(D))\n                            DCBA = int(str(D) + str(C) + str(B) + str(A))\n                            # Check if the conditions are met\n                            if ABCD * 4 == DCBA and len(set([A, B, C, D])) == 4:\n                                return ABCD\n    return None\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    def pattern_function(num):\n        return sum_of_digits(num) % 2 + sum_of_digits(num) // 2\n\n    ans = pattern_function(2015)\n\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the age of the youngest dwarf be x, then the ages are an arithmetic sequence:\n    # x, (x + 1), (x + 2), ..., (x + 6)\n    # Since the youngest three add up to 42:\n    # x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (The age of the youngest dwarf)\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 3, 42)\n    youngest_age = solve(equation, x)[0]\n    \n    # The age of the oldest is (youngest_age + 6)\n    oldest_age = youngest_age + 6\n    \n    return oldest_age\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    # Let the initial number of watches be 8x and caps be 11x\n    # After selling 88 caps, the new number of caps is 11x - 88\n    # The new ratio is therefore 8x / (11x - 88) and it should be equal to 12/11\n    # Setting up the equation: 8x / (11x - 88) = 12/11\n    # Cross multiply to solve for x\n    # 11 * 8x = 12 * (11x - 88)\n    \n    # Simplify the equation to solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(11 * 8 * x, 12 * (11 * x - 88))\n    solution_x = solve(equation, x)\n\n    # Now we can find the number of watches, which is 8x\n    watches = 8 * solution_x[0]\n\n    return watches\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    highest_common_factor = gcd(num1, num2)\n    return highest_common_factor\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "from sympy import symbols, solve\n\ndef solution():\n    pears = symbols('pears')\n    equation1 = pears % 6 == 2\n    equation2 = (pears + 3) % 7 == 0\n\n    ans = solve((equation1, equation2), (pears))\n\n    return min(ans)\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # define the distances for different stages\n    distance_first_part = 420\n    distance_middle_part = 620\n    distance_final_part = 1200 - distance_first_part - distance_middle_part\n\n    # define the speeds for different stages\n    speed_first_part = 7\n    speed_middle_part = 5\n    speed_final_part = 8\n\n    # calculate the time for different stages using time = distance/speed\n    time_first_part = distance_first_part / speed_first_part\n    time_middle_part = distance_middle_part / speed_middle_part\n    time_final_part = distance_final_part / speed_final_part\n\n    # calculate the total time\n    total_time = time_first_part + time_middle_part + time_final_part\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    desired_average = 95\n\n    additional_tests = 0\n    while True:\n        new_total_tests = 4 + additional_tests\n        new_total_score_needed = new_total_tests * desired_average\n        score_needed_for_additional_tests = new_total_score_needed - current_total_score\n        if score_needed_for_additional_tests <= additional_tests * 100:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x = number of $10 notes, y = number of $2 notes\n    x, y = symbols('x y')\n    \n    # Total number of notes is 72\n    eq1 = Eq(x + y, 72)\n    \n    # After spending 90% of $10 notes & 75% of $2 notes, David was left with twice as many $10 notes as $2 notes\n    eq2 = Eq(0.1 * x, 2 * 0.25 * y)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the total amount spent on the gift (90% of $10 notes and 75% of $2 notes)\n    amount_spent = 0.9 * solutions[x] * 10 + 0.75 * solutions[y] * 2\n    \n    return amount_spent\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # Let A be the rate at which Hose A fills the pool (pool/hour)\n    # Let B be the rate at which Hose B fills the pool (pool/hour)\n    # Let C be the rate at which Hose C fills the pool (pool/hour)\n   \n    # From the information given:\n    # A + B = 1/9 (Since Hoses A and B together fill the pool in 9 hours)\n    # A + C = 1/12 (Since Hoses A and C together fill the pool in 12 hours)\n    # B + C = 1/18 (Since Hoses B and C together fill the pool in 18 hours)\n   \n    # Adding all three equations, we get:\n    # 2A + 2B + 2C = 1/9 + 1/12 + 1/18\n    # Dividing by 2:\n    # A + B + C = (1/9 + 1/12 + 1/18) / 2 = (2/18 + 3/36 + 2/36) / 2\n    # A + B + C = (4/36 + 3/36 + 2/36) / 2\n    # A + B + C = 9/36 / 2\n    # A + B + C = 1/8 (rate at which all three hoses together fill the pool)\n   \n    # The reciprocal of the rate gives the time required to fill the pool.\n    # Time = 1 / Rate\n    time = 1 / (1/8)\n\n    return time\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # One marker can be taken from each color and they could all be different.\n    different_colors = 3\n    \n    # To be sure there are at least 2 of the same color, one more needs to be taken.\n    return different_colors + 1 \n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    speed_A = 80  # Speed of person A in meters per minute\n    speed_B = 60  # Speed of person B in meters per minute\n    pause_time = 7  # Pause time for person A in minutes\n    \n    # Let the total distance between A and B be x meters\n    # Let the time required to meet at point C without pausing be t minutes\n    # Hence, the distance covered by A = speed_A * t\n    # And the distance covered by B = speed_B * t\n    # The total distance x = speed_A * t + speed_B * t\n    \n    # When A pauses for 7 minutes, they meet at point D after t + 7 minutes\n    # Now, A covers less distance: (speed_A * (t - pause_time))\n    # B covers more distance: (speed_B * (t + pause_time))\n    # Total distance is still the same: x = speed_A * (t - pause_time) + speed_B * (t + pause_time)\n\n    # Since point D is the midpoint between C and D, we can write:\n    # Distance from A to D = Distance from B to C\n    # speed_A * t = speed_B * (t + pause_time)\n    \n    # We can solve this equation to find the meeting time t:\n    t = (speed_B * pause_time) / (speed_A - speed_B)\n    \n    # Now we can calculate the total distance x using the time t:\n    x = (speed_A * t) + (speed_B * t)\n    \n    return x\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total stickers Sam has be 7x and Peter has be 5x\n    # If they give 20% (which is 1/5) of their stickers to John\n    # Then Sam will have 7x - 1/5 * 7x left and Peter will have 5x - 1/5 * 5x left.\n    # Similarly, John will get 1/5 * 7x + 1/5 * 5x.\n    # John's stickers increase by 80%, meaning if he had y stickers, now he has y + 0.8 * y\n    # Sam has 20 stickers more than John in the end, so (7x - 1/5 * 7x) = y + 0.8 * y + 20\n    x, y = symbols('x y')\n\n    equation1 = Eq(7*x - (1/5) * 7*x, y + 0.8 * y + 20)\n    equation2 = Eq((1/5) * 7*x + (1/5) * 5*x, 1.8 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of stickers Peter had at first is 5x\n    peter_start_stickers = 5 * solutions[x]\n    \n    return peter_start_stickers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_value = 164\n    total_notes = 58\n\n    # Let the number of $5 notes be x. So the number of $2 notes will be (total_notes - x).\n    for x in range(total_notes + 1):\n        if (5 * x) + (2 * (total_notes - x)) == total_value:\n            return x\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    common_difference = 120 - 105  # The difference between consecutive terms\n    first_term = 105 - (6 * common_difference)  # since 105 is the 7th term\n\n    # Find the 100th term\n    nth_term = first_term + (99 * common_difference)  # since sequence starts from n=1, 100th term will be n=99\n\n    return nth_term\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    marbles = [2 * i for i in range(1, 9)]  # Smallest multiples of 2 for 8 boxes\n    marbles.append(2)  # The 9th box has the same as the 1st\n    marbles.append(18)  # The 10th box should be the next even number that's not included yet\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    min_pigeons_in_max_cage = (total_pigeons + total_cages - 1) // total_cages\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Number of sprinklers needed is one less than the number of parterres\n    # because a sprinkler covers two parterres each (one on each side),\n    # except for the two ends which each need a separate sprinkler.\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Convert mixed fraction of papaya to improper fraction\n    papaya_mass = (2 * 4 + 1) / 4  # 2 1/4 kg -> 9/4 kg\n\n    # Calculate mass of jackfruit, which is 3 times the papaya's mass\n    jackfruit_mass = 3 * papaya_mass\n\n    # Calculate the total mass of the papaya and the jackfruit\n    total_mass = papaya_mass + jackfruit_mass\n\n    # James's working is incorrect, let's find his error and the correct answer\n    # Error: Multiplying the fractional part (1/4) by 4 does not yield 4/4 but 1\n    # Correct total mass calculation:\n    return total_mass\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent_on_cupcakes = 187.50\n    \n    # Total money spent is for 5/9 of Cellina's money plus extra 1/6 of her money used to buy more cupcakes\n    total_money = total_spent_on_cupcakes / (5/9 + 1/6)\n    \n    # Money spent on the initial purchase for cupcakes and muffins\n    initial_purchase_money = total_money * (5/9)\n\n    # Let the price of one muffin be x, then the price of one cupcake is 3x\n    # 36 cupcakes and 32 muffins initially, so 36*3x + 32*x = initial purchase money\n    # 108x + 32x = initial_purchase_money\n    # 140x = initial_purchase_money\n    price_one_muffin = initial_purchase_money / (36*3 + 32)  # simplified from 140x\n    \n    # Initial money spent on the muffins only\n    money_spent_on_muffins = price_one_muffin * 32\n\n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    \n    return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total_length is the total length of the road\n    total_length = symbols('total_length')\n\n    # Construct the equations\n    equation = Eq(8 + (4 + total_length / 6), total_length * (5/12))\n\n    # Solve for the total length of the road\n    total_road_length = solve(equation, total_length)\n\n    return total_road_length[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    # Subtract the 4 corner wheats to get the wheat on the edges\n    wheat_on_edges = total_wheat - 4\n\n    # Divide by 2 to get the wheat on the length and width\n    wheat_on_length_width = wheat_on_edges // 2\n\n    # Calculate the number of wheat along one length and one width (subtract 1 for each corner)\n    wheat_on_length = (length // (wheat_on_length_width + 1)) -1\n    wheat_on_width = (width // (wheat_on_length_width + 1)) -1\n\n    # Calculate the distance between each wheat\n    distance_between_wheat_length = length / (wheat_on_length + 1)\n    distance_between_wheat_width = width / (wheat_on_width + 1)\n\n    # Since the field is rectangular and wheat is planted evenly, the distance should be the same on length and width\n    distance_between_wheat = distance_between_wheat_length\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    i = 1\n    while True:\n        number = i * 35\n        if str(number).endswith('35') and sum(map(int, str(number))) == 35:\n            return number\n        i += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    for rainy_days in range(total_days+1):\n        sunny_days = total_days - rainy_days\n        if sunny_days * sunny_nuts + rainy_days * rainy_nuts == total_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for Mary's, Alexis's, and Charlotte's sticker counts.\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Equation representing Mary had 7/5 times Alexis's stickers\n    equation1 = Eq(mary, (7/5) * alexis)\n\n    # Equation representing each girl gives 20% of their stickers to Charlotte\n    equation2 = Eq(charlotte + (0.2 * mary) + (0.2 * alexis), charlotte * 1.8)\n\n    # Equation representing Mary had 20 stickers more than Charlotte in the end\n    equation3 = Eq(mary - (0.2 * mary), charlotte + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    # Return the count of Alexis's stickers at the start\n    return solutions[alexis]\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # For four players, we need a minimum of two rounds to determine a winner.\n    # The first round will reduce the number of players from 4 to 2, and\n    # the second round will determine the winner.\n    return 2\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Justin had 5/9 of his collection left after giving away 440 bottle caps\n    # Let x be the total number of bottle caps originally in his collection\n    # So, 5/9 of x equals to the remaining bottle caps, which is (x - 440)\n    # We can set up the equation: 5/9 * x = x - 440\n    # Solving for x gives us the original number of bottle caps in the collection\n    remaining_fraction = 5/9\n    given_away = 440\n    \n    # Re-arrange the equation to solve for x\n    # x - 5/9 * x = 440\n    # x * (1 - 5/9) = 440\n    # x * (4/9) = 440\n    # x = 440 / (4/9)\n    # x = 440 * 9 / 4 \n    x = 440 * 9 // 4 # Using integer division as the number of bottle caps must be an integer\n    \n    return x\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_only = 10 - 7\n    second_only = 15 - 7\n    one_question_correctly = first_only + second_only\n    return one_question_correctly\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "import datetime\n\ndef solution():\n    start_date = datetime.date(2023, 4, 4)\n    end_date = datetime.date(2023, 5, 18)\n    day_off = (end_date - start_date).days + 1\n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice's candies\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 candies, they have the same amount\n    eq1 = Eq(rachel - 10, alice + 10)\n\n    # After eating 8 candies each, Rachel has 3 times as many as Alice\n    eq2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the equations\n    sol = solve((eq1, eq2), (rachel, alice))\n\n    rachel_candies = sol[rachel]\n    alice_candies = sol[alice]\n\n    # Calculate the total candies they originally had\n    total_candies = rachel_candies + alice_candies\n\n    return total_candies\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5  # time in seconds to pass the tree\n\n    length_of_train = speed * time  # distance formula: distance = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    from itertools import product\n\n    # Prices in pence for clarity in calculations\n    prices = {1: 15, 2: 28, 5: 60}\n    # Convert total number of bottles into a range\n    total_bottles = 17\n    # Set an initially high minimum cost to compare against\n    min_cost = float('inf')\n\n    # Create all possible combinations of bottle packs to sum up to total_bottles\n    for pack_combination in product(range(total_bottles + 1), repeat=3):\n        num_single, num_double, num_five_pack = pack_combination\n        if num_single + 2 * num_double + 5 * num_five_pack == total_bottles:\n            cost = (num_single * prices[1] +\n                    num_double * prices[2] +\n                    num_five_pack * prices[5])\n            min_cost = min(min_cost, cost)\n\n    # Convert pence to pounds for the final answer\n    return min_cost / 100\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_amounts = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, equal_amounts), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_cost = 10\n    brush_cost = 3\n    total_cost = 59\n    \n    # max number of towels that can be bought within £59\n    max_towels = total_cost // towel_cost\n    \n    for towels in range(max_towels + 1):\n        for brushes in range(10 // brush_cost):  # She spent less than £10 on brushes\n            if towel_cost * towels + brush_cost * brushes == total_cost:\n                return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    # Let x be the number Verity thinks of\n    # According to the problem x * 7 + 8 = 71\n    # We need to perform inverse operations to find x\n    # First inverse operation is to subtract 8 from 71\n    result_after_addition = 71 - 8\n    \n    # Second inverse operation is to divide the result by 7\n    original_number = result_after_addition / 7\n    \n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    rick, morty = symbols('rick morty')\n\n    # If Rick gave Morty $70 of his test score, my test score would still be $20 higher than yours.\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n\n    # My current test score is 9 times higher than yours.\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # There are three digits to choose for the first place (1 or 8 because it cannot be 0)\n    first_digit_options = 2\n    \n    # There are two remaining digits to choose for the second place.\n    second_digit_options = 2\n    \n    # There is only one digit left for the third place.\n    third_digit_options = 1\n    \n    # The total number of different three-digit numbers is the product of the options\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the expression without brackets as a string\n    expression = \"285+15/5-2\"\n\n    # Possible positions to place the first bracket pair (start and end)\n    first_bracket_positions = [\n        (0, 3),  # (285)\n        (4, 7)   # (15/5)\n    ]\n\n    # Possible positions to place the second bracket pair (start and end)\n    second_bracket_positions = [\n        (0, 3),  # (285)\n        (4, 7),  # (15/5)\n        (8, 10)  # (-2)\n    ]\n\n    # Use a set to store unique results to avoid counting duplicates\n    unique_results = set()\n\n    # Loop through possible positions for the first and second bracket pair\n    for f_start, f_end in first_bracket_positions:\n        for s_start, s_end in second_bracket_positions:\n            # Invalid if brackets overlap\n            if f_start <= s_start <= f_end or f_start <= s_end <= f_end:\n                continue\n\n            # Construct new expression with the first pair of brackets\n            expr_with_first_bracket = expression[:f_start] + '(' + expression[f_start:f_end+1] + ')' + expression[f_end+1:]\n\n            # Insert second pair of brackets\n            if s_start > f_end: \n                # Adjust second bracket start position for the already placed first bracket\n                s_start += 2\n                s_end += 2\n\n            # Construct full expression with both pairs of brackets\n            full_expr = expr_with_first_bracket[:s_start] + '(' + expr_with_first_bracket[s_start:s_end+1] + ')' + expr_with_first_bracket[s_end+1:]\n\n            # Evaluate the expression and add the result to the set\n            unique_results.add(eval(full_expr))\n\n    # Count unique results (no need for combinations or permutations, just evaluating unique bracket placements)\n    return len(unique_results)\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    draw_without_blue = pink + grey  # Number to draw without guaranteeing a blue one\n    ans = draw_without_blue + 1  # Add one more to ensure at least one blue\n\n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Total days\n    days = 5\n    total_bears = 35\n    # Let the number of teddy bears made on the first day be d\n    # Since each day she made 2 more teddy bears than the day before, we have an arithmetic sequence\n    # The sum of an arithmetic sequence is (n/2) * (first_term + last_term), where n is the number of terms\n    # Here we can express the last_term as first_term + (days - 1) * difference\n    difference = 2\n    \n    # Using the sum formula for an arithmetic sequence\n    # total_bears = (days / 2) * (2 * first_term + (days - 1) * difference)\n    # Solving for first_term, we have:\n    # first_term = (total_bears / days) - ((days - 1) * difference / 2)\n\n    first_term = (total_bears / days) - ((days - 1) * difference / 2)\n\n    # Now we can calculate the number of bears she made on the fifth day\n    # bears_on_fifth_day = first_term + (days - 1) * difference\n    bears_on_fifth_day = first_term + (days - 1) * difference\n\n    return int(bears_on_fifth_day)\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    \n    total_miles = miles_per_day * days_in_two_weeks\n    \n    return total_miles\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n\n    # Generate all permutations of the list [1, 2, 3, ..., 8]\n    for perm in permutations(range(1, 9)):\n        # Check if each adjacent pair is coprime\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3/10) / (6/7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Boys were 30 less than girls\n    eq1 = Eq(boys, girls - 30)\n\n    # After leaving, boys and girls remaining are the same\n    # Remaining boys: boys - 3/5 * boys\n    # Remaining girls: girls - 5/8 * girls\n    eq2 = Eq(boys - 3/5 * boys, girls - 5/8 * girls)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n\n    # Initial condition\n    equation1 = Eq(frogs_begin, dragonflies_begin + 9)\n\n    # After the magic show\n    equation2 = Eq(frogs_begin - dragonflies_begin, 11 - 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = set()\n    # Inserting brackets in different positions considering the operations precedence rules\n    expressions.add(285 + 15 / (5 - 2))\n    expressions.add(285 + (15 / 5) - 2)\n    expressions.add((285 + 15) / (5 - 2))\n    expressions.add((285 + 15) / 5 - 2)\n    expressions.add(285 + (15 / 5 - 2))\n    expressions.add((285 + 15 / 5) - 2)\n    \n    # Additional brackets that won't change the outcome due to the multiplication/division precedence\n    expressions.add((285 + 15) / (5 - 2))\n    expressions.add(285 + (15 / 5) - 2)\n    \n    return len(expressions)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    total_apples = amy_apples + john_apples\n    apples_each = total_apples // 2\n    apples_to_give = amy_apples - apples_each\n\n    return apples_to_give\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_percentage = 7.5 / 100\n    sales_tax_paid = 30\n\n    computer_price = sales_tax_paid / sales_tax_percentage\n    \n    return computer_price\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation based on sugar content\n    # 0.45 * 2kg + 0.15 * x kg = 0.25 * (2kg + x kg)\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve the equation\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Job rates for A, B, and C\n    A_plus_B = 1 / 3\n    B_plus_C = 1 / 4\n    A_plus_C = 1 / 8\n    \n    # Twice the sum of all rates (because all pairs are counted twice)\n    twice_sum_rates = A_plus_B + B_plus_C + A_plus_C\n    \n    # Individual rate of the three working together\n    all_three_rate = twice_sum_rates / 2\n    \n    # Time taken by all three to complete the job together\n    time_all_three = 1 / all_three_rate\n    \n    return time_all_three\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n    \n    # Calculate the ratio of boys to girls\n    ratio = boys_in_line / girls_in_line\n    \n    # Calculate the number of girls based on the ratio and total number of boys\n    total_girls = total_boys / ratio\n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_5_digits = S % 100000\n    return last_5_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 // 7) - 6\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david - eugene, 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n\n    # Equation 1: sam + tim = 1170\n    equation1 = Eq(sam + tim, 1170)\n    # After Sam ate 1/4 of her cookies, she has 3/4 left: sam_after = 3/4 * sam\n    # After Tim bought 1/5 more cookies, Tim has tim + 1/5 * tim = 6/5 * tim\n    # Equation 2: sam_after + 663 = tim_after -> 3/4 * sam + 663 = 6/5 * tim\n    equation2 = Eq(3/4 * sam + 663, 6/5 * tim)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # Sam ate 1/4 of her cookies\n    cookies_eaten = 1/4 * solutions[sam]\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the number of candies as c and number of kids as k.\n    candies, kids = symbols('candies kids')\n\n    # If every kid eats 18 candies, 12 more candies are needed.\n    # So, the total number of candies is (18 * kids) + 12\n    equation1 = Eq(candies, 18*kids + 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids.\n    # So, the total number of candies is 15 * (kids + 2)\n    equation2 = Eq(candies, 15*(kids + 2))\n\n    # We need to solve this system of equations to find the number of candies.\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruits_per_six_days = 24\n    days_in_question = 8\n\n    fruits_per_day = fruits_per_six_days / 6\n    fruits_in_eight_days = fruits_per_day * days_in_question\n\n    return fruits_in_eight_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    numerator = 2017 * 2015 + 1\n    denominator = 2016\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps = 40\n    ting_stamps = 32\n    \n    # Let x be the number of stamps Sally gave to Ting\n    # After giving x stamps, Sally has (sally_stamps - x) and Ting has (ting_stamps + x)\n    # The ratio of their stamps is 1:2, so we have the equation (sally_stamps - x) / (ting_stamps + x) = 1/2\n    # Now we can solve for x\n    \n    x = symbols('x')\n    equation = Eq((sally_stamps - x) / (ting_stamps + x), 1/2)\n    x_value = solve(equation, x)[0]\n    \n    # Then we calculate how many stamps Ting has in the end\n    ting_final_stamps = ting_stamps + x_value\n    \n    return ting_final_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time spent walking at the increased speed.\n    t = symbols('t')\n\n    # Calculate the distance walked at the initial speed.\n    # Since David increases his speed after 10 minutes, he walks at the initial speed for these 10 minutes.\n    distance_initial = 150 * 10\n\n    # Calculate the distance walked at the increased speed.\n    # He then walks at an increased speed for t minutes.\n    distance_increased = (150 + 50) * t\n\n    # Total distance walked\n    total_distance = Eq(distance_initial + distance_increased, 3700)\n\n    # Solve for t\n    time_spent = solve(total_distance, t)\n\n    # Calculate the total time spent walking in the park (initial 10 minutes + time at increased speed)\n    total_time = 10 + time_spent[0]\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    packets_bought = 20 // 4\n    sweets_from_packets = packets_bought * 8\n    free_sweets = (packets_bought // 2) * 1\n    return sweets_from_packets + free_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Distributing candy in ascending order starting with 1\n    # We have 8 children and we distribute 1 to 7 pieces to the first 7 children\n    candy_distributed = sum(range(1, 8))\n    \n    # Subtracting the total distributed to the first 7 children from 88\n    # gives us the minimum number of pieces the 8th child can get\n    most_pieces = 88 - candy_distributed\n    \n    return most_pieces\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of counters\n    pink = 5\n    purple = 7\n    orange = 8\n    total_initial = pink + purple + orange\n\n    # Initial probability of choosing a pink counter\n    initial_probability = pink / total_initial\n\n    # Double the initial probability\n    double_probability = initial_probability * 2\n\n    # Find the total number of counters required for the doubled probability\n    # Let's assume the number of extra counters that need to be added are x pink counters\n    # So the updated probability of getting a pink counter is (pink + x) / (total_initial + x)\n    # Set up the equation (pink + x) / (total_initial + x) = double_probability and solve for x\n\n    # We are only looking for integer solutions since we can only add whole counters\n    x = 0\n    while (pink + x) / (total_initial + x) < double_probability:\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 1.4 * girls)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    num_zeroes = 0\n    n = 16\n    divisor = 5\n    \n    while (n // divisor) > 0:\n        num_zeroes += n // divisor\n        divisor *= 5\n\n    return num_zeroes\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Take the worst case scenario into account.\n    # To guarantee at least two pairs of the same colour, Cindy might pick\n    # 3 socks of each color (black, grey, red) which would be 9 socks and\n    # still not have a pair of any color. Therefore, to guarantee at least\n    # 1 pair, she needs to pick at least 10 socks.\n    # Once she has 1 pair, she can proceed to pick socks one at a time;\n    # at most she will need to pick 3 more to get another pair of the same color. \n    # Hence, to guarantee 2 pairs of the same color, she will need:\n    # 3 (worst-case for the first pair) + 1 (to get the first pair) + 3 (worst-case to get the second pair)\n    # Therefore, Cindy must take out 10 socks to ensure at least two pairs of socks of the same color.\n\n    return 10\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    cupcakes, muffins = symbols('cupcakes muffins')\n    \n    # cupcakes and muffins are equal initially\n    equation1 = Eq(cupcakes, muffins)\n    \n    # after selling, muffins left is twice cupcakes left\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n    \n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n    cupcakes_at_first = solutions[cupcakes]\n    muffins_at_first = solutions[muffins]\n\n    return cupcakes_at_first + muffins_at_first\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 1.5  # 90 minutes is 1.5 hours\n    round_trip_time = shanghai_to_la + la_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    return 278 + 127\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    return sum(range(1, 31)) * 2 - 30\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours\n    distance_first_2_hours = 2 * 40  # speed * time\n\n    # Total distance covered\n    total_distance = distance_first_2_hours + 280  # first 2 hours + remaining distance\n\n    # Time taken to cover the remaining distance\n    time_remaining_distance = 280 / 70  # distance / speed\n\n    # Total time for the trip\n    total_time = 2 + time_remaining_distance  # first 2 hours + remaining time\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # excluding numbers starting with 0\n    no_sevens = 8 * 9 * 9  # options excluding 7 for each position \n\n    # At least two sevens means either exactly two sevens or exactly three sevens\n    two_sevens = 3 * 9  # 3 positions for two sevens (77X, X77, 7X7) and 9 options for the non-seven digit\n    three_sevens = 1  # Only one option with all three digits as seven (777)\n\n    at_least_two_sevens = total_three_digit_numbers - no_sevens + two_sevens + three_sevens\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    three_page_penpals = 0\n\n    while three_page_penpals <= total_penpals:\n        four_page_penpals = total_penpals - three_page_penpals\n        if (3 * three_page_penpals) + (4 * four_page_penpals) == total_pages:\n            return three_page_penpals\n        three_page_penpals += 1\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    # Let's denote the initial amounts for Eddi and Wiya as 3k and 2k respectively.\n    # After Eddi receives $4 from Lisa, the new amounts are 3k + 4 for Eddi and 2k for Wiya.\n    # According to the problem, the new ratio should be 8:5. Therefore:\n    # (3k + 4) / 2k = 8/5\n    # Solving for k will give us the value of each part of the initial ratio, and we can then find Wiya's amount.\n    \n    from sympy import symbols, solve, Eq\n    \n    k = symbols('k')\n    # Create the equation based on the ratio information\n    equation = Eq((3*k + 4) / (2*k), 8/5)\n    # Solve for k\n    k_value = solve(equation, k)[0]\n\n    # Now that we have k, we can find Wiya's initial amount of money\n    wiya_money = 2 * k_value\n    return wiya_money\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    # Let the first term of the AP be 'a' and the common difference be 'd'.\n    # 9th term = a + 8d\n    # 15th term = a + 14d\n    # According to the first condition:\n    # a + 8d = (a + 14d) + 18\n    # Solving for 'd' gives us: d = -3\n    \n    # Now using the second condition,\n    # 20th term = a + 19d\n    # 12th term = a + 11d\n    # (a + 19d) + (a + 11d) = 88\n    # Substitute d = -3 into the equation and solve for 'a':\n    # (a - 57) + (a - 33) = 88\n    # 2a - 90 = 88\n    # 2a = 178\n    # a = 89\n    \n    # Now we can find the 32nd term:\n    # 32nd term = a + 31d\n    # Substitute a = 89 and d = -3 into the equation:\n    # 32nd term = 89 + 31*(-3)\n    \n    return 89 + 31*(-3)\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    return 8 * 10**2\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_packet_type1 = 25\n    days_in_packet_type2 = 20\n\n    days_to_next_start = lcm(days_in_packet_type1, days_in_packet_type2)\n\n    # March has 31 days, so we subtract 31 days of March from the total days\n    # to find out the next start on the same date in April.\n    next_start_day = days_to_next_start - 31\n\n    return next_start_day\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let's denote helen's daily pocket money as h and george's as g.\n    # According to the problem:\n    # g = h + 3 (1)\n    # Their daily savings would then be (h-5) for Helen and (g-5) for George.\n    # It's given that when Helen has saved $60, George has saved $90 more than Helen,\n    # which equates to a total of $60 + $90 for George.\n    # So, we can write Helen's total savings as:\n    # (h - 5)*t = 60 (2)\n    # and for George as:\n    # (g - 5)*t = 60 + 90 (3)\n    # We know from (1) that g = h + 3, we can substitute this into (3) to get:\n    # ((h + 3) - 5)*t = 150\n    # (h - 2)*t = 150\n    # Because Helen and George save the same number of days (t), we can equate (2) and (4):\n    # (h - 5)*t = (h - 2)*t = 150\n    # Solve the equation for h:\n    # h*t - 5*t = h*t - 2*t = 150\n    # -5*t = -2*t + 150\n    # 3*t = 150\n    # t = 150 / 3\n    # t = 50 days \n    # Now we can plug t into Helen's total savings equation (h - 5) * 50 = 60:\n    # (h - 5) * 50 = 60\n    # h - 5 = 60 / 50\n    # h - 5 = 1.2\n    # h = 1.2 + 5\n    # h = 6.2\n    \n    # Helen receives $6.2 each day.\n    ans = 6.2\n    return ans\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    A = 1\n    terms_delta = [\n        Fraction(1, 2),\n        Fraction(2, 3),\n        Fraction(7, 8),\n        Fraction(29, 30),\n        Fraction(139, 144),\n        Fraction(839, 840)\n    ]\n\n    a0 = A - sum(terms_delta)\n    m, n = a0.numerator, a0.denominator\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_digits = set(range(10))\n    # From the fourth guess, we know none of the digits 5, 4, 3, 0 can be in the answer\n    possible_digits -= {5, 4, 3, 0}\n    \n    # From the third guess, we know the two digits that are correct and in right position are either 8 and 6\n    # or 8 and 4 or 6 and 4, but since 4 is not an option, the correct digits in place are 8 and 6\n    # The number must look like: x8x6\n    \n    # From the first and second guess we know that the numbers 2, 7, 1, and 0 cannot be in the answer\n    possible_digits -= {2, 7, 1, 0}\n    \n    # We are left with possible_digits being {8, 6, 9}\n    # But since we know that 8 and 6 are in the answer, 9 must be one of the other two digits\n\n    # From the second guess we know that one of 1 or 0 is in the correct position but as we previously \n    # determined that these are not in the answer at all, the numbers 2 and 3 must be in the wrong position, \n    # implying that one of these is the first digit but we also know that 2 cannot be in the answer so 3 must be \n    # the first digit, so the number looks like: 38x6\n\n    # Now we just need to determine the third digit which we've determined must be 9\n    # So the final number looks like: 3896\n    \n    return 3896\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    # Initialize variables\n    correct_result_var = symbols('x')\n    \n    # Represent the incorrect operation\n    incorrect_result = (correct_result_var / 4) - 25\n    \n    # The incorrect result is given to be 2021\n    incorrect_result_eq = Eq(incorrect_result, 2021)\n    \n    # Solve for the variable that would give the incorrect result\n    correct_result_var_value = solve(incorrect_result_eq, correct_result_var)[0]\n    \n    # Calculate the correct result by using the correct operations\n    correct_answer = correct_result_var_value * 4 + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from math import factorial\n\n    def prime_factors(n):\n        factors = {}\n        d = 2\n        while d*d <= n:\n            while (n % d) == 0:\n                factors[d] = factors.get(d, 0) + 1\n                n //= d\n            d += 1\n        if n > 1:\n           factors[n] = factors.get(n, 0) + 1\n        return factors\n    \n    numbers = [75, 56, 12, 105]\n    combined_factors = {}\n\n    for number in numbers:\n        for prime, power in prime_factors(number).items():\n            combined_factors[prime] = combined_factors.get(prime, 0) + power\n\n    num_zeros = min(combined_factors.get(2, 0), combined_factors.get(5, 0))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 1000))  # Generate a list of prime numbers in a reasonable range\n    count = 0\n    for a in primes:\n        if (a + 20 in primes) and (a + 40 in primes):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 4) / 8), 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, adults, boys, girls = symbols('children adults boys girls')\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n\n    # Sustitute adults from equation1 into equation3 to find relation between children and girls\n    children_girls_relation = equation3.subs(adults, 3 * children)\n    # Boys and girls together make all children, so boys + girls = children\n    children_eq_boys_girls = Eq(boys + girls, children)\n\n    # Solve the relation between children and girls and substitute boys by 2 * girls\n    solutions = solve((children_girls_relation, children_eq_boys_girls.subs(boys, 2 * girls)), (children, girls))\n\n    children_solution = solutions[children]\n    girls_solution = solutions[girls]\n\n    adults_solution = 3 * children_solution\n    boys_solution = 2 * girls_solution\n\n    total_people = adults_solution + children_solution\n\n    return total_people\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances\n    singing = 6\n    # Total dancing performances\n    dancing = 4\n\n    # Assuming all dancing performances must have at least one singing performance\n    # in between, there are 5 places where these singing performances could be.\n    # __(s)__ __(s)__ __(s)__ __(s)__ __(s)__ where (s) represents the singing performance\n    # Piles are for the dancing performances, and _ are for singing.\n    # We can place the first four dancing performances in any of the five slots.\n\n    # Since there are 5 slots for the 4 dancing performances we choose 4 places out of 5\n    # and for those 4 places, we arrange the 4 dancing\n    places_to_choose = factorial(5) // (factorial(4) * factorial(5 - 4))\n\n    # Now, we have 2 additional singing performances that we can arrange in any order including\n    # the beginning and the end, so we have 7 slots for the remaining 2 singing performances.\n    additional_singing_places = 7\n\n    # We can choose any 2 places out of 7 for the additional 2 singing performances\n    additional_singing_arrangements = factorial(additional_singing_places) // \\\n                                        (factorial(2) * factorial(additional_singing_places - 2))\n\n    # For each of these arrangements of the 4 dancing performances,\n    # we can also arrange the 6 singing performances in any order around them.\n    # So we multiply by the number of ways to arrange the 6 singing performances.\n    total_singing_arrangements = factorial(singing)\n\n    # Multiply everything to get the total number of different ways.\n    ans = places_to_choose * additional_singing_arrangements * total_singing_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Identify the pattern of the ones digit in powers of 9\n    ones_digit_pattern = [9**i % 10 for i in range(1, 5)]\n    \n    # Calculate the position of 99 in the pattern cycle\n    position = 99 % len(ones_digit_pattern)\n    \n    # Edge case for when the position is 0, we take the last element of the pattern\n    position = position if position != 0 else len(ones_digit_pattern)\n    \n    # Get the ones digit for the 999^99\n    ones_digit = ones_digit_pattern[position - 1]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # as 'a' in 'ab' cannot be 0 (it's a two-digit number)\n        for b in range(10):  # 'b' can be from 0 to 9\n            ab = a * 10 + b\n            a0b = a * 100 + b\n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    smallest_number = solve_congruence(*congruences)\n\n    return smallest_number[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    distinct_numbers = set(permutations(digits))\n    sum_of_numbers = sum(int(''.join(map(str, number))) for number in distinct_numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_day_per_worker = 14 / (3 * 4)\n    total_houses = houses_per_day_per_worker * 9 * 2\n    return int(total_houses)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    for bob in range(11, 29):  # Fido is 10 years younger than Bob, so Bob's age starts from 11\n        for rex in range(1, bob):  # Rex is younger than Bob\n            fido = 28 - bob - rex  # Fido's age\n            if fido < rex and fido >= 1 and fido + 10 == bob:  # Fido is younger than Rex and not negative, and Fido is 10 years younger than Bob\n                product = bob * rex * fido\n                if product < min_product:\n                    min_product = product\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total = symbols('total')\n    children = 2/5 * total\n    women = 1/4 * total \n    men = total - children - women \n    equation = Eq(children, men + 20)\n\n    sol = solve((equation), (total))\n\n    return sol[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Cost of 1 ball\n    money = symbols('money')  # Total money Adam has\n\n    # Equation 1: money - 5 * x = 15\n    equation1 = Eq(money - 5 * x, 15)\n    \n    # Equation 2: money - 8 * x = -12\n    equation2 = Eq(money - 8 * x, -12)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (money, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):\n        for j in range(i+1, 1000):\n            if i % 75 == 0 and j % 75 == 0:\n                str_i = str(i)\n                str_j = str(j)\n                common_digits_i = [str_i.count(digit) for digit in str_i]\n                common_digits_j = [str_j.count(digit) for digit in str_j]\n                if (2 in common_digits_i or 3 in common_digits_i) and \\\n                   (2 in common_digits_j or 3 in common_digits_j) and \\\n                   i != j:\n                    max_sum = max(max_sum, i + j)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    second_bounce_height = 9\n    first_bounce_height = second_bounce_height * 3\n    initial_height = first_bounce_height * 3\n    \n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    least_value, _ = solve_congruence(*congruences)\n\n    return least_value\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the rate at which Lee types and n be the rate at which Nancy types\n    # Rate is in terms of job/hours\n    l, n = symbols('l n')\n\n    # If they work together, they will finish the job in 10 hours, therefore their combined rate is 1/10\n    equation1 = Eq(l + n, 1/10)\n\n    # Lee types for 6 hours and then Nancy types for 20 hours to finish the job\n    equation2 = Eq(6 * l + 20 * n, 1)\n\n    # Solve the system of equations for l and n\n    solutions = solve((equation1, equation2), (l, n))\n\n    # Nancy's rate is the solution for n; time is the inverse of rate for the entire job (1)\n    nancy_time = 1 / solutions[n]\n\n    return nancy_time\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average_score = 90\n\n    total_marks = total_pupils * total_average_score\n\n    classB_average = (total_marks - 40*(classB_average - 7)) / 30\n    classB_average = (total_marks + 280) / 30  # Simplify the equation by multiplying out and rearranging\n\n    return classB_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    return 999 * 222 + 333 * 334\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):  # there are only 5 ten-pence coins\n        for twenty_pences in range(4):  # there are only 3 twenty-pence coins\n            for fifty_pences in range(2):  # there is only 1 fifty-pence coin\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    \n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249*250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for Aaron, Becky, and Caris\n    Aaron, Becky, Caris = symbols('Aaron Becky Caris')\n    \n    equation1 = Eq(Aaron - Becky, Becky - Caris)\n    equation2 = Eq(Aaron + Becky + Caris, 60)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (Aaron, Becky, Caris))\n    \n    # Becky's age is what we need to find\n    return solutions[Becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people_in_line = 30\n\n    people_in_front_of_mark = total_people_in_line - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 201):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n\n    # Solve the equation\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # For a number to be divisible by 4, its last two digits must be divisible by 4.\n    # So we need to find a digit J such that 5J6 is divisible by 4. The last two digits are J6.\n\n    for J in range(10):\n        if (10*J + 6) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the cost of each chair\n    c = symbols('c')\n    # Each table costs 'c + 25'\n    # 5 tables and 12 chairs cost £720\n    equation = Eq(5 * (c + 25) + 12 * c, 720)\n\n    # Solve for the cost of each chair\n    cost_chair = solve(equation, c)[0]\n\n    # Cost of each table is 'cost_chair + 25'\n    cost_table = cost_chair + 25\n\n    return cost_table\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    # Let x be the original number\n    # Then the computation would be (x + 7) * 6 = 66\n    # We need to perform inverse operations to find x\n    # Start with division\n    x_plus_7 = 66 / 6\n    # And then subtraction\n    x = x_plus_7 - 7\n\n    return int(x)\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_sq = lambda n: n * (n + 1) * (2 * n + 1) // 6\n    ans = sum(i * (i + 1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    days = lcm(25, 20)\n    next_start_date = 1 + days\n    return next_start_date\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    watermelon_usage = 9\n    pineapple_usage = 9\n\n    for days in range(1, min(watermelons, pineapples) + 1):\n        watermelons_left = watermelons - (days * watermelon_usage)\n        pineapples_left = pineapples - (days * pineapple_usage)\n        \n        if pineapples_left == 3 * watermelons_left:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_per_person = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_per_person\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Tom's and Jerry's current ages\n    tom, jerry = symbols('tom jerry')\n    \n    # Given: Tom will be twice his current age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # Given: Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (tom, jerry))\n    \n    tom_age = solution[tom]\n    jerry_age = solution[jerry]\n    \n    # Find the number of years from now Jerry's age will be doubled\n    years_until_double = (2 * jerry_age) - jerry_age\n    \n    return years_until_double\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the mass each car carries\n    car_mass = 24.2 / 4\n    \n    # Calculate the mass each truck carries\n    truck_mass = 410 / 50\n\n    # Calculate the difference in mass carried between a truck and a car\n    difference = truck_mass - car_mass\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    time_arrived = 9 * 60 + 22  # Aiden arrives at 9:22 which is 562 minutes after 0:00\n    bus_interval = 35  # the bus leaves every 35 minutes\n    bus_9_15 = 9 * 60 + 15  # the 9:15 bus time in minutes after 0:00\n\n    # Find the number of buses that have gone by the time Aiden arrives\n    buses_gone = (time_arrived - bus_9_15) // bus_interval\n\n    # Time for the next bus after Aiden arrives\n    next_bus_time = bus_9_15 + (buses_gone + 1) * bus_interval\n    wait_time = next_bus_time - time_arrived  # minutes Aiden needs to wait for the next bus\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_per_week = 7\n    weeks = days_until_birthday // days_per_week\n    return weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct = symbols('correct')\n    # Let incorrect be the number of incorrect answers\n    incorrect = 20 - correct\n    \n    # Each correct answer gives 5 points and each wrong answer deducts 3 points\n    equation = Eq(5 * correct - 3 * incorrect, 84)\n    \n    # Solve the equation\n    correct_answers = solve(equation, correct)[0]\n    return correct_answers\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    result = 161 / 46\n    return result\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the time going up as 't_up' and the time going down as 't_down'.\n    t_up, t_down = symbols('t_up t_down')\n\n    # According to the problem, the total time spent is 360 minutes.\n    # The ratio of the time spent going up the hill to the time spent going down the hill is 5:4.\n    # Also, the speed going up is 10 m/min slower than the speed going down.\n    # Let's denote the speed going down as 'v_down' and the speed going up as 'v_up = v_down - 10'.\n    v_down = symbols('v_down')\n\n    # The two equations derived from the problem are:\n    equation1 = Eq(t_up + t_down, 360)     # The total time spent going up and down the hill is 360 minutes.\n    equation2 = Eq(t_up / t_down, 5 / 4)   # The ratio of the time going up to the time going down is 5:4.\n\n    # Solve for 't_up' and 't_down'.\n    times = solve((equation1, equation2), (t_up, t_down))\n\n    # Now that we have 't_up' and 't_down', let's find 'v_down' and 'v_up'.\n    # Let 'd' be the distance covered each way (up and down). We have 'd = v_up * t_up' and 'd = v_down * t_down'.\n    d, v_up = symbols('d v_up')\n    # Form equations for 'd' using the relationship between speed, time, and distance.\n    equation3 = Eq(d, (v_down - 10) * times[t_up])      # Distance covered going up.\n    equation4 = Eq(d, v_down * times[t_down])           # Distance covered going down.\n\n    # Solve the system of equations for 'v_down' and 'd'.\n    # We already have 't_up' which is expressed in terms of 't_down' from the ratio, so we substitute that in.\n    solution = solve((equation3.subs(t_up, times[t_up]), equation4.subs(t_down, times[t_down])), (v_down, d))\n\n    # The total distance is twice the distance 'd' since the cyclist goes up and then down the hill.\n    total_distance = 2 * solution[d]\n\n    return total_distance\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    current_year = 2017\n    ages = [7, 5, 29, 31]\n    while True:\n        current_year += 1\n        new_ages = [age + 1 for age in ages]\n        if all(isprime(age) for age in new_ages):\n            return new_ages[3]  # father's age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([(i ** 2) * (-1 if i % 2 == 0 else 1) for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    # The number of intervals between lamp posts is one less than the number of lamp posts.\n    # Therefore, the number of lamp posts can be found by dividing the total flowers by the flowers between each post and adding 1.\n    number_of_lamp_posts = (total_flowers // flowers_between_posts) + 1\n    # Distance between the lamp posts is the total distance divided by the number of intervals.\n    distance_between_posts = 50 / (number_of_lamp_posts - 1)\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # Number of circles\n    n = 7\n\n    # Maximum number of different parts a plane can be divided into with n circles is given by\n    # the recursive formula: 1 + n(n+1)/2\n    ans = 1 + n * (n + 1) // 2\n    \n    # Adding the regions formed by the intersections of the circles.\n    # This formula comes from adding each new circle which can intersect previous circles at a maximum of 2 points.\n    for k in range(2, n+1):\n        ans += (k - 1) * (k - 2) // 2\n\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n\n    books_in_box = total_books - books_given_away\n\n    return books_in_box\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Since 4 raised to the power of an even number always ends with a 6,\n    # and since 2008 is an even number, the unit digit of 44^2008 will be 6.\n    return 6\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_ratio = 3 / 5\n    male_adults = total_adults * male_ratio\n    return int(male_adults)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to the different locations\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n\n    # Paths from the different locations to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    # Total paths from home to school through each location\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight_twice = adam_ben + ben_carl + adam_carl\n    total_weight = total_weight_twice / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n    \n    total_value = one_pound_coins * 1 + fifty_p_coins * 0.5 + twenty_p_coins * 0.2\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    # Benson and Clive initially had a total of $705.\n    # Benson bought a calculator for $34. Now Benson has \"benson - 34\".\n    # Clive bought a badminton racket for $63. Now Clive has \"clive - 63\".\n    # They then had the same amount of money left.\n    \n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belle, eddie = symbols('belle eddie')\n    \n    belle_sticks = 49\n    eddie_given = 11\n    \n    equation1 = Eq(belle + eddie_given, eddie)\n    \n    eddie_sticks = solve(equation1, eddie)[0]\n    \n    return eddie_sticks\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamps = 50\n    distance_between = 2\n    road_length = (num_lamps - 1) * distance_between\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(5, 11) + Fraction(2, 27)) * 11 + Fraction(5, 27)\n    \n    return result\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins John and Kofi have\n    john, kofi = symbols('john kofi')\n\n    # Equation representing total number of coins they have together\n    equation1 = Eq(john + kofi, 25)\n\n    # Equation representing the condition that if John gives Kofi four coins,\n    # Kofi will have three fewer coins than John\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_per_person = total_tea // 2\n    tea_to_give = tea_per_person - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 4, 6]\n    all_combinations = [p for k in range(1, len(digits)+1) for p in permutations(digits, k)]\n    return len(all_combinations)\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost  # £10 is 1000p\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum_odd = sum(range(1, 101, 2))\n    sum_even = sum(range(2, 101, 2))\n    return sum_even - sum_odd\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    decimal = 1 / 70\n    decimal_str = format(decimal, '.502f')[2:]  # 500 digits after decimal + 2 leading digits\n    return int(decimal_str[499])\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one.\n    sweets_with_neelesh_after_eating = 4\n    \n    # Total sweets Neelesh had before eating one.\n    sweets_with_neelesh_before_eating = sweets_with_neelesh_after_eating + 1\n\n    # Since this amount represents 1/6th of the total sweets Ayesha had.\n    total_sweets_ayesha_had = 6 * sweets_with_neelesh_before_eating\n\n    # Ayesha gave 1/6 of her sweets to Neelesh, so she has 5/6 left.\n    sweets_ayesha_left = total_sweets_ayesha_had - sweets_with_neelesh_before_eating\n\n    return sweets_ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    # Let n be the number of normal rabbits and s be the number of special rabbits.\n    # Each normal rabbit has 1 head and 4 feet.\n    # Each special rabbit has 3 heads and 2 feet.\n\n    # n + 3s = 53 (total heads)\n    # 4n + 2s = 102 (total feet)\n\n    # Multiply the heads equation by 4 to eliminate 'n':\n    # 4n + 12s = 212\n    # Subtract the feet equation from this equation:\n    # 4n + 12s - (4n + 2s) = 212 - 102\n\n    # 10s = 110\n    # s = 11 (special rabbits)\n\n    # Plug into the heads equation:\n    # n + 3(11) = 53\n    # n = 53 - 33\n    # n = 20 (normal rabbits)\n\n    # Total number of rabbits is n + s\n    n = 20\n    s = 11\n    total_rabbits = n + s\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator sum\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator sum\n    denominator_sum = sum(1 / (i * (40 - i)) for i in range(11, 16))\n    \n    # Calculate the final answer\n    ans = numerator_sum / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_A = 80\n    marbles_B = 2 * symbols('marbles_C')\n    marbles_C = symbols('marbles_C')\n\n    equation = Eq(marbles_A + marbles_B + marbles_C, total_marbles)\n    \n    marbles_C_value = solve(equation, marbles_C)\n\n    return marbles_C_value[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    david_weight_pounds = david_weight_stone * 14\n    andrew_weight_pounds = 275\n    \n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 25\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = nth_term - (n - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n    \n    # Return the solution\n    return solutions[0]\n\n# Call the function and assign the result to 'ans'\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of gummy bears and y be the number of lollipops before adding.\n    x, y = symbols('x y')\n    \n    # Original ratio equation: 5/7 = x/y\n    original_ratio_eq = Eq(5*x, 7*y)\n    \n    # New ratio after adding 120 pieces to each: 4/5 = (x+120)/(y+120)\n    new_ratio_eq = Eq(4*(x + 120), 5*(y + 120))\n    \n    # Solving the system of equations\n    solutions = solve((original_ratio_eq, new_ratio_eq), (x, y))\n    \n    # Total number of candies now is the sum of gummy bears and lollipops after adding 120 to each.\n    total_candies_now = solutions[x] + 120 + solutions[y] + 120\n    \n    return total_candies_now\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    # The sequence consists of seven terms where each term is 11 more than the previous term.\n    # To find the sum of the sequence, we use the formula for the sum of a finite arithmetic series:\n    # S = n/2 * (first_term + last_term)\n    # where n is the number of terms, and first_term and last_term are the first and last terms of the series\n    n = 7\n    first_term = 31\n    last_term = 97\n    S = n / 2 * (first_term + last_term)\n\n    return int(S)\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10, perform the subtraction, then convert back to base 3\n    number1_base10 = int('12101', 3)\n    number2_base10 = int('2210', 3)\n\n    difference_base10 = number1_base10 - number2_base10\n\n    ans = ''\n    while difference_base10 > 0:\n        ans = str(difference_base10 % 3) + ans\n        difference_base10 //= 3\n\n    return ans or '0'  # Return '0' if the difference is 0\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    base_amount = 3.20\n    first_percentage = 50 / 100\n    second_percentage = 50 / 100\n    result = base_amount * first_percentage * second_percentage\n    return result\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    taken = [0]*21 # Indexing from 1 to 20, initialize all as not taken.\n\n    n = 0\n    for i in range(1, 21):\n        if not taken[i]: # Check if not already taken\n            n += 1\n            taken[i] = 1 # Take the current number\n            if i+5 <= 20:\n                taken[i+5] = 1 # Mark the number that differs by 5 as taken\n\n    return n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    # We have two equations based on the problem statement:\n    # 1 cake + 2 biscuits = 450 calories...(1)\n    # 2 cakes + 3 biscuits = 800 calories...(2)\n    \n    # We will subtract equation (1) from equation (2) to find the calories from one biscuit\n\n    # Let cake's calories = c and biscuit's calories = b\n    # From (1) c + 2b = 450\n    # From (2) 2c + 3b = 800\n\n    # Subtracting (1) from (2):\n    # (2c + 3b) - (c + 2b) = 800 - 450\n    # 2c + 3b - c - 2b = 800 - 450\n    # c + b = 350\n    \n    # Substituting c from (1):\n    # (450 - 2b) + b = 350\n    # 450 - b = 350\n    # b = 450 - 350\n    b = 100\n    \n    return b\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for John's current age (j) and his mother's current age (m)\n    j, m = symbols('j m')\n    \n    # Equation 1: John's age in 8 years is equal to his mother's age 20 years ago\n    eq1 = Eq(j + 8, m - 20)\n    \n    # Equation 2: At some time point in the past, John's mother's age was 5 times John's age\n    # Let x be the number of years ago this happened\n    x = symbols('x')\n    eq2 = Eq(m - x, 5 * (j - x))\n    \n    # Solve the equations to find John's and his mother's current ages\n    ages = solve((eq1, eq2), (j, m, x))\n    \n    # We want to find John's age (j) when the age condition of being 5 times occurred\n    return ages[j] - ages[x]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_for_correct = 12\n    \n    total_marks = correct_answers * marks_for_correct\n    total_questions = correct_answers + wrong_answers\n    \n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    num = (2017 + 7/8) * (11/3) - 2016.875 * (11/3)\n    denom = (2017 + 1/3 - 2016.875) * 17\n    fraction = (3 + 23/32)\n\n    result = (num / denom) * fraction\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for i in range(10):\n            pencils_total = int(f\"{B}{i}{B}\")\n            if pencils_total % 44 == 0:\n                return pencils_total // 44\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    sara, kevin, james = symbols('sara kevin james')\n    \n    # Equation 1: Kevin wrote 30 more letters than Sara\n    equation1 = Eq(kevin, sara + 30)\n    \n    # Equation 2: James wrote 40 more letters than Sara\n    equation2 = Eq(james, sara + 40)\n    \n    # Equation 3: Total number of letters written by all three\n    equation3 = Eq(sara + kevin + james, 160)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n    \n    # Return the number of letters Kevin wrote\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef solution():\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    numbers = [4, 6, 7]\n    ans = lcm(numbers[0], numbers[1])\n    ans = lcm(ans, numbers[2])\n\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        if (len({M % 2, M % 3, M % 4, M % 5, M % 6, M % 7, M % 8, M % 9, M % 10}) == 9 and\n            all(M % i != 0 for i in range(2, 11))):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time_per_lap = 24\n    william_time_per_lap = 8\n    \n    # Least common multiple (LCM) of tom_time_per_lap and william_time_per_lap will give us\n    # the time it takes for them to meet since it's the first time their laps will align.\n    lcm = (tom_time_per_lap * william_time_per_lap) // math.gcd(tom_time_per_lap, william_time_per_lap)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, (romily, reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the principle of inclusion-exclusion:\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n\n    # Function to find the smallest number to be multiplied to get a perfect square\n    def smallest_multiplier(n):\n        factor = 2\n        to_be_multiplied = 1\n        \n        # Prime factorization to find the smallest number to be multiplied\n        while n > 1:\n            count = 0\n            while n % factor == 0:\n                count += 1\n                n //= factor\n            \n            # If prime factor count is odd, multiply it to the result\n            if count % 2 != 0:\n                to_be_multiplied *= factor\n            \n            factor += 1\n            \n        return to_be_multiplied\n\n    # Calculate the smallest number to be multiplied with 28 to get a perfect square\n    ans = smallest_multiplier(28)\n    return ans\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):   # 'a' can be any digit from 1 to 9 as it's the tens digit\n        for b in range(10):  # 'b' can be any digit from 0 to 9\n            ab = 10*a + b    # Construct the number 'ab'\n            ba = 10*b + a    # Construct the number 'ba'\n            if 8*ab == 3*ba: # Check the condition given in the problem\n                return ab    # Return the value when the condition is satisfied\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andrew and Louise's ages\n    andrew, louise = symbols('andrew louise')\n\n    # Equation representing that Andrew is three times as old as Louise\n    equation1 = Eq(andrew, 3 * louise)\n\n    # Equation representing the sum of their ages\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Benson finished lunch at 2:50 pm\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch lasted for 20 minutes\n    lunch_duration = timedelta(minutes=20)\n    \n    # Watched television for another 20 minutes\n    tv_duration = timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home\n    play_duration = timedelta(minutes=10)\n    \n    # Calculate time when Benson started lunch\n    lunch_start_time = lunch_end_time - lunch_duration\n    \n    # Calculate what time Benson started watching television\n    tv_start_time = lunch_start_time - tv_duration\n    \n    # Calculate the time Benson reached home\n    home_arrival_time = tv_start_time - play_duration\n    \n    # Format the home arrival time into a string\n    home_arrival_time_str = home_arrival_time.strftime(\"%H:%M %p\")\n    \n    return home_arrival_time_str\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Treat A and B as one unit; hence we have 5 units to arrange\n    units = factorial(5)\n    \n    # A and B can be arranged in 2! ways (A before B, or B before A)\n    arrangements_of_A_and_B = factorial(2)\n    \n    # Total arrangements is the product of arrangements of units and arrangements of A and B\n    total_arrangements = units * arrangements_of_A_and_B\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    growth_rate = 5\n    death_rate = 0.5\n    years = 5\n\n    for _ in range(years):\n        initial_rabbits = initial_rabbits * growth_rate * death_rate\n\n    ans = initial_rabbits\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    n = 12  # There are 12 balloons\n    # Since Dahuang has to pop at least one balloon each time, we can think of this problem\n    # as a way to partition the 12 balloons into non-empty groups.\n    # This problem is equivalent to placing 11 \"dividers\" into the spaces between 12 balloons,\n    # in order to create different groups. There are 12 - 1 = 11 spaces between balloons.\n    # The number of ways to place k dividers into n spaces is \"n choose k\".\n    # We can therefore use the binomial coefficient for this.\n    # Since the balloons are indistinguishable, we are looking for the sum of binomial coefficients\n    # from \"11 choose 1\" to \"11 choose 11\".\n    from math import comb\n    ways = sum(comb(11, i) for i in range(1, 12))\n    return ways\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return 6 * x == y\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    # Let's denote Jessie's weight as J and Buzz's weight as B.\n    \n    # According to the problem we have two equations:\n    # 1) B = 3 * J (Buzz is three times as heavy as Jessie)\n    # 2) B = J + 450 (Buzz is 450g heavier than Jessie)\n\n    # We can solve this by substitution or elimination.\n    # Rearrange equation 1 to find J in terms of B:\n    # J = B / 3\n\n    # Now plug into equation 2:\n    # B = (B / 3) + 450\n\n    # Multiply everything by 3 to get rid of the fraction:\n    # 3B = B + 1350\n\n    # Subtract B from both sides:\n    # 2B = 1350\n\n    # Divide both sides by 2 to find B:\n    B = 1350 / 2\n\n    # The weight of Buzz in grams is:\n    return B\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # s = speed of the escalator in steps per second\n    # Let the total number of steps be x\n    # When Peter walks at 1 step per second for 10 seconds, the escalator moves him s * 10 steps.\n    # So, we have the equation: 10 + s * 10 = x\n\n    # When Peter walks at 2 steps per second for 8 seconds, the escalator moves him s * 8 steps.\n    # So, we have the equation: 16 + s * 8 = x\n\n    # Equating both expressions for x gives us:\n    # 10 + s * 10 = 16 + s * 8\n    # 2s = 6  =>  s = 3/2\n\n    # Substitute s back into the first equation to find x:\n    # 10 + (3/2) * 10 = x\n    # x = 10 + 15 = 25\n\n    # The number of steps of the escalator is 25.\n    return 25\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    sweets = 138\n    # Start with one student and increase until no student gets 5 sweets\n    for class_size in range(1, sweets):\n        if sweets % class_size == 0 and sweets // class_size > 5:\n            break\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Since 248 is 2 more than 246, we can add 2*135 to the product of 246*135\n    initial_product = 33210\n    increment = 2 * 135\n\n    ans = initial_product + increment\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    number_of_trees = (road_length // interval) + 1\n    \n    return number_of_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    ans = tens + hundredths + thousandths\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    result = 0.25 * 1200\n    return result\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    height_difference = 30  # James is 30 cm shorter than Mark\n\n    # Calculate Mark's height\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    # Total children can be computed by subtracting the remaining stickers\n    # and then dividing by the number of stickers per child\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    quarter_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - quarter_blocks\n    return int(remaining_blocks)\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # hundreds digit must be 2, 4 since it needs to be even and smaller than the tens digit\n        for tens in range(hundreds + 1, 10, 2):  # tens must be even and greater than hundreds\n            ones = 2 * hundreds\n            if ones > 9:  # ones digit cannot be greater than 9\n                continue\n            number = 100 * hundreds + 10 * tens + ones\n            if number % 2 == 0 and number % 9 == 0:\n                return number  # Since we are iterating in increasing order, the first valid number is the answer\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # Original ratio equation\n    eq1 = Eq(sally / ken, 5 / 7)\n\n    # After Ken gives 24 chocolates to Sally, she has twice as many as Ken\n    eq2 = Eq(sally + 24, 2 * (ken - 24))\n\n    solutions = solve((eq1, eq2), (sally, ken))\n\n    return solutions[ken]\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    extra_bill = bill - (40 * 0)  # 40 free hours, so 0 cost for the first 40 hours\n\n    if extra_bill <= (50 - 40) * 5:\n        extra_hours = extra_bill / 5\n    elif extra_bill <= (50 - 40) * 5 + (60 - 50) * 8:\n        extra_hours = (extra_bill - (50 - 40) * 5) / 8 + (50 - 40)\n    else:\n        extra_hours = (extra_bill - (50 - 40) * 5 - (60 - 50) * 8) / 15 + (60 - 40)\n\n    total_hours = 40 + extra_hours\n    return total_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    sales_tax_percentage = 0.10\n\n    tip_amount = bill * tip_percentage\n    sales_tax_amount = bill * sales_tax_percentage\n    total_cost = bill + tip_amount + sales_tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    triangle_sides = 3\n    square_sides = 4\n    thought_number = (square_sides * 2) - triangle_sides\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percent = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percent)\n    return new_pay\n    \nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_extra_water = 32\n    \n    jane_water = audrey_water + jane_extra_water\n    total_water = jane_water + audrey_water\n    \n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page = 0\n\n    while total_digits < 1014:\n        page += 1\n        total_digits += digits_per_page\n        if page == 10 or page == 100 or page == 1000:\n            digits_per_page += 1\n\n    return page\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    result = 96 * 8\n    return result\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spending = 0.75\n    weeks = 5\n\n    joanna_savings = joanna_weekly * weeks\n    amy_savings = (amy_weekly - amy_spending) * weeks\n\n    difference = joanna_savings - amy_savings\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    # Let's create equations based on the problem statement\n    equation = Eq((57 + magic_number), 4 * (9 + magic_number))\n    \n    # Solving the equation\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_number_of_ways = 0\n    # Choose 1 teacher in 2 ways.\n    # Choose 4 students with at least 1 female student.\n    \n    # Case 1: Choose 1 female, 3 males\n    total_number_of_ways += comb(2, 1) * comb(7, 3) * comb(6, 1)\n    # Case 2: Choose 2 females, 2 males\n    total_number_of_ways += comb(2, 1) * comb(7, 2) * comb(6, 2)\n    # Case 3: Choose 3 females, 1 male\n    total_number_of_ways += comb(2, 1) * comb(7, 1) * comb(6, 3)\n    # Case 4: Choose 4 females\n    total_number_of_ways += comb(2, 1) * comb(7, 0) * comb(6, 4)\n    \n    return total_number_of_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')  # The original number\n    equation = Eq(3 * n + 6, n + 16)\n    \n    solution = solve(equation, n)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    sum = 0\n    for i in range(1, 8):\n        sum += (10 * i) - (6 + 10 * (i - 1))\n    return sum + 2021\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years time, their total age is 53 years old\n    equation2 = Eq(alice + sister + 20, 53)  # Add 10 years to each of their ages and sum them up\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "from sympy import symbols, lcm\n\ndef solution():\n    interval_behind = 15\n    interval_opposite = 10\n    \n    # since buses from both directions meet the person at a regular interval,\n    # the interval at which buses are dispatched is the least common multiple \n    # of the two intervals.\n    bus_dispatch_interval = lcm(interval_behind, interval_opposite)\n    \n    return bus_dispatch_interval\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of a monomial is the sum of the exponents of all its variables.\n    # Given monomial is -x^3 * y^(2n) and its total degree is 5.\n    # Therefore, 3 (degree of x) + 2n (degree of y) = 5\n    # Solving the equation for n\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n\n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown variable - the cost of a book\n    book_price = symbols('book_price')\n\n    # Define the equation based on the given problem\n    equation = Eq((8 * book_price + 3 * 0.40) - (3 * book_price + 8 * 0.40), 1.00)\n\n    # Solve the equation to find the cost of a book\n    solution = solve(equation, book_price)\n\n    # Return the solution, which is the cost of a book\n    return float(solution[0])\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Cost of each gummy bear in pounds, 6 pence = 0.06 pounds\n    cost_per_gummy_bear = 0.06\n\n    # Equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq((angela + bernice + candice) * cost_per_gummy_bear, 3.42)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # List of numbers with 'n' as the first number\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    \n    # Given that the median is 20 (the median will be the average of the 5th and 6th terms since there are 10 terms)\n    # Find 'n' such that the median is 20\n    n = 20 - ((n+7) + (n+8))/2\n    \n    # Solve for n\n    n = 18\n    \n    # Now calculate the mean with the found 'n'\n    total = sum([n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19])\n    mean = total / 10\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weights of the apples as a, b, and c where a < b < c\n    a, b, c = symbols('a b c')\n\n    # If Tim eats the largest apple, the mean of the remaining is 70\n    # (a + b) / 2 = 70 -> a + b = 140\n    equation1 = Eq(a + b, 140)\n\n    # If Tim eats the smallest apple, the mean of the remaining is 105\n    # (b + c) / 2 = 105 -> b + c = 210\n    equation2 = Eq(b + c, 210)\n\n    # a, b, c are positive integers (weights in grams)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # The weight difference between heaviest (c) and lightest apple (a)\n    return solutions[c] - solutions[a]\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the middle number of the three consecutive whole numbers be x\n    # Therefore, the three numbers are x-1, x, and x+1\n    # Their sum is (x-1) + x + (x+1) = 3x\n    # According to the problem, their sum is 60\n    # So we have 3x = 60\n    # Hence x = 60 / 3\n    x = 60 // 3\n    \n    # The largest number is x + 1\n    largest_number = x + 1\n    \n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10  # total litres of orange juice\n    per_container = 2  # litres in each container\n    \n    num_containers = total_juice / per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    # Total handshakes without restrictions\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Handshakes that did not happen within the group of four members\n    non_shaking_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n    # Subtracting the handshakes that did not happen from the total possible handshakes\n    ans = total_handshakes - non_shaking_handshakes\n    return ans\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Since this is a number puzzle, we can use a simple brute-force search\n    # to find the value of A that satisfies the given condition.\n\n    # We need to iterate through all possible values of A (from 0 to 9)\n    for A in range(10):\n        # Checking the vertical form:\n        #      A\n        # + A A A\n        # _______\n        #   9 9 9\n        #\n        # This translates to the equation: A + 111 * A == 999\n        if A + 111 * A == 999:\n            # If the condition is satisfied, we return the value of A\n            return A\n\n    # If no value of A satisfies the condition, we return None\n    return None\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for x in range(1, 10):\n        if x * 10 > x + 27:\n            return x\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob the fox is always the 3rd in line no matter the direction,\n    # it means the array must have 3 rows and 3 columns.\n    # because there must be 2 animals before and after him in each direction.\n\n    # Calculate the total number of animals\n    total_animals = 3 * 3\n\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of intervals between plum trees is one less than number of plum trees\n    plum_intervals = 41 - 1\n    \n    # Total length of the road based on plum trees\n    total_length = plum_intervals * 4\n    \n    # Number of intervals for pine trees will be total length divided by 5\n    pine_intervals = total_length // 5\n    \n    # Number of pine trees is one more than the number of intervals\n    num_pine_trees = pine_intervals + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * ((100 // 11) + 1)\n    largest_multiple = 11 * (300 // 11)\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    \n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the height of each stack.\n    # Let a, b, c be the number of one-cent, two-cent, and five-cent coins respectively.\n    x, a, b, c = symbols('x a b c')\n\n    # From the problem statement, we have the following equations:\n    equation1 = Eq(6 * x, 5 * b)  # Equivalent heights of one-cent and two-cent coins.\n    equation2 = Eq(4 * x, 3 * c)  # Equivalent heights of one-cent and five-cent coins.\n\n    # Total number of coins used by Sam is 124.\n    equation3 = Eq(a + b + c, 124)\n\n    # As the height of all three stacks is equal, we have:\n    equation4 = Eq(x, a)\n\n    # Now we solve the system of equations for a, b, c, and x.\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, x))\n\n    # Total value in cents is one-cent times a, plus two cents times b, plus five cents times c.\n    total_value = 1 * solutions[a] + 2 * solutions[b] + 5 * solutions[c]\n\n    return total_value\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2 / 5) * green_pens\n        red_pens = green_pens / 4\n        if blue_pens.is_integer() and red_pens.is_integer() and blue_pens + green_pens + red_pens < 100:\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    spent_on_books = initial_money * 0.25\n    remaining_after_books = initial_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(240)  # Replace 240 with any other value of m to get the monthly production"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for number in range(999999, 100000, -1):\n        if str(number) == str(number)[::-1] and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys = 216\n    girls = 153\n    new_children = 37\n\n    total_after_hour = boys + girls + new_children\n\n    return total_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    sell_price_per_unit = 3500\n    estimated_profit = 75000\n    production_cost_increase = 0.15\n    profit_reduction_fraction = 1/5\n\n    # Calculate the actual profit based on the profit reduction\n    actual_profit = estimated_profit - estimated_profit * profit_reduction_fraction\n\n    # Calculate the estimated production cost\n    estimated_production_cost = sell_price_per_unit - (estimated_profit / (estimated_profit / sell_price_per_unit))\n\n    # Calculate the increased production cost\n    increased_production_cost = estimated_production_cost * (1 + production_cost_increase)\n\n    # Calculate the actual sell price per unit based on increased production cost\n    actual_sell_price_per_unit = sell_price_per_unit - increased_production_cost + estimated_production_cost\n\n    # Calculate the number of refrigerators in the batch\n    number_of_refrigerators = actual_profit / (sell_price_per_unit - actual_sell_price_per_unit)\n\n    return int(number_of_refrigerators)\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # in meters\n    short_by_m = 0.10  # 10 cm is 0.10 meters\n\n    actual_length_m = desired_length_m - short_by_m\n\n    return actual_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_marbles = symbols('initial_marbles')\n\n    # Wei Yan gave 3/8 of his marbles away\n    after_friends = initial_marbles * (5/8)\n    # He then gave 5/7 of the remaining marbles to his brother\n    after_brother = after_friends * (2/7)\n    # His cousin gave him 408 marbles\n    final_marbles = after_brother + 408\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * initial_marbles)\n\n    solution = solve(equation, initial_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_sum = sum(pattern)\n    pattern_length = len(pattern)\n\n    full_patterns_count = 41 // pattern_length\n    remaining_numbers_count = 41 % pattern_length\n\n    total_sum = full_patterns_count * pattern_sum + sum(pattern[:remaining_numbers_count])\n\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    total_amount = 47\n    for two_p in range(0, total_amount // 2 + 1):\n        for five_p in range(0, total_amount // 5 + 1):\n            if (two_p * 2 + five_p * 5 == total_amount):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    # Calculate the numerator and denominator separately\n    numerator = (9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11\n    denominator = 1/8 - 1/9 + 1/10 - 1/11\n\n    # Divide the numerator by the denominator\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's age when he notices the age reversal\n    brian_age = 14\n    father_age = 41\n    age_diff = father_age - brian_age\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    # Each combination is counted 3! (6) times because of arranging 3 piles in any order\n    return count // 6\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    a = 654876\n    b = 279745\n    \n    rounded_a = round(a, -2)\n    rounded_b = round(b, -2)\n    \n    ans = rounded_a - rounded_b\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_pins = total_pins_needles - sold_pins\n    fraction_needles = 4/5\n\n    needles_initial = remaining_pins / (1 - fraction_needles)\n\n    remaining_needles = needles_initial * (1 - fraction_needles)\n\n    if remaining_needles == 455:  # Check if Paul's solution is correct\n        correct = True\n    else:\n        correct = False\n\n    return correct, int(remaining_needles)\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8 and x1 != x2:\n                count += 1\n    # Each pair is counted twice, so divide by 2\n    return count // 2\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass = 16  # in seconds\n    train_length = 480  # in meters\n    # speed = distance/time\n    speed = train_length / time_to_pass  # in meters per second\n    # convert speed from m/s to km/h by multiplying by 3.6\n    speed_kmh = speed * 3.6\n    return speed_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    fraction = 2 / 5\n    whole_number = 30\n    \n    ans = fraction * whole_number\n    \n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    fraction = 5 / 8\n    total = 4000\n    \n    ans = fraction * total\n    return ans\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n\n    length_of_road = (number_of_lampposts - 1) * distance_between_lampposts\n    \n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for page in range(1, 51):\n        if '3' in str(page):\n            erased_sum += page\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    num_pastas = 4\n    num_sauces = 3\n    num_toppings = 3\n\n    ans = num_pastas * num_sauces * num_toppings\n    return ans\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    diff = max(numbers) - min(numbers)\n    return diff\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags, leftover_poppers = divmod(total_guests, poppers_per_bag)\n\n    return leftover_poppers\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root, Rational\n    \n    getcontext().prec = 4  # setting decimal precision to 4 to ensure 3 decimal places\n\n    numerator = root(Decimal(-13.333333333333333), 3) * (Decimal(4.090909090909091)**2)\n    denominator = Decimal(59.24) - root(Decimal(11.11111111111111), 2)\n\n    ans = round(numerator/denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number_str[:46]\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    number = 999  # Start with the largest 3-digit number.\n    while True:\n        if (number % 5 == 3) and (number % 6 == 2) and (number % 7 == 1):\n            return number\n        number -= 1  # Decrement and check the condition again.\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = 10001\n    greatest_6_digit_palindrome = 999999\n    \n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return difference\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # To find out the maximum number of tries the warden needs, we need to consider the worst case scenario using the pigeonhole principle.\n    # In the worst case, for every room, the warden tries all keys except the correct one before finding the right key.\n    # For the first room, he might have to try all 10 keys to find the correct one.\n    # For the second room, he might try 9 keys because 1 key is already matched with the first room.\n    # Continuing this pattern, for the 10th room, there would only be 1 key left to try - the correct one.\n    # Therefore, the total number of tries in the worst case will be 10 + 9 + 8 + ... + 1, which is a sum of the first 10 natural numbers.\n\n    # Calculate the sum of the first n natural numbers using the formula: n*(n + 1)/2\n    n = 10\n    max_tries = n * (n + 1) // 2\n\n    return max_tries\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    total_pages = 1400\n    pages_read_initial = 220\n    pages_read_after_trip = 270\n    days_already_read = 2 + 3  # First two days and three days after the trip\n\n    average_read_per_day = (pages_read_initial + pages_read_after_trip) / days_already_read\n    remaining_pages = total_pages - (pages_read_initial + pages_read_after_trip)\n    additional_days_needed = remaining_pages // average_read_per_day\n    if remaining_pages % average_read_per_day != 0:\n        additional_days_needed += 1  # For any remainder pages, add one more day\n    \n    return additional_days_needed\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The pattern of the ones digit of 7^x repeats every 4 powers: 7, 9, 3, 1\n    ones_digit_pattern = [7, 9, 3, 1]\n    # Since the pattern repeats every 4, find the remainder of 2023 divided by 4 to find the corresponding ones digit\n    remainder = 2023 % 4\n    # The remainder will give the index in the ones_digit_pattern list\n    # Since we start counting from 1, we need to subtract 1 to get the correct index\n    ans = ones_digit_pattern[remainder - 1]\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    # The number of ways to climb a flight of stairs follows\n    # a pattern similar to the Fibonacci sequence\n    n_steps = 10\n    # Base cases for 0 and 1 steps\n    ways = [1] * (n_steps + 1)\n    # Calculate the number of ways for each step from 2 to 10\n    for i in range(2, n_steps + 1):\n        # The number of ways to reach step i is the sum of the ways\n        # to reach step i-1 (one step) and i-2 (two steps)\n        ways[i] = ways[i - 1] + ways[i - 2]\n    return ways[n_steps]\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    num1 = 2813\n    num2 = 3007\n    least_common_multiple = lcm(num1, num2)\n    return least_common_multiple\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    capacity = (two_seater_benches * 2) + (three_seater_benches * 3)\n    return capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_with_1_pound_coins = 16  # to get change, need to pay at least one pound more than the cost\n    change = paid_with_1_pound_coins - book_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(99, 120, 2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed of car B as 'x'\n    # Thus, the speed of car A will be 'x + 20'\n    x = symbols('x')\n\n    # Car A and B meet after 4 hours, so the distances they travel are equal to 4 times their speed\n    distance_A = 4 * (x + 20)\n    distance_B = 4 * x\n\n    # Continue to travel for another 3 hours at the car A's speed to reach place B\n    # The total distance is then the sum of the distance when they meet and the additional distance by car A\n    total_distance = distance_A + 3 * (x + 20)\n\n    # Since the total distance by both cars is the same, set up the equation and solve for 'x'\n    equation = Eq(distance_A + distance_B, total_distance)\n    speed_B = solve(equation, x)[0]\n    speed_A = speed_B + 20\n\n    # Calculate total distance\n    distance_between_A_and_B = 4 * speed_A  # distance when they meet (equal for both cars)\n    return distance_between_A_and_B\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n\n    # Given conditions\n    condition1 = Eq(footballs, 2/5 * basketballs)\n    condition2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    # Solve the equations for the number of footballs and basketballs\n    solutions = solve((condition1, condition2), (footballs, basketballs))\n\n    # Add the number of footballs and basketballs together to get the total\n    total = solutions[footballs] + solutions[basketballs]\n\n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * total_minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona needs to take out at least one glove of every color plus one to ensure a pair.\n    gloves_per_color = 1\n    num_colors = 5\n\n    # We use (gloves_per_color * num_colors) to take out one of each color, \n    # but then we need to take out one more glove to guarantee a matching pair.\n    ans = (gloves_per_color * num_colors) + 1\n\n    return ans\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = 30\n    end = 82\n    multiple_of = 8\n    \n    # Calculate the first multiple of 8 greater than or equal to start\n    first_multiple = ((start + multiple_of - 1) // multiple_of) * multiple_of\n    \n    # Calculate the last multiple of 8 less than or equal to end\n    last_multiple = (end // multiple_of) * multiple_of\n    \n    # Calculate the number of multiples\n    if last_multiple >= first_multiple:\n        count = (last_multiple - first_multiple) // multiple_of + 1\n    else:\n        count = 0\n    \n    return count\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2  # Each line can intersect with all other lines once\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    # Calculate the increased price during the Spring Festival\n    spring_festival_price = original_price * (1 + increase_rate)\n    \n    # Calculate the price after reduction during the Lantern Festival\n    lantern_festival_price = spring_festival_price * (1 - decrease_rate)\n\n    return lantern_festival_price\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    father_age_two_years_ago = flora_age_two_years_ago * 9\n    father_age_now = father_age_two_years_ago + 2\n    \n    return father_age_now\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of stickers Peter originally had as 'peter'.\n    peter = symbols('peter')\n\n    # According to the problem, Sam had 40 more stickers than Peter initially.\n    # So, Sam originally had 'peter + 40'.\n    sam = peter + 40\n\n    # Sam gave 20% of his stickers to Peter, so he is left with 80% of his stickers.\n    # Peter received 20% of Sam's original stickers.\n    sam_after = sam - 0.20 * sam\n    peter_after = peter + 0.20 * sam\n\n    # Peter gave 25% of his new sticker count to Sam.\n    # Sam received 25% of Peter's new sticker count.\n    sam_final = sam_after + 0.25 * peter_after\n    peter_final = peter_after - 0.25 * peter_after\n\n    # In the end, Sam had 96 stickers more than Peter.\n    # We set up the equation based on this condition:\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Now we solve the equation to find out how many stickers Peter had originally.\n    solutions = solve(equation, peter)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    # Initialize the number of sweets to the possible minimum\n    num_sweets = 31\n    while num_sweets < 40:\n        # Check if the number of sweets is a common multiple of 4 and 6\n        if num_sweets % 4 == 0 and num_sweets % 6 == 0:\n            return num_sweets\n        num_sweets += 1\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n    \n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n    \n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # speed of students = 8 km/h\n    # speed of teacher = 12 km/h\n    # Total time spent = 7.2 minutes = 7.2/60 hours\n\n    # Let the length of the line be x km\n    # When the teacher runs to the front and back, the distance he runs is 2x\n    # In the meantime, the students also move forward, making the distance to run back shorter\n\n    # Time for the teacher to reach the front is x/12 hours (distance/speed)\n    # Distance travelled by students in the meantime is 8 * (x/12)\n    # So, the remaining distance the teacher has to run back is x - 8*(x/12)\n    # Time for the teacher to run back is (x - 8*(x/12)) / 12\n    # Total time spent is the sum of the time to run to the front and back\n\n    # total_time_spent = (x/12) + ((x - 8*(x/12)) / 12)\n    # Convert minutes to hours for comparison: 7.2 minutes = 7.2 / 60 hours\n    total_time_spent = 7.2 / 60\n\n    # We'll solve the equation for x\n    # (x/12) + ((x - 8*(x/12)) / 12) = 7.2 / 60 \n    # Simplifying the equation gives 2x/12 - x/18 = 7.2 / 60\n\n    # Calculate x\n    x = (total_time_spent * 12 * 18) / (2*18 - 12)\n    \n    return x\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # In a single round-robin tournament, each team plays every other team once\n    # Number of games in a round-robin with n teams is C(n, 2), which is n*(n-1)/2\n    teams_per_group = 16 // 4  # 4 groups with equal number of teams\n    games_per_group = (teams_per_group * (teams_per_group - 1)) // 2\n    total_group_stage_games = games_per_group * 4  # 4 groups\n\n    # Calculate the number of games in the knockout stage\n    # Top 8: 4 games to determine top 4\n    # Top 4: 2 games to determine top 2\n    # Top 2: 1 game for the final\n    # 3rd place: 1 game to determine 3rd and 4th place\n    knockout_games = 8 - 1  # The last game isn't needed as the second to last game determines 1st and 2nd\n\n    total_games = total_group_stage_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    younger_current_age, older_current_age, younger_then_age, older_then_age = symbols('younger_current_age older_current_age younger_then_age older_then_age')\n    \n    # younger_then_age is given as 12\n    # older_then_age will be 27 in the future\n    \n    # When the older brother was the age of the younger brother's current age,\n    # the younger brother was 12.\n    equation1 = Eq(older_current_age - younger_current_age, younger_then_age)\n    \n    # When the younger brother becomes the age of the older brother's current age,\n    # the older brother will be 27.\n    equation2 = Eq(older_current_age + (older_current_age - younger_current_age), older_then_age)\n    \n    # Substitute the known values\n    known_values = {younger_then_age: 12, older_then_age: 27}\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (younger_current_age, older_current_age), dict=True)\n    \n    # Extract the older brother's current age\n    older_age_solution = [s[older_current_age] for s in solutions if s[older_current_age] > 12][0]\n    \n    return older_age_solution\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for number in range(8, 86):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for num in range(2, 51, 2):  # Starting from 2, end at 50 (25 even numbers), step by 2\n        count += str(num).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 125  # 1.25 pounds equals 125 pence\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    \n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse Ken's action\n    remaining = (remaining + 1) * 2\n    # Reverse Nini's action\n    remaining = (remaining - 3) * 2\n    # Reverse Ivy's action\n    remaining = (remaining + 2) * 2\n    # Reverse Eddie's action\n    remaining = (remaining - 1) * 2\n    return remaining\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Climb for the first 5 days and the 6th day\n    remaining_distance = 18 - total_climbed  # Distance left after the 6th day\n    slide_down = 7 - remaining_distance  # Slide down amount to be at the same point at the end of the 6th night\n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let g be the number of girls and b be the number of boys\n    # We have the equation: 3 * b = g (three times as many girls as boys)\n    # Each girl took 2 paintbrushes, and each boy took 3. In total, they took 99 paintbrushes\n    # So we have the equation: 2 * g + 3 * b = 99\n    # Let's solve this system of equations\n    \n    g = 3 * b  # From the first information\n\n    # Find the number of boys by substituting g = 3b into the second equation:\n    # 2(3b) + 3b = 99\n    # 6b + 3b = 99\n    # 9b = 99\n    b = 99 // 9\n\n    # Now calculate the number of girls\n    g = 3 * b\n    \n    return g\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n    A, B, C = 12, 16, 20\n    greatest_common_factor = gcd(A, gcd(B, C))\n    return greatest_common_factor\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance be d km\n    # Let the actual time to cover the distance be t hours\n    # When Mike travels at 4 km/h, he is 20 minutes (1/3 hours) late, so:\n    # t + 1/3 = d / 4  (Equation 1)\n\n    # When Mike travels at 6 km/h, he is 10 minutes (1/6 hours) early, so:\n    # t - 1/6 = d / 6  (Equation 2)\n\n    # Let's solve the two equations for d by eliminating t:\n    # Equation (1) multiplied by 6 gives:\n    # 6t + 2 = d * 6/4 (Equation 3)\n\n    # Equation (2) multiplied by 4 gives:\n    # 4t - 2/3 = d * 4/6 (Equation 4)\n\n    # Now, let's subtract Equation 4 from Equation 3:\n    # (6t + 2) - (4t - 2/3) = (d * 6/4) - (d * 4/6)\n    # 6t - 4t + 2 + 2/3 = d * (6/4 - 4/6)\n    # 2t + 8/3 = d * (9/8 - 2/3)\n    # 2t + 8/3 = d * (27 - 16) / (8 * 3)\n    # 2t + 8/3 = d * 11 / 24\n\n    # Now, we will eliminate t by subtracting Equation 2 from Equation 1:\n    # (d / 4) - (d / 6) = 1/3 + 1/6\n    # (3d - 2d) / 12 = 6 / 18\n    # d / 12 = 6 / 18\n    # d = 72 / 18\n    d = 4\n\n    return d\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    total_participants = total_boys + total_girls\n    average_total = 82\n \n    total_score_boys = total_boys * average_boys\n    total_score_participants = total_participants * average_total\n\n    total_score_girls = total_score_participants - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    \n    # Length of pieces each one cuts into\n    alyson_piece = 2\n    clara_piece = 3\n    joyce_piece = 5\n    \n    # Least common multiple is the shortest length of string that can be cut\n    # with no remainder and divided equally among Alyson, Clara, and Joyce\n    shortest_length = lcm(alyson_piece, clara_piece, joyce_piece)\n    \n    return shortest_length\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all estimates to centimeters\n    height_in_m = 5 * 100  # m to cm conversion: 1m = 100cm\n    height_in_cm = 120\n    height_in_mm = 50 / 10  # mm to cm conversion: 10mm = 1cm\n    height_in_feet = 8 * 30.48  # feet to cm conversion: 1ft = 30.48cm\n    \n    # Criteria for a plausible height for a pupil (using average child heights):\n    # We assume the height of a pupil to be between 90cm (very short) and 190cm (very tall)\n    plausible_heights = [\n        h for h in [height_in_m, height_in_cm, height_in_mm, height_in_feet]\n        if 90 <= h <= 190\n    ]\n    \n    # Since there's only one plausible height, we'll return its original value\n    if len(plausible_heights) == 1:\n        if plausible_heights[0] == height_in_cm:\n            return \"120cm might be correct\"\n        elif plausible_heights[0] == height_in_mm:\n            return \"50mm might be correct\"\n        elif plausible_heights[0] == height_in_feet:\n            return \"8 feet might be correct\"\n        elif plausible_heights[0] == height_in_m:\n            return \"5m might be correct\"\n    else:\n        return \"None of the estimates is correct\"\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = 121 - 124  # negative because the sequence is decreasing\n    n = 15\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate population size.\n\n    # Number of fish marked in the first catch \n    marked_fish_first_catch = 100\n\n    # Total number of fish caught in the second catch\n    total_fish_second_catch = 200\n\n    # Number of marked fish caught in the second catch\n    marked_fish_second_catch = 25\n\n    # Proportion of marked fish in the second catch\n    proportion_marked_second_catch = marked_fish_second_catch / total_fish_second_catch\n\n    # Estimating the total population size (N) based on the proportion\n    estimated_population_size = marked_fish_first_catch / proportion_marked_second_catch\n\n    return round(estimated_population_size)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n\n    return days_final\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls - boys, 12)\n    equation2 = Eq(girls + boys, 100)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    # Define the domain of the function\n    X = range(1, 11)\n    \n    # Initialize the count of valid mappings\n    count_mappings = 0\n    \n    # Iterate over all possible mappings\n    from itertools import permutations\n    for f in permutations(X):\n        # Check condition ①: f(f(i)) should be i for all i\n        if all(f[f[i-1]-1] == i for i in X):\n            # Check condition ②: |f(i)-i| should be at most 2\n            if all(abs(f[i-1] - i) <= 2 for i in X):\n                count_mappings += 1\n\n    return count_mappings\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wakeup_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = wakeup_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    school_arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = school_arrival_time - timedelta(minutes=5)\n    \n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    for i in range(78 // 2 + 1):  # Maximum possible number of 2-gram weights\n        for j in range(77 // 3 + 1):  # Maximum possible number of 3-gram weights\n            if 2 * i + 3 * j == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2\n    fraction_part = 1 / 2\n    total_quarters = (whole_number + fraction_part) * 4\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_for_four_assignments = 96 + 85 + 89 + 92\n    average_score = 90\n    num_assignments = 5\n\n    total_score = average_score * num_assignments\n    score_fifth_assignment = total_score - total_for_four_assignments\n\n    return score_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy import symbols, solve\n    \n    cards = symbols('cards')\n    equation1 = (cards % 4 == 3)\n    equation2 = (cards % 5 == 4)\n    equation3 = (cards % 7 == 6)\n    \n    ans = solve((equation1, equation2, equation3), cards)\n    \n    return min(ans)\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(boys - girls, 90)\n\n    total_pupils = 1690\n    girls_can_swim = 31 / (31 + 49) * girls\n    girls_cannot_swim = 49 / (31 + 49) * girls\n    boys_can_swim = symbols('boys_can_swim')\n    boys_cannot_swim = boys_can_swim + 120\n\n    equation2 = Eq(boys, boys_can_swim + boys_cannot_swim)\n    equation3 = Eq(girls, girls_can_swim + girls_cannot_swim)\n    equation4 = Eq(girls + boys, total_pupils)\n\n    solutions = solve((equation1, equation2, equation3, equation4, boys_can_swim), (girls, boys, boys_can_swim, boys_cannot_swim, girls_can_swim))\n\n    cannot_swim_total = solutions[boys_cannot_swim] + solutions[girls_cannot_swim]\n\n    return cannot_swim_total\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure at least 5 different colors with at least 10 pencils of each,\n    # we will calculate it by getting 9 pencils from 4 colors and 10 pencils\n    # from the 5th color to satisfy the requirement.\n\n    # Picking 9 from each of the first 4 colors to ensure\n    # we do not have 10 of any of these colors\n    first_four_colors = 4 * 9\n\n    # Then we need 10 from the 5th color to ensure at least 5 different colors\n    fifth_color = 10\n\n    # The minimum number of pencils that must be drawn\n    minimum_pencils = first_four_colors + fifth_color\n\n    return minimum_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "import math\n\ndef solution():\n    pupils = 200\n    coach_capacity = 34\n    coaches_needed = math.ceil(pupils / coach_capacity)\n    return coaches_needed\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Find the sum of cubes for first 20 terms using the given formula\n    sum_1_to_20 = sum(range(1, 21))  # Sums numbers from 1 to 20\n    sum_cubes_1_to_20 = sum_1_to_20 ** 2  # Squares the sum to get sum of cubes\n\n    # Find the sum of cubes for first 9 terms using the same formula\n    sum_1_to_9 = sum(range(1, 10))  # Sums numbers from 1 to 9\n    sum_cubes_1_to_9 = sum_1_to_9 ** 2  # Squares the sum to get sum of cubes\n\n    # Subtract the sum of cubes from 1 to 9 from the sum of cubes from 1 to 20\n    ans = sum_cubes_1_to_20 - sum_cubes_1_to_9\n    return ans\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations('CYZZ'))\n    return len(arrangements)\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    # Initial ratio\n    equation1 = Eq(pip/bud, 4/7)\n    \n    # After Santa gave Bud five sweets, new ratio\n    equation2 = Eq((pip)/(bud + 5), 8/15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    # pip represents the number of sweets Pip had\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter length\n    perimeter = 2 * (144 + 204)\n    \n    # Subtracting the corners, since they are already counted\n    number_of_wheat = 116 - 4\n\n    # The distance between each wheat is the total length of the perimeter,\n    # divided by the number of spaces between the wheats (which is the number of wheats minus 1)\n    distance_between_wheat = perimeter / number_of_wheat\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20\n    last_digit_7 = 7 ** 30\n    last_digit = (last_digit_5 * last_digit_7) % 10\n    return last_digit\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import isprime\n\n    primes = [p for p in range(3, 46) if isprime(p)]\n\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and B != C and A != C:\n                    if not (A + B == C or A + C == B or B + C == A):\n                        if B - 1 != 7:\n                            continue\n                        if isprime(A + B) and isprime(A + C) and isprime(B + C):\n                            if 2 * C in [A + B, A + C, B + C]:\n                                return A + B + C\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    return gcd(39, 52)\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Simon's equation: 4A + 4B = 36\n    Simons_eq = Eq(4 * A + 4 * B, 36)\n\n    # Peter's equation: 2A + 3B = 22\n    Peters_eq = Eq(2 * A + 3 * B, 22)\n\n    # Solve the system of equations\n    solutions = solve((Simons_eq, Peters_eq), (A, B))\n\n    # Calculate the score for 3A + 5B\n    score = solutions[A] * 3 + solutions[B] * 5\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe shares his chocolate bar with his friend\n    # which means the bar is divided into two equal parts\n    total_squares = 16\n    joe_squares = total_squares // 2  # Using integer division for whole squares\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    children_between = 2\n    amanda_from_end = 7\n\n    total_children = laura_position + children_between + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60  # 24 hours/day, 60 minutes/hour, 60 seconds/minute\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_per_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # Eddie and his parents can be considered as one entity. \n    # So we have to arrange this entity and the rest of the family members.\n    # Let's assume there are n family members besides Eddie and his parents.\n    # The total family size then is n + 1 (Eddie and his parents as one entity)\n    total_family_size_with_entity = n + 1\n    \n    # The family (Eddie and parents as one entity) can be arranged in factorial(n+1) ways.\n    family_arrangements = factorial(total_family_size_with_entity)\n    \n    # Inside this entity, Eddie and his parents can be arranged among themselves in factorial(3) ways.\n    eddie_and_parents_arrangements = factorial(3)\n    \n    # Total arrangements are the product of family arrangements and Eddie-parents arrangements.\n    total_arrangements = family_arrangements * eddie_and_parents_arrangements\n    \n    return total_arrangements\n\n# Assuming there are 2 other family members besides Eddie and his parents.\nn = 2\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number.\n    A = 2\n    # B is the smallest composite number.\n    B = 4\n    # C is neither prime number nor composite number or zero.\n    C = 1\n    # D is 2 less than the smallest prime number.\n    D = A - 2\n    # E is the largest composite number up to 10.\n    E = 10\n    # F only has factors 1 and 5.\n    F = 5\n    # G is the greatest factor of 8.\n    G = 4\n    # H is the lowest multiple of 6.\n    H = 6\n    \n    # Construct the phone number ABCDEFGH\n    ans = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    \n    return ans\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "from sympy import symbols, Eq, solve, isprime\n\ndef solution():\n    # Set up the equation from the given information\n    a, b, c = symbols('a b c')\n    equation = Eq(1/a + 1/c, 2/b)\n    # We know that c is the product of a and b (c = a*b)\n    # Back substitute c with a*b\n    equation = equation.subs(c, a*b)\n    # Simplify and solve the equation for a in terms of b\n    potential_solutions = solve(equation, a)\n\n    # Find prime values for a and b that satisfy the conditions and give the minimal a+b+c\n    minimal_sum = float('inf')\n    for expr in potential_solutions:\n        for b_value in range(2, 100):  # Check for prime b in a reasonable range\n            if isprime(b_value):\n                a_value = expr.subs(b, b_value)\n                if isprime(a_value) and a_value.is_Integer and a_value > 0:\n                    c_value = a_value * b_value\n                    current_sum = a_value + b_value + c_value\n                    if current_sum < minimal_sum:\n                        minimal_sum = current_sum\n                        break  # No need to check larger 'b' once the solution is found\n    return minimal_sum\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    # Let the cargo of truck C be x kilograms\n    x = symbols('x')\n    # According to the problem, we set up the equations\n    # B = C + 180 and A = 4C\n    # Since C is half of B, we have B = 2C\n    # So, 2C = C + 180 which gives us C = 180\n    # Then, A = 4 * 180 and B = 2 * 180\n    # We need to find the sum of cargos A and B\n    A = 4 * x\n    B = 2 * x\n    C = x\n    \n    # Now we will solve the system of equations to find the value of x\n    equation = Eq(B, C + 180)\n    cargo_C = solve(equation, x)[0]\n    cargo_A = 4 * cargo_C\n    cargo_B = 2 * cargo_C\n    \n    # The sum of cargos for trucks A and B\n    total_cargo_AB = cargo_A + cargo_B\n    return total_cargo_AB\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    perm_set = set(permutations(digits, 4))\n    return len(perm_set)\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # The number of cow-days for the pasture to be consumed is the same in both scenarios.\n    cow_days1 = 25 * 10\n    cow_days2 = 15 * 20\n    # Since the pasture can feed the cows for the same duration in both scenarios,\n    # we assure that the amount of cow-days is the same.\n    assert cow_days1 == cow_days2\n    cow_days = cow_days1  # Either one can be used, they are the same.\n    \n    # We need to find out how many cows can be fed for 50 days\n    # cow_days = number_of_cows * number_of_days\n    # number_of_cows = cow_days / number_of_days\n    number_of_days = 50\n    number_of_cows = cow_days / number_of_days\n    \n    return number_of_cows\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    days = 0\n    pages_read = 0\n\n    while pages_read < total_pages:\n        days += 1\n        pages_read += days\n\n    return days\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    actual_minuend = 166\n\n    correct_difference = actual_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = 3 * first_day\n    third_day = (5/3) * second_day\n\n    total_sold = first_day + second_day + third_day\n\n    return total_sold\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    additional_discount = 100\n    sales_tax_rate = 0.10\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price_before_tax = discounted_price - additional_discount\n    final_price_after_tax = final_price_before_tax * (1 + sales_tax_rate)\n\n    return final_price_after_tax\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Since the thousands and units digits are the same in Pip's number, let's denote them as 'a'.\n    # Let's denote the hundreds and tens digits as 'b' and 'c', respectively.\n    # Therefore, Pip's number can be represented as 1000a + 100b + 10c + a, or simplified: 1001a + 100b + 10c.\n    # Bud's number, on the other hand, is the reverse of Pip's number with 'a' as the tens and 'c' as the units,\n    # resulting in the number 10a + 1000c + 100b + 10000a, or simplified: 10010a + 100b + 1000c.\n    # The problem states that Pip's number + Bud's number = 5510.\n    # So, the equation is: 1001a + 100b + 10c + 10010a + 100b + 1000c = 5510\n    # Simplifying, we get: 11011a + 200b + 1010c = 5510\n\n    # Now let's iterate through the possible values of 'a', 'b', and 'c' (0-9) since they are digits of the numbers.\n    for a in range(0, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if 11011 * a + 200 * b + 1010 * c == 5510:\n                    # Construct Pip's number from the digits a, b, c.\n                    pips_number = 1000 * a + 100 * b + 10 * c + a\n                    return pips_number\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    max_cakes = 250 / flour_per_cake\n    return int(max_cakes)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let the initial number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio is 1:2, meaning (3x - 48) / 5x = 1/2\n    \n    # Based on the proportion we get the equation:\n    # 2 * (3x - 48) = 1 * 5x\n    # 6x - 96 = 5x\n    # x = 96\n    \n    x = 96\n    # The initial number of lemons was 5x\n    lemons_initial = 5 * x\n    return lemons_initial\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # We consider 3 maths books as one single unit and 2 English books as one single unit.\n    # There are 3 units (maths, English, and the other 3 books) plus the 3 other single books \n    # which gives us a total of 6 units/items to arrange in a row.\n    total_units = 6\n    \n    # The number of ways to arrange these 6 units is 6 factorial (6!).\n    units_arrangement = factorial(total_units)\n    \n    # But, within the single units of maths and English books,\n    # we can also arrange the books in those units among themselves.\n    # There are 3! ways to arrange 3 maths books and 2! ways to arrange 2 English books.\n    maths_arrangements = factorial(3)\n    english_arrangements = factorial(2)\n    \n    # The total number of arrangements is the product of these three factorial calculations.\n    total_arrangements = units_arrangement * maths_arrangements * english_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return 20 * (8 / 32)\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Total number of students participating in at least one competition\n    # is the sum of students in each competition minus the number of students in both competitions\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):  # Page numbers go from 1 to 200 inclusive\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Since there are two colors, if Cindy takes out 3 socks, she could still possibly have one of each color.\n    # To guarantee a pair of the same color, Cindy will need to take out one more, regardless of the color.\n    return 3 + 1  # 3 for the possibility of one of each color and 1 more for the guaranteed pair\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange in a row\n    \n    # number of ways to arrange r statues out of n is given by permutation formula: P(n, r) = n! / (n-r)!\n    permut = factorial(n) // factorial(n - r)\n    \n    return permut\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    old_price = 10  # price in pence\n    new_price = 100  # price in pence (1.00 pound = 100 pence)\n    increase = new_price - old_price\n    percentage_increase = (increase / old_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    initial_cost = 80\n    gst_rate = 0.08\n    final_cost = initial_cost * (1 + gst_rate)\n    return final_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bicycles, tricycles = symbols('bicycles tricycles')\n    # Let 'bicycles' be the number of bicycles and 'tricycles' be the number of tricycles.\n    # Each bicycle has 2 wheels, and each tricycle has 3 wheels.\n    \n    # Total number of vehicles is the sum of bicycles and tricycles, which is 300\n    equation1 = Eq(bicycles + tricycles, 300)\n    \n    # Total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    # 3 * tricycles - 2 * bicycles = 180\n    equation2 = Eq(3 * tricycles - 2 * bicycles, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n    \n    # We need to find the number of bicycles\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_total_rabbits = 1 + 2 + 2  # black + white + grey\n    grey_pattern_count = grey_rabbits // 2\n    \n    # Full pattern calculation\n    if grey_rabbits % 2 == 0:\n        total_rabbits = grey_pattern_count * pattern_total_rabbits\n    # Additional black rabbit if the last grey rabbit is without its pair\n    else:\n        total_rabbits = grey_pattern_count * pattern_total_rabbits + 1\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    morning_pencils = 5\n    afternoon_pencils = morning_pencils + 4\n    return afternoon_pencils\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    number_minus_six = 9\n    number = number_minus_six + 6\n    return number\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return (2015 * 2015) - (2016 * 2014)\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n    \n    not_foil = total_biscuits - foil_wrappers\n    chocolate = chocolate_with_foil + not_chocolate_not_foil - not_foil\n    \n    return chocolate\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let distance be d and original speed be s (in m/min)\n    d, s = symbols('d s', positive=True, real=True)\n    \n    # If speed increases by 25%, new speed is 1.25s\n    # New time is d / (1.25s), which is 20 minutes less than original time, so d/s - d/(1.25s) = 20\n    eq1 = Eq(d/s - d/(1.25*s), 20)\n\n    # If speed decreases by 45 m/min, new speed is s-45\n    # The time taken for him to cover the same certain distance will increase by 75%\n    # New time is d / (s-45), which is 1.75 times the original time, so d/(s-45) = 1.75 * (d/s)\n    eq2 = Eq(d / (s-45), 1.75 * (d/s))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (d, s))\n\n    # Return the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimals = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimals, 1)\n    tongtong_is_correct = rounded_number == 9764.0\n    ans = rounded_number if tongtong_is_correct else rounded_number\n    return ans\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Number of 5s in A\n    num_fives = 15\n    \n    # Number of 2s in A\n    num_twos = 10\n    \n    # The number of consecutive zeros at the end of a number is\n    # equal to the number of pairs of 2 and 5 you can form in its\n    # prime factorization since 10 = 2 * 5\n    ans = min(num_fives, num_twos)\n    \n    return ans\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "from sympy import symbols, solve, isprime, sqrt\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    x = a + b - c\n    y = a + c - b\n    z = b + c - a\n    \n    # Given equations\n    equation1 = x**2 - y\n    equation2 = sqrt(z) - sqrt(y) - 2\n    \n    results = set()\n    \n    # Prime number generator\n    def prime_generator(limit):\n        for num in range(2, limit):\n            if isprime(num):\n                yield num\n    \n    # Trying prime numbers within a reasonable range\n    for a_val in prime_generator(100):\n        for b_val in prime_generator(a_val): # b <= a\n            for c_val in prime_generator(b_val): # c <= b\n                if solve([equation1.subs({a: a_val, b: b_val, c: c_val}),\n                          equation2.subs({a: a_val, b: b_val, c: c_val})]):\n                    results.add(a_val * b_val * c_val)\n                    \n    # Convert the set to a sorted list to return a consistent result\n    ans = sorted(list(results))\n    \n    return ans\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    count = 0\n    for perm in permutations(digits):\n        for i in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    # Since Bala is directly behind Ali, Bala is both in front of the 10 people\n    # behind him and behind the 14 people in front of Ali. So, there is 1 person (Bala)\n    # between the 14 people in front of Ali and the 10 people behind Bala.\n    \n    total_people_in_queue = people_in_front_of_ali + 1 + people_behind_bala\n\n    return total_people_in_queue\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    total_work = 1\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    work_done_in_half_time = 0.5 * total_work\n\n    for kevin_days_off in range(13):  # Kevin can take up to 12 days off\n        work_done_by_ivy = ivy_rate * 12\n        work_done_by_kevin = kevin_rate * (12 - kevin_days_off)\n\n        if work_done_by_ivy + work_done_by_kevin >= work_done_in_half_time:\n            return kevin_days_off\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's call the number of crystals Jason had at first as 'x'\n    x = symbols('x')\n\n    # According to the problem, Jason sold (x/2) + 10 crystals to Yvonne\n    # Then mined 20 more\n    # Then sold 14 crystals to Cherlyn\n    # He has 35 crystals in the end\n    # The equation for what he has at the end is ((x - ((x/2) + 10) + 20) - 14 = 35\n    # Simplifying the equation: x - (x/2) - 10 + 20 - 14 = 35\n    # Which simplifies to: x/2 + (-4) = 35\n    # Then x/2 = 39\n    # Multiplying both sides by 2 to isolate x: x = 78\n\n    # Let's build this equation with sympy and solve for x\n    equation = Eq((x / 2) - 10 + 20 - 14, 35)\n    \n    # Solving the equation for x (the initial number of crystals)\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]  # We return the first solution as there should be only one\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_price_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100\n\n    max_plants = budget_pence // plant_price_pence\n\n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y = symbols('x y')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the smaller number\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if all(x % 2 == 0 or any(x % i == 0 for i in range(3, int(x ** 0.5) + 1, 2)) for x in [A, B, C, D]):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Since we want at least one of each color, we have to consider the worst-case scenario\n    # where we pick all balls of a color(s) before getting at least one of all.\n    # Using the Pigeonhole Principle, to guarantee we have all three colors, we take one less\n    # from the total of each of the other two largest amounts and then add one to ensure the\n    # third color is picked:\n    # Total = (10 - 1) + (13 - 1) + 1\n    ans = (10 - 1) + (13 - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "from math import factorial\n\ndef solution():\n    target = 2004 * 7 * 20\n    n = 1\n    \n    while True:\n        product = factorial(n + 2) // factorial(n - 1)\n        if product % target == 0:\n            return n + n + 1 + n + 2\n        n += 1\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    total_children = 8\n    # Each child gets at least one apple, subtract 7 (since one apple for each of the other 7 children)\n    remaining_apples = total_apples - (total_children - 1)\n    # Divide the remaining apples by the number of children to find the least possible number for the child with the most\n    least_for_max = remaining_apples // total_children\n    # The child with the most apples would get the remainder + the least amount determined by division\n    ans = least_for_max + (remaining_apples % total_children)\n    return ans\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    total_teams = 6\n    games_played = comb(total_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    return (31 + 29) * (31 - 29)\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Since black_dodges are 25, and total blue_cars are 18 (blue_fords + blue_dodges)\n    # the number of black_fords would be the fords count minus the blue_fords\n    # and the total cars is the sum of black_dodges, blue_dodges, black_fords, blue_fords.\n    # We use simple algebra to solve for blue_fords:\n    # blue_fords + blue_dodges = blue_cars (1)\n    # black_dodges + blue_dodges + black_fords + blue_fords = total_cars (2)\n    # black_fords = fords - blue_fords (3)\n    # Substituting (1) and (3) into (2) we have:\n    # black_dodges + blue_cars + fords = total_cars (4)\n    # As we know all values except blue_fords, we can find it by transforming (4):\n    # blue_fords = total_cars - black_dodges - blue_cars - (fords - blue_fords)\n    # blue_fords = total_cars - black_dodges - blue_cars - fords + blue_fords\n    # 2 * blue_fords = total_cars - black_dodges - blue_cars - fords\n    # blue_fords = (total_cars - black_dodges - blue_cars - fords) / 2\n\n    blue_fords = (total_cars - black_dodges - blue_cars - fords) / 2\n\n    return int(blue_fords)\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n    \n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    ans = math.gcd(math.gcd(num1, num2), num3)\n    \n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # Define the total number of counts\n    total_counts = 30\n    \n    # Define the final position on the clock\n    final_position = 10\n    \n    # Since the clock numbers are from 1 to 12, the counting is periodic with a period of 12\n    periodicity = 12\n\n    # Counting backwards from the final position to find the starting position\n    # Subtract 1 because we do not count the starting position\n    starting_position = (final_position - (total_counts % periodicity) + periodicity - 1) % periodicity\n    \n    # If the starting position is 0, it means it is 12 o'clock, because we are using a 12-hour clock\n    if starting_position == 0:\n        starting_position = periodicity\n    \n    return starting_position\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_correct = 3\n    score_wrong = -2\n    total_score = 125\n\n    # Let's call the number of correct answers 'c' and the number of wrong answers 'w'.\n    # Then we have two equations based on the problem:\n    # c + w = total_questions\n    # score_correct * c + score_wrong * w = total_score\n    \n    # We can express w in terms of c using the first equation: w = total_questions - c\n    # Plugging w into the second equation, we get the number of correct answers 'c':\n    \n    # score_correct * c + score_wrong * (total_questions - c) = total_score\n    # (score_correct - score_wrong) * c = total_score - score_wrong * total_questions\n    # c = (total_score - score_wrong * total_questions) / (score_correct - score_wrong)\n    \n    correct_answers = (total_score - score_wrong * total_questions) // (score_correct - score_wrong)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    while len(sequence) < 2011:\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        sum_of_series = sum(range(23, 2*k, 2))\n        m = sum_of_series ** 0.5\n        if m.is_integer():\n            return int(m)\n        k += 1\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bob, colin = symbols('alan bob colin')\n    \n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    grass_per_cow_per_day = 1\n    number_of_cows = 5\n    number_of_days = 3\n\n    total_grass_eaten = grass_per_cow_per_day * number_of_cows * number_of_days\n\n    return total_grass_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    ellie = Eq(2 * banana + 3 * apple, 3)\n    beth = Eq(3 * banana + 2 * apple, 4)\n\n    solutions = solve((ellie, beth), (banana, apple))\n\n    annabella = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return annabella\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oil_sold = symbols('oil_sold')\n    big_bucket_original = 89\n    small_bucket_original = 45\n\n    big_bucket_after = big_bucket_original - oil_sold\n    small_bucket_after = small_bucket_original - oil_sold\n\n    equation = Eq(big_bucket_after, 12 * small_bucket_after)\n\n    oil_sold_amount = solve(equation, oil_sold)\n\n    return oil_sold_amount[0]\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Distance covered in the first 2 hours\n    distance_first_part = 2 * 40  # 2 hours * 40 km/h\n    \n    # Distance covered in the second part\n    distance_second_part = 280  # given directly\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_second_part\n    \n    # Time taken for the second part\n    time_second_part = distance_second_part / 70  # 280 km / 70 km/h\n    \n    # Total time taken\n    total_time = 2 + time_second_part  # 2 hours for first part + time for second part\n    \n    # Average speed calculation\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    # Let the common multiple of the ratio be x\n    # Hence, the number of pages read per hour will be:\n    # A: 3x, B: 4x, C: 5x\n    # According to the problem, we have:\n    # C = A + B - 144\n    # 5x = 3x + 4x - 144\n    # 5x = 7x - 144\n    # Solving for x, we get:\n    x = 144 // 2  # 2x = 144 -> x = 72\n    \n    # Now, the total number of pages read per hour by all students will be:\n    # A + B + C = 3x + 4x + 5x = 12x\n    total_pages = 12 * x\n    return total_pages\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_strawberries_initial = 86\n    lena_strawberries_given_away = 29\n    lena_strawberries_final = 100\n\n    strawberries_received_from_mother = lena_strawberries_final - (lena_strawberries_initial - lena_strawberries_given_away)\n\n    return strawberries_received_from_mother\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total number of visitors be x\n    x = symbols('x')\n    # Given that 37% of the visitors were men, i.e., 0.37 * x\n    men = 0.37 * x\n    # Remainder are women and children i.e., x - men\n    women_children = x - men\n\n    # Women and children are in the ratio 4:5, so let women be 4*y and children 5*y\n    y = symbols('y')\n    women = 4 * y\n    children = 5 * y\n    \n    # Equation for the ratio of women and children to the total (women_children)\n    equation1 = Eq(women + children, women_children)\n    \n    # There are 12 more men than children\n    equation2 = Eq(men - children, 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Number of women\n    women_number = women.subs(y, solutions[y])\n    \n    return women_number.evalf()\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # from 10 to 99 inclusive\n    numbers_without_six = 8 * 8  # choices for tens digit (1-9 except 6) * choices for ones digit (0-9 except 6)\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    \n    ans = (end_date - start_date).days + 1  # Include both start and end date\n    \n    return ans\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of each component before raising it to the power of 3\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n\n    # Sum the last digits and find the last digit of the sum\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n\n    # Calculate the last digit of the sum raised to the power of 3\n    ans = (last_digit_sum ** 3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    combined_speed = speed_a + speed_b\n    time_to_meet = distance / combined_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    from math import comb\n\n    lines = 13\n    max_intersections = comb(lines, 2)\n\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    ans = 9744 // 7\n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 20 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    import math\n    \n    pencils = 28\n    pens = 63\n    gcd = math.gcd(pencils, pens)\n    \n    return gcd\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # Let x be the total number of watermelons Helen started with\n    # On the first day, she sold 1/3 of her watermelons, so 2/3 remain\n    # On the second day, she sold 3/5 of the remaining watermelons, so 2/5 of 2/3 remain\n    # After both days, she has 48 watermelons left, which is the remaining 2/5 of 2/3 of x\n    # We can set up an equation: (2/5) * (2/3) * x = 48\n    # solving for x gives us the starting number of watermelons\n\n    from sympy import Symbol, Eq, solve\n\n    x = Symbol('x')\n    equation = Eq((2/5) * (2/3) * x, 48)\n    solution = solve(equation, x)\n\n    # We only expect one solution for the number of watermelons\n    return solution[0]\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n    # Total cost of a mango and an orange\n    equation1 = Eq(mango + orange, 3.80)\n    # Total cost of a mango and a pear\n    equation2 = Eq(mango + pear, 3.40)\n    # Kelly's total cost for 4 mangoes, 2 pears and an orange\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price = 95  # Price per packet of pasta in pence\n    num_pasta = 6\n    num_rice = 5\n    total_spent = 1170  # Total spent in pence\n\n    rice = symbols('rice')  # Price per packet of rice in pence\n    equation = Eq(pasta_price * num_pasta + rice * num_rice, total_spent)\n\n    rice_price = solve(equation, rice)\n\n    return rice_price[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # lcm of 3, 5, and 7\n    for i in range(lcm, 1000, lcm):  # start at lcm and increment by lcm each time\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given details in the question\n    radius_semicircle = 14  # Given that AB=CD=14 cm,\n                            # which is the diameter of the semicircles, hence radius = 14/2\n\n    pi = 22 / 7             # Value of π given\n\n    # Calculate the perimeter\n    # Perimeter of the figure = Perimeter of 2 semicircles + Perimeter of 2 quadrants\n    # Since 2 semicircles make a full circle and 2 quadrants make a full circle,\n    # the total perimeter becomes the circumference of 2 full circles\n    perimeter = 2 * 2 * pi * radius_semicircle / 2   # Division by 2 because we need the radius, not diameter\n\n    return perimeter\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cost_per_cake = 46\n    total_cakes = 195\n\n    total_cost = cost_per_cake * total_cakes\n\n    return total_cost\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 30 / 100 * (2 / 3 * 45)\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    return (3 * 9 + 5 * 9) / 8\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Formula to find the sum of n consecutive numbers is n/2 * (first_number + last_number)\n    # We know the sum (1650) and the count of consecutive numbers (15), so we can solve for the first and the last number.\n    n = 15\n    total_sum = 1650\n    # average = total_sum / n\n    average = total_sum / n\n\n    # The middle number in a sequence of consecutive numbers is the average.\n    middle_number = average\n\n    # The smallest number (first_number) is (n-1)/2 less than the middle, and the largest (last_number) is (n-1)/2 more than the middle.\n    first_number = middle_number - (n - 1) / 2\n    last_number = middle_number + (n - 1) / 2\n\n    # The sum of the largest and smallest number is:\n    sum_largest_smallest = first_number + last_number\n\n    return int(sum_largest_smallest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    \n    return int(girls)\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days the lazy decorator needs to paint the house alone\n    x = symbols('x')\n\n    # The energetic decorator paints the house in 20 days, so his work rate is 1/20 per day\n    energetic_rate = 1/20\n\n    # The lazy decorator's work rate (unknown), 1/x per day\n    lazy_rate = 1/x\n\n    # The rate at which they work together is the sum of their individual rates\n    # Two decorators complete the job in 12 days, so their combined work rate is 1/12 per day\n    combined_rate = 1/12\n\n    # Equation representing the combined work rate\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        digits = str(i)\n        if all(int(digit) % 2 != 0 for digit in digits):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / num_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Starting from 13/10, subtract 1 to get the fractional part\n    frac = 13/10 - 1  # which gives 3/10\n    \n    # The next step is to take the reciprocal of the fractional part\n    # and find the whole number part (a) and the new fractional part.\n    a = int(1 / frac)\n    frac = 1/frac - a  # which gives 10/3 - 3 = 1/3\n        \n    # Then do the same for the next fractional part to find b\n    b = int(1 / frac)\n    frac = 1/frac - b  # which is 3/1 - 1 = 2\n    \n    # Finally, c is simply the reciprocal of the last fractional part\n    c = int(1 / frac)\n    \n    # Calculate the desired expression\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    number = 1\n    while digit_count < 2019:\n        digit_count += len(str(number))\n        if digit_count < 2019:\n            number += 1\n    return int(str(number)[-(digit_count - 2019) - 1])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return factorial(11)\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    remainders_a = {a % 8 for a in range(6, 1000, 8)}\n    remainders_b = {b % 8 for b in range(7, 1000, 8)}\n\n    possible_remainders = set()\n    for ra in remainders_a:\n        for rb in remainders_b:\n            possible_remainders.add((ra + rb) % 8)\n\n    # Since we are only interested in the remainder when a+b is divided by 8,\n    # we take any value from possible_remainders (all will be the same value).\n    ans = possible_remainders.pop()\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 0.5\n    kitten_mass_kg = 0.6\n    number_of_kittens = 4\n\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + number_of_kittens * kitten_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Given the system of linear congruences:\n    # n ≡ 1 (mod 2)\n    # n ≡ 2 (mod 3)\n    # n ≡ 3 (mod 4)\n    # n ≡ 4 (mod 5)\n    # Using the Chinese Remainder Theorem to find the smallest n that satisfies all congruences.\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    n = solve_congruence(*congruences)\n    return n[0]\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percent = 20\n    price_increase = (original_price * increase_percent) / 100\n    new_price = original_price + price_increase\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    brothers = 3\n    sisters = 4\n    mary = 1\n\n    total_people = brothers + sisters + mary\n\n    # Subtract 1 because Mary does not buy an egg for herself\n    eggs_bought_per_person = total_people - 1 \n\n    total_eggs = total_people * eggs_bought_per_person\n\n    return total_eggs\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits (3 '2's and 2 '3's)\n    twos_count = 3    # Number of '2's\n    threes_count = 2  # Number of '3's\n    \n    # The number of different four-digit numbers that can be formed is the total number of\n    # permutations of the five digits, divided by the number of ways the duplicated '2's\n    # can be arranged among themselves, multiplied by the number of ways to pick 4 digits out of 5\n    # since one of the '2's will always be left out.\n    \n    count = factorial(total_digits) // factorial(twos_count) \n    count *= (total_digits - 1)  # Multiply by 4 for the number of digits we are choosing (C(5, 4))\n    \n    return count\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    time_start = datetime.strptime(\"7:50\", time_format)\n    time_end = datetime.strptime(\"8:40\", time_format)\n\n    journey_duration = (time_end - time_start).seconds // 60  # Convert to minutes\n\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    sequence = [3, 6, 10, 15]\n    next_term = sequence[-1] + (sequence[-1] - sequence[-2]) + 1\n    return next_term\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_into_bottle = 5\n    oil_left = total_oil - oil_poured_into_bottle\n    \n    # Divide the remaining oil equally into 6 tanks\n    volume_in_each_tank = oil_left / 6\n    \n    return volume_in_each_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    for year in range(1, 100):\n        if (72 + year) == 5 * (8 + year):\n            return year\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip is 8th from front, Bud is 10th from end, and 4 children between them\n    # The position of Bud from the front can be calculated\n    # by adding Pip's position, the number of children between them, and 1 for Pip herself.\n    # Thus, Bud's position from the front is: position of Pip + 4 children + 1 (Pip).\n    bud_from_front = 8 + 4 + 1\n    \n    # If Bud is 10th from end and bud_from_front from the front,\n    # the total number of children is: position of Bud from the front + 10 - 1.\n    # Subtract 1 because Bud is included in both counts: from the front and from the end.\n    total_children = bud_from_front + 10 - 1\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n    \n    # Bob has 15 more Match Dfex cards than Alan: bob = alan + 15\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards: bob = bob + 25\n    # We can replace bob with alan + 15 from equation1 to get the new state\n    equation2 = Eq(alan + 15 + 25, 3 * alan) \n\n    # Now we solve for alan using the first and the modified second equation\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    rate = (amount / principal) ** (1 / years) - 1\n\n    return round(rate * 100, 1)\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of first n odd numbers is n^2\n    # There are 25 odd numbers from 1 to 50\n    melvins_sum = 25 ** 2\n\n    # Sum of first n even numbers is n * (n + 1)\n    # There are 25 even numbers from 1 to 50\n    monicas_sum = 25 * (25 + 1)\n\n    # The difference between Monica's and Melvin's sums\n    difference = monicas_sum - melvins_sum\n\n    return difference\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money Samuel had initially\n    x = symbols('x')\n    \n    # After spending 1/6 of his money and an additional $5 on a DVD\n    remaining_after_dvd = x - (x / 6) - 5\n    \n    # Then he spent 2/5 of his remaining money and an additional $12 on magazines\n    remaining_after_magazines = remaining_after_dvd - (2 / 5) * remaining_after_dvd - 12\n\n    # Finally he had $24 left\n    equation = Eq(remaining_after_magazines, 24)\n\n    # Solve the equation for x\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume Joanne initially had 'x' dollars\n    joanne_initial = symbols('x')\n\n    # Joanne spent 1/5 of her initial money on a handbag\n    handbag_expense = joanne_initial * (1/5)\n\n    # After buying the handbag, Joanne has 4/5 of her money left\n    money_after_handbag = joanne_initial - handbag_expense\n\n    # Joanne then spent 3/5 of the remaining money on a dress\n    dress_expense = money_after_handbag * (3/5)\n\n    # After buying the dress, Joanne has $80 left\n    money_left = money_after_handbag - dress_expense\n\n    # Set up the equation according to the problem\n    equation = Eq(money_left, 80)\n\n    # Solve for 'x' which represents the initial amount of money Joanne had\n    solution = solve(equation, joanne_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    # Speed of person A and B\n    speed_A = 6\n    speed_B = 5\n\n    # Relative speed of person A compared to B\n    relative_speed = speed_A - speed_B\n\n    # Time for A to catch up with B initially\n    catch_up_time = 200 / relative_speed\n\n    # Convert 16 minutes to seconds\n    total_time = 16 * 60\n\n    # Number of times A catches up with B\n    catch_up_times = total_time // catch_up_time\n\n    return catch_up_times\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # 20 oranges to each elderly, 10 elderly get nothing, calculate total oranges\n    # This means the total number of elderly is x + 10, where x is the number that got oranges\n    # 16 oranges to each elderly gives enough to pack 25 boxes of 24 oranges\n    # This means total oranges is 25 * 24\n    \n    total_oranges = 25 * 24\n\n    # We need to find a divisor of total_oranges that is close to 16 or 20 for optimal distribution\n    # But we will just iterate from 1 to total_oranges to find the maximum number that divides it evenly and is less than or equal to 20\n\n    for oranges_per_elderly in range(20, 0, -1):\n        if total_oranges % oranges_per_elderly == 0:\n            return oranges_per_elderly\n\n    return None\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given the operation m~Δ~n = 5m + 3n\n    # We have x~Δ~9 = 37, so by the definition of the operation:\n    # 5x + 3*9 = 37\n    # 5x + 27 = 37\n    # 5x = 37 - 27\n    # 5x = 10\n    # x = 10 / 5\n    x = 10 / 5\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # To ensure Sheila gets 4 balls of the same color in the worst case,\n    # consider the worst case scenario for each color:\n\n    # She can take out all the yellow balls first:\n    worst_case_yellow = 2\n\n    # Then, she can take out all but 3 of the orange balls:\n    worst_case_orange = 3\n\n    # Finally, she can take out all but 3 of the blue balls:\n    worst_case_blue = 3\n\n    # So far, Sheila has taken out 2 (yellow) + 3 (orange) + 3 (blue) = 8 balls\n    # and does not have 4 balls of the same color.\n\n    # Therefore, the next ball she takes out, no matter the color,\n    # will guarantee her fourth ball of that color.\n    next_ball = 1\n\n    # Total balls she must take out:\n    total_balls = worst_case_yellow + worst_case_orange + worst_case_blue + next_ball\n\n    return total_balls\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_weight_fraction = 1/5\n    remaining_weight_after_soil_removal = 27\n\n    weight_of_removed_soil = full_weight * removed_soil_weight_fraction\n    empty_wheel_barrow_weight = full_weight - weight_of_removed_soil - (full_weight - remaining_weight_after_soil_removal)\n\n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of each type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # We have three pieces of information that we can turn into equations\n    # Chocolate cupcakes is 72 more than vanilla\n    eq1 = Eq(chocolate, vanilla + 72)\n    # Blueberry cupcakes is 36 less than vanilla\n    eq2 = Eq(blueberry, vanilla - 36)\n    # Total remaining cupcakes after selling some\n    eq3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    # Solve for the variables\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] * (1/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n\n    # LCM of 24 and 30 minutes will give us the interval after which trains leave at the same time\n    interval_minutes = lcm(24, 30)\n    \n    # Convert interval_minutes to hours and minutes\n    hours = interval_minutes // 60\n    minutes = interval_minutes % 60\n\n    # Start time is 9 AM; calculate the next time when trains leave together\n    next_time_hour = 9 + hours\n    next_time_minute = minutes\n\n    # Format the time to a 24-hour time format if needed\n    if next_time_hour >= 24:\n        next_time_hour %= 24\n\n    # Return the time as a string in \"HH:MM\" format\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    remainder_sum = (remainder_a + remainder_b) % 8\n    return remainder_sum\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Tim's cookies be represented by t and Tyler's cookies by y\n    t, y = symbols('t y')\n\n    # Equation representing 1/6 of Tim's cookies is equal to 3/8 of Tyler's cookies\n    equation1 = Eq(t/6, (3/8)*y)\n\n    # Equation representing Tim having 9 times as many cookies as Tyler after Tyler sold 96 cookies\n    equation2 = Eq(t, 9*(y - 96))\n\n    # Solving the two equations for t and y\n    solutions = solve((equation1, equation2), (t, y))\n\n    # Calculate the total cookies at first by adding both Tim's and Tyler's cookies\n    total_cookies = solutions[t] + solutions[y]\n    return total_cookies\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    # There is one desk for Jessica and one for Judy\n    desks_for_jessica_and_judy = 2\n\n    # Total number of desks in the column\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + desks_for_jessica_and_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    # Count the occurrence of digit \"6\" from 2 to 55\n    for i in range(2, 57):\n        count += str(i).count('6')\n    \n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total weight of the people already in the group before Aaron joined.\n    # Let n be the number of people in the group before Aaron joined.\n    x, n = symbols('x n')\n\n    # Equation for the situation after Aaron joined:\n    equation1 = Eq((x + 45) / (n + 1), 61)\n\n    # Equation for the situation after Ben joined:\n    equation2 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # The average weight before Aaron and Ben joined\n    average_before = solutions[x] / solutions[n]\n\n    return average_before\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken_out = 2989\n\n    # All black balls will be taken out first because for any two balls taken from the bag,\n    # if they are of different colors, the white one is put back.\n\n    # Calculate the number of steps it takes to take out all black balls\n    # The even number of black balls is divided by two because in each step two black balls\n    # are taken out and one black ball is put back.\n    steps_for_black = black_balls // 2\n\n    # Calculate the remaining balls taken out after all black balls are out\n    remaining_steps = total_taken_out - (steps_for_black * 2)\n\n    # These remaining balls will all be white\n    white_balls_left = white_balls - remaining_steps\n\n    return white_balls_left, \"white\"\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        a, b, c = perm\n        num1 = 100 * a + 10 * b + c\n        num2 = int(\"12\" + str(a))\n        if num1 * num2 == int(str(num1) + str(num2)):\n            return num1 * num2\n            \nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n    # The work done is the same in both cases, so initial_people * initial_hours = required_people * target_hours\n    required_people = (initial_people * initial_hours) / target_hours\n\n    return required_people\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Since there are 100 centimeters in a meter\n    return n\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit can be 1-9\n        for units in range(0, 10):  # Units digit can be 0-9\n            if hundreds == units - 2:  # Condition for a 'good-number'\n                count += 1  # There are 10 options for the tens digit (0-9)\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    part1 = 4780 * 99\n    part2 = 476.4 * 284\n    part3 = 4764 * 71.6\n    divisor = 1 + 1/99\n    ans = part1 - (part2 + part3) / divisor\n    return ans\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of red marbles and w be the initial number of white marbles\n    # Let p be the number of red balls put by Pip, let b be the number of white balls put by Bud\n    r, w, p, b = symbols('r w p b')\n\n    # Initial ratio of red to white marbles is 3:2\n    equation1 = Eq(3*w, 2*r)\n    # When Pip adds red balls, the ratio of red to white balls becomes 5:3\n    equation2 = Eq((r + p)*3, w*5)\n    # After Bud adds white balls, the ratio of red to white balls becomes 5:4\n    equation3 = Eq((r + p)*4, (w + b)*5)\n    # Bud puts 100 more balls than Pip\n    equation4 = Eq(b, p + 100)\n\n    # Solving the four equations for w\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n    return solutions[w]\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    spent = sweets + magazine + stickers + pizza + orange_juice\n    change_left = initial_amount - spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # Consider the pairs (1, 4), (2, 3), (1, 1, 3), (1, 2, 2), which are all the ways to split 5 into two or more non-zero natural numbers.\n    count += 2  # For pair (1, 4) and (2, 3) which can be flipped resulting in (4, 1) and (3, 2)\n    count += 3  # For combination (1, 1, 3) which can be arranged in 3 different ways: (1, 3, 1), (3, 1, 1) and itself\n    count += 1  # For combination (1, 2, 2) which is symmetrical and can't be flipped\n\n    return count\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has more votes than anyone else, she must have at least one more vote than the others\n    # We can divide the 25 votes among the three students, giving the other two students an equal number of votes\n    # This is the maximum number of votes the other two can have for Samantha to still have the most\n    # We divide by 3 and round up because if we assume one student has the same number of votes as Samantha\n    # then Samantha must have one more than the equal share, which is the least votes she can have to be the winner.\n    \n    votes_for_others = 25 // 3\n    votes_for_samantha = votes_for_others + 1\n    \n    return votes_for_samantha\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    return 13 / 25 * 100\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 1000\n    ans = 2.4 * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chair_money = 360\n\n    percent = (chair_money / total_money) * 100\n    \n    return percent\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of pages read, t be the total number of pages\n    r, t = symbols('r t')\n\n    # r : (t - r) = 1 : 5\n    equation1 = Eq(r * 5, t - r)\n\n    # If she reads another 80 pages, r + 80 = 0.7 * t\n    equation2 = Eq(r + 80, 0.7 * t)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, t))\n\n    # Number of total pages\n    return solutions[t]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    for cc_correct in range(11):\n        cc_points = 10 * cc_correct - 5 * (10 - cc_correct)\n        vivi_points = cc_points + 15\n        if cc_points + vivi_points == 95:\n            return cc_correct\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    principal = 6000\n    amount = 8029.35\n    years = 5\n    \n    # Compound Interest formula: A = P * (1 + r/n)^(nt)\n    # Since interest is compounded annually, n = 1 and the formula simplifies to: A = P * (1 + r)^t\n    # We need to solve for r, which is the interest rate per period (x% per annum).\n    \n    equation = Eq(principal * (1 + x/100)**years, amount)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0].evalf()\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one book and one magazine\n    book, magazine = symbols('book magazine')\n    \n    # Two equations based on the given problem\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    rooms_for_girls = girls / girls_per_room\n    rooms_for_teachers = teachers / teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    # Calculate the weight of flour needed for one person\n    per_person = flour_initial / people_initial\n\n    # Calculate the weight of flour needed for 18 people\n    flour_final = per_person * people_final\n\n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num = \"2581953752\"\n    min_sum = float('inf')\n\n    # iterate over all possible first cuts (i)\n    for i in range(1, len(num)):\n        # iterate over all possible second cuts (i < j)\n        for j in range(i + 1, len(num)):\n            # cut the number into three parts\n            part1 = num[:i]\n            part2 = num[i:j]\n            part3 = num[j:]\n            # calculate the sum of the three parts after conversion to integers\n            current_sum = int(part1) + int(part2) + int(part3)\n            # if current sum is smaller than the smallest sum found, update it\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science, literature, math = symbols('science literature math')\n\n    equation1 = Eq(science/literature, 9/10)\n    equation2 = Eq(literature/math, 5/7)\n    equation3 = Eq(science + literature + math, 99)\n\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n    more_members = solutions[math] - solutions[literature]\n\n    return more_members\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Number of marbles for each colour\n    blue_marbles = 4\n    yellow_marbles = 3\n    red_marble = 1\n    \n    # In the worst case, we need to take out as follows:\n    # 1 blue, 1 yellow, and 1 red. After this step, we have 'guaranteed' 1 marble of each colour.\n    worst_case_taken = blue_marbles + yellow_marbles + red_marble - 2\n    \n    return worst_case_taken\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n    \n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother - melissa, 24)\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation2 = Eq(mother, 3 * melissa)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corner_flowers = 4\n    # Each corner flower is counted on two sides, so subtract these to avoid double-counting\n    total_flowers = (flowers_per_side * 4) - corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Assume the two original numbers are x and y, given:\n    # x + y = 11.63 (Equation 1)\n    # Now, one of the numbers is shifted one decimal to the left. \n    # There are two possibilities: \n    # (i) 0.1*x + y = 5.87 (If x is shifted) (Equation 2)\n    # (ii) x + 0.1*y = 5.87 (If y is shifted) (Equation 3)\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Define the first equation according to the sum\n    equation1 = Eq(x + y, 11.63)\n\n    # Define the second equation according to the situation when the decimal of x is shifted\n    equation2 = Eq(0.1*x + y, 5.87)\n\n    # Define the third equation according to the situation when the decimal of y is shifted\n    equation3 = Eq(x + 0.1*y, 5.87)\n\n    # Solve the equations\n    solutions_for_equation2 = solve((equation1, equation2), (x, y))\n    solutions_for_equation3 = solve((equation1, equation3), (x, y))\n\n    # Calculate the difference for both solutions and find which is valid\n    difference1 = abs(solutions_for_equation2[x] - solutions_for_equation2[y])\n    difference2 = abs(solutions_for_equation3[x] - solutions_for_equation3[y])\n\n    # Check which solution gives a valid number (we expect a positive number close to 5.87 after decimal shift)\n    if 0.1 * solutions_for_equation2[x] + solutions_for_equation2[y] == 5.87:\n        valid_difference = difference1\n    else:\n        valid_difference = difference2\n\n    # Multiple the valid difference by 100\n    answer = 100 * valid_difference\n\n    return answer\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    lengths = [piece1, piece2, piece3]\n    difference = max(lengths) - min(lengths)\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Thomas's method of calculation\n    thomas_total_cost = 5 / 6  # This is an incorrect interpretation of the problem.\n\n    # The cost of the book is 1/3 of the initial amount.\n    # The cost of the bag is 1/2 of the remainder, which is 1/2 of (1 - 1/3) = 1/2 * 2/3 = 1/3 of the initial amount.\n    # Together, the book and bag cost 1/3 + 1/3 = 2/3 of the initial amount.\n    correct_total_cost_fraction = 2 / 3\n    \n    # Given the total cost of the book and the bag together is $132,\n    # we can establish the equation 2/3 * initial_amount = 132\n    total_cost = 132\n    initial_amount = total_cost / correct_total_cost_fraction  # Solving for the initial amount\n\n    return initial_amount\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # Equation representing the total cost of basketballs and volleyballs\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    \n    # Equation representing the cost relationship between basketball and volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    num_repeats = 47 // len(pattern)\n    remaining_digits = 47 % len(pattern)\n\n    total_sum = sum(map(int, pattern)) * num_repeats\n    total_sum += sum(map(int, pattern[:remaining_digits]))\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_six_bottles = 2.52\n    cost_per_bottle = cost_per_six_bottles / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    total_pupils = 40\n    average_pencils_all = 35\n    average_pencils_boys = 20\n    average_pencils_girls = 60\n\n    # Number of girls is (total pupils - number of boys)\n    girls = total_pupils - boys\n\n    # Total pencils = average pencils * number of pupils\n    total_pencils = average_pencils_all * total_pupils\n    # Total pencils = (average pencils for boys * number of boys) + (average pencils for girls * number of girls)\n    equation = Eq(average_pencils_boys * boys + average_pencils_girls * girls, total_pencils)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_problems = 25\n    target_score = 61\n\n    for correct_jack in range(total_problems + 1):\n        incorrect_jack = total_problems - correct_jack\n        score_jack = 4 * correct_jack - incorrect_jack\n        if score_jack == target_score:\n            for correct_johnson in range(correct_jack):\n                incorrect_johnson = total_problems - correct_johnson\n                score_johnson = 4 * correct_johnson - incorrect_johnson\n                if score_johnson == target_score:\n                    return incorrect_jack\n    return None\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # since a is the tens digit, it cannot be 0\n        for b in range(0, 10):  # b is the units digit and can range from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    for cupcakes in range(1, 100):  # Assuming a reasonable upper limit for possible cupcake orders\n        if cupcakes <= 20:\n            cost = cupcakes * 4.50 + 12\n        else:\n            cost = (20 * 4.50) + (cupcakes - 20) * (4.50 * 0.8) + 12\n            \n        if cost == 120:\n            return cupcakes\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for pigs and goats\n    pigs, goats = symbols('pigs goats')\n\n    # Create equations based on the problem\n    equation1 = Eq(3*pigs + goats, 440)\n    equation2 = Eq(pigs + 2*goats, 280)\n    \n    # Solve the equations\n    prices = solve((equation1, equation2), (pigs, goats))\n    \n    # Calculate the cost for 5 pigs and 5 goats\n    total_cost = 5 * prices[pigs] + 5 * prices[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n    # There are 100 pence in a pound, so convert the pence to pounds and add\n    total = total_pounds + (total_pence / 100)\n    return total\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1 / 3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        original_num = int(str(num))\n        num_with_1_at_start = int(\"1\" + str(num))\n        num_with_1_at_end = int(str(num) + \"1\")\n        \n        if num_with_1_at_start * 3 == num_with_1_at_end:\n            return original_num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_position_from_back = 12\n    total_people = people_in_front_of_rose + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days the lazy decorator takes to paint the house on his own\n    x = symbols('x')\n\n    # The part of the house painted by the energetic decorator in one day\n    part_per_day_energetic = 1 / 10\n\n    # The part of the house painted by the lazy decorator in one day\n    part_per_day_lazy = 1 / x\n\n    # The part of the house both decorators can paint together in one day\n    part_per_day_together = 1 / 6\n\n    # Equation representing the sum of the parts of the house they paint in one day\n    equation = Eq(part_per_day_energetic + part_per_day_lazy, part_per_day_together)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Let x be the number John thought of\n    equation = Eq((x + 45)/3, 2*x)  # Set up the equation\n\n    solution = solve(equation, x)  # Solve for x\n\n    return solution[0]  # Return the solution for x\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50  # The last term of the sequence\n    sum_of_sequence = n * (n + 1) // 2  # Sum of first n natural numbers formula\n    return sum_of_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Each brother has at least 2 books, so we start from 2 and subtract 6 (2 books for each)\n    for x1 in range(2, 10 - 2*2 + 1):  \n        for x2 in range(2, 10 - x1 - 2 + 1):\n            x3 = 10 - x1 - x2\n            if x3 >= 2:  # Ensure the third brother has at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # You want 4 marbles of different colors.\n    # In the worst case scenario, you will pick all marbles of one color, then all of another color, and then all of another, \n    # and finally one more to ensure you have four different colors.\n    # Since there are only 3 red marbles, after picking these 3, \n    # in the worst case you will pick all 8 yellow, then all 9 blue, to ensure the fourth different color,\n    # you will pick at least one red.\n    # Thus, you must pick 3 (red) + 8 (yellow) + 9 (blue) + 1 (another red) = 21 marbles.\n    return 3 + 8 + 9 + 1\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Create the base number with 5's and 9's, and a placeholder X for the middle digit\n    number = '5' * 19 + 'X' + '9' * 19\n    \n    # Replace the middle digit X with each of 0 through 9 and check divisibility by 7\n    for digit in range(10):\n        potential_number = int(number.replace('X', str(digit)))\n        if potential_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_whole_book = 1/5\n\n    total_pages = pages_read_first_day / fraction_of_whole_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom is 10th, so 9 children are shorter, and 21 are taller.\n    # Tom can't be taller than the 9th tallest child, which leaves space for 21 taller children.\n    # The last child's height is a fixed value: 131 height units.\n\n    # The 9th from the tallest (reverse counting) is the 31 - 9 = 22nd when counting from the shortest\n    # We subtract one more unit because no two children have the same height\n    max_height_of_Tom = 131 - (31 - 10) + 1\n    \n    return max_height_of_Tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first_number = 16\n    last_number = 96\n    step = 10\n\n    count = ((last_number - first_number) // step) + 1\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let J = the number of Jason's storybooks\n    # Let A = the number of Anthea's storybooks\n    # We know that J = 30\n    # If Jason gives 4 storybooks to Anthea, they will have the same number\n    # So, J - 4 = A + 4\n    # We need to find the initial difference between their storybooks, which is J - A\n\n    J = 30\n    # Substitute J into the equation J - 4 = A + 4 and solve for A:\n    A = J - 8\n\n    # Now calculate the difference\n    difference = J - A\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, (a + b) % 3  # Calculate modulo 3 to get the remainder sequence\n    return a\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n\n    equation = Eq(first_number, 9 * second_number)\n\n    solved = solve(equation, magic_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # By setting up a system of equations based the information given.\n    # Let the number of gifts be G and the number of students be S.\n    # From the problem we have:\n    # G = 5S + 3 -> Equation 1 (if each student is given 5, there are 3 extra gifts)\n    # G = 4S + 9 -> Equation 2 (if each student is given 4, there are 9 extra gifts)\n\n    # By equating the two expressions for G from equations 1 and 2, we get:\n    # 5S + 3 = 4S + 9\n    # which simplifies to:\n    # S = 6 (Subtract 4S from both sides, subtract 3 from both sides)\n\n    return 6\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    factors = 0\n    for i in range(1, 841):\n        if 840 % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_cost = 1.83\n    total_chocolate_bar_cost = chocolate_bar_cost * 2\n    total_cost = box_of_chocolates + total_chocolate_bar_cost\n    paid_amount = 20\n    change = paid_amount - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily and her mother's positions are fixed\n    # We need to arrange the remaining 3 family members\n    num_ways_to_arrange = factorial(3)  # 3! = 3 x 2 x 1\n    \n    return num_ways_to_arrange\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_row_seats = 7\n    difference = 4\n    last_row_seats = 99\n    # find the number of rows\n    number_of_rows = ((last_row_seats - first_row_seats) // difference) + 1\n    # sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    total_seats = number_of_rows / 2 * (first_row_seats + last_row_seats)\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = set(range(1, 9))\n    for perm in permutations(all_digits, 4):\n        smallest_num_candidates = [d * 10 + d * 2 for d in perm if d * 2 < 10]\n        largest_num_candidates = [d * 10 + (9 - d) for d in perm if 0 < 9 - d < 10]\n        second_largest_num_candidates = [(d + 5) * 10 + d for d in perm if 0 < d < 5]\n        odds = [i for i in perm if i % 2 != 0]\n\n        if len(smallest_num_candidates) == 1 \\\n                and len(largest_num_candidates) == 1 \\\n                and len(second_largest_num_candidates) == 1 \\\n                and len(odds) == 1:\n            numbers = smallest_num_candidates + largest_num_candidates + second_largest_num_candidates\n            numbers += [i for i in [11, 22, 33, 44, 55, 66, 77, 88] if i // 10 in perm and i % 10 in perm and i not in numbers]\n            numbers.sort()\n            return numbers[1]  # Return the second smallest number\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Establish the equations based on the problem\n    equation1 = Eq(alan + bella + chloe, 200)   # Total amount of money\n    equation2 = Eq(alan, 4/7 * (alan + bella))  # Ratio of Alan's money to Bella's\n    equation3 = Eq(alan, chloe + 20)            # Alan has £20 more than Chloe\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    numbers_count_initial = 3\n    sum_initial = average_initial * numbers_count_initial\n    \n    average_final = 150\n    numbers_count_final = 4\n    sum_final = average_final * numbers_count_final\n    \n    fourth_number = sum_final - sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    correct_answer = sum(i ** 2 for i in range(5, 16))\n    kimmy_answer = (15 * 16 * 31) // 6\n    return correct_answer if correct_answer != kimmy_answer else kimmy_answer\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    questions_total = 20\n    points_correct = 5\n    points_wrong = -2\n    final_score = 51\n    for correct in range(questions_total + 1):\n        wrong = questions_total - correct\n        score = correct * points_correct + wrong * points_wrong\n        if score == final_score:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    total_money = symbols('total_money')\n\n    # Define the equations based on the problem\n    after_highlighters = (6/11) * total_money + 5\n    remainder_after_highlighters = total_money - after_highlighters\n    after_pens = (3/10) * remainder_after_highlighters + 12\n    final_remainder = remainder_after_highlighters - after_pens\n\n    # Form the equation representing the final amount left\n    equation = Eq(final_remainder, 30)\n\n    # Solve the equation\n    solution = solve(equation, total_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Sally's age as s and Gillian's age as g\n    s, g = symbols('s g')\n\n    # According to the problem, the ratio of Sally's age to Gillian's age is 2:7\n    equation1 = Eq(s/g, 2/7)\n\n    # In 15 years, the ratio will be 1:2 \n    equation2 = Eq((s + 15) / (g + 15), 1/2)\n\n    # Now we can solve the system of equations\n    solutions = solve((equation1, equation2), (s, g))\n\n    # Sally's current age is what we want\n    sally_age = solutions[s]\n\n    return sally_age\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the stickers Sam and Peter initially have\n    sam, peter = symbols('sam peter')\n    \n    # Initial condition: Sam had 40 stickers more than Peter\n    eq1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    # Peter gave 25% of his stickers to Sam\n    # Ending condition: Sam has 96 stickers more than Peter\n    eq2 = Eq(sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    actual_subtrahend = 75\n    correct_result = mistaken_result - (mistaken_subtrahend - actual_subtrahend)\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    ans = len([customer for customer in range(1, 41) if customer % 3 == 0 and customer % 4 == 0])\n    return ans\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    weight_per_apple = 1 / 9  # The weight of one apple in kg\n    apples_per_kg = 1 / weight_per_apple  # The number of apples in one kg\n    total_apples = 8 * apples_per_kg  # Total number of apples in 8 kg\n    cakes = total_apples // 4  # The number of cakes that can be baked with total apples\n\n    return int(cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Set up the equation (x / 9) * 45 = 35\n    # Solve for x\n    x = (35 * 9) / 45\n\n    return int(x)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    circumference = distance_between_seeds * number_of_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3 / 8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of papers cut into three parts.\n    # Each paper cut into three parts leads to an increase of 2 pieces (3 - 1 = 2).\n    # 10 pieces initially, plus 2 pieces for each paper cut.\n    # We need to find x such that 10 + 2x = 16.\n    \n    # Setup the equation 10 + 2x = 16 and solve for x.\n    total_initial_papers = 10\n    total_final_papers = 16\n    increase_per_cut_paper = 2\n    \n    x = (total_final_papers - total_initial_papers) // increase_per_cut_paper\n\n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n\n    average_boys = 10\n    average_all = 14\n\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_boys = total_boys * average_boys\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 100):  # Assuming the number of students is less than 10000\n        if ((n + 1) ** 2 - n ** 2) == (16 + 9):\n            return n ** 2 + 9\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Possible UK coin denominations in pence\n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Look for two coins of each kind that sum up to £2.50 (250 pence)\n    for smallest in denominations:\n        for second_smallest in denominations:\n            if smallest != second_smallest and smallest + second_smallest + smallest + second_smallest == 250:\n                return smallest / 100  # Convert from pence to pounds for the final answer\n    \n    return None\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    remaining_fraction = 1 - 3/5\n    sold_fraction = 0.75\n\n    # Let the total cookies baked be x.\n    # Then the cookies burnt are (3/5)x and the cookies sold are 0.75(2/5)x.\n    # According to the problem, cookies burnt - cookies sold = 42\n    # (3/5)x - 0.75(2/5)x = 42\n    # Solving the equation for x gives us the initial number of cookies baked.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3/5)*x - sold_fraction*remaining_fraction*x, 42)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_in_grams = 250\n    cost = (cost_per_100g / 100) * weight_in_grams\n    return cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    numerator1 = (-3.2) - (0.2)**2\n    denominator1 = -1.8\n    fraction1 = numerator1 / denominator1\n    \n    numerator2 = 41.08 - (-2/5)**2\n    denominator2 = 3 + (-2)**3\n    fraction2 = numerator2 / denominator2\n    \n    ans = fraction1 - fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    per_container = 4\n    \n    num_containers = (total_apples + per_container - 1) // per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10000):\n        original_number = i * 10 + 9  # add 9 to the units column\n        new_number = int(str(9) + str(i))  # place 9 at the beginning\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Since each of the 5 envelopes contains the same number of postcards,\n    # Let's first find the number of postcards in each envelope after the initial division.\n    postcards_per_envelope_first_division = 50 // 5\n    \n    # Now we know how many postcards are in each of the 2 envelopes after her friends give her more.\n    # Since each envelope has to have the same number of postcards, it must be the same number as above.\n    postcards_per_envelope_second_division = postcards_per_envelope_first_division\n\n    # We will denote the number of new postcards she received as 'new_postcards'.\n    # Since the two new envelopes have the same number, it must be a multiple of 2.\n    # We find the smallest multiple of 2 that is greater than or equal to the original number of postcards per envelope.\n    new_postcards = 0\n    while new_postcards // 2 < postcards_per_envelope_first_division:\n        new_postcards += 2\n\n    # Now we calculate the total number of postcards.\n    total_postcards = 50 + new_postcards\n\n    return total_postcards\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1000 + 70 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front, so we have 1 way for her position.\n    laura_ways = 1\n    \n    # Rita cannot stand at the end. Since there are 6 students in total,\n    # and Laura is already at the front, we have 4 possible positions for Rita.\n    rita_ways = 4\n    \n    # The remaining 4 students can be arranged in any order, which is 4!\n    other_students_ways = factorial(4)\n    \n    # Using the multiplication rule to find the total number of ways\n    total_ways = laura_ways * rita_ways * other_students_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50 = 0.50  # 50% discount\n    additional_discount_20 = 0.20  # Additional 20% discount for 5 items or more\n\n    # Apply the initial 50% discount\n    discounted_price = regular_total_price * (1 - discount_50)\n\n    # Since Mr. Tan bought at least 5 items, apply the additional 20% discount\n    final_price = discounted_price * (1 - additional_discount_20)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4/7\n    total_apples = sold_apples / fraction\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    # Create a datetime object for the departure time in Singapore\n    singapore_departure = datetime(year=2023, month=8, day=24, hour=5, minute=0)\n    \n    # Create a datetime object for the arrival time in London\n    # Considering Singapore is 7 hours ahead, we need to subtract 7 hours to get the departure time in London\n    london_arrival = datetime(year=2023, month=8, day=24, hour=11, minute=0)\n\n    # Calculate the flight duration considering the time zone difference\n    flight_duration = london_arrival - (singapore_departure - timedelta(hours=7))\n\n    # Return the total flight duration in hours\n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Kevin's speed\n    speed_kevin = 80\n    \n    # Let total distance be d miles\n    # Jerry's speed per hour is d * 2/5\n    speed_jerry = 2/5\n    \n    # When they meet, Jerry has travelled 3/7 of the distance\n    # Kevin has travelled 4/7 of the distance because 1 - 3/7 = 4/7\n    # The time taken by Jerry and Kevin to meet should be the same, therefore\n    # (distance/speed) should be equal for both Jerry and Kevin\n    # So, (3/7 * d)/(d * 2/5) = (4/7 * d)/80\n    # Solving for d: Multiply both sides by 80 * d * 2/5\n    # 3/7 * 80 = 4/7 * 2/5 * d\n    # 3/7 * 80 * 7/4 = d * 2/5\n    # (3 * 80 * 7)/(4 * 2) = d\n    d = (3 * 80 * 7) / (4 * 2)\n\n    return d\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    return ((20 - 16)**2 * (20 - 17)) - 20 - 17\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_probability = 0.3\n    draw_probability = 0.1\n    lose_probability = 1 - win_probability - draw_probability\n\n    # Probability of winning one game and losing the other:\n    win_lose = win_probability * lose_probability\n    # Probability of losing one game and winning the other:\n    lose_win = lose_probability * win_probability\n\n    # Use the Law of Addition:\n    probability_of_winning_exactly_one = win_lose + lose_win\n\n    return probability_of_winning_exactly_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000, 4):  # Assume he has a maximum of 1000 lollipops to check\n        if (lollipops - 32) % 4 == 0 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # Difference of pairs\n    diff_2010_2377 = 2377 - 2010\n    diff_2377_3111 = 3111 - 2377\n    diff_2010_3111 = 3111 - 2010\n\n    # Greatest common divisor of the differences will give D\n    gcd_1 = gcd(diff_2010_2377, diff_2377_3111)\n    D = gcd(gcd_1, diff_2010_3111)\n\n    # Now we find the remainder R using the value of D\n    R = 2010 % D\n\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Convert 1/13 to decimal and remove '0.'\n    period = len(decimal)  # Period length of the recurring decimal\n    position = (2012 - 1) % period  # Adjusted position for index starting at 0\n    return int(decimal[position])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100): # Loop over all 2-digit numbers\n        if (i % 10 + i // 10) % 5 == 0: # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    for x in range(1, 1000):  # Assume a reasonable upper limit for the number of cakes\n        if (8 * x - 7 * 8) == 4 * x:\n            total_cakes = 8 * x\n            return total_cakes\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote e as Eddi's original amount of cards and w as Wiya's\n    e, w = symbols('e w')\n\n    # Equation to represent the initial ratio\n    equation1 = Eq(e/w, 8/7)\n\n    # Equation to represent the ratio after Eddi gives Wiya 4 cards\n    equation2 = Eq((e-4)/(w+4), 18/17)\n\n    # Using sympy.solve to solve the system of equations\n    solutions = solve((equation1, equation2), (e, w))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_to_blue_ratio = 5 / 6\n    red_marbles = blue_marbles * red_to_blue_ratio\n    green_marbles = red_marbles / 2\n\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016.875\n    num4 = 11/3\n    denom1 = (2017 + 1/3) - 2016.875\n    denom2 = 17\n    extra = 3 + 23/32\n\n    result = ((num1 * num2) - (num3 * num4)) / (denom1 * denom2) * extra\n    \n    return result\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students in Class B.\n    # Then Class A has x + 47 students.\n\n    # Let y be the number of students to be moved from Class A to Class B.\n    # After moving, Class A should have (x + 47 - y) students and Class B should have (x + y) students.\n\n    # According to the question:\n    # x + 47 - y = x + y + 9\n    # Simplify the equation:\n    # 47 - 9 = 2y\n    # 38 = 2y\n    # y = 38 / 2\n    y = 38 // 2\n\n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - (piece1 + piece2)\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n\n    for A in range(1, 31):\n        for B in range(1, 31):\n            C = 31 - (A + B)\n            if C > 0:\n                product = A * B * C\n                max_product = max(max_product, product)\n\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    original_cost = 25000\n    selling_price = original_cost * (120 / 100)\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # We have two equations based on the given:\n    # y - x = 57 (difference between the numbers)\n    # x + y = 77 (sum of the numbers)\n    # We can solve these equations to find the value of x (the smaller number).\n\n    # Adding the two equations will eliminate y and give us:\n    # 2x = 77 - 57\n    x = (77 - 57) / 2\n\n    return x\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    time_before_sleep = 10  # minutes\n\n    # Distance covered by rabbit before sleeping\n    distance_before_sleep = time_before_sleep * rabbit_speed\n\n    # Time taken by rabbit to finish the race after it wakes up\n    remaining_distance_for_rabbit = race_distance - distance_before_sleep\n    time_for_rabbit_to_finish = remaining_distance_for_rabbit / rabbit_speed\n\n    # Total time for rabbit to finish the race\n    total_time_rabbit = time_before_sleep + rabbit_sleep_time + time_for_rabbit_to_finish\n\n    # Total time for turtle to finish the race\n    total_time_turtle = race_distance / turtle_speed\n\n    # Comparing total time to finish the race\n    if total_time_rabbit < total_time_turtle:\n        winner = \"rabbit\"\n        # Distance covered by the turtle when rabbit finishes\n        distance_turtle_covered = total_time_rabbit * turtle_speed\n        distance_between = race_distance - distance_turtle_covered\n    else:\n        winner = \"turtle\"\n        # Distance covered by the rabbit when turtle finishes\n        time_rabbit_ran = total_time_turtle - time_before_sleep - rabbit_sleep_time\n        distance_rabbit_covered = distance_before_sleep + time_rabbit_ran * rabbit_speed\n        distance_between = race_distance - distance_rabbit_covered\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n    \n    # equations based on the problem statement\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    def is_oddtastic(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n\n    return sum(is_oddtastic(i) for i in range(1, 1000))\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    numerator = 2020 * 2021 - 1\n    denominator = 2020 + 2019 * 2021\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_cost_pence = 24 * 100  # total cost in pence\n    total_pairs = 16\n    total_avocados = total_pairs * 2  # since each pair contains 2 avocados\n    cost_per_avocado = total_cost_pence / total_avocados\n    return int(cost_per_avocado)\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    outcomes = {sum: 0 for sum in range(2, 13)}  # Possible sums of two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            outcomes[die1 + die2] += 1\n    \n    max_occurrences = max(outcomes.values())\n    most_likely_score = [score for score, freq in outcomes.items() if freq == max_occurrences]\n\n    return most_likely_score[0]\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n    \n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let x be the number of rhinos and y be the number of ostriches\n    total_heads = 28\n    total_legs = 88\n    legs_per_rhino = 4\n    legs_per_ostrich = 2\n\n    # Since the number of rhinos is equal to the number of deer, and both have 4 legs,\n    # we can treat them as the same in our equations.\n    \n    # Equation for heads: x (rhinos) + y (ostriches) = total_heads\n    # Equation for legs: 4x (rhinos and deer) + 2y (ostriches) = total_legs\n\n    for x in range(total_heads + 1):\n        y = total_heads - x\n        if 4*x + 2*y == total_legs:\n            return x\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    number_of_sides_on_square = 4\n    people_per_side_of_square = people_per_square_table // number_of_sides_on_square\n    \n    number_of_tables = 8\n    # when tables are put together in a row, two sides are joined, losing 2 seating positions\n    seats_lost_per_join = 2\n    \n    # total people around the long table is the original people that can sit around each table\n    # multiplied by the number of tables minus the seating lost for each joining of tables\n    max_people = (people_per_square_table * number_of_tables) - (seats_lost_per_join * (number_of_tables - 1))\n\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person has\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    \n    # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(xavier, 3 * andrew)\n    \n    # Solve the system of equations for the number of marbles each person has\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # Sum the number of marbles Boris and Jeffery have\n    total_boris_jeffery = solutions[boris] + solutions[jeffery]\n\n    return total_boris_jeffery\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    pages = 0\n    current_digit_count = 0\n    \n    while current_digit_count < total_digits:\n        pages += 1\n        current_digit_count += len(str(pages))\n        \n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors\n\n    count = 0\n    # Start checking from the smallest multiple of 15 with 15 factors\n    n = 15\n    while True:\n        factors = divisors(n)\n        if len(factors) == 15:\n            count += 1\n        # Since 15 is a factor, multiples of 15 are checked\n        n += 15\n        # It is known that the least number with 15 divisors is (2**14) - 1\n        if n > 2**14:\n            break\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Last digit of powers of 2 repeat in cycles of 4: 2, 4, 8, 6\n    power_cycle_2 = [2, 4, 8, 6]\n\n    # Last digit of powers of 2 for 33 which is 1 less than a multiple of 4\n    # So we take the last element of the cycle\n    last_digit_32_power_33 = power_cycle_2[(33-1) % 4]\n\n    # Last digit of powers of 2 for 29 which is 1 less than a multiple of 4\n    # So we take the last element of the cycle\n    last_digit_22_power_29 = power_cycle_2[(29-1) % 4]\n\n    # Find the difference in ones place\n    ones_digit = (last_digit_32_power_33 - last_digit_22_power_29) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # For the maximal product, the number should be decomposed into as many 3's as possible\n    n = 14\n    product = 1\n\n    # The number 14 can be decomposed into four 3's and one 2, which will be the maximal decomposition for our case\n    num_of_threes = n // 3\n    remainder = n % 3\n\n    # If there's a remainder of 1, turning one of the 3's into two 2's will yield a larger product\n    if remainder == 1:\n        num_of_threes -= 1\n        remainder += 3\n\n    # Calculate the product of all the 3's\n    product *= 3 ** num_of_threes\n    # Then multiply the remainder if any\n    product *= remainder\n\n    return product\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote a as the number of apples and o as the number of oranges\n    a, o = symbols('a o')\n\n    # Given that Danny bought 5/7 as many apples as oranges\n    equation1 = Eq(a, (5/7) * o)\n\n    # After buying 12 more oranges, Danny had 2/3 as many apples as oranges\n    equation2 = Eq(a, (2/3) * (o + 12))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    # Return the number of apples\n    return solutions[a]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    return 10**2\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for x, y, z\n    x, y, z = symbols('x y z')\n\n    # Set up the equation based on the fraction given\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Since x, y, z are distinct integers, we try all combinations through calculation\n    result = solve(equation, (x, y, z))\n\n    # Find the solution where x, y, z are integers and distinct\n    for r in result:\n        if all(isinstance(val, int) and r.count(val) == 1 for val in r):\n            return sum(r)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_position = 10\n    total_count = 30\n    clock_numbers = 12\n\n    start_position = (end_position - (total_count % clock_numbers) + clock_numbers) % clock_numbers\n    if start_position == 0:\n        start_position = clock_numbers\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n    share = jackpot // people\n    return share\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return int(frog_hibernation)\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Cost of shoes for each alien (shoes sold in 5s)\n    shoes_per_alien = 78\n    # Socks are sold in pairs and each alien has 5 legs, so they need 3 pairs\n    socks_per_alien = 12 * 3\n    # Total cost per alien\n    total_per_alien = shoes_per_alien + socks_per_alien\n    # The alien has 5 brothers, making a total of 6 aliens\n    total_aliens = 6\n    # Total cost for all aliens\n    total_cost = total_per_alien * total_aliens\n    \n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    # Starting from the smallest three-digit number\n    number = 100\n    # Loop until we find a number that satisfies all conditions\n    while True:\n        # Check if number leaves a remainder of 1 when divided by 5, 6, and 7\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        # Increment the number by 1\n        number += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n    \n    # Solve the equations for a, b, and c in terms of known numbers\n    a = 31 - 26\n    b = 26 - 20\n    c = 31 - 20\n    \n    # Check if the solutions for a, b, and c are prime numbers\n    primes_list = list(primerange(1, 32))\n    if a in primes_list and b in primes_list and c in primes_list:\n        return a * b * c\n    else:\n        return None\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # convert minutes to hours\n    speed_to_park = 5\n    speed_back_home = 4\n    \n    # Let the distance to the park be d km\n    # Time to the park: d / speed_to_park\n    # Time back home: d / speed_back_home\n    # Total time: d / speed_to_park + d / speed_back_home\n    \n    # total_time = d / speed_to_park + d / speed_back_home\n    # total_time = d * (1/speed_to_park + 1/speed_back_home)\n    # d = total_time / (1/speed_to_park + 1/speed_back_home)\n    \n    d = total_time / (1/speed_to_park + 1/speed_back_home)\n    \n    return d\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # After selling x kilograms, the big bucket has (89 - x) kilograms left\n    # After selling x kilograms, the small bucket has (45 - x) kilograms left\n    # According to the problem, big bucket is left with 12 times as much as the small one\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation for x\n    solved = solve(equation, x)\n\n    # Return the amount of oil sold from each bucket (represented by x)\n    return solved[0]\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    n = 30\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n    \n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n    \n    solutions = solve((equation1, equation2), (joleen, rennie))\n    \n    total_pies = solutions[joleen] + solutions[rennie]\n    \n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x\n    # Then the number of girls is x + 8\n    # According to the problem, the total number is: x + (x + 8) = 26\n    # Simplify to find the number of boys (x) and subsequently the number of girls (x + 8)\n    x = (total_pupils - 8) / 2\n    girls = x + 8\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    # According to the problem, the number of students who like apples is 3x,\n    # and the number of students who like bananas is 5x.\n\n    # Now, let's apply Inclusion-Exclusion Principle.\n\n    # Total students liking either or both = Students liking apples + Students liking bananas\n    #                                      - Students liking both\n    # Since all 35 students like at least one of the two fruits, we have:\n    # 35 = 3x + 5x - x\n    # Combine like terms:\n    # 35 = 7x\n\n    # Now solve for x:\n    x = 35 // 7\n\n    return x\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Rate of work is usually represented as 1/x where x is the time to finish the job\n    lee_work_time = symbols('lee_work_time')  # time for Lee to finish the job by himself\n    nancy_work_time = symbols('nancy_work_time')  # time for Nancy to finish the job by herself\n\n    # Equation 1: 1/lee_work_time + 1/nancy_work_time = 1/10 (combined work rate)\n    equation1 = Eq(1/lee_work_time + 1/nancy_work_time, 1/10)\n\n    # Equation 2: 1/lee_work_time * 6 + 1/nancy_work_time * 20 = 1 (entire job)\n    equation2 = Eq(1/lee_work_time * 6 + 1/nancy_work_time * 20, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_work_time, nancy_work_time))\n\n    return solutions[nancy_work_time]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_kg = 550 / 1000\n    juice_oranges_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - pie_oranges_kg - juice_oranges_kg\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    num_days = 5\n\n    total_chairs = sum(first_day_chairs + difference * i for i in range(num_days))\n    \n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    # Total count of digit '2'\n    count = 0\n    for number in range(1, 416):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pound = 100\n    total_pence = 3 * pence_in_pound\n    required_pence = 15\n\n    percentage = (required_pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    return (12/25)*100\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # In the worst case, Benny takes out all marbles of other colors before he gets 3 of the same color\n    # Benny has 4 blue, 3 yellow, and 1 red\n    # If Benny takes 2 blue, then 2 yellow, he still does not have 3 of the same color\n    # To guarantee 3 of the same color, he must then take all 1 remaining red and at least 1 more marble\n    # This gives us 2 (blue) + 2 (yellow) + 1 (red) + 1 (any) = 6 marbles taken out to guarantee 3 of one color\n\n    return 6\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # According to the question B = 6*A + 25\n    # B = 2xy and A = xy, \n    # then 2xy = 6*xy + 25\n    # It follows that: 2xy - 6xy = 25\n    # Simplifying the equation gives: -4xy = 25\n    # which is not possible since the left side is negative and the right side is positive\n    # Therefore, we must have made a mistake in our assumption that 2xy represents a number in the hundreds.\n    # Let's solve the equation as per John's approach to find out if he is right or wrong.\n    \n    # 6A + 25 = B\n    # 6(xy) + 25 = (2xy)\n    # Let's multiply xy by 10 to convert it to the form of A\n    # 6(10x + y) + 25 = 200x + 10y\n    # 60x + 6y + 25 = 200x + 10y\n    # Solving for x and y\n    # Subtract 60x from both sides: 6y + 25 = 140x + 10y\n    # Subtract 6y from both sides: 25 = 140x + 4y\n    from sympy import symbols, solve, Eq\n\n    x, y = symbols('x y')\n    equation = Eq(25, 140*x + 4*y)\n    # However, we need to remember that x and y should be single digits\n    # So we should iterate over the possible values of x and y (1-9) and check which ones satisfy the equation.\n    for val_x in range(1, 10):\n        for val_y in range(10):  # y can also be 0 since it is not the leading digit\n            if (140 * val_x + 4 * val_y) == 25:\n                return 10*val_x + val_y\n    \n    return \"John's answer is wrong.\"\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Children in groups of 4 left three sitting out: x ≡ 3 (mod 4)\n    # Children in groups of 13 left one sitting out: x ≡ 1 (mod 13)\n    # Solve the simultaneous congruences using the Chinese Remainder Theorem\n    congruences = [(3, 4), (1, 13)]\n    ans = solve_congruence(*congruences)\n\n    # Since they want the number between 100 and 190, we adjust our answer accordingly\n    while ans[0] < 100 or ans[0] > 190:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_ages = 45\n    sum_ages_in_5_years = current_sum_ages + 5 * 2  # Both will be 5 years older\n\n    return sum_ages_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    return -10 + 3\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_pence = 7 * 14\n    pounds_to_pence = 100\n    paid_pence = 1 * pounds_to_pence\n    change_pence = paid_pence - total_cost_pence\n    \n    return change_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n\n    equation1 = Eq(garrett - sebastian, 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition, 65 fewer boys than girls\n    equation1 = Eq(boys, girls - 65)\n\n    # After some left for recess, there's an equal number of both remaining\n    equation2 = Eq(boys - (2 / 5) * boys, girls - (3 / 7) * girls)\n\n    # Solve equations for boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of students remaining in the hall\n    remaining_boys = solutions[boys] - (2 / 5) * solutions[boys]\n    remaining_girls = solutions[girls] - (3 / 7) * solutions[girls]\n\n    # Sum of remaining boys and girls\n    total_remaining = remaining_boys + remaining_girls\n\n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    tax_paid = 90\n    \n    price_of_sofa = tax_paid / tax_rate\n    \n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_person_per_day = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_person_per_day * number_of_people * number_of_days\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from itertools import permutations\n\ndef solution():\n    total_permutations = len(set(permutations('ORANGES')))\n    # Count permutations where A, E, O are together as one item\n    vowels_together_permutations = len(set(permutations('AE' + 'RNGS')))\n    # Multiply by permutations of the three vowels among themselves\n    vowels_together_permutations *= len(set(permutations('AEO')))\n    \n    # Subtract cases where vowels are together from total\n    ans = total_permutations - vowels_together_permutations\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n\n    apples = oranges + 150\n    bananas = oranges + 50\n    total_fruits = oranges + apples + bananas\n\n    equation = Eq(total_fruits, 1400)\n\n    solutions = solve(equation, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70000000 + 17000 + 7\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # number of ways to select one problem from each category\n    return 30 * 40 * 45\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primerange\n    \n    # find the primes needed\n    primes = list(primerange(1, 100)) # list of primes is enough for this problem\n    \n    # since 31+a = 26+b = 20+c, they are equal to some common value, say k\n    # hence a = k - 31, b = k - 26, c = k - 20\n    # we iterate through all primes, check for equality and calculate the product\n    for k in primes:\n        a = k - 31\n        b = k - 26\n        c = k - 20\n        if a in primes and b in primes and c in primes:\n            return a * b * c\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treat each set of books that must be together as a single unit.\n    # So we have 4 units (math, chemistry, physics, 1 biology book)\n    units = 4\n\n    # We can arrange these 4 units in 4! ways.\n    unit_permutations = factorial(units)\n\n    # Now, treat each set of books as a separate entity and permute them internally.\n    # There are 4! ways to arrange 4 math books,\n    # 3! ways to arrange 3 chemistry books,\n    # and 2! ways to arrange 2 physics books.\n    # The biology book is a single book so it has only one arrangement.\n    math_permutations = factorial(4)\n    chemistry_permutations = factorial(3)\n    physics_permutations = factorial(2)\n    biology_permutations = 1  # Since there's only one biology book.\n\n    # The total number of arrangements is the product of all the permutations.\n    total_arrangements = (unit_permutations * math_permutations *\n                          chemistry_permutations * physics_permutations * biology_permutations)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1):\n        for b in range(a, (12 - a) // 2 + 1):\n            c = 12 - a - b\n            if b >= c:  # Ensures b is not shorter than the base, c, for an isosceles triangle\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # There are 5 factorial ways to arrange 6 people around a table with 8 seats\n    # because one seat can be fixed as a starting point to avoid considering rotations.\n    # (8-1)!/ (8-6)!\n    ans = factorial(6) // factorial(8 - 6)\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbols\n    e, m, d = symbols('e m d', positive=True, integer=True)  # stickers for Eugene, Melvin, and David\n\n    # Since finally the ratio of Eugene's to Melvin's to David's stickers was 46:12:7\n    # Let n be the factor of proportionality\n    n = symbols('n')\n\n    # Final equation according to the ratio\n    eq1 = Eq(e / n, 46)\n    eq2 = Eq(m / n, 12)\n    eq3 = Eq(d / n, 7)\n\n    # Calculate the final number of stickers\n    e_final = solve(eq1, e)[0]\n    m_final = solve(eq2, m)[0]\n    d_final = solve(eq3, d)[0]\n\n    # System of equations based on transactions\n    eq4 = Eq(e - 2 * m, e_final / 2)\n    eq5 = Eq(m + 2 * m, m_final - d)\n    eq6 = Eq(d + d, d_final * 2)\n\n    # Total number of stickers before transactions\n    eq7 = Eq(e + m + d, 260)\n\n    # Solve system of equations\n    results = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (e, m, d, n))\n\n    # Return the initial value of Eugene's stickers\n    initial_eugene_stickers = results[e]\n\n    return initial_eugene_stickers\n\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let the original number of boys and girls be x.\n    # After 12 boys came and 8 girls left, we have x + 12 boys and x - 8 girls.\n    # It is given that there were twice as many boys as girls in the end:\n    # (x + 12) = 2 * (x - 8)\n    # Solving the equation:\n    x = symbols('x')\n    equation = Eq(x + 12, 2 * (x - 8))\n\n    original_count = solve(equation, x)\n\n    # Since there were equal boys and girls in the beginning,\n    # the total initial number of students is 2 * x.\n    return 2 * original_count[0]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum((80, 76, 72, 68, 64, 60, 56)) - sum((78, 74, 70, 66, 62, 58))\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    speed1 = 7  # 7 m/s for the first 280 m\n    speed2 = 5  # 5 m/s for the middle 400 m\n    speed3 = 8  # 8 m/s for the remaining distance\n\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - distance1 - distance2  # Total distance - the sum of the first two distances\n\n    # Time = Distance / Speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3  # The total time is the sum of the three times\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    # There are 3 choices for the first digit, 2 choices for the second digit,\n    # and 1 choice for the third digit since we cannot repeat digits.\n    return 3 * 2 * 1\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 25):\n        prime2 = 25 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 15\n    length_ribbon2 = 45\n    largest_possible_length = gcd(length_ribbon1, length_ribbon2)\n    return largest_possible_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n    \n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n    \n    time_spent_minutes = end_time_total_minutes - start_time_total_minutes\n    \n    return time_spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    original_time = 6  # in hours\n    delay = 0.5  # 30 minutes in hours\n    speed_increase = 12  # in km/h\n\n    # Let x be the original speed in km/h, and d be the total distance in km.\n    # Time for the first half without delay = d / (2 * x) = original_time / 2\n    # Time for the second half with increased speed = d / (2 * (x + speed_increase)) \n    # Total time = time for first half without delay + delay + time for second half with increased speed\n    # original_time = d / (2 * x) + delay + d / (2 * (x + speed_increase))\n    # We solve for x by rearranging the equation:\n    # original_time - delay = d / (2 * x) + d / (2 * (x + speed_increase))\n    # 2 * (original_time - delay) * x * (x + speed_increase) = d * (x + speed_increase + x)\n    # 2 * (original_time - delay) * (x^2 + speed_increase * x) = 2 * d * x\n    # (original_time - delay) * (x^2 + speed_increase * x) = d * x\n    # (original_time - delay) * x + (original_time - delay) * speed_increase = d\n    # Now we know that (original_time - delay) * x = d / 2 (from the first half of the trip)\n    # Therefore, d = 2 * (original_time / 2 - delay) * x\n    # And because the second half needs to take original_time / 2 - delay including the speed increase:\n    # (original_time / 2 - delay) = d / (2 * (x + speed_increase))\n    # We substitute d from the previous formula:\n    # (original_time / 2 - delay) = (2 * (original_time / 2 - delay) * x) / (2 * (x + speed_increase))\n    # We simplify this to find the original speed x, then we can find the distance d using x:\n    # 1 = x / (x + speed_increase)\n    # x + speed_increase = x\n    # This leads to a contradiction, which means we've made a wrong assumption in our setup.\n    # Let's restart the problem with correct logic.\n\n    # Let the original speed be 's' and the total distance be 'd'.\n    # Time taken to travel the first half of the distance at the original speed: d/2s\n    # Therefore, d/2s = original_time/2 => d/s = original_time\n    # Time taken to travel the second half of the distance at the increased speed: d/2(s + 12)\n    # Total travel time considering the delay: original_time/2 + delay + d/2(s + 12)\n    # But according to the question, the total travel time should be 6 hours, which is the original time.\n    # Hence, we can write the equation:\n    # original_time = original_time/2 + delay + d/2(s + 12)\n    # We need to find 'd' in terms of 's' and then find 's' by resolving this equation.\n    \n    # Solving for 's':\n    # original_time = original_time/2 + delay + d/2(s + 12)\n    # original_time - original_time/2 - delay = d/2(s + 12)\n    # d/2s = original_time - original_time/2 - delay\n    # d/s = 2(original_time - original_time/2 - delay)\n    # d = s(2(original_time - original_time/2 - delay))\n    # We know that d/s = original_time\n    # original_time = 2(original_time - original_time/2 - delay)\n    # s = 2(original_time - delay)/(original_time/2)\n    # Now we can find 'd':\n    s = 2*(original_time - delay)/(original_time/2)\n    d = s * original_time\n    return d\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, 72 + vanilla)           # chocolate is 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)           # blueberry is 36 less than vanilla\n    equation3 = Eq(1/6 * chocolate + 2/3 * vanilla + 7/9 * blueberry, 427)  # cupcakes left after selling\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamps = 2 # in meters\n\n    # Since there is one lamp post at each end, we need to count one less space than the number of lamp posts\n    length_of_road = (num_lamp_posts - 1) * distance_between_lamps\n\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    # Calculate minimum peaches the student with the most peaches can get\n    # using the Pigeonhole principle by dividing the peaches among the students\n    # and rounding up\n    total_peaches = 47\n    num_students = 6\n    \n    # To ensure at least one student gets the most, distribute 5 peaches to 5 students\n    # The remaining peaches go to the 6th student\n    # The 6th student has at least as many peaches as the number of peaches divided by the number of other students (+1, as it's the max)\n    peaches_for_sixth_student = total_peaches - (5 * (num_students - 1))\n    \n    return peaches_for_sixth_student\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be x\n    # Then the seven consecutive numbers are x, x+1, x+2, x+3, x+4, x+5, x+6\n    # The sum of these numbers is 7x + (1+2+3+4+5+6) = 140\n    # 7x + 21 = 140\n    # 7x = 140 - 21\n    # 7x = 119\n    # x = 119 / 7\n    x = 119 // 7\n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [\n        (3, 4),  # x ≡ 3 (mod 4)\n        (6, 7),  # x ≡ 6 (mod 7)\n        (6, 9)   # x ≡ 6 (mod 9)\n    ]\n    \n    least_number_of_children = solve_congruence(*congruences)[0]\n    \n    return least_number_of_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost_pence = 10 * 45\n    stamp_cost_pence = 10 * 27\n    total_cost_pence = post_card_cost_pence + stamp_cost_pence\n    note_value_pence = 10 * 100  # £10 note to pence\n\n    change_pence = note_value_pence - total_cost_pence\n    change_pounds = change_pence / 100  # convert pence to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 remaining seats for Chantel, Tony, and Cale.\n    # Claire's seat is fixed which means there are initially 3 options for Chantel.\n    # After Chantel takes a seat, we need to place Tony and Cale.\n    # Since Tony cannot sit face to face with Claire, he only has 1 choice.\n    # Then Cale has 1 remaining seat.\n    # Therefore, the total number of different ways to arrange the seats is:\n    # 3 options for Chantel * 1 option for Tony * 1 option for Cale = 3 ways.\n    \n    count = 3\n    return count\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    tables_per_day_frank = 180 / 10\n    tables_per_day_ryan = 180 / 15\n    difference = tables_per_day_frank - tables_per_day_ryan\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    q = symbols('q')  # total questions marked\n    \n    # Assuming she spent x mins marking if she left on time\n    timing_equation1 = Eq(q / 4, x + 5)  # marked 4 questions per minute and left 5 mins late\n    timing_equation2 = Eq(q / 6, x - 5)  # marked 6 questions per minute and left 5 mins early\n    \n    # Solve the system of equations\n    solutions = solve((timing_equation1, timing_equation2), (q, x))\n    \n    return solutions[q]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100 - 4):\n        # Define the five consecutive numbers\n        n1, n2, n3, n4, n5 = i, i + 1, i + 2, i + 3, i + 4\n        \n        # Check if three of the numbers sum to a multiple of 37\n        if (n1 + n2 + n3) % 37 == 0 or (n2 + n3 + n4) % 37 == 0 or (n3 + n4 + n5) % 37 == 0:\n            # Check if three of the numbers sum to a multiple of 60\n            if (n1 + n2 + n3) % 60 == 0 or (n2 + n3 + n4) % 60 == 0 or (n3 + n4 + n5) % 60 == 0:\n                # Return the largest number\n                return n5\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    a, b = symbols('a b', integer=True)\n    M = 3*a**2 - a*b**2 - 2*b - 4\n\n    # Since we are looking for the minimum positive integer value for M,\n    # we can set up the conditions that a and b are positive integers,\n    # and M is also a positive integer greater than 0.\n    \n    # The equation M = 0 might give us an idea about the relation of a and b that minimizes M\n    eq = Eq(M, 0)\n    # Solve the equation for a\n    solutions = solve(eq, a)\n    \n    # We can start testing values of b starting from 1 and substitute in solutions\n    # to check if we can find a corresponding positive integer value of a that makes M positive\n    smallest_M = None\n    \n    for b_value in range(1, 1000):  # We start to test values of b\n        # Now we try to plug b_value into the a solutions to check if we get an integer a value\n        for a_solution in solutions:\n            a_value = a_solution.subs(b, b_value)\n            \n            # Check if a_value is a positive integer\n            if a_value.is_Integer and a_value > 0:\n                M_value = M.subs({a: a_value, b: b_value}).evalf()\n                # Check if M_value is a positive integer\n                if M_value.is_Integer and M_value > 0:\n                    if smallest_M is None or M_value < smallest_M:\n                        smallest_M = M_value\n                        \n                break  # If we found a valid a_value, we do not need to check other solutions\n            \n            # If a_value is negative, no need to continue with bigger b_values using this solution\n            if a_value < 0:\n                break\n                \n    return int(smallest_M)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let h be the initial water height and r be the rate of water flowing through one hole\n    h, r = symbols('h r', positive=True, real=True)\n\n    # Water heights above the holes\n    hole_bottom = 0\n    hole_first = 6\n    hole_second_3_holes = 10\n    hole_second_2_holes = 12\n\n    # The amount of water flowing out is proportional to the rate and the height difference\n\n    # 8 minutes with two holes: (h - hole_bottom) + (h - hole_first) = 8 * r\n    # 8 minutes with three holes: (h - hole_bottom) + (h - hole_first) + (h - hole_second_2_holes) = 8 * r\n    # 7 minutes with three holes: (h - hole_bottom) + (h - hole_first) + (h - hole_second_3_holes) = 7 * r\n\n    # Setup the equations based on the above relationships\n    eq1 = Eq((h - hole_bottom) + (h - hole_first) + (h - hole_second_2_holes), 8 * r)\n    eq2 = Eq((h - hole_bottom) + (h - hole_first) + (h - hole_second_3_holes), 7 * r)\n\n    # Solve the system of equations for h\n    solution = solve((eq1, eq2), (h, r))\n\n    # Extract the water height solution 'h'\n    initial_water_height = solution[h]\n\n    return initial_water_height\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_enrichment = (2/9) * remaining_after_restaurant\n    remaining_after_enrichment = remaining_after_restaurant - spent_on_enrichment\n\n    return remaining_after_enrichment\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    candies_amy = 24\n    candies_emma = 10\n    total_candies = candies_amy + candies_emma\n    candies_each = total_candies // 2\n    candies_to_give = candies_amy - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Example usage:\n# ans = solution(2, 3)  # Assuming $2 per pound for bananas and $3 per pound for oranges"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # If it takes 6 seconds to chime thrice, there are 2 intervals between chimes.\n    # To find the duration of 1 interval, we divide 6 seconds by 2.\n    interval_duration = 6 / 2\n\n    # For 6 chimes, there will be 5 intervals.\n    total_intervals = 5\n    \n    # The total time taken is the time for all intervals combined.\n    total_time = total_intervals * interval_duration\n    \n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Calculate the work done by P in one hour\n    work_done_by_P_per_hour = 1 / (12 * 8)\n    # Calculate the work done by Q in one hour\n    work_done_by_Q_per_hour = 1 / (8 * 10)\n    \n    # Calculate the work done by P and Q together in one hour\n    work_done_together_per_hour = work_done_by_P_per_hour + work_done_by_Q_per_hour\n    \n    # Since they work 8 hours a day, calculate the work done by P and Q together in one day\n    work_done_together_per_day = work_done_together_per_hour * 8\n    \n    # Calculate the total number of days needed for P and Q to complete the job\n    total_days_needed = 1 / work_done_together_per_day\n    \n    # Since we want the number of whole days, we take the ceiling of the result\n    import math\n    num_whole_days = math.ceil(total_days_needed)\n    \n    return num_whole_days\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference_in_centimeters = meters_to_centimeters - 30\n    return difference_in_centimeters\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) / 6\n    ans = 3 * sum_of_squares\n    return int(ans)\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # in pence\n    total_kg = 5\n    total_cost_pence = cost_per_kg * total_kg  # total cost in pence\n\n    pounds_to_pence = 1000  # £10 in pence\n    change_pence = pounds_to_pence - total_cost_pence\n\n    change_pounds = change_pence / 100  # convert pence back to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(120)\n    count = 1\n    for exponent in factors.values():\n        count *= (exponent + 1)\n    return count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    factors = []\n    for i in range(1, int(180**0.5) + 1):\n        if 180 % i == 0:\n            factors.append((i, 180 // i))\n    min_diff = float('inf')\n    for f1, f2 in factors:\n        if abs(f1 - f2) < min_diff:\n            min_diff = abs(f1 - f2)\n    return min_diff\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    n = 19\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    product = 1\n    while n > 4:\n        product *= 3\n        n -= 3\n    product *= n\n    return product\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(5, 16):\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    attendees = 85\n    price_per_person = 1.30\n    total_collected = attendees * price_per_person\n    return total_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Define the variables\n    total_questions = 40\n    total_score = 71\n    total_possible_score = total_questions * 2\n\n    # Tom's incorrect difference in total score approach\n    incorrect_diff_score = total_possible_score - total_score\n    # This incorrect assumption that one wrong answer reduces the score by 1\n    incorrect_num_wrong_answers = incorrect_diff_score\n\n    # Let's find the number of wrong answers using the correct method\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * 2 - wrong_answers\n        if score == total_score:\n            # We have found the correct number of wrong answers\n            return wrong_answers\n    \n    # Return None if not found, though this should not happen\n    return None\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    difference = 1000000 - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let's denote the initial number of pens and pencils as 'x'.\n    # After giving away 5 pencils, Mrs. Rajoo has x - 5 pencils left.\n    # She has twice as many pens as pencils, which means she has 2 * (x - 5) pens.\n    # We know that initially, the number of pens is equal to the number of pencils,\n    # hence the number of pens initially was also 'x'.\n    # This implies that x = 2 * (x - 5).\n    # Solving for 'x' gives us the initial number of pens and pencils.\n\n    # Setting up the equation x = 2 * (x - 5)\n    x = symbols('x')\n    equation = Eq(x, 2 * (x - 5))\n\n    # Solving the equation\n    initial_pens = solve(equation, x)[0]\n\n    # She bought another 18 pens, so we add this to the initial count.\n    final_pens = initial_pens + 18\n\n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Star jogs for 1 hour at a speed of 6.5 mph from 6:30 AM to 7:30 AM\n    jogging_distance = 1 * 6.5\n\n    # Star walks for 2 hours at a speed of 4.5 mph from 7:30 AM to 9:30 AM\n    walking_distance = 2 * 4.5\n\n    # The total distance traveled every morning is the sum of the jogging distance and walking distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 sets of cards with the same pattern, without an \"A\"\n    # So, drawing one card from each set still doesn't guarantee an \"A\"\n    max_cards_without_A = 13 * 4\n    \n    # It would only take one more card to guarantee an \"A\" is drawn\n    ans = max_cards_without_A + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33  # speed of the ship in still water in km/h\n    speed_current = 7  # speed of the current in km/h\n    distance = 320  # distance to travel downstream in km\n\n    # Calculate the effective speed downstream\n    effective_speed = speed_ship + speed_current\n\n    # Calculate the time it takes to travel the distance downstream\n    time = distance / effective_speed\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_lengths = 2 * 45  # Peter cuts two 45cm lengths\n\n    remaining_length = initial_length - cut_lengths\n    lengths_of_40cm = remaining_length // 40  # Use // for integer division\n\n    return lengths_of_40cm\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    left_handed_students_fraction = 1 / 10\n    left_handed_girls_fraction = 0.25\n\n    total_left_handed_students = left_handed_tennis_players / left_handed_students_fraction\n    total_students = total_left_handed_students / left_handed_girls_fraction\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    butter_needed_for_100_cookies = 100 / cookies_per_gram_of_butter\n    return butter_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three positions can be filled with 3 possibilities since repetitions are allowed.\n    return 3 * 3 * 3\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    zero_count = 0\n    number_written = 0\n    while zero_count < 100:\n        number_written += 1\n        zero_count += str(number_written).count('0')\n    return number_written\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drunk_weekly = 9  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drunk_weekly\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    years = 10\n    \n    interest = initial_amount * interest_rate * years\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_initial = 180 # meters per minute\n    speed_tired = 120 # meters per minute\n    time_initial = 6 # minutes\n    time_tired = 8 # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Since the numbers are consecutive, let the first number be x.\n    # Then the numbers are x, x+1, x+2, x+3, x+4, x+5, x+6, x+7\n    # The sum of these numbers is: x + (x+1) + (x+2) + (x+3) + (x+4) + (x+5) + (x+6) + (x+7) = 8x + 28 = 2012\n    # We can now calculate x and find out the largest number which is x+7\n    \n    # Calculate the first term x\n    x = (2012 - 28) // 8\n\n    # Calculate the largest number\n    largest_number = x + 7\n    \n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5 / 12\n    blue_cars_percentage = 20 / 100\n    \n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n    \n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    elias_position_from_back = danya_position_from_back - 1\n    \n    total_people = people_in_front_of_elias + elias_position_from_back + 1  # +1 for Danya himself\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42/35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let a be the number of students in class A\n    # let b be the number of students in class B\n    a, b = symbols('a b')\n\n    # initial ratio of students in A to B is 5/7\n    equation1 = Eq(a, (5/7) * b)\n    \n    # If 3 students are transferred from B to A, the ratio changes to 4/5\n    equation2 = Eq(a + 3, (4/5) * (b - 3))\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # we are interested in the number of students currently in class A\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye had at first.\n    # She exchanged 5 times, and every time she gave 3 bottles to get 1 new bottle.\n    # Therefore, she must have given 3 * 5 = 15 bottles for exchange.\n    # The total number of bottles after 5 exchanges should be x - 15 + 5 (since each exchange gives her 1 bottle)\n    # She is expected to get 4 bottles, but she got 1 more. So she got 4 + 1 = 5 bottles.\n    # We can set up an equation to solve for x:\n    # x - 15 + 5 = 5\n    # x - 10 = 5\n    # x = 5 + 10\n    x = 5 + 10\n    return x\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the square array formed by the boys be x.\n    # Therefore, the total number of boys is x^2.\n    # When 17 girls line up outside the square, the side of the square becomes (x + 1),\n    # and the new total number is (x + 1)^2.\n    # Set up the equation: (x + 1)^2 = x^2 + 17\n    # Simplifying the equation: x^2 + 2x + 1 = x^2 + 17\n    # Solve for x: 2x + 1 = 17\n    # So x = (17 - 1) / 2\n    x = (17 - 1) // 2\n    # Calculate the number of boys: x^2\n    num_boys = x**2\n    return num_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    time_original = 6  # 7 p.m. - 1 p.m. = 6 hours\n    time_early = time_original - 1  # one hour earlier\n    speed_increase = 2  # extra kilometers per hour\n\n    # speed_early * time_early = speed_original * time_original\n    # speed_early = speed_original + speed_increase\n    # (speed_original + speed_increase) * time_early = speed_original * time_original\n    # speed_original * time_early + speed_increase * time_early = speed_original * time_original\n    # speed_original * (time_early - time_original) = -speed_increase * time_early\n    speed_original = -speed_increase * time_early / (time_early - time_original)\n\n    distance = speed_original * time_original\n    return distance\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    water_volume_litres = 40\n    flow_rate_millilitres_per_second = 125\n    litres_to_millilitres = 1000\n\n    water_volume_millilitres = water_volume_litres * litres_to_millilitres\n    time_seconds = water_volume_millilitres / flow_rate_millilitres_per_second\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1 if digits > 237 else pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    # Let's denote the nth term of the arithmetic progression as a_n\n    # a_n = a_1 + (n-1)d, where d is the common difference and a_1 is the first term\n    \n    # Given that the 9th term is 18 larger than the 15th term\n    # a_9 = a_15 + 18\n    # a_1 + 8d = a_1 + 14d + 18\n    # 6d = -18\n    d = -3  # common difference\n    \n    # Given that the sum of the 20th term and the 12th term is 88\n    # a_20 + a_12 = 88\n    # a_1 + 19d + a_1 + 11d = 88\n    # 2a_1 + 30d = 88\n    # 2a_1 - 90 = 88\n    # 2a_1 = 178\n    a_1 = 89  # first term\n    \n    # We need to find the 32nd term in this arithmetic progression\n    # a_32 = a_1 + 31d\n    a_32 = a_1 + 31 * d\n    \n    return a_32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_avg = 1468\n    correct_avg = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    # Find the difference caused by the incorrect recording per day\n    incorrect_difference = incorrect_day_savings - correct_day_savings\n\n    # Find out how much the average has increased\n    incorrect_avg_increase = incorrect_avg - correct_avg\n    \n    # The total increase in savings due to the incorrect recording is spread over the number of days\n    # Thus, dividing the incorrect difference with the increase in average should give us the number of days\n    num_days = incorrect_difference / incorrect_avg_increase\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # It takes 12 minutes to cut the rope into 4 pieces\n    # That means Mr. Tung makes 3 cuts in 12 minutes (since 4 pieces require 3 cuts)\n    # To get 12 pieces, Mr. Tung will need to make 11 cuts\n    # The time taken for each cut is the same, so it's a straight line relationship\n    cuts_needed = 11\n    time_per_cut = 12 / 3\n    total_time = cuts_needed * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    # Calculating the unit digit of exponentiation can be done by\n    # observing the pattern in the powers of 2.\n    # The units digit of powers of 2 repeat every 4 cycles: 2, 4, 8, 6\n    # So we can just find the remainder of the exponent when divided by 4\n    # to find out which of these four numbers is the units digit.\n    \n    # The exponent is 2016\n    exponent = 2016\n    # The pattern of units digits for powers of 2 is [2, 4, 8, 6]\n    # Since 2016 % 4 == 0, it means it's the fourth number in the pattern\n    units_digit_pattern = [2, 4, 8, 6]\n    # Find the index for the units digit\n    index = exponent % 4\n    # Since we are using 0-based indexing, we need to subtract 1\n    units_digit = units_digit_pattern[index - 1] if index != 0 else units_digit_pattern[-1]\n    \n    return units_digit\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    n = 10 \n    last_term = 31\n    difference = 28 - 25  \n\n    first_term = last_term - (n - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the age of Lily\n    lily, marry, carol = symbols('lily marry carol')\n\n    # we know that Marry is 1 year older than Lily\n    equation1 = Eq(marry, lily + 1)\n    # Carol is 2 years older than Marry\n    equation2 = Eq(carol, marry + 2)\n    # 4 times the product of their ages is 2240\n    equation3 = Eq(4 * lily * marry * carol, 2240)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    # return Carol's age\n    return solutions[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    left_side = (8*x + 8) / 2 - 3 * (x + 6)\n    right_side = 4*x + 4 - 3*x - 18  # Note: Chewy incorrectly wrote +18 instead of -18.\n\n    equation = Eq(left_side, right_side)\n    ans = solve(equation, x)\n\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2/5) * total_flowers\n    purple_flowers = (1/8) * total_flowers\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since the marbles are identical, the problem is reduced to finding the number\n    # of partitions of 10 into 2 non-negative parts.\n    # This is equivalent to the number of ways to distribute 10 indistinguishable items\n    # into 2 distinguishable bins, which is given by 10 + 1 choose 2 - 1\n    # to subtract the case where one pile has zero marbles.\n    from math import comb\n    ans = comb(10 + 1, 2) - 1\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    total_food = 40 * 7\n    daily_consumption = total_food / 7\n    initial_gazelles = 50\n    daily_gazelles_loss = 2\n    day = 0\n    \n    while total_food > 0:\n        day += 1 \n        total_food -= daily_consumption\n        initial_gazelles -= daily_gazelles_loss\n        daily_consumption = (40 * 7) / ((40 * 7) / daily_consumption + initial_gazelles - 40)\n        \n        if initial_gazelles <= 0 or total_food < daily_consumption:\n            break\n    \n    return day\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.056688\n    cups_per_quart = 2  # Since 1 quart = 2 cups (0.5 quart per cup)\n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure getting 3 toy cars of the same colour without looking,\n    # use the Pigeonhole Principle worst-case scenario - pick all but two colours entirely.\n    \n    # Pick all red and white cars and one more (which will be third either red, white or blue)\n    required_cars = 5 + 4 + 1  # 5 red, 4 white, and 1 to ensure the third of any color\n    \n    return required_cars\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_part = 2\n    fractional_part = 34\n    fractional_divisor = 100\n\n    ans = whole_part + fractional_part / fractional_divisor\n\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        legs_with_spiders = spiders * 8\n        remaining_legs = 64 - legs_with_spiders\n        if remaining_legs % 6 == 0:\n            ants = remaining_legs // 6\n            if ants > max_ants:\n                max_ants = ants\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_given = 14\n    stamps_used = 2\n\n    initial_stamps = stamps_left + stamps_given + stamps_used - stamps_bought\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    litres = 7.5\n    millilitres = litres * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # height after fourth bounce is 36 m\n    # for the following bounces, it bounces half the height from which it dropped\n    # Therefore, height after the third bounce was 36 * 2 = 72 m\n\n    # first two bounces, it bounced three times the height\n    # So height from which it was dropped before the third bounce\n    # is height after the second bounce / 3\n    height_after_second = 72 / 3\n\n    # Applying the same logic for the first bounce, we calculate the initial height.\n    initial_height = height_after_second / 3\n\n    return initial_height\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    b_score = 91\n\n    # Let x be the average score of A, B, and C\n    # Create algebraic expressions based on the problem statement\n    # (A + B)/2 = x + 3.5 => A + B = 2x + 7\n    # (B + C)/2 = x - 2 => B + C = 2x - 4\n\n    # Since we know B's score is 91, replace B with 91 in the equations\n    # A + 91 = 2x + 7 => A = 2x + 7 - 91\n    # 91 + C = 2x - 4 => C = 2x - 4 - 91\n\n    # We know that A, B, and C's average is x, so we can write the equation:\n    # (A + B + C) / 3 = x\n    # Plugging A and C from above, we get:\n    # ((2x + 7 - 91) + 91 + (2x - 4 - 91)) / 3 = x\n    # Simplifying we get:\n    # (2x + 7 - 91 + 91 + 2x - 4 - 91) / 3 = x\n    # (4x - 89) / 3 = x\n    # 4x - 89 = 3x\n    # x = 89\n\n    # Now we can find C's score:\n    # C = 2 * 89 - 4 - 91\n    c_score = 2 * 89 - 4 - 91\n    return c_score\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # The first equation represents the sum of the two numbers\n    equation1 = Eq(x + y, 11.63)\n\n    # The second equation represents the sum when the decimal is shifted\n    equation2 = Eq(x + y / 10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate 100 times the difference between the two numbers\n    difference = 100 * abs(solutions[x] - solutions[y])\n\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):\n        number_str = '8' + ''.join(perm)\n        number = int(number_str)\n        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n            return number\n    return None\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    total_songs = 12\n    album_price_pounds = 8.99\n\n    total_price_separate = single_song_price_pence * total_songs\n    album_price_pence = album_price_pounds * 100\n\n    savings = total_price_separate - album_price_pence\n\n    return savings / 100  # converting pence back to pounds for the answer\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        result = abs(i - reversed_num)\n        results.add(result)\n\n    # Check if all results are multiples of 9\n    multiples_of_nine = all(map(lambda x: x % 9 == 0, results))\n\n    return multiples_of_nine, results\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_spent = 1.69 + 0.82 + 2.99\n    total_paid = 20\n    change = total_paid - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_permutations = set(permutations(digits, 2))\n    return len(two_digit_permutations)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    smallest_diff = float('inf')  # Initialize the smallest difference as infinity\n    digits = set(range(10))  # The set of digits from 0 to 9\n\n    from itertools import permutations\n\n    for perm in permutations(digits, 5):\n        # Each permutation is a tuple of 5 digits which we can turn into a number\n        num1 = int(''.join(map(str, perm)))\n        remaining_digits = digits - set(perm)\n        \n        # Find the smallest 5-digit number with the remaining digits\n        num2 = int(''.join(map(str, sorted(remaining_digits))))\n\n        # Calculate the difference\n        diff = abs(num1 - num2)\n\n        # Update the smallest difference\n        if diff < smallest_diff:\n            smallest_diff = diff\n\n        # Break early if the smallest difference is 0, we can't find any smaller\n        if smallest_diff == 0:\n            break\n\n    return smallest_diff\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    p, q = symbols('p q', integer=True)\n    # Given that 2q - 1 is an integer when divided by p, so p must divide 2q - 1\n    eq1 = Eq((2*q - 1) % p, 0)\n    # Similarly, since 2p - 1 must be an integer when divided by q, q must divide 2p - 1\n    eq2 = Eq((2*p - 1) % q, 0)\n    # Since p and q are greater than 1, we have to ensure that the solution is not (1,1)\n    solutions = solve((eq1, eq2), (p, q))\n    valid_solutions = [(int(sol[p]), int(sol[q])) for sol in solutions if sol[p] > 1 and sol[q] > 1]\n    # The problem statement assures us that the solution exists and is unique, so we take the first\n    ans = valid_solutions[0][0] + valid_solutions[0][1]\n    return ans\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let v be the total number of vertices, t be the number of triangle faces, \n    # p be the number of pentagon faces, 100*p + 10*t + v is what we need to find. \n    v, t, p = symbols('v t p')\n    \n    # Euler's formula: V - E + F = 2 for convex polyhedrons\n    # Given F (total faces) = t + p = 32\n    # Each triangle face contributes 3 edges and each pentagon face contributes 5 edges,\n    # but each edge is counted twice since it belongs to two faces. So E = (3*t + 5*p)/2\n    # Each vertex intersects T triangle faces and P pentagon faces\n    # For a vertex to be counted once, it needs to be the vertex of T triangles and P pentagons\n    # So V = (3*T + 5*P) / (T + P)\n    \n    # Now we have two equations:\n    # t + p = 32\n    # v - E + F = 2 where E = (3*t + 5*p)/2\n    equations = [\n        Eq(t + p, 32),\n        Eq(v - ((3*t + 5*p)/2) + (t + p), 2)\n    ]\n    \n    # We know each vertex intersects 3 triangles and 5 pentagons \n    # (because it's given that each of the V vertices is intersecting T triangular faces and P pentagonal faces):\n    # T = 3 * t (number of triangle faces per vertex)\n    # P = 5 * p (number of pentagon faces per vertex)\n    # and V = (3*t + 5*p) / (T + P)\n    equations.append(Eq(v, (3*t + 5*p) / (3 + 5)))\n    \n    # Solving the system of equations using sympy's solve() function\n    solution = solve(equations, (v, t, p), dict=True)[0]\n    \n    # Now we find the value of 100*P + 10*T + V\n    result = 100 * solution[p] + 10 * solution[t] + solution[v]\n    return result\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_seconds = 15  # time taken to pass the tree in seconds\n    length_meters = 450  # length of the train in meters\n\n    # speed = distance / time\n    speed_m_per_s = length_meters / time_seconds\n    # Convert the speed from m/s to km/h by multiplying by 3.6 (1 m/s = 3.6 km/h)\n    speed_km_per_h = speed_m_per_s * 3.6\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3*13 + 5*13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total = salt + water\n    concentration = (salt / total) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_pen = pen_cost // pencil_cost\n    return pencils_for_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_baba = 10\n    ali_and_baba = 2  # Since Bala is directly behind Ali, they make two people together\n\n    total_people = people_in_front_of_ali + ali_and_baba + people_behind_baba\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to all other friends (friends-1), hence friends * (friends-1)\n    cards_sent = friends * (friends - 1)\n\n    return cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    total_pages = symbols('total_pages')\n    first_week_pages = 2 / 5 * total_pages\n    second_third_week_pages = first_week_pages - 10\n    \n    # Second and third week pages are the same\n    equation = Eq(first_week_pages + 2 * second_third_week_pages, total_pages)\n    total_homework_pages = solve(equation, total_pages)[0]\n    return total_homework_pages\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i*(i+1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    water_initial = 2\n    jug_volume = 7\n    jugs_added = 4\n    \n    water_final = water_initial + (jug_volume * jugs_added)\n    \n    return water_final\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    cookies_first_3_days = 9 * 3\n    cookies_next_2_days = 15 * 2\n    cookies_last_2_days = 10 * 2\n    total_cookies = cookies_first_3_days + cookies_next_2_days + cookies_last_2_days\n    total_days = 3 + 2 + 2\n    average_cookies_per_day = total_cookies / total_days\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days David takes off\n    x = symbols('x')\n    \n    # Candy's work rate is 1/20 job/day and David's work rate is 1/25 job/day\n    candy_rate = 1/20\n    david_rate = 1/25\n    \n    # The total work done by Candy and David together when David takes x days off\n    total_work = candy_rate * 12 + david_rate * (12 - x)\n    \n    # They need to finish the job which equals 1\n    equation = Eq(total_work, 1)\n    \n    # Solve the equation\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law of motion, the force exerted by the table\n    # on the book (normal force) is equal in magnitude and opposite in direction\n    # to the force exerted by the book on the table (its weight), in this case,\n    # due to gravity. Therefore, the magnitude of the force exerted by the table\n    # is equal to the weight of the book.\n    book_mass = 20  # The mass of the book in Newtons.\n    force_by_table = book_mass  # The magnitude of the force by the table.\n\n    return force_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for variable T\n    T = symbols('T')\n    \n    # First 50,000 taxed at 5%\n    tax_first_50000 = 0.05 * 50000\n    \n    # The amount above 50,000 taxed at (8+T)%\n    income_above_50000 = 140000 - 50000\n    tax_income_above_50000 = income_above_50000 * (0.08 + T/100)\n    \n    # Total tax paid\n    total_tax_paid = tax_first_50000 + tax_income_above_50000\n    \n    # Equation representing the total tax paid is equal to 15,100\n    eq = Eq(total_tax_paid, 15100)\n    \n    # Solve for T\n    T_value = solve(eq, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')  # Let y be the symbol representing Lemar's age\n    guy_age = y - 3   # Guy is 3 years younger than Lemar\n\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fruits in the box at first\n    x = symbols('x')\n\n    # Construct equations based on the problem statement\n    # Equation 1: (4/5)x - (1/8)(4/5)x = remaining apples\n    rem_apples = (4/5)*x - (1/8)*(4/5)*x\n\n    # Equation 2: total fruits - remaining apples = remaining fruits\n    # Remaining fruits = 3/4 of total fruits removed + 30 leftover pears\n    rem_fruits = x - rem_apples\n\n    # Equation 3: (3/4)x + 30 = remaining fruits\n    equation = Eq((3/4)*x + 30, rem_fruits)\n\n    # Solve the equation for x to find the number of fruits at first\n    total_fruits_at_first = solve(equation, x)\n\n    return total_fruits_at_first[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # number of footballs, basketballs, and volleyballs respectively\n    footballs = 6\n    basketballs = 9\n    volleyballs = 3\n\n    # maximum number of balls you can have without having 6 of the same is 5 footballs, 5 basketballs, and 5 volleyballs\n    max_without_6_same = (footballs - 1) + (basketballs - 1) + (volleyballs - 1)\n\n    # one more ball ensures at least 6 of a type\n    balls_needed = max_without_6_same + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n    \n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    mass = 2  # in kilograms\n    height = 5.0  # in meters\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Using the conservation of energy, since only gravity does work\n    # Potential energy at the top equals the kinetic energy at the bottom\n    # m * g * h = (1/2) * m * v^2\n    # v^2 = 2 * g * h\n    # v = sqrt(2 * g * h)\n\n    v = sqrt(2 * g * height)\n    \n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    num_cakes_made = 6\n    num_cakes_wanted = 10\n\n    time_per_cake = time_for_6_cakes / num_cakes_made\n    total_time = time_per_cake * num_cakes_wanted\n\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity in m/s^2\n    v0 = 5  # initial velocity in m/s\n    theta = math.radians(45)  # convert angle to radians\n    h = 30  # height in meters\n\n    # The horizontal velocity component (constant)\n    vx = v0 * math.cos(theta)\n\n    # The initial vertical velocity component\n    vy0 = v0 * math.sin(theta)\n\n    # Time to reach the ground:\n    # Using the equation: vy^2 = vy0^2 + 2 * g * h\n    # And since the final vertical velocity vy = 0 when the arrow hits the ground\n    vy = math.sqrt(vy0**2 + 2 * g * h)\n\n    # The vertical component of velocity just before impact\n    # Neglecting air resistance, vertical velocity only changes due to gravity\n    vy_impact = -vy\n\n    # Speed when it hits the ground (magnitude of the velocity vector)\n    v_impact = math.sqrt(vx**2 + vy_impact**2)\n\n    return v_impact\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # We need to split 13 - 3 = 10 oranges, as we will give one to each kid initially.\n    # Now we treat this as an \"indistinguishable balls into distinguishable boxes\" problem,\n    # which can be solved using stars and bars method (n+k-1 choose k-1) where n is balls and k is boxes.\n    # We have 10 oranges and 3 kids, so it is (10+3-1 choose 3-1) which is (12 choose 2).\n\n    ways = comb(12, 2)\n\n    return ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    smallest_number = float('inf')\n    for number in range(10**1, 10**5):\n        digit_sum = sum(int(digit) for digit in str(number))\n        alternate_sum = sum(int(str(number)[i]) if i % 2 == 0 else -int(str(number)[i]) for i in range(len(str(number))))\n        if digit_sum == 20 and number % 11 == 0 and alternate_sum % 11 == 0:\n            smallest_number = min(smallest_number, number)\n    return smallest_number\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(0, 10):\n            if A != S:\n                for M in range(0, 10):\n                    if M != A and M != S:\n                        for O in range(0, 10):\n                            if O != M and O != A and O != S:\n                                for G in range(0, 10):\n                                    if G != O and G != M and G != A and G != S:\n                                        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n                                        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n                                        if SASMO * 4 == OGAMS:\n                                            return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    num_foods = 2  # sandwiches, burgers\n    num_drinks = 3  # coffee, milk, tea\n    num_desserts = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = num_foods * num_drinks * num_desserts\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_each = total_water / 2\n    transfer_from_A = 48 - water_each\n\n    return transfer_from_A\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n    \n    # 2 elephants weigh as much as 5 cows.\n    equation1 = Eq(2 * elephant, 5 * cow)\n    \n    # 4 cows weigh as much as 3 horses.\n    equation2 = Eq(4 * cow, 3 * horse)\n    \n    # 3 horses weigh as much as 5 pigs.\n    equation3 = Eq(3 * horse, 5 * pig)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n    \n    # How many pigs weigh as much as 8 elephants?\n    pigs_for_8_elephants = 8 * solutions[elephant] / solutions[pig]\n    \n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    interest_rate = (amount / principal) ** (1 / years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n    \n    # Given the relationship between the price of lychees and mangoes\n    equation1 = Eq(lychee_price, 2 * mango_price - 6)\n\n    # Total cost of mangoes and lychees\n    equation2 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.6 * (2 / 5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations of the 6 singing performances\n    sing_perm = factorial(6)\n  \n    # Calculate placements for the dancing performances.\n    # With at least 1 singing performance between every 2 dancing,\n    # we can think of 5 \"slots\" between the singing where we can place at most 2 dancing performances.\n    # We have 4 dancing performances to distribute in these 5 slots.\n    # This is equivalent to finding combinations of 5 taken 4 at a time,\n    # since we are choosing 4 slots out of the available 5.\n    dance_slots = 5  # 1 more than the number of singing performances\n    dance_perm = factorial(dance_slots)\n  \n    # Now, we can place the 4 dancing performances in the selected slots in any order,\n    # which is a permutation of the 4 dancing performances\n    dance_order_perm = factorial(4)\n  \n    # The total different ways to arrange these performances is the product of the above permutations\n    total_ways = sing_perm * (dance_perm / factorial(dance_slots - 4)) * dance_order_perm\n\n    return int(total_ways)\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_five_boxes = 350\n    total_weight_three_boxes = (total_weight_five_boxes / 5) * 3\n    return total_weight_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x1, x2, x3, and x4 denote the number of people in the 1st, 2nd, 3rd, and 4th workshops respectively\n    x1, x2, x3, x4 = symbols('x1 x2 x3 x4')\n    \n    # Equations based on the given conditions\n    eq1 = Eq(x1, 10/21 * (x2 + x3 + x4))\n    eq2 = Eq(x2, 9/22 * (x1 + x3 + x4))\n    eq3 = Eq(x3, 2 * x4)\n    eq4 = Eq(x4, x1 - 30)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (x1, x2, x3, x4))\n    \n    # Summing up people in all workshops\n    total_people = sum(solutions.values())\n    return total_people\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    marked_price = symbols('marked_price')\n    equation = Eq(0.93 * marked_price - 0.90 * marked_price, 114)\n    result = solve(equation, marked_price)\n    return result[0]\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    total_points = 155\n    question_points = 10\n    wrong_points = -5\n    justin_advantage = 15\n\n    # Let x be the number of questions Dora answered correctly\n    # Then Justin answered (x + justin_advantage/question_points) correctly\n    \n    # Total points for correct answers should be total_points\n    # 10 * (number of correct answers by Dora + number of correct answers by Justin) + \n    # -5 * (number of incorrect answers by Dora + number of incorrect answers by Justin) = total_points\n\n    # Let d = number of questions Dora answered correctly\n    # Then Justin answered d + justin_advantage/question_points correctly\n    # Hence, Dora's points are 10d - 5(10 - d) and Justin's are 10(d + 3/2) - 5(10 - (d + 3/2))\n    # Their sum is 155.\n\n    # We solve this equation for d\n    d = 0\n    while True:\n        dora_points = question_points * d - wrong_points * (10 - d)\n        justin_points = question_points * (d + justin_advantage / question_points) - wrong_points * (10 - (d + justin_advantage / question_points))\n        if dora_points + justin_points == total_points:\n            break\n        d += 1\n\n    return d\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # There are 3 groups in Class A and 4 groups in Class B, for a total of 7 groups\n    # The total number of candies sold by Class A is 3 groups * 12 candies/group = 36 candies\n    # The total number of candies sold by all groups is 7 groups * 8 candies/group = 56 candies\n    # The total number of candies sold by Class B is 56 candies (total) - 36 candies (Class A)\n    # So, 4 * x (average candies for Class B) = 56 - 36\n    \n    total_candies_A = 3 * 12\n    total_candies_all = 7 * 8\n    total_candies_B = total_candies_all - total_candies_A\n    \n    # Finding the average for Class B\n    average_candies_B = total_candies_B / 4\n    \n    return average_candies_B\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6\n\n    latte_amount = (coffee_amount * total_ratio) / coffee_ratio\n    return latte_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_length = total_length - used_length\n    pieces = 10\n    length_per_piece = remaining_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for number in range(1, 20):\n        if number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n\n    # Calculate combinations of 2 different flavours out of 7\n    combinations = comb(flavours, doughnuts)\n    \n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    nums = [6, 9, 18]\n    greatest_common_factor = gcd(nums[0], nums[1])\n    greatest_common_factor = gcd(greatest_common_factor, nums[2])\n    return greatest_common_factor\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    # Rate at which Lee works\n    r_lee = symbols('r_lee')\n    # Rate at which Nancy works\n    r_nancy = symbols('r_nancy')\n\n    # Equation 1: Combined work done in 10 hours\n    eq1 = Eq(10 * (r_lee + r_nancy), 1)\n  \n    # Equation 2: Lee works for 6 hours and Nancy works for 20 hours\n    # They both complete the work, hence the sum of their work is 1\n    eq2 = Eq(6 * r_lee + 20 * r_nancy, 1)\n\n    # Solve the system of equations for the rates of Lee and Nancy\n    solutions = solve((eq1, eq2), (r_lee, r_nancy))\n  \n    # Extract Nancy's rate from the solutions dictionary\n    r_nancy_solution = solutions[r_nancy]\n  \n    # Since rate*time=work (in this context, the work is 1 job), \n    # time for Nancy to finish the job by herself is the \n    # reciprocal of her rate\n    time_nancy = 1 / r_nancy_solution\n\n    return time_nancy\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    badminton_students = total_students / 4 + 3\n    remaining_students = total_students - badminton_students\n    table_tennis_students = remaining_students / 3 - 3\n    football_students = 25\n\n    equation = Eq(badminton_students + table_tennis_students + football_students, total_students)\n\n    total_students_solution = solve(equation, total_students)\n\n    return total_students_solution[0]\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    # Let C be the capacity of the reservoir\n    # Working rate of 5 pumps: C / 20 days\n    # Working rate of 6 pumps: C / 15 days\n    # We need to find the number of pumps (n) to empty C in 6 days, so working rate of n pumps: C / 6 days\n    \n    # RTE (rate * time = effort) for 5 pumps: 5 * 20 = 100 units of work (5 pumps working for 20 days to empty the reservoir)\n    # RTE for 6 pumps: 6 * 15 = 90 units of work (6 pumps working for 15 days to empty the reservoir)\n    # The effort is constant, so the product of pumps and days is a constant\n\n    # Let's call that constant K:\n    # 5 pumps * 20 days = 6 pumps * 15 days\n    # K = 5 * 20 = 6 * 15 = 100 (say, it's the full capacity of the reservoir in work units)\n\n    # Now we need to find n such that n pumps * 6 days = K\n    # n * 6 = 100\n    # n = 100 / 6\n    n = 100 / 6\n    return n\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    squares_fit = (large_square_side // small_square_side) ** 2\n    return squares_fit\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # When Avril spends 5p, it's one quarter of her money\n    # So we need to find the full amount of which 5p is one quarter\n    one_quarter = 5\n    full_amount = one_quarter * 4\n\n    return full_amount\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    white, milk, dark = symbols('white milk dark')\n    \n    # Given ratios\n    ratio_white_to_milk = Eq(white / milk, 3 / 7)\n    ratio_milk_to_dark = Eq(milk / dark, 7 / 5)\n    ratio_white_to_dark = Eq(white / dark, 3 / 5)\n    \n    # Number of dark chocolates more than white chocolates\n    more_dark_than_white = Eq(dark, white + 8)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_white_to_milk, ratio_milk_to_dark, ratio_white_to_dark, more_dark_than_white), (white, milk, dark))\n    \n    # Return the number of milk chocolates\n    return solutions[milk]\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    ans = 12 * 3 * 50\n    return ans\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "from math import gcd\nfrom scipy.special import comb\n\ndef solution():\n    # Given condition: P(3H & 5T) = 1/25 * P(5H & 3T)\n    # P(3H & 5T) = comb(8, 3) * p0 ** 3 * (1 - p0) ** 5\n    # P(5H & 3T) = comb(8, 5) * p0 ** 5 * (1 - p0) ** 3\n    # Therefore, comb(8, 3) * p0 ** 3 * (1 - p0) ** 5 = 1/25 * comb(8, 5) * p0 ** 5 * (1 - p0) ** 3\n    # Canceling comb(8, 3) and comb(8, 5) as they are equal and simplifying gives:\n    # p0 ** 2 = 1/25 * (1 - p0) ** 2\n    # Solving for p0:\n    p0 = 1 / (1 + 5)\n\n    # Ensure p0 is a fraction of co-prime integers\n    m = p0.numerator\n    n = p0.denominator\n    \n    # Simplify the fraction\n    divisor = gcd(m, n)\n    m //= divisor\n    n //= divisor\n\n    # Return the required sum m + n\n    return m + n\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_spent = 25 + 10\n    total_given = 50\n    change = total_given - total_spent\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Since we only care about the ones digit, we can use modular arithmetic (mod 10).\n    ones_digit_32_33 = (32 ** 33) % 10\n    ones_digit_22_29 = (22 ** 29) % 10\n\n    ans = (ones_digit_32_33 - ones_digit_22_29) % 10  # Ensure non-negative result for ones digit\n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n+1):\n            count += str(i).count('6')\n        return count\n    \n    pages = 1\n    while True:\n        if count_sixes(pages) == 18:\n            break\n        pages += 1\n    \n    return pages\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for x1 in range(1, 7):\n        for x2 in range(1, 7):\n            for x3 in range(1, 7):\n                if x1 != x2 and x2 != x3 and x1 != x3 and x1 + x2 + x3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    ans = (4/9) * 81\n    return ans\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((4*k**2 - 4*k + 1)/(4*k**2 - 1) for k in range(1, 1007))\n    ans += 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 5 == 4 and i % 16 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15\n    next_term = 39 + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    marks_correct = 4\n    marks_wrong = -2\n\n    # Let's assume Jay answered x questions correctly.\n    # Hence, he answered (total_questions - x) questions wrongly.\n    # So, we can set up the equation:\n    # marks_correct * x + marks_wrong * (total_questions - x) = total score\n\n    x = symbols('x')\n    equation = Eq(marks_correct * x + marks_wrong * (total_questions - x), 152)\n\n    num_correct = solve(equation, x)[0]\n\n    return num_correct\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "from sympy import primerange\n\ndef solution():\n    max_prime = 181 // 9  # Max possible value of m\n    primes_list = list(primerange(1, max_prime + 1))\n    for m in primes_list:\n        n = (181 - 9 * m) // 5\n        if n in primes_list and n > 0 and (181 - 9 * m) % 5 == 0:\n            return m + n\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n\n    # Equation 1: Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Equation 2: After transactions, Sam had 96 stickers more than Peter\n    # Sam gives 20% of his stickers to Peter -> sam - 0.2 * sam\n    # Peter gives 25% of his stickers to Sam -> peter - 0.25 * peter\n    # The difference between Sam's and Peter's stickers after the exchange is 96\n    equation2 = Eq((sam - 0.2 * sam + 0.25 * peter) - (peter + 0.2 * sam - 0.25 * peter), 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the value of Peter's stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slip_down = 3\n    jumps_per_period = 2\n    \n    # Calculate the effective height gain after two jumps (a period)\n    effective_gain_per_period = (jumps_per_period * jump_up) - slip_down\n\n    # Calculate the number of complete periods needed to reach just below the top\n    periods_to_reach_near_top = (total_height - jump_up) // effective_gain_per_period\n\n    # Calculate the height reached after these periods\n    height_reached = periods_to_reach_near_top * effective_gain_per_period\n\n    # Calculate the remaining height to be reached\n    remaining_height = total_height - height_reached\n\n    # Calculate the total number of jumps including the remaining jumps required after periods\n    total_jumps = periods_to_reach_near_top * jumps_per_period\n    \n    # Add the remaining jumps to the total jumps\n    if remaining_height > 0:\n        # If the remaining height is greater than what monkey can jump in one go, add two more jumps\n        if remaining_height > jump_up:\n            total_jumps += jumps_per_period\n        else:\n            total_jumps += 1  # Otherwise, only one last jump is needed\n\n    return total_jumps\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate differences between numbers\n    difference_1 = 51 - 39\n    difference_2 = 147 - 51\n    difference_3 = 147 - 39\n\n    # Find the greatest common divisor of differences\n    gcd_diff = gcd(gcd(difference_1, difference_2), difference_3)\n\n    return gcd_diff\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle said 3 sentences to each of the 5 team members she spoke to\n    lovelle_interactions = 3 * 5\n\n    # Since she spoke to 5 team members and received the same number of sentences back, \n    # the total sentences she was involved in is twice the count\n    total_lovelle_interactions = 2 * lovelle_interactions\n\n    # If 12 team members did not speak to Lovelle, \n    # then the total number of team members is the sum of members she spoke with,\n    # the members she did not speak with, and Lovelle herself\n    total_members = 5 + 12 + 1\n\n    return total_members\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Least number of cuts to distribute 16 sausages equally among 24 people\n    # Each person should get 16 / 24 = 2 / 3 of a sausage\n    # To achieve this, we need to figure out how many cuts are needed so that\n    # every single cut increases the number of pieces by one.\n    # Initially, there are 16 whole sausages,\n    # after the first cut, there will be 17 pieces,\n    # after the second cut, there will be 18 pieces, and so on.\n    # We need to continue this process until we reach 24 pieces.\n    \n    # Since each sausage can be cut into 3 pieces to provide each individual \n    # with 2/3 of a sausage, we can calculate the minimum cuts as follows:\n    # (3 pieces per sausage * 16 sausages) gives us 48 pieces from 16 sausages.\n    # If each person gets one piece, we don't need any cuts since they can be \n    # shared without cutting.\n    # But because each person needs 2 pieces (2/3 of a sausage), \n    # we can give out 16 sausages uncut, and we have 32 people served with 1 piece each.\n    # We then need to make 16 additional cuts to get 32 more pieces, thus serving the rest of 24-16=8 people\n    # with another piece to complete their 2/3 sausage serving.\n    # We can conclude that at least 16 cuts are required.\n    \n    num_cuts = 16\n    return num_cuts\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 326):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # Total number of letters in \"RAINBOW\"\n    vowel_count = 3    # Number of vowels, i.e., 'A', 'I', 'O'\n    consonant_count = total_letters - vowel_count  # Number of consonants\n\n    # Total permutations without any restrictions\n    total_permutations = factorial(total_letters)\n    \n    # Permutations where vowels are together\n    # Considering all vowels as a single entity + consonants: total (consonant_count + 1) entities\n    vowels_together_permutations = factorial(vowel_count) * factorial(consonant_count + 1)\n    \n    # The total ways where vowels are never together\n    total_ways_with_vowels_never_together = total_permutations - vowels_together_permutations\n    \n    return total_ways_with_vowels_never_together\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    total_perms = set(permutations(word))\n    total_count = len(total_perms)\n\n    # Count permutations where two 'T's are adjacent\n    adjacent_t_count = 0\n    for perm in total_perms:\n        if 'TT' in ''.join(perm):\n            adjacent_t_count += 1\n\n    # Subtract the number of permutations with adjacent T from total permutations\n    return total_count - adjacent_t_count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    total_tickets_sold = first_week_tickets + second_week_tickets + third_week_tickets\n    return total_tickets_sold\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50  # pieces per hour\n\n    time_needed = total_pieces / average_rate  # in hours\n\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah_before, mark = symbols('sarah_before mark')\n\n    equation1 = Eq(sarah_before, mark + 20)\n    equation2 = Eq(sarah_before + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah_before, mark))\n\n    return solutions[sarah_before]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    return round(418, -1)\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    # Since (a+b)^2 and |b-4| are negatives of one another and both expressions are non-negative, they must be zero.\n    a_plus_b_squared = 0\n    b_minus_4_absolute = 0\n\n    # (a+b)^2 = 0 implies a + b = 0 => a = -b\n    a = -b\n\n    # |b-4| = 0 implies b - 4 = 0 or -(b - 4) = 0 => b = 4\n    b = 4\n    a = -b\n\n    # Calculate a^2 + b^2 using the values of a and b\n    ans = a**2 + b**2\n    return ans\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    total = sum(i**2 for i in range(1, 26, 2))\n    return total\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):  # Start from 99, go down to 10, the smallest 2-digit number\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # Maximum attempts would mean the explorer tries the wrong keys every time before finally finding the right one for each chest.\n    # For the first chest: 9 attempts (all 9 keys)\n    # For the second chest: 8 attempts (remaining keys after the first chest is opened)\n    # For the third chest: 7 attempts\n    # For the fourth chest: 6 attempts\n    # Summing up all possible attempts gives us the maximum number of attempts to open all chests.\n    max_attempts = 9 + 8 + 7 + 6\n\n    return max_attempts\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 * 7\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    from sympy import symbols, Eq, solve, divisors\n\n    # Let's denote the total number of fruit gums as x.\n    x = symbols('x')\n\n    # According to the problem, after eating 2 fruit gums and sharing one third with friends,\n    # the remaining amount (2/3) must be divisible by 4 since the person ate an equal amount\n    # in each of the next four lessons.\n    # Thus, we're looking for the smallest x such that (2/3 * (x - 2)) % 4 == 0.\n\n    # Form the equation and solve for x\n    equation = Eq((2/3 * (x - 2)) % 4, 0)\n    solutions = solve(equation, x)\n\n    # Find divisors to ensure that it is divisible by 4\n    valid_solutions = [sol for sol in solutions if sol.is_integer and sol > 2 and\n                       (2/3 * (sol - 2)).is_integer and ((2/3 * (sol - 2)) % 4 == 0)]\n\n    # We are looking for the smallest integer solution that satisfies the condition.\n    return min(valid_solutions)\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let the number of mushrooms gathered in the first hour be x\n    # Then the number of mushrooms gathered in the second hour will be 40 - x\n    # According to the problem statement, if the father had gathered 26 more mushrooms in the first hour,\n    # the number would be equal to the second hour.\n    # So, x + 26 = 40 - x\n    # Solving for x gives x = (40 - 26) / 2\n    first_hour_mushrooms = (40 - 26) // 2\n    # The number of mushrooms gathered in the second hour is then:\n    second_hour_mushrooms = 40 - first_hour_mushrooms\n\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyzing the pattern, we can see that the sequence increases and decreases alternatively.\n    # Difference between the first and second terms is 3445 - 2945 = 500\n    # Difference between the second and third terms is 3445 - 3245 = 200\n    # It seems like the pattern increases by 500, then decreases by 200.\n    \n    # Let's confirm it with next terms:\n    # Third term and fourth term difference should be 3745 - 3245 = 500 (Increase by 500)\n    # Fourth term and fifth term difference should be 4045 - 3745 = 300 (Increase by 300)\n    \n    # Since it alternates between an increment of 500 and 300,\n    # after an increase by 500, it should decrease by 200 to get the missing term.\n    \n    # The sequence before the missing number increased by 300, so following the pattern,\n    # the missing number should be 3745 (previous number) + 300.\n    missing_number = 3745 + 300\n\n    return missing_number\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    \n    # Calculate the value after 6 years\n    value_after_6_years = initial_value * (depreciation_rate ** 6)\n    \n    return value_after_6_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w represent the number of women and m represent the number of men\n    w, m = symbols('w m')\n\n    # There were 4 times as many women as men at the party\n    equation1 = Eq(w, 4 * m)\n\n    # Total number of cupcakes eaten\n    total_cupcakes = 182\n\n    # Each woman ate 2 mini cupcakes and each man ate 5 mini cupcakes\n    # Total cupcakes: number of women * cupcakes per woman + number of men * cupcakes per man\n    equation2 = Eq(2 * w + 5 * m, total_cupcakes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Get the number of women from the solutions\n    return solutions[w]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter_cm = 1.85\n    num_coins = 11\n    total_length = coin_diameter_cm * (num_coins - 1) + coin_diameter_cm\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    n = 14\n    a1 = 5\n    d = 8 - 5\n\n    an = a1 + (n - 1) * d\n    sum_of_sequence = n * (a1 + an) / 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20\n    denominator = 12\n\n    ans = numerator // denominator  # Using integer division since we expect a whole number as the answer\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    number_of_people = 8\n    # Subtract 1 from number_of_people because in circular permutations,\n    # (n-1)! is the number of ways to arrange n people.\n    ans = factorial(number_of_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of ants\n    x = symbols('x')\n    \n    # Equation based on the given problem\n    equation = Eq(x - (3/4)*x - (2/5)*(1/4)*x + 185, 2*x)\n    \n    # Solve the equation\n    number_of_ants = solve(equation, x)\n    \n    return number_of_ants[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    age_difference_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n    total_cost = (books_first_day + books_second_day) * book_cost\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of a number only depends on the last digit of its factors\n    # Since the last digit of 2^2017 will only depend on the last digit of 2 raised to some power\n    # and similarly for 3^2017, we can calculate the last digit of each separately and then multiply them\n    last_digit_2 = pow(2, 2017, 10)  # Last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # Last digit of 3^2017\n\n    # The last digit of the entire expression is the product of the last digits of 2^2017 and 3^2017\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(num):\n        return ((num * 2 + 4) % 100)\n\n    num = 1\n    for _ in range(2021):\n        num = next_number(num)\n\n    return num\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # One hour has 60 minutes\n    # A red light flashes every: 60 / 4 = 15 seconds\n    # A green light flashes every: 60 / 6 = 10 seconds\n    \n    # Looking for the least common multiple (LCM) of the frequencies in seconds\n    # LCM of 15 and 10 is 30 seconds\n    # In each 30 seconds, they will flash together at least once\n    # In one hour (3600 seconds), they will flash together:\n    num_flashes_together = 3600 // 30\n    \n    # Including the first and the last time\n    num_flashes_together += 1\n    \n    return num_flashes_together\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14):  # a must be a prime number less than 14 since 3*13 is the max that doesn't exceed 41 when multiplied by 3\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    # Algebraically, we can consider the first term of the arithmetic progression as 'a',\n    # and the common difference as 'd'.\n    # The sum of the first four terms: S4 = a + (a + d) + (a + 2d) + (a + 3d) = 4a + 6d\n    # The sum of the last four terms: S_last4 = (a + 7d) + (a + 6d) + (a + 5d) + (a + 4d) = 4a + 22d\n    # It's given that S_last4 = S4 + 32, therefore we can write the equation as:\n    # 4a + 22d = 4a + 6d + 32\n    # By subtracting 4a and 6d from both sides, we get:\n    # 16d = 32\n    # The common difference 'd' can be found by dividing both sides by 16:\n    d = 32 / 16\n    return d\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # The given sequence is a list of square numbers: 1 (1^2), 4 (2^2), 9 (3^2), 16 (4^2), 25 (5^2), 36 (6^2), 49 (7^2), ...\n    # To find the next number in this sequence, we simply need to square the next integer in the sequence.\n    # The last number listed is 49, which is 7^2. So, the next integer is 8.\n    \n    next_number = 8 ** 2  # 8 * 8 = 64, which is the next square number in the sequence.\n    \n    return next_number\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price_with_30_percent_profit = 6500\n    profit_at_30_percent = 0.30\n    \n    cost_price = selling_price_with_30_percent_profit / (1 + profit_at_30_percent)\n    profit_at_5000 = 5000\n    \n    percentage_of_profit_at_5000 = (profit_at_5000 / cost_price) * 100\n    \n    return percentage_of_profit_at_5000\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    juice_ml_per_bottle = 120\n    fraction_water = 3/5\n    total_ml_per_bottle = juice_ml_per_bottle / (1 - fraction_water)\n    water_ml_per_bottle = total_ml_per_bottle * fraction_water\n    total_water_for_6_bottles = water_ml_per_bottle * 6\n    return total_water_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_grams = 8.2 * 1000\n    return kg_to_grams\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "import math\n\ndef solution():\n    num_letters = len(\"EARTH\")\n    num_ways = math.factorial(num_letters)\n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(\"0123456789\", 5):\n        s, e, n, d, m = perm\n        send = int(s + e + n + d)\n        more = int(m + o + r + e)\n        money = int(m + o + n + e + y)\n        \n        # Skip permutations that lead to invalid conditions\n        if s == '0' or m == '0':  # \"SEND\" and \"MORE\" can't start with a 0\n            continue\n        if money != send + more:  # The sum must equal \"MONEY\"\n            continue\n        \n        # If all conditions are met, this is the solution\n        return send * more\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Define the time it takes for each person to cross the bridge.\n    times = [1, 2, 5, 10]\n\n    # Step 1: Eddie (1 minute) and Jack (2 minutes) cross together, 2 minutes pass.\n    time_taken = 2\n\n    # Step 2: Eddie (1 minute) goes back with the flashlight, 1 minute passes.\n    time_taken += 1\n\n    # Step 3: Rose (5 minutes) and Mary (10 minutes) cross together, 10 minutes pass.\n    time_taken += 10\n\n    # Step 4: Jack (2 minutes) goes back with the flashlight, 2 minutes pass.\n    time_taken += 2\n\n    # Step 5: Eddie (1 minute) and Jack (2 minutes) cross again, 2 minutes pass.\n    time_taken += 2\n\n    # The total time taken is the sum of all steps\n    return time_taken\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Liters\n    container_size = 0.25 * initial_volume  # Liters\n    cup_volume_ml = 14 * 150  # Milliliters\n    cup_volume_liters = cup_volume_ml / 1000  # Convert Milliliters to Liters\n\n    water_left = initial_volume - (container_size + cup_volume_liters)\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    ans = count_derangements(7)\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150   # Simon's speed in feet per minute\n    friend_speed = 200   # Simon's friend's speed in feet per minute\n    time_walked = 10     # Time walked before Simon returns\n\n    # Simon walks away from school for 10 minutes\n    simon_distance_walked = simon_speed * time_walked\n\n    # Simon runs back to school, at twice his original speed, for 10 minutes\n    simon_run_speed = 2 * simon_speed\n    simon_distance_ran = simon_run_speed * time_walked\n\n    # Total distance covered by Simon's friend in 20 minutes\n    friend_distance_walked = friend_speed * (time_walked * 2)\n\n    # When Simon returns to school, his total distance covered is 0\n    # as he ends up where he started.\n\n    # Distance between Simon and his friend when Simon reaches the school\n    distance_between = friend_distance_walked\n\n    return distance_between\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # in minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "def solution():\n    from math import factorial\n\n    # Total items: 2 bells + 2 stars + 2 red balls + 1 green ball = 7 items\n    total_items = 7\n\n    # Since the items of same type are identical, their individual permutations won't count.\n    # Therefore, we divide by the factorial of the number of identical items.\n    # We have pairs of identical items (3 pairs), so we'll divide by 2! for each pair, and\n    # we have factorial(7) for total permutations of the 7 items.\n    \n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    ans = factorial(total_items) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    \n    return ans\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    answer = 5 / (1/4)\n    return answer\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages_day_original = symbols('pages_day_original')\n    total_pages = symbols('total_pages')\n    \n    equation1 = Eq(total_pages, pages_day_original * 8)\n    equation2 = Eq(total_pages, (pages_day_original + 2) * (8 - 2))\n    \n    solutions = solve((equation1, equation2), (pages_day_original, total_pages))\n    \n    return solutions[total_pages]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    # Divisibility rule for 99: A number is divisible by 99 if it is divisible by both 9 and 11.\n    # Divisibility rule for 9: The sum of the digits of the number must be divisible by 9.\n    # Divisibility rule for 11: The difference between the sum of digits in odd positions and\n    #                            the sum of digits in even positions must be divisible by 11 or 0.\n    \n    # Since we know the number 2_ _335, we can calculate the fixed sum of known digits\n    fixed_sum = 2 + 3 + 3 + 5\n    for x in range(10):\n        for y in range(10):\n            # Calculate the total sum of digits by adding the missing two digits\n            total_sum = fixed_sum + x + y\n            # Check divisibility by 9\n            if total_sum % 9 == 0:\n                # Check divisibility by 11 using the alternate sum method\n                if (2 - x + y - 3 + 3 - 5) % 11 == 0 or (5 - 3 + 3 - y + x - 2) % 11 == 0:\n                    # If both conditions are true, return the complete number\n                    return int(f\"2{x}{y}335\")\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_pages = symbols('total_pages')\n    read_first_day = 3/10 * total_pages\n    read_second_day = 24\n    left_third_day = 2/5 * total_pages\n    # On the second day, pages read + pages left = Total pages - pages read on the first day\n    equation = Eq(read_second_day + left_third_day, total_pages - read_first_day)\n\n    total_pages_solution = solve(equation, total_pages)[0]\n\n    pages_read_first_two_days = read_first_day + read_second_day\n    start_reading_third_day = pages_read_first_two_days + 1\n    return start_reading_third_day.subs(total_pages, total_pages_solution)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    total_students = 2001\n    min_spanish = int(0.80 * total_students)\n    max_spanish = int(0.85 * total_students)\n    min_french = int(0.30 * total_students)\n    max_french = int(0.40 * total_students)\n\n    # Assuming maximum overlap\n    max_both = min(max_spanish, max_french)\n\n    # Assuming minimum overlap\n    min_both = max(min_spanish + min_french - total_students, 0)\n\n    # Finding M - m\n    result = max_both - min_both\n    return result\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Max socks of other colors before getting a white pair\n    max_other_socks = 10 + 10\n    # Adding one to guarantee a pair of white socks\n    white_pair = 1\n\n    # Total socks to ensure a white pair\n    ans = max_other_socks + white_pair\n    return ans\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    # 12a / 4 + 2a * 5 can be simplified step by step\n    part1 = 12 * 'a' / 4  # Simplifying this part first\n    part2 = 2 * 'a' * 5   # Simplifying this part second\n\n    # Perform the operations\n    ans = part1 + part2\n\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n    simplified_expression = expression.simplify()\n    ans = simplified_expression\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the total number of cookies Richard had originally\n    x = symbols('x')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(x - (3/8)*x - (1/6)*x, 33)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The solution will be a list, we take the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    \n    for i in range(1, 10):\n        sequence.extend([i]* (i + 2))\n        \n    sorted_sequence = sorted(sequence)\n    n = len(sorted_sequence)\n    \n    if n % 2 == 1:\n        median = sorted_sequence[n // 2]\n    else:\n        median = (sorted_sequence[n // 2] + sorted_sequence[n//2 - 1]) / 2\n        \n    return median\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking: 5 loaves/20 minutes = 1 loaf/(20/5) minutes = 1 loaf/4 minutes\n    # Bud's rate of baking: 3 loaves/15 minutes = 1 loaf/(15/3) minutes = 1 loaf/5 minutes\n\n    # Total time baking\n    total_time = 40  # minutes\n\n    # Pip's loaves in 40 minutes: 40 minutes * (1 loaf/4 minutes)\n    pip_loaves = total_time * (1/4)\n\n    # Bud's loaves in 40 minutes: 40 minutes * (1 loaf/5 minutes)\n    bud_loaves = total_time * (1/5)\n\n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jemma_number = symbols('jemma_number')\n    equation = Eq((jemma_number + 3) * 5, 35)\n    \n    solution = solve(equation, jemma_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Year is arbitrary, we only care about the days\n    end_date = datetime(2020, 6, 7)\n    one_day = timedelta(days=1)\n    count_sundays = 0\n    \n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            count_sundays += 1\n        current_date += one_day\n    \n    return count_sundays\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    num_buckets = total_litres // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    packets = 25\n\n    flour_per_packet = total_flour / packets\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f'5{K}27{K}')\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    initial_constructors = 4\n    initial_days = 5\n    initial_distance = 900\n\n    target_constructors = 6\n    target_distance = 5400\n\n    initial_work_rate = initial_distance / (initial_constructors * initial_days)\n    target_days = target_distance / (target_constructors * initial_work_rate)\n\n    return target_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy_price1 = 10\n    sell_price1 = 20\n    buy_price2 = 30\n    sell_price2 = 40\n\n    profit1 = sell_price1 - buy_price1\n    profit2 = sell_price2 - buy_price2\n\n    total_profit = profit1 + profit2\n\n    return total_profit\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    r, w, pip, bud = symbols('r w pip bud')\n\n    # Initial ratio of red to white marbles\n    eq1 = Eq(r / w, 3 / 2)\n\n    # After Pip adds red marbles\n    eq2 = Eq((r + pip) / w, 5 / 3)\n\n    # After Bud adds white marbles, number of white balls put is 100 more than the red\n    eq3 = Eq((r + pip) / (w + bud), 5 / 4)\n    eq4 = Eq(bud - pip, 100)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (r, w, pip, bud))\n\n    # The number of white balls in the box initially\n    return solutions[w]\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam spends £93 for 6 tickets\n    # Find the price per ticket\n    price_per_ticket = 93 / 6\n\n    # Claire spends £124\n    # Calculate the number of tickets she can buy with £124\n    tickets_claire_buys = 124 / price_per_ticket\n\n    return int(tickets_claire_buys)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25\n    term_position = 10\n    common_difference = 3\n\n    first_term = nth_term - (term_position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Since the sum of Player One's cards is 23,\n    # the sum of Player Two's cards will be the sum of numbers 1 through 8 minus 23.\n    total_sum = sum(range(1, 9))  # This is the sum of numbers from 1 to 8.\n    player_two_sum = total_sum - 23\n\n    # We need to find the highest card Player Two can have.\n    # We check each possible highest card for Player Two, starting from 8 down to 1,\n    # and see if we can achieve the remaining sum with the rest of the cards.\n    for highest_card in range(8, 0, -1):\n        remaining_sum = player_two_sum - highest_card\n        player_two_cards = {highest_card}\n\n        for card in range(1, 9):\n            if card not in player_two_cards and remaining_sum - card >= 0:\n                player_two_cards.add(card)\n                remaining_sum -= card\n            \n            if len(player_two_cards) == 4:\n                # We found four distinct cards that sum to the remaining sum.\n                return highest_card\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the factor for the initial ratio with 4 cookies for every 3 brownies\n    # We assign symbols for cookies (c) and brownies (b)\n    x = symbols('x')\n    c, b = 4 * x, 3 * x\n\n    # After giving away 6 brownies\n    new_b = b - 6\n\n    # The ratio of cookies (c) to new brownies (new_b) became 12:7\n    equation = Eq(c/new_b, 12/7)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    # Calculate the initial number of cookies and brownies\n    total_cookies = c.subs(x, x_value[0])\n    total_brownies = b.subs(x, x_value[0])\n\n    # Return the total number of cookies and brownies\n    return total_cookies + total_brownies\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    sum_series = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return sum_series\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    correct_mark = 4\n    wrong_mark = -1\n    total_score = 168\n    \n    attempted_questions = total_questions - unattempted_questions\n    \n    # Let x be the number of questions answered correctly\n    # Then, the number of questions answered wrongly is attempted_questions - x\n    # So, the total score is x * correct_mark + (attempted_questions - x) * wrong_mark\n    \n    # Solving for x using the formula for the total score\n    # total_score = x * correct_mark + (attempted_questions - x) * wrong_mark\n    \n    # Simplify the equation\n    # total_score = x * correct_mark - x * wrong_mark + attempted_questions * wrong_mark\n    # x * (correct_mark - wrong_mark) = total_score - attempted_questions * wrong_mark\n    # x = (total_score - attempted_questions * wrong_mark) / (correct_mark - wrong_mark)\n    \n    x = (total_score - attempted_questions * wrong_mark) / (correct_mark - wrong_mark)\n    \n    return int(x)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    total_dumplings = 17 + 11\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = 17 - dumplings_each\n    return dumplings_to_give\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    # Assuming 'identical shoes' means any cobbler can work on any shoe\n    # Each shoe takes 2 minutes to clean, for a total of 18 pairs * 2 shoes per pair = 36 shoes.\n    # With 2 cobblers, they can work on 2 shoes at the same time, so effectively,\n    # total time spent = total shoes / cobblers\n    total_shoes = 9 * 2  # 9 pairs, 2 shoes per pair\n    minutes_per_shoe = 2  # each shoe takes 2 minutes to clean\n    cobblers = 2  # number of cobblers\n    \n    # Calculation of time for pair of cobblers to clean one pair of shoes\n    time_per_pair = minutes_per_shoe * 2  # Each cobbler cleans one shoe of the pair\n    \n    # As both cobblers work in parallel, total time is for 9 pairs\n    total_time = time_per_pair * 9 / cobblers\n    \n    return total_time\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (24 * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    # Since n1 through n9 are consecutive numbers and their sum is 9,\n    # the middle number (n5) must be 1 (as 9 is an odd number, and the sum\n    # of an odd number of consecutive integers centered around zero is zero).\n    # We can find the values of n1 through n9 around the middle value of 1.\n    n5 = 1\n    n4 = n5 - 1\n    n3 = n4 - 1\n    n2 = n3 - 1\n    n1 = n2 - 1\n    n6 = n5 + 1\n    n7 = n6 + 1\n    n8 = n7 + 1\n    n9 = n8 + 1\n    \n    # Calculate the product of n1 through n9\n    product = n1 * n2 * n3 * n4 * n5 * n6 * n7 * n8 * n9\n    return product\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    # This expression can be simplified by adding and subtracting 1 to the numerator, so that we create\n    # a term similar to the denominator:\n    # 2019 + 2018 * 2020 = 2019 + 2020 * 2018 - 2018 + 2018\n    #                      = 2020 * 2018 + 2019 - 2018 + 2018\n    #                      = 2019 * 2020 - 1 + 2018\n\n    # Therefore, we can rewrite the original expression as:\n    # (2019 * 2020 - 1 + 2018) / (2019 * 2020 - 1)\n    # Which can then be split into two parts:\n    # (2019 * 2020 - 1) / (2019 * 2020 - 1) + 2018 / (2019 * 2020 - 1)\n\n    # The first part is:\n    # (2019 * 2020 - 1) / (2019 * 2020 - 1) = 1\n    # The second part is much smaller than 1 and can be considered negligible in comparison\n\n    # So the answer to the expression is approximately 1\n\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    lcm = 1\n    for i in [6, 8, 9, 15]:\n        lcm = (lcm * i) // math.gcd(lcm, i)\n    \n    min_packs = (1000 + lcm - 1) // lcm # Round up to the nearest whole pack\n    return min_packs * lcm\n\nimport math\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_selling_price = total_revenue / total_cakes\n    \n    return average_selling_price\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Total letters in CHALLENGE = 10 (including 3 vowels AEE)\n    # Considering the vowels AEE as a single entity for now since they have to be together.\n    # So we can treat the entity (AEE) and the remaining 7 letters (CHLLNGE) as 8 items to rearrange.\n    # The number of ways these 8 items can be rearranged:\n    rearrangement_of_8_items = factorial(8)\n    \n    # However, within the AEE entity, two E's are identical and can be swapped without making a difference.\n    # We should divide by factorial(2) to correct for overcounting the arrangements of these identical letters.\n    rearrangement_within_entity = factorial(2)\n\n    # Total arrangements would be:\n    total_arrangements = rearrangement_of_8_items // rearrangement_within_entity\n\n    return total_arrangements\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    \n    # To find the least dividend where the divisor is equal to the quotient,\n    # we simply take the smallest value for the divisor (and hence quotient),\n    # which is 1 more than the remainder, since the divisor must be greater\n    # than the remainder.\n    \n    divisor = remainder + 1\n    quotient = divisor\n    \n    # The dividend is the product of the divisor and the quotient plus the remainder.\n    dividend = (divisor * quotient) + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n   \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    common_difference = 2\n    n = 12\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    total_time_one_entrance = 16\n    \n    # Total number of visitors in the queue after 16 minutes with one entrance\n    total_visitors = visitors_per_minute * total_time_one_entrance\n    \n    # Calculate the time when there will be no one waiting in the line for 2 entrances\n    check_in_rate_two_entrances = check_in_per_entrance * 2\n    time_no_waiting_two_entrances = total_visitors / check_in_rate_two_entrances\n    \n    return time_no_waiting_two_entrances\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n'))\n\n    # We will search for solutions that satisfy the total number\n    # being an even number less than 100\n    for total_vehicles in range(2, 100, 2):\n        solutions = solve((equation1, equation2, equation3.subs(symbols('n'), total_vehicles/2)), (cars, bikes, lorries))\n        # Each variable needs to be positive\n        if all(value > 0 and value.is_integer for value in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total expenditure\n    jan_to_mar = 3 * 450\n    apr_to_jul = 4 * 350\n    aug_to_oct = 1250\n    nov_to_dec = 2 * 400\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate average per month over the entire year\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    # We want to find a p such that 245p is a cube\n    # We can prime factorize 245 = 5 * 7 * 7\n    # A cube number has to have each prime factor to a power that is a multiple of 3\n    # Thus, we need to multiply 245 by a number that makes each prime factor's power a multiple of 3.\n    # For prime factor 5, we need two more (5^3)\n    # For prime factor 7, we need one more (7^3), since we already have 7^2\n    # So, p must include 5^2 * 7^1 = 25 * 7 = 175 to make 245p a cube number.\n    \n    p = 5**2 * 7**1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_spent = total_pages / pages_per_day\n\n    return int(days_spent)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return (6**2) - (4**2)\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n\n    total_rulers = claudia + elvis + shermaine\n\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    remaining_after_book = initial_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # The decimal part of 1/3 is repeating '3's\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    total_climb_daily = day_climb - night_slide\n    burrow_height = 16\n    current_height = 0\n    days = 0\n    \n    while current_height < burrow_height:\n        days += 1\n        current_height += day_climb\n        if current_height >= burrow_height:\n            break\n        current_height -= night_slide\n        \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_doubled = final_number - added_number\n    original_number = original_doubled / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # original ratio 3:5\n    equation1 = Eq(oranges/lemons, 3/5)\n\n    # after selling 48 oranges, ratio becomes 1:2\n    equation2 = Eq((oranges - 48)/lemons, 1/2)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    # the number of lemons in the basket at first\n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits and each student can choose to take either 1, 2 or 3 types of fruits.\n    # The possible choices are as follows: (A), (P), (C), (A,P), (A,C), (P,C), (A,P,C)\n    # There are 7 different ways a student can choose fruits.\n    # According to the Pigeonhole Principle, to ensure that there are two students who choose the same combination of fruits,\n    # we add 1 to the number of different combinations.\n    ans = 7 + 1\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from sympy import symbols, Eq, solve, digit\n\n    # Defining the symbols for each letter that represents a unique digit.\n    B, D, E, C = symbols('B D E C', integer=True)\n\n    # Each digit must be within the range of 0 to 9.\n    assumptions = {\n        B: (1, 9),  # Cannot be 0 because it's the first digit in a 4-digit number\n        D: (0, 9),\n        E: (0, 9),\n        C: (1, 9)   # Cannot be 0 because it's a digit in a 4-digit number\n    }\n    \n    # Creating equations based on the given puzzle\n    # CBCD + CDBC = BDEC\n    eq = Eq(C*1001 + B*1010 + D*110, B*1000 + D*100 + E*10 + C)\n    \n    # Solve the equation\n    solutions = solve(eq, (B, D, E, C))\n    \n    # Filter valid solutions based on the assumptions\n    for sol in solutions:\n        if all(assumptions[digit][0] <= sol[digit] <= assumptions[digit][1] for digit in assumptions):\n            B, D, E, C = sol[B], sol[D], sol[E], sol[C]\n            break\n    \n    # Return the value of the 4-digit number BDEC\n    return B*1000 + D*100 + E*10 + C\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount = 0.10  # 10% discount\n\n    discount_amount = original_price * discount\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    # Number of choices for each category\n    num_burgers = 2  # chicken or beef\n    num_sides = 3    # fries, mashed potato, or broccoli\n    num_drinks = 5   # Sprite, Coke, Fanta, lemonade, or iced tea\n    \n    # Using the principle of multiplication to get the number of combinations\n    num_combos = num_burgers * num_sides * num_drinks\n    \n    return num_combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n\n    initial_amount = spent / fraction_spent\n\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    total_legs = 32\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n    cat_legs = 4\n    \n    legs_without_cats = (ducks * duck_legs) + (parrots * parrot_legs) + (rabbit * rabbit_legs)\n    cats = (total_legs - legs_without_cats) / cat_legs\n    \n    return int(cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    students_A = 45\n    students_B = 75\n    students_C = 210\n\n    # Find the greatest common divisor among the three numbers\n    common_group_size = gcd(gcd(students_A, students_B), students_C)\n\n    return common_group_size\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def phi_operation(a, b):\n    if a < 7:\n        return a + b * b\n    else:\n        return a - b\n\ndef solution():\n    inner_result = phi_operation(8, 3)\n    result = phi_operation(4, inner_result)\n    return result\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    equation2 = Eq(younger_current + (older_current - younger_current), 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "import math\n\ndef solution():\n    lcm = math.lcm(6, 8, 9, 15)  # Least common multiple\n    min_markers = math.ceil(1000 / lcm) * lcm  # Purchase at least 1000 markers\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the total number of rooms\n    r = symbols('r')\n\n    # If there are 4 people in each room, 40 students don't have dormitories\n    # Therefore, the total number of students is 4 * r + 40\n    # If there are 6 people in each room, 24 beds will be vacated\n    # Hence, the total number of students is 6 * r - 24\n\n    # Since the total number of students is the same in both cases, we have the equation:\n    # 4 * r + 40 = 6 * r - 24\n    equation = Eq(4 * r + 40, 6 * r - 24)\n\n    # Solve for r (the number of rooms)\n    solution = solve(equation, r)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the current ages of Judy and her father\n    judy, father = symbols('judy father')\n    \n    # Define the equations based on the problem statements\n    equation1 = Eq(father, judy + 33)     # Father is 33 years older than Judy\n    equation2 = Eq(judy + father, 63)     # The sum of their current ages is 63\n    \n    # Solve the system of equations for current ages\n    ages = solve((equation1, equation2), (judy, father))\n    \n    # Define symbols for the number of years ago\n    years_ago = symbols('years_ago')\n    \n    # Define an equation for when her father's age was four times Judy's age\n    equation3 = Eq(ages[father] - years_ago, 4 * (ages[judy] - years_ago))\n    \n    # Solve the equation for the number of years ago\n    years_ago_solution = solve(equation3, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values\n    term_10 = 23\n    term_15 = 38\n    position_10 = 10\n    position_15 = 15\n    position_target = 102\n\n    # Calculate the common difference\n    common_difference = (term_15 - term_10) / (position_15 - position_10)\n\n    # Calculate the first term\n    first_term = term_10 - (position_10 - 1) * common_difference\n\n    # Calculate the value of the 102nd term\n    term_102 = first_term + (position_target - 1) * common_difference\n\n    return term_102\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age = 9\n    john_age = 5\n    jane_target_age = 15\n    years_to_jane_target = jane_target_age - jane_age\n    john_target_age = john_age + years_to_jane_target\n    return john_target_age\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.80 * marked_price\n    loss = marked_price - selling_price\n\n    equation = Eq(loss, 40)\n\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = (7 + 3) * 11 - (7 + 3 * 11)\n    return result\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rates of the taps\n    rate_x = 1 / 10 # Tap X fills the tank in 10 minutes\n    rate_xy = 1 / 6 # Both taps together fill the tank in 6 minutes\n    \n    # Using inclusion-exclusion principle to find the rate of Tap Y\n    rate_y = rate_xy - rate_x\n    \n    # The time Tap Y alone will take to fill the tank completely is the inverse of its rate\n    time_y = 1 / rate_y\n    \n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10\n    only_strawberries = 30 - 10\n    both = 10\n    neither = 5\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        ""
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12 / 100\n    discount_amount = usual_price * discount_percentage\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Define the total points and points system\n    total_points = 44\n    points_correct = 6\n    points_incorrect = -2\n    total_questions = 10\n    \n    # Let's define the variable for correct answers as x\n    # The incorrect answers would then be total_questions - x\n    # Set up the equation: points_correct * x + points_incorrect * (total_questions - x) = total_points\n    # 6*x - 2*(10 - x) = 44\n    # Now solve for x\n    for x in range(total_questions + 1):\n        if (points_correct * x + points_incorrect * (total_questions - x)) == total_points:\n            return x\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = 0\n    current_factorial = 1\n    for i in range(1, 9):\n        current_factorial *= i\n        factorial_sum += current_factorial\n    \n    last_two_digits = factorial_sum % 100\n    \n    return last_two_digits\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the mass of sugar in each cup\n    sugar_A = 300 * 0.20\n    sugar_B = 300 * 0.30\n    \n    # Calculate the total volume and total mass of sugar in the mixture\n    total_volume = 300 + 300\n    total_sugar = sugar_A + sugar_B\n    \n    # Calculate the sugar concentration in the mixture\n    concentration = (total_sugar / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n    total_marbles = 1442\n\n    # Equation 1: ahmad + ryan = 1442\n    # Equation 2: ahmad = 6 * ryan\n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # solve the equations to find the number of marbles ahmad and ryan has\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    # calculate how many marbles must ahmad give to ryan\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def count_digit_occurrences(n, digit):\n    count = 0\n    for i in range(1, n+1):\n        count += str(i).count(str(digit))\n    return count\n\ndef solution():\n    total_pages = 200\n    digit_to_count = 4\n    return count_digit_occurrences(total_pages, digit_to_count)\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def is_divisible_by_4(n):\n    # Checking last two digits divisibility by 4\n    return int(str(n)[-2:]) % 4 == 0\n\ndef solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    num1 = int(f'{A}{B}{C}{D}')\n                    num2 = int(f'{D}{C}{B}{A}')\n                    if is_divisible_by_4(num1) and is_divisible_by_4(num2):\n                        return num1\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes\n    # Let y be the number of $10-notes\n    # Theia had 95 notes altogether, so x + y = 95\n    # After exchanging $10-notes into $2-notes, she had 175 $2-notes.\n    # Each $10-note becomes five $2-notes, so the total is x + 5y = 175\n    # Use substitution or elimination to solve the system of equations:\n    # x = 95 - y (substitute x in the second equation)\n    # (95 - y) + 5y = 175\n    # Simplify the equation to find the value of y:\n    y = (175 - 95) / 4\n    # Now find the value of x:\n    x = 95 - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    return 2020 * 3824 - 1911 * 4042\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 29  # From 8 to 288, excluding 288 because it will be counted in tens.\n    count_tens = 3 * 10  # Every set of 100 has 10 times '8' in the tens place and there are 3 sets: 80-89, 180-189, 280-288.\n    count_hundreds = 1  # Only 288 has an '8' in hundreds place.\n\n    # Add the number of instances '8' appears in the ones place to that in the tens place and\n    # the single appearance in the hundreds place.\n    total_count = count_ones + count_tens + count_hundreds\n\n    return total_count\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    equation1 = Eq(delta + delta, square)\n    equation2 = Eq(square + delta, circle)\n    equation3 = Eq(diamond, circle + square + delta)\n\n    solutions = solve((equation1, equation2, equation3), (delta, square, circle, diamond))\n\n    return solutions[delta]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of incorrect answers\n    # Since each correct answer gives 2 points and each wrong answer result in losing 1 point:\n    # We have the system of equations:\n    # 2x - y = 82 (total score)\n    # x + y = 50 (total questions)\n    \n    # Solve for x and y\n    total_questions = 50\n    total_score = 82\n\n    # Substitute y from the second equation into the first\n    # 2x - (50 - x) = 82\n    # Solve for x\n    correct_answers = (total_score + total_questions) // 3\n\n    return correct_answers\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    y = 0\n    while True:\n        x = (25 * y + 8) / 24\n        if x.is_integer() and x > 0:\n            return int(x)\n        y += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"{2}{x}{y}\")\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 15 / 100\n    increase_rate = 15 / 100\n\n    discounted_price = original_price * (1 - discount_rate)\n    new_price = discounted_price * (1 + increase_rate)\n\n    return new_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the cost per kg for each bag\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.7 / 4\n    \n    # Compare the two costs\n    return 'Bag 1' if cost_per_kg_bag1 < cost_per_kg_bag2 else 'Bag 2'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    # Let the distance of each section be d kilometers.\n    # The total distance between A and B is 3d kilometers.\n    # Time taken to travel the first section at 30 km/h is d/30 hours.\n    # Time taken to travel the second section at 40 km/h is d/40 hours.\n    # Time taken to travel the third section at 60 km/h is d/60 hours.\n    # Total time taken is the sum of the times above.\n    total_time = (1/30 + 1/40 + 1/60)\n\n    # Average speed is the total distance divided by the total time.\n    average_speed = 3 / total_time\n    return average_speed\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n\n    total_cost = price_per_book * number_of_books\n\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_number, _ = solve_congruence(*congruences)\n    return least_number\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3 / 4) * (2 / 5) * 1\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    three_quarter_mass = 350\n    one_quarter_mass = 250\n    \n    one_whole_mass = 4 * (three_quarter_mass - one_quarter_mass)\n    empty_jar_mass = three_quarter_mass - three_quarter_mass + one_quarter_mass - one_whole_mass\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    count = 0\n    for number in range(10000, 100000):\n        if '3' in str(number) and number % 3 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    red_mark = 5\n    blue_mark = 10\n    green_mark = 12\n\n    ans = lcm(red_mark, blue_mark, green_mark)\n\n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    num_buses = 7\n\n    total_length = (bus_length * num_buses) + (distance_between_buses * (num_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    # Let x be the original number Aiden intended to calculate with\n    # According to the question, Aiden mistakenly did the following calculation:\n    # (x / 4) - 25 = 2021\n    # Let's solve for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    # Setting up the equation\n    mistake_eq = Eq((x / 4) - 25, 2021)\n    # Solving the equation for x\n    mistaken_value = solve(mistake_eq, x)[0]\n\n    # Now that we have x, let's calculate the correct result\n    # The correct operation is: (x * 4) + 25\n    correct_answer = (mistaken_value * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    num_blocks_initial = 28\n    total_height_initial = 182\n    num_blocks_final = 42\n\n    # Finding the height of one block\n    height_per_block = total_height_initial / num_blocks_initial\n\n    # Calculating the height for 42 blocks\n    total_height_final = height_per_block * num_blocks_final\n\n    return total_height_final\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        ""
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1  # +1 because it's inclusive\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given that x:5 = y:3, which is a direct proportional relationship.\n    # Solve for y when x = 5\n    x = 5\n    y = (3/5) * x\n    return y\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # We are given:\n    # a1, a2, ..., a4 = 6, a6 = 15\n    # We know that for any Fibonacci-like sequences,\n    # a4 = a3 + a2 and a6 = a5 + a4\n    # We need to find a7 which is a6 + a5\n    # From a6 = a5 + a4, we can find a5 = a6 - a4\n \n    # given numbers in the sequence\n    a4 = 6\n    a6 = 15\n\n    # Since it's a Fibonacci-like sequence, we can express\n    # a5 as a6 - a4\n    a5 = a6 - a4\n    \n    # The seventh number a7 is the sum of a6 and a5\n    a7 = a6 + a5\n    \n    return a7\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50\n    after_discount_price = selling_price * 0.90\n    profit = after_discount_price - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    for m in range(1, 1000):  # limit the range to some reasonable number\n        original_count = m**2 + 5\n        new_count = original_count + 18\n        if int(new_count**0.5)**2 == new_count:\n            return original_count\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    return sum([9, 11, 8, 12, 7, 13, 6, 14, 5, 14])\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    common_factor_ab = gcd(class_a, class_b)\n    greatest_common_factor = gcd(common_factor_ab, class_c)\n\n    return greatest_common_factor\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    original_sum = original_average * 3\n    new_sum = new_average * 3\n    difference = original_sum - new_sum\n    original_number = difference + 16\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    equation = Eq((girls * 88 + boys * 91) / 36, 89)\n    \n    number_of_girls = solve(equation, girls)\n    \n    return number_of_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_distance = 520\n    meeting_time = 4\n    speed_A = 55\n\n    distance_A = speed_A * meeting_time\n    distance_B = total_distance - distance_A\n    speed_B = distance_B / meeting_time\n\n    return speed_B\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Calculate the total weight of sugar from each person's solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Calculate the total weight of the mixed solution\n    total_solution = 800 + 200 + 300\n\n    # Calculate the total weight of sugar in the mixed solution\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Calculate the concentration of the resulting sugar solution in percentage\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # convert 5 p.m. to minutes (17:00 in 24-hr format)\n    badminton_duration = 45  # badminton duration in minutes\n    jogging_duration = 30  # jogging duration in minutes\n\n    end_time = start_time + badminton_duration + jogging_duration  # total time spent in activities\n\n    # Convert end time back to hours and minutes\n    hours = end_time // 60\n    minutes = end_time % 60\n    \n    # Adjust for 24-hour format if necessary (handling times past midnight not required here)\n    if hours >= 24:\n        hours -= 24\n\n    # Combine hours and minutes into a time format (not required, but for completeness)\n    stop_time = \"{:02d}:{:02d}\".format(hours, minutes)\n    \n    return stop_time\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    saplings_planted_by_one_volunteer_in_one_hour = 100 / (8 * 5)\n    saplings_planted_by_twenty_volunteers_in_nineteen_hours = 20 * 19 * saplings_planted_by_one_volunteer_in_one_hour\n    return saplings_planted_by_twenty_volunteers_in_nineteen_hours\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_1 = 20 * 0.35\n    fruit_juice_2 = 30 * 0.60\n    \n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    concentration = (total_fruit_juice / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's say we have a 3D shape with faces (F), vertices (V), and edges (E)\n    F, V, E = symbols('F V E')\n\n    # According to Euler's formula for 3D shapes, we have\n    euler_eq = Eq(F + V, E + 2)\n\n    # Additional information needed are not provided in the question, typically\n    # you would use the properties of the specific 3D shape to form further equations\n    # and solve for the unknowns. Since we don't have specific details, we use Euler's\n    # formula directly, but acknowledging that it is not sufficient to determine F, V, and E\n    # without further information. The solution here does not make much sense without\n    # additional context or constraints on the 3D shape.\n\n    solutions = solve((euler_eq), (F, V, E))\n\n    # Since we cannot get a definite answer with the given information, we return the Euler's equation\n    # This would normally not be the final answer, but a step towards solving with more info.\n    \n    return solutions\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    sold_first_day = 5/7 * x\n    remaining_after_first_day = x - sold_first_day\n    sold_second_day = 1/3 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - sold_second_day\n    remaining_after_making_more = remaining_after_second_day + 354\n    final_count = 3 * x\n\n    equation = Eq(remaining_after_making_more, final_count)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    bag_A = 55\n    bag_B = 13\n    count = 0\n    while bag_A != bag_B:\n        count += 1\n        bag_A -= count\n        bag_B += count\n    return count\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # The possible values that can accompany 7 given the constraints are: 3, 4, 5, 6, 7, 8, and 11\n    # We need to find the smallest possible three-digit number, so we start with the smallest possible digits\n    # Since 7 is one of the digits and we want the smallest number, the other digits should be as small as possible\n    # but also comply with the given condition. We assume 7 is the largest among the digits, so the smallest\n    # possible digit difference is 7 - 4 = 3. The next smallest digit is 7 - 3 = 4.\n    # Therefore, the smallest number we can form is 347 or 437 (since the positions can be interchanged).\n\n    # Test for 347 and 437, which is smaller\n    smallest_number = min(347, 437)\n    return smallest_number\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament with 4 people, each round eliminates half of the players.\n    # Therefore, to determine a winner from 4 people, we need two rounds:\n    # In the first round, 4 players play which results in 2 winners.\n    # In the second round, the remaining 2 players play to determine the final winner.\n    # Total rounds = 2 to determine the winner.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    produced_by_both = total_exhibits - not_produced_by_A - not_produced_by_B\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee at least one ball of each color, the magician might pick all balls of one color plus all of another color before finally getting one of the last color.\n    # Therefore, the magician needs to pick the total number of balls of the two most numerous colors plus one additional ball to ensure one of each color.\n\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Taking the two colors with the most balls\n    most_balls = sorted([blue_balls, red_balls, green_balls])[-2:]\n\n    # Add one to guarantee picking from the third color\n    ans = sum(most_balls) + 1\n\n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 6),\n        (3, 7),\n        (5, 11)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    while ans < 200 or ans > 300:\n        ans += 6 * 7 * 11\n\n    return ans\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for a blouse and a skirt\n    blouse, skirt = symbols('blouse skirt')\n    \n    # Each skirt costs $14 more than a blouse\n    equation1 = Eq(skirt, blouse + 14)\n    \n    # The total cost of 3 skirts and 2 blouses is $317\n    equation2 = Eq(3 * skirt + 2 * blouse, 317)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (blouse, skirt))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # The mapping of the letters in \"Angel\" to the numbers given\n    angel_mapping = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    \n    # The correct numbers for \"Devil\" based on the mapping from \"Angel\"\n    correct_devil = angel_mapping['D'] + angel_mapping['e'] + angel_mapping['v'] + \\\n                    angel_mapping['i'] + angel_mapping['l']\n    \n    # The attempt made by Andy\n    andy_attempt = '4005220912'\n    \n    # Check if Andy's attempt is correct\n    if correct_devil == andy_attempt:\n        return True\n    else:\n        # Create the correct password for \"Devil\" using the mapping we have\n        correct_password = ''.join(angel_mapping.get(letter, letter) for letter in 'Devil')\n        return correct_password\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    for A in range(2, 1000):\n        is_A_prime = all(A % i != 0 for i in range(2, int(A**0.5) + 1))\n        if is_A_prime:\n            for B in range(2, A):\n                is_B_prime = all(B % i != 0 for i in range(2, int(B**0.5) + 1))\n                if is_B_prime and (8*A - 3*B) % 3 == 0:\n                    return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    increase_percentage = 0.1  # Increase is 10%\n    decrease_percentage = 0.1  # Decrease is 10%\n\n    original_value = last_year_value / (1 + increase_percentage)\n    this_year_value = last_year_value * (1 - decrease_percentage)\n    \n    profit_or_loss = this_year_value - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate the ways to arrange the 3 types of flowers\n    flower_types = factorial(3)\n    \n    # Calculate the ways to arrange the roses and jasmines within their own type\n    roses = factorial(3)\n    jasmines = factorial(4)\n\n    # Since the daisy is only one, it does not add additional arrangements.\n    \n    # Multiply the arrangements of each type and the types themselves\n    total_ways = flower_types * roses * jasmines\n\n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import gcd\n\n    lcm_6 = 1\n    for i in range(1, 7):\n        lcm_6 *= i // gcd(lcm_6, i)\n        \n    lcm_8 = 1\n    for i in range(1, 9):\n        lcm_8 *= i // gcd(lcm_8, i)\n\n    m_values = []\n    for m in range(lcm_6, lcm_8 + 1):\n        if m % lcm_6 == 0 and lcm_8 % m == 0:\n            m_values.append(m)\n    \n    return len(m_values)\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    count = 0\n    current_sum = 0\n    current_integer = 1\n    while current_sum + current_integer <= 60:\n        current_sum += current_integer\n        current_integer += 1\n        count += 1\n    return count\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 20 / 100  # 20% discount\n    reduction = original_price * discount\n    new_price = original_price - reduction\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # ml per minute\n    minutes_per_hour = 60\n    leak_per_hour_ml = leak_rate_per_min * minutes_per_hour\n    ml_to_litres_conversion = 1000  # 1 litre is equal to 1000 ml\n    leak_per_hour_litres = leak_per_hour_ml / ml_to_litres_conversion\n    return leak_per_hour_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m = perm\n        if s == 0 or m == 0:\n            continue\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money:\n            return 100 * s + 10 * e + e\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    height_difference = 30  # James is 30 cm shorter than Mark\n\n    mark_height = james_height + height_difference  # Calculate Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Let the number of friends be 'n' and the number of pies be 'p'\n    # From the problem, we have the following two equations:\n    # p = 5n + 3  (1)\n    # p = 6n - 2  (2)\n    \n    # Equating both equations, we get:\n    # 5n + 3 = 6n - 2\n    # Solving this gives us the number of friends 'n'\n    n = 3 + 2\n    \n    # Substituting 'n' back into either equation (1) or (2) will give us the total pies 'p'\n    p = 5 * n + 3\n    \n    return p\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 different colors and she needs at least one matching pair.\n    # Worst case scenario: she picks one of each color first.\n\n    socks_picked = 3  # one of each color\n\n    # Then, she picks another sock. Regardless of the color,\n    # she will now have at least one pair.\n    socks_picked += 1\n\n    return socks_picked\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    cut_into_three = 3\n    cut_pieces = final_pieces - original_pieces\n    pieces_cut_into_three = cut_pieces // (cut_into_three - 1)\n    \n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Using the Pigeonhole Principle in the worst-case scenario, we will always pick a different color\n    # until we are forced to pick the same color.\n    # So we pick 1 red, then 1 green (trying to avoid getting 2 of the same color), \n    # then again 1 red, then 1 green.\n    # At this point, we have 1 red and 1 green apple left in the bag\n    # The next apple we pick has to be the same color as one we already picked.\n    # Therefore, we need 5 picks to guarantee 2 apples of the same color.\n\n    return 5\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    ans = 20000 - 20\n    return ans\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    ans = round(result, 1)\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    # Number of pails\n    num_of_pails = 4\n    # Liters of water in each pail\n    water_per_pail = 4\n    # Water left after filling the pails\n    water_left = 7\n    \n    # Calculate the original volume of water\n    original_volume = (num_of_pails * water_per_pail) + water_left\n    \n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard = 12\n    adam = 2 * richard\n    will = (2/3) * adam\n    total_age = richard + adam + will\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 47, 2):\n        total_sum += (i + 1) - i\n    return total_sum\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    sol = solve(equation, c)\n    return sol[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        # Remove the trailing zeroes by modulo 10 until the last digit is non-zero\n        while product % 10 == 0:\n            product //= 10\n    # Get the last non-zero digit\n    return product % 10\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Considering that 243 is 3^5\n    # We have x^20 * y^15 * z^5 = 3^5\n    # To find the value of x^8 * y^6 * z^2, we need to find relationship between the exponents.\n    \n    # If we know x^20 = 3^5, then x^8 = 3^(5 * (8/20))\n    # If we know y^15 = 3^5, then y^6 = 3^(5 * (6/15))\n    # and if we know z^5 = 3^5, then z^2 = 3^(5 * (2/5))\n    \n    # Therefore, multiply the three to get the value of x^8 * y^6 * z^2\n    \n    x_exponent = 5 * (8/20)\n    y_exponent = 5 * (6/15)\n    z_exponent = 5 * (2/5)\n    \n    ans = (3 ** x_exponent) * (3 ** y_exponent) * (3 ** z_exponent)\n    \n    return ans\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    num_participants = 10\n    handshakes = num_participants * (num_participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_distance = 500\n    distance_per_day = 50\n\n    days_needed = total_distance / distance_per_day\n\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    # For x, the product of 42 and x equals the square of 42, which is 42^2.\n    # To find the least positive integer x that satisfies this condition,\n    # 42 * x = 42^2, we can solve for x.\n    x = (42**2) // 42\n\n    # For y, we need to find the least positive integer such that when we\n    # multiply it by 42 and then factor this product, all the exponents\n    # of its factors are equal to 1. This means we are looking for a number y\n    # so that when multiplied by 42, the result is a square-free number.\n    # We start with the number 1 and check each successive integer until we\n    # find one that satisfies the condition.\n    y = 1\n    while True:\n        factors = factorint(42 * y)\n        if all(exp == 1 for exp in factors.values()):\n            break\n        y += 1\n\n    # The sum of x and y is then returned as the answer.\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattles = 8\n    days = 4\n    fodder_per_cattle_per_day = 10\n\n    total_fodder = cattles * days * fodder_per_cattle_per_day\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    counts = [2*i for i in range(1,9)]  # List of the number of times each number is written\n    total_numbers = sum(counts)  # Total count of numbers written\n    half_numbers = total_numbers // 2  # Half of the total numbers\n\n    # Finding the median\n    running_sum = 0\n    for i, count in enumerate(counts, start=1):\n        running_sum += count\n        if running_sum >= half_numbers:\n            if total_numbers % 2 == 1: # if odd total numbers, then the median is a single number\n                return i\n            else:  # if even total numbers, then the median is the average of two middle numbers\n                if running_sum > half_numbers:\n                    return i\n                else:\n                    return (i + i + 1) / 2\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Given final number of marbles Larry had\n    final_marbles = 35\n    \n    # Marbles given to Nate and Ollie\n    marbles_nate_ollie = 30 + 26\n    \n    # Marbles left before giving to Mark\n    before_mark = final_marbles + marbles_nate_ollie\n    \n    # Total initial marbles (x - (5/12)x = (7/12)x is the marbles before Mark)\n    initial_marbles = before_mark * 12 / 7\n    \n    return int(initial_marbles)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jess and Jill's sweets\n    jess, jill = symbols('jess jill')\n\n    # Jill has 6 sweets for every 5 Jess has before giving away sweets\n    equation1 = Eq(jill, (6/5) * jess)\n\n    # After giving away sweets, Jill has 4 sweets for every 7 Jess has\n    # Jess now has 8 more sweets\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_solution = 600  # total solution in grams\n    sugar_concentration = 0.22  # 22%\n\n    sugar_amount = total_solution * sugar_concentration  # in grams\n\n    return sugar_amount\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = sum(int(digit) for number in range(1, 100) for digit in str(number))\n    return total\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = 1/4\n    money_given = total_money * portion_given\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(\"1\" + str(i)) * 3 == int(str(i) + \"1\"):\n            return i\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Assuming the current date is today\n    current_date = datetime.now()\n\n    # Get the year and month from the current date\n    current_year = current_date.year\n    current_month = current_date.month\n\n    # Calculate the year and month of birth\n    birth_month = current_month - 6\n    birth_year = current_year - 38\n\n    # If we subtract 6 months and go past January (month 1), we adjust the year\n    if birth_month <= 0:\n        birth_month += 12\n        birth_year -= 1\n\n    # Return the year Fred was born\n    return birth_year\n\n# Call the function to find the answer\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    \n    money_after_CDs = initial_money / 4 + 3\n    remaining_money = initial_money - money_after_CDs\n    money_after_batteries = remaining_money * (3/5) + 6\n    final_remaining_money = remaining_money - money_after_batteries\n    \n    equation = Eq(final_remaining_money, 24)\n    \n    solution = solve((equation), (initial_money))\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    even_digits = [0, 6, 8]\n    total_numbers = 0\n    \n    for last_digit in even_digits:\n        if last_digit == 0:\n            total_numbers += 4 * 3 * 2  # Since the last digit is zero, we cannot use zero as first digit (3 remaining choices for each of the other two)\n        else:\n            total_numbers += 4 * 3 * 3  # If the last digit is not zero, we have 4 choices for first digit, including zero, then 3 and 2 choices for the remaining two\n    \n    return total_numbers\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    total_money = 1848\n    ratio_money_pies_cakes = 15 / 7\n    ratio_pies_cakes = 4 / 1\n    difference_cost_pie_cake = 13\n\n    # Calculate the money collected from selling pies\n    money_pies = (ratio_money_pies_cakes / (1 + ratio_money_pies_cakes)) * total_money\n    # Calculate the money collected from selling cakes\n    money_cakes = total_money - money_pies\n\n    # Let x be the cost of one pie, then the cost of one cake is x+13\n    # 4x pies were sold, 1x cakes were sold\n    # total money from pies is 4x^2, total money from cakes x(x+13)\n    # Equation: 4x^2 / x(x+13) = money_pies / money_cakes\n    # Simplify the equation: 4x / (x+13) = money_pies / money_cakes\n\n    numerator = 4 * money_cakes\n    denominator = money_pies - money_cakes\n\n    # Solve for x\n    x = numerator / denominator - 13\n\n    # The number of cakes sold is total money from cakes divided by cost of one cake\n    number_of_cakes = money_cakes / (x + 13)\n\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = [\n        beads for beads in range(40, 81) if beads % 4 == 0 and beads % 7 == 0\n    ]\n    return beads_count[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # speeds in meters per minute\n    speed_qiqi = 60\n    speed_weiling = 72\n\n    # time difference between the time they started, given in minutes\n    time_difference = 2\n    # Weiling arrives 4 minutes before Qiqi\n    time_advance = 4\n\n    # total time taken by Qiqi when Weiling arrives\n    # time_weiling + time_difference (2 mins after Qiqi starts) - time_advance (Weiling is 4 mins earlier)\n    total_time_qiqi = (time_difference - time_advance)\n\n    # Since speed = distance / time, we get the following two equations:\n    # distance = speed_qiqi * (total_time_qiqi + time_weiling) \n    # distance = speed_weiling * time_weiling\n    # above two equations equal to each other hence:\n    # speed_weiling * time_weiling = speed_qiqi * (total_time_qiqi + time_weiling)\n\n    # rearranging the equation we get:\n    # time_weiling(speed_weiling - speed_qiqi) = speed_qiqi * total_time_qiqi\n    # time_weiling = speed_qiqi * total_time_qiqi / (speed_weiling - speed_qiqi)\n\n    time_weiling = speed_qiqi * total_time_qiqi / (speed_weiling - speed_qiqi)\n    distance = speed_weiling * time_weiling\n    \n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of a power of 9 follows a pattern: 9, 1, 9, 1, ...\n    # Therefore, the units digit for 9^odd_number is 9 and for 9^even_number is 1.\n    units_digit_2015 = 9  # Because 2015 is odd\n    units_digit_2016 = 1  # Because 2016 is even\n    \n    # Sum the units digits\n    ans = (units_digit_2015 + units_digit_2016) % 10  # Use modulus to find the units digit of the sum\n    \n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # First, calculate the number of ways to arrange the 5 men: 5!\n    ways_to_arrange_men = factorial(5)\n\n    # There are 6 possible positions where the women can be placed\n    # (before each man and after the last man): _ M _ M _ M _ M _ M _\n    possible_positions_for_women = 6\n\n    # Choose 3 positions for women out of the 6 without any two being adjacent\n    ways_to_choose_positions = factorial(possible_positions_for_women) // (factorial(3) * factorial(possible_positions_for_women - 3))\n\n    # Arrange the 3 women in the 3 chosen positions: 3!\n    ways_to_arrange_women = factorial(3)\n\n    # The total number of ways is the product of the number of ways to arrange men,\n    # the number of ways to choose positions for women, and the number of ways to arrange women\n    total_ways = ways_to_arrange_men * ways_to_choose_positions * ways_to_arrange_women\n\n    return total_ways\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n    longest_piece = gcd(length1, length2)\n    return longest_piece\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time_minutes = (11 * 60) + 50 - 15  # Convert 11.50 am to minutes and adjust for slowness\n    half_hour_later = marc_time_minutes + 30  # Add half an hour\n    george_time_minutes = half_hour_later + 7  # Adjust for George's watch being 7 minutes fast\n\n    # Convert back to hours and minutes\n    george_time_hours = george_time_minutes // 60\n    george_time_minutes = george_time_minutes % 60\n\n    # Adjust if it goes beyond 12 pm\n    if george_time_hours >= 12:\n        george_time_hours -= 12\n\n    # Format the time for George's watch\n    if george_time_hours == 0:\n        george_time_hours = 12\n\n    ans = f\"{george_time_hours}:{str(george_time_minutes).zfill(2)}\"\n\n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_eq = Eq(income*30000*(T/100) + (income - 30000)*(T+3)/100, income*(T+1)/100)\n    sol = solve((tax_eq, income>30000), (T, income))\n\n    return sol[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    amount = 540\n\n    ans = (percentage / 100) * amount\n    \n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable h\n    h = symbols('h')\n    \n    # Set up the equation 2*h = 25 + h\n    equation = Eq(2 * h, 25 + h)\n    \n    # Solve the equation for h\n    solved_h = solve(equation, h)\n    \n    # Return the solution for h\n    return solved_h[0]\n\n# Call the function and store the answer\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_meters = 0\n    jumps = 0\n    \n    while total_meters < 31:\n        total_meters += 3\n        jumps += 1\n        if total_meters < 31:\n            total_meters -= 2\n        else:\n            break\n        if jumps % 3 == 0:  \n            total_meters -= 1\n    \n    return jumps\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # A's work rate per hour\n    rate_A = 1 / 10\n    # B's work rate per hour\n    rate_B = 1 / 15\n    # Combined work rate per hour\n    combined_rate = rate_A + rate_B\n    # Time taken to paint the house working together\n    time_taken = 1 / combined_rate\n    return time_taken\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate Gigi's birth year\n    gigi_birth_year = 2002 - 45\n    \n    # Calculate Jenny's birth year\n    jenny_birth_year = 1995 - 22\n    \n    # Calculate when Gigi was 22\n    year_when_gigi_22 = gigi_birth_year + 22\n\n    # Calculate Jenny's age when Gigi was 22\n    jenny_age_when_gigi_22 = year_when_gigi_22 - jenny_birth_year\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    count = 0 \n    while term > 0:\n        count += 1\n        term += difference\n    return count\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    for i in range(1000):\n        if (i % 3 == 0) and (i % 8 == 0) and (str(i)[-1] == '2'):\n            num = i\n            break\n    return num\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We try to find the worst-case scenario where we get as many marbles of the same color as possible.\n    # Since we need to ensure 4 marbles of different colors, we consider the worst case for the first 3 colors first.\n    # Draw all marbles of the color with the least amount (red) first, which is 3.\n    # Then draw all marbles of the next least amount (yellow), which is 8.\n    # Now we have 3 red and 8 yellow marbles, but we still need two more colors.\n    # So we draw all marbles of the next color (blue), which is 9.\n\n    # By now we have drawn 3 (red) + 8 (yellow) + 9 (blue) marbles.\n    # We have ensured 3 different colors, but we are not yet sure to have the fourth color.\n    # Therefore, we need to draw one more marble, which will definitely be of the fourth color (red in this case).\n\n    return 3 + 8 + 9 + 1\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(\"451\" + str(last_digit))\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    \n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_to_travel = distance / speed_downstream\n\n    return time_to_travel\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    cost_of_drinks = total_cost - total_cupcake_cost\n    cost_per_can = cost_of_drinks / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    correct_questions = symbols('correct_questions')\n    \n    # equation: 5*correct_questions - 2*(20 - correct_questions) == 51\n    equation = Eq(5 * correct_questions - 2 * (20 - correct_questions), 51)\n    \n    solutions = solve(equation)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n    # Convert minutes to seconds for uniformity\n    first_light = 30  # 0.5 minutes is 30 seconds\n    second_light = 45  # 0.75 minutes is 45 seconds\n    # All three lights turn green every 9 minutes which is 540 seconds\n    all_lights = 540\n\n    # Find lcm of the first two lights\n    first_two_lcm = lcm(first_light, second_light)\n\n    # The third light must have a cycle time that's a factor of the all_lights cycle\n    # and it should be at least 30 seconds\n    third_light = first_two_lcm\n    while third_light < 30 or all_lights % third_light != 0:\n        third_light += 1\n\n    return third_light\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Define the differences between terms\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    # Calculate the second differences\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    # Since the second differences are the same, it's an arithmetic sequence.\n    # Calculate the next difference based on the second differences being constant\n    next_difference = differences[-1] + second_differences[-1]\n    # Calculate the next term in the sequence    \n    next_term = 50 + next_difference\n    return next_term\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    desired_mean = 5\n    num_numbers = 8\n\n    total_sum = desired_mean * num_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # A can pass the ball to B, C, or D (3 options)\n    # The second person can then pass to two others (not back to A and not to themselves)\n    # The third person has no choice but to pass it back to A\n    # So the total number of methods is just 3 (first pass) * 2 (second pass)\n    methods = 3 * 2\n\n    return methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    daniel, ming = symbols('daniel ming')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    num_girls = 250\n    total_weight_g = weight_per_paper_g * num_girls\n    total_weight_kg = total_weight_g / 1000  # Convert grams to kilograms\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    speed = (9 + 3) / 8  # speed = total distance crossed / time taken for first bridge\n    # Since the entire line crosses the second bridge in 10 seconds, we use the speed to calculate the length.\n    # total distance crossed (second bridge + 3 meters) = speed * time taken for second bridge\n    total_distance_second_bridge = speed * 10\n    length_second_bridge = total_distance_second_bridge - 3  # subtract the length of the line to get the bridge length\n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - i*2)**2 - (998 - i*2)**2 for i in range(0, 250))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    # Starting at a reasonable even number, since the product is relatively small\n    for n in range(2, int(2688**(1/3))+2, 2): # Loop through even numbers up to the cube root of 2688\n        if n * (n + 2) * (n + 4) == 2688:\n            return n + 4  # The largest of the three consecutive even numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime('11:55 AM', '%I:%M %p')\n    end_time = datetime.strptime('1:40 PM', '%I:%M %p')\n\n    duration = end_time - start_time\n    duration_in_minutes = duration.seconds // 60\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is counted twice if we just sum up the people on her left and right\n    total_people = 11 + 7 + 1  # Added 1 for Crystal herself, not counted twice\n    # Since the kids stand in 2 rows and we counted one row,\n    # we need to multiply by 2 to get the total number of people in P1 class\n    total_people *= 2\n    return total_people\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, wrong = symbols('correct wrong')\n\n    # correct + wrong = total number of questions\n    equation1 = Eq(correct + wrong, 30)\n    \n    # 5*correct - wrong = total score\n    equation2 = Eq(5*correct - wrong, 90)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assume x buses are used for group A and y buses for group B initially\n    # Group A after using x buses has 11 members left\n    # Group A and B combined fill another bus\n    # This means the remaining members of group B are 36 - 11 = 25 (after y buses)\n    \n    # Let's set up the equations:\n    # bus_capacity * x + 11 = total_members_A\n    # bus_capacity * y + 25 = total_members_B\n    \n    # When calculating the photos:\n    # each_photo_number = total_members_A * total_members_B\n    # Remaining photos on the last roll can be calculated by taking modulo by the roll capacity (36)\n\n    bus_capacity = 36\n    x, y = 0, 0\n    total_members_A, total_members_B = 0, 0\n    \n    # We need to find the minimum number of buses (x and y) such that the equations are satisfied\n    # x and y must be integers because you cannot have fractional buses \n    # And we know that group A and B together take one extra bus, so\n    # 36 - (total_members_B % 36) == 11 (because 11 members had to join group B to fill a bus)\n    # Now let's use a while loop to keep incrementing y to find the lowest number of total_members_B that\n    # satisfy above condition\n    \n    while (bus_capacity - (total_members_B % bus_capacity)) != 11:\n        total_members_B += bus_capacity\n        y += 1\n        \n    total_members_A = (bus_capacity * (y+1)) - 25  # As group A fills y+1 buses, subtract group B's members in y+1 bus\n    \n    # Now we calculate the number of photos\n    total_photos = total_members_A * total_members_B\n    # Finally, calculate how many more pictures the last film roll can take\n    remaining_photos = bus_capacity - (total_photos % bus_capacity)\n\n    return remaining_photos\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    count = 0\n    total_cupcakes = 10\n    \n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 < group2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    total_minutes = (3 * 45) + (2 * 5)  # 3 lessons and 2 moving periods\n    break_start_time = start_time + timedelta(minutes=total_minutes)\n    return break_start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10): # Hundreds digit cannot be zero\n        for b in range(0, 10): # Tens digit\n            for c in range(0, 10): # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return 100 * a + 10 * b + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    gcd_of_num1_num2 = gcd(num1, num2)\n    ans = gcd(gcd_of_num1_num2, num3)\n\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    boxes_filled = total_eggs // eggs_per_box\n\n    return boxes_filled\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original number of Adam's coins\n    x = symbols('x')\n    # Troy had 5 times as much as Adam originally\n    equation1 = Eq(5 * x, x + 24 * 3)  # After Adam took 24 more coins, he had 1/3 of Troy's coins\n\n    # solve for x\n    num_adam = solve(equation1, x)[0]\n    num_troy = 5 * num_adam\n\n    # calculate the total number of coins they had at first\n    total_coins = num_adam + num_troy\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let initial amount of money be 'x'.\n    x = symbols('x')\n    \n    # After spending 1/4 of his money and $3 on CDs.\n    money_after_CDs = (3 / 4) * x - 3\n    \n    # Then spending 3/5 of the remaining money and $6 on batteries.\n    money_after_batteries = (2 / 5) * money_after_CDs - 6\n    \n    # He was left with $24.\n    equation = Eq(money_after_batteries, 24)\n    \n    # Solve the equation for 'x'.\n    initial_money = solve(equation, x)\n    \n    return initial_money[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        digits = [int(x) for x in str(i)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for digits in permutations(range(10), 3):\n        if sum(digits) == 8 and digits[0] != 0 and digits[2] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # The worst case scenario is when Darrell draws all blue and white beads first\n    blue_beads = 5\n    white_beads = 6\n    beads_needed_for_guaranteeing_5_green = 4\n\n    # Adding the number of beads that need to be drawn in worst case scenario\n    # to guarantee the fifth green bead is drawn\n    beads_to_draw = blue_beads + white_beads + beads_needed_for_guaranteeing_5_green\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    # Let x be the number of $10 notes and y be the number of $5 notes.\n    # We have two equations based on the problem statement:\n    # 1. Total notes equation: x + y = 57\n    # 2. Notes left after spending: (1 - 0.6) * x = 2 * (1 - 0.25) * y\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 57)\n    equation2 = Eq((1 - 0.6) * x, 2 * (1 - 0.25) * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the amount spent on the bag\n    x_spent = 0.6 * solutions[x] * 10\n    y_spent = 0.25 * solutions[y] * 5\n    \n    return x_spent + y_spent\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    return (18 / 16) * (16 * 15) / (5 * 3)\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    missing_number = (1/4) * 16 / (1/2)\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of people in each group\n    people_per_group = 16 // 4\n    \n    # Number of games for a single round-robin tournament in one group\n    games_per_group = people_per_group * (people_per_group - 1) // 2\n    \n    # Total number of games in the group stage\n    group_games_total = games_per_group * 4\n    \n    # Total number of games in the knockout rounds\n    # There are 8 initial contestants, resulting in 7 games (quarterfinals, semifinals, finals, third-place match)\n    knockout_games_total = 8 - 1\n    \n    # Total number of games throughout the contest\n    total_games = group_games_total + knockout_games_total\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A_days = symbols('A_days')  # Time A takes to finish the job alone\n    B_days = 2 * A_days  # Time B takes to finish the job alone\n    \n    # A's work rate is 1/A_days and B's work rate is 1/B_days\n    # Together their combined rate is 1/A_days + 1/B_days\n    # It takes them 1 / (1/A_days + 1/B_days) days to finish the job together\n    \n    # We know that A finishes 12 days before B, so A_days + 12 = B_days\n    equation = Eq(A_days + 12, B_days)\n    \n    # Solve for A_days\n    A_days_solution = solve(equation, A_days)[0]\n    \n    # Now we find the time it takes for both to finish the job together\n    total_rate = 1/A_days_solution + 1/(2 * A_days_solution)\n    time_together = 1 / total_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Defining the congruences based on the problem statement\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    # Using Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n    \n    ans = permutations(9, 4)\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    received = 65\n\n    initial_stickers = final_stickers - received + given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    # Equation 1: pineapple weighs 650g more than an apple.\n    equation1 = Eq(pineapple, apple + 650)\n    # Equation 2: 3 pineapples and 4 apples weigh 5450g altogether.\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Set up the congruences based on the problem conditions\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    # Find the smallest whole number that satisfies all the congruences.\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    return 520 + (180 - 320)\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent Rachel's candies and a represent Alice's candies\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 candies, then they have the same number of candies\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 candies, Rachel has 4 more than 3 times of Alice's candies\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    import math\n    \n    # To find the other factors, we need the greatest common divisor of 15 and 21\n    gcd_15_21 = math.gcd(15, 21)\n\n    # The prime factorization of 15 is 3 * 5, and for 21 is 3 * 7\n    # To have exactly 8 factors, the number must be a perfect cube of its prime factors times a square of a prime.\n    # Both 15 and 21 share a factor of 3. So, we will consider this to be a perfect cube (3*3*3) in our number.\n    # That is, the number could be 3^3 * 5 * 7. However, this only gives us 8 factors when 5 or 7 is squared.\n    # Since 5*5 = 25 and 7*7 = 49, and 3*3*3*25 is the smallest, we will consider the number to be 3^3 * 5^2.\n    \n    number = (3**3) * (5**2)\n    \n    # Calculate the sum of all factors based on the formula for the sum of factors\n    sum_of_factors = ((3**0 + 3**1 + 3**2 + 3**3) * (5**0 + 5**1 + 5**2))\n    \n    return sum_of_factors\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789'):\n        if perm[0] != '8':\n            continue\n        if int(''.join(perm[:1])) % 1 == 0 and \\\n           int(''.join(perm[:2])) % 2 == 0 and \\\n           int(''.join(perm[:3])) % 3 == 0 and \\\n           int(''.join(perm[:4])) % 4 == 0 and \\\n           int(''.join(perm[:5])) % 5 == 0 and \\\n           int(''.join(perm[:6])) % 6 == 0 and \\\n           int(''.join(perm[:7])) % 7 == 0 and \\\n           int(''.join(perm[:8])) % 8 == 0 and \\\n           int(''.join(perm[:9])) % 9 == 0 and \\\n           int(''.join(perm[:10])) % 10 == 0:\n            return int(''.join(perm))\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n\n    matthew_tomatoes = (belinda_tomatoes - belinda_gave) / 2\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_rate = 10\n    increased_efficiency = 1.50\n    new_rate = base_rate * increased_efficiency\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Calculate the difference between the two numbers\n    difference = 2012 - 1274\n    \n    # Calculate the greatest common divisor of the difference and the larger number\n    from math import gcd\n    D = gcd(difference, 2012)\n    \n    # The largest possible D which divides both numbers with the same remainder R will be D = gcd(2012 - 1274, 2012)\n    # The largest value for D - R is actually D itself, since the largest remainder R could be is D-1,\n    # making D - R equal to 1, which is not larger than D\n    ans = D\n    return ans\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    num = 1\n    while True:\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5 / 7) * total_juice\n    remainder = total_juice - given_to_grace\n    given_to_evelyn = (1 / 9) * remainder\n    juice_left = remainder - given_to_evelyn\n\n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculating the last digit of 4^2009\n    last_digit_4 = (4 ** (2009 % 2)) % 10\n    \n    # Calculating the last digit of 6^2010\n    last_digit_6 = (6 ** (2010 % 2)) % 10  # Since the last digit of powers of 6 is always 6\n    \n    # Adding the last digits and taking the last digit of the result\n    ans = (last_digit_4 + last_digit_6) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    total_weight = 63\n    \n    # Let x be the number of 2-gram weights\n    # Let y be the number of 5-gram weights\n    # The equation is: 2*x + 5*y = 63\n    \n    for x in range(0, total_weight // 2 + 1):\n        y = (total_weight - 2*x) / 5\n        if y.is_integer():\n            ways += 1\n            \n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six = 6 * 150\n    total_height_of_four = 4 * (150 - 2)\n    \n    total_height_of_remaining_two = total_height_of_six - total_height_of_four\n    average_height_of_remaining_two = total_height_of_remaining_two / 2\n    \n    return average_height_of_remaining_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, total = symbols('a b c total')\n\n    # A and C fill the pool with 18 tons from A\n    equation1 = Eq(a + c, total)\n    equation2 = Eq(a, 18)\n\n    # B and C fill the pool with 27 tons from B\n    equation3 = Eq(b + c, total)\n    equation4 = Eq(b, 27)\n\n    # B's flow rate is twice A's, which is 18 tons\n    equation5 = Eq(b, 2 * a)\n\n    equations = (equation1, equation2, equation3, equation4, equation5)\n\n    solutions = solve(equations, (a, b, c, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Since the number that can be written by each person in one turn is finite and small,\n    # we can use Dynamic Programming to find out whether the current player to move has a winning strategy.\n  \n    # We will create a list where index of the list represents the number of numbers already written on the board\n    # and the value represents whether the current player has a winning strategy from that state.\n    # True will represent that the current player has a winning move, and False will represent they do not.\n    \n    # There are 52 numbers, hence 53 states including 0.\n    dp = [False] * 53\n    \n    # Loop through all states starting from the last state to the first state.\n    for i in range(52, -1, -1):\n        # Player to move can win if they can move to any state where the opponent does not have a winning strategy.\n        if ( i+1 <= 52 and not dp[i+1] ) or \\\n           ( i+3 <= 52 and not dp[i+3] ) or \\\n           ( i+4 <= 52 and not dp[i+4] ) or \\\n           ( i+6 <= 52 and not dp[i+6] ):\n            dp[i] = True\n            \n    # Now let's find the strategy. We want to find the move that forces the opponent into a losing state.\n    def find_strategy():\n        for x in [1, 3, 4, 6]:\n            if not dp[x]:\n                return x\n        return None\n\n    # dp[0] is the initial state of the game; True means the starting player has a winning move\n    # We will also return the move that should be played according to the strategy.\n    return (dp[0], find_strategy())\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 24  # Rex answered all but one\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n\n    # let x be the correct answers, so (total_questions - x) is the incorrect ones\n    # 4x + (-2)(total_questions - x) = 66\n    # Solve for x\n    x = (total_score + 2 * total_questions) / (correct_points + incorrect_points)\n    \n    return int(x)\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum from 1 to 20 using the formula for the sum of the first n natural numbers: n(n+1)/2\n    sum_to_20 = 20 * (20 + 1) // 2\n    # Calculate the sum from 1 to 19 using the same formula: n(n+1)/2\n    sum_to_19 = 19 * (19 + 1) // 2\n    # Calculate the final result by adding two times the sum to 19 to the sum to 20\n    ans = sum_to_20 + 2 * sum_to_19\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 5 choices for the first letter, 4 for the second, 3 for the third, and 2 for the last one.\n    ways = factorial(5) // factorial(5 - 4)\n\n    return ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age has two digits\n        digits_reversed_age = int(str(age)[::-1])  # Reverse the digits and convert to int\n        if digits_reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Start with an initial guess of the number of meatballs each student might get\n    meatballs_per_student = 1  # Each student must get at least one meatball\n    while True:\n        # Calculate the total number of students before and after the new student comes\n        total_students_before = (20 + meatballs_per_student) // meatballs_per_student\n        total_students_after = (10 + meatballs_per_student) // meatballs_per_student\n        \n        # Check if the new student addition is consistent with the description\n        if total_students_before + 1 == total_students_after:\n            # If consistent, the solution is found\n            break\n        else:\n            # Increase the guess by 1 and try again\n            meatballs_per_student += 1\n\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_number = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_number * increase_fraction\n    ans = original_number + increase_amount\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of questions be 'total'.\n    total = symbols('total')\n\n    # On the 1st day, Andrew completed 7 more than half of all the questions.\n    first_day = total / 2 + 7\n\n    # Remaining questions after the 1st day.\n    remaining_after_first_day = total - first_day\n\n    # On the 2nd day, Andrew completed 5 fewer than half of the remaining questions.\n    second_day = remaining_after_first_day / 2 - 5\n\n    # Remaining questions after the 2nd day.\n    remaining_after_second_day = remaining_after_first_day - second_day\n\n    # On the 3rd day, Andrew finished the remaining 23 questions.\n    third_day = 23\n\n    # Setting up the equation based on the remaining questions after the 2nd day\n    # being equal to the 23 questions completed on the 3rd day.\n    equation = Eq(remaining_after_second_day, third_day)\n\n    # Solving for the total number of questions.\n    total_questions = solve(equation, total)\n\n    return total_questions[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    elif fraction_value < decimal_value:\n        ans = \"0.17 is larger\"\n    else:\n        ans = \"They are equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # 1 litre of water in ml\n    water_used = 200 * 3  # 200 ml in each of the 3 cups\n    remaining_water = total_water - water_used\n    return remaining_water\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    twelfth_term = tenth_term + 2 * difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Given sum of first 8 terms (S8) and sum of first 22 terms (S22)\n    S8 = 32\n    S22 = 44\n    \n    # Number of terms for the first sum (n1) and the second sum (n2)\n    n1 = 8\n    n2 = 22\n    \n    # The formulas to calculate the sum of an arithmetic sequence are as follow:\n    # S8 = n1/2*(2*a1 + (n1 - 1) * d), where a1 is the first term, and d is the common difference\n    # S22 = n2/2*(2*a1 + (n2 - 1) * d)\n    # from these equations, we can find two linear equations in terms of a1 and d\n    \n    # Let's solve these equations to find the first term (a1) and the common difference (d)\n    # Using the method of substitution or elimination we get:\n    # 2S8 = n1*(2*a1 + (n1 - 1) * d)\n    # 2S22 = n2*(2*a1 + (n2 - 1) * d)\n    \n    # Now simplify these two equations to get the values of a1 and d\n    # 2S8/n1 - 2S22/n2 = (n1 - 1)*d - (n2 - 1)*d\n    # a1 = (2S8/n1 - 2S22/n2 + (n2 - 1)*d) / 2\n    \n    # Also, we can write:\n    # 2S8 = n1 * (2*a1 + (n1-1) * d)\n    # 2S22 = n2 * (2*a1 + (n2-1) * d)\n    \n    # Subtract the first equation multiplied by n2 from the second equation multiplied by n1:\n    # n2 *(2S8) - n1*(2S22) = n1 * n2 * (2*a1 + (n1-1) * d) - n2 * n1 * (2*a1 + (n2-1) * d)\n    \n    d = (2*S8*n2 - 2*S22*n1) / (n1*n2 - n1*(n1-1)/2 - (n2*n2 - n2*(n2-1)/2))\n    a1 = (2*S8/n1 - (n1-1)*d) / 2\n    \n    # Now we have the first term (a1) and the common difference (d)\n    # We need to find the sum of the first 15 terms (S15)\n    n15 = 15\n    S15 = n15/2*(2*a1 + (n15 - 1)*d)\n    \n    return S15\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = 0\n    for i in range(1, 251):\n        if int(i**0.5) == i**0.5:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_questions = 10 + 20 + 30\n    total_correct = (0.20 * 10) + (0.80 * 20) + (0.90 * 30)\n    overall_score_percentage = (total_correct / total_questions) * 100\n    return overall_score_percentage\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n\n    # Two bottles of water and three small bags of fruit cost a total of £2.55\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n\n    # A bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(water, fruit + 0.15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses and d be the original number of daisies\n    r, d = symbols('r d')\n\n    # Total number of roses and daisies originally is 300\n    equation1 = Eq(r + d, 300)\n\n    # The number of roses and daisies in the future after planting the same amount each month\n    # Let x be the number of roses and daisies planted each month\n    x = symbols('x')\n\n    # Future roses is 280, which is the original number plus the number of planted roses\n    equation2 = Eq(r + x, 280)\n\n    # Future daisies is 180, which is the original number plus the number of planted daisies\n    equation3 = Eq(d + x, 180)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, x))\n\n    # Return the number of roses originally in the park\n    return solutions[r]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([1, 3, 4, 5, 7, 8]):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return (False, i, n//i)\n    return True\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    for n in range(1, 100):\n        boys = (2 * n + 1) ** 2  # Total number of students in layers with boys\n        girls = n * n  # Total number of students in layers with girls\n        if boys - girls == 31:\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Size of large square brick\n    large_brick_area = 6 * 6  # in decimeters^2\n\n    # Convert the large brick area from decimeters^2 to cm^2\n    large_brick_area_cm2 = large_brick_area * 100  # 1 decimeter^2 = 100 cm^2\n\n    # Needed large bricks to cover the area\n    needed_large_bricks = 80\n\n    # Total area to cover with bricks\n    total_area_cm2 = large_brick_area_cm2 * needed_large_bricks\n\n    # Size of small square brick\n    small_brick_area = 64  # in cm^2\n\n    # Needed small bricks to cover the same area\n    needed_small_bricks = total_area_cm2 / small_brick_area\n\n    return int(needed_small_bricks)\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    # The number of 4's being multiplied is 2018 times.\n    # Since 4 = 2^2, we can represent the multiplication of 4's as 2^(2 * 2018).\n    exponent_4 = 2 * 2018\n    # Each 25 can be represented as 5^2, so the multiplication of 25's can be represented as 5^(2 * 2018).\n    exponent_25 = 2 * 2018\n    \n    # A = 2^(2 * 2018) * 5^(2 * 2018) which simplifies to (2 * 5)^(2 * 2018) = 10^(2 * 2018)\n    # The number of digits of 10 raised to any positive integer n is n+1\n    # So the number of digits is (2 * 2018) + 1\n    num_of_digits = (2 * 2018) + 1\n\n    return num_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    \n    return comb(total_players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    actual_cost = selling_price / (1 + profit_percentage/100)\n    \n    alternate_profit = 5000\n    alternate_cost = selling_price - alternate_profit\n    \n    alternate_profit_percentage = (alternate_profit / alternate_cost) * 100\n    \n    return alternate_profit_percentage\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # original price symbol\n    original_price = symbols('original_price')\n\n    # third day price is 56% of the original\n    third_day_price = 0.56 * original_price\n\n    # third day price is also second day price (80% of original) minus 24 dollars\n    second_day_price = 0.80 * original_price - 24\n\n    # form the equation for the third day price\n    equilibrium = Eq(third_day_price, second_day_price)\n\n    # solve the equation for original price\n    original_price_value = solve(equilibrium, original_price)[0]\n\n    # since there's a profit of 20 dollars, cost price is selling price - profit\n    selling_price = third_day_price.subs(original_price, original_price_value)\n    cost_price = selling_price - 20\n\n    return cost_price\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            if x1 != x2 and 1 <= 10 - x1 - x2 <= 10 and x1 + x2 < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # since Emily is directly behind Danny, they count as two people\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n\n    length_each_piece = total_length / num_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = 3 / 4 * remainder_cookies\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m_per_km = 1000\n    ans = km * m_per_km\n    return ans\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let total original number of apples be x\n    # After selling 1/5 on Monday, he had 4/5x apples left\n    # He sold 80 apples on Tuesday, so he had 4/5x - 80 apples after that\n    # In the end, he was left with 30% (or 3/10) of the original apples\n    # So, 4/5x - 80 = 3/10x\n    # Solving this equation to find the value of x (the original number of apples)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4/5*x - 80, 3/10*x)\n    total_apples = solve(equation, x)[0]\n\n    # Apples in the end (30% of the total apples)\n    apples_in_the_end = 3/10 * total_apples\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Average * number of items = total sum of all numbers\n    sum_of_eight = total_sum - 180  # Subtract the one number from the total sum\n    avg_of_eight = sum_of_eight / 8  # Calculate the new average\n    return avg_of_eight\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    # Ben has twice as many purple orchids as yellow ones\n    equation1 = Eq(purple, 2 * yellow)\n    # Ben has three times as many yellow orchids as white ones\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n    # There are 28 red orchids\n    equation4 = Eq(red, 28)\n\n    # Solve for purple, yellow, and white orchids\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n\n    total_markers = red_markers + green_markers + blue_markers\n\n    return total_markers\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let x be the first even number\n    # Then the seven consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10, x+12\n    # The fourth number is x+6\n    # The sum of the first and seventh numbers is x + (x+12)\n    # According to the problem, x+6 is greater than one-third of (x + x + 12) by 6\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x+6, (2*x + 12)/3 + 6)\n    solution_x = solve(equation, x)[0]\n    \n    # The sum of the seven numbers is 7 times the average value, which is (x + x+12)/2 * 7\n    sum_seven_numbers = 7 * (solution_x + (solution_x + 12)) / 2\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Calculate trees on one side\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    \n    # Since trees are planted on both sides\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # The Ferrari driver finished in second place, meaning one car is still ahead.\n    # If the driver overtook 5 cars, that would mean there were 5 cars between him and the first place originally.\n    # Therefore, initially the Ferrari driver was in 5 + 2 = 7th place.\n    # Including the Ferrari driver, there were 7 cars ahead of him which means a total of 7 cars were behind the first car.\n    # Adding the first car, we find there were 8 cars in the race.\n    return 8\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    # Formula to calculate the sum of interior angles of a polygon is (n-2)*180\n    # where n is the number of sides. So for a 9-sided polygon,\n    # (9-2)*180 = 7*180 = 1260 degrees would be the sum of the interior angles.\n\n    # Since it's a regular polygon, all interior angles are equal,\n    # so each interior angle is the total sum of interior angles divided by the number of sides.\n    sum_of_interior_angles = (9 - 2) * 180\n    interior_angle = sum_of_interior_angles / 9\n\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    result = 0\n    for i in range(1, 21):\n        result += int('5' * i)\n    \n    return result % 10000  # Get the last 4 digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    man_days_per_wall = 2 * 3\n    total_man_days = man_days_per_wall * x\n    days_per_y_men = total_man_days / y\n\n    return days_per_y_men\n\nans = solution(x, y)  # You need to replace x and y with the actual numbers"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 0.25\n    women_fraction = 1 / 5\n\n    men = total_people * men_percentage\n    women = total_people * women_fraction\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def operation_ominus(a, b):\n    return (a + b) * (a - b)\n\ndef solution():\n    result = operation_ominus(operation_ominus(3, 2), 1)\n    return result\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # We're looking for the greatest 3-digit odd number divisible by 9,\n    # and also the tens digit should be divisible by 4.\n    \n    # The largest 3-digit number is 999, which is odd but not divisible by 9.\n    # We need to check numbers lower than 999.\n    \n    # Let's find the largest number less than 999 that is divisible by 9 (i.e., 999//9*9)\n    for number in range(999 // 9 * 9, 99, -9):  # Step is -9 because the number must be divisible by 9.\n        # The number should be odd, so skip even numbers.\n        if number % 2 == 0:\n            continue\n        \n        # Extracting the tens digit from the number\n        tens_digit = (number // 10) % 10\n        \n        # If the tens digit is divisible by 4, we found our number.\n        if tens_digit % 4 == 0:\n            return number\n\n    return None\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a = symbols('a')  # Number of apples\n    o = 3 * a + 3  # Number of oranges\n\n    # If each person is given 2 apples, there are 6 apples left.\n    eq1 = Eq(2 * a - 6, a)\n\n    # If each person is given 7 oranges, the last person can only get 1 orange.\n    eq2 = Eq(7 * a - 1, o)\n\n    # Solving the system of equations\n    solved = solve((eq1, eq2), a)\n    \n    # Number of students is the solution for a\n    num_students = solved[a]\n    return num_students\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    return 72 + 60 + 48 + 36 + 24 + 12\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the specific pattern or a description of it, it is impossible to provide a solution.\n    # Please provide the pattern or a description of the pattern to proceed with solving the problem.\n    pass\n\n# As the pattern is not given, `ans` cannot be determined.\nans = None"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Maximum number of draws without getting 2 balls of the same colour\n    # is picking 1 from each colour (worst case scenario before picking the second of the same colour)\n    max_different_draws = 3\n    \n    # To ensure we have 2 balls of the same colour, we have to draw one more\n    min_draws_for_same_colour = max_different_draws + 1\n\n    return min_draws_for_same_colour\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    weight_solution1 = 40\n    weight_solution2 = 60\n    concentration1 = 0.15\n    concentration2 = 0.10\n\n    total_salt1 = weight_solution1 * concentration1\n    total_salt2 = weight_solution2 * concentration2\n\n    # The total amount of salt remains the same after evaporation of water\n    total_salt = total_salt1 + total_salt2\n\n    # After evaporation, the final weight of solution is 40 + 60 - 50\n    final_weight_solution = weight_solution1 + weight_solution2 - 50\n    \n    # Calculate the final concentration of the solution\n    final_concentration = total_salt / final_weight_solution\n\n    return final_concentration\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq((1/3) * girls, (1/2) * boys)\n    equation2 = Eq(girls + boys, 390)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for i in range(60):\n        if i % 4 == 3 and i % 5 == 4 and i % 6 == 5:\n            return i\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def S(n):\n    return sum(map(int, str(n)))\n\ndef solution():\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = (100 - 2) / 100\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    # The overall drop in temperature is the difference between the top and bottom temperatures\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    average_jan_to_apr = 300\n    average_may_to_jul = 250\n    total_aug_to_sep = 750\n    average_oct_to_dec = 300\n\n    # Calculate total expenses for January to April\n    total_jan_to_apr = average_jan_to_apr * 4\n    # Calculate total expenses for May to July\n    total_may_to_jul = average_may_to_jul * 3\n    # August to September total is given\n    # Calculate total expenses for October to December\n    total_oct_to_dec = average_oct_to_dec * 3\n\n    # Calculate the total expenses for the entire year\n    total_year = total_jan_to_apr + total_may_to_jul + total_aug_to_sep + total_oct_to_dec\n\n    # Divide by the number of months to find the average for the year\n    average_year = total_year / 12\n\n    return average_year\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('07:35', '%H:%M')\n    travel_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + travel_duration + walk_duration\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        if sum(int(digit) for digit in format(N, '4')) == 5 and \\\n           sum(int(digit) for digit in format(N, '6')) == 8 and \\\n           sum(int(digit) for digit in format(N, '8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 options for the first digit (it cannot be 0)\n    first_digit_options = 2\n\n    # There are 3 options for both the second and third digits\n    second_digit_options = 3\n    third_digit_options = 3\n\n    # Multiply the options for each position together to get the total\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_hotdogs = 12\n    cost_per_hotdog = cost_per_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money_in_pounds = 2  # in pounds\n    total_money_in_pence = total_money_in_pounds * 100  # converting pounds to pence\n\n    num_bags = total_money_in_pence // price_per_bag  # using floor division to get whole number of bags\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chip, dale = symbols('chip dale')\n\n    # Equation representing Chip giving 14 acorns to Dale\n    equation1 = Eq(chip - 14, dale + 14)\n    # Equation representing the total number of acorns\n    equation2 = Eq(chip + dale, 124)\n\n    solutions = solve((equation1, equation2), (chip, dale))\n\n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    \n    # Number of ways to arrange the books in a line is given by the number of permutations\n    # of 8 books taken 8 at at time divided by the permutations of 6 identical fiction books\n    # and 2 identical comic books\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 2 and i % 5 == 2:\n            return i\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Define x as a symbol\n    total_cost = 8 * x  # Expression for the total cost of 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Get all primes less than 51\n    prime_sum = 51\n    count = 0\n    \n    # Since we want the minimum number of primes, we start by using the largest prime less than 51\n    for prime in reversed(primes):\n        # Divide the sum by the prime number and add the quotient to the count\n        quotient = prime_sum // prime\n        count += quotient\n        prime_sum -= quotient * prime\n        # If we reach a sum of zero, we break the loop\n        if prime_sum == 0:\n            break\n    \n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4_letter = 4\n    pages_3_letter = 3\n    for num_4_page_letters in range(total_penpals + 1):\n        num_3_page_letters = total_penpals - num_4_page_letters\n        if num_4_page_letters * pages_4_letter + num_3_page_letters * pages_3_letter == total_pages:\n            return num_3_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36 and num % 24 == 0:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_for_pie_kg = 750 / 1000\n    apples_for_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (apples_for_pie_kg + apples_for_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    amy_position_from_back = 15\n\n    total_people = people_in_front + amy_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_ratio = 9 / 20\n    women_percentage = 30\n\n    men_count = total_passengers * men_ratio\n    women_count = total_passengers * (women_percentage / 100)\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17  # cm\n    final_height = 65  # cm\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Since there are 3 colors, we need to consider the worst possible scenario where we pick\n    # the maximum number of balls of the same color before we get 3 different colors.\n    # If we take 5 balls of one color + 5 balls of second color + 1 ball of the third color,\n    # we are guaranteed to have 3 different colored balls.\n    num_balls = 5 + 5 + 1\n\n    return num_balls\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece, then 2x is the length of the longer piece\n    x = symbols('x')\n\n    # Setting up the equation: x + 2x = 12.75\n    equation = Eq(x + 2*x, 12.75)\n\n    # Solving the equation for x\n    shorter_piece_length = solve(equation, x)[0]\n\n    # The length of the longer piece is twice the length of the shorter piece\n    longer_piece_length = 2 * shorter_piece_length\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    position_of_favorite = 14\n    books_on_right = 6\n    total_books = position_of_favorite + books_on_right\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # grams, since the weight is directly proportional to volume\n    scale_factor = 1/2  # each dimension is halved\n    new_volume = original_volume * (scale_factor ** 3)  # cubing the scale factor because volume is 3D\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, gigi_get, lily_get = symbols('gigi lily gigi_get lily_get')\n\n    # Gigi had 120 coins initially and got some number of coins\n    equation1 = Eq(gigi, 120 + gigi_get)\n    # Lily had 24 coins initially and got some number of coins\n    equation2 = Eq(lily, 24 + lily_get)\n    # They both get the same amount of coins\n    equation3 = Eq(gigi_get, lily_get)\n    # Gigi has 3 times more coins than Lily after getting coins\n    equation4 = Eq(gigi, 3 * lily)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (gigi, lily, gigi_get, lily_get))\n\n    return solutions[gigi_get]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 21))\n    total_cards = 20\n    non_prime_cards = total_cards - len(primes)\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Brian's age at the time\n    brian_age = 14\n    # Father's age at the time\n    father_age = 41\n    # The difference in age remains constant over time\n    age_difference = father_age - brian_age\n    \n    # We will run a loop to check when Brian's age will be the reverse of his father's age next time\n    while True:\n        # Increment their ages by 1 for each passing year\n        brian_age += 1\n        father_age += 1\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # The hundreds digit must be from 1 to 9\n        for tens in range(0, 10):  # The tens digit can be from 0 to 9\n            for ones in range(1, 10, 2):  # The ones digit must be odd, hence 1, 3, 5, 7, or 9\n                if (hundreds + tens + ones) == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # You can boil multiple eggs at the same time, so the time remains the same\n    # as boiling one egg, assuming you have a pot large enough for 3 eggs.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = (students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11160  # in grams\n    dough_per_cookie = 45  # in grams\n    dough_per_brownie = 150  # in grams\n    num_cookies = 240\n    num_brownies = 2\n\n    dough_used = (dough_per_cookie * num_cookies) + (dough_per_brownie * num_brownies)\n    \n    dough_left = total_dough - dough_used\n    \n    return dough_left / 1000  # converting grams to kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Let's use 'x' to denote the number of calories Dan can take in today.\n    # The inequality that Dan needs to follow today to take in less calories than yesterday is:\n    # x < calories_yesterday\n    # However, since we need to return a value and an inequality does not have a particular 'value',\n    # we will return the number of calories that Dan should aim to be below today.\n    return calories_yesterday - 1\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Reverse of eating half of the remaining and 2 less\n    remaining_biscuits = (remaining_biscuits * 2) + 2\n\n    # Reverse of eating half of all the biscuits and 4 more\n    total_biscuits = (remaining_biscuits + 4) * 2\n    \n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    days = 15\n    bob_money = 100\n    cycle_length = 4  # Days of depositing and spending form a 4-day cycle\n\n    # Number of complete cycles in 15 days\n    complete_cycles = days // cycle_length\n    remaining_days = days % cycle_length\n\n    # Money change per complete cycle: deposit 5 + spend 8 twice (net -6 per cycle)\n    money_change_per_cycle = (5 - 8) * 2\n    total_change = money_change_per_cycle * complete_cycles\n\n    # Calculate the remaining days' money change\n    for i in range(1, remaining_days + 1):\n        if i % 2 != 0:\n            total_change += 5  # Deposit day\n        else:\n            total_change -= 8  # Spend day\n\n    # Total money after 15 days\n    final_amount = bob_money + total_change\n\n    return final_amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums / number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    # First term (a1)\n    first_term = 10\n    # Difference (d)\n    difference = 3\n    # Last term (an)\n    last_term = 298\n    # Number of terms (n)\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of an arithmetic sequence (Sn)\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, a2, a3, a4, an_3, an_2, an_1, an = symbols('n a1 a2 a3 a4 an_3 an_2 an_1 an')\n    d = symbols('d')  # common difference\n\n    # Given sum of first 4 terms\n    equation1 = Eq(a1 + a2 + a3 + a4, 124)\n    # Given sum of last 4 terms\n    equation2 = Eq(an_3 + an_2 + an_1 + an, 156)\n    # Given sum of all terms\n    equation3 = Eq(n * (a1 + an) / 2, 210)\n    # Express all terms using the first term and common difference\n    equation4 = Eq(a2, a1 + d)\n    equation5 = Eq(a3, a1 + 2*d)\n    equation6 = Eq(a4, a1 + 3*d)\n    equation7 = Eq(an_3, an - 3*d)\n    equation8 = Eq(an_2, an - 2*d)\n    equation9 = Eq(an_1, an - d)\n    # There are n-1 differences in n terms\n    equation10 = Eq(an, a1 + (n-1)*d)\n\n    # Solve system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7, equation8, equation9, equation10), (n, a1, an, d))\n\n    # Assuming there's only one valid solution for number of terms\n    # And that it's a positive integer\n    valid_solutions = [sol[n] for sol in solutions if sol[n].is_Integer and sol[n] > 0]\n    \n    if not valid_solutions:\n        return None  # No valid solution found\n    \n    return valid_solutions[0]\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 3 + 11 - 7 + 2 - 1 + 13\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    # Equation when giving 18 chocolates each\n    equation1 = Eq(total_chocolates - 18 * friends, 41)\n\n    # Equation when giving 23 chocolates each\n    equation2 = Eq(total_chocolates - 23 * friends, -34)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    # Calculate the excess when giving 20 chocolates each\n    excess = solutions[total_chocolates] - 20 * solutions[friends]\n\n    return excess\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "from itertools import combinations\n\ndef is_perfect_square(n):\n    return n == int(n**0.5) ** 2\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    possible_statements = [\n        lambda n: n % 27 == 0,  # Statement A - multiple of 27\n        lambda n: n % 7 == 0,   # Statement B - multiple of 7\n        lambda n: sum_of_digits(n) == 17,  # Statement C - sum of digits is 17\n        lambda n: is_perfect_square(n),  # Statement D - perfect square\n        lambda n: 89100 % n == 0  # Statement E - factor of 89100\n    ]\n\n    for number in range(100, 1000):  # 3-digit numbers\n        true_statements = [statement(number) for statement in possible_statements]\n        if true_statements.count(True) == 3:\n            for true_set in combinations(true_statements, 3):\n                if all(true_set):\n                    return number\n    return None\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_on_book = total_money * 0.15\n    remaining_money = total_money - spent_on_book\n    spent_on_dvd = remaining_money * 0.30\n    final_money_left = remaining_money - spent_on_dvd\n\n    return final_money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    dividend = 5992\n    divisor = 7\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do\n    # The inequality representing that Mulan can do more push-ups than the best boy soldier is:\n    # m > 50, where m is the number of push-ups Mulan can do.\n    \n    # As we just need to write an inequality to represent the situation,\n    # we don't need to calculate an actual value for m.\n    # Therefore, we just assign the inequality to the variable ans.\n    \n    ans = 'm > 50'\n    return ans\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    initial_balloons = 22\n    burst_balloons = 3\n    total_needed = 40\n\n    remaining = total_needed - (initial_balloons - burst_balloons)\n\n    return remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # Let's assume there are t teams in the tournament\n    # The total number of games to be played in a round-robin tournament is given by t * (t - 1) / 2\n    # Since we know 55 games have already been played, we can solve for t such that t * (t - 1) / 2 = 55\n    # This is a quadratic equation which can be solved to find the value of t, and then we can use it to calculate the remaining games.\n    t_games = 55\n    t = 1\n    # We increment t until we find the total number of games that matches the games played\n    while t * (t - 1) // 2 < t_games:\n        t += 1\n    # Calculate the total games in the tournament with the identified number of teams\n    total_games = t * (t - 1) // 2\n    # To find how many more games need to be played\n    remaining_games = total_games - t_games\n    return remaining_games\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    candies = 88\n    children = 8\n    # Distribute one candy to each child first\n    candies -= children\n    max_candies = 1  # Initial max since each got at least one candy\n\n    # If we distribute the candies to the 7 children by increasing value\n    # starting from one, the last child will get the remaining\n    while candies > 0:\n        for i in range(1, children):\n            max_candies += 1\n            candies -= 1\n            if candies == 0:\n                break\n\n    ans = max_candies\n    return ans\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks are as follows:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n\n    # To ensure that Jerry wins, Jerry needs to equalize the number of stones in both stacks.\n    # Since Tom has not disturbed Stack A, Jerry should take stones from Stack A to make both stacks even.\n    # The number of stones Jerry should pick from Stack A is the difference between Stack A and Stack B after Tom's turn.\n\n    stones_to_take = 20 - (20 - 4)  # 20 - 16\n    stack = 'A'\n\n    return stones_to_take, stack\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    number1 = 15\n    number2 = 37\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let x be the age of Xiao Hong's mother this year\n    # Let y be the age of Xiao Hong this year\n    # According to the problem,\n    # When Xiao Hong was 3 years old, her mother's age was the same as Xiao Hong's age this year (y)\n    # x = y + (y - 3), where (y - 3) is the age difference between Xiao Hong and her mother when Xiao Hong was 3\n    \n    # When her mother is 78 years old, Xiao Hong's age will be the same as her mother's age this year (x)\n    # 78 - y = x\n    \n    # Now we have two equations:\n    # x = 2y - 3\n    # x = 78 - y\n    \n    # By combining the two equations, we get:\n    # 2y - 3 = 78 - y\n    # 3y = 81\n    # y = 27 (Xiao Hong's age this year)\n    \n    # Substitute y back into the equation to find x\n    x = 78 - 27\n    \n    # Mother's age this year is x\n    return x\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(1 + 3 * i for i in range(37))\n    mistake_diff = correct_sum - 2011\n    # Since the mistake is made by subtracting instead of adding,\n    # the difference made by the mistake is twice the supposed added value\n    # because the value has not only not been added, it's also been subtracted\n    mistake_number = mistake_diff // 6\n    mistaken_person = mistake_number + 1  # Because the first person says 1, not 0\n    return mistaken_person\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval_distance = 14\n\n    num_trees = circumference // interval_distance\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_for_one_batch = 10  # ml for 12 shortcakes\n    shortcakes_in_one_batch = 12\n    milk_used_by_liz = 25  # ml used by Liz\n\n    shortcakes_made_by_liz = (milk_used_by_liz * shortcakes_in_one_batch) / milk_for_one_batch\n    \n    return int(shortcakes_made_by_liz)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    for i in range(1, 160):\n        if i + (i + 1) + (i + 2) + (i + 3) + (i + 4) == 160:\n            return i + 4\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for M in range(100, 1000):\n        if M % 10 == 0:\n            S = sum([int(digit) for digit in str(M)])\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters equal 200 centimeters\n    piece_length_cm = 6  # length of one piece in centimeters\n    num_pieces = stick_length_cm // piece_length_cm  # floor division to get only complete pieces\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    \n    ways_to_select = comb(total_balls, balls_to_select)\n    \n    return ways_to_select\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Rational, Eq, solve\n\n    a, b, c = symbols('a b c', integer=True)\n\n    # The equation based on the complex fraction expression\n    equation = Eq(1 + 1 / (a + 1 / (b + 1 / c)), Rational(13, 10))\n\n    # Find a solution where a, b, and c are whole numbers\n    solutions = solve(equation, (a, b, c))\n\n    # Iterate over potential solutions to find the one with integer values\n    for sol in solutions:\n        if all(isinstance(val, (int, Integer)) for val in sol):\n            a_val, b_val, c_val = sol\n            break\n\n    return a_val + 2 * b_val + 3 * c_val\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    \n    # Since the pattern of the ones digit of the powers of 8 repeats every 4 powers:\n    # 8^1 -> 8, 8^2 -> 4, 8^3 -> 2, 8^4 -> 6 and then 8^5 -> 8 again.\n    pattern = [8, 4, 2, 6]\n    \n    # We find the position in the pattern corresponding to 8^30\n    position = exponent % len(pattern)\n    \n    # Adjusting for 0-based index of the pattern\n    position = position - 1 if position != 0 else len(pattern) - 1 \n    ans = pattern[position]\n    \n    return ans\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n    days_spent_reading = total_pages / average_pages_per_day\n\n    return int(days_spent_reading)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    loss_points = 3\n    total_points = 52\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_points - incorrect_answers * loss_points\n        if score == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while (days * (days + 1)) // 2 <= 100:\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    \n    num_terms = int((last_term - first_term) / difference + 1)\n\n    sum_sequence = num_terms * (first_term + last_term) / 2\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 21):\n        if num % 6 == 1:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # total weight of the solution in grams\n    sugar_concentration = 0.48\n\n    # amount of sugar in the solution\n    sugar_weight = total_weight * sugar_concentration\n\n    # amount of water used is total weight minus the weight of sugar\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    total = 0\n    for _ in range(9):\n        total += 5\n    return total\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Since the dwarfs are born in consecutive years,\n    # the difference between each dwarf's age is 1 year.\n    # If the youngest is x years old, then the ages of the three youngest would be:\n    # x, x+1, and x+2. Their sum is 42 years, hence:\n    # x + x + 1 + x + 2 = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13\n    x = 13\n    \n    # The ages of the oldest three would be:\n    # x+4, x+5, and x+6.\n    # Therefore, their total age sum would be:\n    total_age_oldest_three = (x + 4) + (x + 5) + (x + 6)\n    \n    return total_age_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c, d = symbols('a b c d', integer=True)\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation, (a, b, c, d))\n\n    for sol in solutions:\n        if all(0 <= digit <= 9 for digit in sol):\n            ans = 1000*sol[0] + 100*sol[1] + 10*sol[2] + sol[3]\n            return ans\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Add all the whole numbers together: 19, 199, 1999, 19999, 199999\n    whole_sum = 19 + 199 + 1999 + 19999 + 199999\n    \n    # Add all the fractional parts together: 4/5 five times\n    fraction_sum = (4/5) * 5\n    \n    # Combine whole number sum and fractional sum\n    ans = whole_sum + fraction_sum\n    \n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n    result = total_pence * fraction\n    \n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    \n    years_in_future = (35 - current_total_age)\n    \n    return years_in_future\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Age relations described in the problem\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    # Return the dad's current age\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 1  # Start with 1\n    for denominator in range(2, 9):  # Loop over the denominators from 2 to 8\n        series_sum = sum([numerator/denominator for numerator in range(1, denominator + 1)])  # Summing numerator from 1 to denominator\n        series_sum += sum([numerator/denominator for numerator in range(denominator - 1, 0, -1)])  # Summing numerator from denominator-1 to 1\n        ans += series_sum  # Add the sum of the current series to the total\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of milk chocolates and the total number of sweets\n    milk_chocolates, total_sweets = symbols('milk_chocolates total_sweets')\n\n    # Given conditions\n    fruit_drops = 6\n    equation1 = Eq(fruit_drops, 2/7 * milk_chocolates)\n    equation2 = Eq(milk_chocolates, 3/4 * total_sweets)\n    \n    # Solve the two equations to get the total number of sweets\n    solutions = solve((equation1, equation2), (milk_chocolates, total_sweets))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the price of one football as f and the price of one volleyball as v\n    f, v = symbols('f v')\n\n    # From the problem statement, we have two equations:\n    # 1 football + 2 volleyballs = 60 dollars\n    equation1 = Eq(f + 2*v, 60)\n    \n    # 2 footballs + 16 dollars return = 60 dollars spent originally\n    equation2 = Eq(2*f - 16, 60)\n\n    # Now we solve the equations for f and v\n    solutions = solve((equation1, equation2), (f, v))\n\n    # Return the price of one volleyball\n    return solutions[v]\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Initialize all possible digits\n    digits = '0123456789'\n    # Remove digits that we know cannot be in the number\n    for dig in '17032745':\n        digits = digits.replace(dig, '')\n\n    # For each digit check if it is on the right place accordingly to \n    # Peter's guesses and John's answers\n    correct_number = ['']*4\n    for i, num in enumerate('1703'):\n        if '3541'[i] != num and '3541'[i] in digits:\n            correct_number[i] = '3541'[i]\n    for i, num in enumerate('2745'):\n        if num in '3541' and num not in correct_number:\n            correct_number[correct_number.index('')] = num\n\n    return ''.join(correct_number)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_to_n = n * (n + 1) // 2\n    ans = sum_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    # She has 3 books to arrange, so there are 3! (3 factorial) ways to arrange them\n    num_books = 3\n    arrangements = math.factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A can stand in any of the three middle positions.\n    positions_for_A = 3  \n    # The remaining 4 people can stand in any order in the remaining 4 positions.\n    permutation_of_others = 4 * 3 * 2 * 1  \n    total_ways = positions_for_A * permutation_of_others\n    return total_ways\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    rounds = math.ceil(math.log(num_people, 2))\n    \n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let the number of yellow flowers be y\n    # Number of red flowers = 3 * number of yellow flowers\n    # Number of pink flowers = number of yellow flowers - 7\n\n    # Given number of pink flowers\n    pink = 3\n    \n    # From the relationship above, the number of yellow flowers is\n    yellow = pink + 7\n\n    # The number of red flowers is\n    red = 3 * yellow\n\n    # Total number of red and yellow flowers\n    total = red + yellow\n\n    return total\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Given the number of boys is 50% more than the number of girls in the morning\n    equation1 = Eq(b, 1.5 * g)\n\n    # In the afternoon, 12 boys and 12 girls join. The new ratio is 19:14.\n    equation2 = Eq((b + 12) / (g + 12), 19/14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    b_value = solutions[b]\n    g_value = solutions[g]\n\n    # The total number of children in the afternoon is b + g + 12 boys + 12 girls\n    total_children_afternoon = b_value + g_value + 12 + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Defining the symbols for the 5 unknown ages\n    # Assuming x1 < x2 < x3 < x4 < x5 (ages sorted in ascending order)\n    x1, x2, x3, x4, x5 = symbols('x1 x2 x3 x4 x5')\n\n    # Given that the mode is 7, we know at least two of them must be 7\n    # Since we are looking for the second oldest, it cannot be the case that x4 = 7 (then we would have more than 2 students with the same age)\n\n    # We also know mean age is 9. So, the sum of the ages is 45.\n    equation1 = Eq(x1 + x2 + x3 + x4 + x5, 45)\n\n    # Since the median age is 8, the third student's age (in the sorted list) is 8.\n    equation2 = Eq(x3, 8)\n\n    # Given the range of the ages is 6, if the youngest is 7 - r, the oldest would be 7 + r, where r is a value ensuring the range is 6.\n    equation3 = Eq(x5 - x1, 6)\n\n    # We start with the possibility that there are only two students with the modal age and case with multiple 7.\n    # Since we already have two ages (x3 = 8 and two times 7 for the mode), we can express the fourth equation considering that x1 = 7 (smallest value to satisfy the mode and range).\n    # This leaves us with x5 = x1 + 6 due to range, so x5 = 13, leaving only x2 and x4 to calculate.\n    equation4 = Eq(x1, 7)\n    equation5 = Eq(x5, 13)\n\n    # Solving the system of equations\n    solution_set = solve((equation1, equation2, equation3, equation4, equation5), (x1, x2, x3, x4, x5))\n    # Since there are multiple solutions, we check for consistency with the mode condition.\n    for sol in solution_set:\n        ages = list(sol)\n        if ages.count(7) == 2:  # Checking the mode condition\n            return ages[-2]  # The second oldest age\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    import math\n\n    def derangement(n):\n        if n == 0: return 1\n        if n == 1: return 0\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    # Let's denote notebooks as n and color pencils as p.\n    # Given: n + p = 10 (since she has 10 classmates)\n    # Given: 3n + 9p = 48 (since the total cost must be 48)\n    # Solve the system of equations to find n and p.\n\n    n = (48 - 9 * 10) / (3 - 9)  # Solve for n using the equations.\n    p = 10 - n  # Solve for p using the total number of classmates.\n\n    return int(p)\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    students_second_floor = total_students - first_floor_capacity\n\n    return students_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    \n    # Iterate through all 3-digit numbers\n    for i in range(100, 1000):\n        # Convert the number into a list of digits\n        digits = [int(d) for d in str(i)]\n        \n        # Check if the tens digit is less than hundreds and units digits\n        if digits[0] > digits[1] < digits[2]:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_twos = 0\n    count_fives = 0\n\n    for i in range(2, n+1):\n        while i % 2 == 0:\n            count_twos += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_fives += 1\n            i = i // 5\n    \n    ans = min(count_twos, count_fives)\n    \n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count_sevens = 0\n    for i in range(3, 48):\n        count_sevens += str(i).count('7')\n    \n    return count_sevens\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    original_helen = 18\n    original_oliver = 22\n\n    # Let x be the number of rounds played\n    # Helen's cards after x rounds: original_helen + x\n    # Oliver's cards after x rounds: original_oliver - x\n    # We know that after x rounds, Helen has 10 more cards than Oliver:\n    # original_helen + x = (original_oliver - x) + 10\n\n    # Solve for x:\n    x = (10 + original_oliver - original_helen) // 2\n\n    # Helen's cards after x rounds:\n    helen_now = original_helen + x\n\n    return helen_now\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    value_A = 40\n    value_B = value_A / 2\n    value_C = value_B / 2\n    total_value = value_A + value_B + value_C\n    return total_value\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # The sum of an even number sequence where n = 6 (consecutive even numbers)\n    # is given by the equation: sum = n/2 * (first_term + last_term)\n    # The problem gives us the sum as 510, so we can set up an equation\n    # 510 = 6/2 * (first_term + last_term)\n    # Solving for first_term we get:\n    # first_term + last_term = 510 / (6/2)\n    # first_term + last_term = 170\n    # Knowing that these are consecutive even numbers, the difference between each number is 2.\n    # So, last_term = first_term + 10 (because there are 5 gaps of 2 units between six numbers)\n    # We have two equations now:\n    # first_term + last_term = 170\n    # last_term = first_term + 10\n    \n    # We can reframe the second equation to solve for first_term\n    # first_term + (first_term + 10) = 170\n    # 2 * first_term + 10 = 170\n    # 2 * first_term = 160\n    # first_term = 80\n    \n    # Now we can find all the terms of the sequence\n    first_term = 80\n    second_term = first_term + 2\n    third_term = second_term + 2\n    fourth_term = third_term + 2\n    fifth_term = fourth_term + 2\n    sixth_term = fifth_term + 2\n    \n    # Mean is sum / number of terms\n    mean = 510 / 6\n    \n    # Median of the six consecutive even numbers is the average of the third and fourth terms\n    median = (third_term + fourth_term) / 2\n    \n    # The difference between the mean and median\n    return mean - median\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up_first = 23\n    climb_down = 31\n    climb_up_second = 17\n\n    final_height = start_height + climb_up_first - climb_down + climb_up_second\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n\n    N = 5**100\n    num_digits = int(log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the initial mass of mangoes and s represent the initial mass of strawberries\n    m, s = symbols('m s')\n\n    # Equation representing the initial condition: m = s + 448g\n    equation1 = Eq(m, s + 448)\n\n    # Equation after 900g of mangoes were given away: s = 2 * (m - 900g)\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the two equations for m and s\n    solutions = solve((equation1, equation2), (m, s))\n\n    # Return the initial mass of strawberries\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the first term of the 5 consecutive numbers be x\n    # Thus, the numbers are x, x+1, x+2, x+3, x+4\n    # The sum of these numbers is 5x + 10 (sum of the first 5 natural numbers)\n\n    # According to the question, the sum of these numbers must be 40\n    # Therefore, 5x + 10 = 40\n    # Solving for x gives us x = (40 - 10) / 5 \n\n    x = (40 - 10) / 5\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    total_necklaces = 20\n    total_diamonds = 79\n\n    for necklaces_with_5 in range(total_necklaces + 1):\n        necklaces_with_2 = total_necklaces - necklaces_with_5\n        if 2 * necklaces_with_2 + 5 * necklaces_with_5 == total_diamonds:\n            return necklaces_with_5\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n\n    sweets_left = total_sweets - sweets_given_away\n\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # difference between terms\n    difference = (57 - 39) / (12 - 4)\n    # the first term calculation: a_n = a_1 + (n-1)*d\n    first_term = 39 - (4 - 1) * difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    max_number = int(''.join(sorted(digits, reverse=True)))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30 = 30 * 0.30  # Grams of salt in the 30% solution\n    salt_20 = 20 * 0.20  # Grams of salt in the 20% solution\n\n    total_salt = salt_30 + salt_20  # Total grams of salt in the mixture\n    total_weight_before_water = 30 + 20  # Total weight of the mixture before adding water\n\n    # To get a 10% solution, the amount of salt (total_salt) should be 10% of the total weight\n    # Let x be the weight of the water added\n    # Then, total_salt = 0.10 * (total_weight_before_water + x)\n    \n    x = symbols('x')\n    equation = Eq(total_salt, 0.10 * (total_weight_before_water + x))\n    water_to_add = solve(equation, x)[0]\n\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    # The difference between the correct and incorrect addends\n    difference = incorrect_addend - correct_addend\n\n    # The correct sum is the incorrect sum minus the difference\n    correct_sum = incorrect_sum - difference\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown integer\n    x = symbols('x')\n    \n    # Create the equation based on the provided puzzle\n    equation = Eq(x * x + x, 380)\n    \n    # Solve the equation and find the integer\n    solutions = solve(equation, x)\n    \n    # Filter positive integer solutions since the integer in the boxes must be positive\n    integer_solution = [s for s in solutions if s.is_integer and s > 0]\n    \n    # There should only be one positive integer solution\n    return integer_solution[0]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250    # m/min\n    race_distance = 3000  # m\n\n    johnson_time = race_distance / johnson_speed  # in minutes\n    vicky_time = race_distance / vicky_speed      # in minutes\n\n    time_difference = vicky_time - johnson_time  # in minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To ensure we get 29 balls of one color, we must consider the worst-case scenario.\n    # We can catch all 40 red balls and still need more for 29 of one color.\n    # We can then catch all 30 white balls, and we will still need to catch more for 29 of one color.\n    # At this point, we have 40 red + 30 white balls = 70 balls, and we still do not have 29 balls of one color.\n    # Since there are 80 blue balls, catching one more ball (which will be blue since only blue is left) guarantees 29 blue balls.\n    # We now have at least 29 balls of the blue color. \n    # To ensure we have 28 of another color, we have to consider the leftover balls.\n    # We have 10 blue balls left, but we need 28 balls of another color, which can be red.\n    # We've already taken all 40 red balls, so we meet this condition.\n    # For the last color, we need 10 balls, which we already have since we've taken all 30 white balls.\n\n    # The minimum balls we need to catch is the sum of what we've caught in the worst-case scenario:\n    ans = 40 + 30 + 1 # red + white + one additional blue ball to ensure 29 blue balls = 71 balls\n    return ans\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Drawing at least one card of each number\n    cards_drawn = 13 * 2\n\n    # To ensure at least 3 cards have the same number, draw one more card\n    cards_drawn += 1\n\n    return cards_drawn\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    # Assuming the mass of the small bottle is x\n    small_mass = 1\n    \n    # The mass of the large bottle is 2 times the mass of the small bottle\n    large_mass = 2 * small_mass\n    \n    # Concentration in the large bottle\n    large_concentration = 0.20\n    \n    # Concentration in the small bottle\n    small_concentration = 0.35\n    \n    # Total mass of alcohol in the large bottle\n    alcohol_mass_large = large_concentration * large_mass\n    \n    # Total mass of alcohol in the small bottle\n    alcohol_mass_small = small_concentration * small_mass\n    \n    # Total mass of alcohol when mixed\n    total_alcohol = alcohol_mass_large + alcohol_mass_small\n    \n    # Total mass of the solution when mixed\n    total_mass = large_mass + small_mass\n    \n    # Concentration after mixing\n    concentration_after_mixing = total_alcohol / total_mass\n    \n    return concentration_after_mixing\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    speed_fast = 80\n    speed_slow = 50\n    time_diff = 6 + 3  # time difference in minutes between fast and slow\n    \n    # The time taken to reach school is directly proportional to the distance\n    # and inversely proportional to the speed. So, time_fast * speed_fast = time_slow * speed_slow.\n    # And time_slow = time_fast + time_diff.\n    # Therefore, speed_fast * time_fast = speed_slow * (time_fast + time_diff).\n    \n    # Let's find time_fast using the equation: speed_fast * time_fast = speed_slow * (time_fast + time_diff)\n    time_fast = (speed_slow * time_diff) / (speed_fast - speed_slow)\n    \n    # Now, we can find the distance by multiplying the speed (fast) with time_fast\n    distance = speed_fast * time_fast\n    \n    return distance\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    total_numbers = 8\n    mean_value = 8\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the volume of lime solution transferred from each container\n    x = symbols('x')\n    \n    # Create equations based on the volume and concentration change\n    equation1 = Eq((5 - x) * 0.10 + x * 0.20, (3 + x) * 0.10)\n    equation2 = Eq((3 - x) * 0.20 + x * 0.10, (5 + x) * 0.20)\n    \n    # Solve for x\n    solutions = solve((equation1, equation2), (x))\n    \n    # Return the volume of lime solution transferred\n    return solutions[x]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from math import gcd\n\ndef solution():\n    difference_in_dividends = 145 - 97\n    difference_in_remainders = 4 - 3\n    n = gcd(difference_in_dividends, difference_in_remainders)\n    return n\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    \n    total_combinations = len(notebook_prices) * len(calendar_prices)\n\n    return total_combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    total_students = 31\n    tables_per_row = 5\n    num_rows = (total_students + tables_per_row - 1) // tables_per_row\n    return num_rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    \"\"\"\n    To solve this, observe that each term in the expression is a multiple of 123.\n    So we only need to consider the historical patter of the hundreds digit of the running sum:\n    123 + 1231 + ... and so on. Since 123 contributes 2 to the hundreds digit and \n    1231 contributes 3 and so it goes in a circular manner, we can consider only the \n    hundreds digit contributed by each multiple of 123 until 123123...123 (123 repeated 123 times).\n    \"\"\"\n    base_number = 123\n    hundreds_digit = 0  # Initial hundreds digit (100s place)\n    \n    for i in range(1, 124):  # Including 123 repeats\n        current_value = base_number * i\n        hundreds_digit_contribution = (current_value // 100) % 10\n        hundreds_digit = (hundreds_digit + hundreds_digit_contribution) % 10\n\n    # The 'hundreds_digit' now contains the hundreds digit of the final sum\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Ratio of length to breadth of the painting is 5:2\n    ratio_length_to_breadth = 5 / 2\n    # Length of the painting\n    length_painting = 90\n    # Length of the lego has to be 70.5 cm smaller\n    length_lego = length_painting - 70.5\n    # Calculate the breadth of the lego using the ratio\n    breadth_lego = length_lego / ratio_length_to_breadth\n    # Since lego blocks are discrete, we take the floor of the breadth_lego to get the maximum size\n    from math import floor\n    max_breadth_lego = floor(breadth_lego)\n    \n    return max_breadth_lego\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_amount = sum(coins)\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - coin - coin):\n            lost_coin = coin\n            break\n    return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200\n    kane_distance = 200 - 12.5\n    jaan_speed = 8  # m/s\n    jaan_time = jaan_distance / jaan_speed  # time = distance / speed\n    kane_speed = kane_distance / jaan_time  # kane's speed = kane's distance / jaan's time\n   \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    result = ((0.8 + 1/5) * 24 + 6.6) / (9/14) - 7.6\n    return result\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_per_hour = 12\n    overtime_multiplier = 1 + 1/4\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n    \n    normal_pay = normal_hours * normal_pay_per_hour\n    overtime_pay = overtime_hours * normal_pay_per_hour * overtime_multiplier\n    \n    total_pay = normal_pay + overtime_pay\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    ans = (35 / 100) * 60\n    return ans\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # Search for two-digit numbers\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    # r - rate of Raj working alone\n    # j - rate of John working alone\n    # p - rate of Pete working alone\n    r, j, p = symbols('r j p')\n\n    # Equations based on the work done\n    equation1 = Eq(1/(j + p), 1)  # John, Raj, and Pete together\n    equation2 = Eq(1/(j + r), 1 + 12/60)  # John and Raj\n    equation3 = Eq(1/(r + p), 1 + 30/60)  # Raj and Pete\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, j, p))\n\n    # Find the time Raj takes working alone\n    time_raj_alone = 1 / solutions[r]\n    \n    # Convert hours to minutes\n    return time_raj_alone * 60\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # After taking 2 white, 2 blue, 2 green, and 2 orange, we have not guaranteed 3 of the same color\n    # (because we could have 2 of each).\n    # Taking one more, regardless of the color, will ensure we have 3 of at least one color.\n    max_of_two_each = 2 * 4\n    one_more = 1\n\n    ans = max_of_two_each + one_more\n    return ans\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        tens, ones = divmod(num, 10)\n        swapped_num = ones * 10 + tens\n        if swapped_num == (num // 3) + 3:\n            return num\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother and y be the current age of the elder brother\n    x, y = symbols('x y')\n\n    # Equation 1: Sum of their ages\n    equation1 = Eq(x + y, 42)\n    \n    # Equation 2: A few years ago, y - x years ago, the younger brother was half the age of the elder brother's current age\n    equation2 = Eq(x - (y - x), y / 2)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the age of the elder brother\n    return solutions[y]\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    matches_per_team = 30 / 2  # each team plays twice against another\n    \n    # n * (n-1) = total_matches, where n is the number of teams\n    # In the equation n*(n-1)/2 = matches_per_team, we need to find n\n    n = 1\n    while (n * (n - 1)) // 2 < matches_per_team:\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The number 928 is repeated to form a 99-digit number, \n    # so we need to find out how many times 928 is repeated.\n    num_repetitions = 99 // len('928')  # Floor division to get the integer part\n\n    # Create the 99-digit number by repeating '928' for num_repetitions times and adding\n    # remaining digits to make a 99-digit number.\n    large_number = '928' * num_repetitions + '9' * (99 % len('928'))\n\n    # Since we need to find the remainder when this large number is divided by 9,\n    # we can utilize the property that a number's divisibility by 9 depends on the sum of its digits.\n    # If the sum of the digits is divisible by 9, so is the number.\n    # The remainder of the number when divided by 9 is the same as the remainder of the sum\n    # of its digits when divided by 9.\n    sum_of_digits = sum(int(digit) for digit in large_number)\n\n    # Find the remainder when the sum of the digits is divided by 9.\n    remainder = sum_of_digits % 9\n\n    return remainder\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_needed = (total_kg * boxes_for_14kg) / 14\n\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    current_sum = 34\n    future_sum = 40\n    difference_in_sum = future_sum - current_sum\n    years_later = difference_in_sum // 2  # Each will age the same amount, so divide by 2\n\n    return years_later\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of the rope and y be the perimeter of the tree.\n    # According to the problem statement:\n    # 10y - x = 3 (10 turns around the tree leaves 3 meters of rope)\n    # 12y - x = -3 (12 turns around the tree is short by 3 meters of rope)\n    # We can set up a system of linear equations or simply solve it step by step.\n    \n    # From equation (1) x = 10y - 3\n    # Substitute x in equation (2) we get 12y - (10y - 3) = -3 -> 2y = 0\n    # We find that y = 0, which means the perimeter of the tree is 0, which is not possible.\n    # There must be an error in the problem's conditions as it implies the tree has no thickness.\n    # In a real-world scenario, this is impossible. Hence, under the given problem statement, no solution exists.\n    return None\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Maximum number of participants without having 5 from the same country for each of the 11 countries\n    max_participants_without_5_same = (5 - 1) * 11\n    \n    # Adding 1 to ensure at least one country has 5 participants\n    min_participants_for_5_same = max_participants_without_5_same + 1\n\n    return min_participants_for_5_same\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y, z = symbols('x y z')\n\n    # Define the equations\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate x + y + z by substituting the solutions back into one of the equations\n    x_val = solutions[x]\n    y_val = solutions[y]\n    z_val = solutions[z]\n    result = x_val + y_val + z_val\n\n    return result\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 4):\n        A, B, C, D = p\n        if int(A + B) - int(C + D) == int(A + C) - int(B + D):\n            return int(A) + int(B) + int(C) + int(D)\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    # Mary spent 3/7 of her money on a bag\n    spent_on_bag = (3/7) * total_money\n    \n    # The amount not used is 4/7 of her money\n    not_used = (4/7) * total_money\n    \n    # The difference between spent on bag and not used is $12\n    equation = Eq(spent_on_bag - not_used, 12)\n    \n    # Solve for the total money\n    total_money_solution = solve(equation, total_money)\n    \n    # Calculate how much Mary spent on the bag\n    money_spent_on_bag = (3/7) * total_money_solution[0]\n    \n    return money_spent_on_bag\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "from sympy import symbols, Eq, solve, sin, cos, sqrt\n\ndef solution():\n    t = symbols('t', real=True)\n    equation1 = Eq((1 + sin(t)) * (1 + cos(t)), 5 / 4)\n    equation2 = Eq((1 - sin(t)) * (1 - cos(t)), 5 / 4)\n    \n    # Solve for sin(t) and cos(t) based on the first equation\n    sin_t = solve(equation1, sin(t))[0] - 1\n    cos_t = solve(equation1, cos(t))[0] - 1\n    \n    # Substitute sin(t) and cos(t) into the second equation\n    equation2_sub = equation2.subs({sin(t): sin_t, cos(t): cos_t})\n    \n    # Solve for the second equation to find the expression of m/n - sqrt(k)\n    expr = solve(equation2_sub)\n    expr_simplified = expr[0].simplify().evalf()\n    \n    # Isolate sqrt(k) to find its value\n    k_val = expr_simplified.as_coefficients_dict()[sqrt(sin_t**2)]\n    \n    # Isolate m/n to find its value as a rational number\n    m_over_n_val = expr_simplified - sqrt(sin_t**2)\n    \n    # Get m and n in the form of fraction\n    m, n = m_over_n_val.as_numer_denom()\n    \n    # Calculate k, m, and n\n    k = int(k_val**2)\n    m = int(m)\n    n = int(n)\n    \n    return k + m + n\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let's denote the original number as 'number'.\n    # According to the problem, if we double it and add six we get 28.\n    # This can be expressed as: 2 * number + 6 = 28\n\n    # To find the original number we perform inverse operations.\n    # We subtract 6 from 28 and then divide by 2.\n\n    original_number = (28 - 6) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x.\n    # Therefore, the age of the next two dwarfs would be x+1 and x+2.\n    # According to the question, x + (x+1) + (x+2) = 42\n    # Summing these up, we get 3x + 3 = 42, which implies 3x = 39, hence x = 13\n    youngest_age = 42 // 3\n    \n    # The age of the middle dwarf would be x+3,\n    # and the ages of the three oldest would be (x+4), (x+5) and (x+6)\n    middle_age = youngest_age + 3\n    oldest_ages_sum = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n    \n    return oldest_ages_sum\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    total = 111\n    for i in range(1, 7 + 1):\n        total -= i\n    return total\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(ans)\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    number = 72\n    factors = set()\n    \n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    # Let g be the number of girls and b be the number of boys\n    # Then we have the following system of equations:\n    # g + b = 500 (total number of pupils)\n    # g = b + 30 (30 more girls than boys)\n    \n    from sympy import symbols, Eq, solve\n    \n    g, b = symbols('g b')\n    equation1 = Eq(g + b, 500)\n    equation2 = Eq(g, b + 30)\n    \n    solutions = solve((equation1, equation2), (g, b))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # Equations based on the given information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    # Calculate the total cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    mean_initial = 13\n    additional_sausages = 21\n\n    total_sausages = initial_trays * mean_initial + additional_sausages\n    total_trays = initial_trays + 1\n    new_mean = total_sausages / total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let x, y, z represent the number of toys made by Factory A, B, and C respectively.\n    # According to the problem:\n    # x + y + z = 659 (Total toys made by A, B, and C)\n    # x + y = 447 (Toys made by A and B)\n    # y + z = 335 (Toys made by B and C)\n    # We need to find the value of y (toys made by Factory B).\n\n    # From the first equation: z = 659 - (x + y)\n    # Substitute z in the third equation: y + (659 - (x + y)) = 335\n    # Simplify the equation to find y: y = 335 - (659 - 447)\n\n    y = 335 - (659 - 447)\n    return y\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    return 1.99 + 2.99 + 3.99 + 4.99\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    v_numbers = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if tens < hundreds and tens < ones and hundreds != ones:\n                    v_numbers += 1\n    return v_numbers\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Calculate the speed of the train (distance over time)\n    # For the first bridge:\n    # 137 m (train length) + 263 m (first bridge length) = total distance covered in 20 s\n    speed = (137 + 263) / 20  # Speed in m/s\n\n    # For the second bridge:\n    # speed = (137 m (train length) + length of second bridge) / 27 s\n    # Rearrange to find the length of the second bridge\n    second_bridge_length = (speed * 27) - 137\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    equal_amount = (rani + brenda) / 2\n    money_to_give = brenda - equal_amount\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_balls, red_balls = symbols('blue_balls red_balls')\n\n    equation1 = Eq(2/5 * blue_balls, 3/5 * red_balls)\n    equation2 = Eq(blue_balls + red_balls, 125)\n\n    solutions = solve((equation1, equation2), (blue_balls, red_balls))\n\n    blue = solutions[blue_balls]\n    red = solutions[red_balls]\n\n    return blue - red\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # The total number of ways to distribute n different things to r persons equally \n    # when each person gets n//r things is n! / (n//r!)^r * r!.\n\n    n = 7  # Number of different books\n    r = 3  # Number of students\n\n    # Each student must get at least one book, so we first give out 3 books.\n    n -= r\n\n    # We now have 4 books left to distribute among 3 students in any way, including  \n    # giving all books to one student. This can be thought of as putting two dividers\n    # among the 4 books to create 3 groups for 3 students. Hence, we have 4 + 2 \n    # positions and choose 2 positions for the dividers. This is a stars-and-bars problem.\n\n    ways_to_distribute_remaining = factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n\n    return ways_to_distribute_remaining\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    for max_pieces in range(1, 89):\n        min_pieces_required = sum(range(1, 8)) + max_pieces\n        if min_pieces_required == 88:\n            return max_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 80 / 100 + 4 / 5 * 100 / 100\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    # The total weight of the sugar solution is 300g\n    total_weight_solution = 300\n    \n    # The concentration of the sugar solution is 35%, hence the weight of sugar is 35% of total solution\n    weight_sugar = 0.35 * total_weight_solution\n    \n    # The weight of the water is the remaining weight\n    weight_water = total_weight_solution - weight_sugar\n    \n    return weight_water\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n    \n    # Daughter's age in 1996\n    daughter_age_1996 = 40\n    \n    # Difference in years between 1996 and 2008\n    years_diff = 2008 - 1996\n    \n    # Daughter's age in 2008\n    daughter_age_2008 = daughter_age_1996 + years_diff\n  \n    # Grandmother's age when her daughter was born\n    grandmother_age_when_daughter_born = grandmother_age_2008 - daughter_age_2008\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 4 individuals, let's denote them as A, B, C, D.\n    # The first pass is from A to one of the other 3 individuals.\n    # The second pass can be to any of the 2 remaining individuals (not A or the one who passed it).\n    # The third pass must be back to A.\n    # We only consider passes after the initial pass from A, which will be 2 passes in total.\n    \n    # The first pass can go to any of the three other individuals (B, C, or D).\n    first_pass_options = 3\n    # The second pass cannot go back to A or to the person who just had the ball, so it has 2 options.\n    second_pass_options = 2\n    # The third pass must go to A, so only 1 option.\n    \n    # The total number of methods is the product of the options for each pass.\n    total_methods = first_pass_options * second_pass_options\n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    \n    # Equation for the relationship between Nicole and Eddy's tokens\n    equation1 = Eq(nicole, 3 * eddy)\n    # Equation after Nicole used 130 tokens and Eddy used 38 tokens\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    # treat A and B as a single person since they want to stand together\n    # there are two arrangements for A and B, AB or BA\n    arrangements_for_AB = 2\n\n    # now we have effectively 7 entities to arrange (AB, C, D, E, F, G, H)\n    arrangements_without_CD_restriction = math.factorial(7)\n\n    # for every arrangement of the 7 entities, C and D can be placed in 6 possible ways next to each other\n    # because if we have 7 positions, there are 6 pairs where two adjacent positions can be taken by C and D\n    adjacent_C_and_D = 6\n\n    # total ways in which C and D can stand next to each other\n    arrangements_with_CD_next_to_each_other = adjacent_C_and_D * arrangements_without_CD_restriction\n\n    # total arrangements without restrictions, treating A and B as one person\n    total_arrangements = arrangements_for_AB * math.factorial(7)\n\n    # total ways to arrange where C and D are not standing next to each other\n    arrangements_with_CD_not_next_to_each_other = total_arrangements - arrangements_with_CD_next_to_each_other\n\n    return arrangements_with_CD_not_next_to_each_other\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    # Oranges thrown away\n    rotten_oranges = 34\n    # Oranges bought\n    bought_oranges = 25\n    # Oranges at the end\n    final_oranges = 133\n\n    # Calculate the oranges Mrs Ng had at first\n    # Using inverse operations: start from the final amount and go backwards\n    initial_oranges = final_oranges - bought_oranges + rotten_oranges\n\n    return initial_oranges\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    # Let M be the number of candies Mike has and V be the number Valeria has.\n    # M + V = 36 (Total number of candies)\n    # If both eat the same amount of candy\n    # Mike will have M - x candies left and Valeria will have V - x candies left\n    # M - x = 6 (Mike's remaining candies)\n    # V - x = 22 (Valeria's remaining candies)\n    # Adding the equations yields: (M - x) + (V - x) = 6 + 22\n    # This simplifies to: M + V - 2x = 28\n    # Using the total number of candies M + V = 36, we have: 36 - 2x = 28\n    # Solving for x we get: x = (36 - 28) / 2 = 4\n    # Therefore, M = 6 + x and V = 22 + x\n    x = (36 - 28) // 2\n    # Valeria has V = 22 + x candies now\n    return 22 + x\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    ans = psi(psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(x)) for x in range(1, 20))\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = 36 * total_average\n    girls_score = girls * girls_average\n    boys_score = boys * boys_average\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    solutions = solve((equation), (girls))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    time_for_my_fence = 6\n    time_for_neighbour_fence = 5\n    length_multiplier = 2\n\n    people_for_my_fence = 5\n\n    people_for_neighbour_fence = (people_for_my_fence * time_for_my_fence * length_multiplier) / time_for_neighbour_fence\n\n    return -(-people_for_neighbour_fence // 1)  # Ceiling division to get the minimum integer number of people required\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Calculate the power of 12 to the 50th and store it\n    twelve_power_50 = 12 ** 50\n\n    # Initialize k to floor of the 75th root of twelve_power_50\n    k = int(twelve_power_50 ** (1/75))\n\n    # Make sure k satisfies the condition that 12^50 > k^75,\n    # decrementing k until we find the largest whole number that does\n    while (k + 1) ** 75 <= twelve_power_50:\n        k += 1\n\n    # Decrement once to find the largest whole number that satisfies the inequality\n    k -= 1\n\n    return k\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_5_flights = 12  # Time for 5 flights of stairs\n    total_time_available = 30  # Total time available\n\n    # Proportion to find out how many flights can be walked in the total time available\n    flights_in_30_minutes = (total_time_available / time_for_5_flights) * 5\n\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_given_butter = cookies_per_gram * 21.6\n    return cookies_with_given_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    N_octal = int('12345654321', 8)\n    remainder_7 = N_octal % 7\n    remainder_9 = N_octal % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # number of legs each animal has\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # number of each pet Tina has except for birds\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # calculate the number of legs for the cats, dogs, and rabbit\n    total_legs_of_cats_dogs_rabbits = (num_cats + num_dogs) * legs_per_dog + num_rabbits * legs_per_rabbit\n\n    # subtract the known legs from total to find bird legs\n    legs_for_birds = 28 - total_legs_of_cats_dogs_rabbits\n\n    # calculate the number of birds\n    num_birds = legs_for_birds // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        if i % 4 == 0:\n            sum += i\n        elif i % 4 == 1:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    total_years_difference = 3 + 4  # 3 years ago + 4 years later\n\n    combined_age_future = combined_age_past + (2 * total_years_difference)\n\n    return combined_age_future\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.9)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_series = sum_of_squares + n * (n + 1) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n\n    num = 2016\n    count = 0\n\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % (i * i) == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    for i in range(1, 59):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0 or C == 0:  # Skip if A or C is 0 as they are the first digit of a number\n            continue\n        num1 = 100*A + 10*B + A\n        num2 = 100*C + 10*D + C\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # worst case scenario without getting any yellow shirt\n    # is taking out all non-yellow shirts\n    worst_case_non_yellow = 6 + 4 + 12\n\n    # to then be sure to get 1 yellow shirt, add 1 to the worst case\n    ans = worst_case_non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    pack_size = 8\n    packs_needed = (total_pens_needed + pack_size - 1) // pack_size\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    fraction_sum = 4/5 * 5  # Since 4/5 is repeated 5 times\n    integer_sum = 9 + 99 + 199 + 2999 + 39999 + 1  # Summing up the integer parts and extra 1\n\n    ans = fraction_sum + integer_sum\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    numbers = [94, 80, 73, 66]\n    differences = [numbers[i] - numbers[i+1] for i in range(len(numbers)-1)]\n    \n    next_difference = differences[1] - differences[0]\n    answer = numbers[0] - (differences[0] + next_difference)\n    \n    return answer\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    solution_weight = sugar + water\n    concentration = (sugar / solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glasses_ml = 25 * 100\n    tumblers_ml = 12 * 200\n    total_ml = wine_glasses_ml + tumblers_ml\n    cartons_needed = total_ml / 1000\n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # 2 raised to any power will cycle through last digits of 2, 4, 8, 6 in this order\n    # So we divide the exponent by 4 and use the remainder to find out the last digit\n    remainder = 859433 % 4\n    \n    # Mapping of remainder to last digit of powers of 2\n    last_digit_mapping = {0: 6, 1: 2, 2: 4, 3: 8}\n    \n    # Find the last digit using the mapping\n    last_digit = last_digit_mapping[remainder]\n    \n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    return 125 * 32 * 25 * 7\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    multiples_of_3 = set(range(3, total_students + 1, 3))\n    multiples_of_5 = set(range(5, total_students + 1, 5))\n\n    turned_around_once = multiples_of_3.union(multiples_of_5)\n    turned_around_twice = multiples_of_3.intersection(multiples_of_5)\n    \n    facing_teacher = total_students - len(turned_around_once) + len(turned_around_twice)\n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    age = 1\n    while True:\n        if all(age % n == 1 for n in [2, 4, 6]) and age % 7 == 5:\n            return age\n        age += 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of avocados, peaches, and lemons as a, p, and l, respectively\n    a, p, l = symbols('a p l')\n\n    # Initial ratios\n    # a:p:l = 2:9:8\n\n    # Sold quantities\n    sold_a = 52\n    sold_p = 12\n    sold_l = 60\n\n    # Equations based on the ratios\n    equation1 = Eq(a/p, 2/9)\n    equation2 = Eq(p/l, 9/8)\n    equation3 = Eq((p - sold_p) / (l - sold_l), 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, p, l))\n\n    # Number of avocados, peaches, and lemons left\n    avocados_left = solutions[a] - sold_a\n    peaches_left = solutions[p] - sold_p\n    lemons_left = solutions[l] - sold_l\n\n    # Total number of fruits left\n    total_left = avocados_left + peaches_left + lemons_left\n\n    return total_left\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of sweets Jess originally has, and y be the number Jill has\n    jess, jill = symbols('jess jill')\n    \n    # Jill has six sweets for every five Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # Jill gives eight sweets to Jess, and now Jill has four sweets for every seven Jess has\n    # Jess now has jess + 8 sweets, and Jill now has jill - 8 sweets\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Calculate the total number of sweets they have together\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    num = 900\n    count = 0\n    \n    # Implementing the check for every possible sequence length\n    for i in range(1, num + 1):\n        # the sum of an arithmetic series is n/2 * (first_element + last_element)\n        # for consecutive odd numbers, the first element is 1 and the last is 2i-1\n        # we need to find if there is an i that satisfies the equation i/2 * (1 + (2i-1)) == num\n        if (i * (1 + (2 * i - 1))) == 2 * num:\n            count = i\n    \n    return count\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    b = 50 * 5\n    a = 50 * 2\n    return b - a\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = 120\n    while True:\n        smallest_number += 1\n        if smallest_number % divisor == remainder:\n            return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    # We will find the largest number that is divisible by all its digits\n    # We start from the largest possible number formed by the digits 1 to 7\n    # and go down until we find a number divisible by all its digits\n\n    # Helper function to check if the number is divisible by all its digits\n    def is_divisible_by_digits(number):\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            number //= 10\n            if digit == 0 or original_number % digit != 0:\n                return False\n        return True\n    \n    # We start from the largest 7-digit number using the digits 1 to 7,\n    # which is 7654321, and we end at the smallest, 1234567\n    for num in range(7654321, 1234566, -1):\n        if is_divisible_by_digits(num):\n            return num\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    return min(numbers)\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    ans = metres + centimetres / 100\n    return ans\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * (1 + 25 / 100)\n    third_test_score = second_test_score * (1 - 20 / 100)\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    # total distance of the race\n    total_distance = 5000\n    # Xiao Ming is 100m behind\n    ming_finishing_distance = total_distance - 100\n    # Xiao Ming's speed is four times that of Xiao Zhen\n    # Therefore, when Xiao Zhen finished the race, Xiao Ming ran 4 times the distance Xiao Zhen ran\n    zhen_distance_when_ming_stopped = ming_finishing_distance / 4\n\n    return zhen_distance_when_ming_stopped\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    total_battery_life = 24  # in hours when not making calls\n    call_battery_life = 3    # in hours when on a continuous call\n    used_hours = 9           # phone has been on for 9 hours\n    call_time = 60 / 60      # 60 minutes of calls in hours\n\n    # Calculate battery consumption rate per hour for calls and non-calls\n    call_consumption_rate = 1 / call_battery_life\n    non_call_consumption_rate = 1 / total_battery_life\n\n    # Calculate the total battery consumed\n    total_consumed = (used_hours * non_call_consumption_rate) + (call_time * call_consumption_rate)\n\n    # Calculate remaining battery life in hours\n    remaining_battery_life = (1 - total_consumed) / non_call_consumption_rate\n    return remaining_battery_life\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n    total_savings = jan_savings + feb_savings + mar_savings\n    num_months = 3\n\n    mean_savings = total_savings / num_months\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Iterate through all the hours in a day\n    for hour in range(24):\n        # Iterate through all the minutes within an hour\n        for minute in range(60):\n            # Convert hours and minutes to strings and concatenate\n            time_str = str(hour).zfill(2) + str(minute).zfill(2)\n            # Count occurrences of '4'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    # Check if the number 233 is prime\n    # Prime number has only two divisors: 1 and itself\n    # Hence if 233 is prime, it cannot be divided evenly \n    # to any number of students greater than 1 and less than 233\n\n    # Starting from 2 to 232 (since we are looking for divisors other than 1)\n    for i in range(2, 233):\n        if 233 % i == 0:\n            # Found a divisor, Michael is incorrect\n            return False\n    # If no divisors are found, Michael is correct\n    return True\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))  # The upper limit is exclusive\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start_div = 56 // 4\n    end_div = 92 // 4\n\n    if 56 % 4 == 0:\n        answer = end_div - start_div + 1\n    else:\n        answer = end_div - start_div\n\n    return answer\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    # Using Chinese Remainder Theorem formula for this specific problem\n    num = 0\n    while True:\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            break\n        num += 1\n        if num >= 100:  # Ensure the number is less than 100\n            break\n    return num\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    even_squares = sum([2*i**2 for i in range(1, 51)])\n    odd_squares = sum([(2*i - 1)**2 for i in range(1, 51)])\n    difference = even_squares - odd_squares\n    return difference\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n\n    return comb(total_students, students_to_select)\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    # The probability of each student excelling is independent of the others.\n    # We calculate the probabilities for 0, 1, 2, or 3 students excelling\n    # and return the number of students corresponding to the highest probability.\n\n    # Probabilities of each student excelling or not\n    pA = 0.5\n    pB = 0.4\n    pC = 0.2\n\n    p_not_A = 1 - pA\n    p_not_B = 1 - pB\n    p_not_C = 1 - pC\n\n    # Probability of no students excelling\n    prob_0 = p_not_A * p_not_B * p_not_C\n    # Probability of only one student excelling\n    prob_1 = pA * p_not_B * p_not_C + p_not_A * pB * p_not_C + p_not_A * p_not_B * pC\n    # Probability of two students excelling\n    prob_2 = pA * pB * p_not_C + pA * p_not_B * pC + p_not_A * pB * pC\n    # Probability of all three students excelling\n    prob_3 = pA * pB * pC\n\n    # Find the most likely number of students to excel\n    probabilities = [prob_0, prob_1, prob_2, prob_3]\n    most_likely_num = probabilities.index(max(probabilities))\n\n    return most_likely_num\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement.\n    # (remainder, mod)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\n    # Using the Chinese Remainder Theorem to find the smallest number\n    # that satisfies all of the above congruences.\n    pencils, _ = solve_congruence(*congruences)\n\n    return pencils\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Given values\n    distance = 144  # distance between Magic Town and Super Town in km\n    speed_ship = 15  # speed of the ship in still water in km/h\n    time_downstream = 8  # time taken to travel downstream from Magic Town to Super Town in hours\n    \n    # Calculate the speed of the current\n    # Using the formula: Speed downstream = Speed of ship + Speed of current\n    # Distance downstream = (Speed of ship + Speed of current) * Time downstream\n    # 144 km = (15 km/h + Speed of current) * 8 h\n    # Speed of current = (144 km / 8 h) - 15 km/h\n    speed_current = (distance / time_downstream) - speed_ship\n    \n    # Calculate the speed upstream\n    # Using the formula: Speed upstream = Speed of ship - Speed of current\n    speed_upstream = speed_ship - speed_current\n    \n    # Calculate the time taken to travel upstream\n    # Using the formula: Time = Distance / Speed\n    time_upstream = distance / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Amount of work A can do in one day\n    work_per_day_A = 1 / 15\n    # Amount of work B can do in one day\n    work_per_day_B = 1 / 20\n    \n    # Amount of work done by A and B together in 2 days\n    work_done_2_days = 2 * (work_per_day_A + work_per_day_B)\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done_2_days\n    \n    # Number of days A takes to finish the remaining work alone\n    days_for_A_to_finish = remaining_work / work_per_day_A\n    \n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # Maximum balls to take out without ensuring the same color: one of each color.\n    max_different_balls = 2\n    # To ensure at least two balls of the same color, take out one more.\n    balls_needed = max_different_balls + 1\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    return (10 * 12) + 1\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo_daily, kangaroo_daily = symbols('hippo_daily kangaroo_daily')\n    \n    # Equation representing the difference in daily food consumption\n    equation1 = Eq(hippo_daily, kangaroo_daily + 45)\n    # Equation for 20 days of food consumption where hippo eats 10 times the kangaroo's consumption\n    equation2 = Eq(20 * hippo_daily, 10 * 20 * kangaroo_daily)\n\n    # Solve the equations for the daily food consumption of hippo and kangaroo\n    solutions = solve((equation1, equation2), (hippo_daily, kangaroo_daily))\n    \n    # Calculate the total food consumed by the hippo in 20 days using the solved daily consumption\n    total_hippo_food = solutions[hippo_daily] * 20\n\n    return total_hippo_food\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    # Initial time when John waited for Tom is 3:15 PM\n    initial_hour = 3\n    initial_minutes = 15\n\n    # Tom arrives 1 hour and 25 minutes later\n    waiting_hour = 1\n    waiting_minutes = 25\n\n    # Calculate the total minutes when they meet\n    total_minutes = initial_minutes + waiting_minutes\n    extra_hours = total_minutes // 60  # Get the full hours from minutes\n    remaining_minutes = total_minutes % 60  # Get the remaining minutes after the full hours\n\n    # Calculate the total hours (account for the extra hours from minutes calculation)\n    total_hours = initial_hour + waiting_hour + extra_hours\n\n    # If the total hours exceed 12, wrap around to conform to 12-hour time format\n    if total_hours > 12:\n        total_hours -= 12\n\n    return f\"{total_hours}:{str(remaining_minutes).zfill(2)} PM\"\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n    target_same_color_balls = 10\n\n    # In the worst case scenario, we may take all yellow and white balls out and still not have 10 of the same color.\n    worst_case_balls_taken = yellow_balls + white_balls\n    \n    # Now we have only black balls left in the bag and we'll make sure the next ball we take out is black.\n    # Since we want 10 balls of the same color, we just need one more black ball after taking out all yellow and white balls.\n    balls_to_ensure_same_color = worst_case_balls_taken + 1\n    \n    return balls_to_ensure_same_color\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_receiver = 3\n\n    # Since we start at child number 3, we need to offset the count by 2\n    # (because child number 1 would be the \"zero\" position in our count)\n    last_receiver = (total_candies + first_receiver - 1) % total_children\n    \n    # If the remainder is 0, the last candy goes to the last child\n    if last_receiver == 0:\n        last_receiver = total_children\n\n    return last_receiver\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n    \n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    lcm = 21  # LCM of 7 and 3 is 21 (the least common multiple is the smallest number that is a multiple of both numbers)\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('2023-01-02', '%Y-%m-%d')\n    next_date = start_date + timedelta(days=lcm)\n    \n    return next_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the inclusion-exclusion principle\n    both = children_with_dogs + children_with_cats - total_children\n\n    return max(both, 0)  # The number cannot be negative\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # The number of shirts was 36 less than the number of skirts\n    equation1 = Eq(shirts, skirts - 36)\n    \n    # After selling 2/3 of her shirts and 5/6 of her skirts, she had 72 left\n    equation2 = Eq((shirts * (1 - 2/3)) + (skirts * (1 - 5/6)), 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    # Skirts is what we want to find out\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    number_of_months = 3\n    total_saving = monthly_saving * number_of_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    num_cloaks_lengthwise = material_length // cloak_length\n    num_cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = num_cloaks_lengthwise * num_cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # define distances and the expected average speed\n    distance_one_way = 120\n    average_speed_required = 30\n\n    # calculate the total time in hours required for the round trip at the expected average speed\n    total_time_required = (2 * distance_one_way) / average_speed_required\n\n    # calculate the time taken to travel to the place at the initial speed\n    time_to_place = distance_one_way / 20\n\n    # calculate the remaining time for the return trip\n    remaining_time = total_time_required - time_to_place\n\n    # calculate the speed required for the return journey to meet the average speed requirement\n    return_speed = distance_one_way / remaining_time\n\n    return return_speed\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 5), x ≡ 2 (mod 6), x ≡ 7 (mod 11)\n    # Solve the system of congruences\n    ans = solve_congruence((1, 5), (2, 6), (7, 11))\n    \n    # Find the smallest positive solution that is between 400 and 800\n    n = ans[0]\n    while n < 400:\n        n += ans[1]\n    \n    return n\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial as fact\nfrom itertools import permutations\n\ndef solution():\n    total_students = 7\n    \n    # There are factorial(7) ways to arrange 7 students without any restrictions.\n    total_ways = fact(total_students)\n    \n    # However, we have restrictions we must account for.\n    \n    # For Student A to be between B and C, we treat the trio (B, A, C) as one unit (regardless of the order of B and C).\n    # Additionally, D and E always together (as one unit), and F and G not together.\n    \n    # So we treat (B, A, C) as X and (D, E) as Y, which reduces our problem to\n    # arranging 5 units (X, Y, F, G, remaining student), \n    # and this arrangement will have factorial(5) ways.\n    \n    # Since X can be (B, A, C) or (C, A, B) and Y can be (D, E) or (E, D),\n    # we have 2 more ways to arrange within X and 2 ways within Y.\n    \n    # Multiplying these together: 5 units with 2 arrangements for X and 2 for Y.\n    five_unit_arrangements = fact(5) * 2 * 2\n    \n    # However, we also need to account for F and G not being together.\n    # First, let's calculate the number of ways F and G can be together (as one unit Z)\n    # which would be arranging 4 units (X, Y, Z, remaining student) with factoral(4)\n    # and Z (F, G) can be together in 2 ways (F, G) or (G, F).\n    \n    fg_together = fact(4) * 2\n    \n    # The number of valid arrangements for F and G not together would be the difference\n    # between the total 5 unit arrangements and the number when F and G are together.\n    \n    fg_not_together = five_unit_arrangements - fg_together\n    \n    # The final answer would be the number of ways for 5 units with F and G not together.\n    ans = fg_not_together\n    \n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming that by \"table\" you meant the sequence provided earlier:\n    # Since the sequence is arithmetic, we can use the formula for the sum of an arithmetic series.\n    # sum = n/2 * (first_term + last_term), where n is the number of terms.\n\n    first_term = 2\n    last_term = 240\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1  # Integer division is used for number of terms\n\n    sum_seq = num_terms / 2 * (first_term + last_term)\n\n    return sum_seq\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut to divide the rod into 2 pieces\n    # To have 5 pieces, we need 4 cuts (since the first piece is created without a cut)\n    num_cuts = 5 - 1\n    minutes_per_cut = 2\n    total_minutes = num_cuts * minutes_per_cut\n    return total_minutes\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    ans = 46 * 37\n    return ans\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    current_average = 120\n    new_average = 110\n    number_of_values = 3\n    \n    # First, calculate the total of the current three numbers\n    total_current = current_average * number_of_values\n    \n    # Calculate the new total after adding one number to make the new average\n    total_new = new_average * (number_of_values + 1)\n    \n    # Calculate the number that needs to be added\n    number_to_add = total_new - total_current\n    \n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities to be found\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    # Write the equations according to the problem\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    # Sum up the number of marbles they have altogether\n    total_marbles = sum(solutions.values())\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    # This problem is a simple algebraic problem,\n    # It's equivalent to solving the equation: 140 + m = 8*(10 + m) - 3\n\n    # Let's solve for m\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Calculate the total amount of hay needed for one horse for one day\n    hay_per_horse_per_day = (horses_initial * days_initial) / horses_initial\n    \n    # Calculate the total amount of hay for the pile\n    total_hay = hay_per_horse_per_day * days_initial\n    \n    # Calculate the number of days the same pile will last for 20 horses\n    days_final = total_hay / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    last_term = 65\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(6, 9), 12)\n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Equations representing the problem\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Total mass of three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    one_company_work_per_day = (total_expressway / companies) / days\n\n    return one_company_work_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_cost = 78\n    sock_cost = 12\n    legs_total = 6 * 5  # 5 brothers plus the alien, each with 5 legs\n    \n    total_cost = legs_total * (shoe_cost + sock_cost)\n    \n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean = sum(data) / len(data)\n    deviations = [abs(x - mean) for x in data]\n    mad = sum(deviations) / len(data)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from sympy import symbols, solve\n\ndef solution():\n    x, y, z = symbols('x y z')\n    equation = solve([x + y + z - 13, x - y, y - z], (x, y, z))\n    count = 0\n    for x in range(14):\n        for y in range(14 - x):\n            z = 13 - x - y\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_fifth = 20\n    distance_between_trees = distance_between_first_fifth / (5 - 1)  # 4 intervals between 5 trees\n    total_trees = int(200 / distance_between_trees) + 1  # Add 1 to include the first tree\n    return total_trees\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    tap_a_rate = 1 / 12\n    tap_b_rate = 1 / 8\n\n    combined_rate = tap_a_rate + tap_b_rate\n\n    time_to_fill_half = 0.5 / combined_rate\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # The correct mathematical operations according to BODMAS/BIDMAS rules\n    first_step = (36 * 21) / (6 * 7)\n    second_step = 36 / 6 * 21 / 7\n    ans = second_step\n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Since we know the ones digit when moved to the first place increases the number by 5877,\n    # We need to understand that increasing a number by moving the ones to the first place\n    # Means we add multiples of 999... depending on the number of digits.\n    # In this case its a 4-digit number, so when we move the ones digit to thousands place,\n    # We add that digit * 1000 and subtract that digit (since it was in the ones place)\n    # Therefore, the equation will be digit * 1000 - digit = 5877\n    # Simplifying that, we have digit * 999 = 5877\n    # To find the digit, we divide 5877 by 999.\n\n    digit = 5877 // 999\n\n    # The digit found will be the starting digit. Now we need to find the original number which is\n    # The new number - 5877.\n    # Since the new number starts with the digit we found, the original number will have the digit originally at the end.\n\n    new_number = digit * 1000 + 5877\n\n    return new_number - digit\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    # Define the variables for the quantities of the 0.50 and 0.10 cookies\n    # Let the number of $0.50 cookies be x, then the number of $0.10 cookies is x + 60\n    \n    # Since Jeremy has 3/5 as many $0.50 cookies as $0.10 cookies, let Jeremy's $0.50 \n    # cookies be (3/5)*(x + 60)\n    # Jeremy's $0.50 cookies are worth $0.50*(3/5)*(x + 60)\n    # David's $0.50 cookies are worth 3 times Jeremy's cookies, which is $0.50\n    # Therefore, we set up the equation $0.50 = 3 * $0.50 * (3/5)*(x + 60)\n    # Solving for x gives us the number of $0.10 cookies\n    \n    # Let's find out the number of $0.10 cookies ('x' variable)\n    x = (0.50 / (0.50 * 3 * (3/5))) - 60\n    \n    # Now, we can calculate how much Jeremy's cookies are worth\n    # Jeremy's $0.10 cookies are worth $0.10 * x\n    jeremy_cookies_worth = 0.10 * x\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n    \n    # Create all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n\n    # Dictionary to store the products of combinations\n    products = {}\n\n    # Calculate the product of each combination and store it in the dictionary\n    for combo in candy_combinations:\n        prod = combo[0] * combo[1]\n        products[prod] = products.get(prod, []) + [combo]\n\n    # Check which combination for Candice has a product equal to one of Candy's\n    for combo in candice_combinations:\n        prod = combo[0] * combo[1] * combo[2]\n        if prod in products:\n            chosen_numbers = set(combo + products[prod][0])\n            not_picked = (set(numbers) - chosen_numbers).pop()\n            break\n\n    return not_picked\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    \n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    i = 1\n    while True:\n        # The number of boys is i * i\n        # When 17 girls are added, a new row and column are added making the square (i+1)*(i+1)\n        # The difference between the two squares gives us the number of girls added\n        if (i + 1) ** 2 - i ** 2 == 17:\n            return i ** 2\n        i += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_last = 2\n    \n    total_people = ann_position + people_between + david_position_from_last\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count, page = 0, 0\n    while count < 22:\n        page += 1\n        count += str(page).count('8')\n    return page\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # given proportions n:8 and 9:12\n    n = (9 * 8) / 12  # cross multiplication\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + (-3)\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we get 29 balls of one color, 28 of another, and 10 of the last,\n    # we need to consider the worst-case scenario based on the pigeonhole principle.\n    # To miss getting 29 balls of one color, we can get up to 28 of each (blue and red),\n    # and 9 of white, because we have the lowest number of white balls.\n    # So we calculate the maximum we can get without reaching our goal:\n    max_without_goal = (28 * 2) + 9\n\n    # Now we add one more ball to ensure we get at least 29 of one color,\n    # which will also ensure we have at least 28 of another and 10 of the last.\n    min_balls_needed = max_without_goal + 1\n\n    return min_balls_needed\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n    \n    both_competitions = (maths_students + art_students) - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time_years = 3\n\n    simple_interest = principal * rate * time_years\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    x = (19 - (6 * 1.5)) / 4\n    return x\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n\n    difference = height_mountain_world - height_mountain_england\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(10, 50):\n        if i % 3 == 2 and isprime(i) and (i - 2) % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)\n    equation2 = Eq(alicia - alicia / 2, beth - 60)\n    equation3 = Eq(beth - 60, casey - 3 * (alicia / 2))\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = -1\n    net_progress = day_distance + night_distance  # Net progress in one full day (day + night)\n    \n    # Calculate number of full days required to reach or exceed 7 metres (the final jump)\n    full_days = (total_distance - day_distance) // net_progress\n    \n    # Check if the snail reaches 9 metres without sliding down on the last day\n    if (total_distance - day_distance) % net_progress != 0:\n        full_days += 1\n    \n    # The final day where the snail climbs out of the burrow during the day\n    exit_day = full_days + 1\n    \n    return exit_day\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any number factorial larger than or equal to 10 always ends in 0\n    # because it will include the factors 2 and 5 at least once.\n    # The last non-zero digit of factorial is sought in this question.\n    # However, for any factorial with n >= 5, the last digit is 0 due to the\n    # presence of 2 and 5 as factors, which create a trailing zero when multiplied.\n    # Therefore, the last digit of 2014! is guaranteed to be 0.\n    ans = 0\n\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    from sympy import primefactors\n    from collections import Counter\n\n    # Prime factorize each number, count occurences of each prime factor\n    prime_factors = Counter()\n    for number in [2, 2, 3, 8, 5, 5, 5]:\n        prime_factors.update(primefactors(number))\n    \n    # Number of zeros at the end of the product is determined by the\n    # number of pairs of 2s and 5s in the prime factorization\n    num_zeros = min(prime_factors[2], prime_factors[5])\n    \n    return num_zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator_original = 20\n    ratio = numerator / denominator_original\n    numerator_target = 30\n    denominator_target = numerator_target / ratio\n    \n    return int(denominator_target)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 6) * 3) / 8 - 8, 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orig_number = symbols('orig_number')\n    \n    new_number = orig_number * 10\n    sum_eq = Eq(orig_number + new_number, 253)\n\n    solution = solve(sum_eq, orig_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n    \n    # The number of cookies eaten each day forms an arithmetic sequence:\n    # x, x+6, x+12, x+18, x+24\n    # The sum of this arithmetic sequence over five days is 100:\n    sum_eq = Eq(x + (x + 6) + (x + 12) + (x + 18) + (x + 24), 100)\n\n    # Solve for x\n    first_day_cookies = solve(sum_eq, x)\n\n    return first_day_cookies[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    total_boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // total_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    letters = \"HAPPY\"\n    freq = {char: letters.count(char) for char in set(letters)}\n\n    ans = factorial(len(letters))\n    for key, value in freq.items():\n        ans //= factorial(value)\n\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    # Initialize ans to None in case no number is found that satisfies all conditions.\n    ans = None\n    \n    # Loop through all numbers less than 90 to check the conditions.\n    for num in range(1, 90):\n        \n        # Check if the number is a multiple of 9\n        if num % 9 == 0:\n            \n            # Check if the number is one more than a multiple of 5\n            if (num - 1) % 5 == 0:\n                \n                # Check if the number is one less than a prime number\n                possible_prime = num + 1\n                for i in range(2, int(possible_prime**0.5) + 1):\n                    if possible_prime % i == 0:\n                        # not a prime number\n                        break\n                else:\n                    # It is a prime number\n                    ans = num\n                    break  # Break the loop as we have found our number\n    \n    return ans\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of questions completed by each student\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    # Cayden completed 6 more questions than Sicheng\n    equation1 = Eq(cayden, sicheng + 6)\n\n    # Yixuan completed 2 times as many questions as Cayden\n    equation2 = Eq(yixuan, 2 * cayden)\n\n    # Yixuan completed 22 more questions than Sicheng\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    # Calculate the total number of questions completed by the three students\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin, crystal, ashley = symbols('justin crystal ashley')\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n    \n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n    \n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n    \n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2/5\n    total_children = girls / (1 - boys_fraction)\n    boys = total_children * boys_fraction\n    return int(boys)\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    \n    # There are 4 men and 4 positions for them\n    men_ways = factorial(4)\n    # Similarly, there are 4 women and 4 positions for them\n    women_ways = factorial(4)\n    \n    # Since men and women want to stand alternately, we consider two arrangements:\n    # men start or women start, hence we multiply by 2.\n    total_ways = men_ways * women_ways * 2\n    \n    return total_ways\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    i = 2\n    factors = {}\n\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n        i += 1\n\n    if n > 1:\n        factors[n] = 1\n\n    ans = 1\n    for exponent in factors.values():\n        ans *= exponent + 1\n\n    return ans\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # Including Peter and John themselves\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return (60 / 100) * (10 / 100) * 900\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    departure_time = datetime.strptime(\"12:00\", \"%H:%M\")\n    flight_duration = timedelta(hours=4)\n    \n    # St Petersburg is in the Moscow Time Zone which is UTC+3\n    time_difference = timedelta(hours=3)\n    \n    arrival_time = departure_time + flight_duration + time_difference\n    return arrival_time.time()\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = final_amount / (1 + interest_rate) ** years\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if len(set([N, O])) == 2:  # Ensure N and O are different digits\n                NO = N * 10 + O\n                if len(set(str(NO * NO))) == 4:  # Ensure NO squared is a 4-digit number with all different digits\n                    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(50, 31, -2):\n        total += sign * i\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    max_palindrome = 0\n    for d in range(9, 0, -1):\n        for e in range(9, -1, -1):\n            four_digit_palindrome = int(f\"{d}{e}{e}{d}\")\n            five_digit_palindrome = 45 * four_digit_palindrome\n            str_palindrome = str(five_digit_palindrome)\n            if str_palindrome == str_palindrome[::-1]:\n                max_palindrome = max(max_palindrome, five_digit_palindrome)\n    return max_palindrome\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 2.5 * 1000\n    return kg_to_grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following congruences:\n    #   x ≡ 1 (mod 2)\n    #   x ≡ 2 (mod 3)\n    #   x ≡ 3 (mod 4)\n    #   x ≡ 4 (mod 5)\n    \n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    boys_ratio = 3/8\n    girls_ratio = 1 - boys_ratio\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    \n    # Calculate total children in the classroom\n    boys = (total_sweets * boys_ratio) / sweets_per_boy  # this calculation gives us the total number of boys\n    girls = (total_sweets * girls_ratio) / sweets_per_girl  # this calculation gives us the total number of girls\n    \n    return int(girls)  # return the number of girls as integer\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_factor = 1 / 5  # 1 km on ground is represented by 5 cm on the map\n    distance_map_cm = 12\n    distance_ground_km = distance_map_cm * scale_factor\n\n    return distance_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100 - i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    # Setting up the system of equations based on the remainders given by the problem\n    eq1 = Eq(x % 7, 5)\n    eq2 = Eq(x % 8, 6)\n    eq3 = Eq(x % 10, 6)\n    # Equation for the sum of quotients\n    eq4 = Eq((x // 6) + (x // 7) + (x // 8), 265)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), x)\n\n    # Take the first (and only) solution that is a non-negative integer\n    for sol in solutions:\n        if sol.is_integer and sol >= 0:\n            return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2          # speed in kilometers per hour\n    time_seconds = 24         # time in seconds\n    speed_mps = speed_kmh * (1000 / 3600)  # convert speed to meters per second\n    distance_meters = speed_mps * time_seconds  # calculate distance in meters\n    \n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the carrots eaten by each rabbit\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    ans = \"Pip is mostly correct, but there is one exception to the statement. The number 1 is neither prime nor composite. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. A composite number is a positive integer greater than 1 that has more than two positive integer divisors. Since 1 only has one divisor, which is itself, it does not fit the definition of a prime number or a composite number. Therefore, while Pip's statement is true for all integers greater than 1, it is not accurate for the number 1.\"\n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    # As we are looking for the maximum value for the smallest number,\n    # the other nine numbers should be as small as possible.\n    # Given that the numbers are distinct positive integers and the fifth number in descending order is 225,\n    # the set of the smallest four numbers in descending order would be: 1, 2, 3, and 4.\n    # The four largest numbers in descending order would be: 226, 227, 228, and 229.\n    # The fifth number is given as 225.\n    # Therefore, the sum of the nine smallest numbers would be:\n    sum_of_nine_smallest = sum(range(1, 5)) + sum(range(225, 230))\n    # Subtract this sum from the total sum of 2018 to find the maximum value for the smallest number.\n    max_value_for_smallest_number = 2018 - sum_of_nine_smallest\n    \n    return max_value_for_smallest_number\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + (1 / i))\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):  # Start from 1 balloon since each group must have at least one\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    # Check if the groups have different number of balloons and sum up to 12\n                    if x1 + x2 + x3 + x4 == 12 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num = 40309\n    adder = 0\n    # We keep adding 1 until we find the smallest number that is a palindrome\n    while not is_palindrome(num + adder):\n        adder += 1\n\n    return adder\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    sweets_shared = (total_sweets - kasia_keeps) // 2\n    lucie_gives_to_joan = sweets_shared * 2 // 7\n    lucie_keeps = sweets_shared - lucie_gives_to_joan\n    return lucie_keeps\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (ratio_adults / total_ratio) * total_people\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    bags = 3\n    boxes = 4\n    combinations = bags * boxes\n\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    # Original ratio 3:4\n    equation1 = Eq(apples / pears, 3 / 4)\n    # After changing, apples become 1.5 times pears\n    equation2 = Eq((apples + 36) / (pears - 36), 3 / 2)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Initialize the count of boys and girls\n    boys = 0\n    girls = 0\n    layer = 0\n\n    # Start from the first layer and keep adding layers until the difference is met\n    while True:\n        # For each layer, there are (2*layer + 1)^2 students in total\n        total_students = (2*layer + 1)**2\n\n        # Boys take the four corners plus the perimeter minus four (because corners would be counted twice)\n        # for the outermost layer (and every odd layer), and the inside square for every even layer\n        if layer % 2 == 0:  # odd layers - boys\n            boys_layer = (2 * (2*layer + 1) + 2 * (2*layer - 1))\n            girls_layer = total_students - boys_layer\n        else:  # even layers - girls\n            girls_layer = (2 * (2*layer + 1) + 2 * (2*layer - 1))\n            boys_layer = total_students - girls_layer\n\n        # Add the boys and girls in this layer to the total\n        boys += boys_layer\n        girls += girls_layer\n\n        # Check if the difference condition is satisfied\n        if boys - girls == 52:\n            break\n\n        # Go to the next layer\n        layer += 1\n\n    # The total number of students is the number of boys plus girls\n    return boys + girls\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # Decimal part to be repeated and its length\n    repeating_part = '6129043'\n    length_of_repeating_part = len(repeating_part)\n\n    # Calculate how many complete sets of the repeating part fit in 212 digits\n    complete_sets = 212 // length_of_repeating_part\n\n    # Calculate the number of digits from incomplete set\n    remaining_digits = 212 % length_of_repeating_part\n\n    # Sum of all digits in complete sets of the repeating part\n    sum_complete_sets = sum(int(digit) for digit in repeating_part) * complete_sets\n\n    # Sum of the digits in the incomplete set\n    sum_remaining = sum(int(repeating_part[i]) for i in range(remaining_digits))\n\n    # Total sum of first 212 digits\n    total_sum = sum_complete_sets + sum_remaining\n    \n    return total_sum\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's denote the total pension as 1 (whole), for simplicity\n    # Granddad spends 1/4 on Friday night\n    friday_spending = 1 / 4\n    \n    # The remaining after Friday night out\n    remaining_after_friday = 1 - friday_spending\n    \n    # He spends 1/3 of the remaining on Saturday night\n    saturday_spending = remaining_after_friday / 3\n    \n    # The remaining after Saturday night out\n    remaining_after_saturday = remaining_after_friday - saturday_spending\n    \n    # This is what he has left to spend for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let's denote the total litres needed to fill the fish tank as T.\n    \n    # According to the problem:\n    # If he uses a 5-litre pail, 4 litres of water will overflow, so T = 5-litre pail + 4 litres (overflow),\n    # If he uses a 3-litre pail, he needs another 4 pails of water, so T = 4 * 3-litre pails + initial 3-litre pail.\n    \n    # Equating both expressions for T, we get:\n    # 5-litre pail + 4 litres = 4 * 3-litre pails + 3-litre pail\n    # 5 + 4 = 4 * 3 + 3\n    # T = 5 + 4 = 4 * 3 + 3\n    # T = 9 = 12 + 3\n    # T = 9 = 15\n    # Which means, the total litres needed to fill the fish tank is 15 litres.\n    \n    total_litres = 15  # This matches both conditions given.\n    return total_litres\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for n in range(1, 100):  # arbitrary upper limit for reasonable square size\n        if (n * n + n + n + 1) == n**2 + 31:\n            return n**2 + 31\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    zeros = 28\n    n = 1\n    count_5 = 0\n\n    while True:\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n        if count_5 >= zeros:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    # Perform the multiplication of the fraction 2/3 with the amount £729\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    books = 61\n    # Assuming at least one person receives at least 3 books\n    # To maximize the number of students, we give out as few books as possible to other students\n    # Which is 1 book per student. Once one student gets 3 books, the rest can get 1.\n    # Subtract the 3 books for the one student from the total\n    remaining_books = books - 3\n    # The number of students that can get 1 book each\n    students_with_one_book = remaining_books\n    # Adding the one student that got 3 books\n    total_students = students_with_one_book + 1\n    return total_students\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n\n    total_cost = (5 * lemonade_price) + (6 * chocolate_bar_price)\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n    \n    equation = Eq(age_now + 4, 2 * (age_now - 4))\n\n    sam_age_now = solve(equation, age_now)[0]\n\n    return sam_age_now\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    odd_numbers = []\n    for perm in permutations(\"3728\"):\n        number = int(''.join(perm))\n        if number % 2 != 0:  # Checking if the number is odd.\n            odd_numbers.append(number)\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Since the yellow socks are not identical, Daniel might pick all 9 without getting a pair.\n    # There are 7 identical green socks, so picking 1 guarantees a pair.\n    # There are 4 identical white socks, so picking 1 guarantees a pair.\n    # There are 2 red socks, picking them both guarantees a pair.\n    # There is 1 black sock, so it does not contribute to any pair.\n    # To ensure two pairs of the same color, Daniel must pick all yellow ones and one more sock\n    # either green or white to have two pairs.\n\n    # 9 yellow socks + 1 green or white sock = 10 socks for at least one pair\n    # However, to ensure two pairs of matching socks with the same color:\n    # We then need to pick 1 more green or white sock, 1 red, and 1 black, considering the worst-case\n    # scenario where these picks do not yield a matching pair until we get a matching pair with green\n    # or white which we know we have enough of to get a pair.\n\n    # Total: 9 yellow + 1 green/white + 1 additional green/white + 1 red + 1 black\n    smallest_number_of_socks = 9 + 1 + 1 + 1 + 1\n    \n    return smallest_number_of_socks\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # RAINBOW\n    vowels = 3  # A, I, O\n    consonants = 4  # R, N, B, W\n\n    # Total arrangements without any restriction (7!)\n    total_arrangements = factorial(total_letters)\n\n    # Arrangements when vowels are together (treat vowels as a single unit)\n    # We have 5 units now (vowels as 1 unit + 4 consonants)\n    units = 5\n    # Arrangement of these 5 units (5!)\n    units_arrangements = factorial(units)\n    # Arrangement of vowels amongst themselves (A, I, O)\n    vowels_arrangements = factorial(vowels)\n\n    # Total arrangements when vowels are together is the product\n    vowels_together_arrangements = units_arrangements * vowels_arrangements\n\n    # Subtracting from the total arrangements to get the final answer\n    ans = total_arrangements - vowels_together_arrangements\n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let a be the first term and d be the common difference of the arithmetic progression.\n    # The sum of the first n terms of an arithmetic progression is given by S_n = n/2 * (2a + (n - 1)d)\n    # Here, S_10 = 20 and S_30 = 90\n    \n    # Using the formula for S_10:\n    # 20 = 10/2 * (2a + (10 - 1)d)\n    # From which we get:\n    # 4 = 2a + 9d\n    # Simplifying gives us equation 1:\n    # 2a + 9d = 4  -- (1)\n    \n    # Using the formula for S_30:\n    # 90 = 30/2 * (2a + (30 - 1)d)\n    # From which we get:\n    # 6 = 2a + 29d\n    # Simplifying gives us equation 2:\n    # 2a + 29d = 6  -- (2)\n    \n    # Subtract equation (1) from (2):\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # Simplifying gives us:\n    # 29d - 9d = 6 - 4\n    # 20d = 2\n    # d = 2 / 20 = 1 / 10\n    \n    common_difference = 1 / 10\n    return common_difference\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Let x be the weight of the goods on truck C.\n    # According to the problem, we have:\n    # A = 4 * C\n    # B = A - 180\n    # C = 1/2 * B\n\n    # We can express B in terms of C:\n    # B = 2 * C\n\n    # Now express A in terms of C:\n    # A = 4 * C\n\n    # Using the relationship between B and A:\n    # B = A - 180\n    # Substitute A = 4 * C\n    # 2 * C = 4 * C - 180\n    # Simplify to find C:\n    # 180 = 2 * C\n    # C = 180 / 2\n    C = 180 / 2\n\n    # Now calculate A and B using the values of C:\n    A = 4 * C\n    B = 2 * C\n\n    # The total weight of the goods on trucks A and B in grams:\n    total_weight_grams = A + B\n\n    # Convert the total weight to kilograms (since there are 1000 grams in a kilogram):\n    total_weight_kilograms = total_weight_grams / 1000\n\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_ratio = 4\n\n    penny_stickers = (total_stickers * penny_ratio) / ratio_sum\n\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    time_s = 300  # time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000 m/3600 s)\n    speed_ms = speed_kmh * (1000 / 3600)\n\n    # Calculate distance in meters (distance = speed * time)\n    distance_m = speed_ms * time_s\n\n    return distance_m\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)                 # chickens and goats sum up to 40\n    equation2 = Eq(3 * chickens, 5 * cows)               # 3 times chickens equals 5 times cows\n    equation3 = Eq(2 * goats, 10 * cows)                 # 2 times goats equals 10 times cows\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Calculating the number of feet\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n    \n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    sold_apples = 40\n    fraction_sold = 4/7\n    fraction_brought = 1/2\n\n    apples_brought = sold_apples / fraction_sold\n    total_apples = apples_brought / fraction_brought\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # average of the first 2 numbers is 10\n    sum_first_2 = 10 * 2\n\n    # average of the last 2 numbers is 22\n    sum_last_2 = 22 * 2\n\n    # average of the first and last numbers is 14\n    sum_first_last = 14 * 2\n    \n    # the sum of all 4 numbers is the sum of the first 2 and the last 2\n    sum_all_4 = sum_first_2 + sum_last_2\n\n    # since the first and last are counted twice we remove one set\n    sum_middle_2 = sum_all_4 - sum_first_last\n    \n    # average of the middle numbers is their sum divided by 2\n    avg_middle_2 = sum_middle_2 / 2\n    return avg_middle_2\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    parts = 1   # Starts with 1 part, which is the whole plane without any lines\n    for i in range(1, lines + 1):\n        parts += i\n    return parts\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for num in range(200, 501):\n        if '3' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = [f for f in range(10, 100) if f % 7 == 0 and 7007 % f == 0]\n    factor_pair = [(i, 7007 // i) for i in factors if 10 <= 7007 // i <= 99]\n    return sum(factor_pair[0])\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    # Let's denote x as the number Freya thinks of.\n    # According to the problem, 2 * x - 10 = 50\n    # We solve for x by adding 10 to both sides and then dividing by 2.\n\n    result_after_operations = 50 + 10  # add 10 to both sides of the equation\n    original_number = result_after_operations / 2  # divide by 2 to find the original number\n\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_and_B_average = 22\n    C = 19\n\n    # sum of A and B is twice their average\n    sum_of_A_and_B = 2 * A_and_B_average\n    # add C to sum of A and B to get sum of A, B, and C\n    sum_of_A_B_C = sum_of_A_and_B + C\n    # divide by 3 to get the average of A, B, and C\n    average_of_A_B_C = sum_of_A_B_C / 3\n\n    return average_of_A_B_C\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    target_number = 2978\n\n    closest_number = min(all_numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import date\n\ndef solution():\n    birth_date = date(1533, 9, 7)\n    death_date = date(1603, 3, 24)\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    \n    max_cakes_in_layer = (total_cakes + total_layers - 1) // total_layers\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23 ** 0.5)  # Largest possible side for a whole number square\n    rope_to_cut = 23 - (max_side_length ** 2)  # Length of rope to cut to form the square\n\n    return rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    expression1 = (21 + 1) * 7\n    expression2 = 20 + (1 * 7)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += ((2018 + i) / 5) - ((2018 + i) // 5)\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Total number of boxes\n    total_boxes = 10\n    # Box 1 has 11 cookies\n    first_box_cookies = 11\n    # Total number of cookies\n    total_cookies = 425\n    \n    # Calculate the common difference\n    # Using the formula for the sum of an arithmetic sequence: total_cookies = (n/2) * (2*a1 + (n-1)d)\n    # Where n is the number of terms, a1 is the first term, and d is the common difference.\n    # Solving for d gives us: d = (2 * total_cookies / n - 2 * a1) / (n - 1)\n    common_difference = (2 * total_cookies / total_boxes - 2 * first_box_cookies) / (total_boxes - 1)\n\n    return int(common_difference)\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n    return total_sum\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repetitive_digits = {'1': 2}\n    \n    permutations_total = factorial(total_digits)\n    for key, value in repetitive_digits.items():\n        permutations_total //= factorial(value)\n    \n    return permutations_total\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x represent the original number of Xiao Ye's books\n    x = symbols('x')\n\n    # Xiao Tie's books are 3/5 of Xiao Ye's\n    tie_books = 3 / 5 * x\n\n    # After Xiao Ye gives 3 books to Xiao Tie\n    new_tie_books = tie_books + 3\n    # The new amount of Xiao Ye's books after she gives 3 books to Xiao Tie\n    new_ye_books = x - 3\n\n    # Now Xiao Tie's books are 5/7 of Xiao Ye's\n    equation = Eq(new_tie_books, 5 / 7 * new_ye_books)\n    \n    # Solve for x\n    xiao_ye_original_books = solve(equation, x)[0]\n\n    return xiao_ye_original_books\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let's denote the total ages of Chinese, English, and Mathematics teachers by C, E, and M, respectively.\n    \n    # According to the given information:\n    # Average age for Chinese and English teachers (C + E) / 2 = 34\n    C_plus_E = 34 * 2\n\n    # Average age for English and Mathematics teachers (E + M) / 2 = 36\n    E_plus_M = 36 * 2\n\n    # Average age for Chinese and Mathematics teachers (C + M) / 2 = 44\n    C_plus_M = 44 * 2\n\n    # Sum of all the teachers' ages S = C + E + M, but we have no direct information about S.\n    # However, we can form S by adding (C + E), (E + M), and (C + M)\n    # And since (C + E + M) is counted twice in each pair we add together, we must subtract one instance of each individual total (C, E, M) which are all accounted for twice.\n    # So, S = (C_plus_E + E_plus_M + C_plus_M) / 2\n    \n    S = (C_plus_E + E_plus_M + C_plus_M) // 2\n\n    # The average age of the 3 subject teachers is S / 3\n    ans = S / 3\n\n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A = 1 / sum(1 / i for i in range(1995, 2009))\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # The sum of an arithmetic sequence is given by:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    # Here we know that sum = 357 and n = 7 (since they are consecutive odd numbers).\n    # We will use this information to find the first term.\n\n    n = 7\n    total_sum = 357\n\n    # From the formula of the sum of an arithmetic sequence,\n    # we can express the first term (a) in terms of the last term (l) since we know the sum and n.\n    # total_sum = n/2 * (a + l)\n    \n    # Since these are consecutive odd numbers, the difference (d) between each term is 2.\n    # a, a + 2, a + 4, a + 6, a + 8, a + 10, a + 12\n    # Therefore last term (l) = a + 12 \n    \n    # Substituting l in terms of a, we get:\n    # total_sum = n/2 * (a + (a + 12))\n    # total_sum = 7/2 * (2a + 12)\n    # 357 * 2 = 7 * (2a + 12)\n    \n    # Now we solve for a\n    a = (357 * 2 / n - 12) / 2\n\n    return int(a)\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all([num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5]):\n            return num\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number that leaves a remainder of 1 for each divisor\n    # We can use the Chinese Remainder Theorem to solve this system of congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # An even number is divisible by 2\n    # A prime number is a number that has exactly two distinct positive divisors: 1 and itself\n    # The only even prime number is 2\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    used_cloth = symbols('x')\n    remaining_cloth = total_cloth - used_cloth\n\n    return remaining_cloth\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # martin_speed = carter_speed + 20\n    equation1 = Eq(martin_speed, carter_speed + 20)\n    \n    # Given ratio of time taken by Martin and Carter is 9:13.\n    # Since time = distance / speed, and the distance is the same for both,\n    # The ratio of their speeds will be the inverse of the ratio of times taken.\n    # So ratio of speeds of Carter and Martin = 13:9\n    equation2 = Eq(carter_speed / martin_speed, 9 / 13)\n\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    # In the worst case, we keep taking out alternate color apples\n    # So we would take out all the red and one yellow to guarantee a match\n    ans = red_apples + 1\n    return ans\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    fred = symbols('fred')\n    george = symbols('george')\n\n    # Equations based on the problem statement\n    # Fred and George painting together\n    equation1 = Eq(1/fred + 1/george, 1/6)\n    # Fred painting alone\n    equation2 = Eq(1/fred, 1/9)\n\n    # Solve the system of equations for George\n    solutions = solve((equation1, equation2), (fred, george))\n\n    # Return George's time\n    return solutions[george]\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # We know that cats and dogs each have 4 legs, rabbits have 4 legs, and birds have 2 legs.\n    # Let b represent the number of birds.\n\n    # Calculate the total legs for 2 cats, 2 dogs, and 1 rabbit\n    legs_from_cats_dogs_rabbits = (2 * 4) + (2 * 4) + (1 * 4)\n\n    # Calculate the remaining legs that must belong to the birds\n    remaining_legs = 28 - legs_from_cats_dogs_rabbits\n\n    # Since birds have 2 legs, we divide the remaining legs by 2 to get the number of birds\n    num_birds = remaining_legs // 2\n\n    return num_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # Each person has 5 choices, and there are 4 people.\n    # The order in which they enter the zoo matters, so we use permutations.\n    # Since they can choose the same entrance, this is a permutation with repetition.\n    num_entrances = 5\n    num_people = 4\n\n    # The total number of ways they can enter is 5^4 (each person can choose from 5 entrances independently)\n    total_ways = num_entrances ** num_people\n\n    return total_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Calculate the house's original value based on the 5% increase\n    value_after_first_year = 10500\n    original_value = value_after_first_year / 1.05\n\n    # Calculate the house's value after it loses 5% of its value the second year\n    value_after_second_year = original_value * 0.95\n\n    # Calculate the amount of profit or loss by subtracting the original value from the value after the second year\n    profit_or_loss = value_after_second_year - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_35 = 200 // 35\n\n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the number of red pens originally be 3x and the number of black pens be 7x.\n    # After selling y pens of each color, we have 3x - y red pens and 7x - y black pens.\n    \n    # The new ratio of red to black pens is 5:13, and there are 20 red pens in the end.\n    # So we have the equations:\n    # 3x - y = 20 and (3x - y) / (7x - y) = 5/13\n    \n    # From the first equation: y = 3x - 20\n    # Substitute y in the second equation:\n    # (20) / (7x - (3x - 20)) = 5/13\n    # (13 * 20) = 5 * (7x - 3x + 20)\n    # 260 = 5 * (4x + 20)\n    # 260 = 20x + 100\n    # 160 = 20x\n    # x = 8\n    \n    # Now find the original number of red pens:\n    # The original number of red pens is 3x = 3 * 8 = 24 pens\n    \n    # The number of red pens sold is the original number minus the number left:\n    # red pens sold = original red pens - red pens left\n    # red pens sold = 24 - 20\n    \n    red_pens_sold = 24 - 20\n    return red_pens_sold\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    average = 6\n    known_sum = 8 + 3 + 9\n    total_numbers = 4\n    total_sum = average * total_numbers\n\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, ruler = symbols('pen ruler')\n\n    equation1 = Eq(ruler, pen + 0.90)\n    equation2 = Eq(2 * ruler + 9 * pen, 21.60)\n\n    solutions = solve((equation1, equation2), (pen, ruler))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n\n    return -(-total_weight // bag_weight) # Ceiling division\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    final_result = 1126\n    # Reverse operation (8) Add 50 to the final_result\n    reverse_step_8 = final_result + 50\n    # Reverse operation (7) Subtract the day of birth from reverse_step_8\n    # Since the result comes from two numbers (month and day), and the month contribution\n    # was multiplied by 250, the last two digits of reverse_step_8 are the day directly.\n    day_of_birth = reverse_step_8 % 100\n    # Reverse the effect of the month calculation by removing the day\n    reverse_step_7 = reverse_step_8 - day_of_birth\n    # Reverse operation (6) Divide by 5\n    reverse_step_6 = reverse_step_7 / 5\n    # Reverse operation (5) Add 20\n    reverse_step_5 = reverse_step_6 + 20\n    # Reverse operation (4) Divide by 5\n    reverse_step_4 = reverse_step_5 / 5\n    # Reverse operation (3) Subtract 6\n    reverse_step_3 = reverse_step_4 - 6\n    # Reverse operation (2) Divide by 4 to get the month\n    month_of_birth = reverse_step_3 / 4\n\n    # Pack the month and day into a single string in MMDD format\n    ans = (int(month_of_birth), int(day_of_birth))\n    return ans\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_num = int(''.join(perm[0:3]))\n        second_num = int(''.join(perm[3:6]))\n        third_num = int(''.join(perm[6:7] + '0'))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Define first term, last term, and difference for the first half of the sequence\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    # Calculate number of terms in the first half of the sequence\n    num_terms_first_half = (last_term - first_term) // difference + 1\n\n    # Calculate the sum of the arithmetic sequence of the first half\n    sum_first_half = num_terms_first_half * (first_term + last_term) // 2\n\n    # The sequence is symmetrical, so the sum of the second half is equal to the sum of the first half\n    sum_second_half = sum_first_half\n\n    # The total sum is the sum of both halves\n    total_sum = sum_first_half + sum_second_half\n\n    return total_sum\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the first cup\n    cups = 1\n    remaining_money = total_money - initial_price\n\n    # Buy refills with the remaining money\n    refills = remaining_money // refill_price\n    cups += refills\n\n    return cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Number of peaches a single monkey eats in a day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # Total peaches eaten by 5 monkeys in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculate the ways to arrange the groups (story, comic, science)\n    group_arrangements = factorial(3)\n    \n    # Calculate the ways to arrange the books within each group\n    story_arrangements = factorial(2)\n    comic_arrangements = factorial(3)\n    science_arrangements = factorial(4)\n    \n    # Multiply the arrangements within each group by the arrangements of the groups\n    total_arrangements = group_arrangements * story_arrangements * comic_arrangements * science_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    base_tax = 0.06 * 50000\n    additional_tax = 0.01 * T * (income - 50000)\n    \n    tax_paid = base_tax + additional_tax\n    equation = Eq(tax_paid, 10000)\n    \n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total spending in each period\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    # Calculate the total spending for the whole year\n    total_spending = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average per month over the 12 months\n    average_per_month = total_spending / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walk_speed = 40  # m/min\n    cycle_speed = 60  # m/min\n\n    # Let's assume the distance to the library is d meters.\n    # Time to walk to the library is d/walk_speed.\n    # Time to cycle back is d/cycle_speed.\n    # Total distance traveled is 2 * d.\n    # Total time taken is d/walk_speed + d/cycle_speed.\n    \n    # The average speed is total distance divided by total time.\n    # average_speed = (2*d) / (d/walk_speed + d/cycle_speed)\n    \n    # Simplifying the average_speed formula to avoid using the actual distance d which we don't have and don't need.\n    average_speed = (2 * walk_speed * cycle_speed) / (walk_speed + cycle_speed)\n    \n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let the price of one serving of ice cream be x\n    # Sophie wanted to buy 5 servings but was short of $2.30, so the total cost would be 5x - 2.30\n    # Sophie bought 3 servings and had $0.30 left, so the total amount given by her mother is 3x + 0.30\n    # Thus, the equations we have are:\n    # 5x - 2.30 = 3x + 0.30\n    # Solving for x gives us the price for one serving of ice cream.\n    # Once we have x, we can find how much money Sophie's mother gave her.\n\n    x = (2.30 + 0.30) / (5 - 3)\n    money_given = 3*x + 0.30\n    \n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3.5 / (3 * x + 2) + 2 / (1.5 * x + 1), 4.5 / (5 - 6 * x) - 3 / (2.5 - 3 * x))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n\n    # Find the relationship between x and y\n    relationship = solve(equation, y)\n\n    # Find the value of y when x = 3\n    y_value = relationship[0].subs(x, 3)\n\n    return y_value\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend gets at least one ice-cream, we start by giving one to each.\n    remaining_icecreams = 5 - 3\n    \n    # Now we need to distribute the remaining ice-creams to any of the three friends.\n    # This is a combinations problem with repetitions. The formula for combinations with\n    # repetitions is C(n+k-1, k), where n is the number of types of objects to choose from\n    # and k is the number of objects we are choosing.\n    # In this case, we have 3 friends (n) and 2 remaining ice-creams (k).\n    from math import comb\n    \n    # Calculate the number of ways we can distribute the remaining ice-creams.\n    num_ways = comb(remaining_icecreams + 3 - 1, remaining_icecreams)\n    \n    return num_ways\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    perms = permutations('2356')\n    odd_numbers = [int(''.join(p)) for p in perms if int(p[-1]) % 2 != 0]\n    n = min(odd_numbers)\n    \n    return n\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To guarantee at least two of the same color, we need to consider the worst case scenario:\n    # taking out all balls of one color and one more ball which will be of the other color.\n    return 7 + 1  # If we take all green balls and one blue ball, we are sure to have two of the same color.\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we thought of as 'x'\n    x = symbols('x')\n    # Add 3 to the number\n    new_number = x + 3\n    # Multiply by 2\n    new_number *= 2\n    # Take away 2\n    new_number -= 2\n    # Add 10\n    new_number += 10\n    # Divide by 2\n    new_number /= 2\n    # Take away the number we started with (x)\n    new_number -= x\n\n    # Solve the expression\n    ans = new_number.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of bracelets Felicia had initially be F\n    F = symbols('F')\n\n    # After selling 3/5 of her bracelets, Felicia has 2/5 left\n    remaining_F = 2/5 * F\n\n    # Janice initially has 96 bracelets\n    J_initial = 96\n    \n    # If Janice bought 2/5 of what Felicia sold, she bought 2/5 of 3/5 of F\n    bought = (2/5) * (3/5) * F\n\n    # After buying, Janice has her initial amount plus what she bought\n    J_after = J_initial + bought\n\n    # The final ratio of Felicia's to Janice's bracelets is 5:7\n    # So 5/7 of Janice's bracelets after the transaction equals the amount Felicia has left\n    equation = Eq(remaining_F, (5/7) * J_after)\n\n    # Solve the equation for F\n    F_value = solve(equation, F)[0]\n\n    # Calculate the number of bracelets Janice bought from Felicia\n    bracelets_bought = (2/5) * (3/5) * F_value\n\n    return bracelets_bought\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow, floor\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Given number of books and their respective costs\n    num_sf = 20  # number of science fiction books\n    cost_sf = 4  # cost per science fiction book\n\n    num_comic = 10  # number of comic books\n    cost_comic = 5  # cost per comic book\n\n    num_novel = 20  # number of novels\n    cost_novel = 6  # cost per novel book\n\n    # Total cost of all books\n    total_cost = (num_sf * cost_sf) + (num_comic * cost_comic) + (num_novel * cost_novel)\n    \n    # Total number of books\n    total_books = num_sf + num_comic + num_novel\n\n    # Calculating the average cost per book\n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(50, 101))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_numbers = 0\n    \n    # range(10, 1000) because we need three-digit numbers (100-999)\n    for i in range(100, 1000):\n        # Count the number of '7's in the current number\n        if str(i).count('7') >= 2:\n            total_numbers += 1\n            \n    return total_numbers\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # In the worst case, Annabella must take out all shirts that are not yellow\n    # This includes all orange, pink, and brown shirts.\n    # Therefore, to be sure to get 1 yellow shirt,\n    # Annabella must take all shirts except the yellow ones, plus 1 additional shirt.\n\n    orange_shirts = 6\n    pink_shirts = 4\n    brown_shirts = 12\n    # No need to count yellow shirts since we want at least one of them\n\n    # Calculate non-yellow shirts\n    non_yellow_shirts = orange_shirts + pink_shirts + brown_shirts\n\n    # Add one to make sure we get at least one yellow shirt\n    ans = non_yellow_shirts + 1\n\n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    total_individual_cost = 15 * individual_cost\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    remaining = total - 1\n    missing_number = remaining * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    d = 2\n    S_n = 560\n\n    # Using formula: S_n = (n/2) * (2a + (n - 1)d)\n    # S_n = n/2 * (2a + (n - 1) * d)\n    # 2 * S_n = n * (2a + (n - 1) * d)\n    # 2 * S_n = n * (2a + 19 * d) (because n = 20)\n\n    # Now we can solve for a (the first term)\n    a = (2 * S_n - n * (n - 1) * d) / n\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_depth = 8\n    climb_up = 3\n    slip_down = 2\n    net_climb = climb_up - slip_down\n\n    # Calculate the number of full days before the final climb\n    full_days = (total_depth - climb_up) // net_climb\n\n    # The worm will climb up to the surface on the next day\n    final_day = full_days + 1\n\n    return final_day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_first_four_days = 25 * 4\n    pages_following_six_days = 40 * 6\n    pages_last_five_days = 80\n    total_days = 4 + 6 + 5\n    total_pages = pages_first_four_days + pages_following_six_days + pages_last_five_days\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_A = 14\n    birds_B = birds_A + 7\n    total_birds = birds_A + birds_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # The multiplication task can be done directly in python\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    first_term = 1\n    last_term = 50\n    num_terms = 50\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the original number of toys her brother had\n    # Then, Penny had x + 10 toys originally\n    # After giving away some toys, Penny has 14 toys, and her brother has 12 toys\n    # This means Penny gave away (x + 10 - 14) toys\n    # Since her brother now has 12 toys, we have x + (x + 10 - 14) = 12\n    # Simplifying the equation: 2x - 4 = 12\n    # Solving for x: 2x = 16\n    # Therefore, x = 8\n    x = (12 + 4) // 2\n    return x\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Tom could draw 3 cards from each of the 4 suits and not have 4 of any suit,\n    # which is a total of 3 * 4 = 12 cards.\n    # The next card he draws must be of the same suit as one of the previous ones.\n    return 12 + 1\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    sold_percentage = 0.6  # 60%\n    unsold_tickets = 28\n    total_capacity = unsold_tickets / (1 - sold_percentage)\n    \n    return int(total_capacity)\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2/3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let t be the total number of people at the party\n    # Let c be the number of children at the party\n    # t = (3/7)t + c => c = (4/7)t => number of children is (4/7) of the total\n    # Let b be the number of boys, then b = (3/8)c\n    # The number of girls is given as 45, and the rest of the children are girls => c - b = 45\n    # c - (3/8)c = 45\n    # (5/8)c = 45 => c = (45 * 8) / 5\n\n    c = (45 * 8) / 5  # Number of children\n    t = (7 * c) / 4   # Total number of people\n\n    return int(t)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Correctly calculate the total amount from two-dollar notes\n    total_two_dollar_notes = 5 * 2\n    \n    # Correctly calculate the total amount from fifty-cent coins\n    total_fifty_cent_coins = 7 * 0.50\n    \n    # Correctly sum the amounts\n    total_amount = total_two_dollar_notes + total_fifty_cent_coins\n    \n    # Subtract the cost of the file\n    amount_left = total_amount - 11.95\n    \n    return amount_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "from sympy import symbols, lcm\n\ndef solution():\n    # Let the identical numbers for the sums be x, y, z for each sum.\n    # We are given that n = 2010x = 2012y = 2013z\n    # The smallest n that satisfies this is the least common multiple of 2010, 2012, and 2013\n    n = lcm(2010, 2012, 2013)\n    return n\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # total pupils\n    r = 3   # pupils to be seated in a row\n\n    # Calculate the number of ways to seat 3 pupils in a row\n    # which is a permutation of 3 pupils from 18\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    hayden_spent, mitchell_spent = symbols('hayden_spent mitchell_spent')\n    \n    # Hayden's remaining money is 4 times Mitchell's remaining money\n    equation1 = Eq(1420 - hayden_spent, 4 * (505 - mitchell_spent))\n    \n    # They both spend the same amount of money\n    equation2 = Eq(hayden_spent, mitchell_spent)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (hayden_spent, mitchell_spent))\n\n    # Returning the amount they each spent\n    return solutions[hayden_spent]\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    # Number of intervals between ginkgo trees\n    intervals = 30 - 1\n\n    # Number of willow trees per interval\n    willow_per_interval = 2\n\n    # Total number of willow trees\n    total_willow = intervals * willow_per_interval\n\n    return total_willow\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship_still_water = 28\n    speed_current = 3\n    distance_upstream = 150\n\n    effective_speed_upstream = speed_ship_still_water - speed_current\n    \n    time_upstream = distance_upstream / effective_speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x - 4, 26)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost = 7.48 * (500 / 1000)  # Cost of cheese per kg * weight in kg\n    apple_cost = 8 * 12 / 100  # 8 apples at 12 pence each converted to pounds\n    yoghurt_cost = 2 * 46 / 100  # 2 yoghurts at 46 pence each converted to pounds\n\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    change = 10 - total_cost  # Change from a £10 note\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150  # Zack's rate per hour\n\n    # If Andy and Zack work together, they can sell all the aircrafts in 6 hours\n    # This means that their combined rate is 1200 aircrafts / 6 hours = 200 aircrafts per hour\n    combined_rate = total_aircrafts / 6\n\n    # Andy's rate is the combined rate minus Zack's rate\n    andy_rate = combined_rate - zack_rate\n\n    # The time it takes for Andy to sell all the aircrafts by himself is the total divided by his rate\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each friend\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    # Return the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_part = 7\n\n    orange_juice_volume = (orange_part / ratio_sum) * total_volume\n\n    return orange_juice_volume\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B and Carl's weight as C.\n    # We then have the following three equations from the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To find the total weight of Adam, Ben, and Carl (A + B + C), \n    # we can add all three equations together and divide by 2.\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2A + 2B + 2C = 292 \n    # A + B + C = 292 / 2\n\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_money = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_per_day * days_saved\n    money_left = original_money + total_saved - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repaid_mum = 10.50\n    remaining_after_repayment = initial_amount - repaid_mum\n    spent_on_magazines = remaining_after_repayment / 2\n    left_over = remaining_after_repayment - spent_on_magazines\n    \n    return left_over\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # We'll start with the smallest possible square array and increase the size step by step\n    # until we find the difference of 80 between students and teachers.\n    \n    total_people = 0\n    student_count = 0\n    teacher_count = 0\n    \n    # We will use the sequence of odd numbers 1, 3, 5, ... to calculate the number of teachers \n    # and students in each layer. \n    # For a k x k square, the number of students is always 4*(k-1)\n    # and the number of teachers is (k-2)^2 because the teachers form a (k-2) x (k-2) square.\n    \n    # Starting with the smallest possible square which is 3x3 as it needs to have at least one row of students \n    # on the outside and one row of teachers inside.\n    k = 3  # The size of the square\n    \n    while True:\n        # Calculate the number of students and teachers for the current size\n        current_students = 4 * (k - 1)\n        current_teachers = (k - 2)**2\n        \n        # Add the current number of students and teachers to the total\n        student_count += current_students\n        teacher_count += current_teachers\n        total_people += current_students + current_teachers\n        \n        # Check if the difference between students and teachers matches the condition\n        if student_count - teacher_count == 80:\n            break\n        \n        # Move on to the next square size\n        k += 2\n    \n    return total_people\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # 44000 prime factorization\n    prime_factors = factorint(44000)\n\n    # Finding the cube factors by ensuring the exponents are multiples of 3\n    q = 1\n    for base, exponent in prime_factors.items():\n        if exponent % 3 != 0:\n            q *= base ** (3 - (exponent % 3))\n\n    return q\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100\n    coefficient_of_static_friction = 0.4\n    applied_force = 250\n    gravitational_acceleration = 9.81  # standard gravity\n\n    # The maximum static friction force before the object starts moving\n    max_static_friction_force = mass * gravitational_acceleration * coefficient_of_static_friction\n\n    # The actual static friction force is the minimum between the applied force and the maximum static friction.\n    static_friction_force = min(applied_force, max_static_friction_force)\n\n    return static_friction_force\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amounts that Steve, Mark, and Ryan originally have be s, m, and r respectively.\n    s, m, r, cost = symbols('s m r cost')\n\n    # Equations according to the problem statement\n    equation1 = Eq(s - cost, 3 * (m - cost))\n    equation2 = Eq(m - cost, 8 * (r - cost))\n    equation3 = Eq(r - cost, 9 * (s - cost))\n    equation4 = Eq(s, m + 40)\n    equation5 = Eq(s - cost, 5 * (m - cost))\n    equation6 = Eq(m - cost, 4 * (r - cost))\n    equation7 = Eq(r - cost, 1 * (s - cost))\n    equation8 = Eq(s - cost, 10 * (m - cost))\n    equation9 = Eq(r - cost, 9 * (m - cost))\n    equation10 = Eq(m - cost, 1 * (r - cost))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7, equation8, equation9, equation10), (s, m, r, cost))\n\n    return solutions[cost]\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n3 = 23       # 3rd term\n    n15 = 155     # 15th term\n    common_difference = (n15 - n3) / (15 - 3)\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    length, width = symbols('length width')\n\n    # Equations based on the problem statement\n    equation1 = Eq(length, 2 * width)  # Length is twice the width\n    equation2 = Eq(2 * length + 2 * width, 72)  # Perimeter is 72\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (length, width))\n\n    # Return the length from the solutions\n    return solutions[length]\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina_buttons in range(1, 24):\n        james_buttons = 24 - nina_buttons\n        if nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = (11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    climbing_rate = 5\n    sliding_rate = 3\n    net_distance_per_day = climbing_rate - sliding_rate\n    total_distance = 16\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climbing_rate\n        if total_distance <= 0:\n            break\n        total_distance += sliding_rate\n\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    total_length = 81\n    each_length = 3\n    cuts = (total_length // each_length) - 1\n    return cuts\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the symbol for the unknown integer\n    x = symbols('x', integer=True)\n\n    # Define the equation where x is the cube of an integer\n    # and (x + 1) is the square of an integer\n    equation = Eq(sqrt(x + 1)**2, x + 1)\n\n    # We want to find non-negative solutions as we're looking for a square number\n    solutions = solve(equation, x, domain=sympy.S.Naturals0)\n\n    # Since we want the square number, we add 1 to the cube\n    ans = [int(sqrt(solution + 1)**2) for solution in solutions]\n\n    return ans[0]  # Return the first (and possibly only) solution\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n    \n    ans = max(fraction_value, decimal_value)\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_paid = 275\n\n    max_short_term_days = 5\n    total_short_term_cost = max_short_term_days * daily_fee_short\n\n    if total_paid <= flat_fee + total_short_term_cost:\n        days = (total_paid - flat_fee) / daily_fee_short\n    else:\n        days = max_short_term_days + (total_paid - flat_fee - total_short_term_cost) / daily_fee_long\n\n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # 1 dog = 8 rabbits\n    dog_to_rabbit_ratio = 8\n    # 1 rabbit = 2 chickens\n    rabbit_to_chicken_ratio = 2\n\n    # Find the equivalent weight in chickens for one dog\n    dog_to_chicken_ratio = dog_to_rabbit_ratio * rabbit_to_chicken_ratio\n\n    return dog_to_chicken_ratio\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i+1))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height  # first drop from initial height\n    \n    while initial_height > 0:\n        rebound_height = initial_height * rebound_ratio\n        total_distance += 2 * rebound_height  # going up and coming down\n        initial_height = rebound_height\n        \n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Since we're summing the numbers on the four pages of a single sheet,\n    # and the booklet is folded in half, we know the pages are consecutive,\n    # and they follow the pattern N, N+1, N+2, N+3, where N is the number on the first page of the sheet.\n    # If the sum is 58, then the average number on the four pages is 58 / 4 = 14.5, which means\n    # the middle two numbers (N+1 and N+2) average to 14.5. Therefore, N+1 = 14 and N+2 = 15.\n    # Thus N, the number on the first page of the sheet, is 14 - 1 = 13.\n\n    first_page_number = 14 - 1\n    \n    # Since the booklet is folded in half, each sheet of paper contributes two pages,\n    # so each sheet of paper will have two numbers printed on it.\n    # We find the number of the last page on this sheet, which will be 13 + 3 = 16.\n\n    last_page_number = first_page_number + 3\n    \n    # Because the booklet is folded in half, the last number (16) corresponds to the last sheet.\n    # As such, the last sheet's number is half of the last page number.\n\n    last_sheet_number = last_page_number // 2\n\n    # This is the number of sheets since the numbering starts from 1.\n    return last_sheet_number\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from math import gcd\n\ndef solution():\n    # Alpha's accuracy rates and total points received\n    alpha_day1_accuracy = 160 / 300\n    alpha_day2_accuracy = 140 / 200\n    alpha_total_points = 160 + 140\n\n    # Alpha's average accuracy rate\n    alpha_avg_accuracy = alpha_total_points / 500  # given as 3/5\n\n    # Initialize maximum average accuracy for Beta\n    beta_max_avg_accuracy = 0\n    beta_optimal_day1_points = 0\n    beta_optimal_day1_full_score = 0\n\n    # Beta's full score for the first day cannot be 300 and has to be less than 500\n    for beta_day1_full_score in range(1, 500):\n        if beta_day1_full_score == 300:  # Skip the full score of 300 for the first day\n            continue\n\n        # Loop through possible scores for the first day\n        for beta_day1_points in range(1, min(beta_day1_full_score, 160)):\n            # Calculate Beta's accuracy rate for the first day\n            beta_day1_accuracy = beta_day1_points / beta_day1_full_score\n            \n            # Skip if Beta's accuracy is not less than Alpha's on the first day\n            if beta_day1_accuracy >= alpha_day1_accuracy:\n                continue\n\n            # Calculate Beta's remaining points for the second day\n            beta_day2_full_score = 500 - beta_day1_full_score\n            beta_day2_points = 500 - 300 - beta_day1_points  # Beta must score the same total points as Alpha\n            \n            # Calculate Beta's accuracy rate for the second day\n            beta_day2_accuracy = beta_day2_points / beta_day2_full_score\n            \n            # Skip if Beta's accuracy is not less than Alpha's on the second day\n            if beta_day2_accuracy >= alpha_day2_accuracy:\n                continue\n            \n            # Calculate Beta's average accuracy\n            beta_avg_accuracy = (beta_day1_points + beta_day2_points) / 500\n            \n            # Update the maximum average accuracy for Beta if better\n            if beta_avg_accuracy > beta_max_avg_accuracy:\n                beta_max_avg_accuracy = beta_avg_accuracy\n                beta_optimal_day1_points = beta_day1_points\n                beta_optimal_day1_full_score = beta_day1_full_score\n\n    # Calculate the reduced fraction m/n for Beta's maximum average accuracy\n    beta_gcd = gcd(int(beta_max_avg_accuracy * 500), 500)\n    m = int(beta_max_avg_accuracy * 500) // beta_gcd\n    n = 500 // beta_gcd\n\n    return m + n\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initial condition: green = yellow\n    equation1 = Eq(green, yellow)\n\n    # After giving away cars: green-60, yellow-14\n    # End condition: yellow - 14 = 3 * (green - 60)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Green toy cars left in the end: green - 60\n    green_in_the_end = solutions[green] - 60\n\n    return green_in_the_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n    total_distance = 3000  # metres\n\n    buck_time = total_distance / buck_speed\n    elephant_time = total_distance / elephant_speed\n\n    difference_in_time = elephant_time - buck_time\n\n    return difference_in_time\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_forward = (num_terms / 2) * (first_term + last_term)\n    \n    sum_backward = sum_forward\n\n    total_sum = sum_forward + sum_backward\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # Cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7 : 3\n    # Let cost of 1 pen be 7x and cost of 1 pencil be 3x\n    # cost_of_1_pen = (7/3) * cost_of_1_pencil\n    cost_of_1_pen = (7/3) * cost_of_1_pencil\n    # Cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_1_pen\n    return round(cost_of_5_pens, 2)\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    foods = 3   # hamburger, burrito, bagel\n\n    combinations = drinks * foods\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initialize a list to keep track of locker states\n    lockers = [False] * 101  # We use 101 because locker numbers start from 1\n\n    # Boys whose locker numbers are divisible by 3 will lock their lockers\n    for i in range(1, 101):\n        if i % 3 == 0:\n            lockers[i] = True\n\n    # Boys whose locker numbers are divisible by 5 will toggle their lockers\n    for j in range(1, 101):\n        if j % 5 == 0:\n            lockers[j] = not lockers[j]\n    \n    # Count how many lockers are unlocked at the end\n    unlocked_lockers = sum(not locker for locker in lockers[1:])\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n            \n    # Function to calculate combinations (nCk)\n    def nCk(n, k):\n        return factorial(n) // (factorial(k) * factorial(n-k))\n    \n    # The problem is split into two stages:\n    # 1. Ways to reach the 5th step\n    # 2. Ways to reach the 10th from the 5th step\n    \n    # Stage 1: Since Nelson must step on the 5th step, we count the number of ways to reach it\n    # He can take either 3 one-steps and a two-step in any order (4C1) or 1 one-step and 2 two-steps (3C1)\n    stage1_ways = nCk(4, 1) + nCk(3, 1)\n    \n    # Stage 2: Now, Nelson has 5 steps remaining, there can be various combinations to reach the 10th step\n    # He can take five one-steps (5C0), three one-steps and a two-step in any order (4C1), or\n    # one one-step and two two-steps in any order (3C1), or only two-steps (2C2)\n    stage2_ways = nCk(5, 0) + nCk(4, 1) + nCk(3, 1) + nCk(2, 2)\n    \n    # Total ways would be the product of stage1 and stage2 ways\n    total_ways = stage1_ways * stage2_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    # Time taken to cook each pancake\n    time_per_pancake = 3 / 2\n    \n    # Total time available for cooking pancakes\n    total_time = 12\n    \n    # Number of pancakes that can be cooked in the total time\n    num_pancakes = total_time / time_per_pancake\n    \n    return int(num_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The fastest two (Jason and Chi Yew) go first: 5 minutes\n    time = 5\n    # One goes back: 5 minutes\n    time += 5\n    # The slowest two (Wei Jie and Michael) cross: 9 minutes\n    time += 9\n    # Fastest (Jason or Chi Yew) goes back: 5 minutes\n    time += 5\n    # The fastest two (Jason and Chi Yew) cross again: 5 minutes\n    time += 5\n    \n    return time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of the road in meters\n    total_days = 5  # total number of days to pave the road\n\n    meters_per_day = total_length / total_days  # meters paved in one day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_same_country = 9\n    \n    min_participants = (people_same_country - 1) * countries + 1\n    return min_participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Reflect point A over the y-axis to get point B\n    A = (-7, -2)\n    B = (-A[0], A[1])\n\n    # Rotate point B 90 degrees counterclockwise about the origin to get point C\n    C = (-B[1], B[0])\n\n    # Calculate slope of line AC\n    slope_AC = (C[1] - A[1]) / (C[0] - A[0])\n\n    # Calculate y-intercept of line AC (since D is on the y-axis, its x-coordinate is 0)\n    y_intercept_AC = A[1] - slope_AC * A[0]\n\n    # The y-coordinate of D is the y-intercept of line AC\n    d = y_intercept_AC\n    \n    return d\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra wrote 88 by mistake and got 22 as the result\n    wrong_dividend = 88\n    wrong_result = 22\n    \n    # Calculate the divisor using the wrong result\n    A = wrong_dividend / wrong_result\n\n    # Use the correct dividend to calculate the correct result\n    correct_dividend = 98\n    correct_result = correct_dividend / A\n\n    return int(A), correct_result\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four = 32\n    cost_of_one = cost_of_four / 4\n    cost_of_twelve = cost_of_one * 12\n    return cost_of_twelve\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time in hours after 6:10 PM when Simon overtakes his wife\n    t = symbols('t')\n\n    # Simon's distance = speed of Simon * time\n    simon_distance = 80 * t\n\n    # Wife's distance = (speed of wife * time) + initial distance between the offices\n    wife_distance = 60 * t + 15\n\n    # Equation where Simon overtakes his wife (distances are equal)\n    equation = Eq(simon_distance, wife_distance)\n\n    # Solve the equation\n    t_value = solve(equation, t)[0]\n    \n    # Calculate the overtaking time in hours and minutes\n    overtaking_time_hours = int(t_value)  # get the hour part\n    overtaking_time_minutes = int((t_value - overtaking_time_hours) * 60)  # convert the decimal part into minutes\n\n    # Initial time is 6:10 PM. We add the time Simon takes to overtake his wife.\n    initial_hour = 18  # because 6 PM is 18:00 in 24-hour format\n    initial_minutes = 10\n    final_hour = initial_hour + overtaking_time_hours\n    final_minutes = initial_minutes + overtaking_time_minutes\n\n    # In case the minutes exceed 60, adjust the hour and minutes accordingly\n    if final_minutes >= 60:\n        final_hour += final_minutes // 60\n        final_minutes %= 60\n\n    # Format final time in HH:MM format\n    ans = \"{:02d}:{:02d}\".format(final_hour, final_minutes)\n\n    return ans\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps per 6 minutes\n    lucas_speed_laps_per_min = 5 / 6\n    # Miller's speed is 5 laps per 10 minutes\n    miller_speed_laps_per_min = 5 / 10\n\n    # Relative speed between Lucas and Miller in laps per minute\n    relative_speed_laps_per_min = lucas_speed_laps_per_min - miller_speed_laps_per_min\n\n    # Time taken for Lucas to overtake Miller once is the time \n    # taken for Lucas to complete one more lap than Miller\n    time_to_overtake_once = 1 / relative_speed_laps_per_min\n\n    # Lucas overtakes Miller every time this time period elapses\n    return time_to_overtake_once\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # When rounded off to the nearest $10, the greatest amount possible\n    # before rounding would be just below the next multiple of 10.\n    # So, we subtract 1 from the next multiple of 10.\n    \n    rounded_amount = 1670\n    greatest_amount = (rounded_amount // 10) * 10 + 9\n    \n    return greatest_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    ans = hours * minutes_per_hour\n    return ans\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    # Let total number of visitors be x\n    # Number of children is 3/5 of x\n    # Remaining visitors are x - (3/5)*x = (2/5)*x\n    # Number of men is 1/4 of the remaining visitors, so (1/4)*(2/5)*x\n    # We know that there are 120 more children than men\n    # So, (3/5)*x - (1/4)*(2/5)*x = 120\n    # Need to solve for x.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3/5)*x - (1/4)*(2/5)*x, 120)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 0.80\n    additional_charge = 0.05\n    total_cost = 1.40\n    base_time = 15\n    additional_time = (total_cost - base_charge) / additional_charge\n    total_time = base_time + additional_time\n    return int(total_time)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    mother_age_at_that_time = 54\n    years_until_tim_is_as_old_as_his_mother_now = mother_age_at_that_time - tim_age_now\n    mother_age_now = tim_age_now + years_until_tim_is_as_old_as_his_mother_now\n    return mother_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Length of the orange string in meters\n    orange_string_length_m = 5.52\n    # Converting the orange string length to centimeters for consistency\n    orange_string_length_cm = orange_string_length_m * 100\n    # The orange string is 9.2 times the length of the purple string\n    purple_string_length_cm = orange_string_length_cm / 9.2\n    # The green string is 24.9 cm longer than the purple string\n    green_string_length_cm = purple_string_length_cm + 24.9\n    # Converting the green string length to meters\n    green_string_length_m = green_string_length_cm / 100\n    return green_string_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # This is a classic algebra problem where A, B, C, D are digits in:\n    #   A\n    # + B A\n    # -----\n    #   C B A\n    # Since A + A ends with A, A must be 0 or 5.\n    # If A were 0, B + 0 = B would not carry over to the hundreds place.\n    # Therefore, A must be 5 for B + 5 to carry over a 1 to the hundreds place.\n    return 5\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    ans = len([x for x in range(1, 100) if x % 2 == 0 and x % 5 == 0])\n    return ans\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorter_piece, longer_piece = symbols('shorter_piece longer_piece')\n    equation1 = Eq(longer_piece, 5 * shorter_piece)\n    equation2 = Eq(shorter_piece + longer_piece, 49.5)\n    \n    solutions = solve((equation1, equation2), (shorter_piece, longer_piece))\n    \n    return round(solutions[longer_piece], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_drink = 36\n    apple_juice_ratio = 4\n\n    apple_juice = (apple_juice_ratio / total_ratio) * total_drink\n\n    return apple_juice\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # Normally, 20% of x are Year 7 pupils, which is 0.20 * x\n    # When some Year 7 girls miss school, there are 400 pupils left\n    # Of those, 10% are Year 7 pupils now, which is 0.10 * 400 = 40\n    # The number of Year 7 pupils missing is 0.20 * x - 40\n    # The sum of remaining pupils and missing Year 7 pupils is equal to x (the original total)\n    # 400 + 0.20 * x - 40 = x\n    # Simplifying the equation: 360 = 0.80 * x\n    # Dividing both sides by 0.80 to find x\n    \n    x = 360 / 0.80\n    return int(x)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_distance = 4\n    slide_distance = 1\n    total_distance = 0\n    day = 1\n\n    while True:\n        total_distance += climb_distance\n        if total_distance >= well_height:\n            break\n        total_distance -= slide_distance\n        day += 1\n\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy completes the book in 6 days, so her per day work is 1/6\n    nancy_per_day_work = 1/6\n    \n    # Together they complete the book in 4 days, so their combined per day work is 1/4\n    combined_per_day_work = 1/4\n\n    # Tim's per day work is the combined work minus Nancy's work\n    tim_per_day_work = combined_per_day_work - nancy_per_day_work\n    \n    # Tim completes the book in x days, so his per day work is 1/x\n    # Therefore, 1/x equals to Tim's per day work\n    tim_days = 1 / tim_per_day_work\n    \n    return tim_days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    deposit = 5\n    spend = 8\n    days_cycle = 2  # deposit and spend cycle repeats every 2 days\n\n    # Calculate full cycles within the 15 day period\n    full_cycles = total_days // days_cycle\n\n    # Compute the amount after full cycles (each cycle is deposit - spend)\n    cycle_effect = (deposit - spend) * full_cycles\n    remaining_money = pocket_money + cycle_effect\n\n    # Check if there's an odd day out and add the effect\n    if total_days % days_cycle == 1:\n        remaining_money += deposit\n\n    return remaining_money\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Kevin and Ivy's work rates per day\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    \n    # Total work done when they both work for 18 days\n    total_full_work = (ivy_rate + kevin_rate) * 18\n    \n    # Since it is mentioned that the job is finished by the 18th day,\n    # total work done should be equal to 1 (complete job).\n\n    # Let's denote the number of days Kevin took off as 'k_days_off'.\n    # Now, the actual work done should be equal to the work done by Ivy for 18 days\n    # plus the work done by Kevin for (18 - k_days_off) days.\n    # Set up the equation: Ivy's work + Kevin's reduced work = total work done\n    # (ivy_rate * 18) + (kevin_rate * (18 - k_days_off)) = 1\n\n    # Rearrange the equation to solve for k_days_off\n    k_days_off = (1 - (ivy_rate * 18)) / kevin_rate\n\n    # The number of days Kevin worked\n    kevin_work_days = 18 - k_days_off\n\n    return k_days_off\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12  # Create a string with 12 repeating '3's\n    number = int(number_str)  # Convert the string into an integer\n    remainder = number % 7  # Find the remainder when the number is divided by 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    numerator = 99\n    row = numerator + 1\n    return row\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the pattern for the denominators\n    denom_pattern = lambda i: (i * (i + 1)) // 2\n\n    # Initialize the sum\n    total = 0\n\n    # Calculate each term and add to the total sum\n    for i in range(1, 7):\n        denominator = denom_pattern(i) * denom_pattern(i+1)\n        total += i / denominator\n\n    # Add the last term\n    total += 1 / denom_pattern(7)\n\n    return total\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_money_after_shoes = 40\n    money_after_dress = remaining_money_after_shoes / (2/5)\n    initial_money = money_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def trailing_zeros_factorial(n):\n    i = 5\n    zeros = 0\n    while (n // i >= 1):\n        zeros += n // i\n        i *= 5\n    return zeros\n\ndef solution():\n    zeros_999 = trailing_zeros_factorial(999)\n    zeros_300 = trailing_zeros_factorial(300)\n    ans = zeros_999 - zeros_300\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Each layer forms a square, with the outermost layer having 60 students per side.\n    # Find the total number of layers by considering the number of students along the outer edge.\n    # Each layer inward would have 2 fewer students per side (one from each end).\n    side_length = 60\n    total_students = 0\n\n    while side_length > 0:\n        total_students += side_length ** 2\n        side_length -= 2  # Move inward to the next layer\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import solve, symbols\n    \n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    equation1 = cars - 4 / 3 * bikes\n    equation2 = bikes - 5 / 4 * lorries\n    equations = [cars + bikes + lorries < 100,\n                 (cars + bikes + lorries) % 2 == 0,\n                 equation1, equation2]\n\n    for l in range(1, 100):\n        for b in range(1, 100):\n            for c in range(1, 100):\n                if all([eq.subs({cars: c, bikes: b, lorries: l}).is_zero or\n                        eq.subs({cars: c, bikes: b, lorries: l}) for eq in equations]):\n                    return c, b, l\n    return \"No solution\"\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of buttons in box B be b\n    # Then the original number of buttons in box A is b + 64\n    # Ken added some buttons to A and removed twice that amount from B\n    # Let the number of buttons Ken added to A be x\n    # Then he removed 2x buttons from B\n    # The new number of buttons in box B is b - 2x\n    # The new number of buttons in box A is b + 64 + x\n    # The new total number of buttons is b + 64 + x + b - 2x = 2b + 64 - x\n    # The ratio of the total number to the buttons in B is 4:1\n    # So, (2b + 64 - x) : (b - 2x) = 4 : 1\n    # Additionally, b - 2x is 28 fewer than the original b\n    # So, b - 2x = b - 28 and thus 2x = 28\n    # We solve these equations to find the value of b\n\n    b, x = symbols('b x')\n    equation1 = Eq(4 * (b - 2*x), 2*b + 64 - x)\n    equation2 = Eq(2*x, 28)\n    solutions = solve((equation1, equation2), (b, x))\n\n    # The number of buttons in box A at first is b + 64\n    buttons_in_A_at_first = solutions[b] + 64\n\n    return buttons_in_A_at_first\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    remaining_tiles = total_tiles\n    red_tiles = green_tiles = 0\n\n    while remaining_tiles > 0:\n        layer_size = (layer * 2 + 1) ** 2\n        next_layer_size = (layer * 2 + 3) ** 2\n        layer_tiles = next_layer_size - layer_size\n\n        if remaining_tiles >= layer_tiles:\n            if layer % 2 == 0:\n                red_tiles += layer_tiles\n            else:\n                green_tiles += layer_tiles\n        else:\n            if layer % 2 == 0:\n                red_tiles += remaining_tiles\n            else:\n                green_tiles += remaining_tiles\n\n        remaining_tiles -= layer_tiles\n        layer += 1\n    \n    if red_tiles > green_tiles:\n        color = 'red'\n        difference = red_tiles - green_tiles\n    else:\n        color = 'green'\n        difference = green_tiles - red_tiles\n    \n    return (color, difference)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    ans = 764 * 7\n    return ans\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    total_rounds = 12\n    \n    # Let x be the number of rounds won, y be the number of rounds lost.\n    # Since there are 12 rounds in total, we have the equation x + y = 12\n    # We also have the equation 4x - 2y = 24, since for each win she gains 4 cards,\n    # and for each loss she loses 2 cards.\n    \n    # Solve for x and y\n    for y in range(total_rounds+1):\n        x = total_rounds - y\n        if (4*x - 2*y == total_cards):\n            return y  # Return the number of rounds lost\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    distance = 300\n    interval = 10\n\n    # Since bins are placed at each end, subtract the length of the last interval\n    number_of_bins = (distance // interval) + 1\n\n    return number_of_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    for n in range(1, 1000):  # Start with reasonable upper limit\n        number = int(\"26\" + \"2011\" * n + \"7\")\n        if number % 33 == 0:\n            return n\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour = flour_per_cake * number_of_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    from math import comb\n\n    # Initialize the number of lollipops and plates\n    lollipops = 7\n    plates = 3\n\n    # Initialize the counter for the number of ways\n    number_of_ways = 0\n\n    # Use a generating function approach\n    # For 3 identical plates and n number of lollipops, the number of ways follow a stars and bars combination formula: comb(n+plates-1, plates-1)\n    number_of_ways = comb(lollipops + plates - 1, plates - 1)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    cuts_needed_for_8_pieces = 7\n    time_per_cut = 3 / (4 - 1)\n    total_time = time_per_cut * cuts_needed_for_8_pieces\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    equation1 = Eq(chai_seng - rasidah, 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), rasidah * (1 - 3/5) / 2)\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single unit, then there are 7 units to arrange\n    units = 7\n    arrangements_of_units = factorial(units - 1)  # (n - 1)! for circular arrangements\n    \n    # Amy and Judy can switch places with each other, providing 2! arrangements\n    arrangements_of_amy_judy = factorial(2)\n    \n    # Multiply the two to get the total arrangements\n    total_arrangements = arrangements_of_units * arrangements_of_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_start, ben_start = symbols('andy_start ben_start')\n\n    # Equation based on the initial difference in cookies\n    equation1 = Eq(ben_start - andy_start, 84)\n\n    # Equations based on the cookies each person has after buying more\n    equation2 = Eq(andy_start + (andy_start / 3), 1/3 * (ben_start + (ben_start / 5)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_start, ben_start))\n\n    # Calculate the number of cookies Andy has in the end\n    andy_end = solutions[andy_start] + (solutions[andy_start] / 3)\n\n    return andy_end\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # Initial number of coins for players X, Y, Z\n    discard = 0           # Coins in the discard pile\n    rounds = 0            # Number of rounds played\n    \n    # Play rounds until one of the players runs out of coins\n    while x > 0 and y > 0 and z > 0:\n        # Player with the most coins gives one coin to each of the other two players\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y >= x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        else:  # z >= x and z >= y\n            z -= 3\n            x += 1\n            y += 1\n        \n        discard += 1  # One coin is placed into the discard pile\n        rounds += 1   # Increment round\n    \n    return rounds\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1/i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    amount = 37100\n    rate = 1.5 / 100\n    years_claimed = 5\n\n    final_amount = principal * ((1 + rate) ** years_claimed)\n\n    if final_amount == amount:\n        return True\n    else:\n        # We need to solve for t in the compound interest formula A = P(1 + r)^t\n        # where A is the amount after t years, P is the principal, and r is the interest rate per year.\n        # A = P(1 + r)^t -> t = log(A/P) / log(1 + r)\n        from math import log\n        actual_years = log(amount / principal) / log(1 + rate)\n        return round(actual_years)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sequence = [18, -16, 19, -15]\n    while len(sequence) < 6:\n        next_term = sequence[-2] + 1 if len(sequence) % 2 == 0 else sequence[-2] - 1\n        sequence.append(next_term)\n    return sequence[-1]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the four numbers\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n\n    # Define the equations based on the given information\n    equation1 = Eq(d + (a + b + c) / 3, 39)  # Sum of the smallest and average of the rest\n    equation2 = Eq(a + (b + c + d) / 3, 51)  # Sum of the largest and average of the rest\n    equation3 = Eq(a, b + c + d - 39 * 3)    # Expanding equation 1\n    equation4 = Eq(d, 51 * 3 - b - c - a)    # Expanding equation 2\n\n    # We want to maximize the value of 'a', the largest number,\n    # so we can solve for 'd' from equation 3 and substitute in equation 4 to find 'a'\n    \n    # Solve equation 3 for 'd'\n    solutions_d = solve(equation3, d)\n    # Substitute 'd' from equation 3 into equation 4 and solve for 'a'\n    solutions_a = solve(equation4.subs(d, solutions_d[0]), a)\n\n    # Since we want the largest possible value, we take the maximum of the solutions\n    max_a = max(solutions_a)\n\n    return max_a\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n    \n    return int(new_denominator)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # For simplicity, represent all 2-digit integers divisible by 24\n    div_24 = set(range(24, 100, 24))\n    \n    # Iterate through all 2-digit integers to find possible numbers\n    for num in range(10, 100):\n        # Create a set of hypothetical numbers Tom could have seen, excluding 'num'\n        other_nums = set(range(10, 100)) - {num}\n\n        # Condition 1: 4 students know if their number is (not) divisible by Mr. Tan's number\n        # Since Tom raised his hand, Tom's number is either divisible or not divisible by Mr. Tan's number\n        # Check all the divisors of Tom's number (excluding 1)\n        divisors = [i for i in range(2, num//2+1) if num % i == 0]\n        # The count of other numbers divisible by these divisors should be either 3 or 5\n        count_condition1 = False\n        for div in divisors:\n            count_divisible = sum(1 for other in other_nums if other % div == 0)\n            if count_divisible == 3 or count_divisible == 5:\n                count_condition1 = True\n                break\n        \n        # Condition 2: 6 students know if their number is (not) divisible by 24\n        # Thus, there must be 3 numbers from the other numbers that are divisible by 24 (since Tom's is too)\n        count_condition2 = sum(1 for other in other_nums & div_24) == 3\n\n        # If both conditions are satisfied, we found Tom's number \n        # and can find sum of the numbers Tom saw on his friends' hats\n        if count_condition1 and count_condition2:\n            return sum(other_nums - div_24)\n\n    return None  # If no solution is found\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils who passed at least one test\n    total_passed = 43\n\n    # Pupils passing each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Using the inclusion-exclusion principle: At most, the number of students who passed all the tests\n    # is the sum of students passing each test minus the total number of students who passed at least one test,\n    # since the total includes those who passed more than one test.\n\n    # Maximum pupils passing all three tests\n    max_all_three = (passed_math + passed_science + passed_english) - total_passed\n    \n    # It cannot be negative, so we take max with 0\n    max_all_three = max(max_all_three, 0)\n    \n    return max_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    ahmad_speed = 80  # meters per minute\n    brother_speed = 50  # meters per minute\n\n    # When Ahmad met his younger brother, Ahmad traveled for t minutes\n    # and his younger brother traveled for t + (210 / brother_speed) minutes.\n    # Both of them cover the same distance from home to the meeting point.\n\n    # Ahmad's distance: ahmad_speed * t\n    # Brother's distance: brother_speed * (t + (210 / brother_speed))\n\n    # Since Ahmad reached school (distance from home) and came back 210 meters:\n    # ahmad_speed * t = distance - 210\n\n    # Set up the equation and solve for distance\n    equation = Eq(ahmad_speed * symbols('t'), brother_speed * (symbols('t') + (210 / brother_speed)))\n    equation = equation.subs(symbols('t'), (distance - 210) / ahmad_speed)\n\n    solution = solve(equation, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    # Since the cases cannot be empty, each case gets at least 1 pen.\n    # So we start by seeding each case with 1 pen.\n    # We then distribute the remaining pens (6 - 3 = 3 pens) to the cases.\n    for case1 in range(1, 6):  # case1 can take 1-5 pens, leaving at least one for each of the other cases\n        for case2 in range(1, 6 - case1): # case2 takes pens leaving at least 1 for case3\n            # case3 will take the remaining pens, and we need not loop for it.\n            # The condition case1 + case2 + case3 == 6 will always be met.\n            case3 = 6 - case1 - case2\n            if case3 > 0:  # All cases are non-empty.\n                count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator_1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator_1 = 2/25\n    # Compute the first complex fraction\n    complex_fraction_1 = numerator_1 / denominator_1\n\n    # Calculate the numerator of the second complex fraction\n    numerator_2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator_2 = 8/3\n    # Compute the second complex fraction\n    complex_fraction_2 = numerator_2 / denominator_2\n\n    # Sum the two complex fractions\n    ans = complex_fraction_1 + complex_fraction_2\n\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_eight_value = 8 * 1000  # The place value of the first 8 is in the thousands\n    second_eight_value = 8 * 100  # The place value of the second 8 is in the hundreds\n\n    difference = first_eight_value - second_eight_value\n    return difference\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy import lcm, solve\n    from sympy.abc import x\n\n    # Step 1: Find the common supplement - the common remainder\n    common_remainder = -1  # Since it's the remainder subtracted from each divisor\n\n    # Step 2: Find the LCM of all the divisors\n    divisors_lcm = lcm([5, 6, 11])\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # Solve the equation set for x based on the given conditions\n    equations = [x % 5 == 1, x % 6 == 2, x % 11 == 7]\n    biscuit_count = solve(equations, x)\n\n    # Since we want a number less than 500, we filter out solutions above 500\n    for solution in biscuit_count:\n        if solution < 500:\n            return solution\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num = 40309\n    adder = 0\n    while not is_palindrome(num + adder):\n        adder += 1\n\n    return adder\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    ans = initial_cards - duplicates + new_cards\n    return ans\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length1 = 16\n    length2 = 24\n\n    ans = gcd(length1, length2)\n\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    position_from_front = 7\n    sheep_behind = 4\n\n    total_sheep = position_from_front + sheep_behind\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    target_earnings = 270\n\n    hours_needed = target_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # A palindromic number with 5 digits can be represented as ABCBA\n    # Since it is a multiple of 45, it's also a multiple of 9 and 5\n    # One property of multiples of 9 is that the sum of their digits is a multiple of 9\n    # For 5-digit number to be a multiple of 5, the last digit must be 0 or 5\n    # Since the number is palindromic and has 5 digits, last digit can't be 0 or it wouldn't be a 5-digit number\n    # Therefore, last digit must be 5: The possible format is AB5BA\n    # Now we find the largest and smallest numbers following this pattern\n\n    # Finding the largest palindromic multiple of 45:\n    # Starting with A = 9 (largest possible digit), we decrement A until we find a valid number\n    for A in range(9, -1, -1):\n        # Sum of digits must be a multiple of 9, and B can't be more than 9\n        for B in range(9, -1, -1):\n            # The sum of digits is A + B + 5 (middle digit) + B + A\n            if (2 * A + 2 * B + 5) % 9 == 0:\n                largest = int(f\"{A}{B}5{B}{A}\")\n                break\n        if 'largest' in locals():\n            break\n\n    # Finding the smallest palindromic multiple of 45:\n    # Starting with A = 1 (smallest non-zero digit)\n    for A in range(1, 10):\n        # B can be zero for the smallest number, so we start with B = 0\n        for B in range(10):\n            # The sum of digits should be a multiple of 9\n            if (2 * A + 2 * B + 5) % 9 == 0:\n                smallest = int(f\"{A}{B}5{B}{A}\")\n                break\n        if 'smallest' in locals():\n            break\n            \n    return largest - smallest\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    top_3_mean = 92\n    top_3_total = top_3_mean * 3\n\n    # Let x be the mean score of all students\n    # Then the mean score of the last 7 students is x - 6\n    # We can set up an equation: top_3_total + (x - 6) * 7 = x * 10\n\n    x = symbols('x')\n    equation = Eq(top_3_total + (x - 6) * 7, x * 10)\n    all_mean = solve(equation, x)\n\n    return all_mean[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = sorted(str(year))\n        if digits[0] != digits[1] and digits[1] != digits[2] and digits[2] != digits[3]:\n            # check consecutive digits\n            if all((int(digits[i+1]) - int(digits[i])) == 1 for i in range(len(digits)-1)):\n                # check all possible permutations to account for non-sequential order\n                if any(list(permutation) == digits for permutation in permutations(str(year))):\n                    lucky_years += 1\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = bags.copy()\n        x_bags.remove(red_marbles)\n        for jaslin_bags in combinations(x_bags, 3):\n            george_bags = set(x_bags) - set(jaslin_bags)\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the five consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # Their sum is 5x + 20\n    # We have 5x + 20 = 100\n    # Solving for x gives us x = (100 - 20) / 5\n    \n    x = (100 - 20) / 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed_per_hour = 550 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - (2 / 5)\n    total_apples = 150 / remaining_fraction\n    return total_apples\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    # Count the total number of permutations and even permutations\n    total_even = 0\n    total_perm = 0\n    \n    # Iterate over all permutations of the blocks\n    for p in permutations('RRBBYYGGOOPP'):\n        # Count only distinct permutations\n        if len(set(p)) == len(p)//2:\n            total_perm += 1\n            # Check if it is an even arrangement\n            if all(abs(p.index(color) - p.index(color, p.index(color) + 1)) % 2 == 1 for color in 'RBGYOP'):\n                total_even += 1\n    \n    # Simplify the fraction m/n\n    divisor = gcd(total_even, total_perm)\n    m = total_even // divisor\n    n = total_perm // divisor\n\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance = (15 - 1) * 3\n    return distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates of fill per minute for A and B\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n    \n    # Time cycle is 7 minutes (1 for A, 2 for B, 2 for A, 1 for B, 1 for A)\n    cycle_time = 7\n    \n    # Total fill rate for each cycle\n    cycle_rate = (1 * rate_A + 2 * rate_B + 2 * rate_A + 1 * rate_B)\n    \n    # How much of the pool is filled in one cycle\n    cycle_fill = cycle_time * cycle_rate\n\n    # Find how many complete cycles are needed to nearly fill the pool\n    cycles_needed = 1 / cycle_fill\n\n    # Calculate full cycles\n    full_cycles = int(cycles_needed)\n\n    # Time for full cycles to fill pool\n    time_full_cycles = full_cycles * cycle_time\n    \n    # Remaining part of the pool to fill after full cycles\n    remaining_fill = 1 - (full_cycles * cycle_fill)\n    \n    # Check how much time it takes to fill remaining pool\n    rem_time = 0\n    current_rate = rate_A\n    switch_rate = False\n    time_switch = [1, 2]  # Time after which the rate is switched\n    switch_count = 1       # Counter for switching between A and B\n\n    while remaining_fill > 0:\n        remaining_fill -= current_rate\n        rem_time += 1\n        if rem_time == time_switch[switch_count % 2]:  # Switch the rate as per cycle pattern\n            switch_count += 1\n            rem_time = 0\n            switch_rate = not switch_rate\n            current_rate = rate_B if switch_rate else rate_A\n\n    # Total time to fill the pool is the time taken for full cycles plus the remaining time\n    total_time = time_full_cycles + (switch_count // 2) * cycle_time + (1 if rem_time > 0 else 0)\n\n    return total_time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Alan and Bob together paint rate\n    together_rate = 1 / 4\n    # Bob on his own paint rate\n    bob_rate = 1 / 6\n    # Alan on his own paint rate (Alan and Bob rate minus Bob rate)\n    alan_rate = together_rate - bob_rate\n    # Time taken by Alan to paint on his own is the reciprocal of Alan's rate\n    alan_time = 1 / alan_rate\n\n    return alan_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n\n    # Probability that it will not rain on a day is 1 minus the probability that it will rain\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    # Since the events are independent, the probability it doesn't rain on both days is the product\n    prob_no_rain_both_days = prob_no_rain_saturday * prob_no_rain_sunday\n\n    # Probability it rains at least one day = 1 - Probability it doesn't rain on both days\n    prob_rain_at_least_one_day = 1 - prob_no_rain_both_days\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_for_correct = 10\n    points_for_incorrect = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if (correct * points_for_correct) + (incorrect * points_for_incorrect) == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    count_fives = 0\n\n    while True:\n        i = n\n        while i % 5 == 0:\n            count_fives += 1\n            i /= 5\n        if count_fives >= 28:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10  # Lucas originally bought 10 bottles\n    empty_bottles = 10  # Starts with 10 empty bottles after drinking initial 10\n    borrowed_bottle = 1  # He can borrow 1 empty bottle from the shop owner\n    \n    while empty_bottles + borrowed_bottle >= 2:\n        # Exchange two empty bottles for one new bottle of water\n        new_bottles = (empty_bottles + borrowed_bottle) // 2\n        total_bottles += new_bottles\n        \n        # Calculate remaining empty bottles after the exchange\n        empty_bottles = (empty_bottles + borrowed_bottle) % 2 + new_bottles\n        \n        # He will return the borrowed bottle when he has enough empties to exchange\n        if borrowed_bottle == 1 and empty_bottles + borrowed_bottle >= 2:\n            borrowed_bottle = 0\n    \n    return total_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time when the height of A's waterline will be 3 times that of B\n    t = symbols('t')\n\n    # Equation representing the relationship between the draining rates and time t\n    equation = Eq((10 - t) / 10, 3 * ((6 - t) / 6))\n\n    # Solve the equation for t\n    t_value = solve(equation, t)\n\n    return t_value[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position = 10\n    andrea_position_from_end = 12\n\n    # Compute Andrea's position from the start\n    andrea_position_from_start = total_children - andrea_position_from_end + 1\n\n    # Calculate the number of children between Vanessa and Andrea\n    if andrea_position_from_start > vanessa_position:\n        children_between = andrea_position_from_start - vanessa_position - 1\n    else:\n        children_between = vanessa_position - andrea_position_from_start - 1\n        \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    weeks = 7\n    initial_sweets = 320\n    sweets_bought_per_week = 30\n    final_sweets = 348\n\n    total_sweets_bought = sweets_bought_per_week * weeks\n    total_sweets_eaten = initial_sweets + total_sweets_bought - final_sweets\n    sweets_eaten_per_week = total_sweets_eaten / weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n\n    unfenced_length = path_length - fenced_length\n\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantity of sweets Chenxi and Yue Ying have\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n\n    # Chenxi has 5 more sweets than Yue Ying\n    equation1 = Eq(chenxi, yue_ying + 5)\n\n    # Chenxi gives Yue Ying 10 sweets\n    chenxi_new = chenxi - 10\n    yue_ying_new = yue_ying + 10\n\n    # Calculate the new difference in the number of sweets\n    difference = chenxi_new - yue_ying_new\n\n    # Solve equation1 for Chenxi and Yue Ying\n    solutions = solve(equation1, chenxi)\n\n    # Return the solved difference\n    return difference.subs(chenxi, solutions[0])\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Since there are no further details provided for the problem,\n    # the problem statement \"1\" does not relate to any known \"Time Problem\" in combinatorics.\n    # However, considering that this might mean \"How many ways can we arrange the number 1\",\n    # the answer would simply be 1 since there's only one number to arrange.\n\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(0, 69))\n    for i in primes:\n        if 69 - i in primes:\n            return abs(69 - 2*i)\n            \nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # To maximize the value, we want to multiply the largest numbers together\n    # and make sure subtraction occurs as late as possible.\n    # Therefore, one set of brackets should be around \"5 * 5\" to ensure multiplication occurs first.\n    # The other set should be around \"(15 - 6)\", so the subtraction happens after addition.\n    # The equation with brackets is: (15 + (5 * 5)) + (15 - 6) + 7\n    ans = (15 + (5 * 5)) + (15 - 6) + 7\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_score = 70\n    correct_points = 10\n    incorrect_points = -5\n    num_questions = 10\n\n    # Let's denote x as the number of correct answers.\n    # Then the number of incorrect answers will be num_questions - x.\n    # The total score is then x*correct_points + (num_questions - x)*incorrect_points.\n\n    # By solving the equation for x we find:\n    for x in range(num_questions + 1):\n        if x * correct_points + (num_questions - x) * incorrect_points == total_score:\n            return x\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours for easier calculation\n    late_time = 12 / 60\n    early_time = 8 / 60\n\n    # Let d be the distance between Wilson's home and office\n    # Let t be the time it would take to travel at 3 km/h without being late\n    # When travelling at 3 km/h, Wilson takes t + (12/60) hours to travel distance d\n    # When travelling at 7 km/h, Wilson takes t - (8/60) hours to travel distance d\n    # We have the system of equations:\n    # d = 3 * (t + 12/60) and d = 7 * (t - 8/60)\n    # From the above equations, we can calculate t, then solve for d\n    \n    # Time it takes to travel the distance without being late or early\n    t = (late_time * 7 - early_time * 3) / (7 - 3)\n    \n    # Calculating distance by using the time when Wilson is late\n    d = 3 * (t + late_time)\n\n    return d\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    taking_math = 20\n    taking_both = 11\n    taking_neither = 10\n\n    taking_writing_only = total_students - taking_math - taking_neither + taking_both\n    return taking_writing_only\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import primerange\n\n    # Extract digits from the birthday\n    digits = '08072003'\n    \n    # Generate possible numbers using the digits\n    possible_numbers = set()\n    for a in digits:\n        for b in digits.replace(a, '', 1):\n            for c in digits.replace(a, '', 1).replace(b, '', 1):\n                possible_numbers.add(int(a + b + c))\n\n    # Filter out the primes and find the largest one less than 50\n    largest_prime = max([i for i in possible_numbers if (i in primerange(0, 50))])\n\n    return largest_prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    numbers_in_list = 5\n\n    # Total sum of the five numbers\n    total_sum = total_average * numbers_in_list\n\n    # Sum of the first two numbers\n    sum_first_two = first_two_average * 2\n\n    # Sum of the last three numbers\n    sum_last_three = total_sum - sum_first_two\n\n    # Average of the last three numbers\n    average_last_three = sum_last_three / 3\n\n    return average_last_three\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let x be the number of students originally in school A\n    # Let y be the number of students originally in school B\n    # We have two equations based on the problem statement:\n    # 1. x + y = 1050 (total number of students)\n    # 2. x - 20 = y + 10 (school A has 10 more students than school B after transfer)\n\n    # Solve the system of equations\n    # From equation 2, we can express y in terms of x: y = x - 20 - 10\n    # Plug this into equation 1: x + (x - 20 - 10) = 1050\n    # Simplify the equation: 2x - 30 = 1050\n    # Solve for x: 2x = 1050 + 30\n    #             x = (1050 + 30) / 2\n    x = (1050 + 30) / 2\n\n    return x\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Teddy's age and father's age\n    teddy, father = symbols('teddy father')\n    \n    # When Teddy was 5, his father's age was 7 times his age\n    equation1 = Eq(father, 7 * 5)\n    \n    # The difference in age between Teddy and his father is a constant\n    age_difference = father - teddy\n    \n    # When his father is 40, we set up the second equation\n    equation2 = Eq(age_difference, 40 - teddy)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (teddy, father))\n    \n    # Extract Teddy's age when his father is 40\n    teddy_age_when_father_40 = solutions[teddy]\n    \n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    return sum(range(1, 18, 2))\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Given values\n    adults_fraction = 2/7\n    boys_fraction_remaining = 4/5\n    girls_fraction_remaining = 1 - boys_fraction_remaining\n    difference_adults_girls = 80\n    \n    # Correct calculation for fraction of girls in the total audience\n    girls_fraction_total = (1 - adults_fraction) * girls_fraction_remaining\n\n    # Correct calculation for fraction of adults in the total audience\n    adults_fraction_total = adults_fraction\n\n    # The difference between adults and girls in fraction of total\n    difference_fraction = adults_fraction_total - girls_fraction_total\n\n    # Total number of people, calculated using the given difference (80 more adults than girls)\n    total_people = difference_adults_girls / difference_fraction\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Every cut can increase the number of slices by at most the cut number (i.e., the nth cut can increase by at most n slices).\n    # For the first cut, we get 2 slices as we cut the pizza in half.\n    # For the second cut, it can cross the first cut creating 4 slices in total (+2 slices).\n    # For the third cut, it can cross both previous cuts in such a way to create 4 more slices, leading to 8 in total (+4 slices).\n    # For the fourth cut, it can cross all the previous 3 cuts creating 4 more slices, leading to 12 in total (+4 slices).\n    # We calculate this iteratively:\n    \n    cuts = 4\n    slices = 0\n    for i in range(1, cuts + 1):\n        slices += i\n    \n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def calculate_small_bus_cost(stops):\n    return (stops * 2) // 2 * 3\n\ndef calculate_large_bus_cost(stops):\n    return (stops * 3) // 3 * 4\n\ndef solution():\n    # Standardize stops to be in terms of 1 km distance for easy calculation\n    mandatory_stops = [4, 16, 33, 44, 60]  # Including final destination\n    costs = [0] * (mandatory_stops[-1] + 1)  # Create a list for costs to each stop\n    \n    # Set initial conditions, start from City A (0 km)\n    for i in range(1, mandatory_stops[-1] + 1):\n        # Initialize big number for comparison\n        costs[i] = float('inf')\n        if i % 2 == 0:\n            costs[i] = min(costs[i], costs[i - 2] + calculate_small_bus_cost(1))\n        if i % 3 == 0:\n            costs[i] = min(costs[i], costs[i - 3] + calculate_large_bus_cost(1))\n    \n    # Compute the overall minimum cost by using each bus to reach mandatory stops\n    for stop in mandatory_stops:\n        # Reset costs for every mandatory stop\n        costs_so_far = costs[stop]\n        for i in range(stop + 1, mandatory_stops[-1] + 1):\n            costs[i] = float('inf')\n            if i % 2 == 0:\n                costs[i] = min(costs[i], costs[i - 2] + calculate_small_bus_cost(1))\n            if i % 3 == 0:\n                costs[i] = min(costs[i], costs[i - 3] + calculate_large_bus_cost(1))\n            if i in mandatory_stops:\n                # Ensure that the cost is counted from the last mandatory stop\n                costs[i] = min(costs[i], costs_so_far + min(\n                    calculate_small_bus_cost((i - stop) // 2),\n                    calculate_large_bus_cost((i - stop) // 3)\n                ))\n\n    return costs[mandatory_stops[-1]]\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 110):\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p be the number of pink dolphins\n    p = symbols('p')\n    \n    # The number of gray dolphins is 11 times the number of pink dolphins\n    g = 11 * p\n    \n    # Total number of dolphins in the aquarium\n    total = p + g\n    \n    # Set up the equation for the total number of dolphins\n    equation = Eq(total, 48)\n    \n    # Solve the equation for p (the number of pink dolphins)\n    solution = solve(equation, p)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    # The formula for the area of a triangle is A = 1/2 * base * height\n    # We are given the area (A) and the base, and we need to find the height (h).\n    \n    area = 54  # in square cm\n    base = 9   # in cm\n    \n    # Rearrange the formula to solve for height: h = (2 * A) / base\n    height = (2 * area) / base\n    \n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Calculate the remainder of 2^2019 divided by 5\n    remainder_2_2019 = pow(2, 2019, 5)\n\n    # Calculate the remainder of 4^982 divided by 5\n    # Since 4 ≡ -1 (mod 5), 4^982 ≡ (-1)^982 ≡ 1 (mod 5)\n    remainder_4_982 = 1\n\n    # Calculate the remainder of 2^1963 divided by 5\n    # Since 2^4 ≡ 1 (mod 5) and 1963 = 4 * 490 + 3, we only need to consider 2^3\n    remainder_2_1963 = pow(2, 3, 5)\n\n    # Now we calculate the remainder of the denominator (4^982 - 2^1963) divided by 5\n    # It is the difference of the remainders calculated above\n    remainder_denominator = (remainder_4_982 - remainder_2_1963) % 5\n\n    # Since the denominator's remainder is not zero, we can calculate final remainder\n    # of the whole fraction divided by 5 using the remainders of the numerator and the denominator\n    remainder_fraction = (remainder_2_2019 * pow(remainder_denominator, -1, 5)) % 5\n\n    return remainder_fraction\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of tables (and chairs)\n    x = symbols('x')\n    \n    # Original state: number of tables = number of chairs = x\n    # After changes: tables = x - 42, chairs = x + 24\n    # According to the problem: chairs = 4 * tables\n    equation = Eq(x + 24, 4 * (x - 42))\n    \n    # Solve the equation for x\n    original_chairs = solve(equation, x)\n    \n    return original_chairs[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    percentage = 35 / 100\n    amount = 700\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left = 4\n    cabinets_right = 7\n    # Candy's own cabinet\n    candys_cabinet = 1\n\n    total_cabinets = cabinets_left + candys_cabinet + cabinets_right\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be between 1 and 9\n        for tens in range(10):     # Tens digit must be between 0 and 9\n            for ones in range(0, 10, 2):  # Ones digit must be even, hence 0, 2, 4, 6, or 8\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    # A number is divisible by 18 if and only if it is divisible by both 2 and 9.\n    # For divisibility by 2, the last digit (Y) must be even.\n    # For divisibility by 9, the sum of the digits must be a multiple of 9.\n    # The sum of digits 1 + 0 + 6 + Y must be divisible by 9.\n    # Since 1 + 0 + 6 = 7, we need to find Y such that 7 + Y is a multiple of 9.\n\n    # Search for valid Y that makes the number divisible by 18\n    for Y in range(10):  # Y must be a digit, so it ranges from 0 to 9\n        if (7 + Y) % 9 == 0 and Y % 2 == 0:  # Check if the sum is divisible by 9 and Y is even\n            ans = Y\n            break\n\n    return ans\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):\n        if i % 10 == 0 and i % 2 == 0 and (4900 + i) % 3 == 0:\n            ans = 4900 + i\n            return ans\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "from math import factorial\n\ndef solution():\n    n = 3  # Set size for n pairs\n\n    # Calculate the number of ways to make couplets for a set M of 2n primes \n    couplets = factorial(2 * n) // (factorial(n) * 2**n)\n\n    return couplets\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let j be the mass of the jar and c be the mass of one chocolate\n    \n    # From the problem we have two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n    \n    # We can solve these equations to find the values of j and c\n    # Subtract the first equation from the second to eliminate j\n    c = (317 - 185) / (17 - 5)  # c is the mass of one chocolate\n    \n    # Now we can find j using the first equation\n    j = 185 - 5 * c  # j is the mass of the jar\n    \n    # The mass of the jar with 10 chocolates\n    mass_with_10_chocolates = j + 10 * c\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(kristoff, 5.5 * olaf)\n    equation2 = Eq(ana - olaf, 116)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    height_difference = solutions[kristoff] - solutions[ana]\n\n    return height_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    # Let's denote the number of motorcycles as m, cars as c, and lorries as l.\n    # We have the following equations from the problem statement:\n    # m + c + l = 27 (total vehicles)\n    # 2m + 4c + 6l = 96 (total wheels)\n    # c = l (number of cars equal to number of lorries)\n    \n    # From c = l, we can have one variable represent both cars and lorries,\n    # Let's substitute c = l into the first equation: m + 2c = 27\n    # Now we can express m in terms of c: m = 27 - 2c\n    \n    # Now, let's substitute m and c = l into the second equation:\n    # 2(27 - 2c) + 4c + 6c = 96\n    # 54 - 4c + 10c = 96\n    # 6c = 96 - 54\n    # 6c = 42\n    # c = 7\n    # Since c = l, l = 7 (the number of cars is equal to the number of lorries)\n    \n    return 7\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - (1/10)\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    intervals = num_trees - 1\n    \n    distance = total_length / intervals\n    \n    return distance\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let's denote 'x' as the number of apples John bought.\n    # Then, the number of pears would be (4/5)*x and mangoes would be (2/5)*x.\n    x = symbols('x')\n\n    # Given the ratio of the amount spent on apples to pears is 3:2, \n    # and the amount spent on pears to mangoes is 1:5, we have two equations:\n    # 3*cost_apples = 2*cost_pears and cost_pears = 5*cost_mangoes.\n\n    # The cost per fruit is given, so, let's say 'cost_apples' is 0.60, \n    # then, 'cost_pears' would be (cost_apples * 3/2) and 'cost_mangoes' would be (cost_pears / 5).\n\n    cost_apples = 0.60\n    cost_pears = 3/2 * cost_apples\n    cost_mangoes = 1/5 * cost_pears\n\n    # Total amount paid for each fruit type is the product of cost per fruit and the quantity.\n    # The total amount is $150.\n    total_cost = Eq(0.60 * x + (4/5) * x * cost_pears + (2/5) * x * cost_mangoes, 150)\n\n    # Find the number of apples by solving the equation\n    num_apples = solve(total_cost, x)[0]\n\n    # Calculate the number of pears and mangoes\n    num_pears = (4/5) * num_apples\n    num_mangoes = (2/5) * num_apples\n\n    # The total number of fruits is the sum of apples, pears, and mangoes\n    total_fruits = num_apples + num_pears + num_mangoes\n\n    return total_fruits\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years will be 9.\n    hazel_age_in_three_years = 9\n    \n    # Therefore, Hazel's current age is 9 - 3 = 6 years old.\n    hazel_current_age = hazel_age_in_three_years - 3\n    \n    # Jessica is 3 years younger than Hazel.\n    jessica_current_age = hazel_current_age - 3\n    \n    # Next year, Hazel will be one year older.\n    hazel_next_year_age = hazel_current_age + 1\n    \n    # Next year, Jessica will be one year older.\n    jessica_next_year_age = jessica_current_age + 1\n    \n    # Their total age next year.\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_total = 366\n    second_half_average_per_month = 65\n    months_in_second_half = 6\n\n    second_half_total = second_half_average_per_month * months_in_second_half\n\n    total_for_year = first_half_total + second_half_total\n    average_per_month_last_year = total_for_year / 12\n\n    return average_per_month_last_year\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Since the number is divisible by 2, the last digit must be 0 (also satisfies divisibility by 5).\n    # Let's start by assigning the last digit as 0.\n    d7 = 0\n    \n    # The number must also be divisible by 3.\n    # To check divisibility by 3, the sum of the digits must be divisible by 3.\n    # sum(1,9,9,2) + d5 + d6 + 0 should be divisible by 3\n    digits_sum = sum([1, 9, 9, 2])\n    \n    # Initialize the smallest possible value for d5 and d6 such that the sum of the digits is divisible by 3.\n    d5 = d6 = 0\n    while (digits_sum + d5 + d6) % 3 != 0 or d5 == d6 or d5 == 0:\n        d6 += 1\n        if d6 > 9:\n            d6 = 0\n            d5 += 1\n\n    # Finally, the number must be divisible by 11.\n    # To check divisibility by 11, the difference between the sum of the digits in odd places and the sum of the digits in even places should be divisible by 11.\n    # (1 + 9 + 2 + d6) - (9 + 9 + d5) should be divisible by 11\n    while ((1 + 9 + 2 + d6) - (9 + 9 + d5)) % 11 != 0 or d5 == d6 or d5 == 0:\n        d6 += 1\n        if d6 > 9:\n            d6 = 0\n            d5 += 1\n        while (digits_sum + d5 + d6) % 3 != 0:\n            d6 += 1\n            if d6 > 9:\n                d6 = 0\n                d5 += 1\n    \n    # Assemble the smallest possible seven-digit number.\n    ans = int(f'1992{d5}{d6}{d7}')\n    return ans\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    return ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a, b = 4811, 1981\n    while b:\n        a, b = b, a % b\n    return a\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_for_six_assignments = 6 * 92\n    total_for_five_assignments = 5 * 94\n    score_sixth_assignment = total_for_six_assignments - total_for_five_assignments\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    total_profit = 440\n    remaining_pairs = 5\n\n    # Total pairs sold to earn the profit\n    total_pairs_sold = total_profit / profit_per_pair\n    \n    # Total initial pairs\n    initial_pairs = total_pairs_sold + remaining_pairs\n    \n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time when Peter is halfway through the musical\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    # Time when the musical ended\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    # Duration of the second half of the musical\n    second_half_duration = end_time - halfway_time\n    # Start time is half the duration before the halfway time\n    start_time = halfway_time - second_half_duration\n\n    # Format the start time in the desired format\n    start_time_formatted = start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\n    return start_time_formatted\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_after_movement = 30\n    cars_entered = 8\n    cars_exited = 10\n    \n    cars_initial = cars_after_movement - cars_entered + cars_exited\n    return cars_initial\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    numerator = (98 * 76) - (679 * 8)\n    denominator = (24 * 6) + (25 * 25 * 3) - 3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_current_number = len(str(current_number))\n        if digits_written + digits_in_current_number > total_seconds:\n            break\n        digits_written += digits_in_current_number\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    half_of_30 = 1/2 * 30\n    third_of_36 = 1/3 * 36\n    quarter_of_40 = 1/4 * 40\n    fifth_of_60 = 1/5 * 60\n    sixth_of_96 = 1/6 * 96\n    \n    smallest = min(half_of_30, third_of_36, quarter_of_40, fifth_of_60, sixth_of_96)\n    largest = max(half_of_30, third_of_36, quarter_of_40, fifth_of_60, sixth_of_96)\n    \n    return largest - smallest\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    duration = timedelta(minutes=225)\n    start_time = end_time - duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # To ensure getting a green marble, Darrell has to draw all non-green marbles first.\n    non_green_marbles = 5 + 9 + 2  # Blue + White + Black\n    # Darrell must draw all non-green marbles plus one more to guarantee a green marble\n    marbles_to_draw = non_green_marbles + 1\n    return marbles_to_draw\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    water_filled_daily = 10\n    water_leaks_nightly = 3\n    net_water_per_day = water_filled_daily - water_leaks_nightly\n    current_water = 3  # Amount of water filled on the first day\n    days_passed = 1  # Starting from day 1\n\n    while current_water < total_water_needed:\n        days_passed += 1\n        current_water += net_water_per_day\n\n    return days_passed\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    # Calculate the number of ways to choose 2 teams from 20 teams\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    result = ((0.8 + 1/5) * 24 + 6.6) / (9/14) - 7.6\n    return result\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # 6 metres for 6 days plus 2 metres on the 7th day\n    remaining = 20 - total_climbed  # remaining metres to climb after the 7th day\n\n    # The snail climbs the remaining meters during the day on the 8th day\n    # without sliding down that night since it has already exited the well.\n\n    # Therefore, the slide down amount can be calculated from the distance climbed \n    # on the last day before it reaches the top (6th day).\n    climbed_on_sixth_day = 6\n    slide_down = climbed_on_sixth_day - remaining\n\n    return slide_down\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        initial_rabbits = (initial_rabbits * 3) // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Time when Candy starts walking = 6 minutes\n    # Time after Candy starts walking before meeting = 12 minutes\n    # so, total time Ivy has walked = 6 + 12 = 18 minutes\n    # and Candy has walked just 12 minutes before they meet.\n\n    # Let the speed of Candy be x meters/minute\n    # Then the speed of Ivy will be x + 20 meters/minute\n    # distance covered by Ivy in 18 minutes = 18 * (x + 20)\n    # distance covered by Candy in 12 minutes = 12 * x\n    # Total distance they should cover before meeting is 1200 meters\n    \n    # setting up the equation based on above information\n    # 18 * (x + 20) + 12 * x = 1200\n    # 18x + 360 + 12x = 1200\n    # 30x + 360 = 1200\n    # 30x = 840\n    # x = 28\n    \n    # The speed of Candy is 28 meters/minute\n    return 28\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # With 8 players, each player plays 7 matches.\n    \n    # Since everyone has a different number of wins, the possible win counts are 0 to 7.\n    # The champion would be the one with the most wins, which is 7 in this case.\n    \n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_to_make_120 = 120 / puffs_per_hour\n    return hours_to_make_120\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')  # x is the number of passengers arriving each minute\n    # 4 ticket checkpoints for 30 minutes equals to 5 ticket checkpoints for 20 minutes\n    equation = 4 * 30 * x - 5 * 20 * x\n    passengers = solve(equation, x)[0]  # total number of passengers\n    # time taken for 7 ticket checkpoints to clear the queue\n    time_taken = passengers / (7 * x)\n    return time_taken\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                max_product = max(max_product, x1 * x2 * x3 * x4)\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward = 8\n    mother = 32\n\n    years = 0\n    while mother != 3 * (edward + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n    num_boxes = total_money // cost_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    total = 4060800\n    known_sum = 4000000 + 800\n    missing_number = total - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls\n    g = symbols('g')\n\n    # Equation for the total number of apples picked by boys\n    boys_apples = 15 * 30  # 15 boys, each picks 30 apples\n\n    # Equation for the total number of apples picked by girls\n    girls_apples = g * 20  # Each girl picks 20 apples\n\n    # Equation for the average number of apples picked by everyone\n    # Total apples is divided by the total number of people (15 boys + g girls)\n    total_apples = boys_apples + girls_apples\n    total_people = 15 + g\n    average_apples = Eq((total_apples / total_people), 26)\n\n    # Solve for g\n    num_girls = solve(average_apples, g)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "from itertools import permutations\nfrom math import prod\n\ndef solution():\n    # Find the single-digit numbers whose product is 360\n    for composite in range(2, 10):\n        if 360 % composite == 0:\n            other_factors = []\n            residual = 360 // composite\n            for f in range(1, residual + 1):\n                if residual % f == 0 and f < 10:\n                    other_factors.append(f)\n                    residual = residual // f\n            if len(other_factors) == 3 and prod(other_factors) * composite == 360:\n                # Check if all other factors are prime (since only one should be composite)\n                other_factors_primes = [f for f in other_factors if len([divisor for divisor in range(2, int(f**0.5)+1) if f % divisor == 0]) == 0]\n                if len(other_factors_primes) == 2:\n                    # Generate all permutations of the digits\n                    perms = [''.join(map(str, p)) for p in permutations([composite] + other_factors)]\n                    return max(int(p) for p in perms if len(p) == 4)\n        \nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    difference = 56\n    tank_B = tank_A + difference\n\n    return tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of basketballs and volleyballs\n    basketballs, volleyballs = symbols('basketballs volleyballs')\n\n    # Each basketball cost $30 and each volleyball cost $25\n    # Total cost is $340 for 12 balls\n    equation1 = Eq(basketballs * 30 + volleyballs * 25, 340)\n    # The school bought a total of 12 volleyballs and basketballs\n    equation2 = Eq(basketballs + volleyballs, 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketballs, volleyballs))\n\n    # We want to find out how many basketballs the school bought\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15_000_000\n    richie_share = total_wealth * 1/3\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * 1/2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2/5\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = (3/4) * total_candy\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = (1/3) * remaining_candy\n    final_candy = remaining_candy - candy_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/j for j in range(1, i)) for i in range(2, 61))\n    \n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roy, dennis = symbols('roy dennis')\n\n    # Initial condition: Roy + Dennis = 340\n    initial_condition = Eq(roy + dennis, 340)\n\n    # After spending\n    # Roy: roy - 2/3 * roy = 1/3 * roy\n    # Dennis: dennis - 1/4 * dennis = 3/4 * dennis\n    # Dennis has twice as much as Roy: 3/4 * dennis = 2 * 1/3 * roy\n    spending_condition = Eq(3/4 * dennis, 2 * (1/3 * roy))\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, spending_condition), (roy, dennis))\n    \n    # The amount of money Dennis had in the end\n    dennis_end_amount = 3/4 * solutions[dennis]\n    \n    return dennis_end_amount\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    total_digits = 300\n    digits_used = 0\n    current_page = 0\n    \n    while digits_used < total_digits:\n        current_page += 1\n        page_digit_count = len(str(current_page))\n        if digits_used + page_digit_count > total_digits:\n            break  # If adding this page exceeds total digits, it must be the last page\n        digits_used += page_digit_count\n\n    return current_page - 1  # Subtract 1 because we added 1 before breaking out of the loop\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    cost_per_ball = 20.45\n    number_of_hula_hoops = 6\n\n    total_cost_of_balls = number_of_balls * cost_per_ball\n    total_cost_of_hula_hoops = total_cost - total_cost_of_balls\n    cost_per_hula_hoop = total_cost_of_hula_hoops / number_of_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    factors = factorint(693)\n    product = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            product *= prime\n\n    return product\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # For the unit digit of 13^242, we only need the unit digit of 3^242\n    # 3^1 (3), 3^2 (9), 3^3 (7), 3^4 (1)... 3^5 (3), and repeats every 4\n    unit_digit_13_pow = pow(3, 242 % 4) if 242 % 4 != 0 else pow(3, 4)\n    \n    # For the unit digit of 17^379, we only need the unit digit of 7^379\n    # 7^1 (7), 7^2 (9), 7^3 (3), 7^4 (1)... 7^5 (7), and repeats every 4\n    unit_digit_17_pow = pow(7, 379 % 4) if 379 % 4 != 0 else pow(7, 4)\n    \n    # For the unit digit of 4^2012, since 4^2 (16) ends with 6, all even powers of 4 end with 6\n    unit_digit_4_pow = 6\n    \n    # Sum up the unit digits to get the final unit digit since all multiplications and additions are with single digits\n    unit_digit = (unit_digit_13_pow + unit_digit_17_pow * unit_digit_4_pow) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n    container_volume = 5\n\n    total_juice = total_juice_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n\n    containers_needed = -(-remaining_juice // container_volume)\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    sol = solve(equation, A)\n\n    return sol[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(marry, (7/5) * alexis)\n    \n    # Both Marry and Alexis gave 20% of their stickers to Charlotte\n    # After giving stickers, Charlotte's stickers increased by 80%\n    # Mary had 20 stickers more than Charlotte in the end\n    eq2 = Eq(charlotte * 1.8, marry * 0.2 + alexis * 0.2 + charlotte)\n    eq3 = Eq(marry - charlotte, 20)\n    \n    # We solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight_of_steak = 3.5  # 3 and 1/2 kg\n    cost_per_kg = 7.5  # £7.50 per kg\n    total_money = 20  # £20 note\n\n    total_cost = weight_of_steak * cost_per_kg\n    money_needed = total_cost - total_money\n\n    return money_needed if money_needed > 0 else 0\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let the number of rows in the original square array be x. Hence there are x^2 students in the original array.\n    # When a row and a column are added, there are (x+1)^2 students in the larger array.\n    # From the question, we have:\n    # Original: x^2 + 11 (surplus of 11 students)\n    # Larger: (x+1)^2 = x^2 + 11 + 12 (12 more students are needed to fill the larger square array)\n    # Simplifying, we get: x^2 + 2x + 1 = x^2 + 23\n    # 2x + 1 = 23\n    # 2x = 22\n    # x = 11\n    # Therefore, the number of students in the original square array is 11^2 with surplus of 11 students.\n    \n    x = (23 - 1) // 2\n    num_students = x**2 + 11\n\n    return num_students\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_front = 12\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mass_light = symbols('mass_light')\n    mass_heavy = 2 * mass_light\n    \n    # Equation: 6 * mass_light + 6 * mass_heavy = 65.7\n    equation = Eq(6 * mass_light + 6 * mass_heavy, 65.7)\n    \n    # Get the result\n    mass_light_value = solve(equation, mass_light)[0]\n    \n    # To the nearest kg\n    mass_light_nearest_kg = round(mass_light_value)\n    \n    return mass_light_nearest_kg\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Benson, Clive = symbols('Benson Clive')\n    equation1 = Eq(Benson + Clive, 705)\n    equation2 = Eq(Benson - 34, Clive - 63)\n\n    solutions = solve((equation1, equation2), (Benson, Clive))\n\n    return solutions[Clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    # The four-digit palindromic numbers have the form: ABBA\n    # A can take any value from 1 to 9 (since it's the first digit and can't be zero)\n    # B can take any value from 0 to 9\n    # The hundreds and ones place are determined by the thousands and tens place respectively.\n    \n    count_A = 9  # digits from 1 to 9\n    count_B = 10  # digits from 0 to 9\n    \n    total_palindromic_numbers = count_A * count_B\n    \n    return total_palindromic_numbers\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n\n    return sweets_in_C\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let s be the total mass of strawberry candies, m be the mass of mint candies for each container\n    s, m = symbols('s m')\n\n    # Let's denote c1, c2, c3 as the total mass of the 3 different sized containers\n    # Then the equation for each container based on the strawberry fraction is as follows:\n    # c1 = 5/2*s (because 2/5 of it is strawberry) and m = 3/5*c1 (remain is chocolate and mint)\n    # c2 = 7/2*s (because 2/7 of it is strawberry) and m = 5/7*c2 (remain is chocolate and mint)\n    # c3 = 9/2*s (because 2/9 of it is strawberry) and m = 7/9*c3 (remain is chocolate and mint)\n    # The total mass of all containers is c1 + c2 + c3 = 1371 g\n\n    # We substitute m in the equations\n    c1 = 5/2*s\n    c2 = 7/2*s\n    c3 = 9/2*s\n\n    equation1 = Eq(3/5*c1, m)\n    equation2 = Eq(5/7*c2, m)\n    equation3 = Eq(7/9*c3, m)\n    equation4 = Eq(c1 + c2 + c3, 1371)\n\n    # We solve the system of equations for s (mass of strawberry candies)\n    solutions = solve((equation1, equation2, equation3, equation4), (s, m))\n    return solutions[s]\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jay, denise = symbols('jay denise')\n    equation1 = Eq(jay, 6 * denise)\n    equation2 = Eq(jay + denise, 126)\n    \n    solutions = solve((equation1, equation2), (jay, denise))\n    \n    return solutions[denise]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the cost of one chocolate bar\n    chocolate_bar_cost = 1.26\n    \n    # Calculate the total cost of 5 chocolate bars\n    total_chocolate_cost = 5 * chocolate_bar_cost\n    \n    # Since the total cost of 6 cookies equals the total cost of 5 chocolate bars,\n    # we can find the cost of one cookie\n    cookie_cost = total_chocolate_cost / 6\n    \n    # Calculate the cost of 4 such cookies\n    total_cookie_cost = 4 * cookie_cost\n    \n    # Initial amount of money\n    initial_money = 9.05\n    \n    # Money left after buying 4 cookies\n    money_left = initial_money - total_cookie_cost\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    original_daily_work = (1/9) / 6\n    enhanced_daily_work = original_daily_work * (1 + 1/5)\n    \n    # Work done in the first 3 days at original pace\n    work_done = 3 * original_daily_work\n    \n    # Remaining work to reach half of the total length\n    remaining_work = (1/2) - work_done\n    \n    # Time required to complete the remaining work at enhanced pace\n    remaining_time = remaining_work / enhanced_daily_work\n    \n    # Total time = time at original pace + time at enhanced pace\n    total_time = 3 + remaining_time\n    return total_time\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')  # Xiaoao's age\n    # Daao's age is three times that of Xiaoao\n    # Pangao's age is seven times that of Xiaoao\n    # Pangao is 32 years older than Daao\n    \n    # Set up the equations\n    eq1 = Eq(7 * x, 3 * x + 32)  # 7*Xiaoao = 3*Xiaoao + 32 (Pangao's age)\n    daao_age = solve(eq1, x)[0] * 3  # Solve for Xiaoao's age and multiply by 3 to get Daao's age\n    return daao_age\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls originally in the classroom\n    # Let b be the number of boys originally in the classroom\n    g, b = symbols('g b', integer=True)\n\n    # After 25 girls leave, the number of girls in the classroom is g - 25\n    # At this point, g - 25 is 2/3 the number of b\n    equation1 = Eq(g - 25, 2/3 * b)\n\n    # After 15 boys leave, b - 15 boys are left and this is equal to the number of girls left, which is g - 25\n    equation2 = Eq(b - 15, g - 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total number of students is the sum of boys and girls at first\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    for xiao_hong in range(1, 73):  # Xiao Hong's candies\n        for xiao_ming in range(1, 73):  # Xiao Ming's candies\n            xiao_ling = 73 - xiao_hong - xiao_ming  # Xiao Ling's candies\n\n            # Check if after Xiao Ling eats 3 candies, Xiao Hong and Xiao Ling have the same amount.\n            if xiao_ling - 3 == xiao_hong:\n\n                # Check if after Xiao Hong gives Xiao Ming 2 candies, then Xiao Ming's candies double Xiao Hong's candies.\n                if (xiao_ming + 2) == 2 * (xiao_hong - 2):\n                    return xiao_hong\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Given ratio of 10-cent to 50-cent coins\n    ratio_10 = 8\n    ratio_50 = 3\n    total_ratio = ratio_10 + ratio_50\n\n    # Total value in dollars\n    total_value = 75.90\n\n    # Value of each ratio unit\n    value_per_ratio_unit = total_value / total_ratio\n\n    # Value of 50-cent coins\n    value_50_cent_coins = value_per_ratio_unit * ratio_50\n    \n    # Since each 50-cent coin contributes to $0.50, find the number of 50-cent coins\n    number_of_50_cent_coins = value_50_cent_coins / 0.5\n\n    # Total value of 50-cent coins\n    total_value_50_cent_coins = number_of_50_cent_coins * 0.5\n\n    return total_value_50_cent_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    x = symbols('x')\n\n    # Write the equation according to the question provided\n    equation = Eq(8 * 11, x * 9 + 34)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Since we expect a single solution for x, we take the first element.\n    return solution[0]\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.20\n    discount = original_price - 6400\n    return discount\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial as fact\n    \n    # Considering Amy and Judy as a single entity since they sit together\n    # there are now 7 entities to arrange around the table.\n    # Since rotations are considered the same, fix one entity and arrange the rest.\n    arrangements_of_entities = fact(7 - 1)\n  \n    # Amy and Judy can switch places with each other, so multiply by 2\n    arrangements_of_amy_judy = 2\n\n    # Total arrangements is the product of both possibilities\n    total_arrangements = arrangements_of_entities * arrangements_of_amy_judy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    # Calculate the area of the square base\n    base_area = 7 * 7\n\n    # Calculate the area of the square hole\n    hole_area = 3 * 3\n\n    # Calculate the remaining area after the hole is cut out\n    remaining_area = base_area - hole_area\n\n    # Calculate the height of the prism using the volume\n    height = 320 / remaining_area\n\n    return height\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5  # Weight of one x in grams\n    balance_x = 3   # Number of x's to balance\n    balance_y = 10  # Number of y's to balance\n\n    # Formula from the balance condition: 3x = 10y\n    # Since we know x = 1.5g, we can find y\n\n    y_weight = (balance_x * x_weight) / balance_y\n\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    arithmetic_sequence = range(6, 27, 4)\n    ans = sum(arithmetic_sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) / 3\n    return int(cucumbers)\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_permutations = list(permutations(digits, 3))\n    ans = len(all_permutations)\n    return ans\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Since it's a three-digit number, hundreds digit should be 1 to 5.\n    for hundreds in range(1, 6):\n        # Tens and ones can range from 0 to 4 as hundreds is at least 1\n        for tens in range(0, 5):\n            for ones in range(0, 5):\n                if hundreds + tens + ones == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            total += number\n    return total\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # The sequence follows a pattern where numbers 1 up to n are repeated,\n    # where n increases by 1 each time. First we need to find the value of n\n    # where the sum of the first n triangular numbers exceeds 2008.\n    total_numbers = 0\n    n = 1\n    while total_numbers < 2008:\n        total_numbers += (n * (n + 1)) // 2\n        n += 1\n    \n    # Once we have the value of n, we calculate how many numbers we've counted\n    # until the nth triangle number (excluded)\n    total_numbers -= (n * (n + 1)) // 2\n    \n    # The difference between 2008 and the sum will give us the exact position\n    # in the nth set of numbers\n    position = 2008 - total_numbers\n\n    return position\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Arithmetic sequence parameters\n    d = 6  # common difference\n    n = 31  # number of terms (nights)\n\n    # On the 16th night she ate 100 mosquitoes\n    a_16 = 100\n\n    # Calculate the first term (a_1) using the 16th term formula: a_n = a_1 + (n-1)d\n    a_1 = a_16 - (16 - 1) * d\n\n    # Sum of an arithmetic sequence: S_n = n/2 * (2a_1 + (n-1)d)\n    S_n = n / 2 * (2 * a_1 + (n - 1) * d)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_bags = total_bags - given_to_avril\n    return remaining_bags\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:\n            return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:  # Skip if leading digit is zero\n            continue\n        ABAC = A*1001 + B*100 + C\n        DBEC = D*1000 + B*100 + E*10 + C\n        ACEDC = A*10000 + C*1000 + E*100 + D*10 + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to minutes\n    minutes_diff = afternoon_time - morning_time\n    return minutes_diff\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    return (64 + 36) * (64 - 36)\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sequence_sum = sum(range(1, 10)) * 2 - 9  # summation of the sequence without the middle element\n    return sequence_sum\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Since Chris starts first, to ensure his victory,\n    # he must leave Dylan in a situation where Dylan\n    # has to leave Chris with 2, 3, or 4 matches.\n    # This way, no matter if Dylan takes 1 or 2 matches,\n    # Chris will be able to win in the next round.\n    # If Chris leaves 2, 3, or 4 matches after his first turn,\n    # in total, there should be 2, 3, 4 or 5 turns in the game.\n\n    # Analyzing backwards, if there are 1 or 2 matches left,\n    # the person who's turn it is will win. Therefore, leaving\n    # 3 matches after one's turn is a losing position.\n    # Consequently, leaving 4 matches will be a winning position\n    # because the other player will be forced to leave\n    # 2 or 3 matches, which are losing positions.\n\n    # Hence, Chris should aim to leave 4 matches after his first turn.\n    # This means he should take away:\n    matches_to_take = 7 - 4  # 7 initial matches - 4 matches to be left\n\n    return matches_to_take\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([53-50, 47-44, 41-38, 35-32, 29-26, 23])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    time_taken = distance_to_market / walking_speed\n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, E, _, _ = p\n        if A == 0:  # A cannot be zero because it's the first digit\n            continue\n        num = A*1000 + E*100 + E*10 + A\n        if (num % (A+E)) == 0 and (num // (A+E)) == A*101:  # Check the divisibility condition\n            return num\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # If we denote the number of restaurants to choose from as n, and\n    # considering the question does not specify the value of n, we would\n    # return n as the number of different choices, because he can choose\n    # any one of the n restaurants.\n    # However, since we actually need a numeric value and the problem\n    # does not provide any further information, we cannot produce a \n    # numeric answer.\n    # We could return a variable representing the number of restaurants,\n    # but in the context of this platform, it is likely expected that we\n    # return a numeric value.\n    # One reasonable interpretation of this question would be to assume \n    # that there is at least one restaurant to choose from, so the minimum\n    # number of choices is 1.\n    ans = 1  # This assumes there is at least 1 restaurant to choose from.\n\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters for comparison\n    measurements_cm = [8300, 200, 8, 50]\n\n    # Typical height of a classroom door in cm (approximately 200cm or 2m)\n    door_height = 200\n\n    # Find the measurement closest to the typical door height\n    closest = min(measurements_cm, key=lambda x: abs(x - door_height))\n\n    return closest\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    # Let n, p, and e be the prices of a notebook, pencil case, and eraser, respectively.\n    # We have the following equations from the problem statement:\n    # 3n + 4p + 5e = 50  -- (1)\n    # n + p = 6          -- (2)\n    # p + e = 8          -- (3)\n    \n    # rearranging equation (2) gives us n = 6 - p\n    \n    # Now we can substitute n from equation (2) into equation (1) to get:\n    # 3(6 - p) + 4p + 5e = 50\n    # Simplifying gives: 18 - 3p + 4p + 5e = 50\n    # 18 + p + 5e = 50\n    # Now p + 5e = 32       -- (4)\n    \n    # Now we can use equation (3) and subtract it from equation (4) to get:\n    # p + 5e - (p + e) = 32 - 8\n    # 4e = 24\n    # e = 6\n    \n    # Now that we have e, we can substitute it back into equation (3) to find p:\n    # p + 6 = 8\n    p = 8 - 6\n    \n    return p\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_used = 450\n    total_pages = 0\n    digits_per_page = 1\n\n    while digits_used > 0:\n        page_limit = 10 ** digits_per_page - 1\n        pages_this_digit = page_limit - total_pages\n        if digits_used - (pages_this_digit * digits_per_page) >= 0:\n            digits_used -= pages_this_digit * digits_per_page\n            total_pages += pages_this_digit\n            digits_per_page += 1\n        else:\n            total_pages += digits_used // digits_per_page\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original amount of money Leonard had as 'x'.\n    x = symbols('x')\n\n    # Leonard used 5/12 of his money to purchase lunch, so he had (1 - 5/12)x left.\n    remaining_after_lunch = (1 - 5/12) * x\n\n    # He then used 2/7 of the remainder to purchase dinner,\n    # so he had (1 - 2/7) of the remaining_after_lunch left, which equals $45.\n    remaining_after_dinner = (1 - 2/7) * remaining_after_lunch\n\n    # Set up the equation to solve for 'x'.\n    equation = Eq(remaining_after_dinner, 45)\n\n    # Solve for the original amount 'x'.\n    original_amount = solve(equation, x)[0]\n\n    return original_amount\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    # total family members\n    family_members = 4\n    # average age of family\n    average_age = 25\n    # total age of the family\n    total_age = family_members * average_age\n    # age of Harry, his mom, and sister\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    # age of Harry's dad (total age minus the sum of other family members' ages)\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * 4 // 2  # total games played in the tournament\n    games_won_by_other_players = 2 + 1 + 4 + 3  # total games won by Lily, Eva, Tina, and Emma\n    games_won_by_gina = total_games - games_won_by_other_players  # games won by Gina\n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let's denote x as the number of correct answers Avril had.\n    # Then, the total points Avril got would be 10x - 5(10 - x),\n    # This simplifies to 15x - 50.\n    # Eddie's points would then be 15x - 50 + 15.\n    \n    # We know together they scored 155 points:\n    # (15x - 50) + (15x - 50 + 15) = 155\n    # Combine like terms: 30x - 85 = 155\n    # Solve for x: 30x = 155 + 85\n    # x = (155 + 85) / 30\n    \n    avril_correct = (155 + 85) // 30\n\n    return avril_correct\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 1  # start with 1 digit numbers\n    current_page = 0\n    total_digits_counted = 0\n\n    while total_digits_counted < 1524:\n        pages_with_current_digits = 9 * (10 ** (digits_per_page - 1))\n        if total_digits_counted + (pages_with_current_digits * digits_per_page) > 1524:\n            break\n        \n        total_digits_counted += pages_with_current_digits * digits_per_page\n        current_page += pages_with_current_digits\n        digits_per_page += 1\n\n    remaining_digits = 1524 - total_digits_counted\n    additional_pages = -(-remaining_digits // digits_per_page) # Ceiling division\n    \n    return current_page + additional_pages\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial numbers\n    equation1 = Eq(boys, 3 * girls)\n    # After 12 boys left and 20 girls joined, the numbers became equal\n    equation2 = Eq(boys - 12, girls + 20)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "from math import gcd\n\ndef solution():\n    type_A = 56\n    type_B = 96\n    type_C = 120\n\n    greatest_common_divisor = gcd(gcd(type_A, type_B), type_C)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    number = 35\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants and angle conversion from degrees to radians\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    angle_degrees = 20\n    angle_radians = math.radians(angle_degrees)\n    \n    # Distance down the slope\n    d = 400  # meters\n    \n    # Coefficient of kinetic friction\n    mu_k = 0.2\n    \n    # Initial velocity\n    u = 0  # starting from rest\n\n    # Calculating the acceleration\n    # a = g * (sin(angle) - mu_k * cos(angle))\n    a = g * (math.sin(angle_radians) - mu_k * math.cos(angle_radians))\n\n    # Using the kinematic equation v^2 = u^2 + 2as, where u initial velocity, v final velocity, a acceleration, s displacement\n    # Here, u = 0, so we simplify it to v = sqrt(2as)\n    v = math.sqrt(2 * a * d)\n    \n    return v\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    min_apples = 1  # Every child gets at least one apple\n    remaining_apples = 30 - 6 * min_apples  # Subtract one apple per child\n    # The most apples one child can get is minimized when the remaining apples are as evenly distributed as possible\n    apples_for_most = remaining_apples - (5 * (remaining_apples // 5)) + min_apples\n    return apples_for_most\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    total_money_spent = 300\n    cost_per_shirt = 5\n    cost_per_bag = 10\n    # Marcus' approach\n    marcus_total_per_group = cost_per_shirt + cost_per_bag  # $5 (shirt) + $10 (bag)\n    marcus_number_of_groups = total_money_spent // marcus_total_per_group  # $300 / $15\n    marcus_shirts_bought = marcus_number_of_groups * 1  # Only considering the number of bags (1 bag per group) instead of shirts\n\n    # Correct calculation\n    # For every 4 shirts, there is 1 bag, hence in one group: 4 shirts + 1 bag\n    shirts_per_group = 4\n    bags_per_group = 1\n    cost_per_group = (shirts_per_group * cost_per_shirt) + (bags_per_group * cost_per_bag)\n\n    number_of_groups = total_money_spent // cost_per_group  # Number of groups Sally can buy with $300\n    shirts_bought = number_of_groups * shirts_per_group  # Total number of shirts bought\n\n    # Marcus' result is incorrect if his shirts bought is different from the correct shirts_bought\n    is_marcus_correct = marcus_shirts_bought == shirts_bought\n\n    # Return Marcus' result and correctness, and the correct number of shirts bought\n    ans = (marcus_shirts_bought, is_marcus_correct, shirts_bought)\n    return ans\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Let the total work be denoted by LCM of 5 and 6 which is 30 (hypothetical work units)\n    # Hence 6 men can complete 30 units in 5 days which means 1 man does 30/(6*5) units per day\n    man_work_per_day = 30 / (6 * 5)\n\n    # Similarly, 5 women can complete 30 units in 6 days which means 1 woman does 30/(5*6) units per day\n    woman_work_per_day = 30 / (5 * 6)\n\n    # Now we find the daily work done by 10 men and 5 women\n    daily_work_done = (10 * man_work_per_day) + (5 * woman_work_per_day)\n\n    # Finally, we find how many days will it take to complete 30 work units by 10 men and 5 women\n    days_to_complete_job = 30 / daily_work_done\n\n    return days_to_complete_job\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (anna_age + years):\n            break\n    return years\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for rabbits in range(13):\n        chickens = 12 - rabbits\n        if (rabbits * 4 + chickens * 2) == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    largest_number = 0\n    \n    for i in range(10, 100):\n        if (i % 4 == 3) and (i % 5 == 3):\n            largest_number = i\n    \n    return largest_number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total = 1  # Total volume of 'Purple Fire' paint in litres\n    red_ratio = 3  # Red paint part of the ratio\n    blue_ratio = 1  # Blue paint part of the ratio\n\n    red_paint = (red_ratio / (red_ratio + blue_ratio)) * total\n\n    return red_paint\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of apples, y be the number of bananas, and z be the number of oranges\n    x, y, z = symbols('x y z')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(y, 2 * x)  # For every 1 apple, there are 2 bananas\n    equation2 = Eq(z, 3 * x)  # For every 1 apple, there are 3 oranges\n    equation3 = Eq(x + y + z, 24)  # Total number of fruits is 24\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    bananas = solutions[y]\n\n    return bananas\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # May's total length\n    may_total_length_cm = 7 * 40 + 2.4 * 100  # Convert 2.4m to cm\n\n    # Nancy's total length\n    nancy_total_length_cm = 18 * 70\n\n    # Finding the difference\n    difference_cm = may_total_length_cm - nancy_total_length_cm\n\n    # The difference in length must be solely due to long ribbons that May has, because both have equal number of ribbons\n    # and Nancy only has long ribbons.\n    may_long_ribbon_length = 70\n    \n    # Calculate the number of long ribbons May has\n    may_long_ribbons = difference_cm / may_long_ribbon_length\n\n    # May's total number of ribbons\n    total_ribbons_may = 7 + may_long_ribbons  # Adding short ribbons to long ribbons\n\n    return int(total_ribbons_may)\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    # If A gives B 40 books, they have the same number\n    equation1 = Eq(A - 40, B + 40)\n    # If B gives A 40 books, A has 3 times the books of B\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean = 6\n    total_sum = mean * (len(numbers) + 1)\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    max_revenue = 0\n    best_price = 0\n    \n    for discount in range(0, 400, 20):\n        price = 400 - discount\n        occupied_rooms = 50 + (discount // 20) * 5\n        revenue = price * occupied_rooms\n        \n        if revenue > max_revenue:\n            max_revenue = revenue\n            best_price = price\n\n    return best_price\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    result = 1 - ((15.25 * 1.6 + 1.6) / (16.25 / (5/8)))\n    return result\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    ans = 53 * 84\n    return ans\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_of_one_packet = 1.02 / 12\n    total_mass_of_four_packets = mass_of_one_packet * 4\n    return total_mass_of_four_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let x be the cost of each compact disc.\n    # According to the problem, we have 4 identical compact discs and 3 identical tapes.\n    # Each tape costs £9, so the cost of 3 tapes is 3 * £9.\n    # The total cost of 4 compact discs and 3 tapes is £83.\n    # We set up the equation:\n    # 4x + 3*9 = 83\n    # Solve for x:\n    x = (83 - 3 * 9) / 4\n\n    return x\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    true_divisor = 1.22\n    incorrect_divisor = 122\n    difference_in_results = 99.396\n    true_result = difference_in_results * incorrect_divisor / (true_divisor - 1)\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n\n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # Together, they had 876 cards\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    hisham_cards = solutions[hisham]\n    melissa_cards = solutions[melissa]\n\n    # Calculate cards Melissa should give to Hisham\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Sort the children from the one who gets the least to the one who gets the most\n    # The least number of apples each child can get would be a sequence of consecutive numbers\n    # because the question states that each child gets a unique number of apples\n    # To minimize the number of apples for the child who gets the most, let's try a consecutive sequence\n    # We start with the minimum possible sequence given that there are 8 children\n\n    # Let the least number of apples the first child gets be x\n    # We then have x + (x+1) + (x+2) +...+ (x+7) for 8 children\n    # The sum S of the smallest sequence is S = 8x + (1+2+3+4+5+6+7) = 8x + 28\n    # Given that we have 50 apples S = 50, so we can solve for x\n\n    # Solve for the smallest possible x\n    x = (50 - 28) // 8\n\n    # Now the child with the most apples will get x + 7 apples\n    most_apples = x + 7\n\n    return most_apples\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    final_answer = 35\n    subtracted_value = final_answer - 8\n    original_number = subtracted_value / 3\n\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres (1 litre = 1000 millilitres)\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    total_sum = 0\n    for i in range(7):\n        numerator = 36\n        denominator = (1 + 5 * i) * (6 + 5 * i)\n        fraction = numerator / denominator\n        total_sum += fraction\n    return total_sum\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    perm = permutations(digits)\n    smallest_odd = float('inf')\n    \n    for combo in perm:\n        number = int(''.join(map(str, combo)))\n        if number % 2 != 0 and number < smallest_odd:\n            smallest_odd = number\n    \n    return smallest_odd\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Since we know the 4th and 6th terms, we can establish a relationship between the terms.\n    # Let the first term be a and the second term be b.\n    # Then the sequence looks like: a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # We know that the fourth term a+2b = 6 and the sixth term 3a+5b = 15.\n    # Using these two equations, we can solve for a and b.\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    \n    equation1 = Eq(a + 2 * b, 6)\n    equation2 = Eq(3 * a + 5 * b, 15)\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Now we have a and b, we can calculate the seventh term in the sequence.\n    # Seventh term is: 3a+5b (sixth term) + 2a+3b (fifth term).\n    # We can derive the fifth term as a+b + a+2b = 2a+3b.\n    # Hence, the seventh term is 5a+8b.\n    seventh_term = (5 * solutions[a]) + (8 * solutions[b])\n    \n    return seventh_term\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let x be the total amount of grass the pasture initially has\n    # Let y be the amount of grass each cow eats per day\n\n    # According to the problem, we have two equations:\n    # 1) 8 cows * 10 days * y = x\n    # 2) 4 cows * 15 days * y = x\n\n    # From equation 1, we can express x as:\n    # x = 8 * 10 * y\n\n    # From equation 2, we can express x as:\n    # x = 4 * 15 * y\n\n    # Equating the two expressions for x gives:\n    # 8 * 10 * y = 4 * 15 * y\n    # Simplifying, we get:\n    # 2 * y = 3 * y\n    # This simplification shows that the total amount of grass the pasture initially has (x) is constant and does not depend on y\n\n    # We are asked to find out how many cows the pasture can feed for 5 days.\n    # Let's call this number of cows z.\n    # z cows * 5 days * y = x\n\n    # We can now use the known value of x from equation 1 to solve for z:\n    # z * 5 * y = 8 * 10 * y\n    # z = (8 * 10) / 5\n    # z = 16\n\n    # So the pasture can feed 16 cows for 5 days.\n    z = (8 * 10) / 5\n    return z\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # When n identical rectangles are placed on a plane, they can divide the plane into at most R regions\n    # where R is given by the formula: R = n^2 + n + 1\n    # For 4 rectangles:\n    n = 4\n    R = n**2 + n + 1\n    return R\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    difference_eq = Eq(marion - ethan, -168)\n    \n    julie_salary = solve(difference_eq, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n    \n    total_salary = julie_salary + marion_salary + ethan_salary\n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_positions = 5\n    middle_position = 3\n    non_middle_positions = total_positions - middle_position\n\n    # Eddie can be in any of the non-middle positions (2 possibilities)\n    eddie_positions = non_middle_positions\n\n    # The remaining four family members can be in any order\n    remaining_family_permutations = factorial(total_positions - 1)\n\n    # Total ways they can line up is the product of the two\n    total_ways = eddie_positions * remaining_family_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B = symbols('A B', real=True, positive=True)\n    \n    initial_ratio_eq = Eq(A / B, 6 / 5)\n    later_ratio_eq = Eq((A + 180) / (B + 30), 18 / 11)\n    \n    solutions = solve((initial_ratio_eq, later_ratio_eq), (A, B))\n    \n    A_money, B_money = solutions[A], solutions[B]\n    total_original_money = A_money + B_money\n    \n    return total_original_money\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men can complete 1 job in 16 days\n    # 1 man can complete 1/24 of a job in 16 days\n    # Therefore, the work rate of 1 man is 1 / (24 * 16)\n    man_rate = 1 / (24 * 16)\n\n    # Similarly, 16 women can complete 1 job in 24 days\n    # 1 woman can complete 1/16 of a job in 24 days\n    # Therefore, the work rate of 1 woman is 1 / (16 * 24)\n    woman_rate = 1 / (16 * 24)\n\n    # Let's calculate the combined work rate for 10 men and 6 women\n    combined_rate = 10 * man_rate + 6 * woman_rate\n\n    # The number of days needed to complete the job is the inverse of the combined rate\n    days_needed = 1 / combined_rate\n\n    return days_needed\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total amount of money Hamid had\n    total_money = symbols('total_money')\n\n    # According to the question, we set up the equation\n    equation = Eq(total_money - total_money/3 - 56, 3*total_money/8)\n\n    # Solve the equation\n    solved_money = solve(equation, total_money)[0]\n\n    # Calculate how much Hamid spent altogether\n    spent_money = solved_money/3 + 56\n\n    return spent_money\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in sorted(permutations(range(1, 10))):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    relative_speed = eddie_speed + train_speed  # m/s\n    time_to_pass = 10  # s\n\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    for ops in product('+-*', repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        current_value = eval(expression)\n        max_value = max(max_value, current_value)\n    return max_value\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # speed in m/min\n\n    # Total distance to cover is the length of the train plus the bridge\n    total_distance = train_length + bridge_length\n\n    # Time is distance divided by speed\n    time = total_distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Total number of terms n\n    n = 60\n\n    # Sum of the first 5 numbers S_5\n    S_5_first = 10\n\n    # Average of the first 5 numbers (a_1 to a_5)\n    a_1_to_5_avg = S_5_first / 5\n\n    # Sum of the last 5 numbers S_5_last\n    S_5_last = 120\n\n    # Average of the last 5 numbers (a_56 to a_60)\n    a_56_to_60_avg = S_5_last / 5\n\n    # Average of all numbers is average of first and last 5 numbers average\n    a_avg = (a_1_to_5_avg + a_56_to_60_avg) / 2\n\n    # Sum of all numbers is average times the number of terms\n    S_total = a_avg * n\n\n    return S_total\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3  # Just need the remainder when divided by 3\n    return a\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    original_difference = 40\n    final_difference = 96\n\n    # Represent the transactions as equations\n    sam_after_giving = sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam)\n    peter_after_giving = peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam)\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam - peter, original_difference)\n\n    # Sam had 96 stickers more than Peter after the exchange\n    equation2 = Eq(sam_after_giving - peter_after_giving, final_difference)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current_age * 3, hazel_current_age + 12)\n    # On Hazel's 18th birthday, her mom will be three times her age then\n    equation2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    \n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        if peter_age == pip_age + pit_age:\n            return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    # total number of questions\n    total_questions = 12\n    # marks for correct and incorrect/unanswered questions\n    correct_marks = 8\n    incorrect_marks = -3\n    # total marks awarded\n    total_awarded = 63\n\n    # iterate over possible number of correct answers\n    for correct_answers in range(total_questions + 1):\n        # calculate the total marks that Jamie would have got\n        marks = correct_answers * correct_marks + (total_questions - correct_answers) * incorrect_marks\n        # if the calculated marks match the total awarded marks, we have the answer\n        if marks == total_awarded:\n            return correct_answers\n    return None\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_to_n = (n * (n + 1) // 2)\n    ans = sum_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate the number of terms in the sequence\n    num_rows = (last_term - first_term) // difference + 1\n    \n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = num_rows * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible consecutive numbers (1-2, 2-3, ..., 12-13).\n    # By the Pigeonhole Principle, one must draw one more than the number of these pairs.\n    num_pairs = 13\n    # Since we want to ensure that two cards with consecutive numbers can be drawn,\n    # we need to draw at least 1 more than the number of pairs.\n    cards_to_draw = num_pairs + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    sheet_number = 5\n    pages_per_sheet = 4\n    back_page_number = 36\n    total_sheets = back_page_number / pages_per_sheet  # total number of sheets\n\n    # on each sheet, the first page number is (total_sheets - current_sheet) * 2 + 1\n    first_page = (total_sheets - sheet_number) * 2 + 1\n    # the other page number on the same side as the first page is the first_page + 2\n    second_page = first_page + 2\n    # the sum of the page numbers on one side of the sheet\n    one_side_sum = first_page + second_page\n\n    # the sum on the other side of the sheet is just the pages_per_sheet subtracted from the sum of the two highest page numbers\n    other_side_sum = back_page_number + (back_page_number - 1) - one_side_sum\n\n    # total sum of the page numbers on the sheet\n    total_sum = one_side_sum + other_side_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let x be the number of laptops and c be the initial cost per laptop.\n    # Selling price of each laptop: 2000\n    # Initial profit: 60000\n    # Profit after decrease in cost: 60000 * 1.3 (30% increase)\n    # Decrease in cost per laptop: c * (1/5)\n    # New cost per laptop: c - c * (1/5) = 4c/5\n\n    # Initial situation profit equation: x * (2000 - c) = 60000\n    # New situation profit equation: x * (2000 - 4c/5) = 60000 * 1.3\n\n    # From the initial situation equation, we can express c in terms of x:\n    # c = (2000x - 60000) / x\n    \n    # Substituting c into the new situation equation:\n    # x * (2000 - 4 * ((2000x - 60000) / x) / 5) = 60000 * 1.3\n    # Simplify to solve for x:\n    x = symbols('x')\n    initial_profit = 60000\n    selling_price_per_laptop = 2000\n    new_profit = initial_profit * 1.3\n    cost_per_laptop = (selling_price_per_laptop * x - initial_profit) / x\n    new_cost_per_laptop = cost_per_laptop - cost_per_laptop / 5\n    \n    equation = Eq(x * (selling_price_per_laptop - new_cost_per_laptop), new_profit)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_solution_weight = sugar_weight + water_weight\n    concentration_percentage = (sugar_weight / total_solution_weight) * 100\n    return concentration_percentage\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boys_more = 36\n    total_students = 0\n\n    for girls in range(1000):  # Assuming the max count of girls could not be more than 1000\n        boys = girls + boys_more\n        total_students = boys + girls\n        # Since boys are on the outer layer, the number of boys forms a square of side n\n        # and girls are on the inner layer, forming a square of side n-2 (since a layer of boys is around the girls)\n        if (int(boys ** 0.5))**2 == boys and int((girls ** 0.5))**2 == girls and boys ** 0.5 - girls ** 0.5 == 2:\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # Since the LCM of 7 and 28 is 28, 'a' must be less than 28 to prevent overlap with 28's multiples\n        for r1 in range(7):\n            for d in range(1, 7):  # The difference 'd' must be less than 7 to keep the arithmetic pattern within the bounds of the remainders\n                r2 = r1 + d\n                r3 = r1 + 2 * d\n                r4 = r1 + 3 * d\n                if r2 < 9 and r3 < a and r4 < 28:\n                    m7 = 7 * k + r1\n                    m9 = 9 * k + r2\n                    ma = a * k + r3\n                    m28 = 28 * k + r4\n                    if m7 == m9 == ma == m28:\n                        return m7  # Since all equations equal 'M', we return any of them as the smallest 'M'\n                    \n    return -1  # Return -1 if no such 'M' is found\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    men_initial = 3\n    time_initial = 2\n    length_initial = 120\n\n    men_final = 4\n    length_final = 880\n\n    # Using unitary method\n    # First we find how much trench one man can dig in one day\n    length_per_man_per_day = length_initial / (men_initial * time_initial)\n\n    # Then we calculate how many days it would take for four men to dig 880 metres\n    total_days = length_final / (length_per_man_per_day * men_final)\n\n    return total_days\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n\n    # total work done by Ellie in those 4 weeks\n    ellie_work = ellie_rate * combined_weeks\n\n    # remaining work to be done by Gloria\n    remaining_work = total_people - ellie_work\n\n    # rate at which Gloria works\n    gloria_rate = remaining_work / combined_weeks\n\n    # time taken by Gloria alone to finish the interview\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    # After giving 19 yuan, they both have 2019 yuan each.\n    xiao_hua_after = 2019\n    xiao_xia_after = 2019\n    \n    # Before giving the money, Xiao Hua had 19 yuan more.\n    xiao_hua_before = xiao_hua_after + 19\n    xiao_xia_before = xiao_xia_after\n    \n    # The difference before the transaction is\n    difference_before = xiao_hua_before - xiao_xia_before\n    \n    return difference_before\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    denominator = 15\n    numerator = (2 * denominator) / 5\n    return int(numerator)\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # total number of books initially on the first and second shelf\n    books_on_first_shelf = 18\n    books_on_second_shelf = 24\n    \n    # use a variable x for the number of books moved from the first shelf to the second shelf\n    # after moving x books, the first shelf will have (18 - x) books\n    # and the second shelf will have (24 + x) books\n    # according to the question, the second shelf should have twice as many books as the first shelf\n    # so the equation becomes (24 + x) = 2 * (18 - x)\n    \n    # Solve the equation for x\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # Calculations in fractions\n    numerator = (285 + 6/7) + (181 + 10/11) + (153 + 12/13)\n    denominator = (1/7) + (1/11) + (1/13)\n    \n    # Calculate final answer\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # 5 pupils are in the band\n    band = 5\n    # 3/4 of the remaining pupils are in the choir\n    choir = (3/4) * (x - band)\n    # 2/9 of the class are neither in the band nor the choir\n    neither = (2/9) * x\n    \n    # Setting up the equation for pupils in the choir and those neither in the choir nor the band\n    equation = Eq(x - band - choir, neither)\n    \n    # Solving for x\n    total_pupils = solve(equation, x)\n    \n    return total_pupils[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_taken = 20  # time taken in seconds\n    distance = 300  # distance of the bridge in meters\n\n    speed = distance / time_taken  # speed = distance / time\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_with_4 = 32\n    lollipops_left_with_7 = 3\n\n    # We begin by trying different number of boxes to satisfy both conditions.\n    # We start from 1 because he has to fill at least one box.\n    boxes = 1\n    while True:\n        lollipops_with_4 = boxes * 4 + lollipops_left_with_4\n        lollipops_with_7 = (boxes - 1) * 7 + lollipops_left_with_7\n        \n        if lollipops_with_4 == lollipops_with_7:\n            return lollipops_with_4\n        boxes += 1\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    for long_tubes in range(total_balls // long_tube_capacity + 1):\n        for short_tubes in range(total_balls // short_tube_capacity + 1):\n            if long_tubes * long_tube_capacity + short_tubes * short_tube_capacity == total_balls:\n                return long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # Calculate the eleventh term\n    eleventh_term = third_term + (11 - 3) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Define a function to compute the sum of cubes of the series of numbers skipping every third number\n    def sum_series_skipping_third(n):\n        # Compute the sum of the series without skipping\n        sum_of_series = (n * (n + 1) // 2) ** 2\n        # Compute the sum of cubes of numbers to be skipped\n        sum_of_skipped = ((n // 3) * ((n // 3) + 1) // 2) ** 2\n        # Return the sum of the series minus the sum of the skipped numbers\n        return sum_of_series - 3 * sum_of_skipped\n\n    # Since 14 is the last term in the series (14 // 3 = 4 skips i.e., 3, 6, 9, 12 are skipped)\n    ans = sum_series_skipping_third(14)\n\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the true result.\n    # If Will forgets to put down the decimal point of 4.32, it becomes 432.\n    # So the incorrect calculation is 432 * x = 2138.4 + x (because the result is greater by 2138.4)\n    # Rearranging gives us:\n    # 432 * x - x = 2138.4\n    # (432 - 1) * x = 2138.4\n    # 431 * x = 2138.4\n    # x = 2138.4 / 431\n\n    true_result = 2138.4 / 431\n\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # We first find the difference between the numbers as they leave the same remainder when divided by A\n    num1 = 2758 - 2017  # Difference between second and first number\n    num2 = 3670 - 2017  # Difference between third and first number\n    \n    # The number A must be a divisor of the differences between the numbers\n    # To find the common divisors, we can use the greatest common divisor (GCD) function\n    from math import gcd\n    \n    # Find GCD of the differences, which will give us the highest possible value of A\n    gcd_val = gcd(num1, num2)\n    \n    # Find all divisors of the gcd_val (excluding 1 and the number itself, as the problem specifies different remainders)\n    possible_As = [i for i in range(2, gcd_val // 2 + 1) if gcd_val % i == 0] + [gcd_val]\n    \n    # Sum the possible values of A\n    sum_possible_As = sum(possible_As)\n    return sum_possible_As\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_candies = 448\n    extra_girls = 8\n\n    equation1 = Eq(boys * 5 + girls * 3, total_candies)\n    equation2 = Eq(girls - boys, extra_girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] + solutions[girls]\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let's denote the number of bracelets Felicia had originally as F.\n    from sympy import symbols, Eq, solve\n\n    # Variables for Felicia's original bracelets (F) and the number bought by Janice (B)\n    F, B = symbols('F B')\n    \n    # Equation based on the problem description:\n    # Janice bought 2/5 of the bracelets that Felicia sold, which is 3/5 of Felicia's bracelets (B = 2/5 * 3/5 * F).\n    # After selling, Felicia has 2/5 of her original bracelets (2/5 * F).\n    # Janice had 96 bracelets initially and bought B from Felicia.\n    # The new ratio of Felicia's to Janice's bracelets is 5:7 (2/5 * F) / (96 + B) = 5/7.\n    \n    # Setting up the equation based on these relationships\n    eq1 = Eq(B, 2/5 * 3/5 * F)\n    eq2 = Eq((2/5 * F) / (96 + B), 5/7)\n    \n    # Solving both equations\n    solutions = solve((eq1, eq2), (F, B))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of milk candies, y be the original number of fruit candies\n    x, y = symbols('x y')\n\n    # Original ratio of milk candy to fruit candy -> 7/9 = x/y\n    eq1 = Eq(7*y, 9*x)\n\n    # After eating 8 milk candies, the new ratio becomes -> 2/3 = (x-8)/y\n    eq2 = Eq(2*y, 3*(x-8))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Return the original number of milk candies\n    return solutions[x]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n\n    # Mum's age in 1996\n    mum_age_1996 = 40\n\n    # Calculate the year when mum was born by subtracting her age as of 1996 from the year 1996\n    mum_birth_year = 1996 - mum_age_1996\n\n    # Calculate the year when grandmother was 80\n    grandmother_year_when_80 = 2008\n\n    # Calculate the grandmother's age when mum was born by subtracting mum's birth year from the year when grandmother was 80\n    grandmother_age_when_mum_born = grandmother_year_when_80 - mum_birth_year\n\n    # Subtract grandmother's age in 2008 from her age when mum was born to find her age at that time\n    grandmother_age_mum_born = grandmother_age_2008 - grandmother_age_when_mum_born\n\n    return grandmother_age_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 23):\n        count += str(number).count('3')\n    position = count + 1 # +1 because we are considering the digit '3' in number 23 itself\n    return position\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_given_initially = 4\n    total_apples_initially = 60\n    number_of_friends = total_apples_initially // apples_given_initially\n\n    apples_given_after = apples_given_initially + 1\n    total_apples_needed = number_of_friends * apples_given_after\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # He could take out all red and black socks without getting a white pair.\n    max_red_black = 10 + 10 \n    # Then he takes two white socks to be sure to have a pair.\n    white_pair = 2 \n    ans = max_red_black + white_pair\n    return ans\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Let the sum of the first three numbers be x\n    # Average of the first three numbers is 60, so x/3 = 60\n    x = 3 * 60\n    \n    # Average of all four numbers is 90\n    # The sum of all four numbers is 4 * 90\n    total_sum = 4 * 90\n    \n    # The fourth number is total_sum - sum of the first three numbers\n    fourth_number = total_sum - x\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Let x be the number of lemonade bottles, y be the number of \"1000 Plus\" bottles\n    # We have two equations:\n    # 4x + 7y = 2012 (Total income from selling the drinks)\n    # x + y <= 350 (He cannot sell more than the starting total)\n    # We're asked for the minimum y, we maximize x while satisfying the first equation.\n    \n    max_x = 2012 // 4  # Maximum possible x if he only sold lemonade bottles\n    remaining_income = 2012 - (4 * max_x)  # Remaining income to be reached by selling \"1000 Plus\" bottles\n    \n    # The minimum number of bottles of \"1000 Plus\" can be found by taking the smallest y such that 2012 = 4x + 7y is satisfied, starting from the maximum x and decreasing x until we find a solution where x is an integer.\n    while remaining_income % 7 != 0:\n        max_x -= 1\n        remaining_income = 2012 - (4 * max_x)\n    \n    min_y = remaining_income // 7  # The minimum number of \"1000 Plus\" bottles\n\n    return min_y\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since A, B, and C represent distinct digits and form a 3-digit number ABC, \n    # we iterate over possible values for A (1-9) and B and C (0-9) considering \n    # that A cannot be 0 (because ABC is a 3-digit number).\n\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and A != C and B != C:  # Check if all digits are different\n                    ABC = 100 * A + 10 * B + C    # Construct the 3-digit number\n                    return ABC  # As soon as you find a valid ABC number, return it\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the original price of the handbag as hb and purse as p\n    hb, p = symbols('hb p')\n    \n    # After a discount of 20%, Alicia bought the handbag for $428\n    # So, the original price of the handbag is hb - 0.20 * hb = $428\n    equation1 = Eq(hb - 0.20 * hb, 428)\n    \n    # The total discount for the handbag and the purse was $121\n    # So, discount for handbag is 0.20 * hb and purse is 0.28 * p\n    # The sum of the discounts is $121\n    equation2 = Eq(0.20 * hb + 0.28 * p, 121)\n    \n    # We solve the system of equations to find the original price of the purse\n    solutions = solve((equation1, equation2), (hb, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    i = 5\n    while n // i != 0:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "from itertools import permutations\n\ndef is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef form_numbers(digits):\n    for permutation in permutations(digits):\n        two_digit = int(''.join(permutation[:2]))\n        three_digit = int(''.join(permutation[2:5]))\n        four_digit = int(''.join(permutation[5:9]))\n        if is_perfect_square(two_digit) and is_perfect_square(three_digit) and is_perfect_square(four_digit):\n            return four_digit\n    return None\n\ndef solution():\n    digits = '123456789'\n    smallest_four_digit_square = form_numbers(digits)\n    return smallest_four_digit_square\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    advance_per_day = 4\n    slide_per_night = 1\n    net_advance_per_day = advance_per_day - slide_per_night\n    \n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += advance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Calculate the ratio of fish to packs of wheat through the given trade ratios.\n    # Owen traded 3 fish for 2 rabbits: 3 fish / 2 rabbits\n    # One rabbit is equivalent to 3/2 fish\n    # Oscar traded 3 rabbits for 4 packs of wheat: 3 rabbits / 4 packs of wheat\n    # Using the equivalent value of a rabbit in fish, 3 rabbits are equivalent to (3/2 * 3) fish.\n    # Therefore, we get the ratio of fish to packs of wheat as (3/2 * 3) fish / 4 packs of wheat\n    # Simplify the ratio of fish to packs of wheat\n    fish_to_wheat_ratio = (3 / 2 * 3) / 4\n\n    # Find how many fish Owen should give for 8 packs of wheat\n    # If 4 packs of wheat correspond to (3/2 * 3) fish, then 8 packs correspond to double the amount of fish\n    fish_for_eight_packs = fish_to_wheat_ratio * 2 * 8\n\n    return fish_for_eight_packs\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    number_of_weeks = 2\n    total_times = times_per_week * number_of_weeks\n    return total_times\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Total time spent running from 6:30 AM to 7:00 AM (in hours)\n    running_time = (7 - 6.5)\n    # Total time spent walking from 7:00 AM to 8:00 AM (in hours)\n    walking_time = (8 - 7)\n    \n    # Running speed in miles per hour\n    running_speed = 6\n    # Walking speed in miles per hour\n    walking_speed = 5\n\n    # Total running distance\n    running_distance = running_time * running_speed\n    # Total walking distance\n    walking_distance = walking_time * walking_speed\n\n    # Total distance travelled\n    total_distance = running_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    # Let's assume x groups have 4 students and y groups have 6 students.\n    # Then we can write two equations:\n    # 1. x + y = 24 (Total number of groups)\n    # 2. 4x + 6y = 112 (Total number of students)\n    # We can solve these equations to find the value of x and y.\n\n    # rearrange the first equation: y = 24 - x\n    # Substitute y in the second equation: 4x + 6(24 - x) = 112\n\n    # Now solve for x:\n    # 4x + 144 - 6x = 112\n    # 144 - 112 = 6x - 4x\n    # 32 = 2x\n    # x = 16 (number of groups with 4 students)\n\n    # Now find y:\n    # y = 24 - x\n    # y = 24 - 16\n    # y = 8 (number of groups with 6 students)\n\n    y = 8  # This is the number of groups with 6 students\n\n    return y\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had.\n    # After buying a chair for $120, he spent 40% of the remainder on a jacket.\n    # Finally, he is left with 30% of the original amount.\n    # So, we can set up the equation: x - 120 - 0.4 * (x - 120) = 0.3 * x\n    # Let's solve for x\n\n    x = symbols('x')\n    equation = Eq(x - 120 - 0.4 * (x - 120), 0.3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    books_in_most_filled_layer = (total_books + layers - 1) // layers\n    \n    return books_in_most_filled_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Initial average price and the new average price\n    initial_avg = 3.50\n    new_avg = 4\n    \n    # Price of the 2 new books and the quantity of books Ahmad originally bought\n    new_books_price_each = 6\n    new_books_quantity = 2\n    \n    # Let x be the number of books Ahmad originally bought\n    x = symbols('x')\n    \n    # The total cost for the original books at the initial average price\n    total_initial_cost = x * initial_avg\n    \n    # Equation for the new total cost, which includes the price of the new books\n    total_new_cost = total_initial_cost + new_books_price_each * new_books_quantity\n    \n    # Equation for the total number of books after buying the additional books\n    total_books = x + new_books_quantity\n    \n    # The equation that represents the new average price after buying the additional books\n    equation = Eq(total_new_cost / total_books, new_avg)\n    \n    # Solve the equation for x\n    solved_books = solve(equation, x)\n    \n    # Calculate the total number of books\n    total_books_qty = solved_books[0] + new_books_quantity\n\n    return total_books_qty\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    day1 = x / 4 + 2\n    remaining_after_day1 = x - day1\n    day2 = remaining_after_day1 * (2/5) + 3\n    remaining_after_day2 = remaining_after_day1 - day2\n    day3 = remaining_after_day2 * (2/3)\n    remaining_after_day3 = remaining_after_day2 - day3\n    equation = Eq(remaining_after_day3, 6)\n    initial_mooncakes = solve(equation, x)[0]\n    return initial_mooncakes\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n    \n    # Convert total weight to grams\n    total_weight_g = total_weight_kg * 1000\n    \n    # Calculate the number of pieces\n    num_pieces = total_weight_g / piece_weight_g\n    \n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Conversion factors\n    liters_to_quarts = 1.05669  # 1 liter = 1.05669 quarts\n    \n    # Hannah's Coke amount in quarts\n    coke_in_quarts = 2.5 * liters_to_quarts\n    \n    # Cup capacity in quarts\n    cup_capacity_quarts = 0.5\n    \n    # Calculate the number of cups Hannah can drink\n    num_cups = coke_in_quarts / cup_capacity_quarts\n    \n    # Round to nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len(set([A, 2, 0, C, E, F])) == 6:  # All digits must be different\n                        num1 = int(f\"5{A}20{C}E{F}\")\n                        num2 = int(f\"{E}{F}A20{C}\")\n                        if 5 * num1 == 6 * num2:\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the sequence is decreasing\n\n    # We can calculate the number of terms by finding the term which is just before becoming negative,\n    # which means the term is greater than zero and the next term is negative or zero.\n\n    # term_n = first_term + (n - 1) * difference\n    # 0 > first_term + (n - 1) * difference\n    # (n - 1) * difference < -first_term\n    # n - 1 < -first_term / difference\n    # n < -first_term / difference + 1\n\n    terms_before_negative = -first_term // difference + 1\n\n    return terms_before_negative\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Calculate the total time spent jogging from 6:30 am to 7:30 am\n    jogging_time = 1  # in hours\n\n    # Calculate the total time spent walking from 7:30 am to 9:30 am\n    walking_time = 2  # in hours\n\n    # Calculate the distance jogged\n    jogging_speed = 6  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance walked\n    walking_speed = 5  # in miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Calculate the total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n    equation1 = Eq(angel, 5/6 * belle)\n    equation2 = Eq(angel - 58, 3/4 * belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money and y be the number of children\n    x, y = symbols('x y')\n\n    # There would be enough for each child to receive 70p if there was 20p more\n    equation1 = Eq(x + 20, 70 * y)\n\n    # If each child was to receive 60p, then £2.10 would be left over\n    equation2 = Eq(60 * y + 210, x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of pieces Rachel has, and\n    # a represent the original number of pieces Alice has.\n    r, a = symbols('r a')\n\n    # Equation 1: After giving 10 pieces, Rachel has 'r - 10' and Alice has 'a + 10';\n    # they should have the same amount of candy.\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: After eating 8 pieces each, Rachel has 'r - 8' and Alice has 'a - 8';\n    # Rachel then has 3 times the amount of candy Alice has.\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total original number of candies is r + a\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    # The total number of carnations is 10\n    # Since every vase has at least 1 carnation, we subtract 3 from 10, leaving 7 carnations to distribute\n    # The 7 remaining carnations need to be split into 3 distinct groups\n    for v1 in range(1, 8):\n        for v2 in range(1, 8):\n            for v3 in range(1, 8):\n                # Check if all vases have a different number of carnations and sum to 7 (since 1 carnation is already in each vase)\n                if v1 + v2 + v3 == 7 and len({v1, v2, v3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_balance = -76.20\n    payment = 120.75\n\n    final_balance = initial_balance + payment\n\n    return final_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2023-03-02', '%Y-%m-%d')\n    end_date = datetime.strptime('2023-04-15', '%Y-%m-%d')\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 100000):\n            original_num = j * 10 + 9\n            new_num = int(str(9) + str(j))\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Given glove counts:\n    left_hand_blue = 1\n    left_hand_green = 2\n    right_hand_blue = 3\n    right_hand_green = 4\n\n    # Calculate the worst scenario by picking the maximum plus one of each color without getting a pair\n    # which is also equal to all gloves minus the highest count from one hand, because if we want to make sure to get a pair\n    # we could theoretically grab all gloves except the ones from the type that have the most, and then one more to force a pair.\n    max_gloves_without_pair = (left_hand_blue + left_hand_green + right_hand_blue + right_hand_green - max(right_hand_green, right_hand_blue)) + 1\n\n    return max_gloves_without_pair\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    increased_price = original_price + (original_price * increase_percentage)\n    return increased_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]  # Numbers given in the problem\n    mean_value = 6  # Mean of the numbers\n    num_of_numbers = 8  # Total number of numbers including the missing number\n\n    total_known_sum = sum(known_numbers)\n    total_expected_sum = mean_value * num_of_numbers\n\n    missing_number = total_expected_sum - total_known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    first_hole_interval = 3\n    second_hole_interval = 5\n    \n    # Number of holes already dug\n    holes_dug = 30\n    \n    # Distance already covered by the initial 30 holes\n    distance_covered = holes_dug * first_hole_interval\n\n    # Remaining distance to cover\n    remaining_distance = circumference - distance_covered\n\n    # Calculate how many more holes of 5m interval are needed\n    more_holes_needed = remaining_distance // second_hole_interval\n    if remaining_distance % second_hole_interval > 0:\n        more_holes_needed += 1\n    \n    return more_holes_needed\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    ways_to_step_5 = fib(5)  # Ways to reach the 5th step\n    ways_from_5_to_end = fib(6)  # Ways from 5th to 10th step (+1 to account for starting at step 5)\n\n    return ways_to_step_5 * ways_from_5_to_end\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n    \n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # Eddie is at the left end, Avril can either be second to the left (to the right of Eddie) or second to the right (to the left of Eddie)\n    # That is two possible positions for Avril\n    avril_positions = 2\n    \n    # There are 5 remaining students to arrange, which is equivalent to 5!\n    remaining_students_permutations = math.factorial(5)\n    \n    # Using the principle of multiplication \n    total_arrangements = avril_positions * remaining_students_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    i = 1\n    while True:\n        if i % 3 == 1 and i % 4 == 3 and i % 5 == 4:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum(page for page in range(1, 51) if '3' in str(page))\n    return erased_sum\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let rachel's sweets be 'r' and alice's sweets be 'a'\n    r, a = symbols('r a')\n\n    # Rachel gives Alice 10 sweets, and then they have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # They eat 8 sweets each, Rachel has 3 times what Alice has: (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "import itertools\n\ndef solution():\n    expressions = [\n        \"(15+5)*(5+(15-(6+7)))\",\n        \"((15+5)*5)+(15-(6+7))\",\n        \"(15+(5*5))+((15-6)+7)\",\n        \"15+((5*5)+(15-(6+7)))\",\n        \"(15+5)*5+(15-(6+7))\",\n        \"((15+5)*5+15)-(6+7)\",\n        \"15+(5*(5+(15-(6+7))))\",\n        \"15+5*((5+15)-(6+7))\"\n    ]\n    \n    max_result = None\n    max_expression = None\n    for expr in expressions:\n        result = eval(expr)\n        if max_result is None or result > max_result:\n            max_result = result\n            max_expression = expr\n    \n    return max_result\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 1\n    pages = 0\n    while total_digits > 0:\n        pages += 1\n        if pages >= 10**(digits_per_page):\n            digits_per_page += 1\n        total_digits -= digits_per_page\n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    ivan_total = ivan_average * 5\n    billy_average_first_four = 89\n    billy_total_first_four = billy_average_first_four * 4\n    billy_target_average = ivan_average + 10\n\n    # Target total score for Billy after 5 assignments\n    billy_target_total = billy_target_average * 5\n\n    # Billy's score for the fifth assignment\n    billy_fifth_score = billy_target_total - billy_total_first_four\n    \n    return billy_fifth_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n\n    num_pipes = pipe_length / each_pipe_length\n\n    return int(num_pipes) if pipe_length % each_pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Calculate the common difference from the given terms\n    common_difference = 44 - 39  # or 49 - 44\n    \n    # Calculate the first term using the 7th term (39 is the 7th term)\n    first_term = 39 - (7 - 1) * common_difference\n    \n    # Compute the 100th term\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260 into its prime factors\n    factors = factorint(1260)\n\n    # To make a square, each prime factor's exponent must be even\n    # We fill in any missing powers to make them even\n    m = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    number_of_peaches = 45\n    number_of_apples = 5 + 2 * number_of_peaches\n\n    return number_of_apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for cards in range(3, 1000, 28):  # Starting from 3, since 3 cards are left when divided by 4 and 7\n        if cards % 4 == 3 and cards % 7 == 3:\n            return cards % 28\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    # Calculate the number of full boats\n    full_boats = students // boat_capacity\n    \n    # Check if there is a need for an additional boat for the remaining students\n    if students % boat_capacity:\n        full_boats += 1\n        \n    return full_boats\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # The number of ways to write 1000 as the sum of two whole numbers\n    # is essentially counting how many pairs (x, y) exist such that x + y = 1000\n    # Since 1000 is an even number, there will be an odd number of such pairs.\n    # For example, (1, 999), (2, 998), ..., (500, 500), ..., (999, 1)\n    # The middle pair is when both numbers are the same (in this case, (500, 500))\n    # So there are 500 pairs before reaching the middle, and 500 pairs after, totalling 1001 pairs\n\n    return 1000 // 2 + 1\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    total_cost = 151.25 + 24.15\n    return total_cost\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    stickers_given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - stickers_given_away\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # Least common multiple of 8 and 11\n    for num in range(lcm, 100, lcm):  # Loop through multiples of lcm below 100\n        if (num - 6) % 8 == 0 and (num - 6) % 11 == 0 and 10 <= (num - 6) < 100:\n            return num - 6  # Subtract 6 to find the two-digit number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Since we are interested only in the ones digit,\n    # we will focus on the pattern of the ones digit of 9^n\n    # Observe the pattern for the ones digit: 9^1 -> 9, 9^2 -> 1, 9^3 -> 9, 9^4 -> 1, and so on.\n    # The ones digit alternates between 9 and 1 for odd and even powers of 9 respectively.\n\n    # We need to find the ones digit of 999^99 which is\n    # equivalent to finding the ones digit of 9^99 because\n    # the tens, hundreds, and other places do not affect the ones digit.\n\n    # 99 is an odd number, so the ones digit of 9 to any odd power will be 9.\n    ones_digit = 9\n\n    return ones_digit\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    ans = (2**2015) % 3\n    return ans\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # 4 pupils who insist on standing together can be considered as one unit.\n    # So now we have 5 units (4 pupils as one unit + the remaining 4 pupils)\n    # to arrange in a row.\n    # Hence, 5 units can be arranged in 5! ways.\n    units_arrangements = factorial(5)\n\n    # The 4 pupils within the unit can be arranged among themselves in 4! ways.\n    within_unit_arrangements = factorial(4)\n\n    # The total number of different ways to arrange the pupils:\n    total_arrangements = units_arrangements * within_unit_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    # Let x be the total value of the 5 other ponies\n    # Small stable initial average = (250000 + x/5) / 3\n    # Large stable initial average = x/5\n    # New average for both stables after Rein Beau moves = (250000 + x) / 6\n    # According to the condition given: new average = old average + 10000 for both stables\n    # Hence, (250000 + x) / 6 = (250000 + x/5) / 3 + 10000 and (250000 + x) / 6 = x/5 + 10000\n    # We solve the two equations to find the value of x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation1 = Eq((250000 + x) / 6, (250000 + x / 5) / 3 + 10000)\n    equation2 = Eq((250000 + x) / 6, x / 5 + 10000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # Total value of all six ponies is the value of 5 ponies plus Rein Beau\n    total_value = solutions[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Step 5: Add 50 (reverse of subtracting 50)\n    step4 = result + 50\n    # Step 4: Divide by 2 (reverse of adding the day of birth twice)\n    step3 = step4 // 2\n    # Step 3: Divide by 50 (reverse of multiplying by 50)\n    step2 = step3 // 50\n    # Step 2: Subtract 1 (reverse of adding 1)\n    step1 = step2 - 1\n    # Step 1: Divide by 4 (reverse of multiplying by 4)\n    month = step1 // 4\n    # Calculate the day of birth\n    day = step3 - (50 * step2)\n    \n    # Returning the birthday as a tuple (month, day)\n    return (month, day)\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    \n    concentration = (sugar / total_mixture) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Three consecutive numbers can be written as x, x+1, and x+2\n    # Their sum is given as 60, so x + (x+1) + (x+2) = 60\n    # Combining like terms, we get 3x + 3 = 60\n    # Simplifying further, we get 3x = 57\n    # Dividing by 3 to solve for x, we obtain x = 19\n    x = 19\n    # The largest of the three numbers is x+2\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n\n    total_cost = (lamb_price_per_kg * 7) + (beef_price_per_kg * 30)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work rate of a master per day\n    # Let a be the work rate of an apprentice per day\n    m, a = symbols('m a')\n\n    # 1 master and 3 apprentices complete the task in 4 days\n    # (1*m + 3*a) * 4 = 1 task\n    equation1 = Eq((1 * m + 3 * a) * 4, 1)\n\n    # 2 masters and 1 apprentice complete the task in 3 days\n    # (2*m + 1*a) * 3 = 1 task\n    equation2 = Eq((2 * m + 1 * a) * 3, 1)\n\n    # Solve for m and a\n    rates = solve((equation1, equation2), (m, a))\n\n    # Find how long it will take 1 apprentice to complete the task\n    # 1*a * time = 1 task\n    apprentice_time = 1 / rates[a]\n\n    return apprentice_time\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Fraction of the spectators that were not children\n    fraction_non_children = 1 - 1/3\n    \n    # Fraction of the non-children that were men\n    fraction_men_among_non_children = 5/8\n    \n    # Therefore, the fraction of the total spectators that were men\n    fraction_men_total = fraction_non_children * fraction_men_among_non_children\n    \n    # Fraction of the total spectators that were women\n    fraction_women_total = 1 - (1/3 + fraction_men_total)\n    \n    # Total number of spectators\n    total_spectators = 80 / fraction_women_total\n    \n    return round(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the given examples, we can try to deduce the operation rule.\n    # Looking at the examples, it seems that the operation ★ produces a result by:\n    # - If the first number is greater than the second, multiply the second number by itself and then add the first\n    #   (as seen in 6★3=15, which is 3*3 + 6)\n    # - If the second number is greater than the first, just return the first number\n    #   (as seen in 2★5=5, which is just 5)\n    # - If the numbers are equal, the operation is to double the first number and subtract the second\n    #   (this is not demonstrated but it's a hypothesis given the pattern)\n    \n    # Define the new operation based on the above observation\n    def star_op(a, b):\n        if a > b:\n            return b * b + a\n        elif a < b:\n            return a\n        else:\n            return 2 * a - b\n    \n    # Calculate 11★10 using the new operation\n    return star_op(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant_left = 10\n    position_rabbit_right = 9\n    dolls_between = 5\n\n    total_dolls = position_elephant_left + position_rabbit_right - 2 + dolls_between\n\n    return total_dolls\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's denote the number of gold medals as g,\n    # and the number of silver medals as s.\n    # We have the following system of equations:\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n\n    # We can solve this system of equations using substitution or elimination.\n    # Let's use elimination:\n\n    # Multiply the second equation by 4:\n    # 4g + 4s = 320\n    # Subtract this from the first equation:\n    # 5g + 4s - (4g + 4s) = 331 - 320\n    # g = 11\n\n    # The number of gold medals won (g) is 11.\n    \n    g = (331 - 4 * 80) / (5 - 4)\n    return int(g)\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    num_students = 0\n    for boys in range(1, 1000, 2):\n        girls = boys - 2\n        if girls < 1:\n            girls = 0\n        total_boys = boys * boys\n        total_girls = girls * girls\n        if total_boys - total_girls == 32:\n            num_students = total_boys + total_girls\n            break\n\n    return num_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of roses originally in the park\n    # Let d represent the number of daisies originally in the park\n    # Let m represent the number of months passed\n    r, d, m = symbols('r d m', integer=True)\n\n    # We have three equations based on the problem statement\n    equation1 = Eq(r + d, 300) # Initially, there are 300 roses and daisies\n    equation2 = Eq(r + m, 280) # After m months, we have 280 roses\n    equation3 = Eq(d + m, 180) # After m months, we have 180 daisies\n\n    # Use sympy.solve to find the solutions\n    solutions = solve((equation1, equation2, equation3), (r, d, m))\n\n    # Return the number of roses originally in the park\n    return solutions[r]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    return sum(primerange(50, 61))\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given terms in an arithmetic sequence\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Using the formula for the nth term in an arithmetic sequence: nth_term = a1 + (n-1)*d\n    # where a1 is the first term and d is the common difference. We need to find a1 first.\n    first_term = tenth_term - (10 - 1) * common_difference\n    \n    # Calculate the 102nd term in the sequence\n    nth_term = first_term + (102 - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    rows_from_front_or_back = 3\n    columns_from_left_or_right = 4\n    total_people = (2 * rows_from_front_or_back - 1) * (2 * columns_from_left_or_right - 1)\n    return total_people\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    \n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n    \n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    total_shots = 10\n    accurate_shots = 6\n    lost_shots = 4\n    score_per_accurate_shot = 5\n\n    total_score = accurate_shots * score_per_accurate_shot\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "from itertools import combinations\n\ndef solution():\n    children = 8\n    apples = 50\n    distribution = range(1, apples)\n\n    for max_apples in distribution:\n        for combo in combinations(distribution, children - 1):\n            if sum(combo) <= apples - 1 and len(set(combo)) == children - 1:\n                if apples - sum(combo) <= max_apples and apples - sum(combo) not in combo:\n                    return max_apples\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_and_comics = total_books - english_books\n\n    # Let's denote the number of comics as \"comics\"\n    # and the number of Chinese books as \"chinese_books\"\n    # According to the problem, chinese_books = 2 * comics\n\n    # Now, we can write an equation:\n    # chinese_books + comics = chinese_books_and_comics\n    # 2 * comics + comics = chinese_books_and_comics\n    # 3 * comics = chinese_books_and_comics\n    # comics = chinese_books_and_comics / 3\n\n    comics = chinese_books_and_comics // 3\n\n    return comics\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3*apple + 5*orange, 270)\n    equation2 = Eq(3*apple + 7*orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    with_bow_ties = 18\n    with_spectacles = 23\n    \n    # The maximum number of men that are not wearing either must be the total\n    # minus the minimum number that could be wearing both, which would maximize\n    # the ones not wearing either.\n    max_wearing_both = min(with_bow_ties, with_spectacles)\n    max_neither = total_men - (with_bow_ties + with_spectacles - max_wearing_both)\n    \n    return max_neither\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Simplify the first complex fraction\n    numerator_1 = (1/30) + (1/6)\n    denominator_1 = 2/25\n    complex_fraction_1 = numerator_1 / denominator_1\n\n    # Simplify the second complex fraction\n    numerator_2 = 2 - (2/3)\n    denominator_2 = 8/3\n    complex_fraction_2 = numerator_2 / denominator_2\n\n    # Add both simplified complex fractions\n    ans = complex_fraction_1 + complex_fraction_2\n\n    return ans\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 350 * 0.20 * 0.50\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, blue, green = symbols('red blue green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    ans = (1 / 3) * 414\n    return ans\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since no two children can have the same number of apples,\n    # we assign the minimum number of apples to the first four children,\n    # which would be 1, 2, 3, and 4 apples respectively.\n    # We then calculate the maximum number of apples for the fifth child.\n\n    first_four_children = sum(range(1, 5))  # Sum of 1+2+3+4\n    max_apples_for_fifth = 19 - first_four_children  # Remaining apples for the fifth child\n    \n    return max_apples_for_fifth\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    group_count = factorial(3)   # Ali and Bala as a single entity with Charles and Ella makes 3 \"entities\" to arrange\n    internal_arrange = factorial(2)  # Ali and Bala can switch places within their \"group\"\n    dan_position = 1  # Dan's position is fixed at the furthest left\n\n    total_arrangements = group_count * internal_arrange * dan_position\n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Ratio of fish to rabbits\n    fish_to_rabbit = 3 / 2\n    # Ratio of rabbits to packs of wheat\n    rabbit_to_wheat = 3 / 4\n    # Find ratio of fish to packs of wheat by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n    # Since Dennis needs 8 packs of wheat, we find how many fishes Owen should give\n    fishes_for_eight_wheat = 8 / fish_to_wheat\n    return fishes_for_eight_wheat\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    # Since we need at least two non-zero natural numbers to sum up to 8,\n    # we can iterate from 2 to 8 to get the number of addends.\n    for i in range(2, 9):\n        # For each number of addends, count the ways to partition 8 into that many parts.\n        # This is equivalent to finding the number of integer compositions of 8,\n        # and then subtracting the number of compositions that include 0, which is not allowed.\n        # Using stars and bars method: we place (i - 1) bars in the (8 - 1) spaces between the 8 stars.\n        compositions = math.comb(8 - 1, i - 1)\n        \n        # Now we subtract the compositions where one part is zero. For each of the i - 1 dividers,\n        # we can choose it to be the one breaking the sequence and creating a zero, but we must\n        # leave at least one number before and after the sequence to ensure non-zero parts.\n        compositions_with_zero = (i - 1) * math.comb(8 - 3, i - 2)\n        \n        # Subtract the invalid compositions from the total compositions\n        valid_compositions = compositions - compositions_with_zero\n        count += valid_compositions\n\n    return count\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    def count_digits(n):\n        # count the number of digits for numbers from 1 to n\n        count = 0\n        for i in range(1, n+1):\n            count += len(str(i))\n        return count\n\n    ans = count_digits(140)\n    return ans\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for num in range(10, 100):\n        subtrahend_wrong = int('5' + str(num % 10))\n        subtrahend_correct = int('3' + str(num % 10))\n        difference_wrong = num - subtrahend_wrong\n        if difference_wrong == 36:\n            correct_difference = num - subtrahend_correct\n            return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Worst case scenario: picking all balls of the most abundant color plus one more of each of the other colors\n    red_balls = 15\n    white_balls = 9\n    yellow_balls = 6\n\n    # If we pick all white balls, we are still not sure to have a yellow or red ball\n    # We need to pick at least one red and one yellow to have three different coloured balls\n    must_drawn = white_balls + 1 + 1\n\n    return must_drawn\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    fence_length = 3.2\n    wood_stabilizer_length = 6.5\n\n    remaining_length = total_length - fence_length - wood_stabilizer_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of available digits\n    digits = [2, 7, 8]\n\n    # Generate all permutations of three different digits\n    perm = permutations(digits, 3)\n\n    # Count the number of permutations\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    uphill_speed = 2\n    downhill_speed = 6\n\n    # the average speed for a round trip is defined as total distance divided by total time\n    # since the distance uphill and downhill is the same (let's call it d), we can calculate total time as:\n    # time_uphill = d/uphill_speed and time_downhill = d/downhill_speed\n    # average_speed = (2*d) / (time_uphill + time_downhill)\n\n    # However, to avoid dealing with the unknown distance d, which will cancel out, we use the harmonic mean formula\n    # average_speed = 2 / (1/uphill_speed + 1/downhill_speed)\n    average_speed = 2 / (1/uphill_speed + 1/downhill_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let T be the variable we are looking for\n    T = symbols('T')\n    \n    # Calculate the tax for the first $50000\n    tax_for_first_50000 = 0.06 * 50000\n    \n    # Calculate the tax for the amount above $50000\n    # The total income is $120000, so the amount above $50000 is $120000 - $50000\n    tax_for_rest = (0.06 + T / 100) * (120000 - 50000)\n    \n    # The doctor noticed that the income tax he paid was $10000\n    equation = Eq(tax_for_first_50000 + tax_for_rest, 10000)\n    \n    # Solve for T\n    solution = solve(equation, T)\n    \n    # Return the value of T\n    return solution[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Using digits from 0 to 9 to form two 5-digit numbers\n    # The smallest possible difference would be when one number is the smallest possible\n    # and the other is the next higher number that can be formed with the remaining digits.\n    \n    # The smallest 5-digit number possible with distinct digits\n    smallest_num = 10234  # This uses the smallest non-zero digit in the thousands place\n    \n    # The next higher number using the remaining digits\n    next_num = 98765  # This uses the remaining largest digits in descending order\n    \n    # The difference\n    difference = next_num - smallest_num\n\n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    presents = ['P1', 'P2', 'P3', 'P4', 'toy_car', 'puzzle', 'calculator']  # P1-P4 are the other presents\n    count = 0\n\n    # Permutations of presents\n    for perm in permutations(presents, 5):\n        # Assign presents to children\n        richard_present, kevin_present = perm[0], perm[1]\n\n        # Check Richard's condition\n        if richard_present not in ['toy_car', 'puzzle']:\n            continue\n\n        # Check Kevin's condition\n        if kevin_present not in ['toy_car', 'calculator']:\n            continue\n\n        # If conditions are satisfied, increment count\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    # Define counters for each possible ending digit of the 6-digit number\n    count_0 = 1  # We start with 1 way to have a number ending with 0\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n\n    # Since we have a 6-digit number, repeat the process 5 times (excluding the first digit)\n    for _ in range(5):\n        # A new count_0 can only come from a previous count_3\n        # A new count_1 can only come from a previous count_0\n        # A new count_2 can only come from a previous count_1\n        # A new count_3 can come from either a previous count_2 or count_3\n        new_count_0 = count_3\n        new_count_1 = count_0\n        new_count_2 = count_1\n        new_count_3 = count_2 + count_3\n\n        # Update the counts\n        count_0, count_1, count_2, count_3 = new_count_0, new_count_1, new_count_2, new_count_3\n\n    # The total number of 6-digit sequences is the sum of all possibilities ending with each digit\n    total_count = count_0 + count_1 + count_2 + count_3\n    return total_count\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # Train length in meters\n    tunnel_length = 500  # Tunnel length in meters\n    speed = 10  # Train speed in meters per second\n\n    total_distance = train_length + tunnel_length  # Total distance to cover\n    duration = total_distance / speed  # Time taken to cover the total distance\n\n    return duration\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    pounds_in_pence = 100\n    money_given = pounds_in_pence\n    \n    change = money_given - total_cost\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    # Start with a reasonable number given that there are prime gaps increasing as numbers get larger\n    n = 1\n    while True:\n        # Check if all numbers in the series are prime\n        if (isprime(n) and\n            isprime(n + 4) and\n            isprime(n + 6) and\n            isprime(n + 132) and\n            isprime(n + 250)):\n            return n  # If all conditions are met, return n.\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # grams\n    sugar_percentage = 0.15  # 15%\n\n    sugar_weight = total_weight * sugar_percentage\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    # Jack's speed\n    speed_jack = 15 # km/h\n    # Rose's speed\n    speed_rose = 10 # km/h\n    # Time they meet\n    time_meet = 10 # hours\n\n    # Relative speed between Jack and Rose\n    relative_speed = speed_jack - speed_rose\n    \n    # Distance between Town A and Town B\n    distance = relative_speed * time_meet\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2 * i + 2) ** 2 - (2 * i) ** 2 for i in range(1, 2021 // 2))\n    return ans\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiples_of_7 = 5000 // 7\n    multiples_of_13 = 5000 // 13\n    multiples_of_7_and_13 = 5000 // (7 * 13)\n\n    return (multiples_of_7 + multiples_of_13) - multiples_of_7_and_13\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the prices of each rabbit\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(rabbit2, rabbit1 + 2)  # Second rabbit costs £2 more than the first\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)  # Third rabbit costs 80p less than the second\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)  # Total cost of three rabbits\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n    \n    return solutions[rabbit1]  # Cost of the first rabbit\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    ans = (3 - remainder) % 3\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total = factorial(7) // (factorial(3) * factorial(2))  # Total arrangements of \"SUCCESS\"\n\n    # To calculate the arrangements with two 'S's together\n    total_ss = factorial(6) // (factorial(2) * factorial(2))  # Treat \"SS\" as one character\n\n    # Total arrangements with no two 'S's together\n    no_ss_together = total - (total_ss * 5) # There are 5 'S's in the word to arrange\n\n    return no_ss_together\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbol for the number of days Emma worked\n    emma_days = symbols('emma_days')\n\n    # Equation based on work done\n    equation = Eq(1/10 * (14 - emma_days) + 1/18 * emma_days, 1)\n\n    # Solve the equation\n    days_worked_by_emma = solve(equation, emma_days)\n\n    return days_worked_by_emma[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    money_left = 56\n    t_shirts_total = 145\n\n    # The money spent on 138 T-shirts.\n    money_spent = t_shirts_total * money_left / (t_shirts_total - t_shirts_bought)\n\n    # The total money Josephine had at first.\n    total_money = money_spent + money_left\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_squares = (n*(n+1)//2)**2\n    sum_of_numbers = n*(n+1)//2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The average (mean) of 14 consecutive even numbers is the 7th term\n    total_sum = 14 * 119  # Total sum of all the numbers\n    # Since the numbers are consecutive and even, the middle two numbers will be 118 and 120\n    # Their sum is 238, which means their average is 119, which is equal to the overall average.\n    # We want the smallest number, which is 6 numbers away from the middle number 118 downward.\n    # We subtract 6 * the difference (2 for even numbers), as they are even numbers.\n\n    smallest_number = 118 - (6 * 2)\n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Since heights are whole numbers, there are 132 - 124 + 1 = 9 possible heights.\n    possible_heights = 132 - 124 + 1\n\n    # If at least 4 students are of the same height, using the Pigeonhole principle,\n    # we can find the minimum class size by multiplying the number of \"pigeonholes\" (possible heights)\n    # by the number of students that need to be in one \"hole\" (same height) and subtracting 1.\n    # This ensures that there will be at least one pigeonhole (height) with 4 students.\n    min_students = (4 - 1) * possible_heights + 1\n\n    return min_students\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    total_pencils = 50\n    total_cost = 217\n    graphite_cost = 2\n    colored_cost = 5\n    \n    for graphite_pencils in range(total_pencils + 1):\n        colored_pencils = total_pencils - graphite_pencils\n        if graphite_cost * graphite_pencils + colored_cost * colored_pencils == total_cost:\n            return graphite_pencils\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel cuts one piece into 5 sections, meaning she makes 4 cuts in 12 minutes\n    cuts_needed = 4\n    time_per_cut = 12 / cuts_needed\n    \n    # To make 5 cuts, she'll simply need 1 more cut than before\n    total_cuts_for_5_times = 5\n    total_time_for_5_cuts = total_cuts_for_5_times * time_per_cut\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_in_pence = 126  # Total amount in pence\n    # Let x be the number of each type of coin\n    # The total amount in pence is then given by:\n    # 2p * x + 5p * x = 126\n    # Hence, 7x = 126\n    # Solving for x gives us the number of each type of coin\n    x = total_amount_in_pence // 7\n    \n    # Since there are an equal number of 2p and 5p coins, the total number of coins is:\n    total_coins = 2 * x  # We multiply by 2, because x is the number of each type of coin\n    \n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of a number is its last digit, which cycles every four powers for the number 3.\n    # We find which number in the cycle 2009 corresponds to.\n    cycle_length = 4\n    power_in_cycle = 2009 % cycle_length\n\n    # The cycle of the ones digits for powers of 3 is: 3, 9, 7, 1, and then it repeats.\n    # Since cycle starts at 3^1, we decrease power_in_cycle by 1 to align with the 0-based index in Python.\n    ones_digits = [3, 9, 7, 1]\n    ones_digit = ones_digits[power_in_cycle - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    fraction_girls = 1 - (5/9)\n    remaining_people = girls / fraction_girls\n    total_people = remaining_people / (1 - (2/5))\n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    i = 1\n    while True:\n        number = i**2\n        if number % 2 == 0 and number % 5 == 0:\n            return number\n        i += 1\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n\n    child_cost = 30\n    adult_cost = child_cost / (1 - child_discount)\n    senior_cost = adult_cost * (1 - senior_discount)\n\n    return senior_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables for the number of books each kid gets\n    a, b, c, d = symbols('a b c d')\n\n    # Each kid can get 0 to 20 books, satisfying a + b + c + d = 20\n    equation = Eq(a + b + c + d, 20)\n\n    # The number of non-negative integer solutions for this equation\n    # corresponds to the number of ways to distribute the books\n    # This can be calculated using the formula for combinations with repetition\n    # Also known as \"stars and bars\", the formula is (n + k - 1 choose k - 1)\n    # where n is the number of books and k is the number of kids\n    \n    # For this problem, n = 20 (books) and k = 4 (kids)\n    # So, we use (20 + 4 - 1 choose 4 - 1) => (23 choose 3)\n\n    from math import comb\n    ways = comb(23, 3)\n\n    return ways\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    target_men = 2\n\n    work_done_by_one_man = 1 / (men * days)\n    total_work_done = 1  # whole house is considered as one unit of work\n\n    days_taken_by_target_men = total_work_done / (work_done_by_one_man * target_men)\n\n    return days_taken_by_target_men\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (first_term + last_term) * num_terms // 2\n    return total_sum\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    return 3 * 4 * 2\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child must get at least 2 books, which means we allocate 2 books each initially.\n    books_allocated = 2 * 5\n    # Remaining books to distribute\n    remaining_books = 30 - books_allocated\n    \n    # Now we are to distribute the remaining books among 5 kids, which is a problem\n    # of distributing indistinguishable objects into distinguishable boxes.\n    # This is equivalent to the combinatorial problem of putting 'remaining_books' indistinguishable balls into\n    # 5 distinguishable boxes, which can be calculated using the formula for combinations with repetitions:\n    # (n + r - 1) choose (r), where n is the number of boxes, and r is the number of balls.\n    \n    # Using the formula:\n    ans = comb(remaining_books + 5 - 1, remaining_books)\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2 / 3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mason, mike - 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_liters = total_soup_ml / 1000\n\n    return total_soup_liters\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n    balance = principal * ((1 + rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n    \n    likes_either = (likes_one_direction + likes_the_vamps) - likes_both\n    likes_neither = total_girls - likes_either\n    \n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    num_trees = (road_length // interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coin denominations in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    susan_fare = 44\n    # We assume that Susan pays with the smallest number of coins that exceed the fare\n    # Therefore, we should attempt the combination with the largest coin possible each time\n    \n    # Find the smallest denomination Susan can pay with that exceeds the fare\n    for pay in coins:\n        if pay > susan_fare:\n            payment_coin = pay\n            break\n    \n    # Calculate the change to be returned to Susan\n    change = payment_coin - susan_fare\n    \n    # Calculate the smallest number of coins for the change\n    coin_count = 0\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            coin_count += 1\n            \n    # Adding the payment coin, total coins that change hands will be coin_count + 1\n    return coin_count + 1  # Including the payment coin\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    num_chairs_per_classroom = 28\n    total_chairs = num_classrooms * num_chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "from sympy import symbols, solve, Rational\n\ndef solution():\n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > Rational(505, 1000)\n    solution_set = solve(inequality, x)\n    return max(int(s) for s in solution_set if s.is_real and s < 47.5)\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    sum = 0\n    for i in range(1, 89, 2):\n        sum += (i+1) - i\n    return sum\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_after_transfer = total_pupils // 2  # Each room will have half of the total pupils after the transfer\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    operators = ['+', '-', '*', '/']\n    max_sum = float('-inf')\n    second_largest_term = None\n\n    for ops in permutations(operators):\n        terms = [\n            eval(f\"(1/2) {ops[0]} (1/9)\"),\n            eval(f\"(1/3) {ops[1]} (1/8)\"),\n            eval(f\"(1/4) {ops[2]} (1/7)\"),\n            eval(f\"(1/5) {ops[3]} (1/6)\")\n        ]\n        \n        current_sum = sum(terms)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = sorted(terms)[2] # second largest term\n            \n    A, B = second_largest_term.as_integer_ratio()\n    return A + B\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points on the circle, and each set of 3 points forms a triangle.\n    # A right angle can only be formed if one side of the triangle is a diameter of the circle.\n    # Since the circle is divided into 12 equal arcs, there are 6 diameters possible. \n    # Each diameter can determine a unique right-angled triangle by choosing one of the remaining 10 points.\n    # So for each diameter, there are 10 possible right-angled triangles.\n    # Since there are 6 diameters, the total number of right-angled triangles is 6 * 10.\n\n    num_diameters = 6\n    points_on_each_side = 10\n\n    number_of_triangles = num_diameters * points_on_each_side\n    return number_of_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    nth10 = 23\n    nth15 = 38\n    common_difference = (nth15 - nth10) / (15 - 10)\n    \n    nth12 = nth10 + common_difference * (12 - 10)\n    \n    return nth12\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    fractions = [\n        (1, 1 * 2),\n        (2, 2 * 4),\n        (3, 4 * 7),\n        (4, 7 * 11),\n        (5, 11 * 16),\n        (6, 16 * 22),\n        (7, 22 * 29),\n        (1, 29)\n    ]\n    \n    ans = sum(numerator / denominator for numerator, denominator in fractions)\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A = 24\n    B = 36\n    C = 42\n\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    n = 100\n    ans = (n * (n + 1) // 2) * 2 - n\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_cost = 4.36\n    days = 5\n    total_cost = children * daily_cost * days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -3\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_points + wrong * wrong_points == 76:\n            return correct\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    # If n equals the sum of all its positive divisors less than itself,\n    # it means n is a perfect number.\n\n    # The smallest perfect number is 6, and its divisors are 1, 2, 3, 6.\n    # A perfect number n has the property that n = 1 + 2 + ... + k,\n    # where the 1, 2, ..., k are all divisors of n (except n itself).\n    \n    # The sum of the reciprocals of all the positive divisors of n is given by:\n    # (1 + 1/2 + 1/3 + ... + 1/k + 1/n) where 1, 2, ..., k, n are the divisors.\n\n    # For a perfect number, since n = 1 + 2 + ... + k, we have:\n    # (1/n) + (1/k) + ... + (1/2) + 1 = n/n = 1.\n\n    # Hence, for any perfect number n, the sum of the reciprocals of all\n    # its positive divisors is always 1.\n    \n    return 1\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'cp' be the cost price\n    cp = symbols('cp')\n\n    # The marked price is 20% above the cost price\n    marked_price = cp * 1.20\n\n    # The selling price is 90% of the marked price\n    selling_price = marked_price * 0.90\n\n    # Profit is the selling price minus the cost price\n    profit = selling_price - cp\n\n    # We know the profit\n    profit_eq = Eq(profit, 120)\n\n    # Solving for the cost price\n    cost_price = solve(profit_eq, cp)\n\n    return cost_price[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x +1), 2 * x + 5)\n    solutions = solve(equation, x)\n\n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n    \n    # First part: arranging four different colored socks\n    # Since the socks are different, it's just a matter\n    # of calculating the number of permutations of 4 items\n    ways_different_colored_socks = factorial(4)\n    \n    # Second part: arranging two pairs of different colored socks\n    # There are two pairs, each can be arranged in 2 different ways (due to the pair being identical) \n    # and the arrangement of the pairs themselves can be in 2! ways\n    # Hence, the total number of ways is 2! * 2 * 2\n    ways_two_pairs = factorial(2) * factorial(2)\n    \n    # Return as a tuple\n    return (ways_different_colored_socks, ways_two_pairs)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):     # 'a' cannot be 0 in a two-digit number\n        for b in range(10):    # 'b' can be 0\n            if 11 * a + 101 * b == 10 * a + 100 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    num_handshakes = (num_people * (num_people - 1)) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "def solution():\n    from math import comb\n    ans = comb(10, 3)\n    return ans\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure winning, Anthea must leave Ben with a multiple of 4 apples eventually,\n    # as no matter how many apples Ben takes (1, 2, or 3), Anthea can always take \n    # the remaining to make the total taken in each round 4.\n    # Thus, Anthea should take an amount such that 18 - x is a multiple of 4.\n    # Possible x values to ensure this are 1, 2, or 3.\n    # She can take 1, which will leave 17 apples, and no matter how \n    # many apples Ben takes next, Anthea can always make the total 4.\n    # So she should take 1 apple.\n    \n    return 1\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair = symbols('chair')\n    table = chair + 2  # table is 2kg heavier than a chair\n    \n    # 3 tables is same as 4 chairs mass\n    equation = Eq(3 * table, 4 * chair)\n    \n    # solving the equation\n    mass_of_table = solve(equation, chair)[0] + 2\n    \n    return mass_of_table\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand either at the first position or the last position, that's 2 choices\n    judy_positions = 2\n\n    # The remaining 5 friends can be arranged in 5! ways\n    friends_permutations = factorial(5)\n\n    # Total ways = choices for Judy * permutations of friends\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Andre and Beth's initial amount of sweets\n    andre, beth = symbols('andre beth')\n\n    # Initial total sweets they both had\n    initial_total = Eq(andre + beth, 24)\n\n    # After receiving 4 sweets each from their teacher\n    # Andre now has 6 sweets more than Beth\n    new_total = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the system of equations for both Andre and Beth\n    solutions = solve((initial_total, new_total), (andre, beth))\n\n    # Return how many sweets Beth has now (initial + 4)\n    beth_now = solutions[beth] + 4\n\n    return beth_now\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - 6, beth + 4)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth]\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # this means there was 1 car that the Ferrari driver did not overtake.\n    # Thus, the total number of cars the Ferrari driver had to overtake to get to second place was 5,\n    # and there was 1 car in first place that was not overtaken.\n    total_cars = 5 + 1 + 1 # overtaken cars + Ferrari's place + the car that wasn't overtaken\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Using inverse operations to find the original number\n    result_after_division = 2\n    result_after_subtraction = result_after_division * 12\n    original_number = result_after_subtraction + 6\n\n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    # Iterate over the range of possible 4-digit numbers\n    for num in range(1000, 10000):\n        # Convert the number to a string to check if it's a palindrome\n        num_str = str(num)\n        # Check if the number reads the same forwards and backwards\n        if num_str == num_str[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "from math import gcd\n\ndef solution():\n    length = 36\n    width = 24\n    height = 15\n\n    # Determine the greatest common divisor of the three dimensions\n    common_divisor = gcd(length, gcd(width, height))\n\n    # Calculate the number of cubes by dividing the volume of the block by the volume of the largest cube\n    n = (length // common_divisor) * (width // common_divisor) * (height // common_divisor)\n    return n\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be s and one gold ring be g\n    # We know that 12 silver spoons are three quarters the value of 6 gold rings\n    # So, 12s = 3/4 * 6g\n    # Simplify the equation to find the value of one silver spoon in terms of gold rings\n    # 12s = 9g/2 => s = (9g/2) / 12 => s = 9g/24 => s = 3g/8\n    # Now we need to find how many silver spoons equal the value of 3 gold rings\n    # Let x be the number of silver spoons that equal the value of 3 gold rings\n    # So, xs = 3g\n    # Substitute s from the first equation\n    # x * (3g/8) = 3g\n    # Simplify to solve for x\n    # x = (3g * 8) / (3g)\n    # x = 8\n    \n    return 8\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    for side in range(1, 100): # Assume the sides of the square measure 'side' students\n        boys = (side * side + side) // 2 # Boys occupy the full outer square and half of the next one\n        girls = boys - 55 # There are 55 more boys than girls overall\n\n        if (side % 2 == 0 and girls == (side - 2) * (side - 2) // 2) or \\\n           (side % 2 == 1 and girls == ((side - 1) * (side - 1) + 1) // 2):\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencils, markers = symbols('pencils markers')\n    \n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n    \n    solutions = solve((equation1, equation2), (pencils, markers))\n    \n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n    \n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    marker_cost = 3\n    paintbrush_cost = 1\n    total_cost = 28\n    total_items = 12\n\n    # Assume all items are paintbrushes \n    max_paintbrushes = total_cost / paintbrush_cost  # This gives maximum possible paintbrushes\n    remaining_money = total_cost - (max_paintbrushes * paintbrush_cost)\n\n    # Calculate number of markers\n    markers = remaining_money / (marker_cost - paintbrush_cost)\n\n    return int(markers)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of female teachers\n    females = symbols('females')\n    total_teachers_weight = 65 * (females + 3)  # Total weight of teachers\n    male_teachers_weight = 3 * 75  # Total weight of male teachers\n    female_teachers_weight = females * 60  # Total weight of female teachers\n    equation = Eq(total_teachers_weight, male_teachers_weight + female_teachers_weight)\n\n    # Solve the equation for the number of female teachers\n    num_females = solve(equation, females)\n\n    return num_females[0]\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import gcd\n    from sympy import lcm\n\n    # Convert all times to seconds for common units\n    first_tl = 60  # seconds\n    second_tl = 90  # seconds\n    min_third_tl = 30  # minimum time in seconds for third traffic light\n\n    # Finding least common multiple of first two traffic lights\n    lcm_first_second = lcm(first_tl, second_tl)\n\n    # Nine minutes are 540 seconds, which is the time when all lights are green\n    total_time = 540 \n\n    # We need to find the smallest divisor of lcm_first_second that is at least 30 seconds and that divides 540\n    # We start with the smallest factor that is greater than or equal to 30 and increase it if it is not a divisor of 540\n    third_tl = min_third_tl\n\n    while True:\n        if (lcm_first_second % third_tl == 0) and (total_time % third_tl == 0):\n            break\n        third_tl += 30  # Increase by 30 seconds to check the next possible duration\n\n    return third_tl // 60, third_tl % 60  # Return the time in minutes and seconds\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure victory, Leo needs to take an amount of apples that leaves a multiple\n    # of 3 (either 1 or 2) apples for Mia since they can take 1 or 2 apples each turn.\n    # Leo wants to always leave a multiple of 3 for Mia, so eventually Mia is forced\n    # to take the last apple before the total number of apples becomes 3.\n    # Therefore, Leo needs to take:\n    # Total number of apples modulo 3 at his first turn.\n\n    total_apples = 14\n    first_turn_apples = total_apples % 3  # if first_turn_apples is 0, take 2 apples instead, to leave 12 for Mia\n\n    # This works because from 14, leaving 12 for Mia would mean:\n    # - If Mia takes 1, 11 are left, Leo makes it 9 (total - 2).\n    # - If Mia takes 2, 10 are left, Leo makes it 9 (total - 1).\n    # Now with 9 apples left, no matter what Mia does, Leo can always bring it down to a multiple of 3.\n    # Leo wins if he can always reach a multiple of 3 after Mia's turn.\n    \n    # To ensure his victory, Leo should take 2 apples if he is left with modulo 0.\n    if first_turn_apples == 0:\n        first_turn_apples = 2\n\n    return first_turn_apples\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    # Prime factorization of 33 is 3 * 11\n    # Prime factorization of 55 is 5 * 11\n    # For a number to be a square number, each prime factor must be to an even power.\n    # We already have one 11 from 33 and one from 55, we need one more 11 to make it an even power for a perfect square.\n    # We also need two 3's and two 5's to make their powers even for a perfect square.\n    # So the smallest m would be 3^2 * 5^2 * 11 = 9 * 25 * 11 = 225 * 11.\n    m = 3 * 5 * 11\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for x1 in range(2, 8 - 2*2 + 1):  # First plate has at least 2 pieces, so we start from 2 to 8 - 4 (2 pieces for each of the other plates)\n        for x2 in range(2, 8 - x1 - 2 + 1):  # Second plate has at least 2 pieces, remaining is 8 - x1 - 2 for the third plate\n            x3 = 8 - x1 - x2  # The third plate will get the remaining pieces\n            if x3 >= 2:  # Ensure the third plate has at least 2 pieces\n                count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    # Since Star must be the first runner, we only need to arrange the four remaining teammates.\n    num_ways = factorial(4)  # 4! ways to arrange the remaining 4 teammates\n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(i+1, 10):\n            for k in range(j+1, 10):\n                for l in range(k+1, 10):\n                    increasing = i*1000 + j*100 + k*10 + l\n                    decreasing = l*1000 + k*100 + j*10 + i\n                    if increasing + decreasing < 26352:\n                        third = 26352 - (increasing + decreasing)\n                        if sorted([int(d) for d in str(third)]) == [i, j, k, l]:\n                            return min(increasing, decreasing, third)\n    return None\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (a * b) + (a + b)\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position from the front/back defines the number of rows\n    # 5th from the front and 7th from the back means there are 5 + 7 - 1 rows\n    rows = 5 + 7 - 1\n\n    # Cora's position from the left/right defines the number of columns\n    # 2nd from the left and 4th from the right means there are 2 + 4 - 1 columns\n    columns = 2 + 4 - 1\n\n    # Total number of students is rows times columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # It takes 60 minutes to cut a piece of wood into 31 segments\n    # This implies there are 30 cuts made since the first piece doesn't require a cut\n    time_for_31_segments = 60\n    cuts_for_31_segments = 31 - 1\n    \n    # The time per cut is the total time divided by the number of cuts\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    \n    # For 50 segments, there will be 49 cuts\n    cuts_for_50_segments = 50 - 1\n    \n    # The time to cut into 50 segments is the time per cut multiplied by the number of cuts for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The given congruences can be written as:\n    # number % 3 == 1\n    # number % 5 == 3\n    # number % 7 == 5\n\n    # Solve the congruences using Chinese Remainder Theorem\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number = solve_congruence(*congruences)\n\n    # Find the smallest number in the desired range\n    ans = next(num for num in range(number[0], 200, number[1]) if 100 < num < 200)\n\n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(number - 0.30 * number, 210)\n    ans = solve(equation, number)\n    return ans[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    ans = year - 2002\n    return ans\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    result = (8/9) * (3/4 - (7/16 - 1/4))\n    return result\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    \n    arrangements = factorial(total_letters)\n    \n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    percentage_increase = 0.45\n    increased_cost = initial_cost * (1 + percentage_increase)\n    return increased_cost\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the time spent on each subject\n    elder_maths, elder_english, younger_maths, younger_english = symbols('elder_maths elder_english younger_maths younger_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(elder_maths, younger_maths + 10)                            # Elder sister spent 10 more minutes on maths\n    equation2 = Eq(younger_english, younger_maths + 4)                         # Younger sister spent 4 more minutes on English\n    equation3 = Eq(elder_maths + elder_english, 88)                            # Elder sister spent 88 minutes in total\n    equation4 = Eq(younger_english, elder_english + 12)                        # Younger sister spent 12 minutes less on maths than English\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, elder_english, younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # pence\n    money_from_dad = 40  # pence\n    days = 3\n\n    total_money = (money_from_mum + money_from_dad) * days\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i / 24 == 36:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temp_at_midnight = -5\n    temp_at_midday = 17\n    \n    overall_change = temp_at_midday - temp_at_midnight\n    \n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    difference = 1\n    while term <= 50:\n        difference += 1\n        term += difference\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_pence = 43\n    booklet_cost_pounds = 1.85\n    total_cost_pounds = (3 * pen_cost_pence / 100) + (4 * booklet_cost_pounds)\n    change_from_ten_pounds = 10 - total_cost_pounds\n    return change_from_ten_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # As the question doesn't provide the actual population figure and I cannot access external data sources,\n    # I'm going to assume a placeholder value for the population of St Petersburg.\n    # Please replace 'population_figure' with the actual population number.\n    population_figure = 5351935  # This should be the current population of St Petersburg\n    \n    ans = population_figure\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # The first digit cannot be zero\n        for digit2 in range(10):\n            if abs(digit1 - digit2) >= 7:\n                for digit3 in range(10):\n                    if abs(digit2 - digit3) >= 7:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n    \n    third_prime = list(primerange(1, 10))[2]\n    \n    return third_prime\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possible_digits = [set(range(10)) for _ in range(4)]\n    # Remove incorrect digits based on the try where all digits are wrong.\n    for position, digit in enumerate('1258'):\n        possible_digits[position].discard(int(digit))\n\n    # Process the information where two digits are correct.\n    tries = ['5648', '3628', '3147', '5629']\n    for trial in tries:\n        correct_digits_count = 0\n        for position, digit in enumerate(trial):\n            if int(digit) in possible_digits[position]:\n                correct_digits_count += 1\n        # We know that two digits are correct, so we discard the others.\n        if correct_digits_count > 2:\n            for position, digit in enumerate(trial):\n                if int(digit) not in possible_digits[position]:\n                    for pos_digit_set in possible_digits:\n                        pos_digit_set.discard(int(digit))\n\n    # Determine the correct combination\n    correct_combination = ''\n    for pos_digit_set in possible_digits:\n        if len(pos_digit_set) == 1:\n            correct_combination += str(pos_digit_set.pop())\n\n    return correct_combination\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    position_diff = 22 - 4\n    num_children = position_diff * 2\n    return num_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    num_of_weeks = 10\n\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # Sum = n/2 * (2a + (n - 1)d), where n is the number of terms, a is the first term, and d is the common difference\n    sum_of_coins = num_of_weeks / 2 * (2 * first_term + (num_of_weeks - 1) * common_difference)\n    \n    return int(sum_of_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n\n    total_dresses = gina_dresses + fiona_dresses\n\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for d in range(5, 10):  # Thousands digit ranges from 5 to 9 for 4-digit numbers larger than 5000.\n        for a in range(1, 10):  # First digit can't be zero.\n            for b in range(0, 10):  # Second digit can be zero.\n                for c in range(0, 10):  # Third digit can also be zero.\n                    # if d is divisible by a, b, and c (ignoring divisions by zero).\n                    if (a == 0 or d % a == 0) and (b == 0 or d % b == 0) and (c == 0 or d % c == 0):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years_assumed = 5\n\n    # Using the formula for compound interest: A = P(1 + r)^t\n    # where A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money)\n    # r is the annual interest rate (in decimal)\n    # t is the time the money is invested for, in years\n\n    # We need to solve for t in the equation principal*(1 + interest_rate)^t = final_amount\n    # Since we cannot isolate t algebraically, we will need to use a logarithm to do so\n\n    from math import log\n\n    # rearrange the formula to solve for t:\n    # t = log(final_amount / principal) / log(1 + interest_rate)\n    actual_years = log(final_amount / principal) / log(1 + interest_rate)\n\n    if int(actual_years) == years_assumed:\n        answer = 'right'\n    else:\n        answer = 'wrong', int(actual_years)\n\n    return answer\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_avg_weight = 65\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n\n    # total weight of male teachers\n    total_male_weight = male_teachers * male_avg_weight\n\n    # Let x be the number of female teachers\n    # Total average weight formula: (total_male_weight + female_avg_weight*x) / (male_teachers + x) = total_avg_weight\n    # We solve for x\n\n    # Rearrange the equation to solve for x\n    x = (total_avg_weight * male_teachers - male_avg_weight * male_teachers) / (female_avg_weight - total_avg_weight)\n\n    return int(x)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_one_quarter_full = 250\n    mass_three_quarter_full = 350\n    mass_half_full = (mass_one_quarter_full + mass_three_quarter_full) / 2\n    mass_empty_jar = mass_one_quarter_full - (mass_half_full - mass_one_quarter_full)\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_l = 13.15\n    bottle_capacity_l = 9.1\n    cup_capacity_ml = 350\n    cups_to_l = 0.001 # conversion from ml to liters\n\n    used_for_bottle_l = bottle_capacity_l * (1/7)\n    used_for_cups_l = 4 * cup_capacity_ml * cups_to_l\n\n    remaining_soda_l = total_soda_l - used_for_bottle_l - used_for_cups_l\n\n    return remaining_soda_l\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote father's current age as f and son's current age as s\n    f, s = symbols('f s')\n\n    # Equation representing the relationship 6 years ago\n    equation1 = Eq(f - 6, 5 * (s - 6))\n\n    # Equation representing the sum of their current ages\n    equation2 = Eq(f + s, 78)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (f, s))\n\n    # Father's current age\n    return solutions[f]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure her victory, Rose must always leave Kylie with a number of marbles\n    # that is a multiple of 3 after Rose's turn.\n    # If they get to a situation where there are 3 marbles left on Rose's turn,\n    # she wins by picking up 2 marbles.\n    \n    # The strategy is to subtract a number that will make the remaining marbles\n    # a multiple of 3 after Rose's turn.\n    # As Rose goes first with 14 marbles, she needs to pick 14 % 3 = 2 marbles\n    # to leave 12 marbles, which is a multiple of 3, ensuring her strategy can continue.\n\n    return 14 % 3\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let marks of A, B, C, D, and E be a, b, c, d, and e respectively\n    a, b, c, d, e = symbols('a b c d e')\n\n    # Given average conditions\n    condition1 = Eq((a + b + c) / 3, 95)\n    condition2 = Eq((b + c + d) / 3, 94)\n\n    # Given conditions about specific scores\n    condition3 = Eq(e, 96)  # E's score is 96\n    condition4 = Eq(b, d)   # B and D have the same score\n\n    # Assumption that A has the highest marks and all marks are above 91\n    assumption1 = a > e  \n    assumption2 = a > 91\n    assumption3 = b > 91\n    assumption4 = c > 91 \n    assumption5 = d > 91\n   \n    # Solving the system of equations and assumptions\n    solutions = solve((condition1, condition2, condition3, condition4, assumption1, assumption2, assumption3, assumption4, assumption5), (a, b, c, d, e))\n\n    # Getting the solution for D's mark considering A has the highest mark and E the second highest\n    for sol in solutions:\n        if sol[a] > sol[e] and all([sol[mark] > 91 for mark in [a, b, c, d]]):\n            return sol[d]\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = 2023 ** 0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_in_pence = 45 * 100  # convert £45 to pence\n    coin_value_in_pence = 5\n    num_coins = total_money_in_pence // coin_value_in_pence\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 20)  # Pip runs 20 meters more than Bud each minute\n    equation2 = Eq(3*pip + 3*bud, 540)  # Total distance covered in 3 minutes\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    # Calculate the total distance Pip runs in 3 minutes.\n    pip_distance_3_min = solutions[pip] * 3\n\n    return pip_distance_3_min\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters (converted from cm to m)\n    x = 0.04  # displacement from equilibrium in meters (converted from cm to m)\n\n    # The total energy (E) of the oscillator is the sum of its potential and kinetic energy.\n    # Since the kinetic energy is maximum at equilibrium and the potential energy is maximum\n    # at the amplitude, the total energy at any point in time is equal to the potential\n    # energy at the amplitude (which is also the maximum potential energy).\n    E = (1/2) * k * amplitude**2\n\n    # The speed (v) of the block when it's x meters from equilibrium can be found using\n    # conservation of energy. The kinetic energy at that point plus the potential energy\n    # at that point must equal the total energy of the oscillator.\n    # E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # Solve for v:\n    v = math.sqrt((E - (1/2) * k * x**2) * 2 / m)\n\n    return E, v\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of coins in Box B\n    x = symbols('x')\n\n    # Since Box A contains four times as many coins as Box B, we have 4x coins in Box A\n    # After removal, 6% of coins from Box A is 0.06 * 4x, and 20% of coins from Box B is 0.20 * x\n    # Box C had an unknown original amount, which after adding coins becomes 1220, and this is 22% more than the original\n    # So we can write this as original_amount_C * 1.22 = 1220\n\n    equation = Eq(0.06 * 4 * x + 0.20 * x + (1220 / 1.22), 1220)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    # Calculate the number of coins in Box A at the beginning, which is 4 times x\n    num_coins_box_a = 4 * solutions[0]\n\n    return num_coins_box_a\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    num_hex1 = \"2A3\"\n    num_hex2 = \"17B\"\n\n    num_decimal1 = int(num_hex1, 16)\n    num_decimal2 = int(num_hex2, 16)\n\n    sum_decimal = num_decimal1 + num_decimal2\n\n    ans = hex(sum_decimal)[2:].upper()\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = 0.25 * 0.30 * 0.40 * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_sale = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price_per_flower = total_sale / total_flowers\n    return average_price_per_flower\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    tricycle_wheels = 3\n    car_wheels = 4\n    # Let x be the number of tricycles\n    # Then (total_vehicles - x) will be the number of cars\n    # We then set up the equation:\n    # tricycle_wheels * x + car_wheels * (total_vehicles - x) = total_wheels\n    # And solve for x\n    x = (total_wheels - car_wheels * total_vehicles) / (tricycle_wheels - car_wheels)\n    return int(x)\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    initial_coffee_ratio = 60 / 100\n    final_coffee_ratio = 40 / 100\n    initial_tea_ratio = 1 - initial_coffee_ratio\n    final_tea_ratio = 1 - final_coffee_ratio\n\n    # Let x be the initial total number of bottled drinks\n    # initial number of tea bottles = initial_tea_ratio * x\n    # final number of tea bottles = final_tea_ratio * (x + extra_tea_bottles)\n    # Since the amount of coffee bottles stays the same, we have:\n    # initial_coffee_ratio * x = final_coffee_ratio * (x + extra_tea_bottles)\n\n    # Now we solve for extra_tea_bottles:\n    # extra_tea_bottles = initial_coffee_ratio * x / final_coffee_ratio - x\n\n    # extra_tea_bottles = initial_tea_ratio * x / final_tea_ratio - initial_tea_ratio * x\n    # percentage_increase = (extra_tea_bottles / (initial_tea_ratio * x)) * 100\n    # percentage_increase = ((initial_tea_ratio / final_tea_ratio) - 1) * 100\n    \n    percentage_increase = ((initial_tea_ratio / final_tea_ratio) - 1) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    time_for_washing_watermelons = 1\n    time_for_washing_glasses = 3\n    time_for_juicer_working = 4\n    time_for_pouring_juice = 1\n\n    total_time = (time_for_washing_watermelons +\n                  time_for_washing_glasses +\n                  time_for_juicer_working +\n                  time_for_pouring_juice)\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60         # Lewis has 60p, which is in pence.\n    james_money_pounds = 1.10  # James has £1.10, which needs to be converted to pence.\n\n    # Convert James' money to pence\n    james_money_p = james_money_pounds * 100\n\n    # Add the amounts in pence\n    total_money_p = lewis_money_p + james_money_p\n\n    # Convert the total back to pounds\n    ans = total_money_p / 100\n\n    return ans\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    # Total letters\n    total_letters = len(\"WINNING\")\n    \n    # Count each letter's frequency\n    letter_counts = {\"W\": 1, \"I\": 2, \"N\": 3, \"G\": 1}\n\n    # Calculate the denominator for duplicates\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    # Calculate the total permutations\n    total_permutations = factorial(total_letters) // denominator\n    \n    return total_permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # The minimum number of books in each stack is 3, so we start with each having 3 books\n    # This leaves us with 13 - 3*3 = 4 books to distribute\n    # We need to find the number of ways to distribute these 4 books among the 3 stacks\n    \n    # Iterate through all distribution scenarios of the remaining 4 books\n    for x1 in range(0, 5): # x1 can be from 0 to 4 (inclusive) because we have to distribute 4 books\n        for x2 in range(0, 5 - x1): # x2 depends on the number of books left after x1 is chosen\n            # x3 is determined by subtracting x1 and x2 from the remaining books (since we start with 4 books to distribute)\n            x3 = 4 - x1 - x2\n            # As long as each stack has at least 3 books, we have a valid distribution\n            if x1 + 3 <= 13 and x2 + 3 <= 13 and x3 + 3 <= 13:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    bee_initial = 1\n    trips = 4\n    total_bees = bee_initial\n    for _ in range(trips-1):\n        bee_initial *= 10\n        total_bees += bee_initial\n    return total_bees\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import symbols, Eq, solve\n\n    # Define the number of students\n    n = 6\n\n    # Calculate the total number of permutations\n    total_perm = factorial(n)\n\n    # Calculate the number of derangements using inclusion-exclusion principle\n    derangements = 0\n    for k in range(n+1):\n        # Add or subtract the number of permutations with exactly k items in their original position\n        derangements += (-1)**k * factorial(n) // (factorial(k) * factorial(n - k))\n\n    return derangements\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    lemonade_price = 4\n    plus_price = 7\n    total_income = 2012\n    min_plus_bottles = (total_income - total_bottles * lemonade_price) / (plus_price - lemonade_price)\n\n    return int(min_plus_bottles)\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let the original number of blue pens be 3x and red pens be 5x\n    # According to the problem, we know the following:\n    # 3x (blue pens) + 5x (red pens) = 96 pens in total\n    total_original_pens = 96\n    red_added = 60\n    blue_ratio = 3\n    red_ratio = 5\n    blue_percentage_after_addition = 0.4\n    \n    # Find the value of x\n    x = total_original_pens / (blue_ratio + red_ratio)\n    \n    # Number of blue pens originally\n    original_blue = blue_ratio * x\n    \n    # Total number of pens after addition\n    total_pens_after_addition = total_original_pens + red_added\n    \n    # Calculate the new number of blue pens based on the 40% after the addition of the red pens\n    new_blue = blue_percentage_after_addition * (total_pens_after_addition + original_blue)\n    \n    # Subtract the original amount of blue pens to find how many were added\n    blue_added = new_blue - original_blue\n    \n    return int(blue_added)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    initial_velocity = 0  # initial velocity (u) in m/s\n    final_velocity = 8  # final velocity (v) in m/s\n    time = 4  # time (t) in seconds\n    \n    # Using the equation of motion: v = u + at\n    # We solve for acceleration (a)\n    acceleration = (final_velocity - initial_velocity) / time\n    \n    mass = 2  # mass (m) in kg\n    \n    # Using Newton's second law of motion: F = ma\n    force = mass * acceleration\n    \n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    total_trees = 890\n    team_a_daily = 29\n    team_b_daily = 31\n    total_days = 20\n\n    for days_off in range(total_days + 1):\n        if team_a_daily * total_days + team_b_daily * (total_days - days_off) == total_trees:\n            return days_off\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of incorrect answers\n    x = symbols('x')\n    \n    # The number of correct answers is 12 more than three times the incorrect answers\n    correct_eq = Eq(3*x + 12)\n    \n    # Total points for correct answers minus total points for incorrect answers equals 151 points\n    total_points_eq = Eq(5 * (3*x + 12) - 2 * x, 151)\n    \n    # Solving the equation for x\n    solutions = solve(total_points_eq, x)\n    \n    # Number of correct answers\n    correct_answers = 3 * solutions[0] + 12\n    \n    return correct_answers\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import divisors\n\n    # Function to find all factors of a number\n    def count_factors(n):\n        return len(divisors(n))\n    \n    # Finding factor counts for numbers 1 to 13\n    factors_count = {number: count_factors(number) for number in range(1, 14)}\n\n    # Two students know their number based on the uniqueness of the number of factors\n    unique_factor_counts = {val for val, count in factors_count.items() if list(factors_count.values()).count(count) == 1}\n   \n    # Alice sees 8 numbers with unique number of factors, so she knows hers is odd and only two are possible\n    possible_alice_numbers = [number for number in factors_count if number % 2 != 0 and number not in unique_factor_counts]\n\n    # May's number is smaller than Alice by 2\n    possible_combinations = [(alice, alice - 2, alice - 3) for alice in possible_alice_numbers if alice - 2 not in unique_factor_counts and alice - 3 not in unique_factor_counts]\n\n    # If there is a unique solution for Alice, May, and Mark, find the product of the four unpicked numbers\n    if len(possible_combinations) == 1:\n        alice, may, mark = possible_combinations[0]\n        picked_numbers = list(unique_factor_counts) + [alice, may, mark]\n        unpicked_numbers = [number for number in range(1, 14) if number not in picked_numbers]\n        ans = 1\n        for number in unpicked_numbers:\n            ans *= number\n        return ans\n    else:\n        return None\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n    \n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n    \n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Add numbers in base 10\n    sum_base_10 = 45 + 66\n\n    # Convert sum to base 7\n    if sum_base_10 == 0:\n        return '0'\n    else:\n        digits = []\n        while sum_base_10:\n            digits.append(str(sum_base_10 % 7))\n            sum_base_10 //= 7\n        digits.reverse()\n        return ''.join(digits)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    \n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # In a round-robin tournament where every player plays every other player once,\n    # the total number of matches is given by the formula: n(n-1)/2, where n is the number of players.\n    # For 7 players, there should be a total of 7*6/2 = 21 matches played.\n\n    # However, each match involves two players. So to get the total number of matches played\n    # from the perspective of individual players, we have to double the total number of matches.\n    total_matches_played_by_individuals = 21 * 2\n\n    # Now we sum up the matches played by A, B, C, D, E, and G.\n    matches_played_so_far_by_others = 4 + 6 + 2 + 1 + 3 + 5\n\n    # The matches played by F would be the remainder.\n    matches_played_by_F = total_matches_played_by_individuals - matches_played_so_far_by_others\n\n    return matches_played_by_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    from sympy import gcd, divisors\n\n    # Find the least common multiple (LCM) of the first 20 natural numbers\n    lcm_of_20 = 1\n    for i in range(1, 21):\n        # Update the LCM of all the numbers up to 'i'\n        lcm_of_20 = (lcm_of_20 * i) // gcd(lcm_of_20, i)\n\n    # Now iterate over pairs of consecutive numbers to find which two cannot divide the LCM\n    for i in range(1, 20):\n        # Check if the LCM divided by 'i' and 'i+1' leaves no remainder\n        if (lcm_of_20 % i != 0) and (lcm_of_20 % (i + 1) != 0):\n            # If both 'i' and 'i+1' do not divide the LCM, then return their sum\n            ans = i + (i + 1)\n            return ans\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let cici_age be Cici's current age and linda_age be Linda's current age\n    cici_age, linda_age = symbols('cici_age linda_age')\n\n    # When Cici was born, Linda was 11 years old\n    equation1 = Eq(cici_age, linda_age - 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((cici_age + 4) + (linda_age + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cici_age, linda_age))\n\n    # Find Linda's age 3 years later\n    linda_future_age = solutions[linda_age] + 3\n\n    return linda_future_age\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let n be the number of stamps Natasha has\n    # Jamie-Anne has 18 more stamps than Natasha, so Jamie-Anne has n + 18 stamps\n    # The ratio of Jamie-Anne's stamps to Natasha's stamps is 5:3\n    # According to the ratio, 5 parts are equal to n + 18 stamps, and 3 parts are equal to n stamps\n    # 5 parts / 3 parts = (n + 18) stamps / n stamps\n    # 5n = 3(n + 18)\n    # 5n = 3n + 54\n    # 2n = 54\n    # n = 27 (Natasha's number of stamps)\n    # Jamie-Anne's number of stamps is n + 18 = 27 + 18 = 45\n    # The total number of stamps is Natasha's stamps + Jamie-Anne's stamps = n + (n + 18) = 27 + 45 = 72\n\n    natasha_stamps = 27\n    jamie_anne_stamps = natasha_stamps + 18\n    total_stamps = natasha_stamps + jamie_anne_stamps\n    \n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B = symbols('A B')\n    # Create the equation based on given problem\n    equation1 = Eq((A+2)*B - A*B, 60)\n    equation2 = Eq(A*(B-3) - A*B, -24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    # Use the solution to calculate the product change when A is increased by 2 and B is decreased by 3\n    A_val = solutions[A]\n    B_val = solutions[B]\n    increased_product = (A_val + 2) * (B_val - 3)\n    original_product = A_val * B_val\n    product_difference = increased_product - original_product\n\n    return product_difference\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    distance = 67  \n    xiaoming_extra_time = 1  \n    meeting_time_after_grandfather = 4  \n    total_xiaoming_time = meeting_time_after_grandfather + xiaoming_extra_time  \n\n    x = symbols('x')  # x is Xiaoming's speed\n    grandfathers_speed = x + 1\n\n    # Equation for the distances covered by Xiaoming and his grandfather when they meet\n    equation = Eq(x * total_xiaoming_time, grandfathers_speed * meeting_time_after_grandfather)\n    xiaoming_speed = solve(equation, x)[0]\n    return xiaoming_speed\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300  # meters\n    distance_downhill = 300  # meters\n    speed_uphill = 10  # meters per minute\n    speed_downhill = 30  # meters per minute\n\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_downhill / speed_downhill\n\n    total_distance = distance_uphill + distance_downhill\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways = 5 ** 4  # Each of the four people can choose one of the 5 entrances\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    # Speed of vehicle A and C\n    speed_A = 1000  # meters per minute\n    speed_C = 800   # meters per minute\n\n    # Time taken by vehicle A, B, and C to catch up with motorcyclist (in minutes)\n    time_A = 7\n    time_B = 8\n    time_C = 14\n\n    # Distance covered by vehicle A when it catches up with motorcyclist\n    distance_A = speed_A * time_A\n\n    # Since vehicle C takes twice as long as vehicle A, the speed of the motorcyclist\n    # should be such that the distance covered is the same when both vehicles catch up\n    # with the motorcyclist\n    # s_m: speed of motorcyclist\n    # s_m * t_C + (speed_C - s_m) * t_C = s_A * t_A\n    # s_m * t_C + speed_C * t_C - s_m * t_C = s_A * t_A\n    # speed_C * t_C = s_A * t_A\n    # s_m = s_A * t_A / t_C\n    speed_motorcyclist = distance_A / time_C\n    \n    # Distance covered by vehicle B when it catches up with motorcyclist\n    distance_B = speed_motorcyclist * time_B\n    \n    # Now calculate the speed of vehicle B\n    # speed_B = distance_B / time_B + speed_motorcyclist\n    speed_B = distance_B / time_B + speed_motorcyclist\n    \n    return speed_B\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Subtract the leftovers to find the disributable amount of each fruit\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Find the GCD of the distributable amounts\n    gcd_apples_pears = gcd(distributable_apples, distributable_pears)\n    gcd_all = gcd(gcd_apples_pears, distributable_oranges)\n\n    # The GCD gives the largest number of students that each fruit type can be evenly distributed to\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n\n    # Judy can stand in 2 positions (first or last)\n    judy_positions = 2\n\n    # The rest of the friends (5 friends) can stand in any of the remaining places\n    # Number of ways to arrange 5 friends is 5 factorial\n    friend_permutations = math.factorial(5)\n\n    # Calculate the total ways\n    total_ways = judy_positions * friend_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    # since the lowest common multiple of the two numbers is 12\n    # and one of the numbers is 6\n    # we can list the factors of 12 to find the other number\n    # that has only 1 and 2 as common factors with 6\n    \n    lcm = 12\n    num1 = 6\n    \n    # Factors of 12 are 1, 2, 3, 4, 6, 12\n    # Since 6 already has 1 and 2 as common factors with the other number,\n    # the other number cannot be 3 or 4, because these numbers would introduce additional common factors.\n    # It cannot be 6 as well since numbers need to be different.\n    # The only number left is 12 itself, which only shares 1 and 2 as common factors with 6.\n    \n    num2 = lcm\n    \n    # Now we check if 6 and 12 have only 1 and 2 as their common factors.\n    # This is indeed true since the GCD (Greatest Common Divisor) of 6 and 12 is 6,\n    # which tells us that the factors of 6 (other than 1 and 2) are not shared with 12.\n    \n    return num2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pen_cost, pencil_cost = symbols('pen_cost pencil_cost')\n    num_pencils = symbols('num_pencils')\n\n    # Given quantities and cost\n    total_money_with_discount = 140\n    money_difference = 200 - 140\n    \n    # Equations based on the problem statement\n    eq1 = Eq(pen_cost, pencil_cost + 4) # cost of pen is 4 yuan more than pencil\n    eq2 = Eq(3 * pen_cost + pencil_cost, money_difference) # Equation for regular cost difference\n    eq3 = Eq(3/4 * pen_cost * num_pencils * 2 + 1/2 * pencil_cost * num_pencils, total_money_with_discount) # Equation for discount cost\n    \n    # Solving equations simultaneously.\n    solutions = solve((eq1, eq2, eq3), (pen_cost, pencil_cost, num_pencils))\n    \n    # Getting the number of pencils (ensuring it's a positive integer)\n    num_pencils_solution = next(val for val in solutions[num_pencils] if val > 0 and val.is_integer)\n    \n    return num_pencils_solution\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let x be the number of qualified products\n    # Then the number of unqualified products is 500*4 - x\n    # The total points for qualified products is 5x\n    # The total points lost for unqualified products is 18 * (500*4 - x)\n\n    # Total points expression\n    # 5x - 18 * (2000 - x) = 9931\n\n    # Simplifying the equation\n    x = (9931 + 18 * 2000) / (5 + 18)\n\n    return int(x)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    selling_price = price * 0.8\n    profit = selling_price - cost\n\n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    return (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hens, roosters = symbols('hens roosters')\n    \n    # Initial condition: the number of hens is 6 times that of roosters\n    equation1 = Eq(hens, 6 * roosters)\n    \n    # After increase: the number of hens is 4 times that of roosters\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hens, roosters))\n    \n    # Calculate total number of chickens before the increase\n    total_before = solutions[hens] + solutions[roosters]\n    \n    return total_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven_numbers = 7 * 12\n    total_for_eight_numbers = 8 * 11\n    eighth_number = total_for_eight_numbers - total_for_seven_numbers\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    return sum(range(1,9)) + sum(range(7,0,-1)) + 3\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    length_of_sequence = len(recurring_sequence)\n    position = 2021\n    index = (position - 1) % length_of_sequence\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    # Since all numbers are permutations of \"375\", their digit sum will always be the same.\n    digit_sum = 3 + 7 + 5\n\n    # There are 6 permutations as shown in the question.\n    num_permutations = 6\n\n    # The sum will be the digit sum times the number of permutations.\n    total_sum = digit_sum * num_permutations\n\n    return total_sum\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # Two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # 11, 22, ..., 99\n    # Three-digit palindromic numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # 101, 111, ..., 191, 202, ..., 999\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    equation = Eq(1/3 * original_money + 2/5 * original_money, 132)\n\n    solutions = solve(equation, original_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    blue_beads = 5\n    white_beads = 6\n    # He can pick all the blue and white beads without getting 5 green beads for sure\n    non_green_beads = blue_beads + white_beads\n    # To ensure 5 green beads, he has to draw one more after picking all non-green beads\n    needed_beads = non_green_beads + 5\n    return needed_beads\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the original speed of April as v_a and Baye as v_b.\n    # April runs at a speed 4 times her original speed after reaching Q.\n\n    # When April meets Baye, April has traveled 1800 + 800 meters\n    # and Baye has traveled 1800 - 800 meters.\n    # Since they start at the same time and meet at the same time, we can set up the ratio:\n    # (1800 + 800) / v_a = (1800 - 800) / v_b\n\n    # We simplify the expression:\n    # 2600 / v_a = 1000 / v_b\n    # v_a / v_b = 2600 / 1000\n    # This ratio also applies to the distance they covered since they walk for the same amount of time.\n\n    # When April gets back to P after meeting Baye, Baye has traveled 2 times the distance from P to the meet point:\n    # Distance Baye needs to travel to Q = total distance - Baye's distance when April is back at P\n    # Distance Baye traveled = 2 * (1800 - 800) = 3600 - 1600\n\n    # So, the remaining distance for Baye to reach Q is:\n    remaining_distance = 1800 - (3600 - 1600)\n\n    return remaining_distance\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_both = 105 // (5*7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    \n    # Pages 1-9 use 1 digit each (9 pages total)\n    digits += 1 * 9\n    \n    # Pages 10-99 use 2 digits each (90 pages total)\n    digits += 2 * (99 - 10 + 1)\n    \n    # Pages 100-215 use 3 digits each\n    digits += 3 * (215 - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):\n        if (int(str(number) + '1')) == 3 * (int('1' + str(number))):\n            return number\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    # Single digit numbers 1-9 = 9 pages\n    single_digit = 9\n    \n    # Double digit numbers 10-81 = 81 - 9 = 72 pages, two digits each\n    double_digits = (81 - 9) * 2\n    \n    # Total digits is the sum of single and double digit page numbers\n    total_digits = single_digit + double_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    time_per_floor = 12 / (4 - 1)  # time to walk from first to fourth floor is divided by the number of floor intervals (3)\n    total_time_for_eighth_floor = time_per_floor * (8 - 1)  # time needed for first to eighth floor, 7 floor intervals\n    return total_time_for_eighth_floor\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c, d, x = symbols('a b c d x')\n\n    eq1 = Eq(a + 1/b, x)\n    eq2 = Eq(b + 1/c, x)\n    eq3 = Eq(c + 1/d, x)\n    eq4 = Eq(d + 1/a, x)\n\n    # Solving the system of equations\n    solution = solve((eq1, eq2, eq3, eq4), (a, b, c, d, x))\n    # Multiple solutions exist, we need to choose the one where a, b, c, d are all different\n    for sol in solution:\n        if len(set(sol[:-1])) == 4:  # Check if a, b, c, d are all different\n            return sol[-1]\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    initial_birds_to_squirrels_ratio = 8 / 5\n    squirrel_increase_percentage = 20 / 100\n    \n    # Let x be the initial number of squirrels\n    x = 5\n    initial_total = (initial_birds_to_squirrels_ratio + 1) * x\n\n    # Number of squirrels after increase\n    new_squirrels = x * (1 + squirrel_increase_percentage)\n\n    # The total number of birds and squirrels remains the same\n    new_total = initial_total\n\n    # Calculate the number of birds that flew away\n    birds_flew_away = initial_total - new_squirrels - x\n\n    # Calculate the percentage of the birds that flew away\n    initial_birds = initial_birds_to_squirrels_ratio * x\n    birds_flew_away_percentage = (birds_flew_away / initial_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    result = 5 * a - 2 * b\n    return result\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5\n    \n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    common_difference = 4\n\n    # Use the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # We can solve for n (number of days) as follows:\n    # a_n (last_day_pages) = a_1 (first_day_pages) + (n-1)d (common_difference)\n    # 70 = 30 + (n-1)*4\n    # 40 = (n-1)*4\n    # n - 1 = 40 / 4\n    # n - 1 = 10\n    # n = 11\n    \n    num_days = (last_day_pages - first_day_pages) // common_difference + 1\n\n    return num_days\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # define a function for the new operation\n    def new_operation(a, b):\n        return (a % 3) + b - (a // 3)\n    \n    # calculate 9 ◈ 20 using the new operation\n    ans = new_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3  # Total juice in litres\n    juice_left = total_juice - 9  # Juice left after drinking 9 litres\n\n    containers_needed = -(-juice_left // 5)  # Ceiling division to find number of containers needed\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    # The sum of divisor (D), dividend (V), quotient (Q), and remainder (R) adds up to 40.\n    # D + V + Q + R = 40\n    # The remainder is 3\n    # D + V + Q + 3 = 40\n    # D + V + Q = 37\n    # We also know that V = D * Q + R\n    # Therefore, D * Q + D + Q + 3 = 40\n    # D * Q + D + Q = 37\n    # (D + 1)(Q + 1) = 38\n    # We are interested in unique pairs of (D + 1) and (Q + 1) that multiply to 38\n    # We find all factors of 38\n    factors = []\n    for i in range(1, 39):\n        if 38 % i == 0:\n            factors.append(i)\n            \n    # We divide these factors into pairs\n    pairs = []\n    for i in factors:\n        pairs.append((i, 38 // i))\n\n    # The number of unique (D, Q) pairs will give us the number of possible values for Dividend/Quotient\n    # Since D and Q need to be integers and (dividend / quotient) > 1, we should ensure D > Q\n    num_possible_values = 0\n    for d_plus_1, q_plus_1 in pairs:\n        d = d_plus_1 - 1\n        q = q_plus_1 - 1\n        if d > q:  # Ensure that D > Q as per the division rule\n            num_possible_values += 1\n            \n    return num_possible_values\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    # The series is an arithmetic progression with a common difference of 1\n    # and the first term a_1 = 1 and the last term a_n = 50\n\n    n = 50\n    a_1 = 1\n    a_n = 50\n\n    # Sum of an arithmetic progression is given by the formula:\n    # S_n = n/2 * (a_1 + a_n)\n    S_n = n / 2 * (a_1 + a_n)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_value = -1\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_value = max(max_value, A + R + T)\n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(2, 10):  # Since 9/A has to be less than 1, A has to be greater than 9. Starting from 2 because A is an integer.\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    # Equation: 1/4 of the boys is equal to 2/5 of the girls\n    equation1 = Eq(boys / 4, 2 * girls / 5)\n\n    # Equation: Sum of boys and girls equals total students\n    equation2 = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    # Members on the left of Tanya\n    left_of_tanya = 3\n    # Members on the right of Tanya\n    right_of_tanya = 5\n    # Tanya herself\n    tanya = 1\n\n    # Total members in the first row is sum of left of Tanya, right of Tanya and Tanya herself.\n    total_members = left_of_tanya + right_of_tanya + tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2 / 3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    # Start with the largest 4-digit number and loop down\n    for i in reversed(range(1000, 10000)):\n        if 87878 % i == 0 and sympy.isprime(i):\n            return i\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Speeds in metres per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in metres\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    # Times in seconds\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load = 12\n    num_vans = -(-total_weight // max_load)  # Ceiling division to get whole number of vans\n    return num_vans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    equation1 = Eq(patrick + 10, 2 * (daniel - 24))\n    equation2 = Eq(daniel, patrick)\n\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    ways = [0] * (5 + 1)\n    ways[0] = 1\n\n    for num in range(1, 5+1):\n        for i in range(num, 5+1):\n            ways[i] += ways[i - num]\n\n    return ways[5]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82\n    plane_height = 569\n    vertical_distance = plane_height - whale_depth\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed girls if all boys are right-handed\n    max_left_handed_girls = total_pupils - right_handed\n    # Minimum number of right-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_difference = float('inf')\n    \n    digits = '123456789'\n    \n    from itertools import permutations\n    \n    permutations_of_digits = permutations(digits)\n    \n    for perm1 in permutations_of_digits:\n        for perm2 in permutations_of_digits:\n            if perm1 != perm2:\n                number1 = int(''.join(perm1))\n                number2 = int(''.join(perm2))\n                difference = abs(number1 - number2)\n                if difference < smallest_difference:\n                    smallest_difference = difference\n                    # Since we are looking for the smallest difference,\n                    # we can break right after we find the first non-zero difference.\n                    break\n        # Breaking out of the inner loop means we already found \n        # the minimal difference, so we can break the outer loop as well.\n        if smallest_difference != float('inf'):\n            break\n    \n    return smallest_difference\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    apples = (2/3) * total_fruits\n    bananas = (1/9) * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_fruits)\n\n    num_lemons = solutions[0] - (2/3 * solutions[0]) - (1/9 * solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day_per_worker = 6\n    total_skirts = 0\n    \n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_day_per_worker\n        \n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    ans = 234000 // 520\n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    total_distance = 300\n    first_part_distance = 120\n    first_part_speed = 40\n    total_average_speed = 50\n\n    # Time taken to cover the first part of the journey\n    first_part_time = first_part_distance / first_part_speed\n\n    # Total time allowed to cover the entire distance at the average speed\n    total_allowed_time = total_distance / total_average_speed\n\n    # Time remaining to cover the rest of the distance\n    remaining_time = total_allowed_time - first_part_time\n\n    # Remaining distance to cover\n    remaining_distance = total_distance - first_part_distance\n\n    # Speed required to cover the remaining distance in the remaining time\n    required_speed = remaining_distance / remaining_time\n\n    return required_speed\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    # Probability of living over 20 years old\n    prob_over_20 = 0.6\n    \n    # Probability of living over 25 years old\n    prob_over_25 = 0.3\n\n    # The conditional probability that A lives over 25 given A is already over 20\n    prob_25_given_20 = prob_over_25 / prob_over_20\n\n    return prob_25_given_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # One tap takes 5 times longer than 5 taps to fill 1 litre\n    time_for_one_tap_to_fill_1_litre = 2 * 5\n\n    # Since we want to know the time to fill 500 ml, which is half of 1 litre\n    time_for_one_tap_to_fill_500_ml = time_for_one_tap_to_fill_1_litre / 2\n\n    return time_for_one_tap_to_fill_500_ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john + brother, 246)\n    equation2 = Eq(john, brother + 32)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    height_difference = 20  # The height difference between Ben and Sally in cm\n\n    sally_height = ben_height + height_difference  # Calculate Sally's height\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the total number of visitors at the fair\n    x = symbols('x')\n    \n    # number of children\n    children = (3/5) * x\n    \n    # number of remaining visitors\n    remaining = x - children\n    \n    # number of men\n    men = (1/2) * remaining\n    \n    # equation based on the information given\n    equation = Eq(children, men + 140)\n    \n    # solve for x\n    total_visitors = solve(equation, x)\n    \n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    all_permutations = list(permutations(digits, 3))\n    max_sum = 0\n    \n    for first_number_tuple in all_permutations:\n        remaining_digits = [d for d in digits if d not in first_number_tuple]\n        second_number_permutations = list(permutations(remaining_digits, 3))\n        for second_number_tuple in second_number_permutations:\n            first_number = int(''.join(map(str, first_number_tuple)))\n            second_number = int(''.join(map(str, second_number_tuple)))\n            current_sum = first_number + second_number\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # millilitres in 2 litres\n    volume_drank = 350\n\n    volume_left = initial_volume - volume_drank\n    \n    return volume_left\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return int(0.4 * 3280)\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Define initial values of the pattern\n    a, b = 1, 8\n\n    # Create a list to store the pattern\n    sequence = [a, b]\n\n    # Continue the pattern until the next value is greater than 53\n    while sequence[-1] <= 53:\n        next_a = sequence[-2] * 2 \n        next_b = sequence[-1] + 7\n        sequence.append(next_a)\n        sequence.append(next_b)\n\n    # The last entry will be the next number following 53 in the pattern\n    ans = sequence[-2]\n    return ans\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    avg_goals_per_match = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals_per_match * num_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n    \n    cost_per_kg = total_cost / total_kg\n    \n    return cost_per_kg\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's calculate the daily consumption of grass by 1 horse and by 1 sheep\n    \n    # According to the question, we have:\n    # horse_daily_eat = 4 * sheep_daily_eat\n    # 20 * horse_daily_eat * 12 = total_grass\n    # 60 * sheep_daily_eat * 24 = total_grass\n    \n    # Hence, we can express the following:\n    # 20 * horse_daily_eat * 12 = 60 * sheep_daily_eat * 24\n    # Dividing by 60 and by 4 gives us:\n    # horse_daily_eat = 12 * sheep_daily_eat\n    \n    # Now we need to find out how long 12 horses and 88 sheep will take to eat all the grass\n    # We have the total grass as 20 * 12 * horse_daily_eat, thus:\n    # (12 * horse_daily_eat + 88 * sheep_daily_eat) * days = 20 * 12 * horse_daily_eat\n    # Replacing horse_daily_eat with 12 * sheep_daily_eat from above, we have:\n    # (12 * 12 * sheep_daily_eat + 88 * sheep_daily_eat) * days = 20 * 12 * 12 * sheep_daily_eat\n    # 236 * sheep_daily_eat * days = 20 * 12 * 12 * sheep_daily_eat\n    # Solving for days we have:\n    days = (20 * 12 * 12) / 236\n\n    return days\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    # Total number of three digit numbers formed by all digit choices\n    total_three_digit_numbers = 9 * 10 * 10\n    \n    # Number of three digit numbers with no sevens at all\n    no_sevens = 8 * 9 * 9\n    \n    # Number of three digit numbers with exactly one seven\n    # One seven can be in the first, second, or third position:\n    one_seven = (1 * 9 * 9) + (9 * 1 * 9) + (9 * 9 * 1)\n    \n    # Number of three digit numbers with at least two sevens\n    # is the total minus the ones with no sevens and only one seven\n    at_least_two_sevens = total_three_digit_numbers - (no_sevens + one_seven)\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the flow rates of A, B, and C as a, b, c respectively\n    # and the capacity of the pool as x tons.\n    a, b, c, x = symbols('a b c x')\n\n    # According to the problem we have the following equations:\n    # 1. When A and C are turned on together they fill the pool: a + c = x\n    # and 18 tons of water are from A: a = 18.\n    # 2. When B and C are turned on together they fill the pool: b + c = x\n    # and 27 tons of water are from B: b = 27.\n    # 3. The flow rate of B is twice that of A: b = 2a\n\n    # Replacing a with 18 in equation 3 gives us b = 2 * 18\n    b_val = 2 * 18\n\n    # Now we have b = 2 * 18 = 36 and we can solve for x using equation 2.\n    # Plugging in b into the second equation b + c = x gives us 36 + c = x\n    equation2 = Eq(36 + c, x)\n\n    # Since we know the value of b, we can solve for c by plugging b into\n    # equation 2 where b = 36: c = x - 36\n    c_val = x - 36\n\n    # Now we substitute a = 18 and c = x - 36 into equation 1 to solve for x.\n    # Equation 1 becomes: 18 + (x - 36) = x\n    equation1 = Eq(18 + (x - 36), x)\n\n    # Solving equation 1 for x gives us x = 18 + x - 36 which simplifies to x = 54\n    # Hence, the capacity of the pool is 54 tons.\n    solution = solve(equation1, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "from itertools import permutations\n\ndef is_multiple_of_three(nums):\n    return sum(nums) % 3 == 0\n\ndef solution():\n    numbers = [39, 41, 44, 45, 47, 52, 55]\n    max_fourth_number = 0\n    for perm in permutations(numbers):\n        if all(is_multiple_of_three(perm[i:i+3]) for i in range(5)):\n            max_fourth_number = max(max_fourth_number, perm[3])\n    return max_fourth_number\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    numbers = [12.34, 23.45, 34.56, 45.67, 56.78, 67.89, 78.91, 89.12, 91.23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Initial conditions based on the problem statement\n    equation1 = Eq(x + y, 55)\n    equation2 = Eq(y + 8, (3 / 7) * (x - x / 3 + y + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of money Cindy had initially\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer must sit between his two children, so treat them as a single unit.\n    # This unit and the 3 other people will be considered as 4 entities to arrange in 4 seats.\n    arrangement_of_entities = factorial(4)\n\n    # Now, within the single unit, Mr. Spencer and his 2 children can be arranged in 2 ways.\n    arrangement_within_unit = factorial(2)\n\n    # The total number of arrangements\n    total_arrangements = arrangement_of_entities * arrangement_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    bill_eats = total_sweets / 2\n    remaining_after_eating = total_sweets - bill_eats\n    given_away = remaining_after_eating / 3\n    remaining_sweets = remaining_after_eating - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    mid_num = (num1 + num2) / 2\n    return mid_num\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    # Number of questions in total\n    total_questions = 6\n    # Marks for each correct answer\n    correct_marks = 5\n    # Deduction for each wrong answer\n    wrong_deduction = 2\n    # Valerie's total score\n    total_score = 23\n    \n    # Hypothetical situation: if all answers were correct\n    max_score = total_questions * correct_marks\n    \n    # The difference between the hypothetical max score and the actual score\n    score_difference = max_score - total_score\n    \n    # Since each wrong answer swaps a +5 mark with a -2 (a difference of 7 marks),\n    # we divide the score difference by this number to find the number of wrong answers\n    wrong_answers = score_difference // (correct_marks + wrong_deduction)\n    \n    # Correct answers are total questions minus wrong answers\n    correct_answers = total_questions - wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_52 = [i for i in range(1, 53) if 52 % i == 0]\n    common_factors = set(factors_24).intersection(factors_52)\n    \n    min_a_plus_c = float('inf')\n    for B in common_factors:\n        A = 24 // B\n        C = 52 // B\n        if A + C < min_a_plus_c:\n            min_a_plus_c = A + C\n    \n    return min_a_plus_c\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    # Use sympy for symbolic mathematics\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for sum, m, and n\n    m, n = symbols('m n', integer=True)\n    \n    # Since the question demands m < n, we factor that into our equations\n    # Define the terms a_k, a_m, a_n as per the definition given in the question\n    a_m = m**2 + m\n    a_n = n**2 + n\n\n    # Use the sum of arithmetic progression to find the sum of the sequence from a_m to a_n-1\n    # the sum formula is S = n/2 * (a1 + an), here n = n - m, a1 = a_m, an = a_n - 1 (since we are using a_n-1)\n    sum_sequence = ((n - m) * (a_m + (a_n - 1))) / 2\n\n    # Given the sum is 291, we create an equation sum_sequence = 291\n    equation = Eq(sum_sequence, 291)\n\n    # We solve the equation for m and n\n    # Since it is stated that m<n, we find the first solution that satisfies this condition\n    # We also know that both m and n should be ints, so we will iterate the possible integer \n    # combinations to find such m and n that satisfy the equation and the condition m < n\n    possible_solutions = solve(equation, (m, n))\n    \n    # Filter solutions for m and n being positive integers and m < n\n    valid_solutions = [(int(sol[m]), int(sol[n])) for sol in possible_solutions if sol[m] < sol[n] and sol[m] > 0 and sol[n] > 0]\n    \n    # There might be more than one solution, we take the first valid one\n    m_value, n_value = valid_solutions[0]\n\n    # Return the value of m + n as the answer\n    return m_value + n_value\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a = 1\n    n = 10\n    total = sum(range(a, a + 2 * n, 2))\n    return total\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # meters\n    speed = 7  # meters per minute\n    time_taken = distance / speed  # time = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # Consider A, B, C as one unit and E, F as another unit.\n    # We have 8 - 3 + 1 (for ABC) + 8 - 2 + 1 (for EF) = 6 + 7 = 13 units \n    # to arrange which can be done in factorial(6) ways.\n    units_arrangement = factorial(6)\n    \n    # Now, within the unit ABC, A, B, and C can arrange among themselves \n    # in factorial(3) ways.\n    abc_arrangement = factorial(3)\n    \n    # Similarly, within the unit EF, E and F can arrange among themselves \n    # in factorial(2) ways.\n    ef_arrangement = factorial(2)\n    \n    # The total number of arrangements is the product\n    # of the arrangements of the units and the arrangements within the units.\n    total_arrangements = units_arrangement * abc_arrangement * ef_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18\n    subtracted_value = 7\n    division_factor = 3\n\n    original_number = (result_after_operations - subtracted_value) * division_factor\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    days_original = 6\n    days_new = 4\n    more_scarfs_per_day = 24\n    \n    # Let the original number of scarfs produced each day be x\n    x = symbols('x')\n    \n    # Original plan: 6 days * x scarfs per day\n    original_plan = days_original * x\n    \n    # New plan: (x + 24) scarfs per day * 4 days\n    new_plan = (x + more_scarfs_per_day) * days_new\n    \n    # Set up the equation original_plan = new_plan\n    equation = Eq(original_plan, new_plan)\n    \n    # Solve the equation\n    num_scarfs_per_day = solve(equation, x)[0]\n    total_scarfs = original_plan.subs(x, num_scarfs_per_day)\n    \n    return total_scarfs\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    # If he gives each student 6 sweets, he will be short of 26 sweets.\n    # sweets + 26 = 6 * students\n    equation1 = Eq(sweets + 26, 6 * students)\n\n    # If he gives each student 5 sweets, he will be short of 5 sweets.\n    # sweets + 5 = 5 * students\n    equation2 = Eq(sweets + 5, 5 * students)\n\n    # Solving the system of equations for sweets\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio 5:3\n    equation1 = Eq(boys, 5/3 * girls)\n    # After 15 boys left, the ratio became 5:6\n    equation2 = Eq(boys - 15, 5/6 * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_students_initially = solutions[boys] + solutions[girls]\n\n    return total_students_initially\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    import math\n\n    A = 675\n    prime_factors = {}\n    \n    # Factorize A to its prime factors\n    for i in range(2, int(math.sqrt(A)) + 1):\n        while A % i == 0:\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n            A //= i\n            \n    if A > 1:  # If A is a prime number greater than 1\n        prime_factors[A] = 1\n        \n    B = 1\n    # For a number to be a perfect square, all the powers of its prime factors must be even.\n    for prime, power in prime_factors.items():\n        if power % 2 == 1:\n            B *= prime\n            \n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_factor = 1 - 1/3\n    original_price = sale_price / discount_factor\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    shelby_age_5_years_ago = shelby_current_age - 5\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    numbers = [10, 20, 30, 40]\n    ans = 1\n    for number in numbers:\n        ans *= number\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price = 695  # price in pence\n    single_can_price = 65  # price in pence\n    individual_price_for_12 = single_can_price * 12\n    savings = individual_price_for_12 - multipack_price\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n    \n    # For 4-digit numbers starting with 3\n    total_count += 5 * 4 * 3  # We can use 5, 4, 3 numbers for the remaining places.\n    \n    # For 4-digit numbers starting with 4\n    total_count += 5 * 4 * 3  # We can use 5, 4, 3 numbers for the remaining places.\n    \n    # For 4-digit numbers starting with 5, ensure that the second digit is 0, 1, or 2,\n    # since the number should be less than 5120.\n    total_count += 3 * 4 * 3  # We can use 3, 4, 3 numbers for the second, third, and fourth places.\n    \n    return total_count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let a, b, and c represent the weights of Adam, Ben, and Carl respectively.\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    # Create equations based on the information given\n    equation1 = Eq(a + b, 102)\n    equation2 = Eq(b + c, 97)\n    equation3 = Eq(a + c, 93)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # The total weight is the sum of Adam's, Ben's and Carl's weights\n    total_weight = solutions[a] + solutions[b] + solutions[c]\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, banana = symbols('apples banana')\n\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let x be the time it takes for Alan to paint the room on his own\n    \n    # Alan's work rate is 1/x rooms per hour\n    # Bob's work rate is 1/6 rooms per hour\n    # Together their work rate is 1/4 rooms per hour\n    \n    # The sum of their individual work rates is equal to their combined work rate\n    # That is: 1/x + 1/6 = 1/4\n    # Solving for x gives us Alan's time to paint the room on his own\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1/x + 1/6, 1/4)\n    alan_time = solve(equation, x)\n    \n    # Since we expect a physical time duration, we take the positive solution\n    return alan_time[1]  # The second solution is the positive one\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    singapore_stamps = 172\n    total_stamps = 310\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    balance = principal * (1 + rate) ** time\n    return balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    # Let x be the distance between locations A and B.\n    # In 4 hours, if Car A travels d meters, then Car B will travel x-d meters.\n    # In the next 3 hours, Car A travels x-d+70 meters to reach location B, and Car B travels d-70 meters.\n    # The ratio of their speeds is constant, so we have:\n    # (d / (x - d)) = ((x - d + 70) / (d - 70))\n    \n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    # Set up the equation based on the distance ratio\n    equation = Eq(d / (d + 70), (d - 70) / (4 * (d + 70)))\n    # Solve the equation for d\n    solution_d = solve(equation, d)[0]\n    \n    # Calculate the total distance\n    distance = 4 * (solution_d + 70)\n    \n    return distance\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_consumption = 15\n    weeks = 26\n\n    total_food_needed = weekly_food_consumption * weeks\n\n    return total_food_needed\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    solutions = solve(equation, score)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    votes_remaining = total_votes - (22 + 27 + 35)\n    # To win without fail, Peter must have more than half the votes once all votes are cast\n    votes_needed_for_majority = (total_votes // 2) + 1\n    # Calculate the extra votes Peter needs to reach this majority\n    extra_votes_needed = votes_needed_for_majority - peter_votes\n    # If there are not enough remaining votes for Peter to achieve this, set the number to the remaining votes\n    if extra_votes_needed > votes_remaining:\n        extra_votes_needed = votes_remaining\n    \n    return extra_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Alex and Nicholas each have.\n    x = symbols('x')\n\n    # After spending, Nicholas (x - 13) has 6 times the money left compared to Alex (x - 58).\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve the equation for x.\n    solved_x = solve(equation, x)[0]\n\n    # Calculate the total amount they had at first, which is 2 times x.\n    total_amount = 2 * solved_x\n\n    return total_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    total = 250\n    subtractions = 6 * 6 + 8 * 6  # There are six 6's and six 8's\n\n    ans = total - subtractions\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n\n    flour_used = total_flour - remaining_flour\n    \n    return flour_used\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pages = symbols('total_pages')\n    first_day_pages = total_pages / 2 - 32\n    second_day_pages = total_pages / 4\n    third_day_pages = 4/5 * first_day_pages\n\n    equation = Eq(first_day_pages + second_day_pages + third_day_pages, total_pages)\n    book_pages = solve(equation, total_pages)[0]\n    return book_pages\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6 = 6 * 10**-3\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    pole_interval = 12\n\n    # Subtract two intervals from the road length to account for no poles at the ends\n    adjusted_length = road_length - (2 * pole_interval)\n    \n    # Calculate the number of poles based on the adjusted length\n    num_poles = adjusted_length / pole_interval\n    \n    return int(num_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # let x be the number of rulers Alison has\n    # Alison has x + 10 pencils\n    # Total pencils and rulers is 52\n    # So the equation is: x + (x + 10) = 52\n\n    # Solving for x\n    x = (52 - 10) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n    remainder_days = days_later % days_in_week  # This will give us the number of days past a full week cycle\n\n    # Mapping the days of the week to corresponding codes\n    day_codes = {\"Monday\": 1, \"Tuesday\": 2, \"Wednesday\": 3, \"Thursday\": 4, \"Friday\": 5, \"Saturday\": 6, \"Sunday\": 7}\n\n    # Given that today is Monday, we find the corresponding code\n    current_day_code = day_codes[\"Monday\"]\n\n    # Find the code of the day 28 days later\n    future_day_code = (current_day_code + remainder_days - 1) % days_in_week + 1\n\n    # Reverse the mapping to get the day name\n    day_name = [name for name, code in day_codes.items() if code == future_day_code][0]\n\n    # Return the code in the specified format\n    ans = f\"{day_name} -> {'%04d' % day_codes[day_name]}\"\n    return ans\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_sum = mean_value * (len(numbers) + 1)\n    \n    x = total_sum - sum(numbers)\n    \n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    ans = 68 + 37 - (27 - 32)\n    return ans\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    xiaoming_original = 30\n    given_amount = 8\n    # Let xiao_hong_original be the amount Xiao Hong originally had\n    # After giving $8 to Xiao Ming, Xiao Hong has xiao_hong_original - 8\n    # And Xiao Ming has 30 + 8\n    # We know that after the exchange, both have the same amount of money\n    # Therefore: xiaoming_original + 8 = xiao_hong_original - 8\n    \n    xiao_hong_original = xiaoming_original + 2 * given_amount\n    return xiao_hong_original\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    total_ratio = 5 + 6 # Ratio of boys to girls is 5:6, total is 5+6\n    boys_count = 200\n    girls_count = (boys_count * 6) / boys_ratio\n\n    return int(girls_count)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 in decimal form is 0.333... and goes on forever with the digit 3,\n    # then the sum of the first 1000 digits from the right of the decimal point is simply 3 * 1000.\n    ans = 3 * 1000\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percent = 15\n    total_amount = 29\n\n    ans = (percent / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    ans = 100 // 2\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    total_sections = 12 * 3  # Each section is cut into 3 pieces\n    time_per_cut = 22 / 12   # Time to make one cut\n    total_time = time_per_cut * (total_sections - 1)  # Subtracting the initial piece\n    return total_time\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n    \n    ans = fraction + percentage + decimal\n    \n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors, symbols, Eq, solve\n\n    # Get all divisors of 2016\n    divisors_2016 = divisors(2016)\n    current_year_ages = []\n\n    # Find possible combinations of ages whose product is 2016\n    for age1 in divisors_2016:\n        for age2 in divisors_2016:\n            age3 = 2016 // (age1 * age2)\n            if age1 * age2 * age3 == 2016 and age1 <= age2 <= age3:\n                # Subtract 1 from the ages to check if their product was 1377 last year\n                if (age1 - 1) * (age2 - 1) * (age3 - 1) == 1377:\n                    current_year_ages = [age1, age2, age3]\n                    break\n        if current_year_ages:\n            break\n\n    # Calculate the product of their ages two years ago\n    answer = (current_year_ages[0] - 2) * (current_year_ages[1] - 2) * (current_year_ages[2] - 2)\n\n    return answer\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    total_people = 5\n    people_together = 2\n    not_together_ways = math.factorial(total_people) # Total ways without the restriction\n    together_ways = math.factorial(people_together) * math.factorial(total_people - people_together + 1) # Ways when two people stand next to each other\n\n    return together_ways\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_boxes_first_3_days = 33\n    average_boxes_last_4_days = 18\n    total_days = 7\n\n    total_boxes_last_4_days = average_boxes_last_4_days * 4\n    total_boxes_whole_week = total_boxes_first_3_days + total_boxes_last_4_days\n    average_boxes_per_day_whole_week = total_boxes_whole_week / total_days\n\n    return average_boxes_per_day_whole_week\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration in a solution (%)\n    x = symbols('x')\n\n    # After adding 10 grams of solution to A, A has 40 grams total\n    # Concentration in A is therefore (10x)/40\n    # 10 grams of the new A solution is moved to B, so B has (10x)/40 * 10 grams of solute.\n\n    # B now has 40 grams of water + (10x)/40 * 10 grams of solute from A, total of 50 grams\n    # Concentration in B is ((10x)/40 * 10) / 50\n    # Then 10 grams of the new B solution is moved to C, so C has ((10x)/40 * 10) / 50 * 10 grams of solute.\n\n    # C now has 50 grams of water + ((10x)/4 * 1)/5 * 10 grams of solute from B, total of 60 grams\n    # The final concentration in C is given as 0.5%\n    \n    equation = Eq((((10*x)/40) * (10/50)) * (10/60), 0.5/100)\n\n    solution_concentration = solve(equation, x)\n\n    return solution_concentration[0]\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # in mg\n    weight_metal2 = 13  # in mg\n    nickel_percent_metal1 = 0.40\n    nickel_percent_metal2 = 0.60\n\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel = (weight_metal1 * nickel_percent_metal1) + (weight_metal2 * nickel_percent_metal2)\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays against every other player once.\n    # So, each player plays 7 matches since there are 8 players total.\n\n    # As all players have different number of wins and no ties occurred,\n    # the possible number of wins for the players can be from 0 to 7.\n\n    # Since the champion must have the highest number of wins and one player\n    # must have each possible number of wins (0 to 7), the champion has 7 wins\n    # because there must be a player corresponding to each number of wins from 0 to 6.\n\n    ans = 7  # The champion records 7 wins in the tournament.\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        total = n * (n + 1) // 2\n        if total > 3405:\n            break\n        if (3405 - total) <= n and (3405 - total) > 0:\n            return 3405 - total\n        n += 1\n        \nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given information\n    sum_6 = 64\n    sum_12 = 156\n    \n    # From the property of arithmetic progression: S_n = n/2 * (2a + (n-1)d)\n    # Where S_n is the sum of the first n terms, a is the first term, and d is the common difference\n    # We have two equations:\n    # sum_6 = 6/2 * (2a + (6-1)d) => 64 = 3 * (2a + 5d)\n    # sum_12 = 12/2 * (2a + (12-1)d) => 156 = 6 * (2a + 11d)\n\n    # From the first equation, we can say: 2a + 5d = 64 / 3 \n    # Similarly from second equation: 2a + 11d = 156 / 6\n\n    # Now let's find the common difference d by subtracting the two equations\n    # We'll get: 6d = (156 / 6 - 64 / 3)\n    d = (156 / 6 - 64 / 3) / 6\n\n    # Now let's find the first term a by substituting the value of d in the first equation\n    a = (64 / 3 - 5 * d) / 2\n\n    # Now we need the sum of the first 18 terms\n    # sum_18 = 18/2 * (2a + (18-1)d)\n    sum_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n    \n    return sum_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of chickens per pen\n    # Let y be the total number of chickens\n    x, y = symbols('x y')\n    \n    # Original situation:\n    # y = 24x\n    eq1 = Eq(y, 24 * x)\n    \n    # After building 6 more pens:\n    # y = (24 + 6)(x - 6)\n    eq2 = Eq(y, (24 + 6) * (x - 6))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_club_total = (7/8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the digits of the original numbers\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n\n    # Perform the subtraction\n    answer = num1 - num2\n\n    # Reverse the result to match the Zog number system\n    ans = int(str(answer)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    ans = gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    years_ago = 3\n    difference_in_age = 2\n\n    brother_age_then = ashley_age - years_ago - difference_in_age\n    brother_current_age = brother_age_then + years_ago\n\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    train_speed = 20  # meters per second\n    time_to_cross = 30  # seconds\n\n    # Distance covered by the train while crossing the bridge completely\n    distance_covered = train_speed * time_to_cross\n\n    # Length of the bridge is total distance covered minus the length of the train\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return int(difference)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time from 6:30 am to 7:00 am is 30 minutes (0.5 hours)\n    jogging_time = 0.5\n    # Jogging speed is 9 km per hour\n    jogging_speed = 9\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Walking time from 7:00 am to 8:00 am is 1 hour\n    walking_time = 1\n    # Walking speed is 7.5 km per hour\n    walking_speed = 7.5\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance travelled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    # Let x be the number of 5 pence coins exchanged for 2 pence coins\n    # Each exchange, you give 1 5p and get (5/2) 2p, which increases coin count by 1.5\n    # Initial 20 5p coins, end with (20 - x + 1.5x = 32) coins\n    # Solve for x:\n    x = (32 - 20) / 0.5\n    \n    # Now let's consider changing some 5p left (20 - x) to 1p coins\n    # Each exchange, you give 1 5p and get 5 1p, which increases coin count by 4\n    # We initially have (20 - x) 5p coins and end with (56 - 32) additional 1p coins\n    # Solve for remaining 5p coins:\n    remaining_5p = 20 - x - (56 - 32) / 4\n    \n    return remaining_5p\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # For a three-digit number, we need to choose 1 digit for each of the three places.\n    # We know that:\n    # The first place can have 2 possible digits (3 and 4, but not 0 because we want a three-digit number)\n    # The second and third places can each have 3 possible digits (0, 3, and 4).\n    \n    first_place_options = 2\n    second_place_options = 3\n    third_place_options = 3\n    \n    total_combinations = first_place_options * second_place_options * third_place_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n    total_games = 63\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, total_games)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference = 55 - 44\n    ans = common_factor * difference\n    return ans\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange 3 girls together is 3! (factorial) for the girls themselves\n    # and 1! for the group as a unit among the other people.\n    girls_ways = factorial(3)\n\n    # Now think of the teacher-boy pairs as units. There are 3 teachers and 3 boys, but since\n    # no two boys can stand next to each other, each boy must stand with a teacher.\n    # These pairs can be arranged in 3! ways.\n    # Each teacher-boy pair can be arranged in 2! ways (teacher-boy or boy-teacher).\n    teacher_boy_pairs_ways = factorial(3) * (factorial(2) ** 3)\n\n    # Now we have 4 units: 3 teacher-boy pairs and 1 unit of girls.\n    # These can be arranged in 4! ways.\n    units_arrangement_ways = factorial(4)\n\n    # Combining everything together.\n    ans = girls_ways * teacher_boy_pairs_ways * units_arrangement_ways\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Area of an equilateral triangle with side a: A = (sqrt(3) / 4) * a^2\n    from math import sqrt\n\n    # Area of Triangle X\n    area_X = (sqrt(3)/4) * (3**2)\n    # Area of Triangle Y\n    area_Y = (sqrt(3)/4) * (9**2)\n\n    # Times Triangle X can fit into Triangle Y\n    ans = area_Y / area_X\n\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    number = 100\n    while not (number % 7 == 4 and number % 8 == 4 and number % 9 == 4):\n        number += 1\n        if number > 999:\n            break\n    return number\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # 5x is the total amount spent on pens\n    # 3x is the total amount spent on pencils\n    # Total amount spent is $120\n    equation = Eq(5*x*12 + 3*x*5, 120)\n\n    # Solve for x\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    ans = comb(total_students, students_to_choose)\n\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # c is the initial number of cows, g is the initial number of goats\n    c, g = symbols('c g', real=True, positive=True)\n    \n    # Setting up the equations based on the problem statements\n    # 65% of the animals were cows initially, so (65/100)(c + g) = c\n    equation1 = Eq((65/100) * (c + g), c)\n    \n    # The rest 35% were goats\n    equation2 = Eq(g, (35/100) * (c + g))\n    \n    # When 240 more animals were added, the percentage of cows increased to 85%\n    # so (85/100)(c + g + 240) = c + 240\n    equation3 = Eq((85/100) * (c + g + 240), c + 240)\n    \n    # The number of goats doubled\n    # so 2 * g = g + 240\n    equation4 = Eq(2 * g, g + 240)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_product = 8 * 9 * 10\n    smaller_product = 1 * 2 * 3\n    difference = larger_product - smaller_product\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup = 2  # soup is optional, so it's either taking it (1) or not taking it (1); hence 2 options\n    desserts = 3  # dessert is optional, so it's either taking it (2) or not taking it (1); hence 3 options\n\n    combinations = appetisers * main_courses * soup * desserts\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(7, 8), (8, 9)]\n    num_children = solve_congruence(*congruences)\n\n    return int(num_children[0])\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    common_difference = 5\n    last_term = 41\n\n    # Number of terms in the sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Sum of the arithmetic sequence\n    sum_of_sequence = n * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    weight_ratio_dog_to_rabbit = 8\n    weight_ratio_rabbit_to_chicken = 2\n    weight_ratio_dog_to_chicken = weight_ratio_dog_to_rabbit * weight_ratio_rabbit_to_chicken\n    \n    return weight_ratio_dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from sympy import divisors, factorial\n\ndef solution():\n    # Since 2^27 can only be factored into powers of 2, we need to check\n    # how we can construct the 10 digits from factors of 2^27.\n    # Possible digits are [8, 4, 2, 1] = [2^3, 2^2, 2^1, 2^0]\n\n    # Count of digits 8 (2^3), 4 (2^2), 2 (2^1) and 1 (2^0)\n    digit_counts = {\n        '8': 0,\n        '4': 0,\n        '2': 0,\n        '1': 0\n    }\n\n    # Total product is 2^27, so we will split this into 10 digits\n    # which means sum of the powers of 2 for each digit must equal 27\n    # and sum of the quantity of digits must equal 10.\n\n    # We can perform a combinatorial approach splitting the 27 among the digits\n    # However, to avoid overcounting, we must fix positions for \"1\" because it does not change the product value\n\n    count = 0\n    # Iterate number of eights from 0 to 27/3 (only three since 8 = 2^3)\n    for num_eights in range(0, (27 // 3) + 1):\n        rest_after_eights = 27 - num_eights * 3\n        # Iterate number of fours from 0 to remaining 2s (only two since 4 = 2^2)\n        for num_fours in range(0, (rest_after_eights // 2) + 1):\n            rest_after_fours = rest_after_eights - num_fours * 2\n            # The rest can be only twos and ones\n            num_twos = rest_after_fours  # since 2 = 2^1\n            num_ones = 10 - (num_eights + num_fours + num_twos)  # fill the rest with ones\n\n            if num_ones >= 0:\n                # Counting permutations where ones are fixed\n                # So we only permute positions for 8, 4, and 2\n                total_permutations = factorial(num_eights + num_fours + num_twos)\n                permutation_eights = factorial(num_eights)\n                permutation_fours = factorial(num_fours)\n                permutation_twos = factorial(num_twos)\n\n                # Calculating final permutations for the set of numbers\n                current_combination_count = total_permutations // (permutation_eights * permutation_fours * permutation_twos)\n                count += current_combination_count\n\n    return count\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let 'x' be the total number of slices she had at first.\n    # According to the question:\n    # (3/5)x + 2 (given to friends) + 4 (left) = x\n    # Solve for 'x'\n    x = (2 + 4) / (1 - (3/5))\n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the part of the job Mike can do in one hour\n    # Let d be the part of the job Danny can do in one hour\n    m, d = symbols('m d')\n    \n    # Since they finish the job together in 10 hours\n    equation1 = Eq(10 * (m + d), 1)\n    \n    # If Mike types for 8 hours and then Danny types for 13 hours, they finish the job\n    equation2 = Eq(8 * m + 13 * d, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n    \n    # The time it takes Danny to finish the job by himself is 1 divided by his work rate\n    time_for_danny = 1 / solutions[d]\n    return time_for_danny\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    sequence = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    position_difference = 10**2 - 10**0  # difference in positions of the two 3's\n    place_value_difference = 3 * position_difference\n    return place_value_difference\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    # Let the number of blue balls be x\n    total_red = 4\n    total_probability = 2 / 7\n\n    # The probability of taking two red balls without replacement\n    # is the product of the probabilities of taking one red ball\n    # and then another red ball (the \"and\" rule for independent events):\n    # P(both red) = (total_red/total_balls) * ((total_red-1)/(total_balls-1))\n    # Therefore, (4/total_balls) * (3/(total_balls-1)) = 2/7\n    \n    # Now we need to solve for total_balls,\n    # As total_balls = total_red + x (x = number of blue balls)\n    \n    # The equation becomes: (4/(4+x)) * (3/(3+x)) = 2/7\n    \n    # Cross multiply to solve the equation:\n    # 14 * (4 * 3) = 2 * (4+x) * (3+x)\n    # 14 * 12 = 2 * (12 + 7x + x^2)\n    # 168 = 24 + 14x + 2x^2\n    # 2x^2 + 14x + 24 - 168 = 0\n    # 2x^2 + 14x - 144 = 0\n    # x^2 + 7x - 72 = 0\n    # Factor the quadratic equation:\n    # (x - 8)(x + 9) = 0\n    # x = 8 or x = -9\n    \n    # Since the number of blue balls can't be negative, x must be 8.\n    \n    return 8\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n    min_pencils_in_one_case = (total_pencils + total_cases - 1) // total_cases\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    b = 10\n    target_sum = 66\n    \n    # Using the Arithmetic Series Sum Formula: S = n/2 * (first_term + last_term)\n    # Here first_term is 'a' and the last_term is 'a+b'\n    # Hence, S = (b+1)/2 * (2a + b)\n    # As given 'a ⊕ b' is the sum, thus 'a ⊕ 10' = (10+1)/2 * (2a + 10) = 66\n    # Solving for 'a':\n    a = (2 * target_sum) / ((b+1)*(b+2)) # Simplified form of the sum to solve for 'a'\n\n    return int(a)\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54  # side length of the square board in cm\n    interval = 3  # interval in cm at which chess are placed\n    chess_per_side = (side_length // interval) + 1  # number of chess per side including corners\n    total_chess = 4 * (chess_per_side - 1)  # total chess around the board excluding repetitions of corners\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # The smallest number of red squares is achieved by maximizing the number of digits\n    # that appear less than 5 times, so no red painting happens for them.\n    # There are 10 different digits (0-9), and if each appears 4 times, no squares will be painted red.\n    # However, we have 100 squares, which means 4 * 10 = 40 squares will be left without paint,\n    # and we must fill remaining 60 squares. \n    \n    # If we have one extra digit appearing 5 times or more, that would be the minimum scenario\n    # for having red squares. So, we distribute these 60 squares among as many digits\n    # as possible that still require each of those digits to appear 5 times or more.\n    \n    # Since 60 is the number of extra squares and 50 (5*10) would be the perfect distribution\n    # among all digits to be painted red, the number of extra squares past this perfect\n    # distribution is 60 - 50 = 10. These 10 squares are the least number that can be red.\n    \n    return 10\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the sequence is decreasing\n    \n    # The n-th term formula for arithmetic sequence: an = a1 + (n-1)d\n    # The first negative term is when an < 0\n    # Rearranging the formula: 0 > 50 + (n-1)(-4)\n    # Solving for n: (n-1) < 50 / 4 -> n < 50 / 4 + 1\n    # Since we want the term before it becomes negative:\n    n = 50 // 4 + 1\n\n    return n\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_on_folder = 2.89\n    father_gave = 4/5\n\n    remaining_amount = initial_amount - spent_on_folder + father_gave\n\n    return round(remaining_amount, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):\n        num = int(str(i) + str(i))\n        if (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 0\n    counter_of_zeros = 0\n    counter_of_fives = 0\n    \n    while counter_of_zeros < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            counter_of_fives += 1\n            temp //= 5\n        counter_of_zeros = counter_of_fives\n    \n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Tim's speed (km per hour)\n    tim_speed = 56\n    # Bob's speed (km per hour)\n    bob_speed = 74\n    # Initial distance between them (km)\n    initial_distance = 780\n    # Remaining distance after they start driving towards each other (km)\n    remaining_distance = 130\n    # Total distance traveled by both when they are 130 km apart\n    distance_traveled = initial_distance - remaining_distance\n    # Combined speed at which Tim and Bob are approaching each other (km per hour)\n    combined_speed = tim_speed + bob_speed\n    # Calculate the time taken (hours) for Tim and Bob to have 130 km between them\n    time_taken = distance_traveled / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5  # Since there are 5 numbers\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n\n    akon = 4\n    ben = 7\n    cris = 8\n\n    ans = lcm(akon, ben, cris)\n\n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "网络故障，请重试"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = '8354'  # the repeating sequence in the decimal part\n    decimal_length = len(decimal_part)  # length of the repeating sequence\n    sum_of_digits = sum(int(digit) for digit in decimal_part)  # sum of one full sequence\n\n    full_repeats, remaining_digits = divmod(84, decimal_length)\n    total_sum = full_repeats * sum_of_digits + sum(int(decimal_part[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Let's call the time interval between the strikes \"t\".\n    # We know that for 6 strikes, there are 5 intervals and the total time is 43 seconds.\n    # The equation for 6 strikes is: 6 * 3 + 5 * t = 43\n    \n    # First, we solve for t\n    t = (43 - (6 * 3)) / 5\n    \n    # Now we calculate the total time for 12 strikes.\n    # For 12 strikes, there are 11 intervals.\n    total_time = 12 * 3 + 11 * t\n\n    return total_time\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    each_pay = total_cost / people\n    return each_pay\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # To divide 20 pens among 6 kids with each kid getting at least one\n    # we first give each kid one pen\n    remaining_pens = 20 - 6\n    \n    # Now we have to distribute the remaining pens among the 6 kids\n    # This is a problem of distributing \"remaining_pens\" indistinguishable items into \"6\" distinguishable bins\n    # which is equivalent to the problem of placing \"remaining_pens\" indistinguishable balls into \"6\" distinguishable bins,\n    # also known as the \"stars and bars\" problem.\n    \n    # The number of ways is given by the formula: C(n + k - 1, k - 1)\n    # where n is the remaining pens and k is the number of kids\n    ways = factorial(remaining_pens + 6 - 1) // (factorial(remaining_pens) * factorial(6 - 1))\n    \n    return ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    ans = 53 * 58\n    return ans\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    i = 1\n    while True:\n        m_squared = i**2\n        if ((m_squared + 5 + 18) ** 0.5).is_integer():\n            return m_squared + 5\n        i += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    original_group = 6\n    original_time = 15\n    target_time = 2\n\n    # Work is considered as a constant here (work = people * time)\n    # We find the number of people needed by dividing the total work by target time\n    total_work = original_group * original_time\n    people_needed = total_work / target_time\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    \n    # Convert minutes to hours\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    no_zero_three_digit_numbers = 9 * 9 * 9  # Eliminate all numbers with a zero\n    numbers_with_at_least_one_zero = total_three_digit_numbers - no_zero_three_digit_numbers\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30   # in meters per second\n\n    kinetic_energy = 0.5 * mass * speed**2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 1) and (num % 4 == 1) and (num % 5 == 1) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    nth_term = first_term + (7 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let the speed of Jerry be x miles per hour.\n    # Then the speed of Kevin is 1.5x miles per hour.\n    # The relative speed at which Jerry and Kevin approach each other is x + 1.5x = 2.5x miles per hour.\n    # Let the time they travel before meeting be t hours.\n    # They cover the entire distance when they meet, which is 225 miles.\n    # So, we have the equation: 2.5x * t = 225 miles.\n    # The distance Jerry travels is Jerry's speed multiplied by time: x * t.\n    # We need to find x * t and use the above equation to do so.\n    \n    # Since they cover the whole distance together, we also know that\n    # x * t + 1.5x * t = 225\n    # Combining like terms gives us 2.5x * t = 225\n    # Solving for t gives us t = 225 / 2.5x\n    # We can substitute back into x * t to find Jerry's distance traveled:\n    # Jerry's distance = x * (225 / 2.5x)\n    \n    # Since we're looking for the distance Jerry traveled and not the actual time or speed, we can simplify:\n    # Jerry's distance = 225 / 2.5\n    \n    jerry_distance = 225 / 2.5\n    \n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n\n    space_between_pictures = (total_width - number_of_pictures * picture_width) / (number_of_pictures - 1)\n    \n    distance_from_left_wall_to_centre_of_wall = total_width / 2\n    distance_from_left_wall_to_centre_of_third_picture = picture_width + 1.5 * space_between_pictures\n    \n    distance_from_centre_of_wall_to_centre_of_third_picture = distance_from_left_wall_to_centre_of_third_picture - distance_from_left_wall_to_centre_of_wall\n\n    return distance_from_centre_of_wall_to_centre_of_third_picture\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 1  # Consider original height to be 100% (1 in fraction)\n    bounce_height = original_height * 0.75\n    bounce_count = 0\n    threshold_height = original_height * 0.25\n\n    while bounce_height >= threshold_height:\n        bounce_height *= 0.75\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    # This is an arithmetic sequence where a = 5 (first term), d = 3 (common difference)\n    # The sequence is 5, 8, 11, 14, 17, 20\n    # To find the sum of an arithmetic sequence: S = n/2 * (a1 + an), where\n    # n is the number of terms, a1 is the first term, and an is the last term.\n\n    a1 = 5    # First term\n    an = 20   # Last term\n    n = (an - a1) // 3 + 1  # Calculate number of terms\n\n    # Calculate the sum of the arithmetic sequence\n    S = n * (a1 + an) // 2\n\n    return S\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    # Let x be the uncle's current age\n    # When Doris reaches her uncle's current age, her uncle will be 40\n    # This means the difference in their ages is the number of years until the uncle is 40\n    age_difference = 40 - 10\n    # Since the difference in age will always remain constant,\n    # we can find the uncle's current age by adding the age difference to Doris's age\n    uncles_age = 10 + age_difference\n    return uncles_age\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Ones place is the greatest odd number, which is 9\n    ones_place = 9\n\n    # We need to find two different digits for the hundreds and tens places that add up to 13\n    # Additionally, since we need to form the smallest possible number,\n    # we should choose the smallest possible digit for the hundreds place and the next smallest for the tens place.\n    \n    # Let's iterate over the possible digits for the hundreds place (1 to 9, since 0 would not make it a 4-digit number)\n    for hundreds_place in range(1, 10):\n        # Calculate what the tens place should be to add up to 13 with the hundreds place\n        tens_place = 13 - hundreds_place\n        # Make sure the tens place is a different digit and is not 9 (since that's already in the ones place)\n        if tens_place != hundreds_place and tens_place < 10 and tens_place != 9:\n            # Now we have the hundreds and tens places set, as well as the ones.\n            # We just need to pick the smallest digit different from the previous ones for the thousands place.\n            # The smallest digit is 0, but if the hundreds_place is not 1, we can use 1 for the smallest digit.\n            if hundreds_place != 1:\n                thousands_place = 1\n            else:\n                thousands_place = 0  # If the hundreds_place was 1, the next smallest digit is 0.\n            # Now we have all the places figured out, combine them to form the number\n            number = thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n            # Since the task is to form the smallest number and we went in increasing order, we can return the first valid number we get\n            return number\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Calculate price for 1 banana and 1 apple\n    price = solutions[banana] + solutions[apple]\n\n    return price\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n    \n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    total_food = 17 * 30\n    total_cows_initial = (total_food - 4 * 2) // (6 + 2)\n    return total_cows_initial\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    first_number = 5\n    last_number = 20\n\n    ans = last_number - first_number - 1\n\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original amount of money Jerry had\n    x = symbols('x')\n    \n    # Equation: x - 200 - 2/7 * (x - 200) = 1/3 * x\n    equation = Eq(x - 200 - 2/7 * (x - 200), 1/3 * x)\n    \n    # Solve for x\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n    \n    # Tom and Harry can be treated as one unit and there are 2! ways to arrange them within that unit.\n    tom_harry_permutations = factorial(2)\n    \n    # There are now effectively 6 units to arrange (5 students + the Tom/Harry unit).\n    other_students_permutations = factorial(5)\n    \n    # Ronda must stand at the furthest right, so no permutations are needed for her.\n    # The total number of arrangements is the product of the two permutation counts.\n    total_permutations = tom_harry_permutations * other_students_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 1.15763\n    second_interest_rate = 1.1664\n    \n    amount_after_three_years = initial_investment * first_interest_rate\n    final_amount = amount_after_three_years * second_interest_rate\n    \n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    first_distance = 18  # First 18 kilometers\n    first_time = 24 / 60  # 24 minutes in hours\n    \n    second_speed = 72  # Speed for second part of the trip in km/h\n    second_time = 35 / 60  # 35 minutes in hours\n    second_distance = second_speed * second_time  # Distance for second part\n    \n    total_distance = first_distance + second_distance  # Total distance\n    total_time = first_time + second_time  # Total time in hours\n    \n    average_speed_kph = total_distance / total_time  # Average speed in km/h\n    average_speed_kpm = average_speed_kph / 60  # Average speed in km/min\n    \n    ans = round(average_speed_kpm, 2)  # Retain two decimal places\n    return ans\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance from P to Q\n    # Let s be the usual speed\n    # Let t be the usual time taken\n    d, s, t = symbols('d s t')\n\n    # Equation for the original journey\n    equation1 = Eq(d, s * t)\n\n    # Equation for 20% increased speed leading to 1 hour less travel time\n    # New speed is 1.2 times the original speed: s * 1.2\n    # The time taken therefore is (t - 1)\n    equation2 = Eq(d, s * 1.2 * (t - 1))\n\n    # Equation for first 200km at usual speed and remaining at 25% increased speed\n    # Distance left after the first 200km: d - 200\n    # Time taken to travel the first 200km: 200 / s\n    # New speed after 200km: s * 1.25\n    # The remaining time taken to travel at increased speed: (d - 200) / (s * 1.25)\n    # This results in reaching the destination 12 minutes (1/5 hour) earlier: t - 1/5\n    equation3 = Eq(200 / s + (d - 200) / (s * 1.25), t - 1/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    # Return the value of d\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_sum = 4 * 89\n    target_average = 95\n    tests_taken = 4\n\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_sum = current_sum + 100 * additional_tests\n        new_average = new_sum / (tests_taken + additional_tests)\n        if new_average >= target_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time for the first segment of the race\n    distance_first_segment = 540  # in metres\n    speed_first_segment = 9       # in meters per second\n    time_first_segment = distance_first_segment / speed_first_segment\n\n    # Calculate time for the second segment of the race\n    distance_second_segment = 300  # in metres\n    speed_second_segment = 6       # in meters per second\n    time_second_segment = distance_second_segment / speed_second_segment\n\n    # Calculate time for the final segment of the race\n    distance_final_segment = 1000 - distance_first_segment - distance_second_segment  # in metres\n    speed_final_segment = 10                                                       # in meters per second\n    time_final_segment = distance_final_segment / speed_final_segment\n\n    # Total time for the entire race\n    total_time = time_first_segment + time_second_segment + time_final_segment\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n\n    uncle_current_age = uncle_future_age - (uncle_future_age - doris_age)\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    extra_performances = 2  # One from Lia and one from Liz\n    total_performances = class_performances + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # Speed in meters per second\n\n    # Total distance to cover is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the entire bridge is the total distance divided by the speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_start, cows_start = symbols('sheep_start cows_start')\n    equation1 = Eq(sheep_start, (5/7) * cows_start)\n    equation2 = Eq(cows_start - 7, (3/4) * (sheep_start + 21))\n\n    solutions = solve((equation1, equation2), (sheep_start, cows_start))\n\n    return solutions[sheep_start]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    additional_stamps = polly_stamps - chloe_stamps\n    \n    return additional_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x = cost of one similar book, y = cost of one identical pencil box\n    x, y = symbols('x y')\n\n    # Two equations based on the given problem\n    equation1 = Eq(2 * x + 3 * y, 42)\n    equation2 = Eq(2 * x + 6 * y, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = 8 * 60 + 30  # convert 08:30 to minutes\n    end_time = 9 * 60 + 25    # convert 09:25 to minutes\n    n = end_time - start_time  # calculate the difference in minutes\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 1 / 6  # A can complete the job in 6 days\n    B_efficiency = A_efficiency / 2  # B's efficiency is half of A's\n\n    total_efficiency = A_efficiency + B_efficiency  # Their combined efficiency per day\n\n    total_time = 1 / total_efficiency  # Total time to complete the job together\n\n    return total_time\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let x be the current age of Geoff and y be the current age of his sister.\n    # Given that the sum of their current ages is 22.\n    x_plus_y = 22\n\n    # If z years pass, the sum of their ages would be 30.\n    # Since both will be z years older, we can write this as x + z + y + z = 30.\n    # Simplifying, we get 2z + x + y = 30.\n    # Substitute the value of x + y from the first equation to find z.\n    z = (30 - x_plus_y) / 2\n\n    return z\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # in cents\n    mamee_cost = haribo_cost - 30\n    big_jelly_cost = 6 * mamee_cost\n\n    # Convert cents to dollars\n    return big_jelly_cost / 100\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_candies = symbols('total_candies')\n    anna = 3 / 8 * total_candies\n    belle = 1 / 4 * total_candies\n    cathy_dawn = total_candies - anna - belle\n\n    equation = Eq(anna + belle, cathy_dawn + 90)\n\n    sol = solve(equation, total_candies)\n\n    return sol[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    left_numerator = 18\n    left_denominator = 36\n    right_denominator = 32\n\n    right_numerator = (left_numerator / left_denominator) * right_denominator\n\n    return right_numerator\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    # Reverse Joel's action\n    remaining_plants_after_joel = (remaining_plants + 2) * 2\n    # Reverse Valerie's action\n    remaining_plants_after_valerie = (remaining_plants_after_joel + 3) * 2\n    # Reverse Ethan's action\n    initial_plants = (remaining_plants_after_valerie + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol to be used in the equation\n    initial_fish_balls = symbols('initial_fish_balls')\n    \n    # Equation after selling 3/4 in the morning, so 1/4 left\n    morning_left = (1 - 3/4) * initial_fish_balls\n    \n    # Equation after selling 1/3 in the afternoon, so 2/3 of 1/4 left\n    afternoon_left = (2/3) * morning_left\n    \n    # Equation after making 506 more fish balls\n    final_total = afternoon_left + 506\n    \n    # He had twice the number of fish balls he made at first\n    final_equation = Eq(final_total, 2 * initial_fish_balls)\n    \n    # Solve the equation for the variable initial_fish_balls\n    solution = solve(final_equation, initial_fish_balls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Write the equations based on the problem\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] * (1/6)\n\n    return chocolate_sold\n\n# Get the final answer\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5 / 8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boy_to_girl_ratio = 2 / 7\n    girls = boys / boy_to_girl_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    # cost of strawberry cake\n    strawberry_cake = 3\n    # cost of marble cake\n    marble_cake = strawberry_cake + 2\n    # cost of cheese cake\n    cheese_cake = 3 * marble_cake\n    # cost of 2 cheese cakes\n    cost_two_cheese_cakes = 2 * cheese_cake\n    \n    return cost_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n\n    solution = solve(equation, circle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    num_pigs = 8\n    green_apples = num_pigs  # one green apple per pig\n    red_apples = num_pigs // 2  # one red apple for every two pigs\n    \n    total_apples = green_apples + red_apples\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    death_rate = 1/4\n    dead_seeds = total_seeds * death_rate\n    grown_sunflowers = total_seeds - dead_seeds\n    return int(grown_sunflowers)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the shirt and pant prices\n    shirt, pants = symbols('shirt pants')\n    \n    # Given equations from the problem statement\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    # Sum one shirt and one pant to get the total price\n    total_price = solutions[shirt] + solutions[pants]\n    \n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    money = 100\n    deposit = 10\n    spend = 8\n\n    deposit_days = total_days // 2\n    spend_days = total_days // 2\n\n    # If the total number of days is odd, there will be one more deposit day\n    if total_days % 2 == 1:\n        deposit_days += 1\n\n    money += (deposit_days * deposit) - (spend_days * spend)\n\n    return money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54 * 4 - 178\n    original_number = result / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    number_of_students = 5\n    average_apples = total_apples / number_of_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of stickers each person originally had\n    mar, alx, cha = symbols('mar alx cha')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(mar, 7/12 * (mar + alx))  # Marry's share of the total stickers\n    equation2 = Eq(alx, 5/12 * (mar + alx))  # Alexis's share of the total stickers\n    equation3 = Eq(mar - 0.2 * mar, cha + 0.2 * cha + 20)  # Marry gave 20% to Charlotte and had 20 more than Charlotte\n    equation4 = Eq(alx - 0.2 * alx, cha + 0.8 * cha)  # Alexis gave 20% to Charlotte and Charlotte increased by 80%\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mar, alx, cha))\n\n    return solutions[alx]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # Total ways to arrange 4 people\n    fixed_positions = 2!  # Ways to arrange Claire and Tony next to each other\n    ways_with_fixed_positions = fixed_positions * 2!  # Arranging the remaining two people\n    ans = total_ways - ways_with_fixed_positions\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote b as the cost of a banana and p as the cost of a pear\n    b, p = symbols('b p')\n\n    # Max's purchase: 1 banana + 2 pears = 94p\n    max_purchase = Eq(b + 2 * p, 94)\n\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    emily_purchase = Eq(b + p, 62)\n\n    # Solving the system of equations\n    solution = solve((max_purchase, emily_purchase), (b, p))\n\n    # The cost of one banana\n    banana_cost = solution[b]\n\n    return banana_cost\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    permuts = sorted([''.join(p) for p in permutations(digits)])\n    return int(permuts[4])\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 1\n    while (2 ** test_tubes) < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance_with_10_chairs = 36  # meters\n    num_chairs_initially = 10\n    num_chairs_removed = 3\n    num_chairs_remaining = num_chairs_initially - num_chairs_removed\n\n    # The number of intervals is always one less than the number of chairs\n    num_intervals_initially = num_chairs_initially - 1\n    num_intervals_after_removal = num_chairs_remaining - 1\n\n    # Distance between chairs initially\n    distance_between_chairs_initially = total_distance_with_10_chairs / num_intervals_initially\n\n    # Total length remains the same, so the distance between the remaining chairs would be\n    distance_between_chairs_after_removal = distance_between_chairs_initially * num_intervals_initially \\\n                                            / num_intervals_after_removal\n\n    return distance_between_chairs_after_removal\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    original_speed_per_hour = 5  # Assume original speed is 5km/h\n    original_time = 8  # 8 hours at her original speed\n    reduced_time = 7   # 7 hours if she travels faster\n\n    # If she wants to arrive 1 hour earlier and increases her speed by 5 km/h\n    new_speed_per_hour = original_speed_per_hour + 5\n\n    # Original distance = original speed * original time\n    # New distance (same in this case) = new speed * reduced time\n    # Hence, original_speed_per_hour * original_time = new_speed_per_hour * reduced_time\n    # Solve the equation:\n    distance = original_speed_per_hour * original_time\n\n    # Since the distances are equal we can substitute one into the other:\n    distance = new_speed_per_hour * reduced_time\n\n    # Now solve for original_speed_per_hour using the equation above:\n    # 5 * 8 = (5 + 5) * 7\n    # 40 = 10 * 7\n    # 40 = 70\n    # To correct this we will find the original speed by comparing the distance equations as below:\n    # original_speed_per_hour * original_time = (original_speed_per_hour + 5) * reduced_time\n    original_speed_per_hour = ((original_speed_per_hour + 5) * reduced_time) / original_time\n\n    # So the equation to find the original_speed_per_hour becomes:\n    # original_speed_per_hour * 8 = (original_speed_per_hour + 5) * 7\n    # And hence we solve for original_speed_per_hour:\n    # original_speed_per_hour = (5 * 7) / (8 - 7)\n    original_speed_per_hour = 5 * reduced_time / (original_time - reduced_time)\n\n    # Lastly, we find the distance using the new original_speed_per_hour:\n    distance = original_speed_per_hour * original_time\n    \n    return distance\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # Let's denote the number of books each brother has as x1, x2, and x3.\n    # We are given that each brother has at least two books.\n    # Therefore, we can let x1 = 2 + a, x2 = 2 + b, and x3 = 2 + c,\n    # where a, b, and c are the number of additional books each brother may have.\n\n    # We also know that the total number of books is 10\n    # Therefore, the equation we can create is:\n    # (2 + a) + (2 + b) + (2 + c) = 10\n    # Simplifying, we get:\n    # a + b + c = 4\n    # Now, because a, b, and c represent the additional books and can be zero,\n    # we are looking for the number of non-negative integer solutions to this equation.\n    \n    count = 0\n    for a in range(5):  # a could be from 0 to 4, because we have 4 books left after giving 2 to each brother.\n        for b in range(5 - a):  # b could then take whatever is left from 4 - a.\n            # Since a and b have been chosen, c is automatically determined because a + b + c must equal 4.\n            # Hence, for every valid pair of (a, b), we have a valid triplet (a, b, c).\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the fourth angle be x, the third angle will be 5x\n    angle4 = symbols('angle4')\n\n    # Sum of angles in a quadrilateral is 360 degrees\n    # Two other angles are right angles (90 degrees each)\n    equation = Eq(90 + 90 + 5 * angle4 + angle4, 360)\n\n    # Solve the equation\n    solutions = solve(equation, angle4)\n\n    # Maximum angle is 5x, where x is angle4\n    max_angle = 5 * solutions[0]\n\n    return max_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def ways_to_step(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return ways_to_step(n-1) + ways_to_step(n-2) + ways_to_step(n-3)\n    \n    total_ways = ways_to_step(10)\n    ways_to_step_5 = ways_to_step(4)\n    ways_from_step_5 = ways_to_step(10-5)\n    \n    # Subtract the ways that include the fifth step\n    ans = total_ways - (ways_to_step_5 * ways_from_step_5)\n    return ans\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the minimum number of boxes to a large number\n    min_boxes = float('inf')\n\n    # Check all possible combinations of small, medium, and large boxes\n    for small in range(54//5 + 1):\n        for medium in range(54//7 + 1):\n            for large in range(54//10 + 1):\n                if 5*small + 7*medium + 10*large == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    result = 8\n    result = result * 4\n    result = result - 10\n    result = result / 2\n    return result\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    \n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    median_index = len(sequence) // 2\n    \n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    \n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # Calculate the total number of visitors after 16 minutes with one entrance\n    total_visitors = visitors_per_minute * 16\n    check_in_rate_with_two_entrances = check_in_per_entrance * 2\n\n    # Calculate the time to clear the line with two entrances\n    time_to_clear_with_two_entrances = total_visitors / check_in_rate_with_two_entrances\n\n    return time_to_clear_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    # Total number of specialists\n    total_specialists = 125\n    # People transferred from the first group to the second one\n    transferred = 20\n    # After transferring, the first group has 5 more than the second group\n    difference = 5\n\n    # Let x be the number of people originally in the first group\n    # Then, the second group originally had (total_specialists - x) members\n    # After transferring 20 people, the first group has x - 20 members\n    # And the second group has (total_specialists - x) + 20 members\n    # The problem states that after the transfer, the first group has 5 more than the second group\n    # So, we have: (x - 20) = ((125 - x) + 20) + 5\n    # Simplifying the equation: x - x = 45 + 20 - 20\n    # 2x = total_specialists + difference\n\n    # Solve for x\n    first_group_original = (total_specialists + difference) / 2\n\n    return first_group_original\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the original number of frogs (f) and dragonflies (d)\n    f, d = symbols('f d')\n\n    # Equation 1: Initially, the number of frogs is 9 more than the number of dragonflies\n    equation1 = Eq(f, d + 9)\n    \n    # Equation 2: After the magic show, there are 11 frogs and 10 dragonflies in total\n    equation2 = Eq(f - 11, d - 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n    \n    # Retrieve the solution for the number of frogs\n    return solutions[f]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_distance = 5\n    night_distance = -3\n    total_distance = 16\n    current_distance = 0\n    day_count = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n    \n    return day_count\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    bottles_used = remaining_cookies / cookies_per_bottle\n\n    return int(bottles_used)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)  # cookies are 24 more than muffins\n    equation2 = Eq(3/4*muffins + 5/8*cookies, 74)  # after selling some, 74 left\n    \n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for n in range(999 // 25, 99 // 25, -1):\n        multiple = n * 25\n        if 100 <= multiple <= 999:\n            return multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    ticket_price = 7  # Assuming the price of one ticket is 7 dollars.\n    # Assuming the price of met both ways is 1.5 dollars.\n    met_price = 1.5   \n    # Assuming the price of a cup of coffee is 2 dollars.\n    coffee_price = 2  \n    total_money = 40  # Total money Richard has.\n\n    # Cost for Richard alone (ticket, met both ways, and coffee)\n    richard_cost = ticket_price + met_price + coffee_price\n\n    # Remaining money to spend on friends\n    remaining_money = total_money - richard_cost\n\n    # Total cost per friend (ticket, met both ways, and coffee)\n    friend_cost = ticket_price + met_price + coffee_price\n\n    # Number of friends Richard can treat\n    friends = remaining_money // friend_cost   # using floor division to get an integer number of friends\n\n    return int(friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    games = 36\n    n = 1\n    while n * (n - 1) / 2 != games:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver to reach the destination be x minutes.\n    driver_time = symbols('driver_time')\n    \n    # Given that the speed ratio of the driver to the cyclist is 13:2\n    # Since they are travelling the same distance, the time ratio will be the inverse,\n    # which is 2:13 (time = distance/speed)\n    # Thus, time taken by the cyclist will be 13/2 times the time taken by the driver.\n    \n    cyclist_time = (13/2) * driver_time\n    \n    # The cyclist takes 143 minutes more than the driver to reach the destination\n    equation = Eq(cyclist_time - driver_time, 143)\n    \n    # Solve for the time taken by the driver\n    time_taken_by_driver = solve(equation, driver_time)\n\n    return time_taken_by_driver[0]\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_to_n = (n * (n + 1) // 2)  # Sum of the first n natural numbers\n    ans = sum_to_n**2  # Square the sum to get the sum of the cubes\n    return ans\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    return 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    # Speeds of cars A and B\n    speed_A = 60\n    speed_B = 48\n    \n    # Times when the truck meets cars A, B and C\n    time_A = 6\n    time_B = 7\n    time_C = 8\n    \n    # Calculate the distance the truck travels when meeting each car\n    # Distance = Speed * Time\n    distance_truck_meets_A = speed_A * time_A\n    distance_truck_meets_B = speed_B * time_B\n    \n    # Since the truck meets both A and B on the same distance, we can equate\n    # and find the speed of the truck\n    speed_truck = (distance_truck_meets_A - distance_truck_meets_B) / (time_A - time_B)\n    \n    # Using the speed of the truck and the time it meets car C\n    # to find the distance traveled by C when the truck meets C\n    distance_truck_meets_C = speed_truck * time_C\n    \n    # Since distance is the same for C and the truck when they meet\n    # We can find the speed of car C by dividing the distance by the time\n    speed_C = distance_truck_meets_C / time_C\n    \n    return speed_C\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Let's use a process of elimination to determine which statement is correct.\n    # If statement (1) is true, then all other statements would also be true,\n    # which is a contradiction because only one statement can be true.\n    # So, statement (1) is false.\n  \n    # If statement (2) is true, then statement (1) would also be true, which\n    # contradicts the given that only one statement is correct.\n    # So, statement (2) is false.\n\n    # If statement (3) is true, it would mean that either statement (1) or\n    # statement (2) is true. We already know both of those are false,\n    # so statement (3) cannot be true.\n  \n    # If statement (4) is true, then all of the statements above, including\n    # itself, would be true, which would contradict the given that only\n    # one statement can be true. So, statement (4) is false.\n  \n    # Now we are left with statement (5), which if true, means all the\n    # statements above it are false. This does not contradict any of the\n    # other findings. Hence, statement (5) being true fits the condition\n    # that only one statement is correct.\n  \n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n    \n    # Before flipping any coins, 1/4 of the coins are heads\n    heads_before_flip = x / 4\n    \n    # After flipping two more coins, 1/3 of the coins are heads\n    heads_after_flip = heads_before_flip + 2\n    \n    # Set up the equation based on the condition that now 1/3 of the coins are heads\n    equation = Eq(heads_after_flip, x / 3)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The first (and only) solution is the number of coins\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    return (79 - 67) + (121 - 33)\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4   # Number of trains available\n    cars = 3     # Number of cars available\n    flights = 2  # Number of flights available\n    \n    total_ways = trains + cars + flights  # Law of Addition\n    \n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500  # meters\n    total_days = 5  # days\n    \n    meters_per_day = total_road / total_days\n    \n    return meters_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers_sorted = sorted(numbers)\n    middle_value = numbers_sorted[len(numbers_sorted)//2]\n    return middle_value\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let x be the original number\n    # According to the problem statement, we have the equation:\n    # (x / 2) - 9 = 12\n    # To solve for x, we can start by adding 9 to both sides of the equation:\n    # (x / 2) = 12 + 9\n    # Multiplying both sides by 2 to solve for x:\n    # x = (12 + 9) * 2\n    x = (12 + 9) * 2\n    return x\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # Number of people\n    n = 6\n    # Number of seats\n    m = 8\n    \n    # Circular permutation formula: (n - 1)!\n    # As we are fixing one person and arranging the rest\n    num_orders = factorial(n - 1)\n    \n    return num_orders\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    \n    smallest_even = None\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            num = int(''.join(map(str, perm)))\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n\n    return smallest_even\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Creating a list to hold all 2100 digits\n    digits = []\n\n    # Appending digits 2, 3, 4, ... for each recurring block\n    for i in range(1, 2110): # Adding a few extra to accommodate the recurring pattern\n        next_digit = i % 9\n        if next_digit == 0:\n            next_digit = 9\n        digits.append(next_digit)\n\n    # Calculating the sum of the first 2100 digits\n    ans = sum(digits[:2100])\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the speed of the escalator in steps per second\n    # Let 'n' be the total number of steps in the escalator\n    s, n = symbols('s n')\n\n    # When Peter walks at 1 step per second\n    equation1 = Eq(n/(1 + s), 10)\n    # When Peter walks at 2 step per second\n    equation2 = Eq(n/(2 + s), 16)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    num_quarters = total_dollars * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Total cost paid by Theo\n    total_cost = 10 * 100 - 3.88 * 100  # converting pounds to pence\n\n    # Cost of the chocolate bar\n    chocolate_cost = 72\n\n    # Cost spent on balloons\n    balloon_cost = total_cost - chocolate_cost\n\n    # Cost of each balloon\n    each_balloon_cost = 20\n\n    # Number of balloons bought\n    num_balloons = balloon_cost // each_balloon_cost\n\n    return int(num_balloons)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n    ans = (percentage / 100) * total_length\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity = 4\n    num_kayaks = (students + capacity - 1) // capacity\n\n    return num_kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    initial_money = 243\n    spent_fraction = 2/9\n    money_spent = initial_money * spent_fraction\n\n    # Define two equations based on the given problem.\n    # 5c + 6p = money_spent\n    # 2c = 3p\n\n    # Use the second equation to express p in terms of c\n    # p = (2/3)c \n    # Substitute p in the first equation\n    # 5c + 6 * (2/3)c = money_spent\n    # 5c + 4c = money_spent\n    # 9c = money_spent\n    \n    # Solve for the cost of one cupcake (c)\n    c = money_spent / 9\n\n    # Calculate the remaining money\n    remaining_money = initial_money - money_spent\n\n    # Calculate the greatest number of cupcakes he can buy\n    max_cupcakes = remaining_money // c\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import solve, symbols, Eq, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let's assume the age of the youngest dwarf is y\n    # Then, the ages of the youngest three are y, y+1, and y+2\n    # Their sum is therefore:\n    # y + (y + 1) + (y + 2) = 42\n    # Hence, we can solve for y:\n    y = (42 - 3) // 3  # Subtract 3 because we are adding 1 and 2 to the other two dwarfs, and then divide by 3 for the average age\n    \n    # Now we know the ages of the youngest three, let's find the ages of the oldest three\n    # The consecutive ages of all the dwarfs will be y, y+1, y+2, y+3, y+4, y+5, y+6\n    # The oldest three will then be y+4, y+5 and y+6\n    # Sum of oldest three ages:\n    sum_oldest_three = (y + 4) + (y + 5) + (y + 6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    nums = [2, 3, 5]\n    perms = permutations(nums, 3)\n    count = len(list(perms))\n\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        number = int(\"2\" + \"5\" * i)\n        if int(number**0.5)**2 == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Start with the initial number of pieces\n    initial_pieces = 10\n    \n    # We now have a total of 16 pieces\n    total_pieces = 16\n    \n    # Each piece cut into 3 parts results in an increase of 2 pieces (3 parts - 1 original piece)\n    # Therefore, the increase in the number of pieces is the number of pieces cut into three\n    increase = total_pieces - initial_pieces\n\n    # Since cutting a piece into three increases the number of pieces by 2, we divide the increase by 2\n    pieces_cut = increase // 2\n\n    return pieces_cut\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of workers and parts produced in the given scenario\n    workers_initial = 6\n    parts_produced_initial = 120\n    time_initial = 4  # in minutes\n    \n    # Number of workers in the second scenario\n    workers_second = 3\n    time_second = 10  # in minutes\n    \n    # Calculate parts produced per worker per minute in the initial scenario\n    parts_per_worker_per_minute = parts_produced_initial / (workers_initial * time_initial)\n    \n    # Calculate the number of parts produced by 3 workers in 10 minutes\n    parts_produced_second = parts_per_worker_per_minute * workers_second * time_second\n    \n    return parts_produced_second\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Filter out the divisors for which 2240/divisor is a square\n    valid_n_values = [n for n in divs if is_square(2240 // n)]\n\n    # Assuming the problem wants the largest such n, as typically is the case in these problems\n    ans = max(valid_n_values)\n\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = total_pupils * 0.70\n    girl_swim_pupils = 200\n    boy_swim_pupils = swim_pupils - girl_swim_pupils\n    boy_non_swim_pupils = boy_swim_pupils * (40 / 60)\n    boy_pupils = boy_swim_pupils + boy_non_swim_pupils\n    girl_pupils = total_pupils - boy_pupils\n    return int(girl_pupils)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    percent_increase = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    # Let x be the amount of 10% sugar water needed\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation representing the total sugar from the original solution and the sugar from the added 10% solution\n    equation = Eq((4 * 30) + (x * 10), (4 + x) * 26)\n\n    # Solving for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    # Calculate the original price before the first discount\n    original_price = 32 / (1 - 0.2)\n    # Calculate the price after the second discount given to Henry\n    henry_price = 32 - 4\n    # Total discount amount\n    total_discount = original_price - henry_price\n    # Total percentage discount\n    total_percentage_discount = (total_discount / original_price) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    mass_with_5 = 185\n    mass_with_17 = 317\n\n    mass_difference = mass_with_17 - mass_with_5\n    chocolates_difference = 17 - 5\n\n    mass_per_chocolate = mass_difference / chocolates_difference\n\n    mass_with_10 = mass_with_5 + (mass_per_chocolate * (10 - 5))\n\n    return mass_with_10\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    count = 0\n    for i in range(2, 201):  # start from 2 because we can't divide it into 1 equal part (itself)\n        if 200 % i == 0 and i <= 200 // i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    result = custom_operation(custom_operation(2, 3), 4)\n    return result\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    wheat_count = 116 - 4  # Subtract the wheat on the corners\n    distance_between_wheat = perimeter / wheat_count\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Lana and Mark's sweets\n    lana, mark = symbols('lana mark')\n\n    # Set up the equation based on the problem description\n    equation = Eq(lana - lana/3, mark - 34)\n\n    # We know the total is 674\n    total_sweets = Eq(lana + mark, 674)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_sweets), (lana, mark))\n\n    # Calculate the difference Lana had more than Mark\n    difference = solutions[lana] - solutions[mark]\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_for_one_fish = 10  # time for one cat to catch one fish in minutes\n    time_for_five_fish = time_for_one_fish  # time for five cats to catch five fish in minutes\n    return time_for_five_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total distance that can be traveled by each tire on the front axle\n    front_axle_distance = 36000\n    # Total distance that can be traveled by each tire on the rear axle\n    rear_axle_distance = 54000\n\n    # Since we have four tires, and each tire can be used on both axles, we divide the total\n    # life (distance) of a tire by the sum of the reciprocals of the distances for the front and rear axles.\n    total_distance_per_tire = (front_axle_distance * rear_axle_distance) / \\\n                              (front_axle_distance + rear_axle_distance)\n\n    # Multiply the per tire distance by the number of tires to get the total distance\n    total_distance = 4 * total_distance_per_tire\n\n    return total_distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    # Start with the result\n    result = 81\n    # Reverse the operations: Divide by 9\n    step1 = result / 9\n    # Reverse the next operation: Multiply by 4\n    step2 = step1 * 4\n    # Reverse the last operation: Subtract 3\n    number = step2 - 3\n    # Return the original number\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_bracelets\n    made_bracelets = morning_bracelets + afternoon_bracelets\n    more_bracelets = total_bracelets - made_bracelets\n    return more_bracelets\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n    \n    combined_rate = total_people / combined_weeks\n    gloria_rate = combined_rate - ellie_rate\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        A, C, E, F = perm\n        ABCDEF = int(f'2{A}0{C}{E}{F}')\n        EFABCD = int(f'{E}{F}2{A}0{C}')\n\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f'{F}{A}{C}{E}')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Given data\n    pounds_A = 15\n    percent_rice_A = 0.40  # 40% expressed as a decimal\n    pounds_B = 60\n    percent_rice_mixture = 0.28  # 28% expressed as a decimal\n    \n    # Total pounds of mixture\n    total_pounds_mixture = pounds_A + pounds_B\n    \n    # Total pounds of rice from dogfood A\n    rice_A = pounds_A * percent_rice_A\n    \n    # Total pounds of rice in the mixture\n    rice_mixture = total_pounds_mixture * percent_rice_mixture\n    \n    # Pounds of rice from dogfood B\n    rice_B = rice_mixture - rice_A\n    \n    # Percent of rice in dogfood B\n    percent_rice_B = rice_B / pounds_B\n\n    return percent_rice_B * 100  # Convert back to a percentage\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let the four distinct numbers be a, b, c, d with a > b > c > d\n    # It is given that (d + (a+b+c)/3) = 39 and (a + (b+c+d)/3) = 51\n    # Solving the equations we get:\n    # 3*d + a+b+c = 3*39\n    # a + b+c+d = 3*51\n    # Subtracting the first from the second gives:\n    # (a - 3*d) = 3*51 - 3*39\n    # a - 3*d = 36\n    # The largest possible a occurs for the smallest possible d\n    # Since the numbers are distinct positive integers, the smallest possible d is 1\n    # Hence for d=1, a = 36 + 3*1 = 36 + 3 = 39\n    # But since the numbers must be distinct and in descending order, a cannot be 39, as (a+b+c)/3 is 39 - d = 38 which is not possible\n    # The next smallest possible d is 2, for which we get a = 36 + 3*2 = 36 + 6 = 42\n    # This satisfies all conditions, as the remaining two numbers b and c can then be 3 and 4\n    # Thus the maximal a we can obtain under these conditions is 42\n\n    return 42\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate = 15  # in milliliters per minute\n    time = 2 * 60  # convert 2 hours to minutes\n    total_leakage = leak_rate * time  # total leakage in milliliters\n    total_leakage_litres = total_leakage / 1000  # convert milliliters to liters\n\n    return total_leakage_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    \n    # Including the first tree at the start and the last one at the end\n    num_trees = (road_length // tree_spacing) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let x be the distance to the shopping mall from the starting point\n    # Since Barbara reached the shopping mall, she walked x meters\n    # Catherine still had 60 meters to go, so she walked x - 60 meters\n\n    # Let t be the time it took for Barbara to reach the shopping mall\n    # Barbara's speed is 60 meters/minute, so Barbara's distance is 60 * t\n    # Catherine's speed is 45 meters/minute, so Catherine's distance is 45 * t\n\n    # Therefore, we can set up the following equation:\n    # 60 * t = x (Barbara's distance)\n    # 45 * t = x - 60 (Catherine's distance)\n\n    # Since both expressions equal x, we can set them equal to each other and solve for t:\n    # 60 * t = 45 * t + 60\n\n    # Solving for t:\n    t = 60 / (60 - 45)\n\n    # Now we find x using Barbara's distance:\n    x = 60 * t\n\n    return x\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    # Total amount of grass is the same in both scenarios\n    # Let's denote total grass as G, then:\n    # G = cows_20 * days_5 = cows_15 * days_6\n    cows_20 = 20\n    days_5 = 5\n    cows_15 = 15\n    days_6 = 6\n    \n    # Calculate total grass G using either scenario\n    G = cows_20 * days_5\n    \n    # Now find out how many cows can be fed for 10 days\n    cows_10_days = G // 10\n    \n    return cows_10_days\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_days = symbols('total_days')\n    \n    # He spent half of it working, so half remains\n    half_remaining = total_days / 2\n    \n    # Half of the remaining spent on reading and relaxing\n    reading_and_relaxing = half_remaining / 2\n    \n    # 4 days at a friend's house\n    friends_house = 4\n    \n    # 2 weeks left for camp, which is 2 * 7 days\n    summer_camp = 2 * 7\n    \n    # Equation representing the situation\n    equation = Eq(half_remaining - reading_and_relaxing - friends_house - summer_camp, 0)\n    \n    # Solve for total days\n    solution = solve(equation, total_days)\n    \n    return int(solution[0])\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_ten_dollar_notes = 2\n    total_five_dollar_notes = 5\n    total_twenty_cent_coins = 4\n    \n    ten_dollar_note_value = 10\n    five_dollar_note_value = 5\n    twenty_cent_coin_value = 0.20\n\n    received_amount = (total_ten_dollar_notes * ten_dollar_note_value +\n                      total_five_dollar_notes * five_dollar_note_value +\n                      total_twenty_cent_coins * twenty_cent_coin_value)\n\n    initial_amount = 100\n    amount_spent = initial_amount - received_amount\n    \n    return amount_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, b, c = symbols('a b c')\n\n    total_money = 200\n    ratio_a_to_b = 4 / 3\n    extra_money_a_over_c = 20\n\n    equation1 = a + b + c - total_money\n    equation2 = a - ratio_a_to_b * b\n    equation3 = a - c - extra_money_a_over_c\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n\n    solutions = solve(equation, x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes to fry one plate\n    total_time = 18  # total minutes available\n    num_plates = total_time // time_per_plate  # number of plates that can be fried\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    jiajia_cakes = 16\n    jiajia_cakes_after = jiajia_cakes + 5\n    jianjian_cakes_after = jiajia_cakes_after\n    jianjian_cakes_original = jianjian_cakes_after - 5\n    return jianjian_cakes_original\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    # Initialize minimum k to a very large number\n    min_k = float('inf')\n\n    # When trying to construct sequences from the 9th term backwards, \n    # we only have two arbitrary choices for the sequence at the starting two terms: (a1, a2).\n    # The rest of the terms must follow the pattern given by the recursive rule.\n    # Hence, we need to minimize a1 and then maximize a2 to find sequences with smallest k possible.\n    \n    # If we start by assuming a1 = 1 (the smallest positive integer), and increase a2 by 1 each time,\n    # we will generate different sequences until k is not unique anymore.\n\n    # First potential a2 will then be the same as a1 since it's a non-decreasing sequence.\n    a2 = 1\n    while True:\n        # Start the sequence\n        a1 = 1\n        sequence = [a1, a2]\n\n        # Calculate up to the 9th term\n        while len(sequence) < 9:\n            sequence.append(sequence[-1] + sequence[-2])\n        \n        # Update min_k if a smaller one is found\n        k = sequence[-1]\n        if k < min_k:\n            min_k = k\n            break  # Unique k found, break the loop\n        \n        a2 += 1  # Increase a2 for the next sequence\n\n    return min_k\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * (2 / 5)\n    remaining = total_pears - first_day_sold\n    second_day_sold = remaining * (7 / 9)\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    return (3/4) * (30/100) * 120\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    minimum_apples = 3\n    class_size = apples - minimum_apples + 1\n    return class_size\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for i in range(10, 100):\n        if isprime(i):\n            reverse_i = int(str(i)[::-1])\n            if i != reverse_i and isprime(reverse_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original = 140\n    new = 87.5\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    green, blue = symbols('green blue')\n    \n    # After removing balls, both colors are equal and 28 green are removed\n    # Also, 2/5 of the blue balls are removed\n    # The initial total was 140\n    equation1 = Eq((green - 28), (blue - (2/5)*blue))\n    equation2 = Eq(green + blue, 140)\n    \n    solutions = solve((equation1, equation2), (green, blue))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic is not at two of the bars, he must be at the third bar.\n    # The probability of being at any one bar is the same for all three bars.\n    # This is a certain event since he is not at the other two bars.\n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n    \n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n    # In 4 years' time Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # How old will his cousin be then (in 4 years)?\n    cousin_age_then = solutions[cousin] + 4\n\n    return cousin_age_then\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    # Number of ways to pick 1 boy from 3\n    ways_to_pick_boy = 3\n    # Number of ways to pick 1 girl from 4\n    ways_to_pick_girl = 4\n\n    # The number of ways to pick 1 boy and 1 girl using the multiplication principle\n    total_ways = ways_to_pick_boy * ways_to_pick_girl\n\n    return total_ways\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    a = 387\n    b = 729\n    ans = (a + b) // 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    caught_initially = 100\n    caught_second_time = 100\n    marked_second_time = 16\n\n    # Using the capture-recapture method to estimate the total population\n    estimated_total_population = (caught_initially * caught_second_time) / marked_second_time    \n\n    return int(estimated_total_population)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distances walked by Nancy and Randy be n and r respectively\n    n, r = symbols('n r')\n    \n    # Write down the equation for the distances they walk.\n    # Nancy's distance is n, Randy's distance is r.\n    # For every 2 meters Nancy walks, Randy walks 3 meters.\n    # Since Randy walks 10 meters more than Nancy, the equation is: r = n + 10\n    equation1 = Eq(r, n + 10)\n    \n    # The second equation is based on the ratio of their walking speeds, which is n/2 = r/3\n    equation2 = Eq(n/2, r/3)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (n, r))\n    \n    # Calculate the total distance between them\n    # The distance between them is the sum of the distances each walked\n    distance = solutions[n] + solutions[r]\n\n    return distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_age_now = 6\n    mandy_age_now = 35\n    age_difference = mandy_age_now - elaine_age_now\n    elaine_age_future = 12\n    mandy_age_future = elaine_age_future + age_difference\n    return mandy_age_future\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    from sympy import nsimplify\n\n    x = nsimplify(\"0.201414141414...\", rational=True) * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    # ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    # Bronson has twice as many marbles as ali\n    equation2 = Eq(bronson, 2 * ali)\n\n    # Solving the equation system\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alice's and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Equation representing that Alice is twice as old as her sister\n    equation1 = Eq(alice, 2 * sister)\n    \n    # Equation representing the sum of their ages in 10 years being 53\n    equation2 = Eq((alice + 10) + (sister + 10), 53)\n\n    # Solve the system of equations for Alice and her sister\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):  # Even numbers end with 0, 2, 4, 6, or 8\n                if hundreds + tens + units == 8 and len({hundreds, tens, units}) == 3:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    # Loop through all the possible six-digit numbers that end with 2.\n    # Limit the loop to numbers ending with 2, hence the range starts from 100002 and goes up to 999992 with a step of 10.\n    for number in range(100002, 999992 + 1, 10):\n        # Create the new number by moving the 2 in front\n        new_number = int('2' + str(number)[:-1])\n        # Check if the new number is exactly one third of the original number\n        if new_number * 3 == number:\n            return number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    # Convert train speeds from km/h to m/s by multiplying by (1000 m / 1 km) and dividing by (3600 s / 1 h)\n    speed_train_1 = 36 * 1000 / 3600\n    speed_train_2 = 72 * 1000 / 3600\n    \n    # Calculate relative speed of the trains since they are moving towards each other\n    relative_speed = speed_train_1 + speed_train_2\n    \n    # Find the total length that needs to be covered for separation\n    total_length = 160 + 140\n    \n    # Calculate the time taken to separate, by dividing the total distance required by relative speed\n    time_to_separate = total_length / relative_speed\n    \n    return time_to_separate\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the original amount of the solution\n    x = symbols('x')\n    \n    # 20% of the original solution is the amount of salt\n    salt = 0.20 * x\n    \n    # The total amount of the new solution is the original solution x + 800g of water\n    new_solution = x + 800\n    \n    # The concentration of the new solution is 12%\n    # So, the equation for the new concentration is salt / new_solution = 12%\n    equation = Eq(salt / new_solution, 0.12)\n    \n    # Solve equation for x\n    original_amount = solve(equation, x)[0]\n    return original_amount\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    speed_water = 45  # speed of the water flow in meters per minute\n    distance_bucket = 4050  # distance between point A and where the bucket was found in meters\n    distance_fisherman = 6525  # distance rowed by the fisherman before he realized the bucket was lost\n    \n    # Let v be the speed of the boat in still water (in meters per minute)\n    v = symbols('v')\n    \n    # The time taken by the fisherman to realize the bucket was lost equals the time taken to go back and find the bucket\n    # time to realize bucket was lost = distance_fisherman / (v + speed_water)\n    # time to go back and find the bucket = (distance_fisherman + distance_bucket) / (v - speed_water)\n    # Setting the two times equal\n    equation = Eq(distance_fisherman / (v + speed_water), (distance_fisherman + distance_bucket) / (v - speed_water))\n    \n    # Solve the equation to find the speed of the boat in still water\n    still_water_speed = solve(equation, v)[0]\n    \n    return still_water_speed\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_digits = a + b + c\n    # Each digit appears in each place (hundreds, tens, ones) 2 times\n    # The sum of all numbers = sum of each place's contribution\n    sum_numbers = sum_digits * 2 * (100 + 10 + 1)\n    return sum_numbers\n\n# Define your variables a, b, and c\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if int(str(a) + str(b)) * int(str(b) + str(a)) % 100 == 0:\n                return int(str(a) + str(b))\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, apples = symbols('oranges apples')\n    total_fruits = 125\n\n    # Create equations based on the problem description\n    equation1 = Eq(oranges + apples, total_fruits)  # Total number of fruits\n    equation2 = Eq((apples / 2) + (oranges - 35), oranges)  # Number of oranges and apples left after selling\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number is 10001.\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome number is 999999.\n    greatest_6_digit_palindrome = 999999\n    # The difference is:\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n\n    num_cabins = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n\n    return num_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    digits = 0\n    for number in range(1, 59):  # 58 is inclusive\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Define a variable to hold the number of digits counted from the right\n    count_from_right = 2011\n\n    # Reverse counting, we start from 1200 and go down to 1\n    for i in range(1200, 0, -1):\n        number_str = str(i)\n        num_digits = len(number_str)\n        \n        # If the reverse count exceeds the current number's digit length,\n        # Subtract the number of digits and continue\n        if count_from_right > num_digits:\n            count_from_right -= num_digits\n        else:\n            # We have encountered the number which has the 2011th digit\n            # Return the digit at (num_digits - count_from_right) index\n            # Considering indexes start from 0\n            return int(number_str[num_digits - count_from_right])\n            \n    # If for some reason the count surpasses 1, return an error message\n    return \"Out of range\"\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    # Initial speeds per minute\n    dylan_speed = 1750 / (15 - 18 / 2)\n    chris_speed = 1750 / (15 - 20 / 2)\n\n    # Increased speeds after they meet (increased by 50%)\n    dylan_speed_increased = dylan_speed * 1.5\n    chris_speed_increased = chris_speed * 1.5\n\n    # Total time spent before meeting\n    time_before_meeting = 15\n\n    # Time spent after meeting until they return to the starting points\n    dylan_time_after_meeting = 18 - time_before_meeting\n    chris_time_after_meeting = 20 - time_before_meeting\n\n    # Distances covered after meeting\n    dylan_distance_after_meeting = dylan_speed_increased * dylan_time_after_meeting\n    chris_distance_after_meeting = chris_speed_increased * chris_time_after_meeting\n\n    # Total distance between A and B\n    total_distance = 1750 + dylan_distance_after_meeting + chris_distance_after_meeting\n\n    return total_distance\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # Calculate the number of terms in the sequence of multiples of 5 <= 50\n    last_multiple = 50 // 5\n    num_terms = last_multiple\n    \n    # Use the formula for the sum of an arithmetic sequence: \n    # S_n = n/2 * (first_term + last_term), where:\n    # n is the number of terms, first_term is 5, and last_term is the last multiple of 5\n    first_term = 5\n    last_term = first_multiple * 5\n    sum_multiples = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # Planet1 speed in km per minute\n    speed_planet2 = 40  # Planet2 speed in km per minute\n    time_back = 5       # Time to go back in minutes\n    \n    # Distance travelled by both planets 5 minutes ago\n    distance = (speed_planet1 + speed_planet2) * time_back\n    \n    return distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c and the number of motorbikes be m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # According to the problem, we have two equations:\n    # c + m = 140           (1) (each vehicle is counted once)\n    # 4c + 2m = 490         (2) (count of the tyres)\n\n    # We can use system of equations to solve for c (number of cars).\n    # Multiply equation (1) by 2, we get 2c + 2m = 280 (3)\n    # Subtract equation (3) from equation (2), we get 2c = 210\n    # Divide both sides by 2, we get c = 105\n\n    # Alternatively, you can use python sympy to solve the system of equations.\n    # But since it is a simple system, we just do it step by step as above.\n    c = 210 / 2\n\n    return int(c)\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # The first digit can be 1, 2, 3, 4, or 5 (0 is not allowed as the first digit of a two-digit number)\n    first_digit_options = 5\n    \n    # The second digit can be 0, 1, 2, 3, 4, or 5, inclusive of the digit used for the first digit\n    second_digit_options = 6\n    \n    # The total number of two-digit numbers is the product of the number of options for each digit\n    total_combinations = first_digit_options * second_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    for i in range(9, 0, -1):\n        for j in range(9, -1, -1):\n            if i == j:\n                continue\n            number = int(f\"{i}{i}{j}{j}\")\n            if number % 11 != 0:\n                return number\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    apple_ratio = 4\n    orange_ratio = 5\n    total_ratio = apple_ratio + orange_ratio\n    total_litres = 36\n    \n    litres_of_apple_juice = (apple_ratio / total_ratio) * total_litres\n    \n    return litres_of_apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    a, n = symbols('a n', integer=True)\n    \n    # Equations based on the remainders\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (a, n))\n    \n    # Filter positive integer solutions for n\n    valid_solutions = [sol[n] for sol in solutions if sol[n].is_integer and sol[n] > 0]\n\n    # There should be only one valid solution for n\n    if len(valid_solutions) == 1:\n        n_value = valid_solutions[0]\n        remainder = 299 % n_value\n        return remainder\n    else:\n        return None\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    day = 0\n\n    while total_distance > 0:\n        day += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result_after_operations = 26\n    added_number = 12\n    \n    original_number = (result_after_operations - added_number) / 2\n    \n    return int(original_number)\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9 / 5) * (25 / 100) + (1 / 4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n    total_donation = students_per_class * classes * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    max_sum = 0\n    for x in range(2, 200):\n        if isprime(x):\n            y = 200 - x\n            if x != y and isprime(y) and x * (2 + y) == 200 + y:\n                current_sum = x + y\n                max_sum = max(max_sum, current_sum)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repeat_2 = 2\n    repeat_3 = 2\n    \n    # Calculate total permutations including repetitions\n    permutations = factorial(total_digits)\n    # Divide by the repetitions for each number\n    permutations //= (factorial(repeat_2) * factorial(repeat_3))\n    \n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Let's represent the total amount of money Bud had initially with the variable 'total_money'.\n    # According to the problem, Bud spends 2p, which is one-quarter of her money.\n    # So, we can write the equation: 1/4 * total_money = 2p\n\n    # Now, we solve for 'total_money'.\n    total_money = 2 * 4  # Multiply both sides by 4 to isolate 'total_money'.\n\n    return total_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    \n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(doc + sleepy, dopey + sneezy)\n    equation7 = Eq(sleepy, 80)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    total_rounds = teams * (teams - 1) // 2\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    result = a * 3 + b - 4\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    first_num = 5 + Fraction(1, 6)\n    second_num = 6 + Fraction(1, 5)\n    \n    # Sum the two numbers\n    numerator_sum = first_num + second_num\n    \n    # Sum the fractions in the denominator\n    denominator_sum = Fraction(1, 6) + Fraction(1, 5)\n\n    # Perform the division\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return all_numbers[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate = 1000 / 5  # meters per day\n    days_needed = 2600 / rate\n    return days_needed\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed_per_hour = 250 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4  # Since it's a square garden with an equal number of trees on each side\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first = 12\n    last = 90\n    count = (last - first + 1)\n    \n    if (first % 2 == 0 and count % 2 == 0) or (first % 2 != 0 and count % 2 != 0):\n        ans = 'even'\n    else:\n        ans = 'odd'\n    \n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the numbers on each person's hat\n    qiang, rory, sophia = symbols('qiang rory sophia')\n\n    # Each person's total is the sum of the numbers on the other two hats\n    total1 = Eq(qiang, 17 + 22)\n    total2 = Eq(rory, 11 + 22)\n    total3 = Eq(sophia, 11 + 17)\n\n    # Solve the system of equations\n    solutions = solve((total1, total2, total3), (qiang, rory, sophia))\n\n    # The largest number on a hat\n    largest_number = max(solutions[qiang], solutions[rory], solutions[sophia])\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    num_intervals = 30 - 1\n    \n    # Distance between each tree\n    distance_per_interval = 5\n    \n    # Total length of the road, including the last interval before the stone\n    total_length = (num_intervals * distance_per_interval) + distance_per_interval\n    \n    return total_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i + 1, i)\n\n    return float(result)\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6):\n            count += 1\n        if isprime(num) and isprime(num - 6):\n            count += 1\n\n    return count // 2  # Each pair is counted twice\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Distance covered in the first 30 minutes\n    distance_first_30 = x * (1/2)  # since 30 minutes is 1/2 hour\n    \n    # Distance covered in the second 30 minutes\n    distance_second_30 = (x - 20) * (1/2)\n    \n    # Distance covered in the third 30 minutes\n    distance_third_30 = (x + 10) * (1/2)\n    \n    # Total distance is the sum of the distances covered in each interval\n    total_distance = distance_first_30 + distance_second_30 + distance_third_30\n    \n    # We have the total distance covered as 70 miles, set up the equation\n    equation = Eq(total_distance, 70)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Since 'x' could be negative which is not possible for speed, filter out non-negative solutions\n    solution = [sol for sol in solution if sol >= 0]\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    num_digits = 0\n    for page in range(1, 346):\n        num_digits += len(str(page))\n    return num_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n\n    buses_needed = -(-total_people // bus_capacity)  # Ceiling division\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    \n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    solution = solve(equation, total_prize)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # The coach can only stand in one position (the middle), which gives us 1 way\n    coach_ways = 1\n\n    # The captain can stand on either side of the coach (2 ways)\n    captain_ways = 2\n\n    # Remaining 5 players can stand in any order in the 5 positions left (5 factorial ways)\n    other_players_ways = factorial(5)\n\n    # Use the multiplication principle for independent events\n    total_ways = coach_ways * captain_ways * other_players_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins', integer=True)\n    fish_left = 25\n\n    equation1 = Eq(3 * penguins + fish_left)\n    equation2 = Eq(6 * penguins - 1)\n\n    total_fish = solve(equation1)[0]\n    penguins_count = solve(Eq(total_fish, equation2))[0]\n\n    return penguins_count\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_seq = 0\n    for i in range(1, 31):\n        term = int(((8 * i + 1)**0.5 - 1) / 2)\n        sum_seq += term\n    return sum_seq\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    ways = 0\n    for one_cent in range(5):\n        for two_cents in range(5):\n            for five_cents in range(5):\n                if one_cent + 2 * two_cents + 5 * five_cents == 23:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    total_votes = 140\n    votes_remaining = total_votes - (alice_votes + betty_votes + cindy_votes)\n    max_other_votes = max(alice_votes, betty_votes)\n\n    # To ensure Cindy wins, she needs one more vote than the second highest after all voting\n    votes_needed_for_cindy = max_other_votes - cindy_votes + 1 + votes_remaining\n\n    return votes_needed_for_cindy if votes_needed_for_cindy > 0 else 0\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n    import math\n    \n    # Calculate each part of the expression using exact rationals where possible\n    part1 = Fraction(7, -10) / Fraction(1, -3)  # 7 divided by -3.3 recurring\n    part2 = Fraction(int(math.pow(2, 3)), int(math.pow(4, 2)))  # 2^3 divided by 4^2\n    part3 = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times [1.8 - (0.2 times 7)]\n    part4 = Fraction(1, 10) / Fraction(1, 142857)  # 0.1 divided by 0.142857 recurring\n    part5 = 2 * 0.3  # 2 times 0.3\n    \n    # Simplify the cube root using exact rationals\n    cube_root = Fraction(-27, 1000)\n    cube_root_simplified = cube_root ** Fraction(1, 3)\n    \n    # Combine all the parts together to evaluate the expression\n    ans = (part1 / cube_root_simplified) + (part2 / part3) - (part4 + part5)\n    \n    # Convert the answer to float for the final result\n    return float(ans)\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let n be the side length of the square with boys on the outermost layer\n    # and m be the side length of the next square inside with girls\n    # Since each inner square reduces the side length by 2,\n    # We start with the greatest possible square of boys and count down\n    students = 0\n    boy_count = 0\n    girl_count = 0\n    \n    for n in range(1, 40, 2):  # Start from 1 and consider odd squares only\n        boy_count = n**2 - (n-2)**2 if n > 1 else 1  # Boys in the outermost layer\n        girl_count = (n-2)**2 - (n-4)**2 if n > 3 else 0  # Girls in the next inner layer\n        students = boy_count + girl_count\n        # We check if the count of boys exceeds girls by 20\n        if boy_count - girl_count == 20:\n            # This is the total number of students we've added so far\n            break\n    # Adding counts of all outer layers and the innermost layer if n is even\n    while n > 0:\n        students += n**2\n        n -= 2\n    return students\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian', real=True, positive=True)\n\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    gina_age_in_2005 = 50\n    # James was 20 years old on 10th May 1997\n    james_age_in_1997 = 20\n    \n    # Calculate the year when James was born\n    james_birth_year = 1997 - james_age_in_1997\n    # Calculate how old Gina was in the year James was born\n    gina_age_when_james_born = gina_age_in_2005 - (2005 - james_birth_year)\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the sale amount as x\n    sales = symbols('sales')\n\n    # Equation based on the given commission structure\n    # If sales <= 25000, commission is 2% of the sales\n    # If sales > 25000, commission is (2% of 25000) + 5% of (sales - 25000)\n    equation = Eq(2500 + (0.02 * sales), 3300)\n\n    # Solve the equation for the two cases\n    solution1 = solve(equation, sales)\n    equation2 = Eq(2500 + (0.02 * 25000) + 0.05 * (sales - 25000), 3300)\n    solution2 = solve(equation2, sales)\n\n    # Find which solution is the valid one (sales should be greater than 0)\n    for s in solution1 + solution2:\n        if s > 0:\n            return s\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables for Ryan and Audrey's marbles\n    ryan, audrey = symbols('ryan audrey')\n    \n    # Initial ratio equation: Ryan's marbles to Audrey's marbles is 2:7\n    initial_ratio_eq = Eq(ryan/audrey, 2/7)\n    \n    # Final ratio equation after Ryan bought 20 more and Audrey gave away 80\n    final_ratio_eq = Eq((ryan + 20)/(audrey - 80), 1/3)\n    \n    # Solving the system of equations\n    solutions = solve((initial_ratio_eq, final_ratio_eq), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Total height of six players\n    total_for_six = 150 * 6\n    # Average height of four players is 2 cm lower than the team average\n    average_for_four = 150 - 2\n    # Total height for the four players\n    total_for_four = average_for_four * 4\n    # Total height for the remaining two players\n    total_for_two = total_for_six - total_for_four\n    # Average height for the remaining two players\n    average_for_two = total_for_two / 2\n    \n    return average_for_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    prob_first_attempt = 0.4\n    prob_second_attempt_given_first_fail = 0.5\n    prob_third_attempt_given_second_fail = 0.3\n\n    prob_fail_first = 1 - prob_first_attempt\n    prob_fail_second = 1 - prob_second_attempt_given_first_fail\n    prob_fail_third = 1 - prob_third_attempt_given_second_fail\n\n    prob_pass_before_fourth = (prob_first_attempt + \n                               (prob_fail_first * prob_second_attempt_given_first_fail) + \n                               (prob_fail_first * prob_fail_second * prob_third_attempt_given_second_fail))\n                               \n    return prob_pass_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits = 1\n    \n    while total_digits > 0:\n        pages_count = 9 * (10 ** (digits - 1))\n        if total_digits - (pages_count * digits) >= 0:\n            total_digits -= pages_count * digits\n            pages += pages_count\n        else:\n            pages += total_digits // digits\n            total_digits = 0\n        digits += 1\n    \n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    from_city_a_to_b = 2\n    from_city_b_to_c = 3\n\n    total_routes = from_city_a_to_b * from_city_b_to_c\n\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    difference = -1  # Negative because the sequence is decreasing\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    xiao_le_position_from_left = 6\n    xiao_yue_position_from_right = 4\n    \n    # Since Xiao Yue is to the left of Xiao Le, we add one to Xiao Le's position.\n    # This gives us the total number of people in a single row.\n    people_in_row = xiao_le_position_from_left + xiao_yue_position_from_right - 1\n    total_rows = 8\n    total_people = people_in_row * total_rows\n    \n    return total_people\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 1\n    for i in range(1, 16):\n        n *= i\n\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age/4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Initialize variables\n    boys_diff = 44\n    total_students = 0\n    size = 1  # Starting with a single layer\n\n    # Since the difference is between boys and girls, and boys occupy the outer layers, \n    # we are looking for a square array configuration where the above condition is met.\n    while True:\n        # The number of boys in this configuration\n        boys = (size * 2 + (size - 2) * 2) if size > 1 else 1\n        # The number of girls in the configuration\n        girls = size * size - boys\n        # Check if the difference matches the problem statement\n        if boys - girls == boys_diff:\n            total_students = size * size\n            break\n        # Since we're constructing a square, increase the size by 2 (adding a layer all around)\n        size += 2\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    day_climb = 7\n    distance_after_5_days = 5 * day_climb\n    sixth_day_climb = 3\n    \n    # On the 6th day, the snail has climbed 3 metres out, reaching the top.\n    # So on the 5th night, it must have been 3 metres below the top.\n    distance_after_5_nights = total_distance - sixth_day_climb\n\n    # Calculate the snail's sliding down distance by subtracting the \n    # distance climbed after 5 days from the distance after 5 nights.\n    nightly_slide = distance_after_5_nights - distance_after_5_days\n    \n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "from sympy import symbols, cos, Eq, solve, pi\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(cos(3*x)**3 + cos(5*x)**3, 8*cos(4*x)**3*cos(x)**3)\n    roots = solve(equation, x)\n    degree_roots = [root.evalf() * 180 / pi for root in roots if 100 < root.evalf() * 180 / pi < 200]\n    sum_of_roots = sum(degree_roots)\n    return sum_of_roots\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "from itertools import permutations\n\ndef solution():\n    times = [1, 2, 5, 10]  # Time taken by Eddie, Jack, Rose, and Mary respectively\n    min_time = float('inf')  # Initialize with infinite time\n\n    # Generate all possible sequences of crossings\n    for perm in permutations(times):\n        # Sequence of going to and fro, with 2 people each time going and 1 person returning\n        time_taken = (perm[0] + perm[1] + perm[2] + perm[2] + perm[3])\n        \n        # Calculate the total time by considering the faster person rows back\n        # perm[0] is the fastest rower and thus will always row back\n        # 1. perm[0] and perm[1] go, perm[0] rows back (perm[0] + perm[1])\n        # 2. perm[0] and perm[2] go, perm[0] rows back (perm[0] + perm[2])\n        # 3. perm[0] and perm[3] go (perm[0] + perm[3])\n        # Add all times and compare to find minimum\n        min_time = min(min_time, time_taken)\n\n    return min_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let x be the original length of the rectangle and y be the original width.\n    # The perimeter of a rectangle is given by P = 2*(length + width).\n    # After increasing the length by 12 cm, the new length becomes (x + 12).\n    # According to the problem, the new perimeter is 38 cm.\n    # So, we can write the equation: 2 * ((x + 12) + y) = 38.\n    # Simplifying the equation: 2x + 24 + 2y = 38\n    # Further simplifying: x + y + 12 = 19\n    # Now we need to find 'x + y' which is the sum of the original length and width.\n\n    # Original perimeter would be: 2 * (x + y)\n    # Solving for 'x + y' = 19 - 12\n    \n    original_length_and_width_sum = 19 - 12\n    # Original perimeter is twice the sum of the original length and width\n    original_perimeter = 2 * original_length_and_width_sum\n\n    return original_perimeter\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum(i**2 if i % 2 != 0 else -i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    num_students = 4\n    return factorial(num_students)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are 3 types of food: chocolate (C), peaches (P) and strawberries (S). \n    # Jenny eats chocolate on the first day.\n    # For the second day, she can either eat P or S (2 options).\n    # For the third day, she has again 2 options, excluding the food eaten on the second day.\n\n    # Total ways = choices for second day * choices for third day = 2 * 2\n    total_ways = 2 * 2\n\n    return total_ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ways = 0\n    for i in range(1, (8 // 2) + 1):\n        ways += 1\n    return ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    remaining_after_tv = 1 - 5/9\n\n    spent_on_table_fraction = 3/4\n    remaining_after_table = 1 - spent_on_table_fraction\n    remaining_money = 160\n\n    initial_remaining_after_tv = remaining_money / remaining_after_table\n    salary = initial_remaining_after_tv / remaining_after_tv\n    cost_of_tv = salary * (5/9)\n\n    return cost_of_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # For circular permutations of n distinct objects around a circular table,\n    # the number of arrangements is (n - 1)! because we can fix one person\n    # and arrange the remaining (n - 1) persons around them.\n    \n    num_people = 7\n    num_seats = 8\n    \n    # Since one seat is always empty, we only need to arrange the 7 people\n    arragements = factorial(num_people - 1)\n\n    return arragements\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and Emma's current ages\n    john, emma = symbols('john emma')\n\n    # Equation 1: In 3 years, sum of their ages will be 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n\n    # Equation 2: Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    num_working_days = 6\n\n    total_weekly_earnings = average_daily_earnings * num_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    tom_speed = 48\n    jack_speed = 50\n\n    # Since Jack left 3 hours later, Tom has already covered some distance in those 3 hours\n    tom_travel_time_before_jack_leaves = 3\n    tom_distance_before_jack_leaves = tom_speed * tom_travel_time_before_jack_leaves\n\n    # Time from when Jack starts until they are 15 km away from each other\n    both_travel_time_until_15_km_apart = 5\n\n    # Distance traveled by Tom in the 5 hours after Jack starts\n    tom_distance_after_jack_starts = tom_speed * both_travel_time_until_15_km_apart\n\n    # Distance traveled by Jack in the 5 hours after he starts\n    jack_distance_after_he_starts = jack_speed * both_travel_time_until_15_km_apart\n\n    # Now we know the total distance apart they are after those 5 hours\n    distance_apart_after_5_hours = tom_distance_after_jack_starts + jack_distance_after_he_starts + tom_distance_before_jack_leaves\n\n    # Calculate the total distance between A and B\n    total_distance_AB = distance_apart_after_5_hours + 15 # since they are 15 km apart after 5 hours\n\n    return total_distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Angle for water is 36 degrees, and a full circle has 360 degrees\n    # Hence, water represents 36/360 = 1/10 of the total votes, i.e., 10%\n    water_fraction = 36 / 360\n    \n    # Fraction of people who chose tea\n    tea_fraction = 1/4\n\n    # Fraction of people who chose coffee is unknown, as it is given in absolute numbers\n\n    # Fraction of people who chose cola\n    cola_fraction = 30 / 100\n\n    # Since the fractions must add up to 1 (100%), let's include the unknown coffee fraction\n    # 1 = tea_fraction + coffee_fraction + cola_fraction + water_fraction\n    # Solve for coffee_fraction\n    coffee_fraction = 1 - (tea_fraction + cola_fraction + water_fraction)\n\n    # But we know that 7 people chose coffee, which means coffee_fraction = 7 / total_people\n    # Thus, total_people = 7 / coffee_fraction\n\n    total_people = 7 / coffee_fraction\n\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    children, dogs = symbols('children dogs')\n\n    # 3 times as many dogs as children\n    equation1 = Eq(dogs, 3 * children)\n    # Each child has 2 legs and each dog has 4, total legs is 56\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # Define the fraction of the class that is present\n    fraction_present = 1 - 2/5\n    \n    # The number of pupils present\n    pupils_present = 18\n    \n    # Calculate the total number of pupils in the class\n    total_pupils = pupils_present / fraction_present\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    addends = [5.2, 6.7, 4.8]\n    addends.sort()\n    ans = addends[0] + addends[2] + addends[1]\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    \n    eq1 = Eq(saturday, 4 * sunday - 5)\n    eq2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((eq1, eq2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate the perimeter\n    perimeter = 2 * (length + width)\n\n    # Calculate the number of trees\n    num_trees = perimeter / spacing\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    katie_height_m = 1.36\n    katie_height_cm = katie_height_m * 100\n    return katie_height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_amount = income * tax_rate\n    income_after_tax = income - tax_amount\n    return income_after_tax\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    children_price = 15\n\n    # Start with two adults as the minimum number and increment the number of adults\n    # until the total charge is reached or passed.\n    num_adults = 2\n    while True:\n        num_children = (total_charge - (num_adults * adult_price)) / children_price\n        if num_children.is_integer() and num_children >= 0:\n            return int(num_children)\n        num_adults += 1\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    num_people = 3\n\n    sweets_each = total_sweets // num_people\n\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10000):\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750\n    ratio_squash_to_water = 1/9\n    total_liquid_per_part = total_squash * (1 + ratio_squash_to_water)\n    litres_per_bottle = 1000\n    \n    num_bottles = total_liquid_per_part // litres_per_bottle\n    return int(num_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6*100\n    right_side = 180\n    ans = right_side/left_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # total_cost represents the total cost of the book and the bag\n    total_cost = 132\n    # According to the wrong solution, Thomas calculated 1 unit as total_cost divided by 5\n    thomas_unit = total_cost / 5\n    # Thomas's final calculation for the total money Li Yan had is 6 * thomas_unit\n    thomas_total_money = thomas_unit * 6\n    \n    # Let's calculate the correct answer\n    # If Li Yan spent 1/3 on the book, it means she spent 2/3 of her money on other things\n    # If she spent 1/2 of the remainder (2/3 of the original) on a bag, the cost of the bag is 1/2 of 2/3, which is 1/3 of the original\n    # So the book cost 1/3 and the bag cost another 1/3, which is a total of 2/3 of the original amount\n    # Therefore, 2/3 of the original amount equals the total cost\n    original_money = total_cost / (2/3)\n    \n    # Check if Thomas's answer is correct\n    is_correct = thomas_total_money == original_money\n    # If Thomas's answer is not correct, return the correct amount of money Li Yan had originally\n    return (is_correct, original_money) if not is_correct else (is_correct, thomas_total_money)\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    \n    remainder = (base % divisor) ** exponent % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    return 9999 + 999 * 999\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len(set([A, 2, 0, C, E, F])) == 6:  # all digits are distinct\n                        num1 = int(f\"{A}20{C}E{F}\")\n                        num2 = int(f\"E{F}A20{C}\")\n                        if 5 * num1 == 6 * num2:\n                            return int(f\"{F}{A}C{E}\")\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    cookies = 0\n    for i in range(90):\n        if i % 6 == 4 and (-i) % 7 == 5:\n            cookies = i\n            break\n    return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given that the number has exactly 8 factors, and the first five are 1, 2, 4, 7, 8,\n    # it implies that the number is a product of two primes or a cube of a prime or a power of 2.\n    # Since 7 is among the factors, 7 is one of the primes.\n    # The other prime factor, based on the given factors, must be 2 (since we have factors of 2 and 4).\n    # Therefore, the number can be 7 * 2^n where n is the power that gives us exactly 8 factors.\n    # Since the factor 8 (which is 2^3) is present, the power of 2 that gives the correct number of factors should be n = 3.\n    # Hence, the number is 7 * 2^3 = 56.\n\n    num = 7 * (2**3)\n    return num\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    # Remaining unconstructed length after the third day\n    remaining_third_day = 14\n    \n    # Constructed length on the third day\n    third_day_construction = 30\n    \n    # Remaining unconstructed length after the second day is the sum of\n    # what was constructed on the third day and what was left afterwards\n    remaining_second_day = remaining_third_day + third_day_construction\n    \n    # Based on the problem statement, the second day's construction is less than half\n    # the remaining (from first day) length by 10 meters. We represent the remaining\n    # length from the first day as x. The second day's construction would then be\n    # x/2 - 10. Since the second day's construction plus what's left after the second day\n    # is equal to x, we get the following equation:\n    # x = (x/2 - 10) + remaining_second_day\n   \n    # Our objective is now to find x, solve for x:\n    x = 2 * (remaining_second_day + 10)\n    \n    # Total length of canal is twice the length remaining from the first day, \n    # because more than half is constructed on the first day (so it would be x + 4)\n    total_length = x + 4\n    \n    return total_length\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    sold_first_month = 1680\n    sold_second_month = sold_first_month * (7 / 20) + sold_first_month\n    kept_decrease_ratio = 3 / 20\n\n    # Let total cookies in the box be x\n    # kept_first_month = x - sold_first_month\n    # kept_second_month = x - sold_second_month\n    # According to the question:\n    # kept_first_month - kept_second_month = kept_decrease_ratio * x\n\n    x = symbols('x')\n    equation = Eq((x - sold_first_month) - (x - sold_second_month), kept_decrease_ratio * x)\n    total_cookies = solve(equation, x)[0]\n\n    return total_cookies\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene is the 6th from the front\n    # Amy is the 8th from the back\n    # Since Amy is directly behind Jolene, the total number of children is:\n    # (Jolene's position from the front - 1) + Amy's position from the back\n    return 6 + 8 - 1  # Subtract 1 because we counted Jolene twice\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < total_height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= total_height:\n            break\n        if jumps % 2 == 0:\n            current_height -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # The number of sunflowers on each side, not counting the one on the corner\n    sunflowers_per_side = side_length // distance_apart - 1\n    # Total sunflowers on sides\n    total_sunflowers_sides = sunflowers_per_side * 5\n    # Adding the sunflowers on corners\n    total_sunflowers = total_sunflowers_sides + 5\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 is 300p\n\n    number_of_stamps = pounds_to_pence // stamp_cost_pence\n\n    return number_of_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_duration = 2\n    \n    # Calculate the number of full trips (where the boat is filled to capacity)\n    full_trips = adventurers // boat_capacity\n    \n    # Calculate the number of remaining adventurers for the last trip\n    remaining_adventurers = adventurers % boat_capacity\n    \n    # If there are remaining adventurers, they will be ferried in one last trip.\n    # Note that we also have to count the return trips of the boat. \n    # For each full trip, there is one return except for the last trip.\n    total_trips = (full_trips - 1) * 2 + (1 if remaining_adventurers > 0 else 0)\n    \n    # Total time taken is the total number of trips multiplied by the duration of each trip\n    total_time = total_trips * trip_duration\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    usual_time = symbols('usual_time')\n\n    # Equations based on the problem statement\n    # Distance = Speed * Time\n    # Distance at usual speed = Distance at reduced speed\n    # Usual speed * usual time = Reduced speed * (usual time + 2 hours)\n    eq = Eq(45 * usual_time, 30 * (usual_time + 2))\n\n    # Solve the equation to find the usual time\n    usual_time_sol = solve(eq, usual_time)\n\n    return usual_time_sol[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    a = 954\n    b = 504\n    c = 450\n    ans = a * a - b * b - c * c\n    return ans\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    import math\n    ans = math.factorial(100) // math.factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for d in range(10):\n        if (9 + 7 + 6 + d + 3) % 3 == 0:\n            return d\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Sum of the first sequence from 3 to 10\n    sum_first_half = sum(range(3, 11))\n    # Sum of the second sequence from 6 to 3\n    sum_second_half = sum(range(3, 7))\n    # Total sum is the sum of both sequences minus the overlap (3 to 6)\n    total_sum = sum_first_half + sum_second_half - sum(range(3, 7))\n\n    return total_sum\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3  # Only care about the remainder when divided by 3\n    ans = a\n    return ans\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students\n    # Let y be the number of sweets\n    # If he gives each student 6 sweets, he is short of 26 sweets: 6x = y + 26\n    # If he gives each student 5 sweets, he is short of 5 sweets: 5x = y + 5\n    # Subtracting the second equation from the first: 6x - 5x = (y + 26) - (y + 5)\n    # Simplifies to: x = 21\n    \n    # Substitute x back into either equation to find y:\n    # Using the second equation: 5x = y + 5\n    # 5*21 = y + 5\n    y = 5*21 - 5\n    return y\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Total sum must be an odd number if the difference between each neighboring tree is 1\n    # This is because the trees will alternate adding and subtracting 1 fruit, creating an even-odd pattern.\n    # With 8 trees (an even number), we will have an even number of odd and even contributions to the sum.\n    # Hence, the sum of fruits from an even number of trees with alternating counts will always be even.\n    # However, 225 is an odd number.\n    # Therefore, it is not possible for the sum of fruits from 8 trees to be 225.\n    return \"Not possible, because the sum 225 is odd, but the sum with given conditions would be even.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    # Amin baked 329 cookies\n    # Jessica baked 97 cookies more than Amin\n    jessica_cookies = 329 + 97\n    \n    # Mary baked 58 cookies less than Jessica\n    mary_cookies = jessica_cookies - 58\n    \n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    # Let the number of blue shirts sold be x.\n    # Then the number of white shirts sold is 6x.\n    # According to the problem, the total number of shirts sold is 63.\n    # So the equation is x + 6x = 63.\n\n    # To find the number of white shirts, we first find x,\n    # then we calculate the number of white shirts which is 6x.\n    \n    # Solving the equation\n    x = 63 // 7\n    white_shirts = 6 * x\n    return white_shirts\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(leo + (leo - son), 70)\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    # Initialize counter for the number of ways\n    count = 0\n\n    # Iterate over possible values for the first number in the split, from 1 to 4\n    for x1 in range(1, 5):\n        # Iterate over possible values for the second number, ensuring it's not greater than (5 - x1)\n        for x2 in range(x1, 5 - x1 + 1):\n            # The third number is uniquely determined since the sum needs to be 5\n            x3 = 5 - x1 - x2\n            # Make sure we're using a non-negative integer for x3\n            if x3 >= x2:\n                count += 1\n\n    # The count so far includes 1 + 1 + 3 and 1 + 4, but not 5 itself\n    # So we need to add 1 more for just having the number 5\n    count += 1\n\n    return count\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Total singing (S) and dancing (D) performances\n    S, D = 4, 3\n    \n    # Need to place at least 1 S between every 2 D, so we can have the following slots for D:\n    # S _ S _ S _ S (S are fixed, _ are potential slots for D)\n    # Choose 3 slots for D from the 4 available slots\n    slots_for_D = factorial(4) // factorial(4 - 3)\n\n    # Now, we have S and D fixed in slots, permute the S's among themselves and D's among themselves\n    permute_S = factorial(S)\n    permute_D = factorial(D)\n\n    # The total arrangment will be the product of choosing slots and permuting within those slots\n    count = slots_for_D * permute_S * permute_D\n\n    return count\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    # Let x be the number of years later\n    # Dad's age in x years will be 50 + x\n    # Heidi's age in x years will be 8 + x\n    # Dad's age will be four times Heidi's age:\n    # 50 + x = 4 * (8 + x)\n    \n    x = symbols('x')\n    equation = Eq(50 + x, 4 * (8 + x))\n    \n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(1, 61):\n        temp = i\n        while temp % 2 == 0:\n            count_2 += 1\n            temp //= 2\n        while temp % 5 == 0:\n            count_5 += 1\n            temp //= 5\n    \n    return min(count_2, count_5)\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Calculate the sum of the first three numbers\n    sum_first_three = 3 * 120\n    # Calculate the sum of all four numbers\n    sum_all_four = 4 * 150\n    # The fourth number is the difference between the two sums\n    fourth_number = sum_all_four - sum_first_three\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    r = symbols('r')\n    equation = Eq(216 * r, sqrt(216 * r)**2)\n\n    r_value = solve(equation, r)\n    for value in r_value:\n        # Check which value of r makes 216*r a perfect square\n        if sqrt(216 * value).is_integer:\n            return value\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3/13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    distance_climbed = 8\n    distance_slid = 3\n    net_distance_per_day = distance_climbed - distance_slid\n    days_taken = 9\n    \n    # Calculate the total distance climbed by the end of day 8\n    # On the 9th day, it climbs out the well, so we don't subtract the slide down\n    total_distance = net_distance_per_day * (days_taken - 1) + distance_climbed\n    \n    # Check if Zach's calculation is correct\n    is_correct = total_distance == 45\n    \n    return total_distance, is_correct\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n    while smallest_divisor <= remainder:\n        smallest_divisor += 1\n    dividend = quotient * smallest_divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Applying the inclusion-exclusion principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n    \n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n    \n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n    \n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial as fact\n    \n    total_people = 6\n    positions = total_people - 1  # Teddy cannot be in the first position\n    \n    # Calculate permutations for the rest of the people\n    permutations_for_others = fact(total_people - 1)\n    \n    # Teddy can be in any of the remaining positions\n    total_ways = positions * permutations_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n\n    # To find the number of terms before the first negative term,\n    # use the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * common_difference\n    # Set last_term < 0 and solve for n\n\n    n = 1  # Start counting from the first term\n    while first_term + (n - 1) * common_difference >= 0:\n        n += 1\n    \n    # Subtract 1 because we want the number of terms before the first negative term\n    return n - 1\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    amount_in_pence = 963\n    fraction = 4 / 9\n    result = amount_in_pence * fraction\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for tens in range(1,10):\n        for ones in range(10):\n            if (tens + ones) % 7 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    total_sum = 280\n    n = 7\n    # Since they are consecutive numbers, the middle number is the average\n    middle_number = total_sum // n\n    # The largest number is the middle number plus 3\n    largest_number = middle_number + n // 2\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def square_diff(a, b):\n        return a**2 - b**2\n\n    ans = sum(square_diff(1000 - i*20, 990 - i*20) for i in range(5))\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return max(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        for b in range(a+1, 1000):  # Ensure A and B are distinct\n            if a % 75 == 0 and b % 75 == 0:  # Check for highest common factor 75\n                a_digits = set(str(a))\n                b_digits = set(str(b))\n                common_digits = a_digits.intersection(b_digits)\n                if len(common_digits) >= 2:  # Check for at least two common digits\n                    current_sum = a + b\n                    max_sum = max(max_sum, current_sum)\n    return max_sum\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    # Initialize the largest five-digit number\n    largest_number = 0\n    \n    # Iterate through all possible five-digit numbers\n    for a in range(1, 10):\n        for b in range(1, 10):\n            for c in range(1, 10):\n                for d in range(1, 10):\n                    for e in range(1, 10):\n                        if d > e and c > d + e and b > c + d + e and a > b + c + d + e:\n                            # Construct the five-digit number\n                            number = a * 10000 + b * 1000 + c * 100 + d * 10 + e\n                            # Update the largest number\n                            largest_number = max(largest_number, number)\n    return largest_number\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    # Initialize the sum to be 0\n    ans = 0\n    # Add and subtract numbers from 20 to 2 in a loop. Since the last number is 2, loop until 0 and skip 0.\n    for n in range(20, 0, -2):\n        # Check if the number is part of an addition or subtraction\n        if n % 4 == 0:  # Since every second term is subtracted\n            ans -= n\n        else:\n            ans += n\n\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # Each term of the given sequence can be written in the form of 8n^2\n    # where n is the term number starting from 1\n\n    terms = 9  # There are 9 terms\n    sum_sequence = sum(8 * (n ** 2) for n in range(1, terms + 1))\n    return sum_sequence\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial as fact\n\n    # There are 4 spaces between storybooks and 2 ends, total 6 positions for magazines.\n    # We need to select 5 positions out of 6 for placing magazines.\n    ways_to_place_magazines = fact(6) // (fact(5) * fact(6 - 5))\n    \n    # Each type of book has 5! ways for arrangements among themselves.\n    ways_to_arrange_magazines = fact(5)\n    ways_to_arrange_storybooks = fact(5)\n\n    # Total arrangements is the product of the three terms.\n    total_ways = ways_to_place_magazines * ways_to_arrange_magazines * ways_to_arrange_storybooks\n\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    for i in range(len(throws)):\n        if throws[i] == 6:\n            continue\n        elif i > 0 and throws[i - 1] == 6:\n            position -= throws[i]\n        else:\n            position += throws[i]\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Let's assume there are less than 1000 gums in the packet\n        remaining_after_music = gums - 2\n        shared_at_break = remaining_after_music / 3\n        if shared_at_break.is_integer():  # Check if shared_at_break is a whole number\n            remaining_after_break = 2 * shared_at_break\n            if remaining_after_break % 4 == 0:  # Check if the last gums can be evenly divided in 4 lessons\n                return gums  # The smallest number of gums satisfying the conditions\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n\n    # The amount James gives to Kate would be half the difference between their amounts\n    amount_given = (james_money - kate_money) / 2\n\n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # A 6-digit number is divisible by 99 if it is divisible by both 9 and 11.\n    # Divisibility by 9: The sum of the digits must be divisible by 9.\n    # Divisibility by 11: The difference between the sum of the digits in the odd positions and the sum of the digits in the even positions must be divisible by 11.\n    \n    # Fixed digits: 4, 2, 2, 8 contribute to divisibility by both 9 and 11.\n    # Vary A and B from 0 to 9 to find a combination that satisfies both conditions.\n    \n    for A in range(10):\n        for B in range(10):\n            if (4 + 2 + A + 2 + 8 + B) % 9 == 0: # Check divisibility by 9.\n                if (4 - 2 + A - 2 + 8 - B) % 11 == 0: # Check divisibility by 11.\n                    return 10 * A + B # Return AB as a 2-digit number.\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total = 10 * 10  # The sum of all ten numbers\n    remaining_sum = 9 * 9  # The sum of the remaining nine numbers\n    removed_number = total - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kph = 3.6\n    speed_mps = speed_kph * 1000 / 3600  # converting km/h to m/s\n    time_seconds = 300\n    distance_meters = speed_mps * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sum of money shared\n    x = symbols('x')\n\n    # If split equally among 3 brothers and a sister (4 people), each gets x/4\n    # If split only among 3 brothers, each gets x/3\n\n    # According to the problem, the amount the brothers would get if they\n    # didn't share with their sister, minus the amount they got by sharing\n    # with the sister is 20 pounds:\n    # x/3 - x/4 = 20\n\n    equation = Eq(x/3 - x/4, 20)\n\n    # Solving the equation for x\n    original_sum = solve(equation, x)\n\n    return original_sum[0]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of the series of odd numbers up to 21\n    # Since the series of cubes of odd numbers equates to the square of the sum of the sequence 1 to n (where n is (21 + 1) / 2)\n    n = (21 + 1) // 2\n    sum_of_sequence = (n * (n + 1) // 2) ** 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    total_sum = sum([avg * 4 for avg in averages])  # Sum of 4 times each average\n    smallest_sum = total_sum - max(averages) * 4     # Reducing the largest average multiplied by 4\n    largest_number = total_sum // 4 - smallest_sum   # The largest number calculation\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    science_books = (art_books_fraction * art_books) / science_books_fraction\n    return int(science_books)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.10**2\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the beads\n    red, green, blue = symbols('red green blue')\n\n    # Form the equations based on the problem\n    equation1 = Eq(red, 2 * green)                 # Red beads are twice green beads\n    equation2 = Eq(blue, red - 50)                 # Blue beads are 50 less than red beads\n    equation3 = Eq(red + green + (blue - 112), 350)  # Total beads left\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Find the original blue bead count\n    original_blue = solutions[blue] + 112\n\n    return original_blue\n  \nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # The greatest possible number of textbooks each stack contains is\n    # the greatest common divisor (GCD) of the number of textbooks\n    # because we are looking for the largest stack size that can divide all.\n    chinese_books = 42\n    math_books = 63\n    nature_books = 28\n\n    # Find the GCD of two numbers first.\n    temp_gcd = gcd(chinese_books, math_books)\n\n    # Then find the GCD of the result with the third number.\n    ans = gcd(temp_gcd, nature_books)\n\n    return ans\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n    ratio_katelyn = 2\n    ratio_jared = 5\n\n    # Jared has 60 more stickers than Katelyn\n    equation = Eq(jared - katelyn, 60)\n\n    # The ratio of their stickers is 2:5\n    ratio_equation = Eq(katelyn / jared, ratio_katelyn / ratio_jared)\n\n    # Solving the system of equations\n    solutions = solve((equation, ratio_equation), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # star_rate * star_time + nini_rate * nini_time = 1 job\n    equation1 = Eq(star_rate * 5 + nini_rate * 20, 1)\n    equation2 = Eq(star_rate * 20 + nini_rate * 8, 1)\n    \n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # nini_time = 1 job / nini_rate\n    nini_time = 1 / solutions[nini_rate]\n    \n    return nini_time\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Calculate the work done by one company in one day\n    work_per_company_per_day = 900 / (4 * 5)\n    \n    # Total work needed for one company to build a 2700m expressway\n    total_work_for_one_company = 2700 / work_per_company_per_day\n    \n    # Calculate the number of days it would take for one construction company\n    days_for_one_company = total_work_for_one_company\n    \n    return days_for_one_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Assume the flight duration provided in the question context\n    flight_duration_hours = 3  # For example, 3 hours is the duration of flight.\n    \n    # Function to convert hours to timedelta\n    def hours_to_timedelta(hours):\n        return timedelta(hours=hours)\n\n    # Time when Richard meets Isobel\n    time_in_st_petersburg = datetime.strptime('12:00', '%H:%M')\n    \n    # Calculate the time of departure from Manchester\n    time_of_departure = time_in_st_petersburg - hours_to_timedelta(flight_duration_hours)\n    \n    return time_of_departure.strftime('%H:%M')\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Since the sausages are identical, we need to find the least common multiple (LCM)\n    # of sausages (16) and people (24) to determine the least number of pieces.\n    # Then we find the number of cuts required to achieve that number of pieces.\n    \n    # Calculate the number of pieces each person will get.\n    pieces_per_person = 16 / 24\n    \n    # The LCM of 16 and 24 gives us the least number of pieces needed to share equally.\n    # 16 = 2^4, 24 = 2^3 * 3. \n    # LCM(16, 24) = 2^4 * 3 = 48. So we need at least 48 pieces.\n    \n    # Each sausage needs to be cut into 3 pieces to reach a total of 48 pieces.\n    # Number of cuts required for each sausage = 3 - 1 = 2 cuts (since 1 sausage cut twice gives 3 pieces).\n    # Hence, number of cuts required in total = number of sausages * cuts per sausage\n    cuts_required = 16 * 2\n    \n    # Since we need 48 pieces and we get 2 pieces from the first cut, \n    # subtract one cut because the last sausage does not require the second cut.\n    cuts_required -= 1\n    \n    return cuts_required\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg = 5\n    lbs_per_kg = 2.2\n    lbs = kg * lbs_per_kg\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    jane_ben_difference = 45\n    ben_height = jane_height - jane_ben_difference\n    return ben_height\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Let d be the distance between the library and the school in meters\n    d = symbols('d')\n    \n    # Qiqi walks at a speed of 60 m/min, starting at time 0\n    # Weiling walks at a speed of 72 m/min, starting at time 2 minutes\n    # Weiling arrives at school 4 minutes before Qiqi\n    # The time it takes Qiqi to walk to school is d / 60\n    # The time it takes Weiling to walk to school is d / 72\n    \n    # Since Weiling starts 2 minutes after Qiqi, Weiling walks for 2 minutes less than Qiqi\n    # Since Weiling arrives 4 minutes before Qiqi, Weiling walks for 4 minutes less than Qiqi\n    # In total, Weiling walks for 2 + 4 = 6 minutes less than Qiqi\n    \n    # We can write the equations:\n    # Time for Qiqi = Time for Weiling + 6\n    # d / 60 = d / 72 + 6\n    \n    # Now we solve for d\n    equation = Eq(d / 60, d / 72 + 6)\n    distance_solution = solve(equation, d)\n    \n    return distance_solution[0]\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_front = 6\n    frank_back = 9\n    between_ben_frank = 10\n\n    total_people = ben_front + between_ben_frank + frank_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio  # Total parts of the mixture\n    coffee_quantity = 6  # Liters of coffee\n\n    # Calculate the total quantity of latte made (in liters)\n    latte_quantity = coffee_quantity * (total_ratio / coffee_ratio)\n    return latte_quantity\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    number = 100  # Smallest three-digit number\n    while not (number % 8 == 2 and number % 11 == 2):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    ans = sum((-1)**(i+1) * (34 - 2 * i) for i in range(1, 17))\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # The fractions corresponding to the red and green marbles\n    frac_red = 2 / 5\n    frac_green = 1 / 3\n\n    # The number of yellow marbles is given\n    num_yellow = 96\n\n    # Let the total number of marbles be x\n    # According to the problem, the total number of marbles is the sum of red, green, and yellow marbles:\n    # frac_red * x + frac_green * x + num_yellow = x\n    \n    # We solve for x:\n    # (frac_red + frac_green) * x + num_yellow = x\n    # x - (frac_red + frac_green) * x = num_yellow\n    # x * (1 - (frac_red + frac_green)) = num_yellow\n    # x = num_yellow / (1 - (frac_red + frac_green))\n    \n    total_marbles = num_yellow / (1 - (frac_red + frac_green))\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = 0\n    current_number = 0\n\n    for i in range(1, 2016):\n        current_number = current_number * 10 + 1\n        last_digits = (last_digits + current_number) % 10000\n\n    return last_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    unit_digit_13_power = pow(13, 242, 10)\n    unit_digit_17_power = pow(17, 379, 10)\n    unit_digit_4_power = pow(4, 2012, 10)\n    \n    unit_digit_sum = (unit_digit_13_power + unit_digit_17_power * unit_digit_4_power) % 10\n    \n    return unit_digit_sum\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # We are trying to find out after how many marbles are picked,\n    # we can guarantee two marbles of the same color are picked.\n\n    # Applying the Pigeonhole Principle:\n    # If we pick one marble of each color (2 in total), we cannot guarantee 2 of the same color.\n    # On the next pick, we will definitely get 2 marbles of the same color.\n    # So after taking 3 marbles, we can be sure to have at least 2 of the same color.\n\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    nth_term = first_term + (7 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let x be the original sum of money Mrs. Chen had.\n    # She spent 1/6 of it, so she had 5/6 left.\n    # She spent $36 on plates, so she had 5/6 * x - 36 left.\n    # Then, she spent 3/4 of the remaining money on cups.\n    # 1/6 of the original sum is equal to the remaining money after buying cups.\n    # (5/6 * x - 36) * (1 - 3/4) = 1/6 * x\n    # (5/6 * x - 36) * 1/4 = 1/6 * x\n    # (5 * x - 216) / 24 = x / 6\n    # 5 * x - 216 = 4 * x\n    # x = 216\n    \n    return 216\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert the time to travel 1 mile to hours\n    time_to_travel_one_mile = 2 + 30 / 60  # 2 minutes and 30 seconds in minutes\n    time_to_travel_one_mile_hours = time_to_travel_one_mile / 60  # minutes to hours\n\n    # Now, find how many miles will the bicyclist travel in 1 hour\n    miles_in_one_hour = 1 / time_to_travel_one_mile_hours\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # The first number is 8, and then all numbers from 80 to 89, then 800 to 899, and so on.\n    # Digits in each range: 1 (just 8) + 10 (80-89) + 100 (800-899) + 1000 (8000-8999)...\n    # We will find the range in which the 2012th number lies.\n    \n    digit_place = 1\n    number_count = 0\n    \n    while True:\n        numbers_in_range = 9 * (10 ** (digit_place - 1))\n        if number_count + numbers_in_range >= 2012:\n            # The 2012th number is in this range\n            break\n        number_count += numbers_in_range\n        digit_place += 1\n    \n    # Now find the exact number\n    remaining_numbers = 2012 - number_count\n    number = 8 * (10 ** (digit_place - 1)) + (remaining_numbers - 1)  # -1 because we start counting from 0\n\n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    num_students = 5\n    # Let the middle term be 'a', since it is an arithmetic sequence.\n    # The sum of an arithmetic sequence is given by n/2 * (first_term + last_term)\n    # The first term would be 'a - 2' and the last term would be 'a + 2'\n    # So the sum would be num_students/2 * ((a - 2) + (a + 2))\n    # This simplifies to num_students * a, since -2 + 2 cancels out.\n    # We can now solve for 'a'\n    a = total_balls / num_students\n    # The student with the most balls will have 'a + 2'\n    most_balls = a + 2\n    \n    return int(most_balls)\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Define the maximum product limit for the current year\n    max_product_current_year = 2019\n\n    # Define the minimum product limit for the next year\n    min_product_next_year = 2020\n    \n    # Initialize the sum of ages\n    sum_ages = 0\n\n    # Set a flag to false, used to break the loop once a solution is found\n    found = False\n\n    # Iterate over the possible ages of Mary (possible range assumed based on the problem's constraints)\n    for age_mary in range(1, 100):\n        age_john = age_mary + 1\n        for age_child1 in range(1, 100):\n            age_child2 = age_child1 + 2\n            age_child3 = age_child2 + 2\n\n            # Calculate the products of current year and next year\n            product_current_year = age_john * age_mary * age_child1 * age_child2 * age_child3\n            product_next_year = (age_john + 1) * (age_mary + 1) * (age_child1 + 1) * (age_child2 + 1) * (age_child3 + 1)\n\n            # Check if the products satisfy the given conditions\n            if product_current_year < max_product_current_year and product_next_year > min_product_next_year:\n                # Calculate the sum of all five ages for current year\n                sum_ages = age_john + age_mary + age_child1 + age_child2 + age_child3\n                found = True\n                break  # Solution found, no need to continue the loop\n        if found:\n            break  # Break the outer loop if solution is found\n\n    return sum_ages\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    # Equations based on the problem statement\n    # Let's define:\n    # zw = Zhang Wen's score\n    # lw = Li Wei's score\n    # zk = Zhao Ke's score\n    # Equation 1: (zw + lw) / 2 = 97 => zw + lw = 194\n    # Equation 2: (zw + zk) / 2 = 89 => zw + zk = 178\n    # Equation 3: (zk + lw) / 2 = 96 => zk + lw = 192\n\n    # Adding the three equations gives us:\n    # 2(zw + lw + zk) = 194 + 178 + 192\n    total_sum = 194 + 178 + 192\n    # To find the sum of scores zw + lw + zk\n    sum_scores = total_sum // 2\n\n    # The average score of the three students is sum_scores / 3\n    avg_score = sum_scores / 3\n    return avg_score\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    from itertools import permutations\n\n    max_value_A = 0\n    # Generate all permutations of the digits 1 through 9\n    for perm in permutations(range(1, 10)):\n        # Calculate A using the segments of the permutation\n        A = (100*perm[0] + 10*perm[1] + perm[2] +\n             100*perm[1] + 10*perm[2] + perm[3] +\n             100*perm[2] + 10*perm[3] + perm[4] +\n             100*perm[3] + 10*perm[4] + perm[5] +\n             100*perm[4] + 10*perm[5] + perm[6] +\n             100*perm[5] + 10*perm[6] + perm[7] +\n             100*perm[6] + 10*perm[7] + perm[8])\n        # Update the maximum value of A if the current one is greater\n        if A > max_value_A:\n            max_value_A = A\n\n    return max_value_A\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Tax rates\n    tax_rate1 = 0.15\n    tax_rate2 = 0.20\n    \n    # Income brackets\n    income_bracket = 20000\n\n    # Taxed amount\n    taxed_amount = 7000\n\n    # Calculate tax for the first bracket\n    tax_for_first_bracket = income_bracket * tax_rate1\n\n    # Check if the taxed amount is within the first bracket\n    if taxed_amount <= tax_for_first_bracket:\n        income = taxed_amount / tax_rate1\n        return income\n    else:\n        # Calculate income for the second bracket\n        additional_tax = taxed_amount - tax_for_first_bracket\n        additional_income = additional_tax / tax_rate2\n\n        # Total income\n        income = income_bracket + additional_income\n        return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    # Since we need at least 2 in A, 4 in B, and 3 in C, we distribute those first\n    # and see how many ways we can distribute the remaining envelopes\n    remaining_envelopes = 15 - 2 - 4 - 3  # This is the initial distribution\n\n    # Now we need to distribute the remaining envelopes into 4 boxes\n    # Box D has no restrictions and can have 0 to remaining_envelopes envelopes.\n    # We use combinations_with_replacement because envelopes are indistinguishable\n    # and the boxes are distinguishable. We add 1 to remaining_envelopes to include the endpoint.\n    for envelopes_in_d in range(remaining_envelopes + 1):\n        # Envelopes in box A can range from 2 to 2 + (remaining_envelopes - envelopes_in_d)\n        envelopes_for_a = remaining_envelopes - envelopes_in_d\n        count += len(list(combinations(range(2, 2 + envelopes_for_a + 1), 1)))\n\n    # Return the number of ways to distribute the envelopes\n    return count\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1 / 10)\n    return result\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Get the decimal part of 1/13\n    period = len(decimal)  # Get the period length of the repeating decimal\n    digit_index = 2022 % period - 1  # Find the index of the 2022th digit in the period\n\n    # If digit_index is -1, it means 2022 is a multiple of the period\n    # so we need to take the last digit of the period\n    if digit_index == -1:\n        digit_index = period - 1\n\n    ans = int(decimal[digit_index])  # Get the digit at the calculated index\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    longest_piece = gcd(gcd(rope1, rope2), rope3)\n    \n    return longest_piece\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of packs each store had initially\n    x = symbols('x')\n\n    # After Store A sold 290 packs, they had x-290 packs\n    # Store B had 3 times as much, so 3*(x-290)\n    # And this amount is also the initial amount of Store B, which is x\n    equation = Eq(3 * (x - 290), x)\n\n    # Solve for x\n    initial_packs_each = solve(equation, x)[0]\n\n    # Total packs initially = packs in Store A + packs in Store B\n    total_packs_initially = initial_packs_each * 2\n\n    return total_packs_initially\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    total_girls = total_students - total_boys\n    girls_packed_lunch = total_girls - girls_school_lunch - girls_home_lunch\n\n    packed_lunch = boys_packed_lunch + girls_packed_lunch\n\n    return packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_cost = (20 * 6) + (20 * 5) + (20 * 4)\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made = 720\n    total_sets = 3600\n    days_made = 5\n\n    days_needed = (total_sets / sets_made) * days_made\n\n    return days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    \n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed in meters per second\n    time = 19   # time in seconds\n\n    length_of_train = speed * time  # distance = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # man's rate of drinking\n    man_rate = 1 / 15\n    # combined rate of drinking with his wife\n    combined_rate = 1 / 12\n    # wife's rate of drinking\n    wife_rate = combined_rate - man_rate\n    # days it takes for the wife to finish the barrel on her own\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_items = 18 + 30 + 18\n    friends = 6\n    fruits_per_friend = total_items // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    books_to_buy = 5\n    # Since for every 3 books bought, 1 is free, Subhan effectively needs to pay\n    # for 4 books to get 5 (four paid + one free from the special offer)\n    books_paid_for = 4\n    \n    total_cost = books_paid_for * book_price\n    return total_cost\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(2 * number + 6, 3 * number - 3)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # We know that the total number of pupils is 40, so b + g = 40\n    total_pupils_eq = Eq(b + g, 40)\n\n    # The average number of pencils owned by the boys is 20, by the girls is 60, and the combined average is 35\n    # This gives us two more equations:\n    # b*20 + g*60 = (b + g)*35 (total pencils owned is the same as if everyone owned the average)\n    average_pencils_eq = Eq(b*20 + g*60, 35*40)\n\n    # Now we can solve the system of equations for b and g\n    solutions = solve((total_pupils_eq, average_pencils_eq), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201+1):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    incorrect_sum = 2020\n    tens_digit_diff = 5 - 2\n    hundreds_digit_diff = 4 - 8\n    correct_sum = incorrect_sum + (tens_digit_diff * 10) + (hundreds_digit_diff * 100)\n    return correct_sum\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    # 2/5 of the total people are women\n    women = 2 * total_people / 5\n    # men are thrice as many as children\n    children = symbols('children')\n    men = 3 * children\n    # there were 190 more women than children\n    equation = Eq(women, children + 190)\n    # total number of people\n    total_eq = Eq(women + men + children, total_people)\n    \n    # solve the system of equations\n    solutions = solve((equation, total_eq), (children, total_people))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    \n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    ans = 0\n    for a in range(2, 15):\n        for b in range(4, 15):\n            for c in range(3, 15):\n                d = 15 - (a + b + c)\n                if d >= 0:\n                    ans += 1\n    return ans\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    divisor_without_decimal = 211\n    incorrect_difference = 98.01\n\n    # The incorrect result is when the divisor is considered as 211 instead of 2.11\n    # Let's denote the dividend as x\n    # Incorrect result: x / 211\n    # Correct result: x / 2.11\n    # According to the problem statement:\n    # Incorrect result = (Correct result) - 98.01\n\n    # So we have: x / 211 = (x / 2.11) - 98.01\n    # Multiplying both sides by 211 * 2.11 to clear the denominators gives:\n    # 2.11 * x = 211 * ((x / 2.11) - 98.01)\n    # 2.11 * x = x - (211 * 98.01)\n    # This simplifies to:\n    # 2.11 * x - x = - (211 * 98.01)\n    # x * (2.11 - 1) = - (211 * 98.01)\n    # x = - (211 * 98.01) / (2.11 - 1)\n\n    true_result = - (211 * incorrect_difference) / (2.11 - 1)\n\n    return true_result\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbolic representation for the initial amounts\n    john_initial, choon_initial = symbols('john_initial choon_initial')\n    \n    # Since they have the same amount of money initially\n    equation1 = Eq(john_initial, choon_initial)\n    \n    # When John spent $30 and Choon Mui spent $150\n    john_left = john_initial - 30\n    choon_left = choon_initial - 150\n    \n    # John's remaining amount is four times Choon Mui's remaining amount\n    equation2 = Eq(john_left, 4 * choon_left)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_initial, choon_initial))\n    \n    # Calculate John's remaining money after spending $30\n    john_money_left = solutions[john_initial] - 30\n    \n    return john_money_left\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "from math import comb\n\ndef solution():\n    # To be multiple of 6, one has to be multiple of 2 and the other of 3\n    # From 2000 to 2015, the numbers that are multiples of 2 are 2000, 2002, ..., 2014 (8 numbers)\n    # The numbers that are multiples of 3 are 2001, 2004, 2007, ..., 2014 (5 numbers)\n    # Now we combine them such that one is multiple of 2 and the other is multiple of 3\n    # However, 2010 is multiple of both 2 and 3, and can be paired with numbers of both sets\n    # We calculate combinations without including 2010 and then add pairs including 2010\n    \n    multiple_of_2 = 8  # excluding 2010\n    multiple_of_3 = 5  # excluding 2010, it is a over count but will be subtracted later\n    multiple_of_6 = 1  # only 2010\n    \n    # Number of ways to choose one from multiples of 2 and one from multiples of 3\n    ways = multiple_of_2 * multiple_of_3\n\n    # Subtract pairs counted twice (for 2010), we only want to count (2010, non-multiple of 6) pairs\n    ways -= multiple_of_6 * (multiple_of_3 - 1)  # other multiples of 3\n    ways -= multiple_of_6 * (multiple_of_2 - 1)  # other multiples of 2\n\n    # Add number of pairs involving 2010 and another non-multiple of 6\n    non_multiples_of_6 = 16 - (multiple_of_2 + multiple_of_3 - multiple_of_6)  # total numbers - already counted numbers\n    ways += non_multiples_of_6\n    \n    return ways\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    males_day1, females_day1 = symbols('males_day1 females_day1')\n\n    # Equations based on the problem statement\n    equation1 = Eq(males_day1, females_day1 + 450)  # Males are 450 more than females on first day\n    equation2 = Eq(females_day1 * 1.15 + males_day1 * 0.82, 1354)  # Total visitors on the second day\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (males_day1, females_day1))\n\n    return solutions[males_day1]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_time = (remaining_eggs * 2) + 4\n    remaining_after_first_sale = remaining_eggs + sold_second_time\n    total_eggs = (remaining_after_first_sale * 2) - 5\n\n    return total_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    time_in_hours = 15 / 60  # converting 15 minutes to hours\n    distance_in_miles = miles_per_hour * time_in_hours\n    miles_to_kilometers = 1.60934  # conversion factor from miles to kilometers\n    distance_in_kilometers = distance_in_miles * miles_to_kilometers\n    \n    return distance_in_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10\n    increased_amount = initial_amount * (1 + (percentage_increase / 100))\n\n    return increased_amount\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n    \n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Number of people, which is also the range for the derangement formula\n    n = 4\n\n    # Calculate subfactorials using the derangement formula: !n = (n-1)(!(n-1) + !(n-2))\n    subfactorials = [1, 0]  # Base cases: !0 = 1, !1 = 0\n    for i in range(2, n+1):\n        subfactorial = (i - 1) * (subfactorials[i-1] + subfactorials[i-2])\n        subfactorials.append(subfactorial)\n\n    return subfactorials[n]\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n\n    balloons_per_pupil = total_balloons // pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    ways = [(x, 8-x) for x in range(1, 7) if 8 - x <= 6 and 8 - x >= 1]\n    return len(ways)\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    days = 0\n    height = 0\n\n    while height < 11:\n        days += 1\n        height += 3\n        if height >= 11:\n            break\n        height -= 1\n        \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_pay = hourly_rate * 8 * 5  # Assuming \"this week\" means 5 working days\n    remaining_debt = 700 - weekly_pay\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    return round(14575, -2)\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        str_num = str(number)\n        if str_num.count('0') == 1 and '00' not in str_num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    weeks_to_days_arjun = 2 * 7  # Convert weeks to days for Arjun\n    days_yahya = 10\n    \n    ans = lcm(weeks_to_days_arjun, days_yahya)\n    \n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Given speeds and distances\n    speed1 = 7  # meters per second\n    speed2 = 5  # meters per second\n    speed3 = 8  # meters per second\n    distance1 = 280  # meters\n    distance2 = 400  # meters\n    distance3 = 800 - distance1 - distance2  # meters, since the total distance is 800 meters\n\n    # Calculating times for each part\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for d1 in range(10):\n        for d2 in range(10):\n            num = int(f\"2{d1}9{d2}\")\n            if num % 3 == 0 and num % 5 == 0:\n                total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    A = symbols('A')\n    \n    # Since it's a number puzzle and we're given A =~ underline, we are looking for a number A such that \n    # the sum of two numbers represented by the same digits (AA) is close to a number beginning with 1, \n    # let's denote the closest number by 1XX with XX being the minimum two-digit number that makes the sum\n    # close to it start with 1.\n    # We assess a range where XX can be any two-digit number.\n    \n    closest_sum = None\n    smallest_difference = float('inf')\n    for xx in range(10, 100):\n        sum_equation = Eq(11 * A, 100 + xx)\n        current_solution = solve(sum_equation, A)\n        if current_solution:\n            current_A = current_solution[0]\n            if abs(current_A * 11 - (100 + xx)) < smallest_difference:\n                smallest_difference = abs(current_A * 11 - (100 + xx))\n                closest_sum = current_A\n\n    return closest_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "import math\n\ndef solution():\n    highway_length = 42\n    distance_apart = 7\n\n    # Subtract the 7 meters at both ends, then count how many 7 meter segments fit in the remaining length\n    num_trees = (highway_length - 2 * distance_apart) / distance_apart\n    \n    return math.floor(num_trees)\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    # Given data\n    given_to_sister = 14\n    bought_from_singpost = 11\n    used_to_send_letter = 2\n    final_stamps = 34\n\n    # Calculate initial number of stamps\n    initial_stamps = final_stamps + given_to_sister + used_to_send_letter - bought_from_singpost\n\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "网络故障，请重试"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # Length of the yacht in meters\n    scale_factor = 20  # Scale is 1:20\n    model_length_m = actual_length_m / scale_factor  # Length of the model in meters\n    model_length_cm = model_length_m * 100  # Convert length from meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5/7) * 112\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Consider A, B, C as a single entity since they always have to be together.\n    # So, we have 7 entities (A, B, C as one + the other 7 students) to arrange.\n    entities_to_arrange = 7\n    \n    # Calculate the permutation of these 7 entities.\n    permutation_entities = factorial(entities_to_arrange)\n    \n    # Now consider the different arrangements of A, B, and C amongst themselves.\n    permutation_abc = factorial(3)\n    \n    # The total arrangements will be the permutation of entities multiplied by the permutations of A, B, C.\n    total_arrangements = permutation_entities * permutation_abc\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Build the original number as a string\n    number_string = ''.join(str(n) for n in range(1, 31))\n    \n    # Since we want the smallest number after removing 46 characters,\n    # we should remove from the start to keep the largest digits possible at the end.\n    smallest_number_string = number_string[46:]\n\n    # Convert back to integer\n    ans = int(smallest_number_string)\n    \n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, one must consider the worst case scenario.\n    # The worst case scenario would be picking all the blue balls first.\n    num_blue_balls = 6\n\n    # After picking all blue balls, taking out one more ball will guarantee a white ball.\n    balls_needed_for_white = num_blue_balls + 1\n\n    return balls_needed_for_white\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    team_size = 4\n    ways_to_pick = comb(total_students, team_size)\n    return ways_to_pick\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n\n    return total\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    # Calculate the sum of the first four numbers\n    sum_first_part = sum(range(1, 5))\n    \n    # Calculate the sum of the last three numbers, multiplied by 0\n    sum_second_part = sum(range(2018, 2021)) * 0\n    \n    # Calculate the final result\n    ans = (sum_first_part * 1) - sum_second_part\n    \n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20  # length of each short ruler\n    overlap_length = 3       # overlap length between two short rulers\n\n    # Total length is the sum of lengths of the short rulers minus the overlaps\n    # There are two overlaps for three rulers\n    total_length = (3 * short_ruler_length) - (2 * overlap_length)\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Star jogs from 6:30 am to 7:30 am\n    jog_duration = 1  # in hours\n    jog_speed = 6     # miles per hour\n    \n    # Distance covered while jogging\n    distance_jog = jog_speed * jog_duration\n    \n    # Star walks from 7:30 am to 9:30 am\n    walk_duration = 2  # in hours\n    walk_speed = 5     # miles per hour\n    \n    # Distance covered while walking\n    distance_walk = walk_speed * walk_duration\n    \n    # Total distance covered\n    total_distance = distance_jog + distance_walk\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n    while total_used_cups >= 7:\n        # Make new cups from used cups\n        new_cups_from_used = total_used_cups // 7\n        new_cups += new_cups_from_used\n        # Calculate remaining used cups\n        total_used_cups = total_used_cups % 7\n        # Add the newly made cups to the pile of used cups for further recycling\n        total_used_cups += new_cups_from_used\n        \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages = total_pages / total_days\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Calculate the greatest common divisor (GCD) for class A and B\n    gcd_AB = gcd(class_A, class_B)\n    \n    # Using the GCD of class A and B, calculate the GCD with class C\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    # Each group will have gcd_ABC students\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n    # Equation representing thrice as many members in badminton club as in bowling club\n    equation1 = Eq(badminton, 3 * bowling)\n    # Equation representing the equality of members after 36 and 4 left badminton and bowling clubs respectively\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    # Solving the system of equations for number of members\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Returning the number of members each club had in the end (after members left)\n    return solutions[badminton] - 36, solutions[bowling] - 4\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "from math import gcd\n\ndef solution():\n    count_irreducible = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count_irreducible += 1\n    return count_irreducible\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    num = 72\n    factors = 0\n\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    total_length_cm = 23 * 100  # Convert the length of the plot from meters to centimeters\n    distance_between_cauliflowers_cm = 15  # Distance between each cauliflower in centimeters\n    first_cauliflower_distance_cm = 20  # Distance from the start to the first cauliflower in centimeters\n    cauliflower_width_cm = 45  # Width of one cauliflower in centimeters\n\n    # Calculate the remaining length after planting the first cauliflower\n    remaining_length_cm = total_length_cm - first_cauliflower_distance_cm - cauliflower_width_cm\n\n    # Calculate the number of cauliflowers that can be planted\n    # by dividing the remaining length by the sum of the distance between cauliflowers and one cauliflower width\n    number_of_cauliflowers = remaining_length_cm // (distance_between_cauliflowers_cm + cauliflower_width_cm)\n\n    # Include the first cauliflower\n    total_cauliflowers = number_of_cauliflowers + 1\n\n    return total_cauliflowers\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n    \n    ans = num1 - num2\n    \n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n    \n    # Since the average value is 126 and the total is 504, we can find the number of cards\n    num_cards = total_value // average_value\n    \n    # The smallest number is the average minus half the difference times the number of cards minus 1\n    smallest_number = average_value - (difference // 2) * (num_cards - 1)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    zeros = 0\n    two_count = 0\n    five_count = 0\n\n    for i in range(301, 1000):\n        # Factorize the current number into its prime factors and count the 2s and 5s\n        while i % 2 == 0:\n            two_count += 1\n            i //= 2\n        while i % 5 == 0:\n            five_count += 1\n            i //= 5\n\n    # The number of zeros at the end is determined by the number of pairs of 2 and 5\n    zeros = min(two_count, five_count)\n\n    return zeros\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total = sum(1/i for i in range(10, 20))\n    return int(total)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english = 20\n    math = 35\n    both = 15\n\n    total_students = english + math - both\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 0.10\n    \n    amount_2019 = final_amount / (1 + annual_increase)\n    amount_2018 = amount_2019 / (1 + annual_increase)\n    \n    return amount_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(girls + boys, 1690)\n    \n    # Express the variables in terms of girls\n    girls_swim_eq = Eq(girls_swim, 31 * (girls / 80))\n    girls_not_swim_eq = Eq(girls_not_swim, 49 * (girls / 80))\n    boys_not_swim_eq = Eq(boys_not_swim, girls + 90 + 120)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, girls_swim_eq, girls_not_swim_eq, boys_not_swim_eq), \n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n                      \n    # Calculate the total number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return total_not_swim\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total ways to arrange 7 people in a row\n    total_arrangements = factorial(7)\n    \n    # Arrangements where the three specific people stand together\n    arrangements_together = factorial(3) * factorial(5)\n    \n    # Subtract the arrangements where 3 people are together from the total\n    arrangements_not_together = total_arrangements - arrangements_together\n    \n    return arrangements_not_together\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    rabbit_sleep_time = 215  # min\n    start_delay = 10  # min\n\n    # The turtle starts 10 minutes early\n    distance_covered_by_turtle_before_rabbit_sleeps = turtle_speed * (start_delay + rabbit_sleep_time)\n    # The rabbit's distance before it sleeps\n    distance_covered_by_rabbit_before_sleep = rabbit_speed * start_delay\n\n    if distance_covered_by_rabbit_before_sleep >= race_distance:\n        # Rabbit reaches the finish line before sleeping\n        winner = \"rabbit\"\n        distance_between = 0\n    else:\n        # Calculate remaining distance for both after the rabbit wakes up\n        remaining_distance_for_rabbit = race_distance - distance_covered_by_rabbit_before_sleep\n        remaining_distance_for_turtle = race_distance - distance_covered_by_turtle_before_rabbit_sleeps\n\n        # Time needed for rabbit to finish after waking up\n        time_needed_for_rabbit_to_finish = remaining_distance_for_rabbit / rabbit_speed\n        # Time needed for turtle to finish from the moment the rabbit wakes up\n        time_needed_for_turtle_to_finish = remaining_distance_for_turtle / turtle_speed\n\n        if time_needed_for_rabbit_to_finish < time_needed_for_turtle_to_finish:\n            # Rabbit finishes first\n            winner = \"rabbit\"\n            # Calculate the distance at which the rabbit finishes first\n            distance_between = turtle_speed * time_needed_for_rabbit_to_finish\n        else:\n            # Turtle finishes first\n            winner = \"turtle\"\n            # Calculate the distance at which the turtle finishes first\n            distance_between = remaining_distance_for_rabbit - (time_needed_for_turtle_to_finish * rabbit_speed)\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    first = 10\n    fourth = 25\n    common_difference = (fourth - first) // (4 - 1)\n    \n    # Number of rows\n    number_of_rows = 25\n    \n    # Last term calculation using arithmetic sequence formula: an = a1 + (n-1)d\n    last_row = first + (number_of_rows - 1) * common_difference\n    \n    # Total sum calculation using arithmetic sequence sum formula: S = n/2 * (a1 + an)\n    total_athletes = number_of_rows * (first + last_row) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    n = 789\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    \n    # The sum of an arithmetic sequence can be found by the formula:\n    # sum = n/2 * (first_term + last_term), where n is the number of terms.\n    ans = num_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Given values\n    average_A = 76\n    average_B = 67\n    combined_average = 70\n    students_A = 20\n    \n    # Total score of Team A\n    total_A = average_A * students_A\n    \n    # Let x be the number of students in Team B\n    # We denote the total score of Team B as average_B * x\n    # We know that the combined total score is the combined average times the total number of students (students_A + x)\n    # Therefore, we can express this relationship as follows:\n    # total_A + average_B * x = combined_average * (students_A + x)\n    # We solve for x to find the number of students in Team B\n\n    # Rearrange the terms and solve for x\n    x = (combined_average * students_A - total_A) / (average_B - combined_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # If every school has 3 participants, the school with the most would still need to have at least one more.\n    # Using the Pigeonhole Principle, we divide the total number of participants by 3 and then add 1.\n    max_schools = participants // 3 + 1\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_dice_roll = 6\n    target_position = 25\n    min_rolls_needed = (target_position - 1) // max_dice_roll\n    if (target_position - 1) % max_dice_roll != 0:\n        min_rolls_needed += 1\n    return min_rolls_needed\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # This is an arithmetic sequence where the first term a1 is 2019, the common difference d is -50\n    # and the last term an is 19. We need to find the number of terms n and then sum the series.\n\n    a1 = 2019\n    d = -50\n    an = 19\n    n = ((an - a1) / d) + 1 # Calculating the number of terms\n\n    # Using the formula for the sum of an arithmetic series: S = n/2 * (a1 + an)\n    S = n/2 * (a1 + an)\n    return int(S)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perm = permutations(digits, 6)\n    min_product = float('inf')\n    \n    for p in perm:\n        num1 = p[0]*100 + p[1]*10 + p[2]\n        num2 = p[3]*100 + p[4]*10 + p[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = range(1, 10) # Possible digits 1-9\n    max_product = 0\n    min_product = float('inf')\n\n    # A 4-digit number plus a 3-digit number results in a 4-digit number\n    # The 4-digit number is less than 2000, so A must be 1\n    for perm in permutations(all_digits, 6):\n        B, C, D, E, F, G = perm\n        ABCD = 1000 + B * 100 + C * 10 + D\n        EFG = E * 100 + F * 10 + G\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n\n    return max_product - min_product\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = sum([0.01 * i for i in range(1, 100) if i % 2 != 0])\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    dividend = 333311115555\n    divisor = 9999\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    max_prime_below_30 = max([i for i in range(30) if isprime(i)])\n    return max_prime_below_30\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Number of typists originally\n    original_typists = 5\n    # Number of words they type together in 20 minutes\n    words_in_20_min = 6000\n    # Number of words to type\n    words_to_type = 9000\n    # Number of typists who fell sick\n    sick_typists = 2\n    # Number of typists remaining\n    remaining_typists = original_typists - sick_typists\n\n    # Calculate words per typist per minute\n    words_per_typist_per_min = (words_in_20_min / original_typists) / 20\n    # Calculate total words per minute for the remaining typists\n    total_words_per_min_remaining_typists = words_per_typist_per_min * remaining_typists\n    # Calculate time needed in minutes to type the 9000 words\n    time_needed = words_to_type / total_words_per_min_remaining_typists\n\n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n    \n    total_cabbage_cost = cabbage_price * cabbages_bought\n    lettuce_price = total_cabbage_cost / lettuces_bought\n    \n    return lettuce_price\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_num_plants = 11\n    removed_plants = 8\n    remaining_plants = original_num_plants - removed_plants\n\n    original_interval = total_distance / (original_num_plants - 1)\n    new_interval = original_interval * ((original_num_plants - 1) / (remaining_plants - 1))\n\n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes past midnight\n    end_time = (14 * 60) + 5     # Convert end time to minutes past midnight\n    duration = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration * cost_per_minute  # Calculate the total cost\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "from sympy import divisors\n\ndef solution():\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17-Oct-2023', '%d-%b-%Y')\n    end_date = datetime.strptime('20-Dec-2023', '%d-%b-%Y')\n\n    sundays_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen = 5.50\n    ruler = 7.60\n    total_cost = pen + ruler\n    \n    return total_cost\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    # Equation for the first scenario: 4 apples + 3 peaches = 10\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    # Equation for the second scenario: 2 apples + 2 peaches = 6\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the time (t) to meet as a symbol\n    t = symbols('t')\n\n    # Given times for regular and fast express\n    regular_time = 20\n    fast_time = 12\n    \n    # Fast express is 3.5 km/h faster\n    speed_diff = 3.5\n    \n    # Define two equations based on the problem statement\n    # The distance each express covers should be the same when they meet\n    # Let s be the speed of the regular express.\n    s = symbols('s')\n    equation1 = Eq(s * t, (s + speed_diff) * (t - (fast_time - regular_time)))\n\n    # Solve for the speed of the regular express\n    regular_speed = solve(equation1, s)[0]\n\n    # Now use the regular_speed to solve for t using one of the express's travel information\n    # We'll use the regular express's information.\n    # Equation: distance = speed * time\n    # The distance covered by the regular express when they meet is regular_speed * t\n    # This should be equal to the distance covered by the regular express in 20 hours\n    equation2 = Eq(regular_speed * 20, regular_speed * t)\n    time_to_meet = solve(equation2, t)[0]\n    \n    return time_to_meet\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    \n    # Pip, Bud, and their 3 friends make a total of 5 people\n    # There are 5 skiboards and each person will pick one\n    # The number of ways to assign 5 different skiboards to 5 people is a permutation problem\n\n    total_people = 5\n    skiboards = 5\n\n    # Since each skiboard is unique and each person gets a unique skiboard, the problem is just 5!\n    ways = factorial(skiboards) \n\n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    \n    increase_amount = new_price - original_price\n    percentage_increase = (increase_amount / original_price) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    fitted_after_first_day = 0.2 * total_pieces\n    fitted_after_second_day = fitted_after_first_day + 60\n\n    fitted_to_unfitted_ratio = Eq(fitted_after_second_day / (total_pieces - fitted_after_second_day), 2/5)\n    pieces_count_solution = solve(fitted_to_unfitted_ratio, total_pieces)\n\n    return pieces_count_solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_pos_from_left = 18\n    tony_pos_from_right = 17\n\n    children_between_henry_tony = total_children - (henry_pos_from_left + tony_pos_from_right - 1)\n    \n    return children_between_henry_tony\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import gcd\n    from sympy import lcm\n    \n    # Convert minutes to seconds and get the least common multiple of the two traffic lights\n    green_every = 9 * 60  # 9 minutes in seconds\n    first_tl = 30         # 30 seconds\n    second_tl = 0.75 * 60 # 0.75 minutes in seconds\n\n    lcm_first_second = lcm(first_tl, second_tl)\n    \n    # We need to find the smallest third traffic light time that is a factor of\n    # the least common multiple and also at least 30 seconds\n    third_tl = green_every // gcd(green_every, lcm_first_second)\n    \n    while third_tl < 30:\n        third_tl += green_every // gcd(green_every, lcm_first_second)\n    \n    return third_tl\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_in_a_metre = 1000\n    metres = 2\n    ans = metres * millimetres_in_a_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    paid_back = (30 / 100) * original_amount\n    still_owed = original_amount - paid_back\n    return still_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculate the total number of legs for cats, dogs, and rabbits\n    legs_from_cats_dogs_rabbits = cats * 4 + dogs * 4 + rabbits * 4\n\n    # Since birds have 2 legs, find the difference between total legs and legs from cats, dogs, and rabbits\n    birds_legs = 28 - legs_from_cats_dogs_rabbits\n\n    # Calculate the number of birds by dividing the remaining legs by 2\n    number_of_birds = birds_legs // 2\n\n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    travel_time = 10  # time they travel before meeting in hours\n\n    total_distance = (jack_speed + rose_speed) * travel_time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy.ntheory import factorint\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    products = {}\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            prod = cards[i] * cards[j]\n            if prod not in products:\n                products[prod] = {frozenset([cards[i], cards[j]])}\n            else:\n                products[prod].add(frozenset([cards[i], cards[j]]))\n\n    for product, pairs in products.items():\n        if len(pairs) > 1:\n            all_cards = set(cards)\n            for pair in pairs:\n                all_cards -= pair\n            return all_cards.pop()\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(i for i in range(1, 25, 2) if 24 % i == 0)\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let's denote Polly's age as p, and the ages of her children as c1, c2, and c3.\n    # At the point we're looking for, Polly's age is the sum of her children's ages:\n    # p = c1 + c2 + c3\n\n    # When Polly is p years old:\n    # - Her first child is p - 20 years old\n    # - Her second child is p - 22 years old\n    # - Her third child is p - 24 years old\n\n    # Now we set up the equation: p = (p - 20) + (p - 22) + (p - 24)\n    # Simplify the equation: p = 3p - 66\n    # Solve for p: 2p = 66\n    # So, p = 33\n\n    # Therefore, Polly will be 33 years old when her age is equal to the sum of her children's ages.\n    p = 33\n    return p\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    ans = 111111 // 3 + 222222 // 6 + 333333 // 9\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n\n    total_sweets = initial_sweets + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of tarts\n    strawberry_tarts, apple_tarts = symbols('strawberry_tarts apple_tarts')\n\n    # Each apple tart costs x, and each strawberry tart costs x + 0.40\n    # The price of apple tarts is half of the strawberry tarts\n    # She spent a total of $40\n\n    # Equation 1: The total cost for apple tarts is equal to the total cost for strawberry tarts\n    x = symbols('x') # x is the cost of an apple tart\n    equation1 = Eq(apple_tarts * x, strawberry_tarts * (x + 0.40))\n\n    # Equation 2: She bought twice as many apple tarts than strawberry tarts\n    equation2 = Eq(apple_tarts, 2 * strawberry_tarts)\n\n    # Equation 3: The total amount spent on tarts is $40\n    equation3 = Eq(apple_tarts * x + strawberry_tarts * (x + 0.40), 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apple_tarts, strawberry_tarts, x))\n    \n    # Calculate the total number of tarts\n    total_tarts = solutions[apple_tarts] + solutions[strawberry_tarts]\n\n    return total_tarts\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let melvin_cards be the number of cards Melvin originally had.\n    # Since it's given in the question, we set it to 40.\n    melvin_cards = 40\n    \n    # Let nelson_cards and oliver_cards be the number of cards Nelson and Oliver originally had.\n    nelson_cards, oliver_cards = symbols('nelson_cards oliver_cards')\n    \n    # Calculate the gain and loss in terms of Melvin's original number of cards.\n    melvin_gain_1 = 5 / 8 * melvin_cards\n    melvin_nelson_loss = 1 / 4 * melvin_cards\n    melvin_gain_2 = 1 / 8 * melvin_cards\n    \n    # Write the equations based on the rules mentioned in the question.\n    equation1 = Eq(melvin_cards + melvin_gain_1 - melvin_nelson_loss + melvin_gain_2, nelson_cards - melvin_gain_1 + melvin_nelson_loss - melvin_gain_2)\n    equation2 = Eq(melvin_cards + melvin_gain_1 - melvin_nelson_loss + melvin_gain_2, oliver_cards + melvin_nelson_loss + melvin_nelson_loss)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (nelson_cards, oliver_cards))\n    \n    # Calculate the total number of cards they had originally.\n    total_initial_cards = melvin_cards + solutions[nelson_cards] + solutions[oliver_cards]\n    \n    return total_initial_cards\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    grandson_age = 7\n    grandmother_age = 77\n    # Let's denote mother's age when the grandson was born as M\n    # Grandmother's age when the mother was born can be written as M too\n    # Therefore, current age of the mother is M + grandson_age\n    # And, grandmother's age when the mother was born is grandmother_age - M - grandson_age\n    # Since both should be equal:\n    # M = grandmother_age - M - grandson_age\n    # Solving for M\n    M = (grandmother_age - grandson_age) // 2\n    mother_age = M + grandson_age\n    total_age = grandmother_age + mother_age + grandson_age\n    return total_age\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes >= 0 and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # We know that y - x = 39 (difference) and x + y = 59 (sum)\n    # From the sum equation: y = 59 - x\n    # Substitute y in the difference equation: (59 - x) - x = 39\n    # Solve for x to find the smaller number\n    x = (59 - 39) / 2\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n    \n    solution = solve(equation, m)\n    \n    return solution[m]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    A, B, C = symbols('A B C', integer=True)\n\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    for sol in solutions:\n        if all(x > 0 for x in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Example values for x and y\nx = 50  # Replace with actual value\ny = 20  # Replace with actual value\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_four_years_ago = 10\n    # each dog ages 1 year for every year that passes\n    # so in 4 years, each dog would have aged 4 years\n    # since there are 2 dogs, we multiply by 2\n    age_increase_in_four_years = 4 * 2\n    current_combined_age = combined_age_four_years_ago + age_increase_in_four_years\n    # now we need to account for 2 more years in the future for each dog\n    age_increase_in_two_years = 2 * 2\n    future_combined_age = current_combined_age + age_increase_in_two_years\n    return future_combined_age\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n\n    years = symbols('years')\n\n    equation = Eq(mother_age + years, 3 * (justin_age + years))\n    answer = solve(equation, years)\n\n    return answer[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    # Calculate factorial by multiplying all natural numbers up to 10\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1,), (cora, qingle))\n\n    return abs(solutions[cora] - solutions[qingle])\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0.\n    b = 0\n\n    # We are given another point (4,8) which lies on the line, we can use it to find the slope m.\n    # The formula for the slope (m) given two points (x1, y1) and (x2, y2) is (y2 - y1) / (x2 - x1).\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n\n    # Therefore, the linear equation is y = mx + b.\n    # With b = 0 and the value of m we found, the equation can be written as:\n    return f\"y={m}x+{b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jane and Eric's seashells\n    j, e = symbols('j e')\n\n    # Jane has 5 seashells for every 7 Eric has\n    equation1 = Eq(j, 5/7 * e)\n\n    # If Eric gives Jane 6 seashells, the new ratio is 11 to 13\n    equation2 = Eq((j + 6) / (e - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, e))\n\n    # Calculate the total number of seashells\n    total_seashells = solutions[j] + solutions[e]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    for add in range(20, 0, -1):\n        current_number += add\n        largest_number = max(largest_number, current_number)\n        current_number -= (21 - add)\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    rate_first_faucet = 1 / 20\n    rate_other_faucets = 3 * rate_first_faucet\n    total_rate = rate_first_faucet + 3 * rate_other_faucets\n\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    min_even_5_digit_num = float('inf')\n    for perm in permutations(digits):\n        num = int(\"\".join(map(str, perm)))\n        if num % 2 == 0:\n            if len(str(num)) == 5 and num < min_even_5_digit_num:\n                min_even_5_digit_num = num\n    return min_even_5_digit_num\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n\n    piano_and_violin = piano_players // 4\n\n    neither = total_pupils - (piano_players + violin_players - piano_and_violin)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    total_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(total_passengers)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # A cannot be zero\n        for D in range(1, 10):  # D cannot be zero and A is 1/4 of D\n            if A == D / 4:\n                B = A - 1\n                if B > 0:  # B needs to be a positive digit\n                    for C in range(10):\n                        ABCD = 1000 * A + 100 * B + 10 * C + D\n                        DCBA = 1000 * D + 100 * C + 10 * B + A\n                        if ABCD * 4 == DCBA and len(set([A, B, C, D])) == 4:\n                            return ABCD\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    # The number of trailing zeros in the product of a number is determined by\n    # how many times the product can be divided by 10. Since 10 = 2 * 5, we need\n    # to count the factors of 2 and 5 in the product, because each pair of 2 and\n    # 5 contributes to one trailing zero.\n\n    # Factorizing each number to count the factors of 2 and 5\n    factors_48 = factorint(48)\n    factors_925 = factorint(925)\n    factors_38 = factorint(38)\n    factors_435 = factorint(435)\n    \n    # Total count of 2s and 5s in all factors\n    count_2s = factors_48.get(2, 0) + factors_38.get(2, 0)\n    count_5s = factors_925.get(5, 0) + factors_435.get(5, 0)\n    \n    # The number of trailing zeros will be the minimum of count of 2s and 5s\n    # because we need a pair of 2 and 5 to make a 10.\n    count_zeros = min(count_2s, count_5s)\n\n    return count_zeros\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    A_Maths = 10\n    A_English = 15\n    A_Both = 2\n\n    A_Either = A_Maths + A_English - A_Both\n\n    return A_Either\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Parse the given times\n    left_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    caught_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    dropped_off_time = caught_bus_time + timedelta(minutes=18)\n    home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate the walking time before and after the bus trip\n    walking_time_before_bus = (caught_bus_time - left_school_time).total_seconds() / 60\n    walking_time_after_bus = (home_time - dropped_off_time).total_seconds() / 60\n\n    # Add up the total walking time\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_number = 25\n    initial_number = (final_number - 10) * 3\n    return initial_number\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n    \n    # In an isosceles right triangle, we can use integration to find the area\n    # where the distance from any point to the right angle vertex is less than 1.\n    # First, define the variables\n    x = sp.symbols('x')\n    \n    # Integral limits, from 0 to 1 (only in this interval the distance is less than 1)\n    lower_limit = 0\n    upper_limit = 1\n\n    # Integrate the triangle's leg equation to find the area under the curve where the distance is less than 1.\n    # The leg equation can be written as y = 2 - x (since the side of the triangle is 2 and it's y = mx + b with m = -1)\n    area_desired = sp.integrate(2 - x, (x, lower_limit, upper_limit))\n\n    # The area of an isosceles right triangle can be found by (1/2) * base * height\n    # Since the waist length is 2, base = height = 2\n    area_total = 0.5 * 2 * 2\n    \n    # The probability is the ratio of the desired area over the total area\n    probability = area_desired / area_total\n\n    return float(probability)\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 'a', 7, 6]\n    mean_value = 5\n    total_sum = mean_value * len(numbers)\n    sum_of_known = sum([num for num in numbers if num != 'a'])\n    a = total_sum - sum_of_known\n    return a\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    percentage = 20 / 100\n    total = 8880\n    return percentage * total\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    length_per_piece_cm = total_length_cm / 2\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # I will apply the Pigeonhole Principle to find the correct number of socks\n    # Since there are 3 colors, taking out one of each color would not ensure a pair\n    # So after taking out 1 of each color (3 socks), the next sock taken out must form a pair\n    num_colors = 3\n    socks_to_get_a_pair = num_colors + 1\n\n    return socks_to_get_a_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = 1 / 72\n    x = symbols('x')\n    # After 1 day A, 2 days A and B, 4 days A, B and C, and another 8 days,\n    # the work completed is 1/3 + (5/6 - 1/3) respectively\n    equation1 = Eq(A * (1 + 2 + 4 + 8) + x * (2 + 4 + 8) + x * 4, 1/3 + (5/6 - 1/3))\n    B_and_C_rate = solve(equation1, x)[0]\n\n    # Remaining work is 1 - 5/6\n    remaining_work = 1 - 5/6\n\n    # T is the time for worker C to finish the remaining work alone\n    T = symbols('T')\n    equation2 = Eq(B_and_C_rate * T, remaining_work)\n    C_days = solve(equation2, T)[0]\n\n    # Total days = days A worked + days A and B worked + days all worked + remaining days by C\n    total_days = 1 + 2 + 4 + 8 + C_days\n    return total_days\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7  # Pupils to the left of Victoria, Victoria, and to the right\n    rows = 1 + 1 + 8  # Rows in front of Victoria, Victoria's row, and behind\n    total_pupils = pupils_per_row * rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    subtracted_amount = 30000 + 452\n    remaining = total - subtracted_amount\n    missing_number = remaining // 2\n    return missing_number\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4 * 9, 81)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum([1/(i*(i+1)) for i in range(1, 20, 2)])\n    denominator_sum = sum([1/((11+i)*(20-i)) for i in range(9)])\n    \n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    distance_initial = 6300  # distance at 8:00 am in meters\n    distance_final = 1800    # distance at 8:30 am in meters\n    time_initial = datetime.strptime(\"08:00\", \"%H:%M\")\n    time_half_pst = datetime.strptime(\"08:30\", \"%H:%M\")\n\n    distance_covered = distance_initial - distance_final\n    time_taken = time_half_pst - time_initial  # time taken to cover the distance_covered\n\n    # Calculate speed in m/min\n    speed = distance_covered / (time_taken.total_seconds() / 60)\n\n    # Calculate remaining time to cover the distance_final\n    time_remaining = distance_final / speed  # time in minutes\n\n    # Calculate the time he will reach his friend's house\n    time_reach = time_half_pst + timedelta(minutes=time_remaining)\n\n    return time_reach.time()\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Mr. Smith's mixture\n    drink1_smith = 300 * 0.50\n    drink2_smith = 600 * 0.20\n    total_sugar_smith = drink1_smith + drink2_smith\n    total_volume_smith = 300 + 600\n    percentage_smith = total_sugar_smith / total_volume_smith\n\n    # Mrs. Smith's mixture\n    drink1_mrs_smith = 700 * 0.10\n    x = symbols('x')\n    drink2_mrs_smith = 300 * (x / 100)  # x% of sugar\n    total_sugar_mrs_smith = drink1_mrs_smith + drink2_mrs_smith\n    total_volume_mrs_smith = 700 + 300\n    percentage_mrs_smith = total_sugar_mrs_smith / total_volume_mrs_smith\n\n    # Setting up the equation\n    equation = Eq(percentage_smith, percentage_mrs_smith)\n\n    # Solving for x\n    x_value = solve(equation, x)\n\n    return round(x_value[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    ans = (17 - 2) / 5\n    return ans\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candy = 36\n\n    # Judy gave 3/4 of the candy to Lily\n    candy_given_to_lily = (3/4) * initial_candy\n    remaining_candy = initial_candy - candy_given_to_lily\n\n    # Judy gave 1/3 of the remaining candy to her brother\n    candy_given_to_brother = (1/3) * remaining_candy\n    remaining_candy -= candy_given_to_brother\n\n    return remaining_candy\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Define the cost per item for donuts and muffins\n    donut_price = 10 / 7\n    muffin_price = 6 / 3\n\n    # Assume Amy had 'money' dollars at the start\n    # Variable representation:\n    #   d = number of donuts Amy bought\n    #   m = number of muffins Amy bought\n    # Equation from the problem:\n    #   1. money / 2 / donut_price = d\n    #   2. money / 2 / muffin_price = m\n    #   3. d = m + 54\n\n    # Money spent on donuts:\n    #   money / 2 = d * donut_price = (m + 54) * donut_price\n    # Money spent on muffins:\n    #   money / 2 = m * muffin_price\n\n    # Combine the two equations to find relationship between d and m:\n    #   m * muffin_price = (m + 54) * donut_price\n    # Solve for m:\n    m = 54 * donut_price / (muffin_price - donut_price)\n\n    # Plug the value of m back into the money equation using muffins:\n    #   money / 2 = m * muffin_price\n    # Solve for money:\n    money = 2 * m * muffin_price\n\n    return money\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    weight_of_sweets_kg = 5\n    cost_price_pounds = 10\n    weight_per_bag_kg = 0.250\n    selling_price_per_bag_pence = 65\n    \n    number_of_bags = weight_of_sweets_kg / weight_per_bag_kg\n    total_selling_price_pounds = (selling_price_per_bag_pence * number_of_bags) / 100\n    profit_pounds = total_selling_price_pounds - cost_price_pounds\n    percentage_profit = (profit_pounds / cost_price_pounds) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    # Since each child should get at least one apple, we reserve one apple for each child.\n    reserved_apples = children\n    # Subtract the reserved apples from the total to distribute the rest\n    apples_to_distribute = total_apples - reserved_apples\n    # The child who gets the most will get all distributable apples plus their reserved one\n    max_apples_to_one_child = apples_to_distribute + 1\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_between_teeth = 30 / (9 - 4)  # distance between 5 teeth\n    total_distance_mm = distance_between_teeth * (100 - 1)  # for 99 intervals between 100 teeth\n    total_distance_cm = total_distance_mm / 10  # convert mm to cm\n    return total_distance_cm\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    # Let May's current age be m, Kenny's age be k, and Kenny's brother's age be b.\n    m = 7  # May's age\n\n    # When May is 10, let's denote that age with m_10.\n    # At that time, Kenny's age will be k_10 and his brother's age will be b_10.\n    m_10 = 10\n\n    # Kenny is 2 years older than his brother.\n    # k = b + 2\n\n    # According to the problem,\n    # At the time when May is 10, the sum of Kenny's and his brother's age will be three times May's age.\n    # (k + 2) + k = 3 * 10\n\n    # Now we need to express Kenny's age when May is 10 in terms of his current age.\n    # Since the difference in their ages stays constant as they grow older,\n    # If Kenny is \"d\" years older than May this year, he will also be \"d\" years older than May after 3 years.\n    # So, k_10 = k + 3 (the difference in years from now until May is 10).\n\n    # Let's solve for k.\n    # (b + 2 + 3) + (b + 3) = 3 * m_10\n    # b + 5 + b + 3 = 30\n    # 2b + 8 = 30\n    # 2b = 22\n    # b = 11\n    \n    # Kenny's current age would then be:\n    # k = b + 2\n    k = 11 + 2\n\n    # Kenny's age difference with May is:\n    age_difference = k - m\n\n    return age_difference\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_arrangements = 5!  # Total ways to arrange 5 people\n    adjacent_arrangements = 2 * 4!  # Ways to arrange 5 people where the 2 are adjacent\n\n    ans = total_arrangements - adjacent_arrangements  # Subtract adjacent cases from total\n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # According to the stars and bars method, we have n = 5 - 3 (since each friend must get at least one)\n    # and we need to choose 3 - 1 bars (or partitions) which will give us the required partitions.\n    from math import comb\n    # Number of identical items is 5, reducing 3 since each friend gets at least one\n    n = 5 - 3\n    # \"k - 1\" bars (partitions) for \"k\" friends\n    k_minus_1 = 3 - 1\n    # Calculate combinations for placing \"k - 1\" partitions among \"n\" spaces\n    ans = comb(n + k_minus_1, k_minus_1)\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = (2/3) * total_vegetables\n    tuesday_sold = (2/5) * (total_vegetables - monday_sold)\n    total_sold = monday_sold + tuesday_sold\n    return total_sold\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    return (16 - 1) + (13 - 1) + 26 + 34 + 24 + 1\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n    # Calculate the year when grandmother was 80\n    year_grandmother_80 = 2008\n    # Mum's age in 1996\n    mum_age_1996 = 40\n    # Calculate the year when mum was 40\n    year_mum_40 = 1996\n    # Calculate the difference in years between 2008 when grandmother was 80 and 1996 when mum was 40\n    year_diff = year_grandmother_80 - year_mum_40\n    # Grandmother's age when mum was 40\n    grandmother_age_when_mum_40 = grandmother_age_2008 - year_diff\n    # Calculate mum's age difference from 40 to 25\n    mum_age_diff_from_40_to_25 = 40 - 25\n    # Grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = grandmother_age_when_mum_40 - mum_age_diff_from_40_to_25\n    \n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    ans = sum([5 * i if i % 2 != 0 else -5 * i for i in range(1, 172)])\n    return ans\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_biscuits = total_biscuits / 4\n    remaining_biscuits = total_biscuits - given_biscuits\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, 3 * A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    nums = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    num = 75\n    percentage = 40\n    ans = (percentage / 100) * num\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk = 20\n    lily_walk = hook_walk - 5\n    return lily_walk\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Using the arithmetic sum formula S_n = n/2 * (a_1 + a_n)\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_initial / people_initial\n    pizzas_needed = unit_rate * people_final\n\n    return round(pizzas_needed)\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Set up the equations\n    equation1 = Eq(marion, 2 * julie)             # Marion earns twice the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)              # Ethan earns 5 times the amount Julie earns\n    equation3 = Eq(ethan - marion, 168)           # Difference in pay between Marion and Ethan\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Calculate and return the total earnings of all three\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5 / 35\n    return int(ans)\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_students, small_students = symbols('big_students small_students')\n\n    # Equation for the apples\n    equation1 = Eq(2 * big_students + 2 * small_students, 48)\n    # Equation for the oranges\n    equation2 = Eq(3 * big_students + 2 * small_students, 55)\n\n    solutions = solve((equation1, equation2), (big_students, small_students))\n\n    return solutions[small_students]\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Let's denote the speed of sheep and horse by sheep_speed and horse_speed respectively.\n    # According to the given information:\n    # The time it takes for a sheep to run 5 steps is the same as the time it takes for a horse to run 3 steps.\n    # 5/sheep_speed = 3/horse_speed\n    # sheep_speed/horse_speed = 3/5\n\n    # The distance that a horse covers in 4 steps is the same as the distance that a sheep covers in 7 steps.\n    # Let's assume one step of horse covers 'horse_step_distance' and one step of sheep covers 'sheep_step_distance'\n    # 4 * horse_step_distance = 7 * sheep_step_distance\n    # horse_step_distance/sheep_step_distance = 7/4\n\n    # The speed ratio derived from step time can also be written in terms of step distance ratio\n    # since speed = distance / time, we get:\n    # sheep_speed/horse_speed = sheep_step_distance/horse_step_distance\n    # By combining both ratios, we get sheep_step_distance/horse_step_distance = 3/5 and horse_step_distance/sheep_step_distance = 7/4\n    # With cross multiplication sheep_step_distance/horse_step_distance becomes 3/5 = 4/7\n    # Hence, the actual travel speed of the horse is (7/4)*(3/5) = 21/20 times the travel speed of the sheep.\n\n    # Now, let's calculate the distances covered by sheep and horse per unit of time (let's denote 'u' such unit)\n    # Since the sheep has already run 30 meters (ahead_start), we can calculate the distance the horse needs to cover to catch the sheep.\n    # Let 'further_run' be the distance the sheep runs before being caught, and 'total_run' be the total distance the horse runs.\n    # Then total_run = ahead_start + further_run\n    # Since the horse runs 21/20 times faster than the sheep, it runs 21/20 * further_run in the same amount of time the sheep runs 'further_run'.\n    # Hence, we get the following equation:\n    # 21/20 * further_run = ahead_start + further_run\n    # Solving for further_run:\n    ahead_start = 30\n    further_run = ahead_start / (21/20 - 1)\n\n    return further_run\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    for i in range(1, 2017):\n        if sqrt(i * 72).is_integer():\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    wands_plus_cards = 69\n    wands_minus_cards = 17\n    \n    cards = (wands_plus_cards - wands_minus_cards) / 2\n    wands = cards + wands_minus_cards\n    \n    return int(wands)\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of water in containers P and Q\n    P, Q = symbols('P Q')\n\n    # Write the equations based on the given information\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for current ages and the number of years from now\n    danny_current, efron_current, years = symbols('danny_current efron_current years')\n    \n    # Write the equations based on the problem statement\n    equation1 = Eq(danny_current - efron_current, 30)\n    equation2 = Eq(danny_current / efron_current, 8 / 3)\n    equation3 = Eq((danny_current + years) / (efron_current + years), 5 / 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (danny_current, efron_current, years))\n    \n    return solutions[years]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(0, 5), (-1, 7), (-1, 8)]\n\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_initial = 100\n    butter_initial = 40\n    cookies_final = 150\n\n    butter_final = (butter_initial / cookies_initial) * cookies_final\n    return butter_final\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # You can choose (a pencil and a ruler), (a pencil and a pen) or (a ruler and a pen)\n\n    ways_to_choose = (pencils * rulers) + (pencils * pens) + (rulers * pens)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage games:\n    # Each group has 4 teams, and each team plays against every other team once.\n    # In a group of 4, that's 3 games per team, but each game involves two teams,\n    # so we divide the total games in one group by 2 to avoid double counting.\n    games_per_group = (4 * 3) // 2\n    total_group_games = games_per_group * 8  # 8 groups in total\n\n    # Knockout round games:\n    # For the top 16, we have 8 games, then 4 for the quarter-finals,\n    # 2 for the semi-finals, and then there are two more games remaining,\n    # one for the final and one for the third place play-off.\n    total_knockout_games = 8 + 4 + 2 + 1 + 1  # Top 16, Top 8, Top 4, Final, Third place\n\n    total_games = total_group_games + total_knockout_games\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit > 9:\n            break  # Skip if the first digit is not a valid digit (0-9)\n        for third_digit in range(10):\n            if 1 <= second_digit < 10 and first_digit + second_digit + third_digit > 9 and first_digit + second_digit + third_digit < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    import math\n\n    teams = 16\n    rounds = int(math.log(teams, 2))\n\n    return rounds\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while (n * (n - 1)) // 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from math import sqrt\n\n    n = 224\n    factors = set()\n    \n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / 0.7\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n    \n    ans = pencil_colours * ruler_colours * pen_colours\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    # Let x be the number of correct answers and (total_questions - x) be the wrong answers\n    # 6x - 2*(total_questions - x) = total_points\n    # Solve for x\n    x = (total_points + 2 * total_questions) / (points_correct + abs(points_incorrect))\n\n    return int(x)\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n    third_term = second_term + difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If they both eat 8 sweets, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total amount of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    # Since there are 4 lamp posts, there will be 3 intervals between them.\n    # Each interval is 25 meters.\n    # The distance from the first to the last is the sum of all intervals.\n    \n    distance_per_interval = 25\n    number_of_intervals = 3  # because there are 4 lamp posts\n    total_distance = distance_per_interval * number_of_intervals\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let g be the number of all-girls teams\n    one_boy_teams = 15  # Teams with only 1 boy\n    two_or_more_boys = 27  # Teams with two or more boys\n    all_boy_teams = 2 * g  # All-boy teams are twice the all-girl teams\n\n    # Total teams\n    total_teams = 150 // 3\n\n    # Equation:\n    # one_boy_teams + two_or_more_boys + all_boy_teams + g = total number of teams\n    g = symbols('g')\n    equation = Eq(one_boy_teams + two_or_more_boys + 2*g + g, total_teams)\n\n    # Solve for g (all-girl teams)\n    num_all_girl_teams = solve(equation, g)[0]\n\n    # The number of girls is 3 times the number of all-girl teams\n    num_girls = 3 * num_all_girl_teams\n\n    return num_girls\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of triangles as t, quadrilaterals as q, and pentagons as p.\n    t, q, p = symbols('t q p')\n    \n    # We have the following information:\n    # - There are 2 pentagons (p=2).\n    p = 2\n    \n    # - The number of quadrilaterals is 82 more than that of triangles (q = t + 82).\n    # - The total number of sides is 394.\n    # A triangle has 3 sides, a quadrilateral has 4 sides, and a pentagon has 5 sides.\n    # So, the total number of sides is 3*t + 4*q + 5*p = 394.\n\n    # Here we have 2 equations with 2 unknowns:\n    # 1) q - t = 82\n    # 2) 3*t + 4*q + 5*p = 394\n    \n    # we substitute p with 2\n    equation2 = Eq(3*t + 4*q + 5*2, 394)\n\n    # Substitute q with t+82 in the second equation\n    equation2_subs = equation2.subs(q, t + 82)\n    \n    # Solve for t\n    num_triangles = solve(equation2_subs, t)\n    \n    # Since we now have the number of triangles, we can find the number of quadrilaterals\n    num_quadrilaterals = num_triangles[0] + 82\n    \n    return num_quadrilaterals\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"6{i}{j}\")\n            if number % 3 == 0 and number % 5 == 0 and number % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    # Since boiling eggs is a parallel process, the time to boil does not depend on the number of eggs,\n    # as long as they fit in the pot and are boiled together.\n    time_to_boil_2_eggs = 6\n    time_to_boil_4_eggs = time_to_boil_2_eggs # It's the same as the time to boil 2 eggs since it's one pot\n    return time_to_boil_4_eggs\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    base = 7\n    num1 = int('61', base)  # Convert base 7 number to base 10\n    num2 = int('34', base)  # Convert base 7 number to base 10\n\n    result_in_base10 = num1 - num2\n    ans = ''\n    while result_in_base10 > 0:\n        ans = str(result_in_base10 % base) + ans\n        result_in_base10 //= base\n\n    return ans if ans else '0'  # Return '0' if the result is 0\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    dog_to_rabbit = 8\n    # 1 rabbit = 2 chickens\n    rabbit_to_chicken = 2\n\n    # 1 dog = 8 rabbits * 2 chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    blue_gloves = 1 + 3  # left-hand + right-hand\n    green_gloves = 2 + 4\n    # Pigeonhole principle: take all from one color plus one more glove to ensure a pair\n    return max(blue_gloves, green_gloves) + 1\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    original_students = 5\n    candies_each = 12\n    new_students = original_students + 1\n    total_candies = original_students * candies_each\n    new_candies_each = total_candies // new_students\n    return new_candies_each\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Distance remains the same in both scenarios.\n    # Time taken at 10 km/h = distance / 10.\n    # Time taken at 15 km/h = distance / 15.\n    # Hence, distance / 10 - distance / 15 = 2 hours (difference between 8 am and 10 am)\n\n    # To arrive at 9 am, the time taken = distance / speed = time at 10 km/h - 1 hour\n    # (Since 9 am is one hour earlier than 10 am and he should be cycling faster)\n    # distance = speed * (distance / 10 - 1)\n\n    # We find the distance first from the two given times and speeds.\n    # Let distance be 'd' and required speed be 's'.\n    # Therefore, d / 10 - d / 15 = 2.\n    # Solving for d gives d = 30 km (Multiplying the entire equation by 30 to clear fractions)\n\n    # Now we know the distance, we can find the required speed 's' to arrive at 9 am.\n    # d = s * (d / 10 - 1)\n    # Substituting d with 30 km from above, we get:\n    # 30 = s * (30 / 10 - 1)\n    # 30 = s * (3 - 1)\n    # 30 = 2s\n    # s = 30 / 2 = 15 km/h\n\n    # Since he already reaches a speed of 15 km/h to reach at 8 am, to reach at 9 am:\n    # We simply need to average the two speeds (10 km/h and 15 km/h) as the arrival time of 9 am is exactly between 8 am and 10 am.\n    # Average speed = (10 km/h + 15 km/h) / 2 = 12.5 km/h\n\n    required_speed = (10 + 15) / 2\n    return required_speed\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n    # Using the approximate value given\n    value_after_years = initial_value * approximate_depreciation\n\n    return value_after_years\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    original_ratio = Eq(eugene, 3 * yuna)\n    new_ratio = Eq(yuna + 76, (7/9) * eugene)\n\n    solutions = solve((original_ratio, new_ratio), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "def solution():\n    track_length = 400  # perimeter of the circular track\n    time_to_overtake = 10  # time in minutes for Xiao Xia to overtake Xiao Hua\n    \n    # Calculate the speed difference based on being overtaken every 10 minutes on a 400m track\n    speed_difference = track_length / time_to_overtake  # meters per minute\n    \n    # Xiao Hua increases speed by 15 meters per minute\n    increased_speed_hua = 15\n    \n    # New time to overtake is the track length divided by the new speed difference (old difference + increased speed of Xiao Hua)\n    new_time_to_overtake = track_length / (speed_difference + increased_speed_hua)\n    \n    return new_time_to_overtake\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    number = 2 * 100 + 8 * 10 + 5\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    sale_price = original_price * (100 - discount_percentage) / 100\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # If Kelly wants to ensure her victory, she needs to make sure that Dan is always faced\n    # with a multiple of 3 number of matches. This way, no matter if Dan picks 1 or 2 matches,\n    # Kelly can always pick the remainder to keep the number of matches as a multiple of 3.\n\n    # We start backwards, thinking about the move that ensures Kelly's victory.\n    # If Dan is faced with 3 matches he will lose because Kelly will pick up the remaining two or one match.\n    # So we need to find a move for Kelly that will put Dan in a losing state (faced with 3 matches).\n\n    # Since the game starts with 11 matches and we want to eventually hit a multiple of 3,\n    # Kelly should remove enough matches to make the pile a multiple of 3.\n\n    # By trial, starting from 11:\n    # - If Kelly takes away 1 match, there will be 10 matches left (not a multiple of 3).\n    # - If Kelly takes away 2 matches, there will be 9 matches left (a multiple of 3).\n    \n    # Therefore, Kelly should take away 2 matches on her first turn to ensure a win.\n\n    return 2\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Initialize the difference between the number of boys and girls\n    difference = 52\n    \n    # Initialize the total number of students\n    total_students = 0\n    \n    # Start with the outer layer (boys) and count towards the center\n    layer = 0  # Outermost layer index (0-based)\n    \n    # Loop until we find the correct configuration where the difference in\n    # the number of boys and girls matches the given difference.\n    while True:\n        # At each layer calculate number of boys and girls\n        boys = (layer * 2 + 1)**2 - (layer * 2 - 1 if layer > 0 else 0)**2\n        girls = ((layer + 1) * 2)**2 - (layer * 2 + 1)**2\n        \n        # Update the total number of students\n        total_students += boys + girls\n        \n        # Check if the current layer configuration gives us the correct difference\n        if boys - girls == difference:\n            break\n        \n        # Move to next (inner) layer\n        layer += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4/7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    solutions = solve(equation, total_flowers)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # A six-digit number divisible by 9 must have the sum of its digits divisible by 9.\n    # Sum of the given digits 1 + 2 + 3 + 4 + 5 = 15.\n    # To find A, we need to find the smallest number such that (15 + A) is divisible by 9.\n    # The next multiple of 9 after 15 is 18, and then 27, 36, etc.\n    # The smallest A that satisfies this is (18 - 15) = 3.\n\n    # To find the remainder when the six-digit number is divided by 4,\n    # we only need to consider the last two digits of the number, which are \"5A\".\n    # Since we found A to be 3, the last two digits are \"53\".\n\n    # To find the remainder of 53 divided by 4,\n    remainder = 53 % 4\n\n    return remainder\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    \n    number_of_kids = 3\n    ways_to_arrange = factorial(number_of_kids) # Using the factorial function to find the number of permutations\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    \n    equation = Eq(4 * square - 3, 65)\n    \n    solution = solve(equation, square)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cars, motorcycles = symbols('cars motorcycles')\n    \n    # equation for the total number of vehicles\n    equation1 = Eq(cars + motorcycles, 27)\n    # equation for the total number of wheels\n    equation2 = Eq(4*cars + 2*motorcycles, 78)\n    \n    solutions = solve((equation1, equation2), (cars, motorcycles))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_orig = 20\n    jason_after = jason_orig + 18\n    nicole_after = jason_after + 5\n    nicole_orig = nicole_after - 18\n    \n    return nicole_orig\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Let the original length, breadth, and height be 1 (100% of their values)\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # Calculate the new length, breadth, and height\n    new_length = original_length * 1.10  # Increased by 10%\n    new_breadth = original_breadth * 4 / 5  # Reduced to 4/5 of the original\n    new_height = original_height * 11 / 10  # New height to original height ratio is 11:10\n\n    # Calculate the original volume\n    original_volume = original_length * original_breadth * original_height\n\n    # Calculate the new volume\n    new_volume = new_length * new_breadth * new_height\n\n    # Express the new volume as a percentage of the original volume\n    percentage_change = (new_volume / original_volume) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    # 5 1/7 = (5*7 + 1) / 7\n    num1 = Fraction(5 * 7 + 1, 7)\n    # 3 3/11 = (3*11 + 3) / 11\n    num2 = Fraction(3 * 11 + 3, 11)\n    # 1 13/23 = (1*23 + 13) / 23\n    num3 = Fraction(1 * 23 + 13, 23)\n\n    # 3 3/7 = (3*7 + 3) / 7\n    den1 = Fraction(3 * 7 + 3, 7)\n    # 2 2/11 = (2*11 + 2) / 11\n    den2 = Fraction(2 * 11 + 2, 11)\n    # 1 1/23 = (1*23 + 1) / 23\n    den3 = Fraction(1 * 23 + 1, 23)\n\n    # Calculate the sum of the numerators and denominators separately\n    num_sum = num1 + num2 + num3\n    den_sum = den1 + den2 + den3\n\n    # Divide the sum of the numerators by the sum of the denominators\n    answer = num_sum / den_sum\n\n    return answer\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for x in range(0, (77//2)+1):  # x is the number of 2-gram weights\n        for y in range(0, (77//3)+1):  # y is the number of 3-gram weights\n            if 2*x + 3*y == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # Convert to meters\n    num_intervals = 9 - 1  # Number of intervals between marshals\n\n    distance_between_marshals = total_distance_m / num_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    # Calculate the distance covered in both intervals\n    distance_initial = speed_initial * time_initial  # Distance when not tired\n    distance_tired = speed_tired * time_tired        # Distance when tired\n    \n    # Total distance is the sum of distances covered in both intervals\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03  # 3%\n\n    # Calculate interest for the first year\n    first_year_interest = principal * interest_rate\n    # Update principal for the second year\n    new_principal = principal + first_year_interest\n    # Calculate interest for the second year\n    second_year_interest = new_principal * interest_rate\n\n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # time to paint one picture in minutes\n    total_time_available = 80  # total time available in minutes (1 hour and 20 minutes)\n\n    pictures_painted = total_time_available // time_for_one_picture\n\n    return pictures_painted\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4/7)\n    ans = round(mixed_number, 1)\n    return ans\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sales of Megacorp in 2014\n    x = symbols('x')\n\n    # Vastco's sales in 2014 (68% more than Megacorp) and in 2015 (32% rise)\n    vastco_2014 = x * 1.68\n    vastco_2015 = vastco_2014 * 1.32\n\n    # Megacorp's sales in 2014 and 2015 (let y be the sales in 2015)\n    y = symbols('y')\n    megacorp_2015 = y\n\n    # Vastco sold 44% more widgets than Megacorp in 2015\n    eq = Eq(vastco_2015, megacorp_2015 * 1.44)\n\n    # Solve for y\n    megacorp_sales_2015 = solve(eq, y)[0]\n\n    # Calculate the percentage increase in Megacorp's sales from 2014 to 2015\n    percent_increase = ((megacorp_sales_2015 - x) / x) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    # Since the recurring decimal for 3/7 is 428571, we know the sequence repeats every 6 digits.\n    recurring_sequence = \"428571\"\n\n    # To find the 69th digit, we find the remainder of 69 divided by 6,\n    # because the sequence repeats every 6 digits.\n    remainder = 69 % len(recurring_sequence)\n\n    # If the remainder is 0, it means the 69th digit is the last digit in the sequence.\n    # We must adjust the remainder to be the length of the sequence to get the last digit.\n    if remainder == 0:\n        remainder = len(recurring_sequence)\n\n    # As indices in Python are 0-based, we have to subtract 1 to get the correct position.\n    # However, if the remainder was adjusted to the length of the sequence, it's already correct.\n    # Thus, we need to subtract 1 only when the original remainder was not 0.\n    index = remainder - 1 if remainder != len(recurring_sequence) else remainder - 1\n\n    # Return the 69th character in the recurring sequence.\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the planned profit, 'x' be the discount rate on the second day\n    p, x = symbols('p x')\n\n    # Ken planned to earn a 50% profit on the total cost 'c' of the goods\n    c = 1  # Let the total cost be 1 (the actual value doesn't affect the discount rate)\n    planned_profit = 0.5 * c\n\n    # On the first day, he sold 70% of his goods at a 50% profit\n    first_day_sales = 0.7 * c\n    first_day_profit = 0.5 * first_day_sales\n\n    # On the second day, he sold the remaining 30% of his goods at a discount rate 'x'\n    second_day_sales = 0.3 * c * (1 - x)\n\n    # The expected second day profit without any discount is 50% of the second day sales\n    expected_second_day_profit = 0.5 * 0.3 * c\n\n    # The actual second day profit after discount is the second day sales minus the cost of the remaining 30% of goods\n    actual_second_day_profit = second_day_sales - 0.3 * c\n\n    # The total actual profit is the sum of the first day profit and the second day profit after discount\n    total_actual_profit = first_day_profit + actual_second_day_profit\n\n    # The total actual profit was 82% of the planned profit\n    equation = Eq(total_actual_profit, 0.82 * planned_profit)\n\n    # Solve the equation to find the discount rate 'x'\n    solution = solve(equation, x)\n    discount_rate = solution[0]\n\n    return discount_rate\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n\n    red_tiles = 0\n    green_tiles = 0\n\n    # Loop through each layer from the outside in\n    for layer in range(0, side_length // 2):\n        # Calculate number of tiles in current red layer (4 sides minus 4 corners)\n        layer_size = side_length - 2 * layer\n        red_layer_tiles = 4 * layer_size - 4\n        red_tiles += red_layer_tiles\n        \n        # Update side length for the inner green layer\n        side_length -= 2\n\n    # If the number of layers is odd, the center tile will be red\n    if (int(total_tiles ** 0.5) % 2) == 1:\n        red_tiles += 1\n\n    # Calculate green tiles as the remainder\n    green_tiles = total_tiles - red_tiles\n\n    if red_tiles > green_tiles:\n        dominant_color = 'Red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'Green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    return concentration * 100\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bought = 48\n    empty_bottles = total_bought\n    total_drinks = total_bought\n\n    while empty_bottles >= 4:\n        new_bottles, leftover_empty = divmod(empty_bottles, 4)\n        total_drinks += new_bottles\n        empty_bottles = new_bottles + leftover_empty\n\n        # Borrow 1 empty bottle if possible\n        if empty_bottles == 3 and new_bottles != 0:\n            empty_bottles += 1\n            total_drinks += 1\n\n    return total_drinks\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits for numbers with 1 digit (1-9)\n    one_digit = 9 * 1\n    \n    # Calculate the number of digits for numbers with 2 digits (10-99)\n    two_digit = (99 - 10 + 1) * 2\n    \n    # Calculate the number of digits for numbers with 3 digits (100-113)\n    three_digit = (113 - 100 + 1) * 3\n    \n    # Total number of digits is the sum of the above three calculations\n    total_digits = one_digit + two_digit + three_digit\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pearls = symbols('total_pearls')\n    floor = total_pearls / 2\n    chair = total_pearls / 4\n    lap = total_pearls / 6\n    strand = 3\n\n    equation = Eq(floor + chair + lap + strand, total_pearls)\n\n    ans = solve(equation, total_pearls)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done = workers * days\n    days_for_one_worker = work_done / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Set up the equations based on the given information\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(younger_daughter - older_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Among the solved ages, find the youngest child\n    youngest_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    people = [\"Len\", \"Joe\", \"Angle\", \"Jack\"]\n    entrances = [1, 2, 3]\n    all_scenarios = permutations(people, len(entrances))\n    \n    valid_scenarios = set()\n    for scenario in all_scenarios:\n        if len(set(scenario)) == len(entrances):\n            # Convert to a tuple to avoid issues with ordering.\n            valid_scenarios.add(tuple(sorted(scenario)))\n    \n    # Calculate the number of valid scenarios considering that each \n    # person can choose any entrance (3 choices each).\n    ans = len(valid_scenarios) * (3**4)\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n    # Let x be the number of erasers John's brother has\n    # Then John has x + 32 erasers\n    # Their total is x + (x + 32) = 246\n    # Solving for x gives us:\n    x = (total_erasers - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit_per_safe_glass = 1\n    loss_per_broken_glass = -1\n    final_profit = 92\n\n    # Let's denote the number of broken glasses as 'b'.\n    # The number of safely delivered glasses would then be 'total_glasses - b'.\n    # The profit from safely delivered glasses is 'profit_per_safe_glass * (total_glasses - b)'.\n    # The loss from broken glasses is 'loss_per_broken_glass * b'.\n    # Final profit is the sum of profit from safely delivered glasses and loss from broken glasses.\n\n    # Equation for final profit:\n    # profit_per_safe_glass * (total_glasses - b) + loss_per_broken_glass * b = final_profit\n    # b = (profit_per_safe_glass * total_glasses - final_profit) / (profit_per_safe_glass - loss_per_broken_glass)\n\n    b = (profit_per_safe_glass * total_glasses - final_profit) / (profit_per_safe_glass - loss_per_broken_glass)\n    return int(b)\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin tournament with n teams, each team plays every other team once.\n    # Therefore, the total number of matches is given by the combination of n teams taken 2 at a time,\n    # which is n*(n-1)/2. We know this number is 45, so we have the equation n*(n-1)/2 = 45.\n    # We can solve this quadratic equation for n.\n    \n    # Assuming n is an integer, we will try every possible integer value of n\n    # until we find one that satisfies the equation.\n    n = 1\n    while True:\n        if n * (n - 1) // 2 == 45:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    income_ratio_a_to_b = 5 / 8\n    expenditure_ratio_a_to_b = 3 / 4\n    saving_a = 240\n    saving_b = 480\n    \n    income_a, income_b = symbols('income_a income_b')\n    expenditure_a = income_a - saving_a\n    expenditure_b = income_b - saving_b\n    \n    # Set up the system of equations\n    eq1 = Eq(income_a / income_b, income_ratio_a_to_b)\n    eq2 = Eq(expenditure_a / expenditure_b, expenditure_ratio_a_to_b)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (income_a, income_b))\n    \n    # Get Person A's income\n    person_a_income = solutions[income_a]\n    return person_a_income\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost  # Convert £12 to pence for consistency\n    return change / 100  # Convert the change back to pounds from pence\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let x be the smallest integer, then x+2 and x+4 will be the next two.\n    # The sum of these three consecutive odd integers is 57.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + (x + 2) + (x + 4), 57)\n\n    smallest_integer = solve(equation, x)[0]\n\n    return smallest_integer\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if num * 3 == 2:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the 3 numbers\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies John and Peter have\n    john, peter = symbols('john peter')\n\n    # Create the equations based on the problem statement\n    # John initially has 180 more cookies than Peter\n    equation1 = Eq(john - 180, peter)\n    # After selling some cookies, John has 1/2 as many cookies as Peter has left\n    equation2 = Eq(john - 4/5 * john, 1/2 * (peter - 3/10 * peter))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, peter))\n\n    # Return the number of cookies John had at first\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    # Starting from the smallest multiple of 4 greater than 5, which is 8,\n    # and ending with the largest multiple of 4 less than 15, which is 12.\n    possible_numbers = [i for i in range(8, 15, 4) if 36 % i == 0]\n    return possible_numbers[0] if possible_numbers else None\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    \n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 7]\n    perm = permutations(digits, 4)\n    min_sum = None  # Initial value for comparison\n    \n    for p in perm:\n        num1 = p[0]*10 + p[1]\n        num2 = p[2]*10 + p[3]\n        total = num1 + num2\n        \n        if min_sum is None or total < min_sum:\n            min_sum = total\n    \n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60  # Sum of percentages from the first 4 tests\n    total_marks_after = total_marks_before + 70  # Sum of percentages including the 5th test\n    average_after = total_marks_after / 5  # New average\n\n    return average_after\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples_eaten = (total_horses * apples_per_horse +\n                          total_pigs * apples_per_pig +\n                          total_rabbits * apples_per_rabbit)\n    \n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_eaten = total_apples_eaten / total_animals\n\n    return average_apples_eaten\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Loop through all 3-digit numbers\n        first_digit = i // 100\n        second_digit = (i // 10) % 10\n        third_digit = i % 10\n        if first_digit + second_digit == third_digit:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n\n    sale_plan_1_discount = 1  # 1 dollar off each cup\n    sale_plan_2_discount_per_3_cups = 5  # 5 dollars off every 3 cups\n\n    # Calculate the cost with sale plan 1\n    total_cost_plan_1 = (full_price_per_cup - sale_plan_1_discount) * number_of_cups\n\n    # Calculate the cost with sale plan 2\n    sets_of_3_cups = number_of_cups // 3\n    remaining_cups = number_of_cups % 3\n    total_cost_plan_2 = (sets_of_3_cups * (3 * full_price_per_cup - sale_plan_2_discount_per_3_cups)) + \\\n                        (remaining_cups * full_price_per_cup)\n\n    # Choose the cheaper plan\n    ans = min(total_cost_plan_1, total_cost_plan_2)\n\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for number of peaches, students in class A and class B\n    peaches, students_A, students_B = symbols('peaches students_A students_B')\n    \n    # create equations based on the problem statements\n    class_A_peaches = Eq(peaches, students_A * 5 + 10)  # all peaches to class A with 10 left\n    class_B_peaches = Eq(peaches, students_B * 8 + 2)  # all peaches to class B with 2 more needed\n    class_difference = Eq(students_A, students_B + 3)  # class A has 3 more students than B\n\n    # solve the equations\n    solutions = solve((class_A_peaches, class_B_peaches, class_difference), (peaches, students_A, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number_to_round = 3172\n    rounded_number = round(number_to_round / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total = 0\n    for i in range(1, 2018):\n        total += int('2' * i)\n    last_five_digits = total % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    orange_drink_volume = 12\n    water_fraction = 3/4\n\n    water_volume = orange_drink_volume * water_fraction\n    \n    return water_volume\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    units_of_547 = 547 % 10\n    units_of_479 = 479 % 10\n    product_units = (units_of_547 * units_of_479) % 10\n    return product_units\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the lengths of AB, BC, and CA be a, b, and c respectively.\n    a, b, c = symbols('a b c', positive=True)\n    \n    # Travel times for each cyclist\n    # A's travel times: AB/a, BC/b, and CA/c\n    # B's travel times: AB/b, BC/b, and CA/a\n    # C's travel times: AB/c, BC/a, and CA/b\n    # Given speeds: A (12, 10, 15), B (15, 15, 10), C (10, 20, 12)\n    \n    # Set up the equations according to the problem statement indicating\n    # that all three cyclists arrive at endpoint A at the same time.\n    # Since time equals distance divided by speed:\n    eq1 = Eq(a/12 + b/10 + c/15, a/15 + b/15 + c/10)\n    eq2 = Eq(a/12 + b/10 + c/15, a/10 + b/20 + c/12)\n\n    # Solve the equations to find the ratios of a:b:c\n    solutions = solve((eq1, eq2), (a, b, c))\n    \n    # Solutions will give us a ratio of a:b:c since the actual values\n    # do not matter. We can use any one of the solutions as they are proportional.\n    ratio_a, ratio_b, ratio_c = solutions[a], solutions[b], solutions[c]\n    \n    # To compute the angle at B (ABC), we will use the fact that if\n    # two triangles have sides in proportion, they are similar.\n    # Therefore, the ratio of AB to BC is equal to the ratio of AC to AB.\n    # So, angle ABC is the same as angle ACB of the larger triangle formed.\n    # Since the larger triangle is isosceles, angle ABC = angle ACB = (180 - angle BAC)/2.\n    \n    # Since we are dealing with ratios and the triangles are similar,\n    # we don't need actual lengths, so let's compute the angle in degrees.\n    angle_ABC = (180 - ratio_a/ratio_c * 90) / 2  # 90 degrees for a right angle\n    \n    return angle_ABC.evalf()\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    part_size = 300 / total_parts\n    raspberry_juice = part_size * 1\n    return raspberry_juice\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Betty's speed in metres per minute (assuming 1 store length = 900m)\n    speed_betty = 900 / 6 \n    \n    # Kevin's speed in metres per minute after 6 minutes\n    speed_kevin = 150 / 6 \n    \n    # Kevin's distance to the store after walking for another 3 minutes\n    kevin_distance_to_store = speed_kevin * 3\n    \n    # We know Betty will be 900 metres away from the cinema after walking 9 minutes (6 + 3 minutes)\n    # Since Kevin arrives at the store after another 3 minutes, that means Betty walked \n    # for the same amount of time that Kevin did until he reached the store.\n\n    # Betty's total distance walked when Kevin reaches the store\n    distance_betty = speed_betty * 9\n    \n    # Betty's distance to the store when Kevin just starts walking\n    betty_initial_distance = distance_betty - kevin_distance_to_store\n    \n    # Time it took Betty to walk to the position where Kevin started\n    time_for_betty_to_reach_kevin_start = betty_initial_distance / speed_betty\n    \n    # Time Betty leaves earlier than Kevin (total time minus 6 minutes Kevin has already walked)\n    time_difference = time_for_betty_to_reach_kevin_start - 6\n\n    return time_difference\n\nans = solution()"
    ]
}